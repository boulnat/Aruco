/*
 * AS7341.c
 *
 *  Created on: Mar 30, 2021
 *      Author: boulnat
 */
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <AS7341.h>

uint16_t readChannel(I2C_HandleTypeDef *hi2c1, as7341_adc_channel_t channel) {

	uint8_t read[2];
	uint16_t read16bits = 0;
	uint8_t regCh[] = {0x61,0x62};
	uint8_t data[] = {0xA9, 0x08};
	//uint8_t data[] = {0x80, 0x01};
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);


	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, regCh, 2, HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
	while(HAL_I2C_Master_Receive(hi2c1, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);


	read16bits = (read[0] << 8) | read[1];
	return read16bits;

}

uint16_t getChannel(as7341_color_channel_t channel) {
  return _channel_readings[channel];
}

bool readAllChannels(uint16_t *readings_buffer) {

  setSMUXLowChannels(true);        // Configure SMUX to read low channels
  enableSpectralMeasurement(true); // Start integration
  delayForData(0);                 // I'll wait for you for all time

  Adafruit_BusIO_Register channel_data_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CH0_DATA_L, 2);

  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);

  setSMUXLowChannels(false);       // Configure SMUX to read high channels
  enableSpectralMeasurement(true); // Start integration
  delayForData(0);                 // I'll wait for you for all time

  return low_success &&
         channel_data_reg.read((uint8_t *)&readings_buffer[6], 12);
}

void setSMUXLowChannels(bool f1_f4) {
  enableSpectralMeasurement(false);
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
  if (f1_f4) {
    setup_F1F4_Clear_NIR();
  } else {
    setup_F5F8_Clear_NIR();
  }
  enableSMUX();
}

bool setSMUXCommand(as7341_smux_cmd_t command) {

	uint8_t read[2];
	uint16_t read16bits = 0;
	uint8_t regCh[] = {AS7341_CFG6,0x62};
	uint8_t data[] = {0xA9, 0x08};
	//uint8_t data[] = {0x80, 0x01};
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);


	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, regCh, 2, HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
	while(HAL_I2C_Master_Receive(hi2c1, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);


  Adafruit_BusIO_Register cfg6_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
  Adafruit_BusIO_RegisterBits smux_command_bits =
      Adafruit_BusIO_RegisterBits(&cfg6_reg, 2, 3);

  return smux_command_bits.write(command);
}

bool enableSpectralMeasurement(bool enable_measurement) {

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);

  Adafruit_BusIO_RegisterBits spec_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 1);
  return spec_enable_bit.write(enable_measurement);
}

void delayForData(int waitTime) {
  if (waitTime == 0) // Wait forever
  {
    while (!getIsDataReady()) {
      delay(1);
    }
    return;
  }
  if (waitTime > 0) // Wait for that many milliseconds
  {
    uint32_t elapsedMillis = 0;
    while (!getIsDataReady() && elapsedMillis < waitTime) {
      delay(1);
      elapsedMillis++;
    }
    return;
  }
  if (waitTime < 0) {
    // For future use?
    return;
  }
}

