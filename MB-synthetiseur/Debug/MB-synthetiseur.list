
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800dbb0  0800dbb0  0001dbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e08c  0800e08c  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  0800e08c  0800e08c  0001e08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e094  0800e094  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e094  0800e094  0001e094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e098  0800e098  0001e098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0800e09c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008644  20000314  0800e3b0  00020314  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008958  0800e3b0  00028958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033787  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060a9  00000000  00000000  00053acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002240  00000000  00000000  00059b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fd8  00000000  00000000  0005bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295f7  00000000  00000000  0005dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027aeb  00000000  00000000  00087387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef357  00000000  00000000  000aee72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019e1c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e90  00000000  00000000  0019e21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000314 	.word	0x20000314
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db94 	.word	0x0800db94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000318 	.word	0x20000318
 80001cc:	0800db94 	.word	0x0800db94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <AS7341init>:
/*
void AS7341begin(I2C_HandleTypeDef hi2c1){

}
*/
bool AS7341init(I2C_HandleTypeDef hi2c1, int32_t sensor_id){
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	f107 0c08 	add.w	ip, r7, #8
 8000eea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	as7341.hi2c 			= hi2c1;
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <AS7341init+0xf0>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	224c      	movs	r2, #76	; 0x4c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f00a f979 	bl	800b1f0 <memcpy>

	as7341.sensor_ID 		= sensor_id;
 8000efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <AS7341init+0xf0>)
 8000f04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	as7341.writing_ID		= 0x72;
 8000f08:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <AS7341init+0xf0>)
 8000f0a:	2272      	movs	r2, #114	; 0x72
 8000f0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	as7341.astep.address_L 	= AS7341_ASTEP_L;
 8000f10:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <AS7341init+0xf0>)
 8000f12:	22ca      	movs	r2, #202	; 0xca
 8000f14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	as7341.astep.address_H 	= AS7341_ASTEP_H;
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <AS7341init+0xf0>)
 8000f1a:	22cb      	movs	r2, #203	; 0xcb
 8000f1c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	as7341.astep.value		= 1;
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <AS7341init+0xf0>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	as7341.atime.address 	= AS7341_ATIME;
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <AS7341init+0xf0>)
 8000f2a:	2281      	movs	r2, #129	; 0x81
 8000f2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	as7341.atime.value		= 999;
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <AS7341init+0xf0>)
 8000f32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	as7341.gain.address		= AS7341_CFG1;
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <AS7341init+0xf0>)
 8000f3c:	22aa      	movs	r2, #170	; 0xaa
 8000f3e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	as7341.integrationTime	= (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000;
 8000f42:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <AS7341init+0xf0>)
 8000f44:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000f48:	3301      	adds	r3, #1
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <AS7341init+0xf0>)
 8000f4c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8000f50:	3201      	adds	r2, #1
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fae4 	bl	8000524 <__aeabi_i2d>
 8000f5c:	a31a      	add	r3, pc, #104	; (adr r3, 8000fc8 <AS7341init+0xe8>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fb49 	bl	80005f8 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <AS7341init+0xf4>)
 8000f74:	f7ff fc6a 	bl	800084c <__aeabi_ddiv>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fe12 	bl	8000ba8 <__aeabi_d2uiz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <AS7341init+0xf0>)
 8000f8a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	as7341_enable_reg = 0x01; /* set PON to 1 */
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <AS7341init+0xf8>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
	errAS7341 = writeRegister(AS7341_ENABLE, as7341_enable_reg);
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <AS7341init+0xf8>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2080      	movs	r0, #128	; 0x80
 8000f9c:	f000 fb8c 	bl	80016b8 <writeRegister>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <AS7341init+0xfc>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	return errAS7341;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <AS7341init+0xfc>)
 8000faa:	f993 3000 	ldrsb.w	r3, [r3]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fc0:	b004      	add	sp, #16
 8000fc2:	4770      	bx	lr
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	a3d70a3d 	.word	0xa3d70a3d
 8000fcc:	40063d70 	.word	0x40063d70
 8000fd0:	200085a4 	.word	0x200085a4
 8000fd4:	408f4000 	.word	0x408f4000
 8000fd8:	20000331 	.word	0x20000331
 8000fdc:	20000330 	.word	0x20000330

08000fe0 <setASTEP>:
//TESTED
as7341_ReturnError_t setASTEP(uint16_t  astep_value) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
	//make sure ASTEP is between 0 and 65534
	if(astep_value<0 || astep_value>=65535){
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d102      	bne.n	8000ffa <setASTEP+0x1a>
		return AS7341_ERROR_ASTEP_OUT_OF_RANGE;
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	e01c      	b.n	8001034 <setASTEP+0x54>
	}

	//write to the LSB astep_value
	errAS7341 = writeRegister(AS7341_ASTEP_L, astep_value);
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4619      	mov	r1, r3
 8001000:	20ca      	movs	r0, #202	; 0xca
 8001002:	f000 fb59 	bl	80016b8 <writeRegister>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <setASTEP+0x5c>)
 800100c:	701a      	strb	r2, [r3, #0]
	//write to the MSB astep_value
	errAS7341 = writeRegister(AS7341_ASTEP_H, astep_value>>8);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4619      	mov	r1, r3
 8001018:	20cb      	movs	r0, #203	; 0xcb
 800101a:	f000 fb4d 	bl	80016b8 <writeRegister>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <setASTEP+0x5c>)
 8001024:	701a      	strb	r2, [r3, #0]
	//copy value to register stm32 if everything is ok
	as7341.astep.value = astep_value;
 8001026:	4a06      	ldr	r2, [pc, #24]	; (8001040 <setASTEP+0x60>)
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50

	return errAS7341;
 800102e:	4b03      	ldr	r3, [pc, #12]	; (800103c <setASTEP+0x5c>)
 8001030:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000330 	.word	0x20000330
 8001040:	200085a4 	.word	0x200085a4

08001044 <setATIME>:

//TESTED
as7341_ReturnError_t setATIME(uint8_t atime_value) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	//make sure ATIME is between 0 and 255
	if(atime_value<0 || atime_value>=255){
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2bff      	cmp	r3, #255	; 0xff
 8001052:	d102      	bne.n	800105a <setATIME+0x16>
		return AS7341_ERROR_ATIME_OUT_OF_RANGE;
 8001054:	f06f 0301 	mvn.w	r3, #1
 8001058:	e010      	b.n	800107c <setATIME+0x38>
	}

	//uint8_t data[] = {as7341.atime.address, atime_value};
	//set atime on AS7341
	//uint8_t data[] = {AS7341_ATIME, atime_value};
	errAS7341 = writeRegister(AS7341_ATIME, atime_value);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4619      	mov	r1, r3
 800105e:	2081      	movs	r0, #129	; 0x81
 8001060:	f000 fb2a 	bl	80016b8 <writeRegister>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <setATIME+0x40>)
 800106a:	701a      	strb	r2, [r3, #0]
	//status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, data, sizeof(data), HAL_MAX_DELAY);
	//status = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);

	as7341.atime.value = atime_value;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <setATIME+0x44>)
 8001072:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	return errAS7341;
 8001076:	4b03      	ldr	r3, [pc, #12]	; (8001084 <setATIME+0x40>)
 8001078:	f993 3000 	ldrsb.w	r3, [r3]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000330 	.word	0x20000330
 8001088:	200085a4 	.word	0x200085a4

0800108c <setGain>:

//TESTED
as7341_ReturnError_t setGain(uint8_t gain_value) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	//make sure GAIN is between 0 and 10
	if(gain_value<AS7341_GAIN_0_5X || gain_value>=AS7341_GAIN_512X){
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b09      	cmp	r3, #9
 800109a:	d902      	bls.n	80010a2 <setGain+0x16>
		return AS7341_ERROR_ATIME_OUT_OF_RANGE;
 800109c:	f06f 0301 	mvn.w	r3, #1
 80010a0:	e00f      	b.n	80010c2 <setGain+0x36>
	}

	//uint8_t data[] = {as7341.gain.address, gain_value};
	//set gain on AS7341
	//uint8_t data[] = {as7341.gain.address, gain_value};
	errAS7341 = writeRegister(AS7341_CFG1, gain_value);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	20aa      	movs	r0, #170	; 0xaa
 80010a8:	f000 fb06 	bl	80016b8 <writeRegister>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <setGain+0x40>)
 80010b2:	701a      	strb	r2, [r3, #0]
	//status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, data, sizeof(data), HAL_MAX_DELAY);
	//status = HAL_I2C_IsDeviceReady(&as7341.hi2c, as7341.writing_ID, 10, 200);

	as7341.gain.value = gain_value;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <setGain+0x44>)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57

	return errAS7341;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <setGain+0x40>)
 80010be:	f993 3000 	ldrsb.w	r3, [r3]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000330 	.word	0x20000330
 80010d0:	200085a4 	.word	0x200085a4

080010d4 <readAllChannels>:
	  as7341.rawToBasicCounts = raw / (gain_val * (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000);
	  return as7341.rawToBasicCounts;
}

//TESTED
as7341_ReturnError_t readAllChannels(uint16_t *readings_buffer) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[1];

	regwrite[0]=AS7341_CH0_DATA_L;
 80010dc:	2395      	movs	r3, #149	; 0x95
 80010de:	733b      	strb	r3, [r7, #12]

    errAS7341 = setSMUXLowChannels(1);        /* Configure SMUX to read low channels */
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 fb15 	bl	8001710 <setSMUXLowChannels>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b85      	ldr	r3, [pc, #532]	; (8001300 <readAllChannels+0x22c>)
 80010ec:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 80010ee:	4b84      	ldr	r3, [pc, #528]	; (8001300 <readAllChannels+0x22c>)
 80010f0:	f993 3000 	ldrsb.w	r3, [r3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <readAllChannels+0x2c>
 80010f8:	4b81      	ldr	r3, [pc, #516]	; (8001300 <readAllChannels+0x22c>)
 80010fa:	f993 3000 	ldrsb.w	r3, [r3]
 80010fe:	e0fa      	b.n	80012f6 <readAllChannels+0x222>

    errAS7341 = enableSpectralMeasurement(1); /* Start integration */
 8001100:	2001      	movs	r0, #1
 8001102:	f000 f9e7 	bl	80014d4 <enableSpectralMeasurement>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	4b7d      	ldr	r3, [pc, #500]	; (8001300 <readAllChannels+0x22c>)
 800110c:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 800110e:	4b7c      	ldr	r3, [pc, #496]	; (8001300 <readAllChannels+0x22c>)
 8001110:	f993 3000 	ldrsb.w	r3, [r3]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <readAllChannels+0x4c>
 8001118:	4b79      	ldr	r3, [pc, #484]	; (8001300 <readAllChannels+0x22c>)
 800111a:	f993 3000 	ldrsb.w	r3, [r3]
 800111e:	e0ea      	b.n	80012f6 <readAllChannels+0x222>
    //osDelay(500); /* IMPORTANT NEED TO GIVE TIME FOR SPECTRO TO GET READY */

    errAS7341 = delayForData(0);                 /* I'll wait for you for all time */
 8001120:	2000      	movs	r0, #0
 8001122:	f000 f8f5 	bl	8001310 <delayForData>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b75      	ldr	r3, [pc, #468]	; (8001300 <readAllChannels+0x22c>)
 800112c:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 800112e:	4b74      	ldr	r3, [pc, #464]	; (8001300 <readAllChannels+0x22c>)
 8001130:	f993 3000 	ldrsb.w	r3, [r3]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <readAllChannels+0x6c>
 8001138:	4b71      	ldr	r3, [pc, #452]	; (8001300 <readAllChannels+0x22c>)
 800113a:	f993 3000 	ldrsb.w	r3, [r3]
 800113e:	e0da      	b.n	80012f6 <readAllChannels+0x222>


    errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, 1, HAL_MAX_DELAY);
 8001140:	4b70      	ldr	r3, [pc, #448]	; (8001304 <readAllChannels+0x230>)
 8001142:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001146:	b299      	uxth	r1, r3
 8001148:	f107 020c 	add.w	r2, r7, #12
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	486b      	ldr	r0, [pc, #428]	; (8001304 <readAllChannels+0x230>)
 8001156:	f003 fbd7 	bl	8004908 <HAL_I2C_Master_Transmit>
 800115a:	4603      	mov	r3, r0
 800115c:	b25a      	sxtb	r2, r3
 800115e:	4b68      	ldr	r3, [pc, #416]	; (8001300 <readAllChannels+0x22c>)
 8001160:	701a      	strb	r2, [r3, #0]
    errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8001162:	4b68      	ldr	r3, [pc, #416]	; (8001304 <readAllChannels+0x230>)
 8001164:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001168:	b299      	uxth	r1, r3
 800116a:	23c8      	movs	r3, #200	; 0xc8
 800116c:	220a      	movs	r2, #10
 800116e:	4865      	ldr	r0, [pc, #404]	; (8001304 <readAllChannels+0x230>)
 8001170:	f003 fdb4 	bl	8004cdc <HAL_I2C_IsDeviceReady>
 8001174:	4603      	mov	r3, r0
 8001176:	b25a      	sxtb	r2, r3
 8001178:	4b61      	ldr	r3, [pc, #388]	; (8001300 <readAllChannels+0x22c>)
 800117a:	701a      	strb	r2, [r3, #0]

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 800117c:	4b61      	ldr	r3, [pc, #388]	; (8001304 <readAllChannels+0x230>)
 800117e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001182:	b299      	uxth	r1, r3
 8001184:	f107 020c 	add.w	r2, r7, #12
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	485c      	ldr	r0, [pc, #368]	; (8001304 <readAllChannels+0x230>)
 8001192:	f003 fbb9 	bl	8004908 <HAL_I2C_Master_Transmit>
 8001196:	4603      	mov	r3, r0
 8001198:	b25a      	sxtb	r2, r3
 800119a:	4b59      	ldr	r3, [pc, #356]	; (8001300 <readAllChannels+0x22c>)
 800119c:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 800119e:	4b59      	ldr	r3, [pc, #356]	; (8001304 <readAllChannels+0x230>)
 80011a0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80011a4:	b299      	uxth	r1, r3
 80011a6:	23c8      	movs	r3, #200	; 0xc8
 80011a8:	220a      	movs	r2, #10
 80011aa:	4856      	ldr	r0, [pc, #344]	; (8001304 <readAllChannels+0x230>)
 80011ac:	f003 fd96 	bl	8004cdc <HAL_I2C_IsDeviceReady>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	4b52      	ldr	r3, [pc, #328]	; (8001300 <readAllChannels+0x22c>)
 80011b6:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, (uint8_t *)as7341._channel_readings, 12, HAL_MAX_DELAY);
 80011b8:	4b52      	ldr	r3, [pc, #328]	; (8001304 <readAllChannels+0x230>)
 80011ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80011be:	b299      	uxth	r1, r3
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	230c      	movs	r3, #12
 80011c8:	4a4f      	ldr	r2, [pc, #316]	; (8001308 <readAllChannels+0x234>)
 80011ca:	484e      	ldr	r0, [pc, #312]	; (8001304 <readAllChannels+0x230>)
 80011cc:	f003 fc90 	bl	8004af0 <HAL_I2C_Master_Receive>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <readAllChannels+0x22c>)
 80011d6:	701a      	strb	r2, [r3, #0]

  	if(errAS7341){return errAS7341;}
 80011d8:	4b49      	ldr	r3, [pc, #292]	; (8001300 <readAllChannels+0x22c>)
 80011da:	f993 3000 	ldrsb.w	r3, [r3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <readAllChannels+0x116>
 80011e2:	4b47      	ldr	r3, [pc, #284]	; (8001300 <readAllChannels+0x22c>)
 80011e4:	f993 3000 	ldrsb.w	r3, [r3]
 80011e8:	e085      	b.n	80012f6 <readAllChannels+0x222>

  	errAS7341 = setSMUXLowChannels(0);       /* Configure SMUX to read high channels */
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 fa90 	bl	8001710 <setSMUXLowChannels>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b42      	ldr	r3, [pc, #264]	; (8001300 <readAllChannels+0x22c>)
 80011f6:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 80011f8:	4b41      	ldr	r3, [pc, #260]	; (8001300 <readAllChannels+0x22c>)
 80011fa:	f993 3000 	ldrsb.w	r3, [r3]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <readAllChannels+0x136>
 8001202:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <readAllChannels+0x22c>)
 8001204:	f993 3000 	ldrsb.w	r3, [r3]
 8001208:	e075      	b.n	80012f6 <readAllChannels+0x222>

  	errAS7341 = enableSpectralMeasurement(1); /* Start integration */
 800120a:	2001      	movs	r0, #1
 800120c:	f000 f962 	bl	80014d4 <enableSpectralMeasurement>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <readAllChannels+0x22c>)
 8001216:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8001218:	4b39      	ldr	r3, [pc, #228]	; (8001300 <readAllChannels+0x22c>)
 800121a:	f993 3000 	ldrsb.w	r3, [r3]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <readAllChannels+0x156>
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <readAllChannels+0x22c>)
 8001224:	f993 3000 	ldrsb.w	r3, [r3]
 8001228:	e065      	b.n	80012f6 <readAllChannels+0x222>
  	//osDelay(500); /* IMPORTANT NEED TO GIVE TIME FOR SPECTRO TO GET READY */

  	errAS7341 = delayForData(0);                 /* I'll wait for you for all time */
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f870 	bl	8001310 <delayForData>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <readAllChannels+0x22c>)
 8001236:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8001238:	4b31      	ldr	r3, [pc, #196]	; (8001300 <readAllChannels+0x22c>)
 800123a:	f993 3000 	ldrsb.w	r3, [r3]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <readAllChannels+0x176>
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <readAllChannels+0x22c>)
 8001244:	f993 3000 	ldrsb.w	r3, [r3]
 8001248:	e055      	b.n	80012f6 <readAllChannels+0x222>

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, 1, HAL_MAX_DELAY);
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <readAllChannels+0x230>)
 800124c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001250:	b299      	uxth	r1, r3
 8001252:	f107 020c 	add.w	r2, r7, #12
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	4829      	ldr	r0, [pc, #164]	; (8001304 <readAllChannels+0x230>)
 8001260:	f003 fb52 	bl	8004908 <HAL_I2C_Master_Transmit>
 8001264:	4603      	mov	r3, r0
 8001266:	b25a      	sxtb	r2, r3
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <readAllChannels+0x22c>)
 800126a:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <readAllChannels+0x230>)
 800126e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001272:	b299      	uxth	r1, r3
 8001274:	23c8      	movs	r3, #200	; 0xc8
 8001276:	220a      	movs	r2, #10
 8001278:	4822      	ldr	r0, [pc, #136]	; (8001304 <readAllChannels+0x230>)
 800127a:	f003 fd2f 	bl	8004cdc <HAL_I2C_IsDeviceReady>
 800127e:	4603      	mov	r3, r0
 8001280:	b25a      	sxtb	r2, r3
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <readAllChannels+0x22c>)
 8001284:	701a      	strb	r2, [r3, #0]

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <readAllChannels+0x230>)
 8001288:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800128c:	b299      	uxth	r1, r3
 800128e:	f107 020c 	add.w	r2, r7, #12
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	481a      	ldr	r0, [pc, #104]	; (8001304 <readAllChannels+0x230>)
 800129c:	f003 fb34 	bl	8004908 <HAL_I2C_Master_Transmit>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b25a      	sxtb	r2, r3
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <readAllChannels+0x22c>)
 80012a6:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <readAllChannels+0x230>)
 80012aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80012ae:	b299      	uxth	r1, r3
 80012b0:	23c8      	movs	r3, #200	; 0xc8
 80012b2:	220a      	movs	r2, #10
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <readAllChannels+0x230>)
 80012b6:	f003 fd11 	bl	8004cdc <HAL_I2C_IsDeviceReady>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b25a      	sxtb	r2, r3
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <readAllChannels+0x22c>)
 80012c0:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, (uint8_t *)&as7341._channel_readings[6], 12, HAL_MAX_DELAY);
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <readAllChannels+0x230>)
 80012c4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80012c8:	b299      	uxth	r1, r3
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	230c      	movs	r3, #12
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <readAllChannels+0x238>)
 80012d4:	480b      	ldr	r0, [pc, #44]	; (8001304 <readAllChannels+0x230>)
 80012d6:	f003 fc0b 	bl	8004af0 <HAL_I2C_Master_Receive>
 80012da:	4603      	mov	r3, r0
 80012dc:	b25a      	sxtb	r2, r3
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <readAllChannels+0x22c>)
 80012e0:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <readAllChannels+0x22c>)
 80012e4:	f993 3000 	ldrsb.w	r3, [r3]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <readAllChannels+0x220>
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <readAllChannels+0x22c>)
 80012ee:	f993 3000 	ldrsb.w	r3, [r3]
 80012f2:	e000      	b.n	80012f6 <readAllChannels+0x222>

	return AS7341_ERROR_NO;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000330 	.word	0x20000330
 8001304:	200085a4 	.word	0x200085a4
 8001308:	20008608 	.word	0x20008608
 800130c:	20008614 	.word	0x20008614

08001310 <delayForData>:

//TESTED
as7341_ReturnError_t delayForData(int waitTime) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	if(waitTime == 0){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10a      	bne.n	8001334 <delayForData+0x24>
		while(!getIsDataReady()) {
 800131e:	bf00      	nop
 8001320:	f000 f910 	bl	8001544 <getIsDataReady>
 8001324:	4603      	mov	r3, r0
 8001326:	f083 0301 	eor.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f7      	bne.n	8001320 <delayForData+0x10>
			/* TODO add a timeout */
		}
		return AS7341_ERROR_NO;
 8001330:	2300      	movs	r3, #0
 8001332:	e000      	b.n	8001336 <delayForData+0x26>
	}

	return AS7341_ERROR_NO;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <getChannel>:

	//as7341._channel_readings[channel] = ((as7341._channel_readings[channel] & 0x00FF) << 8) | (as7341._channel_readings[channel]>>8);
	return AS7341_ERROR_NO;
}
//TESTED
uint16_t getChannel(as7341_color_channel_t channel) {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	/*  Swap msb and lsb  */
	return (((as7341._channel_readings[channel] & 0x00FF) << 8) | (as7341._channel_readings[channel]>>8));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <getChannel+0x40>)
 800134e:	3330      	adds	r3, #48	; 0x30
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	889b      	ldrh	r3, [r3, #4]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	4908      	ldr	r1, [pc, #32]	; (8001380 <getChannel+0x40>)
 800135e:	3330      	adds	r3, #48	; 0x30
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	440b      	add	r3, r1
 8001364:	889b      	ldrh	r3, [r3, #4]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b21b      	sxth	r3, r3
 8001370:	b29b      	uxth	r3, r3
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200085a4 	.word	0x200085a4

08001384 <setup_F1F4_Clear_NIR>:
	  default:
	    return 0;
	  }
}

void setup_F1F4_Clear_NIR() {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  // SMUX Config for F1,F2,F3,F4,NIR,Clear
  writeRegister((0x00), (0x30)); // F3 left set to ADC2
 8001388:	2130      	movs	r1, #48	; 0x30
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f994 	bl	80016b8 <writeRegister>
  writeRegister((0x01), (0x01)); // F1 left set to ADC0
 8001390:	2101      	movs	r1, #1
 8001392:	2001      	movs	r0, #1
 8001394:	f000 f990 	bl	80016b8 <writeRegister>
  writeRegister((0x02), (0x00)); // Reserved or disabled
 8001398:	2100      	movs	r1, #0
 800139a:	2002      	movs	r0, #2
 800139c:	f000 f98c 	bl	80016b8 <writeRegister>
  writeRegister((0x03), (0x00)); // F8 left disabled
 80013a0:	2100      	movs	r1, #0
 80013a2:	2003      	movs	r0, #3
 80013a4:	f000 f988 	bl	80016b8 <writeRegister>
  writeRegister((0x04), (0x00)); // F6 left disabled
 80013a8:	2100      	movs	r1, #0
 80013aa:	2004      	movs	r0, #4
 80013ac:	f000 f984 	bl	80016b8 <writeRegister>
  writeRegister((0x05), (0x42)); // F4 left connected to ADC3/f2 left connected to ADC1
 80013b0:	2142      	movs	r1, #66	; 0x42
 80013b2:	2005      	movs	r0, #5
 80013b4:	f000 f980 	bl	80016b8 <writeRegister>
  writeRegister((0x06), (0x00)); // F5 left disbled
 80013b8:	2100      	movs	r1, #0
 80013ba:	2006      	movs	r0, #6
 80013bc:	f000 f97c 	bl	80016b8 <writeRegister>
  writeRegister((0x07), (0x00)); // F7 left disbled
 80013c0:	2100      	movs	r1, #0
 80013c2:	2007      	movs	r0, #7
 80013c4:	f000 f978 	bl	80016b8 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR connected to ADC4
 80013c8:	2150      	movs	r1, #80	; 0x50
 80013ca:	2008      	movs	r0, #8
 80013cc:	f000 f974 	bl	80016b8 <writeRegister>
  writeRegister((0x09), (0x00)); // F5 right disabled
 80013d0:	2100      	movs	r1, #0
 80013d2:	2009      	movs	r0, #9
 80013d4:	f000 f970 	bl	80016b8 <writeRegister>
  writeRegister((0x0A), (0x00)); // F7 right disabled
 80013d8:	2100      	movs	r1, #0
 80013da:	200a      	movs	r0, #10
 80013dc:	f000 f96c 	bl	80016b8 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 80013e0:	2100      	movs	r1, #0
 80013e2:	200b      	movs	r0, #11
 80013e4:	f000 f968 	bl	80016b8 <writeRegister>
  writeRegister((0x0C), (0x20)); // F2 right connected to ADC1
 80013e8:	2120      	movs	r1, #32
 80013ea:	200c      	movs	r0, #12
 80013ec:	f000 f964 	bl	80016b8 <writeRegister>
  writeRegister((0x0D), (0x04)); // F4 right connected to ADC3
 80013f0:	2104      	movs	r1, #4
 80013f2:	200d      	movs	r0, #13
 80013f4:	f000 f960 	bl	80016b8 <writeRegister>
  writeRegister((0x0E), (0x00)); // F6/F8 right disabled
 80013f8:	2100      	movs	r1, #0
 80013fa:	200e      	movs	r0, #14
 80013fc:	f000 f95c 	bl	80016b8 <writeRegister>
  writeRegister((0x0F), (0x30)); // F3 right connected to AD2
 8001400:	2130      	movs	r1, #48	; 0x30
 8001402:	200f      	movs	r0, #15
 8001404:	f000 f958 	bl	80016b8 <writeRegister>
  writeRegister((0x10), (0x01)); // F1 right connected to AD0
 8001408:	2101      	movs	r1, #1
 800140a:	2010      	movs	r0, #16
 800140c:	f000 f954 	bl	80016b8 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 8001410:	2150      	movs	r1, #80	; 0x50
 8001412:	2011      	movs	r0, #17
 8001414:	f000 f950 	bl	80016b8 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 8001418:	2100      	movs	r1, #0
 800141a:	2012      	movs	r0, #18
 800141c:	f000 f94c 	bl	80016b8 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 8001420:	2106      	movs	r1, #6
 8001422:	2013      	movs	r0, #19
 8001424:	f000 f948 	bl	80016b8 <writeRegister>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <setup_F5F8_Clear_NIR>:

void setup_F5F8_Clear_NIR() {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  // SMUX Config for F5,F6,F7,F8,NIR,Clear
  writeRegister((0x00), (0x00)); // F3 left disable
 8001430:	2100      	movs	r1, #0
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f940 	bl	80016b8 <writeRegister>
  writeRegister((0x01), (0x00)); // F1 left disable
 8001438:	2100      	movs	r1, #0
 800143a:	2001      	movs	r0, #1
 800143c:	f000 f93c 	bl	80016b8 <writeRegister>
  writeRegister((0x02), (0x00)); // reserved/disable
 8001440:	2100      	movs	r1, #0
 8001442:	2002      	movs	r0, #2
 8001444:	f000 f938 	bl	80016b8 <writeRegister>
  writeRegister((0x03), (0x40)); // F8 left connected to ADC3
 8001448:	2140      	movs	r1, #64	; 0x40
 800144a:	2003      	movs	r0, #3
 800144c:	f000 f934 	bl	80016b8 <writeRegister>
  writeRegister((0x04), (0x02)); // F6 left connected to ADC1
 8001450:	2102      	movs	r1, #2
 8001452:	2004      	movs	r0, #4
 8001454:	f000 f930 	bl	80016b8 <writeRegister>
  writeRegister((0x05), (0x00)); // F4/ F2 disabled
 8001458:	2100      	movs	r1, #0
 800145a:	2005      	movs	r0, #5
 800145c:	f000 f92c 	bl	80016b8 <writeRegister>
  writeRegister((0x06), (0x10)); // F5 left connected to ADC0
 8001460:	2110      	movs	r1, #16
 8001462:	2006      	movs	r0, #6
 8001464:	f000 f928 	bl	80016b8 <writeRegister>
  writeRegister((0x07), (0x03)); // F7 left connected to ADC2
 8001468:	2103      	movs	r1, #3
 800146a:	2007      	movs	r0, #7
 800146c:	f000 f924 	bl	80016b8 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR Connected to ADC4
 8001470:	2150      	movs	r1, #80	; 0x50
 8001472:	2008      	movs	r0, #8
 8001474:	f000 f920 	bl	80016b8 <writeRegister>
  writeRegister((0x09), (0x10)); // F5 right connected to ADC0
 8001478:	2110      	movs	r1, #16
 800147a:	2009      	movs	r0, #9
 800147c:	f000 f91c 	bl	80016b8 <writeRegister>
  writeRegister((0x0A), (0x03)); // F7 right connected to ADC2
 8001480:	2103      	movs	r1, #3
 8001482:	200a      	movs	r0, #10
 8001484:	f000 f918 	bl	80016b8 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 8001488:	2100      	movs	r1, #0
 800148a:	200b      	movs	r0, #11
 800148c:	f000 f914 	bl	80016b8 <writeRegister>
  writeRegister((0x0C), (0x00)); // F2 right disabled
 8001490:	2100      	movs	r1, #0
 8001492:	200c      	movs	r0, #12
 8001494:	f000 f910 	bl	80016b8 <writeRegister>
  writeRegister((0x0D), (0x00)); // F4 right disabled
 8001498:	2100      	movs	r1, #0
 800149a:	200d      	movs	r0, #13
 800149c:	f000 f90c 	bl	80016b8 <writeRegister>
  writeRegister((0x0E), (0x24)); // F8 right connected to ADC2/ F6 right connected to ADC1
 80014a0:	2124      	movs	r1, #36	; 0x24
 80014a2:	200e      	movs	r0, #14
 80014a4:	f000 f908 	bl	80016b8 <writeRegister>
  writeRegister((0x0F), (0x00)); // F3 right disabled
 80014a8:	2100      	movs	r1, #0
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f904 	bl	80016b8 <writeRegister>
  writeRegister((0x10), (0x00)); // F1 right disabled
 80014b0:	2100      	movs	r1, #0
 80014b2:	2010      	movs	r0, #16
 80014b4:	f000 f900 	bl	80016b8 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 80014b8:	2150      	movs	r1, #80	; 0x50
 80014ba:	2011      	movs	r0, #17
 80014bc:	f000 f8fc 	bl	80016b8 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 80014c0:	2100      	movs	r1, #0
 80014c2:	2012      	movs	r0, #18
 80014c4:	f000 f8f8 	bl	80016b8 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 80014c8:	2106      	movs	r1, #6
 80014ca:	2013      	movs	r0, #19
 80014cc:	f000 f8f4 	bl	80016b8 <writeRegister>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <enableSpectralMeasurement>:
	uint8_t regWrite[] = {AS7341_ENABLE, 0x01}; //PON to 1
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200) != HAL_OK);
}

as7341_ReturnError_t enableSpectralMeasurement(bool enable_measurement) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[2];
	regwrite[0] = AS7341_ENABLE;
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	733b      	strb	r3, [r7, #12]

	/*
	 * 	   Changing the n_th bit to x
	 *     (number & ~(1UL << n)) will clear the nth bit and (x << n) will set the nth bit to x
	 */
	as7341_enable_reg = (as7341_enable_reg & ~(1UL << 0x01)) | (enable_measurement << 0x01); /* setting as7341_enable_reg bit 0x01 SP_EN to enable_measurement  */
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <enableSpectralMeasurement+0x68>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	f023 0302 	bic.w	r3, r3, #2
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <enableSpectralMeasurement+0x68>)
 80014f8:	701a      	strb	r2, [r3, #0]
	regwrite[1] = as7341_enable_reg;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <enableSpectralMeasurement+0x68>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY)!=HAL_OK);
 8001500:	bf00      	nop
 8001502:	f107 020c 	add.w	r2, r7, #12
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2302      	movs	r3, #2
 800150e:	2172      	movs	r1, #114	; 0x72
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <enableSpectralMeasurement+0x6c>)
 8001512:	f003 f9f9 	bl	8004908 <HAL_I2C_Master_Transmit>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f2      	bne.n	8001502 <enableSpectralMeasurement+0x2e>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 800151c:	bf00      	nop
 800151e:	23c8      	movs	r3, #200	; 0xc8
 8001520:	220a      	movs	r2, #10
 8001522:	2172      	movs	r1, #114	; 0x72
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <enableSpectralMeasurement+0x6c>)
 8001526:	f003 fbd9 	bl	8004cdc <HAL_I2C_IsDeviceReady>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f6      	bne.n	800151e <enableSpectralMeasurement+0x4a>

  return AS7341_ERROR_NO;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000331 	.word	0x20000331
 8001540:	200085a4 	.word	0x200085a4

08001544 <getIsDataReady>:
	uint8_t regwrite[]={AS7341_ENABLE,0x00}; //PON to 1
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
}

bool getIsDataReady(){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
	uint8_t regwrite[2];
	uint8_t regRead[1];

	regwrite[0] = AS7341_STATUS2;
 800154a:	23a3      	movs	r3, #163	; 0xa3
 800154c:	713b      	strb	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY);
 800154e:	1d3a      	adds	r2, r7, #4
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2301      	movs	r3, #1
 8001558:	2172      	movs	r1, #114	; 0x72
 800155a:	4820      	ldr	r0, [pc, #128]	; (80015dc <getIsDataReady+0x98>)
 800155c:	f003 f9d4 	bl	8004908 <HAL_I2C_Master_Transmit>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <getIsDataReady+0x9c>)
 8001566:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200);
 8001568:	23c8      	movs	r3, #200	; 0xc8
 800156a:	220a      	movs	r2, #10
 800156c:	2172      	movs	r1, #114	; 0x72
 800156e:	481b      	ldr	r0, [pc, #108]	; (80015dc <getIsDataReady+0x98>)
 8001570:	f003 fbb4 	bl	8004cdc <HAL_I2C_IsDeviceReady>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <getIsDataReady+0x9c>)
 800157a:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, regRead, sizeof(regRead), HAL_MAX_DELAY);
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <getIsDataReady+0x98>)
 800157e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001582:	b299      	uxth	r1, r3
 8001584:	463a      	mov	r2, r7
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	4813      	ldr	r0, [pc, #76]	; (80015dc <getIsDataReady+0x98>)
 8001590:	f003 faae 	bl	8004af0 <HAL_I2C_Master_Receive>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <getIsDataReady+0x9c>)
 800159a:	701a      	strb	r2, [r3, #0]
	 *  register clears that status bit. In this way, the user should read the STATUS register, handle all
	 *  indicated event(s) and then write the register value back to STATUS to clear the handled events.
	 *  Writing “0” will not clear those bits if they have a value of “1”, which means that new events that
	 *  occurred since the last read of the STATUS register will not be accidentally cleared.
	 */
	if(regRead[0]>>6){
 800159c:	783b      	ldrb	r3, [r7, #0]
 800159e:	099b      	lsrs	r3, r3, #6
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00e      	beq.n	80015c4 <getIsDataReady+0x80>
    	regwrite[1] = regRead[0];
 80015a6:	783b      	ldrb	r3, [r7, #0]
 80015a8:	717b      	strb	r3, [r7, #5]
    	status = HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 80015aa:	1d3a      	adds	r2, r7, #4
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2302      	movs	r3, #2
 80015b4:	2172      	movs	r1, #114	; 0x72
 80015b6:	4809      	ldr	r0, [pc, #36]	; (80015dc <getIsDataReady+0x98>)
 80015b8:	f003 f9a6 	bl	8004908 <HAL_I2C_Master_Transmit>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <getIsDataReady+0x9c>)
 80015c2:	701a      	strb	r2, [r3, #0]
    }

    return (regRead[0]>>6);
 80015c4:	783b      	ldrb	r3, [r7, #0]
 80015c6:	099b      	lsrs	r3, r3, #6
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200085a4 	.word	0x200085a4
 80015e0:	20008624 	.word	0x20008624

080015e4 <enableSMUX>:
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
	return 1;
}*/

bool enableSMUX() {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af02      	add	r7, sp, #8

	/*
	 * 	   Changing the n_th bit to x
	 *     (number & ~(1UL << n)) will clear the nth bit and (x << n) will set the nth bit to x
	 */
	as7341_enable_reg = (as7341_enable_reg & ~(1UL << 0x04)) | (0x01 << 0x04); /* setting as7341_enable_reg bit 0x04 SMUXEN to 0x01 (activate)  */
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <enableSMUX+0x68>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <enableSMUX+0x68>)
 80015f6:	701a      	strb	r2, [r3, #0]
	status = writeRegister(AS7341_ENABLE, as7341_enable_reg);
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <enableSMUX+0x68>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	2080      	movs	r0, #128	; 0x80
 8001600:	f000 f85a 	bl	80016b8 <writeRegister>
 8001604:	4603      	mov	r3, r0
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <enableSMUX+0x6c>)
 800160a:	701a      	strb	r2, [r3, #0]

	regwrite[0] = AS7341_ENABLE;
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	713b      	strb	r3, [r7, #4]
		 * To read a register, it must be selected with an I2C write operation by sending the appropriate register pointer
		 * (Note that if you have written this register right before the read then you do not have to send again its address to the pointer register,
		 * as you have already set it during write). Then with an I2C read operation.
		 *
		 * */
		status = HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY);
 8001610:	463a      	mov	r2, r7
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	2172      	movs	r1, #114	; 0x72
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <enableSMUX+0x70>)
 800161e:	f003 fa67 	bl	8004af0 <HAL_I2C_Master_Receive>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <enableSMUX+0x6c>)
 8001628:	701a      	strb	r2, [r3, #0]
	}while((regRead[0]>>4)!=0x01); /* TODO add timeout */
 800162a:	783b      	ldrb	r3, [r7, #0]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d1ed      	bne.n	8001610 <enableSMUX+0x2c>

    return status;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <enableSMUX+0x6c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf14      	ite	ne
 800163c:	2301      	movne	r3, #1
 800163e:	2300      	moveq	r3, #0
 8001640:	b2db      	uxtb	r3, r3
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000331 	.word	0x20000331
 8001650:	20008624 	.word	0x20008624
 8001654:	200085a4 	.word	0x200085a4

08001658 <setSMUXCommand>:
	while(HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);

	return read[0];
}

bool setSMUXCommand(as7341_smux_cmd_t command) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af02      	add	r7, sp, #8
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[2];
	status = 0; /* TODO check if needs to be set to 0 */
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <setSMUXCommand+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]

	regwrite[0] = AS7341_CFG6;
 8001668:	23af      	movs	r3, #175	; 0xaf
 800166a:	733b      	strb	r3, [r7, #12]
	regwrite[1] = command<<3;
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY)!=HAL_OK);
 8001674:	bf00      	nop
 8001676:	f107 020c 	add.w	r2, r7, #12
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2302      	movs	r3, #2
 8001682:	2172      	movs	r1, #114	; 0x72
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <setSMUXCommand+0x5c>)
 8001686:	f003 f93f 	bl	8004908 <HAL_I2C_Master_Transmit>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f2      	bne.n	8001676 <setSMUXCommand+0x1e>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8001690:	bf00      	nop
 8001692:	23c8      	movs	r3, #200	; 0xc8
 8001694:	220a      	movs	r2, #10
 8001696:	2172      	movs	r1, #114	; 0x72
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <setSMUXCommand+0x5c>)
 800169a:	f003 fb1f 	bl	8004cdc <HAL_I2C_IsDeviceReady>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f6      	bne.n	8001692 <setSMUXCommand+0x3a>

	return AS7341_ERROR_NO;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20008624 	.word	0x20008624
 80016b4:	200085a4 	.word	0x200085a4

080016b8 <writeRegister>:

as7341_ReturnError_t writeRegister(uint8_t addr, uint8_t val) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af02      	add	r7, sp, #8
 80016be:	4603      	mov	r3, r0
 80016c0:	460a      	mov	r2, r1
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	4613      	mov	r3, r2
 80016c6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {addr, val};
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	733b      	strb	r3, [r7, #12]
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 80016d0:	bf00      	nop
 80016d2:	f107 020c 	add.w	r2, r7, #12
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2302      	movs	r3, #2
 80016de:	2172      	movs	r1, #114	; 0x72
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <writeRegister+0x54>)
 80016e2:	f003 f911 	bl	8004908 <HAL_I2C_Master_Transmit>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f2      	bne.n	80016d2 <writeRegister+0x1a>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 80016ec:	bf00      	nop
 80016ee:	23c8      	movs	r3, #200	; 0xc8
 80016f0:	220a      	movs	r2, #10
 80016f2:	2172      	movs	r1, #114	; 0x72
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <writeRegister+0x54>)
 80016f6:	f003 faf1 	bl	8004cdc <HAL_I2C_IsDeviceReady>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f6      	bne.n	80016ee <writeRegister+0x36>
	return AS7341_ERROR_NO;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200085a4 	.word	0x200085a4

08001710 <setSMUXLowChannels>:
	status = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, &as7341.astep.value, 1, HAL_MAX_DELAY);
	return AS7341_ERROR_NO;
}

*/
as7341_ReturnError_t setSMUXLowChannels(bool f1_f4) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  as7341_ReturnError_t err = AS7341_ERROR_NO;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  err = enableSpectralMeasurement(0);
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff fed8 	bl	80014d4 <enableSpectralMeasurement>
 8001724:	4603      	mov	r3, r0
 8001726:	73fb      	strb	r3, [r7, #15]
  err = setSMUXCommand(AS7341_SMUX_CMD_WRITE);
 8001728:	2002      	movs	r0, #2
 800172a:	f7ff ff95 	bl	8001658 <setSMUXCommand>
 800172e:	4603      	mov	r3, r0
 8001730:	73fb      	strb	r3, [r7, #15]
  if (f1_f4) {
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <setSMUXLowChannels+0x2e>
    setup_F1F4_Clear_NIR();
 8001738:	f7ff fe24 	bl	8001384 <setup_F1F4_Clear_NIR>
 800173c:	e001      	b.n	8001742 <setSMUXLowChannels+0x32>
  } else {
    setup_F5F8_Clear_NIR();
 800173e:	f7ff fe75 	bl	800142c <setup_F5F8_Clear_NIR>
  }
  err = enableSMUX();
 8001742:	f7ff ff4f 	bl	80015e4 <enableSMUX>
 8001746:	4603      	mov	r3, r0
 8001748:	73fb      	strb	r3, [r7, #15]
  return err;
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <PCM9600begin>:
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <MCP9600.h>

bool PCM9600begin(PCM9600_t *module, I2C_HandleTypeDef hi2c1){
 8001756:	b084      	sub	sp, #16
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	f107 0014 	add.w	r0, r7, #20
 8001764:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	module->hi2c = hi2c1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	224c      	movs	r2, #76	; 0x4c
 8001772:	4619      	mov	r1, r3
 8001774:	f009 fd3c 	bl	800b1f0 <memcpy>
	module->sensor_ID = 0x80;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return 1;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800178c:	b004      	add	sp, #16
 800178e:	4770      	bx	lr

08001790 <getThermocoupleTemp>:
}

/*----------------------------- Sensor Measurements ---------------------*/

uint8_t getThermocoupleTemp(PCM9600_t *module, bool units)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  int16_t raw = readDoubleRegister(module, HOT_JUNC_TEMP);
 800179c:	2100      	movs	r1, #0
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f822 	bl	80017e8 <readDoubleRegister>
 80017a4:	4603      	mov	r3, r0
 80017a6:	81fb      	strh	r3, [r7, #14]
  uint8_t LSB = raw & 0x00FF;
 80017a8:	89fb      	ldrh	r3, [r7, #14]
 80017aa:	737b      	strb	r3, [r7, #13]
  uint8_t MSB = raw>>8;
 80017ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017b0:	121b      	asrs	r3, r3, #8
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	733b      	strb	r3, [r7, #12]

  if((MSB & 0x80) == 0x80){
 80017b6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da08      	bge.n	80017d0 <getThermocoupleTemp+0x40>
	  return(((MSB*16)+(LSB/16))-4096);
 80017be:	7b3b      	ldrb	r3, [r7, #12]
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	e007      	b.n	80017e0 <getThermocoupleTemp+0x50>
  }
  else{
	  return(((MSB*16)+(LSB/16)));
 80017d0:	7b3b      	ldrb	r3, [r7, #12]
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	7b7b      	ldrb	r3, [r7, #13]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4413      	add	r3, r2
 80017de:	b2db      	uxtb	r3, r3
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <readDoubleRegister>:
  return read8bits;

}

uint16_t readDoubleRegister(PCM9600_t *module, MCP9600_Register reg)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
  //Attempt to read the register until we exit with no error code
  //This attempts to fix the bug where clock stretching sometimes failes, as
  //described in the MCP9600 eratta
	uint8_t read[2]={0,0};
 80017f4:	2300      	movs	r3, #0
 80017f6:	81bb      	strh	r3, [r7, #12]
	uint16_t read16bits = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	81fb      	strh	r3, [r7, #14]

	while(HAL_I2C_Master_Transmit(&module->hi2c, 0xCE, &reg, 1, HAL_MAX_DELAY) != HAL_OK);
 80017fc:	bf00      	nop
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	1cfa      	adds	r2, r7, #3
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	21ce      	movs	r1, #206	; 0xce
 800180c:	f003 f87c 	bl	8004908 <HAL_I2C_Master_Transmit>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f3      	bne.n	80017fe <readDoubleRegister+0x16>
	while(HAL_I2C_IsDeviceReady(&module->hi2c,0xCE,10,200)!=HAL_OK);
 8001816:	bf00      	nop
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	23c8      	movs	r3, #200	; 0xc8
 800181c:	220a      	movs	r2, #10
 800181e:	21ce      	movs	r1, #206	; 0xce
 8001820:	f003 fa5c 	bl	8004cdc <HAL_I2C_IsDeviceReady>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f6      	bne.n	8001818 <readDoubleRegister+0x30>
	while(HAL_I2C_Master_Receive(&module->hi2c, 0XCF, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 800182a:	bf00      	nop
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f107 020c 	add.w	r2, r7, #12
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2302      	movs	r3, #2
 800183a:	21cf      	movs	r1, #207	; 0xcf
 800183c:	f003 f958 	bl	8004af0 <HAL_I2C_Master_Receive>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f2      	bne.n	800182c <readDoubleRegister+0x44>
	read16bits = (read[0] << 8) | read[1];
 8001846:	7b3b      	ldrb	r3, [r7, #12]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b21a      	sxth	r2, r3
 800184c:	7b7b      	ldrb	r3, [r7, #13]
 800184e:	b21b      	sxth	r3, r3
 8001850:	4313      	orrs	r3, r2
 8001852:	b21b      	sxth	r3, r3
 8001854:	81fb      	strh	r3, [r7, #14]
	return read16bits;
 8001856:	89fb      	ldrh	r3, [r7, #14]


}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001866:	463b      	mov	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001876:	4b29      	ldr	r3, [pc, #164]	; (800191c <MX_ADC1_Init+0xbc>)
 8001878:	4a29      	ldr	r2, [pc, #164]	; (8001920 <MX_ADC1_Init+0xc0>)
 800187a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <MX_ADC1_Init+0xbc>)
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <MX_ADC1_Init+0xbc>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <MX_ADC1_Init+0xbc>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <MX_ADC1_Init+0xbc>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <MX_ADC1_Init+0xbc>)
 8001896:	2204      	movs	r2, #4
 8001898:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <MX_ADC1_Init+0xbc>)
 800189c:	2200      	movs	r2, #0
 800189e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <MX_ADC1_Init+0xbc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <MX_ADC1_Init+0xbc>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_ADC1_Init+0xbc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_ADC1_Init+0xbc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_ADC1_Init+0xbc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_ADC1_Init+0xbc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_ADC1_Init+0xbc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_ADC1_Init+0xbc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018d6:	4811      	ldr	r0, [pc, #68]	; (800191c <MX_ADC1_Init+0xbc>)
 80018d8:	f001 fa2a 	bl	8002d30 <HAL_ADC_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80018e2:	f000 fb41 	bl	8001f68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_ADC1_Init+0xc4>)
 80018e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ea:	2306      	movs	r3, #6
 80018ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018f2:	237f      	movs	r3, #127	; 0x7f
 80018f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018f6:	2304      	movs	r3, #4
 80018f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	4619      	mov	r1, r3
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <MX_ADC1_Init+0xbc>)
 8001904:	f001 fb5c 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800190e:	f000 fb2b 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20008628 	.word	0x20008628
 8001920:	50040000 	.word	0x50040000
 8001924:	19200040 	.word	0x19200040

08001928 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a15      	ldr	r2, [pc, #84]	; (800199c <HAL_ADC_MspInit+0x74>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d124      	bne.n	8001994 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_ADC_MspInit+0x78>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_ADC_MspInit+0x78>)
 8001950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_ADC_MspInit+0x78>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_ADC_MspInit+0x78>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_ADC_MspInit+0x78>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_ADC_MspInit+0x78>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800197a:	2372      	movs	r3, #114	; 0x72
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800197e:	230b      	movs	r3, #11
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f002 fdc0 	bl	8004514 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	50040000 	.word	0x50040000
 80019a0:	40021000 	.word	0x40021000

080019a4 <spectro>:

/*******************************************************************************/
void program1ms(void){
	scenario();
}
void spectro(){
 80019a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a6:	b0ad      	sub	sp, #180	; 0xb4
 80019a8:	af10      	add	r7, sp, #64	; 0x40
      //PCM9600begin(hi2c1);
	  //AS7341begin(hi2c1);
	  PCM9600_t module;
	  PCM9600begin(&module, hi2c1);
 80019aa:	4e2f      	ldr	r6, [pc, #188]	; (8001a68 <spectro+0xc4>)
 80019ac:	f107 0c1c 	add.w	ip, r7, #28
 80019b0:	466d      	mov	r5, sp
 80019b2:	f106 040c 	add.w	r4, r6, #12
 80019b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019ca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80019ce:	4660      	mov	r0, ip
 80019d0:	f7ff fec1 	bl	8001756 <PCM9600begin>

	  AS7341init(hi2c1, 0x80);
 80019d4:	4e24      	ldr	r6, [pc, #144]	; (8001a68 <spectro+0xc4>)
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80019da:	466d      	mov	r5, sp
 80019dc:	f106 0410 	add.w	r4, r6, #16
 80019e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80019f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019f8:	f7ff fa72 	bl	8000ee0 <AS7341init>
	  /*  Tint = (ATIME + 1) × (ASTEP + 1) × 2.78µs
	   *  Tint = 50ms
	   * */
      setASTEP(599);
 80019fc:	f240 2057 	movw	r0, #599	; 0x257
 8001a00:	f7ff faee 	bl	8000fe0 <setASTEP>
      setATIME(29);
 8001a04:	201d      	movs	r0, #29
 8001a06:	f7ff fb1d 	bl	8001044 <setATIME>
      setGain(AS7341_GAIN_16X);
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f7ff fb3e 	bl	800108c <setGain>

      //startReading(); /* reading in a loop */

      uint16_t buff[12];
      do{
		  if(!readAllChannels(buff)){
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fb5e 	bl	80010d4 <readAllChannels>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f8      	bne.n	8001a10 <spectro+0x6c>


			  //cansend can0 602#3B00180510000000 ask for PDO every 10s
			  //cansend can0 602#4001640100000000
			  //!!!!weird number if scan is too fast
			  CO_OD_RAM.readAnalogueInput16Bit[0] = getChannel(AS7341_CHANNEL_415nm_F1);//getChannel(AS7341_CHANNEL_415nm_F1); //added by me set the value of an object
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff fc8e 	bl	8001340 <getChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b21a      	sxth	r2, r3
 8001a28:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <spectro+0xc8>)
 8001a2a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
			  CO_OD_RAM.readAnalogueInput16Bit[1] = getChannel(AS7341_CHANNEL_445nm_F2);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f7ff fc86 	bl	8001340 <getChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <spectro+0xc8>)
 8001a3a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
			  CO_OD_RAM.readAnalogueInput16Bit[2] = getChannel(AS7341_CHANNEL_480nm_F3);
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f7ff fc7e 	bl	8001340 <getChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <spectro+0xc8>)
 8001a4a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

			  CO_OD_RAM.readAnalogueInput16Bit[3] = getThermocoupleTemp(&module,0);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fe9b 	bl	8001790 <getThermocoupleTemp>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <spectro+0xc8>)
 8001a60:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
		  if(!readAllChannels(buff)){
 8001a64:	e7d4      	b.n	8001a10 <spectro+0x6c>
 8001a66:	bf00      	nop
 8001a68:	200086c0 	.word	0x200086c0
 8001a6c:	20000000 	.word	0x20000000

08001a70 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a76:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <MX_CAN1_Init+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ac2:	f001 fe5d 	bl	8003780 <HAL_CAN_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001acc:	f000 fa4c 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000868c 	.word	0x2000868c
 8001ad8:	40006400 	.word	0x40006400

08001adc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <HAL_CAN_MspInit+0xa0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d139      	bne.n	8001b72 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_CAN_MspInit+0xa4>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_CAN_MspInit+0xa4>)
 8001b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_CAN_MspInit+0xa4>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_CAN_MspInit+0xa4>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_CAN_MspInit+0xa4>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_CAN_MspInit+0xa4>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b40:	2309      	movs	r3, #9
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4e:	f002 fce1 	bl	8004514 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2105      	movs	r1, #5
 8001b56:	2013      	movs	r0, #19
 8001b58:	f002 fafc 	bl	8004154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001b5c:	2013      	movs	r0, #19
 8001b5e:	f002 fb15 	bl	800418c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2105      	movs	r1, #5
 8001b66:	2014      	movs	r0, #20
 8001b68:	f002 faf4 	bl	8004154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b6c:	2014      	movs	r0, #20
 8001b6e:	f002 fb0d 	bl	800418c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40006400 	.word	0x40006400
 8001b80:	40021000 	.word	0x40021000

08001b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_DMA_Init+0x48>)
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <MX_DMA_Init+0x48>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6493      	str	r3, [r2, #72]	; 0x48
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <MX_DMA_Init+0x48>)
 8001b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	2010      	movs	r0, #16
 8001ba8:	f002 fad4 	bl	8004154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001bac:	2010      	movs	r0, #16
 8001bae:	f002 faed 	bl	800418c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2105      	movs	r1, #5
 8001bb6:	2011      	movs	r0, #17
 8001bb8:	f002 facc 	bl	8004154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001bbc:	2011      	movs	r0, #17
 8001bbe:	f002 fae5 	bl	800418c <HAL_NVIC_EnableIRQ>

}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <MX_FREERTOS_Init+0x38>)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <MX_FREERTOS_Init+0x3c>)
 8001bda:	f006 fec5 	bl	8008968 <osThreadNew>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <MX_FREERTOS_Init+0x40>)
 8001be2:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <MX_FREERTOS_Init+0x44>)
 8001be6:	2100      	movs	r1, #0
 8001be8:	480b      	ldr	r0, [pc, #44]	; (8001c18 <MX_FREERTOS_Init+0x48>)
 8001bea:	f006 febd 	bl	8008968 <osThreadNew>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <MX_FREERTOS_Init+0x4c>)
 8001bf2:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <MX_FREERTOS_Init+0x50>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	480a      	ldr	r0, [pc, #40]	; (8001c24 <MX_FREERTOS_Init+0x54>)
 8001bfa:	f006 feb5 	bl	8008968 <osThreadNew>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <MX_FREERTOS_Init+0x58>)
 8001c02:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	0800dbf4 	.word	0x0800dbf4
 8001c0c:	08001c2d 	.word	0x08001c2d
 8001c10:	200086b4 	.word	0x200086b4
 8001c14:	0800dc18 	.word	0x0800dc18
 8001c18:	08001c3b 	.word	0x08001c3b
 8001c1c:	200086b8 	.word	0x200086b8
 8001c20:	0800dc3c 	.word	0x0800dc3c
 8001c24:	08001c45 	.word	0x08001c45
 8001c28:	200086bc 	.word	0x200086bc

08001c2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  spectro();
 8001c34:	f7ff feb6 	bl	80019a4 <spectro>
  {
 8001c38:	e7fc      	b.n	8001c34 <StartDefaultTask+0x8>

08001c3a <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */
  /* Infinite loop */
  for(;;)
 8001c42:	e7fe      	b.n	8001c42 <StartReadTempTask+0x8>

08001c44 <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f006 ff1d 	bl	8008a8c <osDelay>
 8001c52:	e7fb      	b.n	8001c4c <StartReadLightTask+0x8>

08001c54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MX_GPIO_Init+0x5c>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <MX_GPIO_Init+0x5c>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <MX_GPIO_Init+0x5c>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_GPIO_Init+0x5c>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <MX_GPIO_Init+0x5c>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_GPIO_Init+0x5c>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_GPIO_Init+0x5c>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <MX_GPIO_Init+0x5c>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_GPIO_Init+0x5c>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <MX_I2C1_Init+0x78>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cee:	480e      	ldr	r0, [pc, #56]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001cf0:	f002 fd7a 	bl	80047e8 <HAL_I2C_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cfa:	f000 f935 	bl	8001f68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4809      	ldr	r0, [pc, #36]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001d02:	f004 f847 	bl	8005d94 <HAL_I2CEx_ConfigAnalogFilter>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d0c:	f000 f92c 	bl	8001f68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d10:	2100      	movs	r1, #0
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_I2C1_Init+0x74>)
 8001d14:	f004 f889 	bl	8005e2a <HAL_I2CEx_ConfigDigitalFilter>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d1e:	f000 f923 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200086c0 	.word	0x200086c0
 8001d2c:	40005400 	.word	0x40005400

08001d30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_I2C_MspInit+0x9c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d137      	bne.n	8001dc2 <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_I2C_MspInit+0xa0>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_I2C_MspInit+0xa0>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_I2C_MspInit+0xa0>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d6a:	23c0      	movs	r3, #192	; 0xc0
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6e:	2312      	movs	r3, #18
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <HAL_I2C_MspInit+0xa4>)
 8001d86:	f002 fbc5 	bl	8004514 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_I2C_MspInit+0xa0>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_I2C_MspInit+0xa0>)
 8001d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d94:	6593      	str	r3, [r2, #88]	; 0x58
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_I2C_MspInit+0xa0>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2105      	movs	r1, #5
 8001da6:	201f      	movs	r0, #31
 8001da8:	f002 f9d4 	bl	8004154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001dac:	201f      	movs	r0, #31
 8001dae:	f002 f9ed 	bl	800418c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2105      	movs	r1, #5
 8001db6:	2020      	movs	r0, #32
 8001db8:	f002 f9cc 	bl	8004154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001dbc:	2020      	movs	r0, #32
 8001dbe:	f002 f9e5 	bl	800418c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400

08001dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ddc:	f000 fde4 	bl	80029a8 <HAL_Init>
  //uint8_t I2C_address = 0x80;
  //pca9685_init(&hi2c3, I2C_address);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de0:	f000 f818 	bl	8001e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de4:	f7ff ff36 	bl	8001c54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001de8:	f7ff fecc 	bl	8001b84 <MX_DMA_Init>
  MX_I2C1_Init();
 8001dec:	f7ff ff62 	bl	8001cb4 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001df0:	f7ff fe3e 	bl	8001a70 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001df4:	f000 fa90 	bl	8002318 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001df8:	f7ff fd32 	bl	8001860 <MX_ADC1_Init>
  MX_TIM15_Init();
 8001dfc:	f000 fb34 	bl	8002468 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001e00:	f000 fc46 	bl	8002690 <MX_USART2_UART_Init>
*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e04:	f006 fd66 	bl	80088d4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e08:	f7ff fee2 	bl	8001bd0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001e0c:	f006 fd86 	bl	800891c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <main+0x38>
	...

08001e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0ac      	sub	sp, #176	; 0xb0
 8001e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e1e:	2244      	movs	r2, #68	; 0x44
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f009 f9f2 	bl	800b20c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2254      	movs	r2, #84	; 0x54
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f009 f9e4 	bl	800b20c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e44:	f004 f83e 	bl	8005ec4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <SystemClock_Config+0x12c>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <SystemClock_Config+0x12c>)
 8001e50:	f023 0318 	bic.w	r3, r3, #24
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e58:	2314      	movs	r3, #20
 8001e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001e6c:	2390      	movs	r3, #144	; 0x90
 8001e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001e7e:	2305      	movs	r3, #5
 8001e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001e84:	2310      	movs	r3, #16
 8001e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001e96:	2306      	movs	r3, #6
 8001e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f004 f883 	bl	8005fac <HAL_RCC_OscConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001eac:	f000 f85c 	bl	8001f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001eb8:	23a0      	movs	r3, #160	; 0xa0
 8001eba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001ebc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ec0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ec6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 fc8d 	bl	80067ec <HAL_RCC_ClockConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ed8:	f000 f846 	bl	8001f68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001edc:	f244 0342 	movw	r3, #16450	; 0x4042
 8001ee0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001eea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001eee:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 8001ef8:	230e      	movs	r3, #14
 8001efa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001efc:	2307      	movs	r3, #7
 8001efe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fea1 	bl	8006c58 <HAL_RCCEx_PeriphCLKConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001f1c:	f000 f824 	bl	8001f68 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f24:	f003 ffec 	bl	8005f00 <HAL_PWREx_ControlVoltageScaling>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001f2e:	f000 f81b 	bl	8001f68 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001f32:	f005 f885 	bl	8007040 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001f36:	bf00      	nop
 8001f38:	37b0      	adds	r7, #176	; 0xb0
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f56:	f000 fd3f 	bl	80029d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40001000 	.word	0x40001000

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <Error_Handler+0x4>
	...

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6613      	str	r3, [r2, #96]	; 0x60
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	210f      	movs	r1, #15
 8001faa:	f06f 0001 	mvn.w	r0, #1
 8001fae:	f002 f8d1 	bl	8004154 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	2036      	movs	r0, #54	; 0x36
 8001fd6:	f002 f8bd 	bl	8004154 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fda:	2036      	movs	r0, #54	; 0x36
 8001fdc:	f002 f8d6 	bl	800418c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_InitTick+0xa0>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_InitTick+0xa0>)
 8001fe6:	f043 0310 	orr.w	r3, r3, #16
 8001fea:	6593      	str	r3, [r2, #88]	; 0x58
 8001fec:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_InitTick+0xa0>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ff8:	f107 0210 	add.w	r2, r7, #16
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f004 fd96 	bl	8006b34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002008:	f004 fd68 	bl	8006adc <HAL_RCC_GetPCLK1Freq>
 800200c:	4603      	mov	r3, r0
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	4a13      	ldr	r2, [pc, #76]	; (8002064 <HAL_InitTick+0xa4>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0c9b      	lsrs	r3, r3, #18
 800201c:	3b01      	subs	r3, #1
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_InitTick+0xa8>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_InitTick+0xac>)
 8002024:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_InitTick+0xa8>)
 8002028:	f240 32e7 	movw	r2, #999	; 0x3e7
 800202c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_InitTick+0xa8>)
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_InitTick+0xa8>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_InitTick+0xa8>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <HAL_InitTick+0xa8>)
 8002042:	f005 f8ff 	bl	8007244 <HAL_TIM_Base_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d104      	bne.n	8002056 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800204c:	4806      	ldr	r0, [pc, #24]	; (8002068 <HAL_InitTick+0xa8>)
 800204e:	f005 f95b 	bl	8007308 <HAL_TIM_Base_Start_IT>
 8002052:	4603      	mov	r3, r0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3730      	adds	r7, #48	; 0x30
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	431bde83 	.word	0x431bde83
 8002068:	2000870c 	.word	0x2000870c
 800206c:	40001000 	.word	0x40001000

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <NMI_Handler+0x4>

08002076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <HardFault_Handler+0x4>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <MemManage_Handler+0x4>

08002082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <UsageFault_Handler+0x4>

0800208e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <DMA1_Channel6_IRQHandler+0x10>)
 80020a2:	f002 f97a 	bl	800439a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200087f0 	.word	0x200087f0

080020b0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <DMA1_Channel7_IRQHandler+0x10>)
 80020b6:	f002 f970 	bl	800439a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20008838 	.word	0x20008838

080020c4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <CAN1_TX_IRQHandler+0x10>)
 80020ca:	f001 fd66 	bl	8003b9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000868c 	.word	0x2000868c

080020d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <CAN1_RX0_IRQHandler+0x10>)
 80020de:	f001 fd5c 	bl	8003b9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000868c 	.word	0x2000868c

080020ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <I2C1_EV_IRQHandler+0x10>)
 80020f2:	f002 fefa 	bl	8004eea <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200086c0 	.word	0x200086c0

08002100 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <I2C1_ER_IRQHandler+0x10>)
 8002106:	f002 ff0a 	bl	8004f1e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200086c0 	.word	0x200086c0

08002114 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <TIM6_DAC_IRQHandler+0x10>)
 800211a:	f005 f9a0 	bl	800745e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000870c 	.word	0x2000870c

08002128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
	return 1;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_kill>:

int _kill(int pid, int sig)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002142:	f009 f823 	bl	800b18c <__errno>
 8002146:	4603      	mov	r3, r0
 8002148:	2216      	movs	r2, #22
 800214a:	601a      	str	r2, [r3, #0]
	return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_exit>:

void _exit (int status)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ffe7 	bl	8002138 <_kill>
	while (1) {}		/* Make sure we hang here */
 800216a:	e7fe      	b.n	800216a <_exit+0x12>

0800216c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e00a      	b.n	8002194 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800217e:	f3af 8000 	nop.w
 8002182:	4601      	mov	r1, r0
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	b2ca      	uxtb	r2, r1
 800218c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbf0      	blt.n	800217e <_read+0x12>
	}

return len;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e009      	b.n	80021cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60ba      	str	r2, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf1      	blt.n	80021b8 <_write+0x12>
	}
	return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_close>:

int _close(int file)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	return -1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002206:	605a      	str	r2, [r3, #4]
	return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_isatty>:

int _isatty(int file)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	return 1;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
	return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f008 ff88 	bl	800b18c <__errno>
 800227c:	4603      	mov	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20010000 	.word	0x20010000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	20000334 	.word	0x20000334
 80022b0:	20008958 	.word	0x20008958

080022b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <SystemInit+0x5c>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <SystemInit+0x5c>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <SystemInit+0x60>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <SystemInit+0x60>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <SystemInit+0x60>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <SystemInit+0x60>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <SystemInit+0x60>)
 80022e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <SystemInit+0x60>)
 80022ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <SystemInit+0x60>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <SystemInit+0x60>)
 80022f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <SystemInit+0x60>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00
 8002314:	40021000 	.word	0x40021000

08002318 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b096      	sub	sp, #88	; 0x58
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800232a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]
 800233a:	615a      	str	r2, [r3, #20]
 800233c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	222c      	movs	r2, #44	; 0x2c
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f008 ff61 	bl	800b20c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800234a:	4b45      	ldr	r3, [pc, #276]	; (8002460 <MX_TIM1_Init+0x148>)
 800234c:	4a45      	ldr	r2, [pc, #276]	; (8002464 <MX_TIM1_Init+0x14c>)
 800234e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002350:	4b43      	ldr	r3, [pc, #268]	; (8002460 <MX_TIM1_Init+0x148>)
 8002352:	2200      	movs	r2, #0
 8002354:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002356:	4b42      	ldr	r3, [pc, #264]	; (8002460 <MX_TIM1_Init+0x148>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <MX_TIM1_Init+0x148>)
 800235e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002362:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002364:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <MX_TIM1_Init+0x148>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <MX_TIM1_Init+0x148>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <MX_TIM1_Init+0x148>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002376:	483a      	ldr	r0, [pc, #232]	; (8002460 <MX_TIM1_Init+0x148>)
 8002378:	f005 f81a 	bl	80073b0 <HAL_TIM_PWM_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002382:	f7ff fdf1 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002392:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002396:	4619      	mov	r1, r3
 8002398:	4831      	ldr	r0, [pc, #196]	; (8002460 <MX_TIM1_Init+0x148>)
 800239a:	f005 fd99 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023a4:	f7ff fde0 	bl	8001f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a8:	2360      	movs	r3, #96	; 0x60
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023b4:	2300      	movs	r3, #0
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023c8:	2200      	movs	r2, #0
 80023ca:	4619      	mov	r1, r3
 80023cc:	4824      	ldr	r0, [pc, #144]	; (8002460 <MX_TIM1_Init+0x148>)
 80023ce:	f005 f965 	bl	800769c <HAL_TIM_PWM_ConfigChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80023d8:	f7ff fdc6 	bl	8001f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023e0:	2204      	movs	r2, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	481e      	ldr	r0, [pc, #120]	; (8002460 <MX_TIM1_Init+0x148>)
 80023e6:	f005 f959 	bl	800769c <HAL_TIM_PWM_ConfigChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80023f0:	f7ff fdba 	bl	8001f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023f8:	2208      	movs	r2, #8
 80023fa:	4619      	mov	r1, r3
 80023fc:	4818      	ldr	r0, [pc, #96]	; (8002460 <MX_TIM1_Init+0x148>)
 80023fe:	f005 f94d 	bl	800769c <HAL_TIM_PWM_ConfigChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002408:	f7ff fdae 	bl	8001f68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002424:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800242e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	4619      	mov	r1, r3
 8002440:	4807      	ldr	r0, [pc, #28]	; (8002460 <MX_TIM1_Init+0x148>)
 8002442:	f005 fdab 	bl	8007f9c <HAL_TIMEx_ConfigBreakDeadTime>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800244c:	f7ff fd8c 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <MX_TIM1_Init+0x148>)
 8002452:	f000 f8c1 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 8002456:	bf00      	nop
 8002458:	3758      	adds	r7, #88	; 0x58
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200087a4 	.word	0x200087a4
 8002464:	40012c00 	.word	0x40012c00

08002468 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b096      	sub	sp, #88	; 0x58
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800247a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
 8002488:	611a      	str	r2, [r3, #16]
 800248a:	615a      	str	r2, [r3, #20]
 800248c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	222c      	movs	r2, #44	; 0x2c
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f008 feb9 	bl	800b20c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800249a:	4b33      	ldr	r3, [pc, #204]	; (8002568 <MX_TIM15_Init+0x100>)
 800249c:	4a33      	ldr	r2, [pc, #204]	; (800256c <MX_TIM15_Init+0x104>)
 800249e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80024a0:	4b31      	ldr	r3, [pc, #196]	; (8002568 <MX_TIM15_Init+0x100>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a6:	4b30      	ldr	r3, [pc, #192]	; (8002568 <MX_TIM15_Init+0x100>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <MX_TIM15_Init+0x100>)
 80024ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b4:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <MX_TIM15_Init+0x100>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024ba:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <MX_TIM15_Init+0x100>)
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <MX_TIM15_Init+0x100>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80024c6:	4828      	ldr	r0, [pc, #160]	; (8002568 <MX_TIM15_Init+0x100>)
 80024c8:	f004 ff72 	bl	80073b0 <HAL_TIM_PWM_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80024d2:	f7ff fd49 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024e2:	4619      	mov	r1, r3
 80024e4:	4820      	ldr	r0, [pc, #128]	; (8002568 <MX_TIM15_Init+0x100>)
 80024e6:	f005 fcf3 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80024f0:	f7ff fd3a 	bl	8001f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f4:	2360      	movs	r3, #96	; 0x60
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fc:	2300      	movs	r3, #0
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002500:	2300      	movs	r3, #0
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002514:	2204      	movs	r2, #4
 8002516:	4619      	mov	r1, r3
 8002518:	4813      	ldr	r0, [pc, #76]	; (8002568 <MX_TIM15_Init+0x100>)
 800251a:	f005 f8bf 	bl	800769c <HAL_TIM_PWM_ConfigChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002524:	f7ff fd20 	bl	8001f68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800253c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002540:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	4619      	mov	r1, r3
 800254a:	4807      	ldr	r0, [pc, #28]	; (8002568 <MX_TIM15_Init+0x100>)
 800254c:	f005 fd26 	bl	8007f9c <HAL_TIMEx_ConfigBreakDeadTime>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8002556:	f7ff fd07 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800255a:	4803      	ldr	r0, [pc, #12]	; (8002568 <MX_TIM15_Init+0x100>)
 800255c:	f000 f83c 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 8002560:	bf00      	nop
 8002562:	3758      	adds	r7, #88	; 0x58
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20008758 	.word	0x20008758
 800256c:	40014000 	.word	0x40014000

08002570 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <HAL_TIM_PWM_MspInit+0x5c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10c      	bne.n	800259c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_TIM_PWM_MspInit+0x60>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_TIM_PWM_MspInit+0x60>)
 8002588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800258c:	6613      	str	r3, [r2, #96]	; 0x60
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_TIM_PWM_MspInit+0x60>)
 8002590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800259a:	e010      	b.n	80025be <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM15)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_TIM_PWM_MspInit+0x64>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10b      	bne.n	80025be <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_TIM_PWM_MspInit+0x60>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_TIM_PWM_MspInit+0x60>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6613      	str	r3, [r2, #96]	; 0x60
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_TIM_PWM_MspInit+0x60>)
 80025b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40014000 	.word	0x40014000

080025d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_TIM_MspPostInit+0xac>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d11e      	bne.n	8002638 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_TIM_MspPostInit+0xb0>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a22      	ldr	r2, [pc, #136]	; (8002688 <HAL_TIM_MspPostInit+0xb0>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_TIM_MspPostInit+0xb0>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002612:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002624:	2301      	movs	r3, #1
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002632:	f001 ff6f 	bl	8004514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002636:	e021      	b.n	800267c <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a13      	ldr	r2, [pc, #76]	; (800268c <HAL_TIM_MspPostInit+0xb4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d11c      	bne.n	800267c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_TIM_MspPostInit+0xb0>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <HAL_TIM_MspPostInit+0xb0>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_TIM_MspPostInit+0xb0>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800265a:	2308      	movs	r3, #8
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800266a:	230e      	movs	r3, #14
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002678:	f001 ff4c 	bl	8004514 <HAL_GPIO_Init>
}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40021000 	.word	0x40021000
 800268c:	40014000 	.word	0x40014000

08002690 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <MX_USART2_UART_Init+0x5c>)
 8002698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 800269c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_USART2_UART_Init+0x58>)
 80026d4:	f005 fcf8 	bl	80080c8 <HAL_UART_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026de:	f7ff fc43 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20008880 	.word	0x20008880
 80026ec:	40004400 	.word	0x40004400

080026f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4a      	ldr	r2, [pc, #296]	; (8002838 <HAL_UART_MspInit+0x148>)
 800270e:	4293      	cmp	r3, r2
 8002710:	f040 808d 	bne.w	800282e <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002714:	4b49      	ldr	r3, [pc, #292]	; (800283c <HAL_UART_MspInit+0x14c>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	4a48      	ldr	r2, [pc, #288]	; (800283c <HAL_UART_MspInit+0x14c>)
 800271a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271e:	6593      	str	r3, [r2, #88]	; 0x58
 8002720:	4b46      	ldr	r3, [pc, #280]	; (800283c <HAL_UART_MspInit+0x14c>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272c:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_UART_MspInit+0x14c>)
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	4a42      	ldr	r2, [pc, #264]	; (800283c <HAL_UART_MspInit+0x14c>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002738:	4b40      	ldr	r3, [pc, #256]	; (800283c <HAL_UART_MspInit+0x14c>)
 800273a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002744:	2304      	movs	r3, #4
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002754:	2307      	movs	r3, #7
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002762:	f001 fed7 	bl	8004514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800276a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002778:	2303      	movs	r3, #3
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002786:	f001 fec5 	bl	8004514 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_UART_MspInit+0x150>)
 800278c:	4a2d      	ldr	r2, [pc, #180]	; (8002844 <HAL_UART_MspInit+0x154>)
 800278e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_UART_MspInit+0x150>)
 8002792:	2202      	movs	r2, #2
 8002794:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_UART_MspInit+0x150>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_UART_MspInit+0x150>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_UART_MspInit+0x150>)
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_UART_MspInit+0x150>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_UART_MspInit+0x150>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_UART_MspInit+0x150>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_UART_MspInit+0x150>)
 80027bc:	2200      	movs	r2, #0
 80027be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027c0:	481f      	ldr	r0, [pc, #124]	; (8002840 <HAL_UART_MspInit+0x150>)
 80027c2:	f001 fcf1 	bl	80041a8 <HAL_DMA_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 80027cc:	f7ff fbcc 	bl	8001f68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <HAL_UART_MspInit+0x150>)
 80027d4:	671a      	str	r2, [r3, #112]	; 0x70
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_UART_MspInit+0x150>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_UART_MspInit+0x158>)
 80027de:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_UART_MspInit+0x15c>)
 80027e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_UART_MspInit+0x158>)
 80027e4:	2202      	movs	r2, #2
 80027e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_UART_MspInit+0x158>)
 80027ea:	2210      	movs	r2, #16
 80027ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_UART_MspInit+0x158>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_UART_MspInit+0x158>)
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_UART_MspInit+0x158>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_UART_MspInit+0x158>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_UART_MspInit+0x158>)
 8002808:	2200      	movs	r2, #0
 800280a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_UART_MspInit+0x158>)
 800280e:	2200      	movs	r2, #0
 8002810:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002812:	480d      	ldr	r0, [pc, #52]	; (8002848 <HAL_UART_MspInit+0x158>)
 8002814:	f001 fcc8 	bl	80041a8 <HAL_DMA_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800281e:	f7ff fba3 	bl	8001f68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a08      	ldr	r2, [pc, #32]	; (8002848 <HAL_UART_MspInit+0x158>)
 8002826:	66da      	str	r2, [r3, #108]	; 0x6c
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <HAL_UART_MspInit+0x158>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800282e:	bf00      	nop
 8002830:	3728      	adds	r7, #40	; 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40004400 	.word	0x40004400
 800283c:	40021000 	.word	0x40021000
 8002840:	200087f0 	.word	0x200087f0
 8002844:	4002006c 	.word	0x4002006c
 8002848:	20008838 	.word	0x20008838
 800284c:	40020080 	.word	0x40020080

08002850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002888 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002854:	f7ff fd2e 	bl	80022b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002858:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800285a:	e003      	b.n	8002864 <LoopCopyDataInit>

0800285c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800285e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002860:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002862:	3104      	adds	r1, #4

08002864 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002864:	480a      	ldr	r0, [pc, #40]	; (8002890 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002868:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800286a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800286c:	d3f6      	bcc.n	800285c <CopyDataInit>
	ldr	r2, =_sbss
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002870:	e002      	b.n	8002878 <LoopFillZerobss>

08002872 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002872:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002874:	f842 3b04 	str.w	r3, [r2], #4

08002878 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <LoopForever+0x16>)
	cmp	r2, r3
 800287a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800287c:	d3f9      	bcc.n	8002872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800287e:	f008 fc8b 	bl	800b198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002882:	f7ff faa9 	bl	8001dd8 <main>

08002886 <LoopForever>:

LoopForever:
    b LoopForever
 8002886:	e7fe      	b.n	8002886 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002888:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800288c:	0800e09c 	.word	0x0800e09c
	ldr	r0, =_sdata
 8002890:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002894:	20000314 	.word	0x20000314
	ldr	r2, =_sbss
 8002898:	20000314 	.word	0x20000314
	ldr	r3, = _ebss
 800289c:	20008958 	.word	0x20008958

080028a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028a0:	e7fe      	b.n	80028a0 <ADC1_IRQHandler>
	...

080028a4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* \brief 	Cube MX callbacks for Fifo0 and Fifo1
 * \details It is assumed that only one CANmodule is (CO->CANmodule[0]) is used.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f81b 	bl	80028f4 <CO_CANinterrupt_Rx>
		 *but for some reason interrupts get activated as soon as HAL_NVIC_EnableIRQ is called.
		 *According to Cube CAN docs HAL_CAN_ActivateNotification should be executed to
		 *activate callbacks.
		 */
	}
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000338 	.word	0x20000338

080028cc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f807 	bl	80028f4 <CO_CANinterrupt_Rx>
	}
	else
	{
		;//TODO add assert here
	}
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000338 	.word	0x20000338

080028f4 <CO_CANinterrupt_Rx>:
}

/*Interrupt handlers*/
/******************************************************************************/
void CO_CANinterrupt_Rx(const CO_CANmodule_t *CANmodule)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	/* receive interrupt */

	static CO_CANrxMsg_t CANmessage;
	bool_t msgMatched = false;
 80028fc:	2300      	movs	r3, #0
 80028fe:	75fb      	strb	r3, [r7, #23]
	CO_CANrx_t *MsgBuff = CANmodule->rxArray; /* receive message buffer from CO_CANmodule_t object. */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
	HAL_CAN_GetRxMessage(CANmodule->CANbaseAddress, CAN_RX_FIFO0, &CANmessage.RxHeader, &CANmessage.data[0]);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <CO_CANinterrupt_Rx+0xac>)
 800290c:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <CO_CANinterrupt_Rx+0xb0>)
 800290e:	2100      	movs	r1, #0
 8002910:	f001 f831 	bl	8003976 <HAL_CAN_GetRxMessage>

	/*dirty hack, consider change to a pointer here*/
	CANmessage.DLC = (uint8_t)CANmessage.RxHeader.DLC;
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <CO_CANinterrupt_Rx+0xb0>)
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <CO_CANinterrupt_Rx+0xb0>)
 800291c:	f883 2020 	strb.w	r2, [r3, #32]
	CANmessage.ident = CANmessage.RxHeader.StdId;
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <CO_CANinterrupt_Rx+0xb0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <CO_CANinterrupt_Rx+0xb0>)
 8002926:	61d3      	str	r3, [r2, #28]

	uint32_t index;
	/* Search rxArray form CANmodule for the same CAN-ID. */
	for (index = 0; index < CANmodule->rxSize; index++)
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e01d      	b.n	800296a <CO_CANinterrupt_Rx+0x76>
	{
		uint16_t msg = (((uint16_t)(CANmessage.RxHeader.StdId << 2)) | (uint16_t)(CANmessage.RxHeader.RTR));
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <CO_CANinterrupt_Rx+0xb0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <CO_CANinterrupt_Rx+0xb0>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	b29b      	uxth	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	817b      	strh	r3, [r7, #10]
		if (((msg ^ MsgBuff->ident) & MsgBuff->mask) == 0)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	881a      	ldrh	r2, [r3, #0]
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	4053      	eors	r3, r2
 800294a:	b29a      	uxth	r2, r3
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	885b      	ldrh	r3, [r3, #2]
 8002950:	4013      	ands	r3, r2
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <CO_CANinterrupt_Rx+0x6a>
		{
			msgMatched = true;
 8002958:	2301      	movs	r3, #1
 800295a:	75fb      	strb	r3, [r7, #23]
			break;
 800295c:	e00b      	b.n	8002976 <CO_CANinterrupt_Rx+0x82>
		}
		MsgBuff++;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	330c      	adds	r3, #12
 8002962:	613b      	str	r3, [r7, #16]
	for (index = 0; index < CANmodule->rxSize; index++)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3301      	adds	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	891b      	ldrh	r3, [r3, #8]
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4293      	cmp	r3, r2
 8002974:	d3db      	bcc.n	800292e <CO_CANinterrupt_Rx+0x3a>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <CO_CANinterrupt_Rx+0xa4>
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <CO_CANinterrupt_Rx+0xa4>
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <CO_CANinterrupt_Rx+0xa4>
	{
		MsgBuff->pFunct(MsgBuff->object, &CANmessage);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	6852      	ldr	r2, [r2, #4]
 8002992:	4904      	ldr	r1, [pc, #16]	; (80029a4 <CO_CANinterrupt_Rx+0xb0>)
 8002994:	4610      	mov	r0, r2
 8002996:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000035d 	.word	0x2000035d
 80029a4:	2000033c 	.word	0x2000033c

080029a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b2:	2003      	movs	r0, #3
 80029b4:	f001 fbc3 	bl	800413e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff fb01 	bl	8001fc0 <HAL_InitTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	71fb      	strb	r3, [r7, #7]
 80029c8:	e001      	b.n	80029ce <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029ca:	f7ff fad1 	bl	8001f70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029ce:	79fb      	ldrb	r3, [r7, #7]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x20>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_IncTick+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_IncTick+0x24>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000138 	.word	0x20000138
 80029fc:	20008904 	.word	0x20008904

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_GetTick+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20008904 	.word	0x20008904

08002a18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	609a      	str	r2, [r3, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3360      	adds	r3, #96	; 0x60
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <LL_ADC_SetOffset+0x44>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	03fff000 	.word	0x03fff000

08002ac8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3360      	adds	r3, #96	; 0x60
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3330      	adds	r3, #48	; 0x30
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	4413      	add	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	211f      	movs	r1, #31
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	f003 011f 	and.w	r1, r3, #31
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	431a      	orrs	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b087      	sub	sp, #28
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3314      	adds	r3, #20
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	0e5b      	lsrs	r3, r3, #25
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	4413      	add	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	0d1b      	lsrs	r3, r3, #20
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	2107      	movs	r1, #7
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	0d1b      	lsrs	r3, r3, #20
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bcc:	bf00      	nop
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0318 	and.w	r3, r3, #24
 8002bfa:	4908      	ldr	r1, [pc, #32]	; (8002c1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bfc:	40d9      	lsrs	r1, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	400b      	ands	r3, r1
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	431a      	orrs	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	0007ffff 	.word	0x0007ffff

08002c20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6093      	str	r3, [r2, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca8:	d101      	bne.n	8002cae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <LL_ADC_IsEnabled+0x18>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <LL_ADC_IsEnabled+0x1a>
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d101      	bne.n	8002cfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d101      	bne.n	8002d20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e12c      	b.n	8002fa4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7fe fde5 	bl	8001928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff67 	bl	8002c44 <LL_ADC_IsDeepPowerDownEnabled>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff4d 	bl	8002c20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff82 	bl	8002c94 <LL_ADC_IsInternalRegulatorEnabled>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d115      	bne.n	8002dc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff66 	bl	8002c6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002da0:	4b82      	ldr	r3, [pc, #520]	; (8002fac <HAL_ADC_Init+0x27c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	4a82      	ldr	r2, [pc, #520]	; (8002fb0 <HAL_ADC_Init+0x280>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	3301      	adds	r3, #1
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002db4:	e002      	b.n	8002dbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f9      	bne.n	8002db6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff64 	bl	8002c94 <LL_ADC_IsInternalRegulatorEnabled>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	f043 0210 	orr.w	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff75 	bl	8002ce2 <LL_ADC_REG_IsConversionOngoing>
 8002df8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 80c5 	bne.w	8002f92 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 80c1 	bne.w	8002f92 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e18:	f043 0202 	orr.w	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff49 	bl	8002cbc <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e30:	4860      	ldr	r0, [pc, #384]	; (8002fb4 <HAL_ADC_Init+0x284>)
 8002e32:	f7ff ff43 	bl	8002cbc <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4619      	mov	r1, r3
 8002e42:	485d      	ldr	r0, [pc, #372]	; (8002fb8 <HAL_ADC_Init+0x288>)
 8002e44:	f7ff fde8 	bl	8002a18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7e5b      	ldrb	r3, [r3, #25]
 8002e4c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e52:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e58:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e5e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e66:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d106      	bne.n	8002e84 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	045b      	lsls	r3, r3, #17
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	4b45      	ldr	r3, [pc, #276]	; (8002fbc <HAL_ADC_Init+0x28c>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff12 	bl	8002ce2 <LL_ADC_REG_IsConversionOngoing>
 8002ebe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff1f 	bl	8002d08 <LL_ADC_INJ_IsConversionOngoing>
 8002eca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d13d      	bne.n	8002f4e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d13a      	bne.n	8002f4e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002edc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ef4:	f023 0302 	bic.w	r3, r3, #2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	69b9      	ldr	r1, [r7, #24]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d118      	bne.n	8002f3e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f16:	f023 0304 	bic.w	r3, r3, #4
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f28:	4311      	orrs	r1, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	611a      	str	r2, [r3, #16]
 8002f3c:	e007      	b.n	8002f4e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10c      	bne.n	8002f70 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f023 010f 	bic.w	r1, r3, #15
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	1e5a      	subs	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f6e:	e007      	b.n	8002f80 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 020f 	bic.w	r2, r2, #15
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f023 0303 	bic.w	r3, r3, #3
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
 8002f90:	e007      	b.n	8002fa2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000130 	.word	0x20000130
 8002fb0:	053e2d63 	.word	0x053e2d63
 8002fb4:	50040000 	.word	0x50040000
 8002fb8:	50040300 	.word	0x50040300
 8002fbc:	fff0c007 	.word	0xfff0c007

08002fc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b0b6      	sub	sp, #216	; 0xd8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x22>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e3b9      	b.n	8003756 <HAL_ADC_ConfigChannel+0x796>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fe77 	bl	8002ce2 <LL_ADC_REG_IsConversionOngoing>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 839e 	bne.w	8003738 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b05      	cmp	r3, #5
 8003002:	d824      	bhi.n	800304e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	3b02      	subs	r3, #2
 800300a:	2b03      	cmp	r3, #3
 800300c:	d81b      	bhi.n	8003046 <HAL_ADC_ConfigChannel+0x86>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <HAL_ADC_ConfigChannel+0x54>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003025 	.word	0x08003025
 8003018:	0800302d 	.word	0x0800302d
 800301c:	08003035 	.word	0x08003035
 8003020:	0800303d 	.word	0x0800303d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	220c      	movs	r2, #12
 8003028:	605a      	str	r2, [r3, #4]
          break;
 800302a:	e011      	b.n	8003050 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2212      	movs	r2, #18
 8003030:	605a      	str	r2, [r3, #4]
          break;
 8003032:	e00d      	b.n	8003050 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2218      	movs	r2, #24
 8003038:	605a      	str	r2, [r3, #4]
          break;
 800303a:	e009      	b.n	8003050 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003042:	605a      	str	r2, [r3, #4]
          break;
 8003044:	e004      	b.n	8003050 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2206      	movs	r2, #6
 800304a:	605a      	str	r2, [r3, #4]
          break;
 800304c:	e000      	b.n	8003050 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800304e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	f7ff fd64 	bl	8002b2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fe3b 	bl	8002ce2 <LL_ADC_REG_IsConversionOngoing>
 800306c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fe47 	bl	8002d08 <LL_ADC_INJ_IsConversionOngoing>
 800307a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800307e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 81a6 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800308c:	2b00      	cmp	r3, #0
 800308e:	f040 81a1 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6819      	ldr	r1, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	461a      	mov	r2, r3
 80030a0:	f7ff fd6f 	bl	8002b82 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	08db      	lsrs	r3, r3, #3
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d00a      	beq.n	80030dc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6919      	ldr	r1, [r3, #16]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030d6:	f7ff fcd3 	bl	8002a80 <LL_ADC_SetOffset>
 80030da:	e17b      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fcf0 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x148>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fce5 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 80030fe:	4603      	mov	r3, r0
 8003100:	0e9b      	lsrs	r3, r3, #26
 8003102:	f003 021f 	and.w	r2, r3, #31
 8003106:	e01e      	b.n	8003146 <HAL_ADC_ConfigChannel+0x186>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fcda 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 8003114:	4603      	mov	r3, r0
 8003116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800312a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800312e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003136:	2320      	movs	r3, #32
 8003138:	e004      	b.n	8003144 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800313a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <HAL_ADC_ConfigChannel+0x19e>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0e9b      	lsrs	r3, r3, #26
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	e018      	b.n	8003190 <HAL_ADC_ConfigChannel+0x1d0>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800317a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e004      	b.n	8003190 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fca9 	bl	8002af4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fc8d 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x20e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fc82 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	e01e      	b.n	800320c <HAL_ADC_ConfigChannel+0x24c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2101      	movs	r1, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fc77 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80031ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80031f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e004      	b.n	800320a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x264>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	e018      	b.n	8003256 <HAL_ADC_ConfigChannel+0x296>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003238:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800323c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003248:	2320      	movs	r3, #32
 800324a:	e004      	b.n	8003256 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800324c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003256:	429a      	cmp	r2, r3
 8003258:	d106      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	2101      	movs	r1, #1
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fc46 	bl	8002af4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2102      	movs	r1, #2
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fc2a 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 8003274:	4603      	mov	r3, r0
 8003276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10a      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x2d4>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2102      	movs	r1, #2
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fc1f 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 800328a:	4603      	mov	r3, r0
 800328c:	0e9b      	lsrs	r3, r3, #26
 800328e:	f003 021f 	and.w	r2, r3, #31
 8003292:	e01e      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x312>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2102      	movs	r1, #2
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fc14 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80032c2:	2320      	movs	r3, #32
 80032c4:	e004      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80032c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x32a>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	e016      	b.n	8003318 <HAL_ADC_ConfigChannel+0x358>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80032fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e004      	b.n	8003318 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800330e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003318:	429a      	cmp	r2, r3
 800331a:	d106      	bne.n	800332a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2200      	movs	r2, #0
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fbe5 	bl	8002af4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2103      	movs	r1, #3
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fbc9 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x396>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2103      	movs	r1, #3
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fbbe 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 800334c:	4603      	mov	r3, r0
 800334e:	0e9b      	lsrs	r3, r3, #26
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	e017      	b.n	8003386 <HAL_ADC_ConfigChannel+0x3c6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2103      	movs	r1, #3
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fbb3 	bl	8002ac8 <LL_ADC_GetOffsetChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800336e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003370:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003378:	2320      	movs	r3, #32
 800337a:	e003      	b.n	8003384 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800337c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_ADC_ConfigChannel+0x3de>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	0e9b      	lsrs	r3, r3, #26
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	e011      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x402>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e003      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80033ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d106      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2103      	movs	r1, #3
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fb90 	bl	8002af4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fc6f 	bl	8002cbc <LL_ADC_IsEnabled>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 813f 	bne.w	8003664 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7ff fbf0 	bl	8002bd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a8e      	ldr	r2, [pc, #568]	; (8003638 <HAL_ADC_ConfigChannel+0x678>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f040 8130 	bne.w	8003664 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <HAL_ADC_ConfigChannel+0x46c>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2b09      	cmp	r3, #9
 8003422:	bf94      	ite	ls
 8003424:	2301      	movls	r3, #1
 8003426:	2300      	movhi	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e019      	b.n	8003460 <HAL_ADC_ConfigChannel+0x4a0>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800343a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800343c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800343e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2b09      	cmp	r3, #9
 8003458:	bf94      	ite	ls
 800345a:	2301      	movls	r3, #1
 800345c:	2300      	movhi	r3, #0
 800345e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003460:	2b00      	cmp	r3, #0
 8003462:	d079      	beq.n	8003558 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346c:	2b00      	cmp	r3, #0
 800346e:	d107      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x4c0>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	3301      	adds	r3, #1
 8003478:	069b      	lsls	r3, r3, #26
 800347a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347e:	e015      	b.n	80034ac <HAL_ADC_ConfigChannel+0x4ec>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800348e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003490:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800349c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	069b      	lsls	r3, r3, #26
 80034a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x50c>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	3301      	adds	r3, #1
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	e017      	b.n	80034fc <HAL_ADC_ConfigChannel+0x53c>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80034e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	ea42 0103 	orr.w	r1, r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x562>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e9b      	lsrs	r3, r3, #26
 8003512:	3301      	adds	r3, #1
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	051b      	lsls	r3, r3, #20
 8003520:	e018      	b.n	8003554 <HAL_ADC_ConfigChannel+0x594>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800353a:	2320      	movs	r3, #32
 800353c:	e003      	b.n	8003546 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800353e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003554:	430b      	orrs	r3, r1
 8003556:	e080      	b.n	800365a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x5b4>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	3301      	adds	r3, #1
 800356c:	069b      	lsls	r3, r3, #26
 800356e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003572:	e015      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x5e0>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	069b      	lsls	r3, r3, #26
 800359c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x600>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	e017      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x630>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	61fb      	str	r3, [r7, #28]
  return result;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80035d8:	2320      	movs	r3, #32
 80035da:	e003      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	ea42 0103 	orr.w	r1, r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_ADC_ConfigChannel+0x65c>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0e9b      	lsrs	r3, r3, #26
 8003606:	3301      	adds	r3, #1
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	3b1e      	subs	r3, #30
 8003614:	051b      	lsls	r3, r3, #20
 8003616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800361a:	e01d      	b.n	8003658 <HAL_ADC_ConfigChannel+0x698>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	613b      	str	r3, [r7, #16]
  return result;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e005      	b.n	8003644 <HAL_ADC_ConfigChannel+0x684>
 8003638:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f003 021f 	and.w	r2, r3, #31
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	3b1e      	subs	r3, #30
 8003652:	051b      	lsls	r3, r3, #20
 8003654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003658:	430b      	orrs	r3, r1
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	4619      	mov	r1, r3
 8003660:	f7ff fa8f 	bl	8002b82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <HAL_ADC_ConfigChannel+0x7a0>)
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d06c      	beq.n	800374a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003670:	483c      	ldr	r0, [pc, #240]	; (8003764 <HAL_ADC_ConfigChannel+0x7a4>)
 8003672:	f7ff f9f7 	bl	8002a64 <LL_ADC_GetCommonPathInternalCh>
 8003676:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a3a      	ldr	r2, [pc, #232]	; (8003768 <HAL_ADC_ConfigChannel+0x7a8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d127      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d121      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a35      	ldr	r2, [pc, #212]	; (800376c <HAL_ADC_ConfigChannel+0x7ac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d157      	bne.n	800374a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800369a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800369e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036a2:	4619      	mov	r1, r3
 80036a4:	482f      	ldr	r0, [pc, #188]	; (8003764 <HAL_ADC_ConfigChannel+0x7a4>)
 80036a6:	f7ff f9ca 	bl	8002a3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_ADC_ConfigChannel+0x7b0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	4a30      	ldr	r2, [pc, #192]	; (8003774 <HAL_ADC_ConfigChannel+0x7b4>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036c4:	e002      	b.n	80036cc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f9      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036d2:	e03a      	b.n	800374a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <HAL_ADC_ConfigChannel+0x7b8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d113      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x746>
 80036de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10d      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_ADC_ConfigChannel+0x7ac>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d12a      	bne.n	800374a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036fc:	4619      	mov	r1, r3
 80036fe:	4819      	ldr	r0, [pc, #100]	; (8003764 <HAL_ADC_ConfigChannel+0x7a4>)
 8003700:	f7ff f99d 	bl	8002a3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003704:	e021      	b.n	800374a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_ADC_ConfigChannel+0x7bc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d11c      	bne.n	800374a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d116      	bne.n	800374a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a12      	ldr	r2, [pc, #72]	; (800376c <HAL_ADC_ConfigChannel+0x7ac>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d111      	bne.n	800374a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800372a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800372e:	4619      	mov	r1, r3
 8003730:	480c      	ldr	r0, [pc, #48]	; (8003764 <HAL_ADC_ConfigChannel+0x7a4>)
 8003732:	f7ff f984 	bl	8002a3e <LL_ADC_SetCommonPathInternalCh>
 8003736:	e008      	b.n	800374a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003752:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003756:	4618      	mov	r0, r3
 8003758:	37d8      	adds	r7, #216	; 0xd8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	80080000 	.word	0x80080000
 8003764:	50040300 	.word	0x50040300
 8003768:	c7520000 	.word	0xc7520000
 800376c:	50040000 	.word	0x50040000
 8003770:	20000130 	.word	0x20000130
 8003774:	053e2d63 	.word	0x053e2d63
 8003778:	cb840000 	.word	0xcb840000
 800377c:	80000001 	.word	0x80000001

08003780 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0ed      	b.n	800396e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe f99c 	bl	8001adc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0202 	bic.w	r2, r2, #2
 80037b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037b4:	f7ff f924 	bl	8002a00 <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037ba:	e012      	b.n	80037e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037bc:	f7ff f920 	bl	8002a00 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b0a      	cmp	r3, #10
 80037c8:	d90b      	bls.n	80037e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2205      	movs	r2, #5
 80037da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0c5      	b.n	800396e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e5      	bne.n	80037bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003800:	f7ff f8fe 	bl	8002a00 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003806:	e012      	b.n	800382e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003808:	f7ff f8fa 	bl	8002a00 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b0a      	cmp	r3, #10
 8003814:	d90b      	bls.n	800382e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2205      	movs	r2, #5
 8003826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e09f      	b.n	800396e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0e5      	beq.n	8003808 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7e1b      	ldrb	r3, [r3, #24]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d108      	bne.n	8003856 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e007      	b.n	8003866 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7e5b      	ldrb	r3, [r3, #25]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e007      	b.n	8003890 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7e9b      	ldrb	r3, [r3, #26]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d108      	bne.n	80038aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0220 	orr.w	r2, r2, #32
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e007      	b.n	80038ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0220 	bic.w	r2, r2, #32
 80038b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7edb      	ldrb	r3, [r3, #27]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d108      	bne.n	80038d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0210 	bic.w	r2, r2, #16
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e007      	b.n	80038e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0210 	orr.w	r2, r2, #16
 80038e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7f1b      	ldrb	r3, [r3, #28]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d108      	bne.n	80038fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0208 	orr.w	r2, r2, #8
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e007      	b.n	800390e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0208 	bic.w	r2, r2, #8
 800390c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	7f5b      	ldrb	r3, [r3, #29]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d108      	bne.n	8003928 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0204 	orr.w	r2, r2, #4
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e007      	b.n	8003938 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0204 	bic.w	r2, r2, #4
 8003936:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	ea42 0103 	orr.w	r1, r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	1e5a      	subs	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003976:	b480      	push	{r7}
 8003978:	b087      	sub	sp, #28
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d003      	beq.n	800399a <HAL_CAN_GetRxMessage+0x24>
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b02      	cmp	r3, #2
 8003996:	f040 80f3 	bne.w	8003b80 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10e      	bne.n	80039be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0e7      	b.n	8003b8e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0d8      	b.n	8003b8e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	331b      	adds	r3, #27
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	4413      	add	r3, r2
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0204 	and.w	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10c      	bne.n	8003a14 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	331b      	adds	r3, #27
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	4413      	add	r3, r2
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0d5b      	lsrs	r3, r3, #21
 8003a0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e00b      	b.n	8003a2c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	331b      	adds	r3, #27
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	4413      	add	r3, r2
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	08db      	lsrs	r3, r3, #3
 8003a24:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	331b      	adds	r3, #27
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	4413      	add	r3, r2
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0202 	and.w	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	331b      	adds	r3, #27
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3304      	adds	r3, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	331b      	adds	r3, #27
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	331b      	adds	r3, #27
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3304      	adds	r3, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0a1a      	lsrs	r2, r3, #8
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	0c1a      	lsrs	r2, r3, #16
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	3302      	adds	r3, #2
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0e1a      	lsrs	r2, r3, #24
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	3303      	adds	r3, #3
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	3304      	adds	r3, #4
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	0a1a      	lsrs	r2, r3, #8
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	3305      	adds	r3, #5
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0c1a      	lsrs	r2, r3, #16
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	3306      	adds	r3, #6
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	0e1a      	lsrs	r2, r3, #24
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	3307      	adds	r3, #7
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0220 	orr.w	r2, r2, #32
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	e007      	b.n	8003b7c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0220 	orr.w	r2, r2, #32
 8003b7a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e006      	b.n	8003b8e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b08a      	sub	sp, #40	; 0x28
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d07c      	beq.n	8003cda <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d023      	beq.n	8003c32 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f983 	bl	8003f08 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c02:	e016      	b.n	8003c32 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	e00c      	b.n	8003c32 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2a:	e002      	b.n	8003c32 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f989 	bl	8003f44 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d024      	beq.n	8003c86 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f963 	bl	8003f1c <HAL_CAN_TxMailbox1CompleteCallback>
 8003c56:	e016      	b.n	8003c86 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	e00c      	b.n	8003c86 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	e002      	b.n	8003c86 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f969 	bl	8003f58 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d024      	beq.n	8003cda <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f943 	bl	8003f30 <HAL_CAN_TxMailbox2CompleteCallback>
 8003caa:	e016      	b.n	8003cda <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	e00c      	b.n	8003cda <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	e002      	b.n	8003cda <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f949 	bl	8003f6c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00c      	beq.n	8003cfe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2208      	movs	r2, #8
 8003d18:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f930 	bl	8003f80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7fe fdb3 	bl	80028a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00c      	beq.n	8003d62 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f908 	bl	8003f94 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7fe fd95 	bl	80028cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2210      	movs	r2, #16
 8003dbc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f8f2 	bl	8003fa8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d006      	beq.n	8003de6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2208      	movs	r2, #8
 8003dde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f8eb 	bl	8003fbc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d07b      	beq.n	8003ee8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d072      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f043 0304 	orr.w	r3, r3, #4
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d043      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d03e      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e68:	2b60      	cmp	r3, #96	; 0x60
 8003e6a:	d02b      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x32a>
 8003e6c:	2b60      	cmp	r3, #96	; 0x60
 8003e6e:	d82e      	bhi.n	8003ece <HAL_CAN_IRQHandler+0x334>
 8003e70:	2b50      	cmp	r3, #80	; 0x50
 8003e72:	d022      	beq.n	8003eba <HAL_CAN_IRQHandler+0x320>
 8003e74:	2b50      	cmp	r3, #80	; 0x50
 8003e76:	d82a      	bhi.n	8003ece <HAL_CAN_IRQHandler+0x334>
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d019      	beq.n	8003eb0 <HAL_CAN_IRQHandler+0x316>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d826      	bhi.n	8003ece <HAL_CAN_IRQHandler+0x334>
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d010      	beq.n	8003ea6 <HAL_CAN_IRQHandler+0x30c>
 8003e84:	2b30      	cmp	r3, #48	; 0x30
 8003e86:	d822      	bhi.n	8003ece <HAL_CAN_IRQHandler+0x334>
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d002      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x2f8>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d005      	beq.n	8003e9c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003e90:	e01d      	b.n	8003ece <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	f043 0308 	orr.w	r3, r3, #8
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e9a:	e019      	b.n	8003ed0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f043 0310 	orr.w	r3, r3, #16
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ea4:	e014      	b.n	8003ed0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	f043 0320 	orr.w	r3, r3, #32
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eae:	e00f      	b.n	8003ed0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eb8:	e00a      	b.n	8003ed0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ec2:	e005      	b.n	8003ed0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ecc:	e000      	b.n	8003ed0 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ece:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ede:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f868 	bl	8003fd0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f00:	bf00      	nop
 8003f02:	3728      	adds	r7, #40	; 0x28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004000:	4013      	ands	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800400c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <__NVIC_SetPriorityGrouping+0x44>)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	60d3      	str	r3, [r2, #12]
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <__NVIC_GetPriorityGrouping+0x18>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	0a1b      	lsrs	r3, r3, #8
 8004036:	f003 0307 	and.w	r3, r3, #7
}
 800403a:	4618      	mov	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	2b00      	cmp	r3, #0
 8004058:	db0b      	blt.n	8004072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	4907      	ldr	r1, [pc, #28]	; (8004080 <__NVIC_EnableIRQ+0x38>)
 8004062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2001      	movs	r0, #1
 800406a:	fa00 f202 	lsl.w	r2, r0, r2
 800406e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	e000e100 	.word	0xe000e100

08004084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	6039      	str	r1, [r7, #0]
 800408e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004094:	2b00      	cmp	r3, #0
 8004096:	db0a      	blt.n	80040ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	490c      	ldr	r1, [pc, #48]	; (80040d0 <__NVIC_SetPriority+0x4c>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	0112      	lsls	r2, r2, #4
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	440b      	add	r3, r1
 80040a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040ac:	e00a      	b.n	80040c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4908      	ldr	r1, [pc, #32]	; (80040d4 <__NVIC_SetPriority+0x50>)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	3b04      	subs	r3, #4
 80040bc:	0112      	lsls	r2, r2, #4
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	440b      	add	r3, r1
 80040c2:	761a      	strb	r2, [r3, #24]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000e100 	.word	0xe000e100
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f1c3 0307 	rsb	r3, r3, #7
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	bf28      	it	cs
 80040f6:	2304      	movcs	r3, #4
 80040f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3304      	adds	r3, #4
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d902      	bls.n	8004108 <NVIC_EncodePriority+0x30>
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3b03      	subs	r3, #3
 8004106:	e000      	b.n	800410a <NVIC_EncodePriority+0x32>
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800410c:	f04f 32ff 	mov.w	r2, #4294967295
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43da      	mvns	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	401a      	ands	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004120:	f04f 31ff 	mov.w	r1, #4294967295
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	43d9      	mvns	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004130:	4313      	orrs	r3, r2
         );
}
 8004132:	4618      	mov	r0, r3
 8004134:	3724      	adds	r7, #36	; 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ff4c 	bl	8003fe4 <__NVIC_SetPriorityGrouping>
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004166:	f7ff ff61 	bl	800402c <__NVIC_GetPriorityGrouping>
 800416a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	6978      	ldr	r0, [r7, #20]
 8004172:	f7ff ffb1 	bl	80040d8 <NVIC_EncodePriority>
 8004176:	4602      	mov	r2, r0
 8004178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ff80 	bl	8004084 <__NVIC_SetPriority>
}
 8004184:	bf00      	nop
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff54 	bl	8004048 <__NVIC_EnableIRQ>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e098      	b.n	80042ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	4b4d      	ldr	r3, [pc, #308]	; (80042f8 <HAL_DMA_Init+0x150>)
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d80f      	bhi.n	80041e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b4b      	ldr	r3, [pc, #300]	; (80042fc <HAL_DMA_Init+0x154>)
 80041ce:	4413      	add	r3, r2
 80041d0:	4a4b      	ldr	r2, [pc, #300]	; (8004300 <HAL_DMA_Init+0x158>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	009a      	lsls	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a48      	ldr	r2, [pc, #288]	; (8004304 <HAL_DMA_Init+0x15c>)
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
 80041e4:	e00e      	b.n	8004204 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_DMA_Init+0x160>)
 80041ee:	4413      	add	r3, r2
 80041f0:	4a43      	ldr	r2, [pc, #268]	; (8004300 <HAL_DMA_Init+0x158>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	009a      	lsls	r2, r3, #2
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a42      	ldr	r2, [pc, #264]	; (800430c <HAL_DMA_Init+0x164>)
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425e:	d039      	beq.n	80042d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <HAL_DMA_Init+0x15c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d11a      	bne.n	80042a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800426a:	4b29      	ldr	r3, [pc, #164]	; (8004310 <HAL_DMA_Init+0x168>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f003 031c 	and.w	r3, r3, #28
 8004276:	210f      	movs	r1, #15
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	4924      	ldr	r1, [pc, #144]	; (8004310 <HAL_DMA_Init+0x168>)
 8004280:	4013      	ands	r3, r2
 8004282:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004284:	4b22      	ldr	r3, [pc, #136]	; (8004310 <HAL_DMA_Init+0x168>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	f003 031c 	and.w	r3, r3, #28
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	491d      	ldr	r1, [pc, #116]	; (8004310 <HAL_DMA_Init+0x168>)
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
 800429e:	e019      	b.n	80042d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <HAL_DMA_Init+0x16c>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	f003 031c 	and.w	r3, r3, #28
 80042ac:	210f      	movs	r1, #15
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	4917      	ldr	r1, [pc, #92]	; (8004314 <HAL_DMA_Init+0x16c>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042ba:	4b16      	ldr	r3, [pc, #88]	; (8004314 <HAL_DMA_Init+0x16c>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	f003 031c 	and.w	r3, r3, #28
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	4911      	ldr	r1, [pc, #68]	; (8004314 <HAL_DMA_Init+0x16c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40020407 	.word	0x40020407
 80042fc:	bffdfff8 	.word	0xbffdfff8
 8004300:	cccccccd 	.word	0xcccccccd
 8004304:	40020000 	.word	0x40020000
 8004308:	bffdfbf8 	.word	0xbffdfbf8
 800430c:	40020400 	.word	0x40020400
 8004310:	400200a8 	.word	0x400200a8
 8004314:	400204a8 	.word	0x400204a8

08004318 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d005      	beq.n	800433c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2204      	movs	r2, #4
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	e029      	b.n	8004390 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 020e 	bic.w	r2, r2, #14
 800434a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	f003 021c 	and.w	r2, r3, #28
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f202 	lsl.w	r2, r1, r2
 800436e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
    }
  }
  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	f003 031c 	and.w	r3, r3, #28
 80043ba:	2204      	movs	r2, #4
 80043bc:	409a      	lsls	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d026      	beq.n	8004414 <HAL_DMA_IRQHandler+0x7a>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d021      	beq.n	8004414 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d107      	bne.n	80043ee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0204 	bic.w	r2, r2, #4
 80043ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f003 021c 	and.w	r2, r3, #28
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2104      	movs	r1, #4
 80043fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004400:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	2b00      	cmp	r3, #0
 8004408:	d071      	beq.n	80044ee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004412:	e06c      	b.n	80044ee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	f003 031c 	and.w	r3, r3, #28
 800441c:	2202      	movs	r2, #2
 800441e:	409a      	lsls	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02e      	beq.n	8004486 <HAL_DMA_IRQHandler+0xec>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d029      	beq.n	8004486 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 020a 	bic.w	r2, r2, #10
 800444e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	f003 021c 	and.w	r2, r3, #28
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	2102      	movs	r1, #2
 8004466:	fa01 f202 	lsl.w	r2, r1, r2
 800446a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d038      	beq.n	80044ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004484:	e033      	b.n	80044ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	f003 031c 	and.w	r3, r3, #28
 800448e:	2208      	movs	r2, #8
 8004490:	409a      	lsls	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d02a      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x156>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d025      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 020e 	bic.w	r2, r2, #14
 80044b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	f003 021c 	and.w	r2, r3, #28
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	2101      	movs	r1, #1
 80044c2:	fa01 f202 	lsl.w	r2, r1, r2
 80044c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
}
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004506:	b2db      	uxtb	r3, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004522:	e148      	b.n	80047b6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	2101      	movs	r1, #1
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	4013      	ands	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 813a 	beq.w	80047b0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d00b      	beq.n	800455c <HAL_GPIO_Init+0x48>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d007      	beq.n	800455c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004550:	2b11      	cmp	r3, #17
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b12      	cmp	r3, #18
 800455a:	d130      	bne.n	80045be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	2203      	movs	r2, #3
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4013      	ands	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004592:	2201      	movs	r2, #1
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43db      	mvns	r3, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	f003 0201 	and.w	r2, r3, #1
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	2203      	movs	r2, #3
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0xea>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b12      	cmp	r3, #18
 80045fc:	d123      	bne.n	8004646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3208      	adds	r2, #8
 8004606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	220f      	movs	r2, #15
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4013      	ands	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	08da      	lsrs	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3208      	adds	r2, #8
 8004640:	6939      	ldr	r1, [r7, #16]
 8004642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	2203      	movs	r2, #3
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0203 	and.w	r2, r3, #3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8094 	beq.w	80047b0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004688:	4b52      	ldr	r3, [pc, #328]	; (80047d4 <HAL_GPIO_Init+0x2c0>)
 800468a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468c:	4a51      	ldr	r2, [pc, #324]	; (80047d4 <HAL_GPIO_Init+0x2c0>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6613      	str	r3, [r2, #96]	; 0x60
 8004694:	4b4f      	ldr	r3, [pc, #316]	; (80047d4 <HAL_GPIO_Init+0x2c0>)
 8004696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046a0:	4a4d      	ldr	r2, [pc, #308]	; (80047d8 <HAL_GPIO_Init+0x2c4>)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	089b      	lsrs	r3, r3, #2
 80046a6:	3302      	adds	r3, #2
 80046a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	220f      	movs	r2, #15
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046ca:	d00d      	beq.n	80046e8 <HAL_GPIO_Init+0x1d4>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a43      	ldr	r2, [pc, #268]	; (80047dc <HAL_GPIO_Init+0x2c8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <HAL_GPIO_Init+0x1d0>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a42      	ldr	r2, [pc, #264]	; (80047e0 <HAL_GPIO_Init+0x2cc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_GPIO_Init+0x1cc>
 80046dc:	2302      	movs	r3, #2
 80046de:	e004      	b.n	80046ea <HAL_GPIO_Init+0x1d6>
 80046e0:	2307      	movs	r3, #7
 80046e2:	e002      	b.n	80046ea <HAL_GPIO_Init+0x1d6>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_GPIO_Init+0x1d6>
 80046e8:	2300      	movs	r3, #0
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	f002 0203 	and.w	r2, r2, #3
 80046f0:	0092      	lsls	r2, r2, #2
 80046f2:	4093      	lsls	r3, r2
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046fa:	4937      	ldr	r1, [pc, #220]	; (80047d8 <HAL_GPIO_Init+0x2c4>)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	3302      	adds	r3, #2
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004708:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <HAL_GPIO_Init+0x2d0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43db      	mvns	r3, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800472c:	4a2d      	ldr	r2, [pc, #180]	; (80047e4 <HAL_GPIO_Init+0x2d0>)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004732:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <HAL_GPIO_Init+0x2d0>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004756:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <HAL_GPIO_Init+0x2d0>)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800475c:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <HAL_GPIO_Init+0x2d0>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004780:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_GPIO_Init+0x2d0>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004786:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <HAL_GPIO_Init+0x2d0>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	43db      	mvns	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047aa:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <HAL_GPIO_Init+0x2d0>)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	3301      	adds	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f47f aeaf 	bne.w	8004524 <HAL_GPIO_Init+0x10>
  }
}
 80047c6:	bf00      	nop
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40010000 	.word	0x40010000
 80047dc:	48000400 	.word	0x48000400
 80047e0:	48000800 	.word	0x48000800
 80047e4:	40010400 	.word	0x40010400

080047e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e081      	b.n	80048fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fd fa8e 	bl	8001d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2224      	movs	r2, #36	; 0x24
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0201 	bic.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004838:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004848:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d107      	bne.n	8004862 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	e006      	b.n	8004870 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800486e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d104      	bne.n	8004882 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	ea42 0103 	orr.w	r1, r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	021a      	lsls	r2, r3, #8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69d9      	ldr	r1, [r3, #28]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1a      	ldr	r2, [r3, #32]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	461a      	mov	r2, r3
 8004914:	460b      	mov	r3, r1
 8004916:	817b      	strh	r3, [r7, #10]
 8004918:	4613      	mov	r3, r2
 800491a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b20      	cmp	r3, #32
 8004926:	f040 80da 	bne.w	8004ade <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_I2C_Master_Transmit+0x30>
 8004934:	2302      	movs	r3, #2
 8004936:	e0d3      	b.n	8004ae0 <HAL_I2C_Master_Transmit+0x1d8>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004940:	f7fe f85e 	bl	8002a00 <HAL_GetTick>
 8004944:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	2319      	movs	r3, #25
 800494c:	2201      	movs	r2, #1
 800494e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f001 f803 	bl	800595e <I2C_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0be      	b.n	8004ae0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2221      	movs	r2, #33	; 0x21
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2210      	movs	r2, #16
 800496e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	893a      	ldrh	r2, [r7, #8]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	2bff      	cmp	r3, #255	; 0xff
 8004992:	d90e      	bls.n	80049b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	22ff      	movs	r2, #255	; 0xff
 8004998:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	8979      	ldrh	r1, [r7, #10]
 80049a2:	4b51      	ldr	r3, [pc, #324]	; (8004ae8 <HAL_I2C_Master_Transmit+0x1e0>)
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f001 f966 	bl	8005c7c <I2C_TransferConfig>
 80049b0:	e06c      	b.n	8004a8c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	8979      	ldrh	r1, [r7, #10]
 80049c4:	4b48      	ldr	r3, [pc, #288]	; (8004ae8 <HAL_I2C_Master_Transmit+0x1e0>)
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f001 f955 	bl	8005c7c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80049d2:	e05b      	b.n	8004a8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	6a39      	ldr	r1, [r7, #32]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f001 f800 	bl	80059de <I2C_WaitOnTXISFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e07b      	b.n	8004ae0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d034      	beq.n	8004a8c <HAL_I2C_Master_Transmit+0x184>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d130      	bne.n	8004a8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	2200      	movs	r2, #0
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 ff92 	bl	800595e <I2C_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e04d      	b.n	8004ae0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2bff      	cmp	r3, #255	; 0xff
 8004a4c:	d90e      	bls.n	8004a6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	22ff      	movs	r2, #255	; 0xff
 8004a52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	8979      	ldrh	r1, [r7, #10]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f001 f909 	bl	8005c7c <I2C_TransferConfig>
 8004a6a:	e00f      	b.n	8004a8c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	8979      	ldrh	r1, [r7, #10]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f001 f8f8 	bl	8005c7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d19e      	bne.n	80049d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	6a39      	ldr	r1, [r7, #32]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 ffdf 	bl	8005a5e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e01a      	b.n	8004ae0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_I2C_Master_Transmit+0x1e4>)
 8004abe:	400b      	ands	r3, r1
 8004ac0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	80002000 	.word	0x80002000
 8004aec:	fe00e800 	.word	0xfe00e800

08004af0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	461a      	mov	r2, r3
 8004afc:	460b      	mov	r3, r1
 8004afe:	817b      	strh	r3, [r7, #10]
 8004b00:	4613      	mov	r3, r2
 8004b02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	f040 80db 	bne.w	8004cc8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_I2C_Master_Receive+0x30>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e0d4      	b.n	8004cca <HAL_I2C_Master_Receive+0x1da>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b28:	f7fd ff6a 	bl	8002a00 <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	2319      	movs	r3, #25
 8004b34:	2201      	movs	r2, #1
 8004b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 ff0f 	bl	800595e <I2C_WaitOnFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0bf      	b.n	8004cca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2222      	movs	r2, #34	; 0x22
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2210      	movs	r2, #16
 8004b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	893a      	ldrh	r2, [r7, #8]
 8004b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2bff      	cmp	r3, #255	; 0xff
 8004b7a:	d90e      	bls.n	8004b9a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	22ff      	movs	r2, #255	; 0xff
 8004b80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	8979      	ldrh	r1, [r7, #10]
 8004b8a:	4b52      	ldr	r3, [pc, #328]	; (8004cd4 <HAL_I2C_Master_Receive+0x1e4>)
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f001 f872 	bl	8005c7c <I2C_TransferConfig>
 8004b98:	e06d      	b.n	8004c76 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	8979      	ldrh	r1, [r7, #10]
 8004bac:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <HAL_I2C_Master_Receive+0x1e4>)
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f001 f861 	bl	8005c7c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004bba:	e05c      	b.n	8004c76 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	6a39      	ldr	r1, [r7, #32]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 ff89 	bl	8005ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e07c      	b.n	8004cca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d034      	beq.n	8004c76 <HAL_I2C_Master_Receive+0x186>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d130      	bne.n	8004c76 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2180      	movs	r1, #128	; 0x80
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fe9d 	bl	800595e <I2C_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e04d      	b.n	8004cca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2bff      	cmp	r3, #255	; 0xff
 8004c36:	d90e      	bls.n	8004c56 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	22ff      	movs	r2, #255	; 0xff
 8004c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	8979      	ldrh	r1, [r7, #10]
 8004c46:	2300      	movs	r3, #0
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f001 f814 	bl	8005c7c <I2C_TransferConfig>
 8004c54:	e00f      	b.n	8004c76 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	8979      	ldrh	r1, [r7, #10]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f001 f803 	bl	8005c7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d19d      	bne.n	8004bbc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	6a39      	ldr	r1, [r7, #32]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 feea 	bl	8005a5e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e01a      	b.n	8004cca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6859      	ldr	r1, [r3, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_I2C_Master_Receive+0x1e8>)
 8004ca8:	400b      	ands	r3, r1
 8004caa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e000      	b.n	8004cca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
  }
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	80002400 	.word	0x80002400
 8004cd8:	fe00e800 	.word	0xfe00e800

08004cdc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	; 0x28
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	f040 80f1 	bne.w	8004ee0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	d101      	bne.n	8004d12 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e0e7      	b.n	8004ee2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_I2C_IsDeviceReady+0x44>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e0e0      	b.n	8004ee2 <HAL_I2C_IsDeviceReady+0x206>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2224      	movs	r2, #36	; 0x24
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d107      	bne.n	8004d4e <HAL_I2C_IsDeviceReady+0x72>
 8004d3e:	897b      	ldrh	r3, [r7, #10]
 8004d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d4c:	e004      	b.n	8004d58 <HAL_I2C_IsDeviceReady+0x7c>
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d54:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fe4f 	bl	8002a00 <HAL_GetTick>
 8004d62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d90:	e034      	b.n	8004dfc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d01a      	beq.n	8004dd0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d9a:	f7fd fe31 	bl	8002a00 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <HAL_I2C_IsDeviceReady+0xd4>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10f      	bne.n	8004dd0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e088      	b.n	8004ee2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	bf0c      	ite	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	2300      	movne	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004dfc:	7ffb      	ldrb	r3, [r7, #31]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <HAL_I2C_IsDeviceReady+0x12c>
 8004e02:	7fbb      	ldrb	r3, [r7, #30]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0c4      	beq.n	8004d92 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d01a      	beq.n	8004e4c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2120      	movs	r1, #32
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fd9c 	bl	800595e <I2C_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e058      	b.n	8004ee2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2220      	movs	r2, #32
 8004e36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e04a      	b.n	8004ee2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2120      	movs	r1, #32
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fd81 	bl	800595e <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e03d      	b.n	8004ee2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2220      	movs	r2, #32
 8004e74:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d118      	bne.n	8004eb0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2200      	movs	r2, #0
 8004e96:	2120      	movs	r1, #32
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fd60 	bl	800595e <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e01c      	b.n	8004ee2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2220      	movs	r2, #32
 8004eae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	f63f af3b 	bhi.w	8004d36 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	4798      	blx	r3
  }
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d010      	beq.n	8004f64 <HAL_I2C_ER_IRQHandler+0x46>
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	09db      	lsrs	r3, r3, #7
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f043 0201 	orr.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f62:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	0a9b      	lsrs	r3, r3, #10
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d010      	beq.n	8004f92 <HAL_I2C_ER_IRQHandler+0x74>
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	09db      	lsrs	r3, r3, #7
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	f043 0208 	orr.w	r2, r3, #8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	0a5b      	lsrs	r3, r3, #9
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d010      	beq.n	8004fc0 <HAL_I2C_ER_IRQHandler+0xa2>
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	09db      	lsrs	r3, r3, #7
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	f043 0202 	orr.w	r2, r3, #2
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fbe:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 030b 	and.w	r3, r3, #11
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004fd0:	68f9      	ldr	r1, [r7, #12]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fb8a 	bl	80056ec <I2C_ITError>
  }
}
 8004fd8:	bf00      	nop
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
 8005014:	4613      	mov	r3, r2
 8005016:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <I2C_Slave_ISR_IT+0x24>
 8005080:	2302      	movs	r3, #2
 8005082:	e0ec      	b.n	800525e <I2C_Slave_ISR_IT+0x1fe>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d009      	beq.n	80050ac <I2C_Slave_ISR_IT+0x4c>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80050a4:	6939      	ldr	r1, [r7, #16]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f9c0 	bl	800542c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d04d      	beq.n	8005154 <I2C_Slave_ISR_IT+0xf4>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	091b      	lsrs	r3, r3, #4
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d047      	beq.n	8005154 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d128      	bne.n	8005120 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b28      	cmp	r3, #40	; 0x28
 80050d8:	d108      	bne.n	80050ec <I2C_Slave_ISR_IT+0x8c>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050e0:	d104      	bne.n	80050ec <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80050e2:	6939      	ldr	r1, [r7, #16]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 faab 	bl	8005640 <I2C_ITListenCplt>
 80050ea:	e032      	b.n	8005152 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b29      	cmp	r3, #41	; 0x29
 80050f6:	d10e      	bne.n	8005116 <I2C_Slave_ISR_IT+0xb6>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050fe:	d00a      	beq.n	8005116 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2210      	movs	r2, #16
 8005106:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fbe6 	bl	80058da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f92d 	bl	800536e <I2C_ITSlaveSeqCplt>
 8005114:	e01d      	b.n	8005152 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2210      	movs	r2, #16
 800511c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800511e:	e096      	b.n	800524e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2210      	movs	r2, #16
 8005126:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	f043 0204 	orr.w	r2, r3, #4
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <I2C_Slave_ISR_IT+0xe4>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005140:	f040 8085 	bne.w	800524e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	4619      	mov	r1, r3
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 face 	bl	80056ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005150:	e07d      	b.n	800524e <I2C_Slave_ISR_IT+0x1ee>
 8005152:	e07c      	b.n	800524e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	089b      	lsrs	r3, r3, #2
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d030      	beq.n	80051c2 <I2C_Slave_ISR_IT+0x162>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02a      	beq.n	80051c2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d018      	beq.n	80051a8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d14f      	bne.n	8005252 <I2C_Slave_ISR_IT+0x1f2>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051b8:	d04b      	beq.n	8005252 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f8d7 	bl	800536e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80051c0:	e047      	b.n	8005252 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	08db      	lsrs	r3, r3, #3
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80051da:	6939      	ldr	r1, [r7, #16]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f842 	bl	8005266 <I2C_ITAddrCplt>
 80051e2:	e037      	b.n	8005254 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d031      	beq.n	8005254 <I2C_Slave_ISR_IT+0x1f4>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02b      	beq.n	8005254 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d018      	beq.n	8005238 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	851a      	strh	r2, [r3, #40]	; 0x28
 8005236:	e00d      	b.n	8005254 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800523e:	d002      	beq.n	8005246 <I2C_Slave_ISR_IT+0x1e6>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f891 	bl	800536e <I2C_ITSlaveSeqCplt>
 800524c:	e002      	b.n	8005254 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005252:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800527c:	2b28      	cmp	r3, #40	; 0x28
 800527e:	d16a      	bne.n	8005356 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	b29b      	uxth	r3, r3
 800529a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800529e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ac:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80052ba:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d138      	bne.n	8005336 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80052c4:	897b      	ldrh	r3, [r7, #10]
 80052c6:	09db      	lsrs	r3, r3, #7
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	89bb      	ldrh	r3, [r7, #12]
 80052cc:	4053      	eors	r3, r2
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f003 0306 	and.w	r3, r3, #6
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d11c      	bne.n	8005312 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80052d8:	897b      	ldrh	r3, [r7, #10]
 80052da:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d13b      	bne.n	8005366 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2208      	movs	r2, #8
 80052fa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005304:	89ba      	ldrh	r2, [r7, #12]
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fe7c 	bl	8005008 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005310:	e029      	b.n	8005366 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005312:	893b      	ldrh	r3, [r7, #8]
 8005314:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fcdc 	bl	8005cd8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005328:	89ba      	ldrh	r2, [r7, #12]
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fe6a 	bl	8005008 <HAL_I2C_AddrCallback>
}
 8005334:	e017      	b.n	8005366 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fccc 	bl	8005cd8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005348:	89ba      	ldrh	r2, [r7, #12]
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fe5a 	bl	8005008 <HAL_I2C_AddrCallback>
}
 8005354:	e007      	b.n	8005366 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2208      	movs	r2, #8
 800535c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	0b9b      	lsrs	r3, r3, #14
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e00d      	b.n	80053c0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	0bdb      	lsrs	r3, r3, #15
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b29      	cmp	r3, #41	; 0x29
 80053ca:	d112      	bne.n	80053f2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2228      	movs	r2, #40	; 0x28
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2221      	movs	r2, #33	; 0x21
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80053da:	2101      	movs	r1, #1
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fc7b 	bl	8005cd8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fdf8 	bl	8004fe0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80053f0:	e017      	b.n	8005422 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b2a      	cmp	r3, #42	; 0x2a
 80053fc:	d111      	bne.n	8005422 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2228      	movs	r2, #40	; 0x28
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2222      	movs	r2, #34	; 0x22
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800540c:	2102      	movs	r1, #2
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fc62 	bl	8005cd8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fde9 	bl	8004ff4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005448:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2220      	movs	r2, #32
 8005450:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b21      	cmp	r3, #33	; 0x21
 8005456:	d002      	beq.n	800545e <I2C_ITSlaveCplt+0x32>
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b29      	cmp	r3, #41	; 0x29
 800545c:	d108      	bne.n	8005470 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800545e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fc38 	bl	8005cd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2221      	movs	r2, #33	; 0x21
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
 800546e:	e00d      	b.n	800548c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	2b22      	cmp	r3, #34	; 0x22
 8005474:	d002      	beq.n	800547c <I2C_ITSlaveCplt+0x50>
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b2a      	cmp	r3, #42	; 0x2a
 800547a:	d107      	bne.n	800548c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800547c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fc29 	bl	8005cd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2222      	movs	r2, #34	; 0x22
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800549a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b64      	ldr	r3, [pc, #400]	; (8005638 <I2C_ITSlaveCplt+0x20c>)
 80054a8:	400b      	ands	r3, r1
 80054aa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fa14 	bl	80058da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	0b9b      	lsrs	r3, r3, #14
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d013      	beq.n	80054e6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d020      	beq.n	8005518 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	b29a      	uxth	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e4:	e018      	b.n	8005518 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	0bdb      	lsrs	r3, r3, #15
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d012      	beq.n	8005518 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005500:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d020      	beq.n	8005566 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f023 0304 	bic.w	r3, r3, #4
 800552a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00c      	beq.n	8005566 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005574:	f043 0204 	orr.w	r2, r3, #4
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	2b00      	cmp	r3, #0
 8005590:	d010      	beq.n	80055b4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f8a7 	bl	80056ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b28      	cmp	r3, #40	; 0x28
 80055a8:	d141      	bne.n	800562e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80055aa:	6979      	ldr	r1, [r7, #20]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f847 	bl	8005640 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055b2:	e03c      	b.n	800562e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055bc:	d014      	beq.n	80055e8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff fed5 	bl	800536e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a1d      	ldr	r2, [pc, #116]	; (800563c <I2C_ITSlaveCplt+0x210>)
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff fd1f 	bl	8005024 <HAL_I2C_ListenCpltCallback>
}
 80055e6:	e022      	b.n	800562e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b22      	cmp	r3, #34	; 0x22
 80055f2:	d10e      	bne.n	8005612 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff fcf2 	bl	8004ff4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005610:	e00d      	b.n	800562e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fcd9 	bl	8004fe0 <HAL_I2C_SlaveTxCpltCallback>
}
 800562e:	bf00      	nop
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	fe00e800 	.word	0xfe00e800
 800563c:	ffff0000 	.word	0xffff0000

08005640 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <I2C_ITListenCplt+0xa8>)
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	089b      	lsrs	r3, r3, #2
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d022      	beq.n	80056be <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005694:	2b00      	cmp	r3, #0
 8005696:	d012      	beq.n	80056be <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	f043 0204 	orr.w	r2, r3, #4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056be:	f248 0103 	movw	r1, #32771	; 0x8003
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fb08 	bl	8005cd8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2210      	movs	r2, #16
 80056ce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff fca3 	bl	8005024 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	ffff0000 	.word	0xffff0000

080056ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a5d      	ldr	r2, [pc, #372]	; (8005880 <I2C_ITError+0x194>)
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	2b28      	cmp	r3, #40	; 0x28
 8005722:	d005      	beq.n	8005730 <I2C_ITError+0x44>
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b29      	cmp	r3, #41	; 0x29
 8005728:	d002      	beq.n	8005730 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	2b2a      	cmp	r3, #42	; 0x2a
 800572e:	d10b      	bne.n	8005748 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005730:	2103      	movs	r1, #3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fad0 	bl	8005cd8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2228      	movs	r2, #40	; 0x28
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a50      	ldr	r2, [pc, #320]	; (8005884 <I2C_ITError+0x198>)
 8005744:	635a      	str	r2, [r3, #52]	; 0x34
 8005746:	e011      	b.n	800576c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005748:	f248 0103 	movw	r1, #32771	; 0x8003
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fac3 	bl	8005cd8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b60      	cmp	r3, #96	; 0x60
 800575c:	d003      	beq.n	8005766 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	2b00      	cmp	r3, #0
 8005778:	d039      	beq.n	80057ee <I2C_ITError+0x102>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b11      	cmp	r3, #17
 800577e:	d002      	beq.n	8005786 <I2C_ITError+0x9a>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b21      	cmp	r3, #33	; 0x21
 8005784:	d133      	bne.n	80057ee <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005794:	d107      	bne.n	80057a6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fea4 	bl	80044f8 <HAL_DMA_GetState>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d017      	beq.n	80057e6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	4a33      	ldr	r2, [pc, #204]	; (8005888 <I2C_ITError+0x19c>)
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe fda4 	bl	8004318 <HAL_DMA_Abort_IT>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d04d      	beq.n	8005872 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057e4:	e045      	b.n	8005872 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f850 	bl	800588c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057ec:	e041      	b.n	8005872 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d039      	beq.n	800586a <I2C_ITError+0x17e>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b12      	cmp	r3, #18
 80057fa:	d002      	beq.n	8005802 <I2C_ITError+0x116>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b22      	cmp	r3, #34	; 0x22
 8005800:	d133      	bne.n	800586a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800580c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005810:	d107      	bne.n	8005822 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005820:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe fe66 	bl	80044f8 <HAL_DMA_GetState>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d017      	beq.n	8005862 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	4a14      	ldr	r2, [pc, #80]	; (8005888 <I2C_ITError+0x19c>)
 8005838:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fd66 	bl	8004318 <HAL_DMA_Abort_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d011      	beq.n	8005876 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005860:	e009      	b.n	8005876 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f812 	bl	800588c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005868:	e005      	b.n	8005876 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f80e 	bl	800588c <I2C_TreatErrorCallback>
  }
}
 8005870:	e002      	b.n	8005878 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005872:	bf00      	nop
 8005874:	e000      	b.n	8005878 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005876:	bf00      	nop
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	ffff0000 	.word	0xffff0000
 8005884:	08005061 	.word	0x08005061
 8005888:	08005923 	.word	0x08005923

0800588c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b60      	cmp	r3, #96	; 0x60
 800589e:	d10e      	bne.n	80058be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff fbc8 	bl	800504c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058bc:	e009      	b.n	80058d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fbb3 	bl	8005038 <HAL_I2C_ErrorCallback>
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d103      	bne.n	80058f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2200      	movs	r2, #0
 80058f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b01      	cmp	r3, #1
 8005904:	d007      	beq.n	8005916 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0201 	orr.w	r2, r2, #1
 8005914:	619a      	str	r2, [r3, #24]
  }
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	2200      	movs	r2, #0
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594c:	2200      	movs	r2, #0
 800594e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff ff9b 	bl	800588c <I2C_TreatErrorCallback>
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800596e:	e022      	b.n	80059b6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d01e      	beq.n	80059b6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005978:	f7fd f842 	bl	8002a00 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d302      	bcc.n	800598e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d113      	bne.n	80059b6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	f043 0220 	orr.w	r2, r3, #32
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e00f      	b.n	80059d6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4013      	ands	r3, r2
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	bf0c      	ite	eq
 80059c6:	2301      	moveq	r3, #1
 80059c8:	2300      	movne	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d0cd      	beq.n	8005970 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059ea:	e02c      	b.n	8005a46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f8dd 	bl	8005bb0 <I2C_IsAcknowledgeFailed>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e02a      	b.n	8005a56 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	d01e      	beq.n	8005a46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a08:	f7fc fffa 	bl	8002a00 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d302      	bcc.n	8005a1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d113      	bne.n	8005a46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	f043 0220 	orr.w	r2, r3, #32
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e007      	b.n	8005a56 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d1cb      	bne.n	80059ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a6a:	e028      	b.n	8005abe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f89d 	bl	8005bb0 <I2C_IsAcknowledgeFailed>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e026      	b.n	8005ace <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a80:	f7fc ffbe 	bl	8002a00 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d113      	bne.n	8005abe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e007      	b.n	8005ace <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d1cf      	bne.n	8005a6c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ae4:	e055      	b.n	8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 f860 	bl	8005bb0 <I2C_IsAcknowledgeFailed>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e053      	b.n	8005ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d129      	bne.n	8005b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d105      	bne.n	8005b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e03f      	b.n	8005ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2220      	movs	r2, #32
 8005b28:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6859      	ldr	r1, [r3, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005b36:	400b      	ands	r3, r1
 8005b38:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e022      	b.n	8005ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5c:	f7fc ff50 	bl	8002a00 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	f043 0220 	orr.w	r2, r3, #32
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e007      	b.n	8005ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d1a2      	bne.n	8005ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	fe00e800 	.word	0xfe00e800

08005bb0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	2b10      	cmp	r3, #16
 8005bc8:	d151      	bne.n	8005c6e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bca:	e022      	b.n	8005c12 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d01e      	beq.n	8005c12 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd4:	f7fc ff14 	bl	8002a00 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d302      	bcc.n	8005bea <I2C_IsAcknowledgeFailed+0x3a>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d113      	bne.n	8005c12 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f043 0220 	orr.w	r2, r3, #32
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e02e      	b.n	8005c70 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d1d5      	bne.n	8005bcc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2210      	movs	r2, #16
 8005c26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff fe52 	bl	80058da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6859      	ldr	r1, [r3, #4]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <I2C_IsAcknowledgeFailed+0xc8>)
 8005c42:	400b      	ands	r3, r1
 8005c44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f043 0204 	orr.w	r2, r3, #4
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	fe00e800 	.word	0xfe00e800

08005c7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	817b      	strh	r3, [r7, #10]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	0d5b      	lsrs	r3, r3, #21
 8005c98:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <I2C_TransferConfig+0x58>)
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	ea02 0103 	and.w	r1, r2, r3
 8005ca6:	897b      	ldrh	r3, [r7, #10]
 8005ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cac:	7a7b      	ldrb	r3, [r7, #9]
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	03ff63ff 	.word	0x03ff63ff

08005cd8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ce8:	887b      	ldrh	r3, [r7, #2]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00f      	beq.n	8005d12 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005cf8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d06:	2b28      	cmp	r3, #40	; 0x28
 8005d08:	d003      	beq.n	8005d12 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005d10:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005d12:	887b      	ldrh	r3, [r7, #2]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00f      	beq.n	8005d3c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005d22:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d30:	2b28      	cmp	r3, #40	; 0x28
 8005d32:	d003      	beq.n	8005d3c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005d3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	da03      	bge.n	8005d4c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005d4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005d4c:	887b      	ldrh	r3, [r7, #2]
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d103      	bne.n	8005d5a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d5a:	887b      	ldrh	r3, [r7, #2]
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d103      	bne.n	8005d68 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f043 0320 	orr.w	r3, r3, #32
 8005d66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005d68:	887b      	ldrh	r3, [r7, #2]
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d103      	bne.n	8005d76 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d74:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6819      	ldr	r1, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	43da      	mvns	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	400a      	ands	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d138      	bne.n	8005e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e032      	b.n	8005e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2224      	movs	r2, #36	; 0x24
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6819      	ldr	r1, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d139      	bne.n	8005eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e033      	b.n	8005eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2224      	movs	r2, #36	; 0x24
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e000      	b.n	8005eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ec8:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed2:	6013      	str	r3, [r2, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40007000 	.word	0x40007000

08005ee4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ee8:	4b04      	ldr	r3, [pc, #16]	; (8005efc <HAL_PWREx_GetVoltageRange+0x18>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40007000 	.word	0x40007000

08005f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0e:	d130      	bne.n	8005f72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f10:	4b23      	ldr	r3, [pc, #140]	; (8005fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1c:	d038      	beq.n	8005f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f1e:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f2e:	4b1d      	ldr	r3, [pc, #116]	; (8005fa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2232      	movs	r2, #50	; 0x32
 8005f34:	fb02 f303 	mul.w	r3, r2, r3
 8005f38:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	0c9b      	lsrs	r3, r3, #18
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f44:	e002      	b.n	8005f4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f4c:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f58:	d102      	bne.n	8005f60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f2      	bne.n	8005f46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f60:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6c:	d110      	bne.n	8005f90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e00f      	b.n	8005f92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7e:	d007      	beq.n	8005f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f88:	4a05      	ldr	r2, [pc, #20]	; (8005fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40007000 	.word	0x40007000
 8005fa4:	20000130 	.word	0x20000130
 8005fa8:	431bde83 	.word	0x431bde83

08005fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f000 bc11 	b.w	80067e2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc0:	4ba0      	ldr	r3, [pc, #640]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 030c 	and.w	r3, r3, #12
 8005fc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fca:	4b9e      	ldr	r3, [pc, #632]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80e4 	beq.w	80061aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x4c>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b0c      	cmp	r3, #12
 8005fec:	f040 808b 	bne.w	8006106 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	f040 8087 	bne.w	8006106 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ff8:	4b92      	ldr	r3, [pc, #584]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_OscConfig+0x64>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e3e8      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1a      	ldr	r2, [r3, #32]
 8006014:	4b8b      	ldr	r3, [pc, #556]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b00      	cmp	r3, #0
 800601e:	d004      	beq.n	800602a <HAL_RCC_OscConfig+0x7e>
 8006020:	4b88      	ldr	r3, [pc, #544]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006028:	e005      	b.n	8006036 <HAL_RCC_OscConfig+0x8a>
 800602a:	4b86      	ldr	r3, [pc, #536]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800602c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006036:	4293      	cmp	r3, r2
 8006038:	d223      	bcs.n	8006082 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fdaa 	bl	8006b98 <RCC_SetFlashLatencyFromMSIRange>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e3c9      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800604e:	4b7d      	ldr	r3, [pc, #500]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a7c      	ldr	r2, [pc, #496]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006054:	f043 0308 	orr.w	r3, r3, #8
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	4b7a      	ldr	r3, [pc, #488]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	4977      	ldr	r1, [pc, #476]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006068:	4313      	orrs	r3, r2
 800606a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800606c:	4b75      	ldr	r3, [pc, #468]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	021b      	lsls	r3, r3, #8
 800607a:	4972      	ldr	r1, [pc, #456]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800607c:	4313      	orrs	r3, r2
 800607e:	604b      	str	r3, [r1, #4]
 8006080:	e025      	b.n	80060ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006082:	4b70      	ldr	r3, [pc, #448]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a6f      	ldr	r2, [pc, #444]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006088:	f043 0308 	orr.w	r3, r3, #8
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	4b6d      	ldr	r3, [pc, #436]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	496a      	ldr	r1, [pc, #424]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800609c:	4313      	orrs	r3, r2
 800609e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060a0:	4b68      	ldr	r3, [pc, #416]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	4965      	ldr	r1, [pc, #404]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fd6a 	bl	8006b98 <RCC_SetFlashLatencyFromMSIRange>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e389      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060ce:	f000 fc6f 	bl	80069b0 <HAL_RCC_GetSysClockFreq>
 80060d2:	4602      	mov	r2, r0
 80060d4:	4b5b      	ldr	r3, [pc, #364]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	495a      	ldr	r1, [pc, #360]	; (8006248 <HAL_RCC_OscConfig+0x29c>)
 80060e0:	5ccb      	ldrb	r3, [r1, r3]
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ea:	4a58      	ldr	r2, [pc, #352]	; (800624c <HAL_RCC_OscConfig+0x2a0>)
 80060ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80060ee:	4b58      	ldr	r3, [pc, #352]	; (8006250 <HAL_RCC_OscConfig+0x2a4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fb ff64 	bl	8001fc0 <HAL_InitTick>
 80060f8:	4603      	mov	r3, r0
 80060fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d052      	beq.n	80061a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	e36d      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d032      	beq.n	8006174 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800610e:	4b4d      	ldr	r3, [pc, #308]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a4c      	ldr	r2, [pc, #304]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800611a:	f7fc fc71 	bl	8002a00 <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006122:	f7fc fc6d 	bl	8002a00 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e356      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006134:	4b43      	ldr	r3, [pc, #268]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0f0      	beq.n	8006122 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006140:	4b40      	ldr	r3, [pc, #256]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a3f      	ldr	r2, [pc, #252]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006146:	f043 0308 	orr.w	r3, r3, #8
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	493a      	ldr	r1, [pc, #232]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800615e:	4b39      	ldr	r3, [pc, #228]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	4935      	ldr	r1, [pc, #212]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800616e:	4313      	orrs	r3, r2
 8006170:	604b      	str	r3, [r1, #4]
 8006172:	e01a      	b.n	80061aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006174:	4b33      	ldr	r3, [pc, #204]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a32      	ldr	r2, [pc, #200]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800617a:	f023 0301 	bic.w	r3, r3, #1
 800617e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006180:	f7fc fc3e 	bl	8002a00 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006188:	f7fc fc3a 	bl	8002a00 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e323      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800619a:	4b2a      	ldr	r3, [pc, #168]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0x1dc>
 80061a6:	e000      	b.n	80061aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d073      	beq.n	800629e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_OscConfig+0x21c>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b0c      	cmp	r3, #12
 80061c0:	d10e      	bne.n	80061e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d10b      	bne.n	80061e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c8:	4b1e      	ldr	r3, [pc, #120]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d063      	beq.n	800629c <HAL_RCC_OscConfig+0x2f0>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d15f      	bne.n	800629c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e300      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e8:	d106      	bne.n	80061f8 <HAL_RCC_OscConfig+0x24c>
 80061ea:	4b16      	ldr	r3, [pc, #88]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a15      	ldr	r2, [pc, #84]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 80061f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	e01d      	b.n	8006234 <HAL_RCC_OscConfig+0x288>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006200:	d10c      	bne.n	800621c <HAL_RCC_OscConfig+0x270>
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a0f      	ldr	r2, [pc, #60]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a0c      	ldr	r2, [pc, #48]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e00b      	b.n	8006234 <HAL_RCC_OscConfig+0x288>
 800621c:	4b09      	ldr	r3, [pc, #36]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a08      	ldr	r2, [pc, #32]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 8006222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	4b06      	ldr	r3, [pc, #24]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a05      	ldr	r2, [pc, #20]	; (8006244 <HAL_RCC_OscConfig+0x298>)
 800622e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623c:	f7fc fbe0 	bl	8002a00 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006242:	e010      	b.n	8006266 <HAL_RCC_OscConfig+0x2ba>
 8006244:	40021000 	.word	0x40021000
 8006248:	0800dc60 	.word	0x0800dc60
 800624c:	20000130 	.word	0x20000130
 8006250:	20000134 	.word	0x20000134
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006254:	f7fc fbd4 	bl	8002a00 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b64      	cmp	r3, #100	; 0x64
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e2bd      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006266:	4baf      	ldr	r3, [pc, #700]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0f0      	beq.n	8006254 <HAL_RCC_OscConfig+0x2a8>
 8006272:	e014      	b.n	800629e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006274:	f7fc fbc4 	bl	8002a00 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800627c:	f7fc fbc0 	bl	8002a00 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b64      	cmp	r3, #100	; 0x64
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e2a9      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800628e:	4ba5      	ldr	r3, [pc, #660]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1f0      	bne.n	800627c <HAL_RCC_OscConfig+0x2d0>
 800629a:	e000      	b.n	800629e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800629c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d060      	beq.n	800636c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d005      	beq.n	80062bc <HAL_RCC_OscConfig+0x310>
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b0c      	cmp	r3, #12
 80062b4:	d119      	bne.n	80062ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d116      	bne.n	80062ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062bc:	4b99      	ldr	r3, [pc, #612]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_OscConfig+0x328>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e286      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d4:	4b93      	ldr	r3, [pc, #588]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	061b      	lsls	r3, r3, #24
 80062e2:	4990      	ldr	r1, [pc, #576]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e8:	e040      	b.n	800636c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d023      	beq.n	800633a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062f2:	4b8c      	ldr	r3, [pc, #560]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a8b      	ldr	r2, [pc, #556]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80062f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fe:	f7fc fb7f 	bl	8002a00 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006306:	f7fc fb7b 	bl	8002a00 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e264      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006318:	4b82      	ldr	r3, [pc, #520]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0f0      	beq.n	8006306 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006324:	4b7f      	ldr	r3, [pc, #508]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	061b      	lsls	r3, r3, #24
 8006332:	497c      	ldr	r1, [pc, #496]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006334:	4313      	orrs	r3, r2
 8006336:	604b      	str	r3, [r1, #4]
 8006338:	e018      	b.n	800636c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800633a:	4b7a      	ldr	r3, [pc, #488]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a79      	ldr	r2, [pc, #484]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006346:	f7fc fb5b 	bl	8002a00 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800634e:	f7fc fb57 	bl	8002a00 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e240      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006360:	4b70      	ldr	r3, [pc, #448]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f0      	bne.n	800634e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d03c      	beq.n	80063f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01c      	beq.n	80063ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006380:	4b68      	ldr	r3, [pc, #416]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006386:	4a67      	ldr	r2, [pc, #412]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7fc fb36 	bl	8002a00 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006398:	f7fc fb32 	bl	8002a00 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e21b      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063aa:	4b5e      	ldr	r3, [pc, #376]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80063ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0ef      	beq.n	8006398 <HAL_RCC_OscConfig+0x3ec>
 80063b8:	e01b      	b.n	80063f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ba:	4b5a      	ldr	r3, [pc, #360]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80063bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c0:	4a58      	ldr	r2, [pc, #352]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ca:	f7fc fb19 	bl	8002a00 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063d2:	f7fc fb15 	bl	8002a00 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e1fe      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063e4:	4b4f      	ldr	r3, [pc, #316]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80063e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1ef      	bne.n	80063d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80a6 	beq.w	800654c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006400:	2300      	movs	r3, #0
 8006402:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006404:	4b47      	ldr	r3, [pc, #284]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10d      	bne.n	800642c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006410:	4b44      	ldr	r3, [pc, #272]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006414:	4a43      	ldr	r2, [pc, #268]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800641a:	6593      	str	r3, [r2, #88]	; 0x58
 800641c:	4b41      	ldr	r3, [pc, #260]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 800641e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006428:	2301      	movs	r3, #1
 800642a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800642c:	4b3e      	ldr	r3, [pc, #248]	; (8006528 <HAL_RCC_OscConfig+0x57c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d118      	bne.n	800646a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006438:	4b3b      	ldr	r3, [pc, #236]	; (8006528 <HAL_RCC_OscConfig+0x57c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a3a      	ldr	r2, [pc, #232]	; (8006528 <HAL_RCC_OscConfig+0x57c>)
 800643e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006442:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006444:	f7fc fadc 	bl	8002a00 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800644c:	f7fc fad8 	bl	8002a00 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e1c1      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800645e:	4b32      	ldr	r3, [pc, #200]	; (8006528 <HAL_RCC_OscConfig+0x57c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0f0      	beq.n	800644c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d108      	bne.n	8006484 <HAL_RCC_OscConfig+0x4d8>
 8006472:	4b2c      	ldr	r3, [pc, #176]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006478:	4a2a      	ldr	r2, [pc, #168]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006482:	e024      	b.n	80064ce <HAL_RCC_OscConfig+0x522>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	2b05      	cmp	r3, #5
 800648a:	d110      	bne.n	80064ae <HAL_RCC_OscConfig+0x502>
 800648c:	4b25      	ldr	r3, [pc, #148]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	4a24      	ldr	r2, [pc, #144]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 8006494:	f043 0304 	orr.w	r3, r3, #4
 8006498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800649c:	4b21      	ldr	r3, [pc, #132]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a2:	4a20      	ldr	r2, [pc, #128]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064ac:	e00f      	b.n	80064ce <HAL_RCC_OscConfig+0x522>
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b4:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80064b6:	f023 0301 	bic.w	r3, r3, #1
 80064ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064be:	4b19      	ldr	r3, [pc, #100]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	4a17      	ldr	r2, [pc, #92]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80064c6:	f023 0304 	bic.w	r3, r3, #4
 80064ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d6:	f7fc fa93 	bl	8002a00 <HAL_GetTick>
 80064da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064dc:	e00a      	b.n	80064f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064de:	f7fc fa8f 	bl	8002a00 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e176      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <HAL_RCC_OscConfig+0x578>)
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0ed      	beq.n	80064de <HAL_RCC_OscConfig+0x532>
 8006502:	e01a      	b.n	800653a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006504:	f7fc fa7c 	bl	8002a00 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800650a:	e00f      	b.n	800652c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650c:	f7fc fa78 	bl	8002a00 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f241 3288 	movw	r2, #5000	; 0x1388
 800651a:	4293      	cmp	r3, r2
 800651c:	d906      	bls.n	800652c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e15f      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
 8006522:	bf00      	nop
 8006524:	40021000 	.word	0x40021000
 8006528:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800652c:	4baa      	ldr	r3, [pc, #680]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 800652e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e8      	bne.n	800650c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800653a:	7ffb      	ldrb	r3, [r7, #31]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d105      	bne.n	800654c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006540:	4ba5      	ldr	r3, [pc, #660]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006544:	4aa4      	ldr	r2, [pc, #656]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800654a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d03c      	beq.n	80065d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01c      	beq.n	800659a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006560:	4b9d      	ldr	r3, [pc, #628]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006566:	4a9c      	ldr	r2, [pc, #624]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006570:	f7fc fa46 	bl	8002a00 <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006578:	f7fc fa42 	bl	8002a00 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e12b      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800658a:	4b93      	ldr	r3, [pc, #588]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 800658c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0ef      	beq.n	8006578 <HAL_RCC_OscConfig+0x5cc>
 8006598:	e01b      	b.n	80065d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800659a:	4b8f      	ldr	r3, [pc, #572]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 800659c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065a0:	4a8d      	ldr	r2, [pc, #564]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065aa:	f7fc fa29 	bl	8002a00 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065b2:	f7fc fa25 	bl	8002a00 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e10e      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065c4:	4b84      	ldr	r3, [pc, #528]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80065c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1ef      	bne.n	80065b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 8102 	beq.w	80067e0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	f040 80c5 	bne.w	8006770 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80065e6:	4b7c      	ldr	r3, [pc, #496]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f003 0203 	and.w	r2, r3, #3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d12c      	bne.n	8006654 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	3b01      	subs	r3, #1
 8006606:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006608:	429a      	cmp	r2, r3
 800660a:	d123      	bne.n	8006654 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006616:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006618:	429a      	cmp	r2, r3
 800661a:	d11b      	bne.n	8006654 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006628:	429a      	cmp	r2, r3
 800662a:	d113      	bne.n	8006654 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	3b01      	subs	r3, #1
 800663a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d109      	bne.n	8006654 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	3b01      	subs	r3, #1
 800664e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006650:	429a      	cmp	r2, r3
 8006652:	d067      	beq.n	8006724 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b0c      	cmp	r3, #12
 8006658:	d062      	beq.n	8006720 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800665a:	4b5f      	ldr	r3, [pc, #380]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e0bb      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800666a:	4b5b      	ldr	r3, [pc, #364]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5a      	ldr	r2, [pc, #360]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006674:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006676:	f7fc f9c3 	bl	8002a00 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800667e:	f7fc f9bf 	bl	8002a00 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e0a8      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006690:	4b51      	ldr	r3, [pc, #324]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f0      	bne.n	800667e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800669c:	4b4e      	ldr	r3, [pc, #312]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	4b4e      	ldr	r3, [pc, #312]	; (80067dc <HAL_RCC_OscConfig+0x830>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066ac:	3a01      	subs	r2, #1
 80066ae:	0112      	lsls	r2, r2, #4
 80066b0:	4311      	orrs	r1, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066b6:	0212      	lsls	r2, r2, #8
 80066b8:	4311      	orrs	r1, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066be:	0852      	lsrs	r2, r2, #1
 80066c0:	3a01      	subs	r2, #1
 80066c2:	0552      	lsls	r2, r2, #21
 80066c4:	4311      	orrs	r1, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066ca:	0852      	lsrs	r2, r2, #1
 80066cc:	3a01      	subs	r2, #1
 80066ce:	0652      	lsls	r2, r2, #25
 80066d0:	4311      	orrs	r1, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066d6:	06d2      	lsls	r2, r2, #27
 80066d8:	430a      	orrs	r2, r1
 80066da:	493f      	ldr	r1, [pc, #252]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80066e0:	4b3d      	ldr	r3, [pc, #244]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a3c      	ldr	r2, [pc, #240]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80066e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066ec:	4b3a      	ldr	r3, [pc, #232]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4a39      	ldr	r2, [pc, #228]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80066f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066f8:	f7fc f982 	bl	8002a00 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006700:	f7fc f97e 	bl	8002a00 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e067      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006712:	4b31      	ldr	r3, [pc, #196]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f0      	beq.n	8006700 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800671e:	e05f      	b.n	80067e0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e05e      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006724:	4b2c      	ldr	r3, [pc, #176]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d157      	bne.n	80067e0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006730:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800673a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800673c:	4b26      	ldr	r3, [pc, #152]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	4a25      	ldr	r2, [pc, #148]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006746:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006748:	f7fc f95a 	bl	8002a00 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006750:	f7fc f956 	bl	8002a00 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e03f      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006762:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0x7a4>
 800676e:	e037      	b.n	80067e0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b0c      	cmp	r3, #12
 8006774:	d02d      	beq.n	80067d2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 800677c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006780:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d105      	bne.n	800679a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800678e:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	4a11      	ldr	r2, [pc, #68]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 8006794:	f023 0303 	bic.w	r3, r3, #3
 8006798:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800679a:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	4a0e      	ldr	r2, [pc, #56]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80067a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80067a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067aa:	f7fc f929 	bl	8002a00 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b2:	f7fc f925 	bl	8002a00 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e00e      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067c4:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <HAL_RCC_OscConfig+0x82c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f0      	bne.n	80067b2 <HAL_RCC_OscConfig+0x806>
 80067d0:	e006      	b.n	80067e0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e005      	b.n	80067e2 <HAL_RCC_OscConfig+0x836>
 80067d6:	bf00      	nop
 80067d8:	40021000 	.word	0x40021000
 80067dc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop

080067ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0c8      	b.n	8006992 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006800:	4b66      	ldr	r3, [pc, #408]	; (800699c <HAL_RCC_ClockConfig+0x1b0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d910      	bls.n	8006830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680e:	4b63      	ldr	r3, [pc, #396]	; (800699c <HAL_RCC_ClockConfig+0x1b0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 0207 	bic.w	r2, r3, #7
 8006816:	4961      	ldr	r1, [pc, #388]	; (800699c <HAL_RCC_ClockConfig+0x1b0>)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	4313      	orrs	r3, r2
 800681c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800681e:	4b5f      	ldr	r3, [pc, #380]	; (800699c <HAL_RCC_ClockConfig+0x1b0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d001      	beq.n	8006830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e0b0      	b.n	8006992 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d04c      	beq.n	80068d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d107      	bne.n	8006854 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006844:	4b56      	ldr	r3, [pc, #344]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d121      	bne.n	8006894 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e09e      	b.n	8006992 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d107      	bne.n	800686c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800685c:	4b50      	ldr	r3, [pc, #320]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d115      	bne.n	8006894 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e092      	b.n	8006992 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d107      	bne.n	8006884 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006874:	4b4a      	ldr	r3, [pc, #296]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e086      	b.n	8006992 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006884:	4b46      	ldr	r3, [pc, #280]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e07e      	b.n	8006992 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006894:	4b42      	ldr	r3, [pc, #264]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f023 0203 	bic.w	r2, r3, #3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	493f      	ldr	r1, [pc, #252]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a6:	f7fc f8ab 	bl	8002a00 <HAL_GetTick>
 80068aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ac:	e00a      	b.n	80068c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068ae:	f7fc f8a7 	bl	8002a00 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068bc:	4293      	cmp	r3, r2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e066      	b.n	8006992 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068c4:	4b36      	ldr	r3, [pc, #216]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 020c 	and.w	r2, r3, #12
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d1eb      	bne.n	80068ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d008      	beq.n	80068f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e2:	4b2f      	ldr	r3, [pc, #188]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	492c      	ldr	r1, [pc, #176]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068f4:	4b29      	ldr	r3, [pc, #164]	; (800699c <HAL_RCC_ClockConfig+0x1b0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d210      	bcs.n	8006924 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006902:	4b26      	ldr	r3, [pc, #152]	; (800699c <HAL_RCC_ClockConfig+0x1b0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f023 0207 	bic.w	r2, r3, #7
 800690a:	4924      	ldr	r1, [pc, #144]	; (800699c <HAL_RCC_ClockConfig+0x1b0>)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	4313      	orrs	r3, r2
 8006910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006912:	4b22      	ldr	r3, [pc, #136]	; (800699c <HAL_RCC_ClockConfig+0x1b0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	429a      	cmp	r2, r3
 800691e:	d001      	beq.n	8006924 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e036      	b.n	8006992 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006930:	4b1b      	ldr	r3, [pc, #108]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	4918      	ldr	r1, [pc, #96]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 800693e:	4313      	orrs	r3, r2
 8006940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800694e:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	4910      	ldr	r1, [pc, #64]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 800695e:	4313      	orrs	r3, r2
 8006960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006962:	f000 f825 	bl	80069b0 <HAL_RCC_GetSysClockFreq>
 8006966:	4602      	mov	r2, r0
 8006968:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <HAL_RCC_ClockConfig+0x1b4>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	490c      	ldr	r1, [pc, #48]	; (80069a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006974:	5ccb      	ldrb	r3, [r1, r3]
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	fa22 f303 	lsr.w	r3, r2, r3
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006982:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <HAL_RCC_ClockConfig+0x1c0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4618      	mov	r0, r3
 8006988:	f7fb fb1a 	bl	8001fc0 <HAL_InitTick>
 800698c:	4603      	mov	r3, r0
 800698e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006990:	7afb      	ldrb	r3, [r7, #11]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40022000 	.word	0x40022000
 80069a0:	40021000 	.word	0x40021000
 80069a4:	0800dc60 	.word	0x0800dc60
 80069a8:	20000130 	.word	0x20000130
 80069ac:	20000134 	.word	0x20000134

080069b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b089      	sub	sp, #36	; 0x24
 80069b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	2300      	movs	r3, #0
 80069bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069be:	4b3e      	ldr	r3, [pc, #248]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 030c 	and.w	r3, r3, #12
 80069c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069c8:	4b3b      	ldr	r3, [pc, #236]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x34>
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b0c      	cmp	r3, #12
 80069dc:	d121      	bne.n	8006a22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d11e      	bne.n	8006a22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80069e4:	4b34      	ldr	r3, [pc, #208]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d107      	bne.n	8006a00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80069f0:	4b31      	ldr	r3, [pc, #196]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80069f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f6:	0a1b      	lsrs	r3, r3, #8
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	e005      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a00:	4b2d      	ldr	r3, [pc, #180]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	091b      	lsrs	r3, r3, #4
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a0c:	4a2b      	ldr	r2, [pc, #172]	; (8006abc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10d      	bne.n	8006a38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a20:	e00a      	b.n	8006a38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d102      	bne.n	8006a2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a28:	4b25      	ldr	r3, [pc, #148]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e004      	b.n	8006a38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d101      	bne.n	8006a38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a34:	4b22      	ldr	r3, [pc, #136]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	2b0c      	cmp	r3, #12
 8006a3c:	d134      	bne.n	8006aa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a3e:	4b1e      	ldr	r3, [pc, #120]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d003      	beq.n	8006a56 <HAL_RCC_GetSysClockFreq+0xa6>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d003      	beq.n	8006a5c <HAL_RCC_GetSysClockFreq+0xac>
 8006a54:	e005      	b.n	8006a62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006a56:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a58:	617b      	str	r3, [r7, #20]
      break;
 8006a5a:	e005      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006a5c:	4b18      	ldr	r3, [pc, #96]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a5e:	617b      	str	r3, [r7, #20]
      break;
 8006a60:	e002      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	617b      	str	r3, [r7, #20]
      break;
 8006a66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a68:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	091b      	lsrs	r3, r3, #4
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	3301      	adds	r3, #1
 8006a74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a76:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	0a1b      	lsrs	r3, r3, #8
 8006a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	fb02 f203 	mul.w	r2, r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	0e5b      	lsrs	r3, r3, #25
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	3301      	adds	r3, #1
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3724      	adds	r7, #36	; 0x24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	0800dc78 	.word	0x0800dc78
 8006ac0:	00f42400 	.word	0x00f42400

08006ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ac8:	4b03      	ldr	r3, [pc, #12]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aca:	681b      	ldr	r3, [r3, #0]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	20000130 	.word	0x20000130

08006adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ae0:	f7ff fff0 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	0a1b      	lsrs	r3, r3, #8
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	4904      	ldr	r1, [pc, #16]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006af2:	5ccb      	ldrb	r3, [r1, r3]
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40021000 	.word	0x40021000
 8006b04:	0800dc70 	.word	0x0800dc70

08006b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b0c:	f7ff ffda 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0adb      	lsrs	r3, r3, #11
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4904      	ldr	r1, [pc, #16]	; (8006b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b1e:	5ccb      	ldrb	r3, [r1, r3]
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	0800dc70 	.word	0x0800dc70

08006b34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	220f      	movs	r2, #15
 8006b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006b44:	4b12      	ldr	r3, [pc, #72]	; (8006b90 <HAL_RCC_GetClockConfig+0x5c>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f003 0203 	and.w	r2, r3, #3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006b50:	4b0f      	ldr	r3, [pc, #60]	; (8006b90 <HAL_RCC_GetClockConfig+0x5c>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <HAL_RCC_GetClockConfig+0x5c>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006b68:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <HAL_RCC_GetClockConfig+0x5c>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	08db      	lsrs	r3, r3, #3
 8006b6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006b76:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <HAL_RCC_GetClockConfig+0x60>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0207 	and.w	r2, r3, #7
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	601a      	str	r2, [r3, #0]
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40021000 	.word	0x40021000
 8006b94:	40022000 	.word	0x40022000

08006b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ba4:	4b2a      	ldr	r3, [pc, #168]	; (8006c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006bb0:	f7ff f998 	bl	8005ee4 <HAL_PWREx_GetVoltageRange>
 8006bb4:	6178      	str	r0, [r7, #20]
 8006bb6:	e014      	b.n	8006be2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bb8:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbc:	4a24      	ldr	r2, [pc, #144]	; (8006c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8006bc4:	4b22      	ldr	r3, [pc, #136]	; (8006c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006bd0:	f7ff f988 	bl	8005ee4 <HAL_PWREx_GetVoltageRange>
 8006bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006bd6:	4b1e      	ldr	r3, [pc, #120]	; (8006c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bda:	4a1d      	ldr	r2, [pc, #116]	; (8006c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be8:	d10b      	bne.n	8006c02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b80      	cmp	r3, #128	; 0x80
 8006bee:	d919      	bls.n	8006c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2ba0      	cmp	r3, #160	; 0xa0
 8006bf4:	d902      	bls.n	8006bfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	613b      	str	r3, [r7, #16]
 8006bfa:	e013      	b.n	8006c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	e010      	b.n	8006c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b80      	cmp	r3, #128	; 0x80
 8006c06:	d902      	bls.n	8006c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c08:	2303      	movs	r3, #3
 8006c0a:	613b      	str	r3, [r7, #16]
 8006c0c:	e00a      	b.n	8006c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d102      	bne.n	8006c1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c14:	2302      	movs	r3, #2
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	e004      	b.n	8006c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b70      	cmp	r3, #112	; 0x70
 8006c1e:	d101      	bne.n	8006c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c20:	2301      	movs	r3, #1
 8006c22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c24:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f023 0207 	bic.w	r2, r3, #7
 8006c2c:	4909      	ldr	r1, [pc, #36]	; (8006c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c34:	4b07      	ldr	r3, [pc, #28]	; (8006c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d001      	beq.n	8006c46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40021000 	.word	0x40021000
 8006c54:	40022000 	.word	0x40022000

08006c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c60:	2300      	movs	r3, #0
 8006c62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c64:	2300      	movs	r3, #0
 8006c66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d031      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c7c:	d01a      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006c7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c82:	d814      	bhi.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c8c:	d10f      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006c8e:	4bac      	ldr	r3, [pc, #688]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	4aab      	ldr	r2, [pc, #684]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c9a:	e00c      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 f9dc 	bl	8007060 <RCCEx_PLLSAI1_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cac:	e003      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb6:	7cfb      	ldrb	r3, [r7, #19]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10b      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cbc:	4ba0      	ldr	r3, [pc, #640]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	499d      	ldr	r1, [pc, #628]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006cd2:	e001      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd4:	7cfb      	ldrb	r3, [r7, #19]
 8006cd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8099 	beq.w	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cea:	4b95      	ldr	r3, [pc, #596]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00d      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d00:	4b8f      	ldr	r3, [pc, #572]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d04:	4a8e      	ldr	r2, [pc, #568]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d0c:	4b8c      	ldr	r3, [pc, #560]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d1c:	4b89      	ldr	r3, [pc, #548]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a88      	ldr	r2, [pc, #544]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d28:	f7fb fe6a 	bl	8002a00 <HAL_GetTick>
 8006d2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d2e:	e009      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d30:	f7fb fe66 	bl	8002a00 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d902      	bls.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	74fb      	strb	r3, [r7, #19]
        break;
 8006d42:	e005      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d44:	4b7f      	ldr	r3, [pc, #508]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0ef      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006d50:	7cfb      	ldrb	r3, [r7, #19]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d155      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d56:	4b7a      	ldr	r3, [pc, #488]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01e      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d019      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d72:	4b73      	ldr	r3, [pc, #460]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d7e:	4b70      	ldr	r3, [pc, #448]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d84:	4a6e      	ldr	r2, [pc, #440]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d8e:	4b6c      	ldr	r3, [pc, #432]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d94:	4a6a      	ldr	r2, [pc, #424]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d9e:	4a68      	ldr	r2, [pc, #416]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d016      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db0:	f7fb fe26 	bl	8002a00 <HAL_GetTick>
 8006db4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006db6:	e00b      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db8:	f7fb fe22 	bl	8002a00 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d902      	bls.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	74fb      	strb	r3, [r7, #19]
            break;
 8006dce:	e006      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dd0:	4b5b      	ldr	r3, [pc, #364]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0ec      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006dde:	7cfb      	ldrb	r3, [r7, #19]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006de4:	4b56      	ldr	r3, [pc, #344]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df2:	4953      	ldr	r1, [pc, #332]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006dfa:	e004      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dfc:	7cfb      	ldrb	r3, [r7, #19]
 8006dfe:	74bb      	strb	r3, [r7, #18]
 8006e00:	e001      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e02:	7cfb      	ldrb	r3, [r7, #19]
 8006e04:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e06:	7c7b      	ldrb	r3, [r7, #17]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d105      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0c:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	4a4b      	ldr	r2, [pc, #300]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e24:	4b46      	ldr	r3, [pc, #280]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2a:	f023 0203 	bic.w	r2, r3, #3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	4943      	ldr	r1, [pc, #268]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e46:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4c:	f023 020c 	bic.w	r2, r3, #12
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	493a      	ldr	r1, [pc, #232]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e68:	4b35      	ldr	r3, [pc, #212]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	4932      	ldr	r1, [pc, #200]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e8a:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	4929      	ldr	r1, [pc, #164]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006eac:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eba:	4921      	ldr	r1, [pc, #132]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ece:	4b1c      	ldr	r3, [pc, #112]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	4918      	ldr	r1, [pc, #96]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ef0:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	4910      	ldr	r1, [pc, #64]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d02c      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f12:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	4907      	ldr	r1, [pc, #28]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f30:	d10a      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	4a02      	ldr	r2, [pc, #8]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f3c:	60d3      	str	r3, [r2, #12]
 8006f3e:	e015      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006f40:	40021000 	.word	0x40021000
 8006f44:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3304      	adds	r3, #4
 8006f56:	2101      	movs	r1, #1
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 f881 	bl	8007060 <RCCEx_PLLSAI1_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8006f68:	7cfb      	ldrb	r3, [r7, #19]
 8006f6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d028      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f78:	4b30      	ldr	r3, [pc, #192]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	492d      	ldr	r1, [pc, #180]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f96:	d106      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f98:	4b28      	ldr	r3, [pc, #160]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	4a27      	ldr	r2, [pc, #156]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fa2:	60d3      	str	r3, [r2, #12]
 8006fa4:	e011      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fae:	d10c      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f852 	bl	8007060 <RCCEx_PLLSAI1_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fc0:	7cfb      	ldrb	r3, [r7, #19]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8006fc6:	7cfb      	ldrb	r3, [r7, #19]
 8006fc8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01c      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fd6:	4b19      	ldr	r3, [pc, #100]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe4:	4915      	ldr	r1, [pc, #84]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ff4:	d10c      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	2102      	movs	r1, #2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 f82f 	bl	8007060 <RCCEx_PLLSAI1_Config>
 8007002:	4603      	mov	r3, r0
 8007004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007006:	7cfb      	ldrb	r3, [r7, #19]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800700c:	7cfb      	ldrb	r3, [r7, #19]
 800700e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800701c:	4b07      	ldr	r3, [pc, #28]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800701e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007022:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702a:	4904      	ldr	r1, [pc, #16]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007032:	7cbb      	ldrb	r3, [r7, #18]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40021000 	.word	0x40021000

08007040 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a04      	ldr	r2, [pc, #16]	; (800705c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800704a:	f043 0304 	orr.w	r3, r3, #4
 800704e:	6013      	str	r3, [r2, #0]
}
 8007050:	bf00      	nop
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40021000 	.word	0x40021000

08007060 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800706e:	4b74      	ldr	r3, [pc, #464]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d018      	beq.n	80070ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800707a:	4b71      	ldr	r3, [pc, #452]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f003 0203 	and.w	r2, r3, #3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d10d      	bne.n	80070a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
       ||
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007092:	4b6b      	ldr	r3, [pc, #428]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	091b      	lsrs	r3, r3, #4
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
       ||
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d047      	beq.n	8007136 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	73fb      	strb	r3, [r7, #15]
 80070aa:	e044      	b.n	8007136 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d018      	beq.n	80070e6 <RCCEx_PLLSAI1_Config+0x86>
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d825      	bhi.n	8007104 <RCCEx_PLLSAI1_Config+0xa4>
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d002      	beq.n	80070c2 <RCCEx_PLLSAI1_Config+0x62>
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d009      	beq.n	80070d4 <RCCEx_PLLSAI1_Config+0x74>
 80070c0:	e020      	b.n	8007104 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070c2:	4b5f      	ldr	r3, [pc, #380]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d11d      	bne.n	800710a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070d2:	e01a      	b.n	800710a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070d4:	4b5a      	ldr	r3, [pc, #360]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d116      	bne.n	800710e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070e4:	e013      	b.n	800710e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80070e6:	4b56      	ldr	r3, [pc, #344]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10f      	bne.n	8007112 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80070f2:	4b53      	ldr	r3, [pc, #332]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007102:	e006      	b.n	8007112 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	73fb      	strb	r3, [r7, #15]
      break;
 8007108:	e004      	b.n	8007114 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800710a:	bf00      	nop
 800710c:	e002      	b.n	8007114 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800710e:	bf00      	nop
 8007110:	e000      	b.n	8007114 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007112:	bf00      	nop
    }

    if(status == HAL_OK)
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10d      	bne.n	8007136 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800711a:	4b49      	ldr	r3, [pc, #292]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6819      	ldr	r1, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	3b01      	subs	r3, #1
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	430b      	orrs	r3, r1
 8007130:	4943      	ldr	r1, [pc, #268]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007132:	4313      	orrs	r3, r2
 8007134:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d17c      	bne.n	8007236 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800713c:	4b40      	ldr	r3, [pc, #256]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a3f      	ldr	r2, [pc, #252]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007142:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007148:	f7fb fc5a 	bl	8002a00 <HAL_GetTick>
 800714c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800714e:	e009      	b.n	8007164 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007150:	f7fb fc56 	bl	8002a00 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d902      	bls.n	8007164 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	73fb      	strb	r3, [r7, #15]
        break;
 8007162:	e005      	b.n	8007170 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007164:	4b36      	ldr	r3, [pc, #216]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1ef      	bne.n	8007150 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d15f      	bne.n	8007236 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d110      	bne.n	800719e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800717c:	4b30      	ldr	r3, [pc, #192]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007184:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6892      	ldr	r2, [r2, #8]
 800718c:	0211      	lsls	r1, r2, #8
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	68d2      	ldr	r2, [r2, #12]
 8007192:	06d2      	lsls	r2, r2, #27
 8007194:	430a      	orrs	r2, r1
 8007196:	492a      	ldr	r1, [pc, #168]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007198:	4313      	orrs	r3, r2
 800719a:	610b      	str	r3, [r1, #16]
 800719c:	e027      	b.n	80071ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d112      	bne.n	80071ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071a4:	4b26      	ldr	r3, [pc, #152]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80071ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6892      	ldr	r2, [r2, #8]
 80071b4:	0211      	lsls	r1, r2, #8
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6912      	ldr	r2, [r2, #16]
 80071ba:	0852      	lsrs	r2, r2, #1
 80071bc:	3a01      	subs	r2, #1
 80071be:	0552      	lsls	r2, r2, #21
 80071c0:	430a      	orrs	r2, r1
 80071c2:	491f      	ldr	r1, [pc, #124]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	610b      	str	r3, [r1, #16]
 80071c8:	e011      	b.n	80071ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071ca:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80071d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6892      	ldr	r2, [r2, #8]
 80071da:	0211      	lsls	r1, r2, #8
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6952      	ldr	r2, [r2, #20]
 80071e0:	0852      	lsrs	r2, r2, #1
 80071e2:	3a01      	subs	r2, #1
 80071e4:	0652      	lsls	r2, r2, #25
 80071e6:	430a      	orrs	r2, r1
 80071e8:	4915      	ldr	r1, [pc, #84]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80071ee:	4b14      	ldr	r3, [pc, #80]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a13      	ldr	r2, [pc, #76]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fa:	f7fb fc01 	bl	8002a00 <HAL_GetTick>
 80071fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007200:	e009      	b.n	8007216 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007202:	f7fb fbfd 	bl	8002a00 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d902      	bls.n	8007216 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	73fb      	strb	r3, [r7, #15]
          break;
 8007214:	e005      	b.n	8007222 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007216:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0ef      	beq.n	8007202 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	4903      	ldr	r1, [pc, #12]	; (8007240 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007232:	4313      	orrs	r3, r2
 8007234:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40021000 	.word	0x40021000

08007244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e049      	b.n	80072ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f841 	bl	80072f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3304      	adds	r3, #4
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f000 fb42 	bl	800790c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b01      	cmp	r3, #1
 800731a:	d001      	beq.n	8007320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e03b      	b.n	8007398 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0201 	orr.w	r2, r2, #1
 8007336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <HAL_TIM_Base_Start_IT+0x9c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d009      	beq.n	8007356 <HAL_TIM_Base_Start_IT+0x4e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800734a:	d004      	beq.n	8007356 <HAL_TIM_Base_Start_IT+0x4e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d115      	bne.n	8007382 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	4b13      	ldr	r3, [pc, #76]	; (80073ac <HAL_TIM_Base_Start_IT+0xa4>)
 800735e:	4013      	ands	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b06      	cmp	r3, #6
 8007366:	d015      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x8c>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736e:	d011      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0201 	orr.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007380:	e008      	b.n	8007394 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0201 	orr.w	r2, r2, #1
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	e000      	b.n	8007396 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007394:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40014000 	.word	0x40014000
 80073ac:	00010007 	.word	0x00010007

080073b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e049      	b.n	8007456 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fb f8ca 	bl	8002570 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f000 fa8c 	bl	800790c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b02      	cmp	r3, #2
 8007472:	d122      	bne.n	80074ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	d11b      	bne.n	80074ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f06f 0202 	mvn.w	r2, #2
 800748a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fa15 	bl	80078d0 <HAL_TIM_IC_CaptureCallback>
 80074a6:	e005      	b.n	80074b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fa07 	bl	80078bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa18 	bl	80078e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d122      	bne.n	800750e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d11b      	bne.n	800750e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f06f 0204 	mvn.w	r2, #4
 80074de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f9eb 	bl	80078d0 <HAL_TIM_IC_CaptureCallback>
 80074fa:	e005      	b.n	8007508 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f9dd 	bl	80078bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f9ee 	bl	80078e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b08      	cmp	r3, #8
 800751a:	d122      	bne.n	8007562 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b08      	cmp	r3, #8
 8007528:	d11b      	bne.n	8007562 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f06f 0208 	mvn.w	r2, #8
 8007532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2204      	movs	r2, #4
 8007538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	f003 0303 	and.w	r3, r3, #3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9c1 	bl	80078d0 <HAL_TIM_IC_CaptureCallback>
 800754e:	e005      	b.n	800755c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f9b3 	bl	80078bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f9c4 	bl	80078e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b10      	cmp	r3, #16
 800756e:	d122      	bne.n	80075b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0310 	and.w	r3, r3, #16
 800757a:	2b10      	cmp	r3, #16
 800757c:	d11b      	bne.n	80075b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f06f 0210 	mvn.w	r2, #16
 8007586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2208      	movs	r2, #8
 800758c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f997 	bl	80078d0 <HAL_TIM_IC_CaptureCallback>
 80075a2:	e005      	b.n	80075b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f989 	bl	80078bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f99a 	bl	80078e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d10e      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d107      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f06f 0201 	mvn.w	r2, #1
 80075da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7fa fcb1 	bl	8001f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d10e      	bne.n	800760e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	2b80      	cmp	r3, #128	; 0x80
 80075fc:	d107      	bne.n	800760e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fd49 	bl	80080a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800761c:	d10e      	bne.n	800763c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d107      	bne.n	800763c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fd3c 	bl	80080b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d10e      	bne.n	8007668 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	d107      	bne.n	8007668 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f948 	bl	80078f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b20      	cmp	r3, #32
 8007674:	d10e      	bne.n	8007694 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b20      	cmp	r3, #32
 8007682:	d107      	bne.n	8007694 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0220 	mvn.w	r2, #32
 800768c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fcfc 	bl	800808c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e0fd      	b.n	80078b2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b14      	cmp	r3, #20
 80076c2:	f200 80f0 	bhi.w	80078a6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	08007721 	.word	0x08007721
 80076d0:	080078a7 	.word	0x080078a7
 80076d4:	080078a7 	.word	0x080078a7
 80076d8:	080078a7 	.word	0x080078a7
 80076dc:	08007761 	.word	0x08007761
 80076e0:	080078a7 	.word	0x080078a7
 80076e4:	080078a7 	.word	0x080078a7
 80076e8:	080078a7 	.word	0x080078a7
 80076ec:	080077a3 	.word	0x080077a3
 80076f0:	080078a7 	.word	0x080078a7
 80076f4:	080078a7 	.word	0x080078a7
 80076f8:	080078a7 	.word	0x080078a7
 80076fc:	080077e3 	.word	0x080077e3
 8007700:	080078a7 	.word	0x080078a7
 8007704:	080078a7 	.word	0x080078a7
 8007708:	080078a7 	.word	0x080078a7
 800770c:	08007825 	.word	0x08007825
 8007710:	080078a7 	.word	0x080078a7
 8007714:	080078a7 	.word	0x080078a7
 8007718:	080078a7 	.word	0x080078a7
 800771c:	08007865 	.word	0x08007865
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68b9      	ldr	r1, [r7, #8]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f954 	bl	80079d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0208 	orr.w	r2, r2, #8
 800773a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0204 	bic.w	r2, r2, #4
 800774a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6999      	ldr	r1, [r3, #24]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	691a      	ldr	r2, [r3, #16]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	619a      	str	r2, [r3, #24]
      break;
 800775e:	e0a3      	b.n	80078a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f9b0 	bl	8007acc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800777a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6999      	ldr	r1, [r3, #24]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	021a      	lsls	r2, r3, #8
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	619a      	str	r2, [r3, #24]
      break;
 80077a0:	e082      	b.n	80078a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fa09 	bl	8007bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69da      	ldr	r2, [r3, #28]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0208 	orr.w	r2, r2, #8
 80077bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0204 	bic.w	r2, r2, #4
 80077cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69d9      	ldr	r1, [r3, #28]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	61da      	str	r2, [r3, #28]
      break;
 80077e0:	e062      	b.n	80078a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fa61 	bl	8007cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69da      	ldr	r2, [r3, #28]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800780c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69d9      	ldr	r1, [r3, #28]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	021a      	lsls	r2, r3, #8
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	61da      	str	r2, [r3, #28]
      break;
 8007822:	e041      	b.n	80078a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fa9e 	bl	8007d6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 0208 	orr.w	r2, r2, #8
 800783e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0204 	bic.w	r2, r2, #4
 800784e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	691a      	ldr	r2, [r3, #16]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007862:	e021      	b.n	80078a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fad6 	bl	8007e1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800787e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800788e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	021a      	lsls	r2, r3, #8
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80078a4:	e000      	b.n	80078a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80078a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop

080078bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a2a      	ldr	r2, [pc, #168]	; (80079c8 <TIM_Base_SetConfig+0xbc>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d003      	beq.n	800792c <TIM_Base_SetConfig+0x20>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792a:	d108      	bne.n	800793e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a21      	ldr	r2, [pc, #132]	; (80079c8 <TIM_Base_SetConfig+0xbc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00b      	beq.n	800795e <TIM_Base_SetConfig+0x52>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794c:	d007      	beq.n	800795e <TIM_Base_SetConfig+0x52>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <TIM_Base_SetConfig+0xc0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d003      	beq.n	800795e <TIM_Base_SetConfig+0x52>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1d      	ldr	r2, [pc, #116]	; (80079d0 <TIM_Base_SetConfig+0xc4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d108      	bne.n	8007970 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4313      	orrs	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a0c      	ldr	r2, [pc, #48]	; (80079c8 <TIM_Base_SetConfig+0xbc>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d007      	beq.n	80079ac <TIM_Base_SetConfig+0xa0>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a0b      	ldr	r2, [pc, #44]	; (80079cc <TIM_Base_SetConfig+0xc0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_Base_SetConfig+0xa0>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a0a      	ldr	r2, [pc, #40]	; (80079d0 <TIM_Base_SetConfig+0xc4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d103      	bne.n	80079b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	615a      	str	r2, [r3, #20]
}
 80079ba:	bf00      	nop
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	40012c00 	.word	0x40012c00
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400

080079d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f023 0201 	bic.w	r2, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f023 0302 	bic.w	r3, r3, #2
 8007a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a24      	ldr	r2, [pc, #144]	; (8007ac0 <TIM_OC1_SetConfig+0xec>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d007      	beq.n	8007a44 <TIM_OC1_SetConfig+0x70>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a23      	ldr	r2, [pc, #140]	; (8007ac4 <TIM_OC1_SetConfig+0xf0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_OC1_SetConfig+0x70>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a22      	ldr	r2, [pc, #136]	; (8007ac8 <TIM_OC1_SetConfig+0xf4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d10c      	bne.n	8007a5e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0308 	bic.w	r3, r3, #8
 8007a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f023 0304 	bic.w	r3, r3, #4
 8007a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a17      	ldr	r2, [pc, #92]	; (8007ac0 <TIM_OC1_SetConfig+0xec>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_OC1_SetConfig+0xa2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a16      	ldr	r2, [pc, #88]	; (8007ac4 <TIM_OC1_SetConfig+0xf0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC1_SetConfig+0xa2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a15      	ldr	r2, [pc, #84]	; (8007ac8 <TIM_OC1_SetConfig+0xf4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d111      	bne.n	8007a9a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	621a      	str	r2, [r3, #32]
}
 8007ab4:	bf00      	nop
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	40012c00 	.word	0x40012c00
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40014400 	.word	0x40014400

08007acc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	f023 0210 	bic.w	r2, r3, #16
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f023 0320 	bic.w	r3, r3, #32
 8007b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	011b      	lsls	r3, r3, #4
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a22      	ldr	r2, [pc, #136]	; (8007bb4 <TIM_OC2_SetConfig+0xe8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10d      	bne.n	8007b4c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a19      	ldr	r2, [pc, #100]	; (8007bb4 <TIM_OC2_SetConfig+0xe8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d007      	beq.n	8007b64 <TIM_OC2_SetConfig+0x98>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a18      	ldr	r2, [pc, #96]	; (8007bb8 <TIM_OC2_SetConfig+0xec>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_OC2_SetConfig+0x98>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a17      	ldr	r2, [pc, #92]	; (8007bbc <TIM_OC2_SetConfig+0xf0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d113      	bne.n	8007b8c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	40014000 	.word	0x40014000
 8007bbc:	40014400 	.word	0x40014400

08007bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a21      	ldr	r2, [pc, #132]	; (8007ca4 <TIM_OC3_SetConfig+0xe4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d10d      	bne.n	8007c3e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a18      	ldr	r2, [pc, #96]	; (8007ca4 <TIM_OC3_SetConfig+0xe4>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d007      	beq.n	8007c56 <TIM_OC3_SetConfig+0x96>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <TIM_OC3_SetConfig+0xe8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <TIM_OC3_SetConfig+0x96>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a16      	ldr	r2, [pc, #88]	; (8007cac <TIM_OC3_SetConfig+0xec>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d113      	bne.n	8007c7e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	621a      	str	r2, [r3, #32]
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	40012c00 	.word	0x40012c00
 8007ca8:	40014000 	.word	0x40014000
 8007cac:	40014400 	.word	0x40014400

08007cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	021b      	lsls	r3, r3, #8
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	031b      	lsls	r3, r3, #12
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a14      	ldr	r2, [pc, #80]	; (8007d60 <TIM_OC4_SetConfig+0xb0>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d007      	beq.n	8007d24 <TIM_OC4_SetConfig+0x74>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a13      	ldr	r2, [pc, #76]	; (8007d64 <TIM_OC4_SetConfig+0xb4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d003      	beq.n	8007d24 <TIM_OC4_SetConfig+0x74>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a12      	ldr	r2, [pc, #72]	; (8007d68 <TIM_OC4_SetConfig+0xb8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d109      	bne.n	8007d38 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	019b      	lsls	r3, r3, #6
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	621a      	str	r2, [r3, #32]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40012c00 	.word	0x40012c00
 8007d64:	40014000 	.word	0x40014000
 8007d68:	40014400 	.word	0x40014400

08007d6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007db0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	041b      	lsls	r3, r3, #16
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a13      	ldr	r2, [pc, #76]	; (8007e10 <TIM_OC5_SetConfig+0xa4>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d007      	beq.n	8007dd6 <TIM_OC5_SetConfig+0x6a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a12      	ldr	r2, [pc, #72]	; (8007e14 <TIM_OC5_SetConfig+0xa8>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <TIM_OC5_SetConfig+0x6a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a11      	ldr	r2, [pc, #68]	; (8007e18 <TIM_OC5_SetConfig+0xac>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d109      	bne.n	8007dea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	621a      	str	r2, [r3, #32]
}
 8007e04:	bf00      	nop
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	40012c00 	.word	0x40012c00
 8007e14:	40014000 	.word	0x40014000
 8007e18:	40014400 	.word	0x40014400

08007e1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	051b      	lsls	r3, r3, #20
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a14      	ldr	r2, [pc, #80]	; (8007ec4 <TIM_OC6_SetConfig+0xa8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d007      	beq.n	8007e88 <TIM_OC6_SetConfig+0x6c>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a13      	ldr	r2, [pc, #76]	; (8007ec8 <TIM_OC6_SetConfig+0xac>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_OC6_SetConfig+0x6c>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a12      	ldr	r2, [pc, #72]	; (8007ecc <TIM_OC6_SetConfig+0xb0>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d109      	bne.n	8007e9c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	029b      	lsls	r3, r3, #10
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	621a      	str	r2, [r3, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	40012c00 	.word	0x40012c00
 8007ec8:	40014000 	.word	0x40014000
 8007ecc:	40014400 	.word	0x40014400

08007ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e04f      	b.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a21      	ldr	r2, [pc, #132]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d108      	bne.n	8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a14      	ldr	r2, [pc, #80]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d009      	beq.n	8007f5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f50:	d004      	beq.n	8007f5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a10      	ldr	r2, [pc, #64]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d10c      	bne.n	8007f76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	40012c00 	.word	0x40012c00
 8007f98:	40014000 	.word	0x40014000

08007f9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e060      	b.n	800807a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a14      	ldr	r2, [pc, #80]	; (8008088 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d115      	bne.n	8008068 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	051b      	lsls	r3, r3, #20
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	40012c00 	.word	0x40012c00

0800808c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e040      	b.n	800815c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fa fb00 	bl	80026f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2224      	movs	r2, #36	; 0x24
 80080f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0201 	bic.w	r2, r2, #1
 8008104:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f82c 	bl	8008164 <UART_SetConfig>
 800810c:	4603      	mov	r3, r0
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e022      	b.n	800815c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa2c 	bl	800857c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689a      	ldr	r2, [r3, #8]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0201 	orr.w	r2, r2, #1
 8008152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fab3 	bl	80086c0 <UART_CheckIdleState>
 800815a:	4603      	mov	r3, r0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008164:	b5b0      	push	{r4, r5, r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	4313      	orrs	r3, r2
 8008186:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4baf      	ldr	r3, [pc, #700]	; (800844c <UART_SetConfig+0x2e8>)
 8008190:	4013      	ands	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	69f9      	ldr	r1, [r7, #28]
 8008198:	430b      	orrs	r3, r1
 800819a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4aa4      	ldr	r2, [pc, #656]	; (8008450 <UART_SetConfig+0x2ec>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d004      	beq.n	80081cc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	430a      	orrs	r2, r1
 80081de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a9b      	ldr	r2, [pc, #620]	; (8008454 <UART_SetConfig+0x2f0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d121      	bne.n	800822e <UART_SetConfig+0xca>
 80081ea:	4b9b      	ldr	r3, [pc, #620]	; (8008458 <UART_SetConfig+0x2f4>)
 80081ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f0:	f003 0303 	and.w	r3, r3, #3
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d817      	bhi.n	8008228 <UART_SetConfig+0xc4>
 80081f8:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <UART_SetConfig+0x9c>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	08008211 	.word	0x08008211
 8008204:	0800821d 	.word	0x0800821d
 8008208:	08008217 	.word	0x08008217
 800820c:	08008223 	.word	0x08008223
 8008210:	2301      	movs	r3, #1
 8008212:	76fb      	strb	r3, [r7, #27]
 8008214:	e070      	b.n	80082f8 <UART_SetConfig+0x194>
 8008216:	2302      	movs	r3, #2
 8008218:	76fb      	strb	r3, [r7, #27]
 800821a:	e06d      	b.n	80082f8 <UART_SetConfig+0x194>
 800821c:	2304      	movs	r3, #4
 800821e:	76fb      	strb	r3, [r7, #27]
 8008220:	e06a      	b.n	80082f8 <UART_SetConfig+0x194>
 8008222:	2308      	movs	r3, #8
 8008224:	76fb      	strb	r3, [r7, #27]
 8008226:	e067      	b.n	80082f8 <UART_SetConfig+0x194>
 8008228:	2310      	movs	r3, #16
 800822a:	76fb      	strb	r3, [r7, #27]
 800822c:	e064      	b.n	80082f8 <UART_SetConfig+0x194>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a8a      	ldr	r2, [pc, #552]	; (800845c <UART_SetConfig+0x2f8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d132      	bne.n	800829e <UART_SetConfig+0x13a>
 8008238:	4b87      	ldr	r3, [pc, #540]	; (8008458 <UART_SetConfig+0x2f4>)
 800823a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823e:	f003 030c 	and.w	r3, r3, #12
 8008242:	2b0c      	cmp	r3, #12
 8008244:	d828      	bhi.n	8008298 <UART_SetConfig+0x134>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <UART_SetConfig+0xe8>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	08008281 	.word	0x08008281
 8008250:	08008299 	.word	0x08008299
 8008254:	08008299 	.word	0x08008299
 8008258:	08008299 	.word	0x08008299
 800825c:	0800828d 	.word	0x0800828d
 8008260:	08008299 	.word	0x08008299
 8008264:	08008299 	.word	0x08008299
 8008268:	08008299 	.word	0x08008299
 800826c:	08008287 	.word	0x08008287
 8008270:	08008299 	.word	0x08008299
 8008274:	08008299 	.word	0x08008299
 8008278:	08008299 	.word	0x08008299
 800827c:	08008293 	.word	0x08008293
 8008280:	2300      	movs	r3, #0
 8008282:	76fb      	strb	r3, [r7, #27]
 8008284:	e038      	b.n	80082f8 <UART_SetConfig+0x194>
 8008286:	2302      	movs	r3, #2
 8008288:	76fb      	strb	r3, [r7, #27]
 800828a:	e035      	b.n	80082f8 <UART_SetConfig+0x194>
 800828c:	2304      	movs	r3, #4
 800828e:	76fb      	strb	r3, [r7, #27]
 8008290:	e032      	b.n	80082f8 <UART_SetConfig+0x194>
 8008292:	2308      	movs	r3, #8
 8008294:	76fb      	strb	r3, [r7, #27]
 8008296:	e02f      	b.n	80082f8 <UART_SetConfig+0x194>
 8008298:	2310      	movs	r3, #16
 800829a:	76fb      	strb	r3, [r7, #27]
 800829c:	e02c      	b.n	80082f8 <UART_SetConfig+0x194>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a6b      	ldr	r2, [pc, #428]	; (8008450 <UART_SetConfig+0x2ec>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d125      	bne.n	80082f4 <UART_SetConfig+0x190>
 80082a8:	4b6b      	ldr	r3, [pc, #428]	; (8008458 <UART_SetConfig+0x2f4>)
 80082aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082b6:	d017      	beq.n	80082e8 <UART_SetConfig+0x184>
 80082b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082bc:	d817      	bhi.n	80082ee <UART_SetConfig+0x18a>
 80082be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c2:	d00b      	beq.n	80082dc <UART_SetConfig+0x178>
 80082c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c8:	d811      	bhi.n	80082ee <UART_SetConfig+0x18a>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <UART_SetConfig+0x172>
 80082ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d2:	d006      	beq.n	80082e2 <UART_SetConfig+0x17e>
 80082d4:	e00b      	b.n	80082ee <UART_SetConfig+0x18a>
 80082d6:	2300      	movs	r3, #0
 80082d8:	76fb      	strb	r3, [r7, #27]
 80082da:	e00d      	b.n	80082f8 <UART_SetConfig+0x194>
 80082dc:	2302      	movs	r3, #2
 80082de:	76fb      	strb	r3, [r7, #27]
 80082e0:	e00a      	b.n	80082f8 <UART_SetConfig+0x194>
 80082e2:	2304      	movs	r3, #4
 80082e4:	76fb      	strb	r3, [r7, #27]
 80082e6:	e007      	b.n	80082f8 <UART_SetConfig+0x194>
 80082e8:	2308      	movs	r3, #8
 80082ea:	76fb      	strb	r3, [r7, #27]
 80082ec:	e004      	b.n	80082f8 <UART_SetConfig+0x194>
 80082ee:	2310      	movs	r3, #16
 80082f0:	76fb      	strb	r3, [r7, #27]
 80082f2:	e001      	b.n	80082f8 <UART_SetConfig+0x194>
 80082f4:	2310      	movs	r3, #16
 80082f6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a54      	ldr	r2, [pc, #336]	; (8008450 <UART_SetConfig+0x2ec>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d173      	bne.n	80083ea <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008302:	7efb      	ldrb	r3, [r7, #27]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d824      	bhi.n	8008352 <UART_SetConfig+0x1ee>
 8008308:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <UART_SetConfig+0x1ac>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	08008335 	.word	0x08008335
 8008314:	08008353 	.word	0x08008353
 8008318:	0800833d 	.word	0x0800833d
 800831c:	08008353 	.word	0x08008353
 8008320:	08008343 	.word	0x08008343
 8008324:	08008353 	.word	0x08008353
 8008328:	08008353 	.word	0x08008353
 800832c:	08008353 	.word	0x08008353
 8008330:	0800834b 	.word	0x0800834b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008334:	f7fe fbd2 	bl	8006adc <HAL_RCC_GetPCLK1Freq>
 8008338:	6178      	str	r0, [r7, #20]
        break;
 800833a:	e00f      	b.n	800835c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800833c:	4b48      	ldr	r3, [pc, #288]	; (8008460 <UART_SetConfig+0x2fc>)
 800833e:	617b      	str	r3, [r7, #20]
        break;
 8008340:	e00c      	b.n	800835c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008342:	f7fe fb35 	bl	80069b0 <HAL_RCC_GetSysClockFreq>
 8008346:	6178      	str	r0, [r7, #20]
        break;
 8008348:	e008      	b.n	800835c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800834a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800834e:	617b      	str	r3, [r7, #20]
        break;
 8008350:	e004      	b.n	800835c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	76bb      	strb	r3, [r7, #26]
        break;
 800835a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80fe 	beq.w	8008560 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	4613      	mov	r3, r2
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	4413      	add	r3, r2
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	429a      	cmp	r2, r3
 8008372:	d305      	bcc.n	8008380 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	429a      	cmp	r2, r3
 800837e:	d902      	bls.n	8008386 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	76bb      	strb	r3, [r7, #26]
 8008384:	e0ec      	b.n	8008560 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	4618      	mov	r0, r3
 800838a:	f04f 0100 	mov.w	r1, #0
 800838e:	f04f 0200 	mov.w	r2, #0
 8008392:	f04f 0300 	mov.w	r3, #0
 8008396:	020b      	lsls	r3, r1, #8
 8008398:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800839c:	0202      	lsls	r2, r0, #8
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	6849      	ldr	r1, [r1, #4]
 80083a2:	0849      	lsrs	r1, r1, #1
 80083a4:	4608      	mov	r0, r1
 80083a6:	f04f 0100 	mov.w	r1, #0
 80083aa:	1814      	adds	r4, r2, r0
 80083ac:	eb43 0501 	adc.w	r5, r3, r1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	461a      	mov	r2, r3
 80083b6:	f04f 0300 	mov.w	r3, #0
 80083ba:	4620      	mov	r0, r4
 80083bc:	4629      	mov	r1, r5
 80083be:	f7f8 fc13 	bl	8000be8 <__aeabi_uldivmod>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4613      	mov	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d0:	d308      	bcc.n	80083e4 <UART_SetConfig+0x280>
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083d8:	d204      	bcs.n	80083e4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	60da      	str	r2, [r3, #12]
 80083e2:	e0bd      	b.n	8008560 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	76bb      	strb	r3, [r7, #26]
 80083e8:	e0ba      	b.n	8008560 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f2:	d168      	bne.n	80084c6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80083f4:	7efb      	ldrb	r3, [r7, #27]
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d834      	bhi.n	8008464 <UART_SetConfig+0x300>
 80083fa:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <UART_SetConfig+0x29c>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008425 	.word	0x08008425
 8008404:	0800842d 	.word	0x0800842d
 8008408:	08008435 	.word	0x08008435
 800840c:	08008465 	.word	0x08008465
 8008410:	0800843b 	.word	0x0800843b
 8008414:	08008465 	.word	0x08008465
 8008418:	08008465 	.word	0x08008465
 800841c:	08008465 	.word	0x08008465
 8008420:	08008443 	.word	0x08008443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008424:	f7fe fb5a 	bl	8006adc <HAL_RCC_GetPCLK1Freq>
 8008428:	6178      	str	r0, [r7, #20]
        break;
 800842a:	e020      	b.n	800846e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800842c:	f7fe fb6c 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8008430:	6178      	str	r0, [r7, #20]
        break;
 8008432:	e01c      	b.n	800846e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <UART_SetConfig+0x2fc>)
 8008436:	617b      	str	r3, [r7, #20]
        break;
 8008438:	e019      	b.n	800846e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800843a:	f7fe fab9 	bl	80069b0 <HAL_RCC_GetSysClockFreq>
 800843e:	6178      	str	r0, [r7, #20]
        break;
 8008440:	e015      	b.n	800846e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008446:	617b      	str	r3, [r7, #20]
        break;
 8008448:	e011      	b.n	800846e <UART_SetConfig+0x30a>
 800844a:	bf00      	nop
 800844c:	efff69f3 	.word	0xefff69f3
 8008450:	40008000 	.word	0x40008000
 8008454:	40013800 	.word	0x40013800
 8008458:	40021000 	.word	0x40021000
 800845c:	40004400 	.word	0x40004400
 8008460:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	76bb      	strb	r3, [r7, #26]
        break;
 800846c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d075      	beq.n	8008560 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	005a      	lsls	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	085b      	lsrs	r3, r3, #1
 800847e:	441a      	add	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	fbb2 f3f3 	udiv	r3, r2, r3
 8008488:	b29b      	uxth	r3, r3
 800848a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	2b0f      	cmp	r3, #15
 8008490:	d916      	bls.n	80084c0 <UART_SetConfig+0x35c>
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008498:	d212      	bcs.n	80084c0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	b29b      	uxth	r3, r3
 800849e:	f023 030f 	bic.w	r3, r3, #15
 80084a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	89fb      	ldrh	r3, [r7, #14]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	89fa      	ldrh	r2, [r7, #14]
 80084bc:	60da      	str	r2, [r3, #12]
 80084be:	e04f      	b.n	8008560 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	76bb      	strb	r3, [r7, #26]
 80084c4:	e04c      	b.n	8008560 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084c6:	7efb      	ldrb	r3, [r7, #27]
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d828      	bhi.n	800851e <UART_SetConfig+0x3ba>
 80084cc:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <UART_SetConfig+0x370>)
 80084ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d2:	bf00      	nop
 80084d4:	080084f9 	.word	0x080084f9
 80084d8:	08008501 	.word	0x08008501
 80084dc:	08008509 	.word	0x08008509
 80084e0:	0800851f 	.word	0x0800851f
 80084e4:	0800850f 	.word	0x0800850f
 80084e8:	0800851f 	.word	0x0800851f
 80084ec:	0800851f 	.word	0x0800851f
 80084f0:	0800851f 	.word	0x0800851f
 80084f4:	08008517 	.word	0x08008517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084f8:	f7fe faf0 	bl	8006adc <HAL_RCC_GetPCLK1Freq>
 80084fc:	6178      	str	r0, [r7, #20]
        break;
 80084fe:	e013      	b.n	8008528 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008500:	f7fe fb02 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8008504:	6178      	str	r0, [r7, #20]
        break;
 8008506:	e00f      	b.n	8008528 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008508:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <UART_SetConfig+0x414>)
 800850a:	617b      	str	r3, [r7, #20]
        break;
 800850c:	e00c      	b.n	8008528 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800850e:	f7fe fa4f 	bl	80069b0 <HAL_RCC_GetSysClockFreq>
 8008512:	6178      	str	r0, [r7, #20]
        break;
 8008514:	e008      	b.n	8008528 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800851a:	617b      	str	r3, [r7, #20]
        break;
 800851c:	e004      	b.n	8008528 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	76bb      	strb	r3, [r7, #26]
        break;
 8008526:	bf00      	nop
    }

    if (pclk != 0U)
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d018      	beq.n	8008560 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	085a      	lsrs	r2, r3, #1
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	441a      	add	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008540:	b29b      	uxth	r3, r3
 8008542:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	2b0f      	cmp	r3, #15
 8008548:	d908      	bls.n	800855c <UART_SetConfig+0x3f8>
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008550:	d204      	bcs.n	800855c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	60da      	str	r2, [r3, #12]
 800855a:	e001      	b.n	8008560 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800856c:	7ebb      	ldrb	r3, [r7, #26]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3720      	adds	r7, #32
 8008572:	46bd      	mov	sp, r7
 8008574:	bdb0      	pop	{r4, r5, r7, pc}
 8008576:	bf00      	nop
 8008578:	00f42400 	.word	0x00f42400

0800857c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	f003 0308 	and.w	r3, r3, #8
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	430a      	orrs	r2, r1
 800860a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	f003 0320 	and.w	r3, r3, #32
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01a      	beq.n	8008692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800867a:	d10a      	bne.n	8008692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	605a      	str	r2, [r3, #4]
  }
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086d0:	f7fa f996 	bl	8002a00 <HAL_GetTick>
 80086d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0308 	and.w	r3, r3, #8
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d10e      	bne.n	8008702 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f82d 	bl	8008752 <UART_WaitOnFlagUntilTimeout>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e023      	b.n	800874a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b04      	cmp	r3, #4
 800870e:	d10e      	bne.n	800872e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f817 	bl	8008752 <UART_WaitOnFlagUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e00d      	b.n	800874a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2220      	movs	r2, #32
 8008732:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	603b      	str	r3, [r7, #0]
 800875e:	4613      	mov	r3, r2
 8008760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008762:	e05e      	b.n	8008822 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876a:	d05a      	beq.n	8008822 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800876c:	f7fa f948 	bl	8002a00 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	429a      	cmp	r2, r3
 800877a:	d302      	bcc.n	8008782 <UART_WaitOnFlagUntilTimeout+0x30>
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d11b      	bne.n	80087ba <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008790:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 0201 	bic.w	r2, r2, #1
 80087a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2220      	movs	r2, #32
 80087a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e043      	b.n	8008842 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d02c      	beq.n	8008822 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087d6:	d124      	bne.n	8008822 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087e0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087f0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0201 	bic.w	r2, r2, #1
 8008800:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2220      	movs	r2, #32
 8008806:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e00f      	b.n	8008842 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69da      	ldr	r2, [r3, #28]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4013      	ands	r3, r2
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	429a      	cmp	r2, r3
 8008830:	bf0c      	ite	eq
 8008832:	2301      	moveq	r3, #1
 8008834:	2300      	movne	r3, #0
 8008836:	b2db      	uxtb	r3, r3
 8008838:	461a      	mov	r2, r3
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	429a      	cmp	r2, r3
 800883e:	d091      	beq.n	8008764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <__NVIC_SetPriority>:
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800885c:	2b00      	cmp	r3, #0
 800885e:	db0a      	blt.n	8008876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	b2da      	uxtb	r2, r3
 8008864:	490c      	ldr	r1, [pc, #48]	; (8008898 <__NVIC_SetPriority+0x4c>)
 8008866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800886a:	0112      	lsls	r2, r2, #4
 800886c:	b2d2      	uxtb	r2, r2
 800886e:	440b      	add	r3, r1
 8008870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008874:	e00a      	b.n	800888c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	b2da      	uxtb	r2, r3
 800887a:	4908      	ldr	r1, [pc, #32]	; (800889c <__NVIC_SetPriority+0x50>)
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	3b04      	subs	r3, #4
 8008884:	0112      	lsls	r2, r2, #4
 8008886:	b2d2      	uxtb	r2, r2
 8008888:	440b      	add	r3, r1
 800888a:	761a      	strb	r2, [r3, #24]
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	e000e100 	.word	0xe000e100
 800889c:	e000ed00 	.word	0xe000ed00

080088a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <SysTick_Handler+0x1c>)
 80088a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80088a8:	f001 fcfe 	bl	800a2a8 <xTaskGetSchedulerState>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d001      	beq.n	80088b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80088b2:	f002 fae9 	bl	800ae88 <xPortSysTickHandler>
  }
}
 80088b6:	bf00      	nop
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	e000e010 	.word	0xe000e010

080088c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80088c4:	2100      	movs	r1, #0
 80088c6:	f06f 0004 	mvn.w	r0, #4
 80088ca:	f7ff ffbf 	bl	800884c <__NVIC_SetPriority>
#endif
}
 80088ce:	bf00      	nop
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088da:	f3ef 8305 	mrs	r3, IPSR
 80088de:	603b      	str	r3, [r7, #0]
  return(result);
 80088e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80088e6:	f06f 0305 	mvn.w	r3, #5
 80088ea:	607b      	str	r3, [r7, #4]
 80088ec:	e00c      	b.n	8008908 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088ee:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <osKernelInitialize+0x44>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d105      	bne.n	8008902 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088f6:	4b08      	ldr	r3, [pc, #32]	; (8008918 <osKernelInitialize+0x44>)
 80088f8:	2201      	movs	r2, #1
 80088fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	607b      	str	r3, [r7, #4]
 8008900:	e002      	b.n	8008908 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008902:	f04f 33ff 	mov.w	r3, #4294967295
 8008906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008908:	687b      	ldr	r3, [r7, #4]
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20000368 	.word	0x20000368

0800891c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008922:	f3ef 8305 	mrs	r3, IPSR
 8008926:	603b      	str	r3, [r7, #0]
  return(result);
 8008928:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <osKernelStart+0x1a>
    stat = osErrorISR;
 800892e:	f06f 0305 	mvn.w	r3, #5
 8008932:	607b      	str	r3, [r7, #4]
 8008934:	e010      	b.n	8008958 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008936:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <osKernelStart+0x48>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d109      	bne.n	8008952 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800893e:	f7ff ffbf 	bl	80088c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008942:	4b08      	ldr	r3, [pc, #32]	; (8008964 <osKernelStart+0x48>)
 8008944:	2202      	movs	r2, #2
 8008946:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008948:	f001 f866 	bl	8009a18 <vTaskStartScheduler>
      stat = osOK;
 800894c:	2300      	movs	r3, #0
 800894e:	607b      	str	r3, [r7, #4]
 8008950:	e002      	b.n	8008958 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008952:	f04f 33ff 	mov.w	r3, #4294967295
 8008956:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008958:	687b      	ldr	r3, [r7, #4]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000368 	.word	0x20000368

08008968 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b08e      	sub	sp, #56	; 0x38
 800896c:	af04      	add	r7, sp, #16
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008974:	2300      	movs	r3, #0
 8008976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008978:	f3ef 8305 	mrs	r3, IPSR
 800897c:	617b      	str	r3, [r7, #20]
  return(result);
 800897e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008980:	2b00      	cmp	r3, #0
 8008982:	d17e      	bne.n	8008a82 <osThreadNew+0x11a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d07b      	beq.n	8008a82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800898a:	2380      	movs	r3, #128	; 0x80
 800898c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800898e:	2318      	movs	r3, #24
 8008990:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008996:	f04f 33ff 	mov.w	r3, #4294967295
 800899a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d045      	beq.n	8008a2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <osThreadNew+0x48>
        name = attr->name;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d008      	beq.n	80089d6 <osThreadNew+0x6e>
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2b38      	cmp	r3, #56	; 0x38
 80089c8:	d805      	bhi.n	80089d6 <osThreadNew+0x6e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <osThreadNew+0x72>
        return (NULL);
 80089d6:	2300      	movs	r3, #0
 80089d8:	e054      	b.n	8008a84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	089b      	lsrs	r3, r3, #2
 80089e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00e      	beq.n	8008a10 <osThreadNew+0xa8>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	2b5b      	cmp	r3, #91	; 0x5b
 80089f8:	d90a      	bls.n	8008a10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d006      	beq.n	8008a10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <osThreadNew+0xa8>
        mem = 1;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	61bb      	str	r3, [r7, #24]
 8008a0e:	e010      	b.n	8008a32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10c      	bne.n	8008a32 <osThreadNew+0xca>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d108      	bne.n	8008a32 <osThreadNew+0xca>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d104      	bne.n	8008a32 <osThreadNew+0xca>
          mem = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
 8008a2c:	e001      	b.n	8008a32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d110      	bne.n	8008a5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a40:	9202      	str	r2, [sp, #8]
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	6a3a      	ldr	r2, [r7, #32]
 8008a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fe0c 	bl	800966c <xTaskCreateStatic>
 8008a54:	4603      	mov	r3, r0
 8008a56:	613b      	str	r3, [r7, #16]
 8008a58:	e013      	b.n	8008a82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d110      	bne.n	8008a82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	f107 0310 	add.w	r3, r7, #16
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fe57 	bl	8009726 <xTaskCreate>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d001      	beq.n	8008a82 <osThreadNew+0x11a>
            hTask = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a82:	693b      	ldr	r3, [r7, #16]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3728      	adds	r7, #40	; 0x28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a94:	f3ef 8305 	mrs	r3, IPSR
 8008a98:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <osDelay+0x1c>
    stat = osErrorISR;
 8008aa0:	f06f 0305 	mvn.w	r3, #5
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	e007      	b.n	8008ab8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 ff7c 	bl	80099b0 <vTaskDelay>
    }
  }

  return (stat);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a07      	ldr	r2, [pc, #28]	; (8008af0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ad4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a06      	ldr	r2, [pc, #24]	; (8008af4 <vApplicationGetIdleTaskMemory+0x30>)
 8008ada:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2280      	movs	r2, #128	; 0x80
 8008ae0:	601a      	str	r2, [r3, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	2000036c 	.word	0x2000036c
 8008af4:	200003c8 	.word	0x200003c8

08008af8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4a07      	ldr	r2, [pc, #28]	; (8008b24 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4a06      	ldr	r2, [pc, #24]	; (8008b28 <vApplicationGetTimerTaskMemory+0x30>)
 8008b0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b16:	601a      	str	r2, [r3, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	200005c8 	.word	0x200005c8
 8008b28:	20000624 	.word	0x20000624

08008b2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f103 0208 	add.w	r2, r3, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295
 8008b44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f103 0208 	add.w	r2, r3, #8
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f103 0208 	add.w	r2, r3, #8
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be4:	d103      	bne.n	8008bee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e00c      	b.n	8008c08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e002      	b.n	8008bfc <vListInsert+0x2e>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d2f6      	bcs.n	8008bf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6892      	ldr	r2, [r2, #8]
 8008c56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6852      	ldr	r2, [r2, #4]
 8008c60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d103      	bne.n	8008c74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	1e5a      	subs	r2, r3, #1
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cbe:	f002 f851 	bl	800ad64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cca:	68f9      	ldr	r1, [r7, #12]
 8008ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	441a      	add	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	68f9      	ldr	r1, [r7, #12]
 8008cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cf4:	fb01 f303 	mul.w	r3, r1, r3
 8008cf8:	441a      	add	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	22ff      	movs	r2, #255	; 0xff
 8008d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	22ff      	movs	r2, #255	; 0xff
 8008d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d114      	bne.n	8008d3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01a      	beq.n	8008d52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3310      	adds	r3, #16
 8008d20:	4618      	mov	r0, r3
 8008d22:	f001 f903 	bl	8009f2c <xTaskRemoveFromEventList>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d012      	beq.n	8008d52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <xQueueGenericReset+0xcc>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	e009      	b.n	8008d52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3310      	adds	r3, #16
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fef2 	bl	8008b2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3324      	adds	r3, #36	; 0x24
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff feed 	bl	8008b2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d52:	f002 f837 	bl	800adc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d56:	2301      	movs	r3, #1
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	e000ed04 	.word	0xe000ed04

08008d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08e      	sub	sp, #56	; 0x38
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <xQueueGenericCreateStatic+0x52>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <xQueueGenericCreateStatic+0x56>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <xQueueGenericCreateStatic+0x58>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	623b      	str	r3, [r7, #32]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d102      	bne.n	8008de2 <xQueueGenericCreateStatic+0x7e>
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <xQueueGenericCreateStatic+0x82>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <xQueueGenericCreateStatic+0x84>
 8008de6:	2300      	movs	r3, #0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	61fb      	str	r3, [r7, #28]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e02:	2350      	movs	r3, #80	; 0x50
 8008e04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b50      	cmp	r3, #80	; 0x50
 8008e0a:	d00a      	beq.n	8008e22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	61bb      	str	r3, [r7, #24]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00d      	beq.n	8008e4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f805 	bl	8008e54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3730      	adds	r7, #48	; 0x30
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d103      	bne.n	8008e70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	e002      	b.n	8008e76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e82:	2101      	movs	r1, #1
 8008e84:	69b8      	ldr	r0, [r7, #24]
 8008e86:	f7ff ff05 	bl	8008c94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	78fa      	ldrb	r2, [r7, #3]
 8008e8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e92:	bf00      	nop
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
	...

08008e9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08e      	sub	sp, #56	; 0x38
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <xQueueGenericSend+0x32>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <xQueueGenericSend+0x40>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <xQueueGenericSend+0x44>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e000      	b.n	8008ee2 <xQueueGenericSend+0x46>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <xQueueGenericSend+0x60>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ef8:	bf00      	nop
 8008efa:	e7fe      	b.n	8008efa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d103      	bne.n	8008f0a <xQueueGenericSend+0x6e>
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d101      	bne.n	8008f0e <xQueueGenericSend+0x72>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e000      	b.n	8008f10 <xQueueGenericSend+0x74>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <xQueueGenericSend+0x8e>
	__asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	623b      	str	r3, [r7, #32]
}
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f2a:	f001 f9bd 	bl	800a2a8 <xTaskGetSchedulerState>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <xQueueGenericSend+0x9e>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <xQueueGenericSend+0xa2>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e000      	b.n	8008f40 <xQueueGenericSend+0xa4>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <xQueueGenericSend+0xbe>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	61fb      	str	r3, [r7, #28]
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f5a:	f001 ff03 	bl	800ad64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d302      	bcc.n	8008f70 <xQueueGenericSend+0xd4>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d129      	bne.n	8008fc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	68b9      	ldr	r1, [r7, #8]
 8008f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f76:	f000 fa0b 	bl	8009390 <prvCopyDataToQueue>
 8008f7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d010      	beq.n	8008fa6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	3324      	adds	r3, #36	; 0x24
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 ffcf 	bl	8009f2c <xTaskRemoveFromEventList>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d013      	beq.n	8008fbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f94:	4b3f      	ldr	r3, [pc, #252]	; (8009094 <xQueueGenericSend+0x1f8>)
 8008f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	e00a      	b.n	8008fbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d007      	beq.n	8008fbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fac:	4b39      	ldr	r3, [pc, #228]	; (8009094 <xQueueGenericSend+0x1f8>)
 8008fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008fbc:	f001 ff02 	bl	800adc4 <vPortExitCritical>
				return pdPASS;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e063      	b.n	800908c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d103      	bne.n	8008fd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fca:	f001 fefb 	bl	800adc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e05c      	b.n	800908c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d106      	bne.n	8008fe6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fd8:	f107 0314 	add.w	r3, r7, #20
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 f809 	bl	8009ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fe6:	f001 feed 	bl	800adc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fea:	f000 fd7b 	bl	8009ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fee:	f001 feb9 	bl	800ad64 <vPortEnterCritical>
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ff8:	b25b      	sxtb	r3, r3
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d103      	bne.n	8009008 <xQueueGenericSend+0x16c>
 8009000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800900e:	b25b      	sxtb	r3, r3
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009014:	d103      	bne.n	800901e <xQueueGenericSend+0x182>
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	2200      	movs	r2, #0
 800901a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800901e:	f001 fed1 	bl	800adc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009022:	1d3a      	adds	r2, r7, #4
 8009024:	f107 0314 	add.w	r3, r7, #20
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fff8 	bl	800a020 <xTaskCheckForTimeOut>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d124      	bne.n	8009080 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009038:	f000 faa2 	bl	8009580 <prvIsQueueFull>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d018      	beq.n	8009074 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	3310      	adds	r3, #16
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f000 ff1e 	bl	8009e8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009052:	f000 fa2d 	bl	80094b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009056:	f000 fd53 	bl	8009b00 <xTaskResumeAll>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	f47f af7c 	bne.w	8008f5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009062:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <xQueueGenericSend+0x1f8>)
 8009064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	e772      	b.n	8008f5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009076:	f000 fa1b 	bl	80094b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800907a:	f000 fd41 	bl	8009b00 <xTaskResumeAll>
 800907e:	e76c      	b.n	8008f5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009082:	f000 fa15 	bl	80094b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009086:	f000 fd3b 	bl	8009b00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800908a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800908c:	4618      	mov	r0, r3
 800908e:	3738      	adds	r7, #56	; 0x38
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b090      	sub	sp, #64	; 0x40
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d103      	bne.n	80090d4 <xQueueGenericSendFromISR+0x3c>
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <xQueueGenericSendFromISR+0x40>
 80090d4:	2301      	movs	r3, #1
 80090d6:	e000      	b.n	80090da <xQueueGenericSendFromISR+0x42>
 80090d8:	2300      	movs	r3, #0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d103      	bne.n	8009102 <xQueueGenericSendFromISR+0x6a>
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <xQueueGenericSendFromISR+0x6e>
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <xQueueGenericSendFromISR+0x70>
 8009106:	2300      	movs	r3, #0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	623b      	str	r3, [r7, #32]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009122:	f001 ff01 	bl	800af28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009126:	f3ef 8211 	mrs	r2, BASEPRI
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	61fa      	str	r2, [r7, #28]
 800913c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800913e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914a:	429a      	cmp	r2, r3
 800914c:	d302      	bcc.n	8009154 <xQueueGenericSendFromISR+0xbc>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d12f      	bne.n	80091b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800915a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800916a:	f000 f911 	bl	8009390 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800916e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d112      	bne.n	800919e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	d016      	beq.n	80091ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	3324      	adds	r3, #36	; 0x24
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fed1 	bl	8009f2c <xTaskRemoveFromEventList>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00e      	beq.n	80091ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00b      	beq.n	80091ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	e007      	b.n	80091ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800919e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091a2:	3301      	adds	r3, #1
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	b25a      	sxtb	r2, r3
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091ae:	2301      	movs	r3, #1
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80091b2:	e001      	b.n	80091b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80091c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3740      	adds	r7, #64	; 0x40
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08c      	sub	sp, #48	; 0x30
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80091dc:	2300      	movs	r3, #0
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10a      	bne.n	8009200 <xQueueReceive+0x30>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	623b      	str	r3, [r7, #32]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d103      	bne.n	800920e <xQueueReceive+0x3e>
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <xQueueReceive+0x42>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <xQueueReceive+0x44>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <xQueueReceive+0x5e>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	61fb      	str	r3, [r7, #28]
}
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800922e:	f001 f83b 	bl	800a2a8 <xTaskGetSchedulerState>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <xQueueReceive+0x6e>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <xQueueReceive+0x72>
 800923e:	2301      	movs	r3, #1
 8009240:	e000      	b.n	8009244 <xQueueReceive+0x74>
 8009242:	2300      	movs	r3, #0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <xQueueReceive+0x8e>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	61bb      	str	r3, [r7, #24]
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800925e:	f001 fd81 	bl	800ad64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d01f      	beq.n	80092ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009272:	f000 f8f7 	bl	8009464 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	1e5a      	subs	r2, r3, #1
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00f      	beq.n	80092a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	3310      	adds	r3, #16
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fe4e 	bl	8009f2c <xTaskRemoveFromEventList>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d007      	beq.n	80092a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009296:	4b3d      	ldr	r3, [pc, #244]	; (800938c <xQueueReceive+0x1bc>)
 8009298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092a6:	f001 fd8d 	bl	800adc4 <vPortExitCritical>
				return pdPASS;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e069      	b.n	8009382 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d103      	bne.n	80092bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092b4:	f001 fd86 	bl	800adc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e062      	b.n	8009382 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d106      	bne.n	80092d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092c2:	f107 0310 	add.w	r3, r7, #16
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fe94 	bl	8009ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092d0:	f001 fd78 	bl	800adc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092d4:	f000 fc06 	bl	8009ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092d8:	f001 fd44 	bl	800ad64 <vPortEnterCritical>
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092e2:	b25b      	sxtb	r3, r3
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d103      	bne.n	80092f2 <xQueueReceive+0x122>
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092f8:	b25b      	sxtb	r3, r3
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d103      	bne.n	8009308 <xQueueReceive+0x138>
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009308:	f001 fd5c 	bl	800adc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800930c:	1d3a      	adds	r2, r7, #4
 800930e:	f107 0310 	add.w	r3, r7, #16
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fe83 	bl	800a020 <xTaskCheckForTimeOut>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d123      	bne.n	8009368 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009322:	f000 f917 	bl	8009554 <prvIsQueueEmpty>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d017      	beq.n	800935c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	3324      	adds	r3, #36	; 0x24
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f000 fda9 	bl	8009e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800933a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800933c:	f000 f8b8 	bl	80094b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009340:	f000 fbde 	bl	8009b00 <xTaskResumeAll>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d189      	bne.n	800925e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800934a:	4b10      	ldr	r3, [pc, #64]	; (800938c <xQueueReceive+0x1bc>)
 800934c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	e780      	b.n	800925e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800935c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800935e:	f000 f8a7 	bl	80094b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009362:	f000 fbcd 	bl	8009b00 <xTaskResumeAll>
 8009366:	e77a      	b.n	800925e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800936a:	f000 f8a1 	bl	80094b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800936e:	f000 fbc7 	bl	8009b00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009374:	f000 f8ee 	bl	8009554 <prvIsQueueEmpty>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	f43f af6f 	beq.w	800925e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009380:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009382:	4618      	mov	r0, r3
 8009384:	3730      	adds	r7, #48	; 0x30
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	e000ed04 	.word	0xe000ed04

08009390 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10d      	bne.n	80093ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d14d      	bne.n	8009452 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 ff92 	bl	800a2e4 <xTaskPriorityDisinherit>
 80093c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	609a      	str	r2, [r3, #8]
 80093c8:	e043      	b.n	8009452 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d119      	bne.n	8009404 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6858      	ldr	r0, [r3, #4]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d8:	461a      	mov	r2, r3
 80093da:	68b9      	ldr	r1, [r7, #8]
 80093dc:	f001 ff08 	bl	800b1f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e8:	441a      	add	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d32b      	bcc.n	8009452 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	605a      	str	r2, [r3, #4]
 8009402:	e026      	b.n	8009452 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	68d8      	ldr	r0, [r3, #12]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940c:	461a      	mov	r2, r3
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	f001 feee 	bl	800b1f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941c:	425b      	negs	r3, r3
 800941e:	441a      	add	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d207      	bcs.n	8009440 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009438:	425b      	negs	r3, r3
 800943a:	441a      	add	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d105      	bne.n	8009452 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	3b01      	subs	r3, #1
 8009450:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800945a:	697b      	ldr	r3, [r7, #20]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009472:	2b00      	cmp	r3, #0
 8009474:	d018      	beq.n	80094a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	441a      	add	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	429a      	cmp	r2, r3
 800948e:	d303      	bcc.n	8009498 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68d9      	ldr	r1, [r3, #12]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a0:	461a      	mov	r2, r3
 80094a2:	6838      	ldr	r0, [r7, #0]
 80094a4:	f001 fea4 	bl	800b1f0 <memcpy>
	}
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094b8:	f001 fc54 	bl	800ad64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094c4:	e011      	b.n	80094ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d012      	beq.n	80094f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3324      	adds	r3, #36	; 0x24
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fd2a 	bl	8009f2c <xTaskRemoveFromEventList>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094de:	f000 fe01 	bl	800a0e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dce9      	bgt.n	80094c6 <prvUnlockQueue+0x16>
 80094f2:	e000      	b.n	80094f6 <prvUnlockQueue+0x46>
					break;
 80094f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	22ff      	movs	r2, #255	; 0xff
 80094fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094fe:	f001 fc61 	bl	800adc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009502:	f001 fc2f 	bl	800ad64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800950c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800950e:	e011      	b.n	8009534 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d012      	beq.n	800953e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3310      	adds	r3, #16
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fd05 	bl	8009f2c <xTaskRemoveFromEventList>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009528:	f000 fddc 	bl	800a0e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	3b01      	subs	r3, #1
 8009530:	b2db      	uxtb	r3, r3
 8009532:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009538:	2b00      	cmp	r3, #0
 800953a:	dce9      	bgt.n	8009510 <prvUnlockQueue+0x60>
 800953c:	e000      	b.n	8009540 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800953e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	22ff      	movs	r2, #255	; 0xff
 8009544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009548:	f001 fc3c 	bl	800adc4 <vPortExitCritical>
}
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800955c:	f001 fc02 	bl	800ad64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	d102      	bne.n	800956e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009568:	2301      	movs	r3, #1
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	e001      	b.n	8009572 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009572:	f001 fc27 	bl	800adc4 <vPortExitCritical>

	return xReturn;
 8009576:	68fb      	ldr	r3, [r7, #12]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009588:	f001 fbec 	bl	800ad64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009594:	429a      	cmp	r2, r3
 8009596:	d102      	bne.n	800959e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009598:	2301      	movs	r3, #1
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	e001      	b.n	80095a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095a2:	f001 fc0f 	bl	800adc4 <vPortExitCritical>

	return xReturn;
 80095a6:	68fb      	ldr	r3, [r7, #12]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e014      	b.n	80095ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095c0:	4a0f      	ldr	r2, [pc, #60]	; (8009600 <vQueueAddToRegistry+0x50>)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80095cc:	490c      	ldr	r1, [pc, #48]	; (8009600 <vQueueAddToRegistry+0x50>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80095d6:	4a0a      	ldr	r2, [pc, #40]	; (8009600 <vQueueAddToRegistry+0x50>)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80095e2:	e006      	b.n	80095f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	3301      	adds	r3, #1
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b07      	cmp	r3, #7
 80095ee:	d9e7      	bls.n	80095c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	20008908 	.word	0x20008908

08009604 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009614:	f001 fba6 	bl	800ad64 <vPortEnterCritical>
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800961e:	b25b      	sxtb	r3, r3
 8009620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009624:	d103      	bne.n	800962e <vQueueWaitForMessageRestricted+0x2a>
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009634:	b25b      	sxtb	r3, r3
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	d103      	bne.n	8009644 <vQueueWaitForMessageRestricted+0x40>
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009644:	f001 fbbe 	bl	800adc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	2b00      	cmp	r3, #0
 800964e:	d106      	bne.n	800965e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	3324      	adds	r3, #36	; 0x24
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fc3b 	bl	8009ed4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800965e:	6978      	ldr	r0, [r7, #20]
 8009660:	f7ff ff26 	bl	80094b0 <prvUnlockQueue>
	}
 8009664:	bf00      	nop
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08e      	sub	sp, #56	; 0x38
 8009670:	af04      	add	r7, sp, #16
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800967a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10a      	bne.n	8009696 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	623b      	str	r3, [r7, #32]
}
 8009692:	bf00      	nop
 8009694:	e7fe      	b.n	8009694 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10a      	bne.n	80096b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800969c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	61fb      	str	r3, [r7, #28]
}
 80096ae:	bf00      	nop
 80096b0:	e7fe      	b.n	80096b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096b2:	235c      	movs	r3, #92	; 0x5c
 80096b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b5c      	cmp	r3, #92	; 0x5c
 80096ba:	d00a      	beq.n	80096d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	61bb      	str	r3, [r7, #24]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80096d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d01e      	beq.n	8009718 <xTaskCreateStatic+0xac>
 80096da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01b      	beq.n	8009718 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	2202      	movs	r2, #2
 80096ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80096f2:	2300      	movs	r3, #0
 80096f4:	9303      	str	r3, [sp, #12]
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	9302      	str	r3, [sp, #8]
 80096fa:	f107 0314 	add.w	r3, r7, #20
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 f850 	bl	80097b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009712:	f000 f8dd 	bl	80098d0 <prvAddNewTaskToReadyList>
 8009716:	e001      	b.n	800971c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800971c:	697b      	ldr	r3, [r7, #20]
	}
 800971e:	4618      	mov	r0, r3
 8009720:	3728      	adds	r7, #40	; 0x28
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009726:	b580      	push	{r7, lr}
 8009728:	b08c      	sub	sp, #48	; 0x30
 800972a:	af04      	add	r7, sp, #16
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	4613      	mov	r3, r2
 8009734:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4618      	mov	r0, r3
 800973c:	f001 fc34 	bl	800afa8 <pvPortMalloc>
 8009740:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00e      	beq.n	8009766 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009748:	205c      	movs	r0, #92	; 0x5c
 800974a:	f001 fc2d 	bl	800afa8 <pvPortMalloc>
 800974e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	631a      	str	r2, [r3, #48]	; 0x30
 800975c:	e005      	b.n	800976a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800975e:	6978      	ldr	r0, [r7, #20]
 8009760:	f001 fcb0 	bl	800b0c4 <vPortFree>
 8009764:	e001      	b.n	800976a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d017      	beq.n	80097a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	2300      	movs	r3, #0
 800977c:	9303      	str	r3, [sp, #12]
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	9302      	str	r3, [sp, #8]
 8009782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f80e 	bl	80097b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009794:	69f8      	ldr	r0, [r7, #28]
 8009796:	f000 f89b 	bl	80098d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800979a:	2301      	movs	r3, #1
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	e002      	b.n	80097a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80097a0:	f04f 33ff 	mov.w	r3, #4294967295
 80097a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80097a6:	69bb      	ldr	r3, [r7, #24]
	}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3720      	adds	r7, #32
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b088      	sub	sp, #32
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	461a      	mov	r2, r3
 80097c8:	21a5      	movs	r1, #165	; 0xa5
 80097ca:	f001 fd1f 	bl	800b20c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097d8:	3b01      	subs	r3, #1
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	f023 0307 	bic.w	r3, r3, #7
 80097e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	f003 0307 	and.w	r3, r3, #7
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <prvInitialiseNewTask+0x58>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	617b      	str	r3, [r7, #20]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d01f      	beq.n	800984e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800980e:	2300      	movs	r3, #0
 8009810:	61fb      	str	r3, [r7, #28]
 8009812:	e012      	b.n	800983a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	4413      	add	r3, r2
 800981a:	7819      	ldrb	r1, [r3, #0]
 800981c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	3334      	adds	r3, #52	; 0x34
 8009824:	460a      	mov	r2, r1
 8009826:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	4413      	add	r3, r2
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d006      	beq.n	8009842 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	3301      	adds	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	2b0f      	cmp	r3, #15
 800983e:	d9e9      	bls.n	8009814 <prvInitialiseNewTask+0x64>
 8009840:	e000      	b.n	8009844 <prvInitialiseNewTask+0x94>
			{
				break;
 8009842:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009846:	2200      	movs	r2, #0
 8009848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800984c:	e003      	b.n	8009856 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009858:	2b37      	cmp	r3, #55	; 0x37
 800985a:	d901      	bls.n	8009860 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800985c:	2337      	movs	r3, #55	; 0x37
 800985e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009864:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800986a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	2200      	movs	r2, #0
 8009870:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	3304      	adds	r3, #4
 8009876:	4618      	mov	r0, r3
 8009878:	f7ff f978 	bl	8008b6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	3318      	adds	r3, #24
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff f973 	bl	8008b6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800988a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	2200      	movs	r2, #0
 80098a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	68f9      	ldr	r1, [r7, #12]
 80098ae:	69b8      	ldr	r0, [r7, #24]
 80098b0:	f001 f928 	bl	800ab04 <pxPortInitialiseStack>
 80098b4:	4602      	mov	r2, r0
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098c6:	bf00      	nop
 80098c8:	3720      	adds	r7, #32
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098d8:	f001 fa44 	bl	800ad64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098dc:	4b2d      	ldr	r3, [pc, #180]	; (8009994 <prvAddNewTaskToReadyList+0xc4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3301      	adds	r3, #1
 80098e2:	4a2c      	ldr	r2, [pc, #176]	; (8009994 <prvAddNewTaskToReadyList+0xc4>)
 80098e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098e6:	4b2c      	ldr	r3, [pc, #176]	; (8009998 <prvAddNewTaskToReadyList+0xc8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d109      	bne.n	8009902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098ee:	4a2a      	ldr	r2, [pc, #168]	; (8009998 <prvAddNewTaskToReadyList+0xc8>)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098f4:	4b27      	ldr	r3, [pc, #156]	; (8009994 <prvAddNewTaskToReadyList+0xc4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d110      	bne.n	800991e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098fc:	f000 fc16 	bl	800a12c <prvInitialiseTaskLists>
 8009900:	e00d      	b.n	800991e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009902:	4b26      	ldr	r3, [pc, #152]	; (800999c <prvAddNewTaskToReadyList+0xcc>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d109      	bne.n	800991e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800990a:	4b23      	ldr	r3, [pc, #140]	; (8009998 <prvAddNewTaskToReadyList+0xc8>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	429a      	cmp	r2, r3
 8009916:	d802      	bhi.n	800991e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009918:	4a1f      	ldr	r2, [pc, #124]	; (8009998 <prvAddNewTaskToReadyList+0xc8>)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800991e:	4b20      	ldr	r3, [pc, #128]	; (80099a0 <prvAddNewTaskToReadyList+0xd0>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3301      	adds	r3, #1
 8009924:	4a1e      	ldr	r2, [pc, #120]	; (80099a0 <prvAddNewTaskToReadyList+0xd0>)
 8009926:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009928:	4b1d      	ldr	r3, [pc, #116]	; (80099a0 <prvAddNewTaskToReadyList+0xd0>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009934:	4b1b      	ldr	r3, [pc, #108]	; (80099a4 <prvAddNewTaskToReadyList+0xd4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d903      	bls.n	8009944 <prvAddNewTaskToReadyList+0x74>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009940:	4a18      	ldr	r2, [pc, #96]	; (80099a4 <prvAddNewTaskToReadyList+0xd4>)
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4a15      	ldr	r2, [pc, #84]	; (80099a8 <prvAddNewTaskToReadyList+0xd8>)
 8009952:	441a      	add	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3304      	adds	r3, #4
 8009958:	4619      	mov	r1, r3
 800995a:	4610      	mov	r0, r2
 800995c:	f7ff f913 	bl	8008b86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009960:	f001 fa30 	bl	800adc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009964:	4b0d      	ldr	r3, [pc, #52]	; (800999c <prvAddNewTaskToReadyList+0xcc>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00e      	beq.n	800998a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800996c:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <prvAddNewTaskToReadyList+0xc8>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	429a      	cmp	r2, r3
 8009978:	d207      	bcs.n	800998a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800997a:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <prvAddNewTaskToReadyList+0xdc>)
 800997c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800998a:	bf00      	nop
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000ef8 	.word	0x20000ef8
 8009998:	20000a24 	.word	0x20000a24
 800999c:	20000f04 	.word	0x20000f04
 80099a0:	20000f14 	.word	0x20000f14
 80099a4:	20000f00 	.word	0x20000f00
 80099a8:	20000a28 	.word	0x20000a28
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d017      	beq.n	80099f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80099c2:	4b13      	ldr	r3, [pc, #76]	; (8009a10 <vTaskDelay+0x60>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <vTaskDelay+0x30>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	60bb      	str	r3, [r7, #8]
}
 80099dc:	bf00      	nop
 80099de:	e7fe      	b.n	80099de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80099e0:	f000 f880 	bl	8009ae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099e4:	2100      	movs	r1, #0
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fcea 	bl	800a3c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099ec:	f000 f888 	bl	8009b00 <xTaskResumeAll>
 80099f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d107      	bne.n	8009a08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80099f8:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <vTaskDelay+0x64>)
 80099fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a08:	bf00      	nop
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20000f20 	.word	0x20000f20
 8009a14:	e000ed04 	.word	0xe000ed04

08009a18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08a      	sub	sp, #40	; 0x28
 8009a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a26:	463a      	mov	r2, r7
 8009a28:	1d39      	adds	r1, r7, #4
 8009a2a:	f107 0308 	add.w	r3, r7, #8
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7ff f848 	bl	8008ac4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	9202      	str	r2, [sp, #8]
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	2300      	movs	r3, #0
 8009a44:	460a      	mov	r2, r1
 8009a46:	4921      	ldr	r1, [pc, #132]	; (8009acc <vTaskStartScheduler+0xb4>)
 8009a48:	4821      	ldr	r0, [pc, #132]	; (8009ad0 <vTaskStartScheduler+0xb8>)
 8009a4a:	f7ff fe0f 	bl	800966c <xTaskCreateStatic>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	4a20      	ldr	r2, [pc, #128]	; (8009ad4 <vTaskStartScheduler+0xbc>)
 8009a52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a54:	4b1f      	ldr	r3, [pc, #124]	; (8009ad4 <vTaskStartScheduler+0xbc>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	617b      	str	r3, [r7, #20]
 8009a60:	e001      	b.n	8009a66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d102      	bne.n	8009a72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a6c:	f000 fcfc 	bl	800a468 <xTimerCreateTimerTask>
 8009a70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d116      	bne.n	8009aa6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	613b      	str	r3, [r7, #16]
}
 8009a8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a8c:	4b12      	ldr	r3, [pc, #72]	; (8009ad8 <vTaskStartScheduler+0xc0>)
 8009a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a94:	4b11      	ldr	r3, [pc, #68]	; (8009adc <vTaskStartScheduler+0xc4>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a9a:	4b11      	ldr	r3, [pc, #68]	; (8009ae0 <vTaskStartScheduler+0xc8>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009aa0:	f001 f8be 	bl	800ac20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009aa4:	e00e      	b.n	8009ac4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aac:	d10a      	bne.n	8009ac4 <vTaskStartScheduler+0xac>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	60fb      	str	r3, [r7, #12]
}
 8009ac0:	bf00      	nop
 8009ac2:	e7fe      	b.n	8009ac2 <vTaskStartScheduler+0xaa>
}
 8009ac4:	bf00      	nop
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	0800dbdc 	.word	0x0800dbdc
 8009ad0:	0800a0fd 	.word	0x0800a0fd
 8009ad4:	20000f1c 	.word	0x20000f1c
 8009ad8:	20000f18 	.word	0x20000f18
 8009adc:	20000f04 	.word	0x20000f04
 8009ae0:	20000efc 	.word	0x20000efc

08009ae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ae8:	4b04      	ldr	r3, [pc, #16]	; (8009afc <vTaskSuspendAll+0x18>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3301      	adds	r3, #1
 8009aee:	4a03      	ldr	r2, [pc, #12]	; (8009afc <vTaskSuspendAll+0x18>)
 8009af0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009af2:	bf00      	nop
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	20000f20 	.word	0x20000f20

08009b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b0e:	4b42      	ldr	r3, [pc, #264]	; (8009c18 <xTaskResumeAll+0x118>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10a      	bne.n	8009b2c <xTaskResumeAll+0x2c>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	603b      	str	r3, [r7, #0]
}
 8009b28:	bf00      	nop
 8009b2a:	e7fe      	b.n	8009b2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b2c:	f001 f91a 	bl	800ad64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b30:	4b39      	ldr	r3, [pc, #228]	; (8009c18 <xTaskResumeAll+0x118>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	4a38      	ldr	r2, [pc, #224]	; (8009c18 <xTaskResumeAll+0x118>)
 8009b38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b3a:	4b37      	ldr	r3, [pc, #220]	; (8009c18 <xTaskResumeAll+0x118>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d162      	bne.n	8009c08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b42:	4b36      	ldr	r3, [pc, #216]	; (8009c1c <xTaskResumeAll+0x11c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d05e      	beq.n	8009c08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b4a:	e02f      	b.n	8009bac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4c:	4b34      	ldr	r3, [pc, #208]	; (8009c20 <xTaskResumeAll+0x120>)
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3318      	adds	r3, #24
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7ff f871 	bl	8008c40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3304      	adds	r3, #4
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff f86c 	bl	8008c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	4b2d      	ldr	r3, [pc, #180]	; (8009c24 <xTaskResumeAll+0x124>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d903      	bls.n	8009b7c <xTaskResumeAll+0x7c>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	4a2a      	ldr	r2, [pc, #168]	; (8009c24 <xTaskResumeAll+0x124>)
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b80:	4613      	mov	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4a27      	ldr	r2, [pc, #156]	; (8009c28 <xTaskResumeAll+0x128>)
 8009b8a:	441a      	add	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f7fe fff7 	bl	8008b86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9c:	4b23      	ldr	r3, [pc, #140]	; (8009c2c <xTaskResumeAll+0x12c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d302      	bcc.n	8009bac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ba6:	4b22      	ldr	r3, [pc, #136]	; (8009c30 <xTaskResumeAll+0x130>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bac:	4b1c      	ldr	r3, [pc, #112]	; (8009c20 <xTaskResumeAll+0x120>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1cb      	bne.n	8009b4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bba:	f000 fb55 	bl	800a268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009bbe:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <xTaskResumeAll+0x134>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d010      	beq.n	8009bec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009bca:	f000 f847 	bl	8009c5c <xTaskIncrementTick>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009bd4:	4b16      	ldr	r3, [pc, #88]	; (8009c30 <xTaskResumeAll+0x130>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1f1      	bne.n	8009bca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009be6:	4b13      	ldr	r3, [pc, #76]	; (8009c34 <xTaskResumeAll+0x134>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009bec:	4b10      	ldr	r3, [pc, #64]	; (8009c30 <xTaskResumeAll+0x130>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d009      	beq.n	8009c08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009bf8:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <xTaskResumeAll+0x138>)
 8009bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c08:	f001 f8dc 	bl	800adc4 <vPortExitCritical>

	return xAlreadyYielded;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20000f20 	.word	0x20000f20
 8009c1c:	20000ef8 	.word	0x20000ef8
 8009c20:	20000eb8 	.word	0x20000eb8
 8009c24:	20000f00 	.word	0x20000f00
 8009c28:	20000a28 	.word	0x20000a28
 8009c2c:	20000a24 	.word	0x20000a24
 8009c30:	20000f0c 	.word	0x20000f0c
 8009c34:	20000f08 	.word	0x20000f08
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c42:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <xTaskGetTickCount+0x1c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c48:	687b      	ldr	r3, [r7, #4]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	20000efc 	.word	0x20000efc

08009c5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c62:	2300      	movs	r3, #0
 8009c64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c66:	4b4f      	ldr	r3, [pc, #316]	; (8009da4 <xTaskIncrementTick+0x148>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f040 808f 	bne.w	8009d8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c70:	4b4d      	ldr	r3, [pc, #308]	; (8009da8 <xTaskIncrementTick+0x14c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3301      	adds	r3, #1
 8009c76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c78:	4a4b      	ldr	r2, [pc, #300]	; (8009da8 <xTaskIncrementTick+0x14c>)
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d120      	bne.n	8009cc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c84:	4b49      	ldr	r3, [pc, #292]	; (8009dac <xTaskIncrementTick+0x150>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	603b      	str	r3, [r7, #0]
}
 8009ca0:	bf00      	nop
 8009ca2:	e7fe      	b.n	8009ca2 <xTaskIncrementTick+0x46>
 8009ca4:	4b41      	ldr	r3, [pc, #260]	; (8009dac <xTaskIncrementTick+0x150>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	60fb      	str	r3, [r7, #12]
 8009caa:	4b41      	ldr	r3, [pc, #260]	; (8009db0 <xTaskIncrementTick+0x154>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a3f      	ldr	r2, [pc, #252]	; (8009dac <xTaskIncrementTick+0x150>)
 8009cb0:	6013      	str	r3, [r2, #0]
 8009cb2:	4a3f      	ldr	r2, [pc, #252]	; (8009db0 <xTaskIncrementTick+0x154>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	4b3e      	ldr	r3, [pc, #248]	; (8009db4 <xTaskIncrementTick+0x158>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	4a3d      	ldr	r2, [pc, #244]	; (8009db4 <xTaskIncrementTick+0x158>)
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	f000 fad1 	bl	800a268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cc6:	4b3c      	ldr	r3, [pc, #240]	; (8009db8 <xTaskIncrementTick+0x15c>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d349      	bcc.n	8009d64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cd0:	4b36      	ldr	r3, [pc, #216]	; (8009dac <xTaskIncrementTick+0x150>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cda:	4b37      	ldr	r3, [pc, #220]	; (8009db8 <xTaskIncrementTick+0x15c>)
 8009cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce0:	601a      	str	r2, [r3, #0]
					break;
 8009ce2:	e03f      	b.n	8009d64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce4:	4b31      	ldr	r3, [pc, #196]	; (8009dac <xTaskIncrementTick+0x150>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d203      	bcs.n	8009d04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009cfc:	4a2e      	ldr	r2, [pc, #184]	; (8009db8 <xTaskIncrementTick+0x15c>)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d02:	e02f      	b.n	8009d64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe ff99 	bl	8008c40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d004      	beq.n	8009d20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	3318      	adds	r3, #24
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe ff90 	bl	8008c40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d24:	4b25      	ldr	r3, [pc, #148]	; (8009dbc <xTaskIncrementTick+0x160>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d903      	bls.n	8009d34 <xTaskIncrementTick+0xd8>
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	4a22      	ldr	r2, [pc, #136]	; (8009dbc <xTaskIncrementTick+0x160>)
 8009d32:	6013      	str	r3, [r2, #0]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d38:	4613      	mov	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4a1f      	ldr	r2, [pc, #124]	; (8009dc0 <xTaskIncrementTick+0x164>)
 8009d42:	441a      	add	r2, r3
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f7fe ff1b 	bl	8008b86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d54:	4b1b      	ldr	r3, [pc, #108]	; (8009dc4 <xTaskIncrementTick+0x168>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d3b8      	bcc.n	8009cd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d62:	e7b5      	b.n	8009cd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d64:	4b17      	ldr	r3, [pc, #92]	; (8009dc4 <xTaskIncrementTick+0x168>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6a:	4915      	ldr	r1, [pc, #84]	; (8009dc0 <xTaskIncrementTick+0x164>)
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d901      	bls.n	8009d80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d80:	4b11      	ldr	r3, [pc, #68]	; (8009dc8 <xTaskIncrementTick+0x16c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d007      	beq.n	8009d98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	617b      	str	r3, [r7, #20]
 8009d8c:	e004      	b.n	8009d98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d8e:	4b0f      	ldr	r3, [pc, #60]	; (8009dcc <xTaskIncrementTick+0x170>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a0d      	ldr	r2, [pc, #52]	; (8009dcc <xTaskIncrementTick+0x170>)
 8009d96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d98:	697b      	ldr	r3, [r7, #20]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000f20 	.word	0x20000f20
 8009da8:	20000efc 	.word	0x20000efc
 8009dac:	20000eb0 	.word	0x20000eb0
 8009db0:	20000eb4 	.word	0x20000eb4
 8009db4:	20000f10 	.word	0x20000f10
 8009db8:	20000f18 	.word	0x20000f18
 8009dbc:	20000f00 	.word	0x20000f00
 8009dc0:	20000a28 	.word	0x20000a28
 8009dc4:	20000a24 	.word	0x20000a24
 8009dc8:	20000f0c 	.word	0x20000f0c
 8009dcc:	20000f08 	.word	0x20000f08

08009dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dd6:	4b28      	ldr	r3, [pc, #160]	; (8009e78 <vTaskSwitchContext+0xa8>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009dde:	4b27      	ldr	r3, [pc, #156]	; (8009e7c <vTaskSwitchContext+0xac>)
 8009de0:	2201      	movs	r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009de4:	e041      	b.n	8009e6a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009de6:	4b25      	ldr	r3, [pc, #148]	; (8009e7c <vTaskSwitchContext+0xac>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dec:	4b24      	ldr	r3, [pc, #144]	; (8009e80 <vTaskSwitchContext+0xb0>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e010      	b.n	8009e16 <vTaskSwitchContext+0x46>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <vTaskSwitchContext+0x40>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	607b      	str	r3, [r7, #4]
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <vTaskSwitchContext+0x3e>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	60fb      	str	r3, [r7, #12]
 8009e16:	491b      	ldr	r1, [pc, #108]	; (8009e84 <vTaskSwitchContext+0xb4>)
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	440b      	add	r3, r1
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0e4      	beq.n	8009df4 <vTaskSwitchContext+0x24>
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4a13      	ldr	r2, [pc, #76]	; (8009e84 <vTaskSwitchContext+0xb4>)
 8009e36:	4413      	add	r3, r2
 8009e38:	60bb      	str	r3, [r7, #8]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	605a      	str	r2, [r3, #4]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d104      	bne.n	8009e5a <vTaskSwitchContext+0x8a>
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	605a      	str	r2, [r3, #4]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	4a09      	ldr	r2, [pc, #36]	; (8009e88 <vTaskSwitchContext+0xb8>)
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	4a06      	ldr	r2, [pc, #24]	; (8009e80 <vTaskSwitchContext+0xb0>)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6013      	str	r3, [r2, #0]
}
 8009e6a:	bf00      	nop
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	20000f20 	.word	0x20000f20
 8009e7c:	20000f0c 	.word	0x20000f0c
 8009e80:	20000f00 	.word	0x20000f00
 8009e84:	20000a28 	.word	0x20000a28
 8009e88:	20000a24 	.word	0x20000a24

08009e8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10a      	bne.n	8009eb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	60fb      	str	r3, [r7, #12]
}
 8009eae:	bf00      	nop
 8009eb0:	e7fe      	b.n	8009eb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eb2:	4b07      	ldr	r3, [pc, #28]	; (8009ed0 <vTaskPlaceOnEventList+0x44>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3318      	adds	r3, #24
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7fe fe87 	bl	8008bce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	6838      	ldr	r0, [r7, #0]
 8009ec4:	f000 fa7c 	bl	800a3c0 <prvAddCurrentTaskToDelayedList>
}
 8009ec8:	bf00      	nop
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20000a24 	.word	0x20000a24

08009ed4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10a      	bne.n	8009efc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	617b      	str	r3, [r7, #20]
}
 8009ef8:	bf00      	nop
 8009efa:	e7fe      	b.n	8009efa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009efc:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <vTaskPlaceOnEventListRestricted+0x54>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3318      	adds	r3, #24
 8009f02:	4619      	mov	r1, r3
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7fe fe3e 	bl	8008b86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009f10:	f04f 33ff 	mov.w	r3, #4294967295
 8009f14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	68b8      	ldr	r0, [r7, #8]
 8009f1a:	f000 fa51 	bl	800a3c0 <prvAddCurrentTaskToDelayedList>
	}
 8009f1e:	bf00      	nop
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20000a24 	.word	0x20000a24

08009f2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60fb      	str	r3, [r7, #12]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	3318      	adds	r3, #24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe fe6f 	bl	8008c40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f62:	4b1e      	ldr	r3, [pc, #120]	; (8009fdc <xTaskRemoveFromEventList+0xb0>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d11d      	bne.n	8009fa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe fe66 	bl	8008c40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f78:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <xTaskRemoveFromEventList+0xb4>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d903      	bls.n	8009f88 <xTaskRemoveFromEventList+0x5c>
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	4a16      	ldr	r2, [pc, #88]	; (8009fe0 <xTaskRemoveFromEventList+0xb4>)
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4a13      	ldr	r2, [pc, #76]	; (8009fe4 <xTaskRemoveFromEventList+0xb8>)
 8009f96:	441a      	add	r2, r3
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	f7fe fdf1 	bl	8008b86 <vListInsertEnd>
 8009fa4:	e005      	b.n	8009fb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	3318      	adds	r3, #24
 8009faa:	4619      	mov	r1, r3
 8009fac:	480e      	ldr	r0, [pc, #56]	; (8009fe8 <xTaskRemoveFromEventList+0xbc>)
 8009fae:	f7fe fdea 	bl	8008b86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb6:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <xTaskRemoveFromEventList+0xc0>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d905      	bls.n	8009fcc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <xTaskRemoveFromEventList+0xc4>)
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	e001      	b.n	8009fd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fd0:	697b      	ldr	r3, [r7, #20]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000f20 	.word	0x20000f20
 8009fe0:	20000f00 	.word	0x20000f00
 8009fe4:	20000a28 	.word	0x20000a28
 8009fe8:	20000eb8 	.word	0x20000eb8
 8009fec:	20000a24 	.word	0x20000a24
 8009ff0:	20000f0c 	.word	0x20000f0c

08009ff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ffc:	4b06      	ldr	r3, [pc, #24]	; (800a018 <vTaskInternalSetTimeOutState+0x24>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <vTaskInternalSetTimeOutState+0x28>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	605a      	str	r2, [r3, #4]
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	20000f10 	.word	0x20000f10
 800a01c:	20000efc 	.word	0x20000efc

0800a020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	613b      	str	r3, [r7, #16]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	60fb      	str	r3, [r7, #12]
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a062:	f000 fe7f 	bl	800ad64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a066:	4b1d      	ldr	r3, [pc, #116]	; (800a0dc <xTaskCheckForTimeOut+0xbc>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d102      	bne.n	800a086 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	61fb      	str	r3, [r7, #28]
 800a084:	e023      	b.n	800a0ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <xTaskCheckForTimeOut+0xc0>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d007      	beq.n	800a0a2 <xTaskCheckForTimeOut+0x82>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d302      	bcc.n	800a0a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	61fb      	str	r3, [r7, #28]
 800a0a0:	e015      	b.n	800a0ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d20b      	bcs.n	800a0c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	1ad2      	subs	r2, r2, r3
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff ff9b 	bl	8009ff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	61fb      	str	r3, [r7, #28]
 800a0c2:	e004      	b.n	800a0ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0ce:	f000 fe79 	bl	800adc4 <vPortExitCritical>

	return xReturn;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000efc 	.word	0x20000efc
 800a0e0:	20000f10 	.word	0x20000f10

0800a0e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0e8:	4b03      	ldr	r3, [pc, #12]	; (800a0f8 <vTaskMissedYield+0x14>)
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
}
 800a0ee:	bf00      	nop
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	20000f0c 	.word	0x20000f0c

0800a0fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a104:	f000 f852 	bl	800a1ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a108:	4b06      	ldr	r3, [pc, #24]	; (800a124 <prvIdleTask+0x28>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d9f9      	bls.n	800a104 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a110:	4b05      	ldr	r3, [pc, #20]	; (800a128 <prvIdleTask+0x2c>)
 800a112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a120:	e7f0      	b.n	800a104 <prvIdleTask+0x8>
 800a122:	bf00      	nop
 800a124:	20000a28 	.word	0x20000a28
 800a128:	e000ed04 	.word	0xe000ed04

0800a12c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a132:	2300      	movs	r3, #0
 800a134:	607b      	str	r3, [r7, #4]
 800a136:	e00c      	b.n	800a152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	4613      	mov	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4a12      	ldr	r2, [pc, #72]	; (800a18c <prvInitialiseTaskLists+0x60>)
 800a144:	4413      	add	r3, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fcf0 	bl	8008b2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3301      	adds	r3, #1
 800a150:	607b      	str	r3, [r7, #4]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b37      	cmp	r3, #55	; 0x37
 800a156:	d9ef      	bls.n	800a138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a158:	480d      	ldr	r0, [pc, #52]	; (800a190 <prvInitialiseTaskLists+0x64>)
 800a15a:	f7fe fce7 	bl	8008b2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a15e:	480d      	ldr	r0, [pc, #52]	; (800a194 <prvInitialiseTaskLists+0x68>)
 800a160:	f7fe fce4 	bl	8008b2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a164:	480c      	ldr	r0, [pc, #48]	; (800a198 <prvInitialiseTaskLists+0x6c>)
 800a166:	f7fe fce1 	bl	8008b2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a16a:	480c      	ldr	r0, [pc, #48]	; (800a19c <prvInitialiseTaskLists+0x70>)
 800a16c:	f7fe fcde 	bl	8008b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a170:	480b      	ldr	r0, [pc, #44]	; (800a1a0 <prvInitialiseTaskLists+0x74>)
 800a172:	f7fe fcdb 	bl	8008b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a176:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <prvInitialiseTaskLists+0x78>)
 800a178:	4a05      	ldr	r2, [pc, #20]	; (800a190 <prvInitialiseTaskLists+0x64>)
 800a17a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <prvInitialiseTaskLists+0x7c>)
 800a17e:	4a05      	ldr	r2, [pc, #20]	; (800a194 <prvInitialiseTaskLists+0x68>)
 800a180:	601a      	str	r2, [r3, #0]
}
 800a182:	bf00      	nop
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000a28 	.word	0x20000a28
 800a190:	20000e88 	.word	0x20000e88
 800a194:	20000e9c 	.word	0x20000e9c
 800a198:	20000eb8 	.word	0x20000eb8
 800a19c:	20000ecc 	.word	0x20000ecc
 800a1a0:	20000ee4 	.word	0x20000ee4
 800a1a4:	20000eb0 	.word	0x20000eb0
 800a1a8:	20000eb4 	.word	0x20000eb4

0800a1ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1b2:	e019      	b.n	800a1e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1b4:	f000 fdd6 	bl	800ad64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b8:	4b10      	ldr	r3, [pc, #64]	; (800a1fc <prvCheckTasksWaitingTermination+0x50>)
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe fd3b 	bl	8008c40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <prvCheckTasksWaitingTermination+0x54>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	4a0b      	ldr	r2, [pc, #44]	; (800a200 <prvCheckTasksWaitingTermination+0x54>)
 800a1d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1d4:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <prvCheckTasksWaitingTermination+0x58>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	4a0a      	ldr	r2, [pc, #40]	; (800a204 <prvCheckTasksWaitingTermination+0x58>)
 800a1dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1de:	f000 fdf1 	bl	800adc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f810 	bl	800a208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <prvCheckTasksWaitingTermination+0x58>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e1      	bne.n	800a1b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000ecc 	.word	0x20000ecc
 800a200:	20000ef8 	.word	0x20000ef8
 800a204:	20000ee0 	.word	0x20000ee0

0800a208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a216:	2b00      	cmp	r3, #0
 800a218:	d108      	bne.n	800a22c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 ff50 	bl	800b0c4 <vPortFree>
				vPortFree( pxTCB );
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 ff4d 	bl	800b0c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a22a:	e018      	b.n	800a25e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a232:	2b01      	cmp	r3, #1
 800a234:	d103      	bne.n	800a23e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 ff44 	bl	800b0c4 <vPortFree>
	}
 800a23c:	e00f      	b.n	800a25e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a244:	2b02      	cmp	r3, #2
 800a246:	d00a      	beq.n	800a25e <prvDeleteTCB+0x56>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	60fb      	str	r3, [r7, #12]
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <prvDeleteTCB+0x54>
	}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
	...

0800a268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a26e:	4b0c      	ldr	r3, [pc, #48]	; (800a2a0 <prvResetNextTaskUnblockTime+0x38>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a27a:	f04f 32ff 	mov.w	r2, #4294967295
 800a27e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a280:	e008      	b.n	800a294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a282:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <prvResetNextTaskUnblockTime+0x38>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	4a04      	ldr	r2, [pc, #16]	; (800a2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a292:	6013      	str	r3, [r2, #0]
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	20000eb0 	.word	0x20000eb0
 800a2a4:	20000f18 	.word	0x20000f18

0800a2a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2ae:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <xTaskGetSchedulerState+0x34>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d102      	bne.n	800a2bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	607b      	str	r3, [r7, #4]
 800a2ba:	e008      	b.n	800a2ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2bc:	4b08      	ldr	r3, [pc, #32]	; (800a2e0 <xTaskGetSchedulerState+0x38>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	e001      	b.n	800a2ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2ce:	687b      	ldr	r3, [r7, #4]
	}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	20000f04 	.word	0x20000f04
 800a2e0:	20000f20 	.word	0x20000f20

0800a2e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d056      	beq.n	800a3a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2fa:	4b2e      	ldr	r3, [pc, #184]	; (800a3b4 <xTaskPriorityDisinherit+0xd0>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	429a      	cmp	r2, r3
 800a302:	d00a      	beq.n	800a31a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	60fb      	str	r3, [r7, #12]
}
 800a316:	bf00      	nop
 800a318:	e7fe      	b.n	800a318 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10a      	bne.n	800a338 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	60bb      	str	r3, [r7, #8]
}
 800a334:	bf00      	nop
 800a336:	e7fe      	b.n	800a336 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a33c:	1e5a      	subs	r2, r3, #1
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d02c      	beq.n	800a3a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a352:	2b00      	cmp	r3, #0
 800a354:	d128      	bne.n	800a3a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	3304      	adds	r3, #4
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe fc70 	bl	8008c40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a378:	4b0f      	ldr	r3, [pc, #60]	; (800a3b8 <xTaskPriorityDisinherit+0xd4>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d903      	bls.n	800a388 <xTaskPriorityDisinherit+0xa4>
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a384:	4a0c      	ldr	r2, [pc, #48]	; (800a3b8 <xTaskPriorityDisinherit+0xd4>)
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38c:	4613      	mov	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4a09      	ldr	r2, [pc, #36]	; (800a3bc <xTaskPriorityDisinherit+0xd8>)
 800a396:	441a      	add	r2, r3
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	3304      	adds	r3, #4
 800a39c:	4619      	mov	r1, r3
 800a39e:	4610      	mov	r0, r2
 800a3a0:	f7fe fbf1 	bl	8008b86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3a8:	697b      	ldr	r3, [r7, #20]
	}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000a24 	.word	0x20000a24
 800a3b8:	20000f00 	.word	0x20000f00
 800a3bc:	20000a28 	.word	0x20000a28

0800a3c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3ca:	4b21      	ldr	r3, [pc, #132]	; (800a450 <prvAddCurrentTaskToDelayedList+0x90>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3d0:	4b20      	ldr	r3, [pc, #128]	; (800a454 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe fc32 	bl	8008c40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e2:	d10a      	bne.n	800a3fa <prvAddCurrentTaskToDelayedList+0x3a>
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d007      	beq.n	800a3fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3ea:	4b1a      	ldr	r3, [pc, #104]	; (800a454 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4819      	ldr	r0, [pc, #100]	; (800a458 <prvAddCurrentTaskToDelayedList+0x98>)
 800a3f4:	f7fe fbc7 	bl	8008b86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3f8:	e026      	b.n	800a448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4413      	add	r3, r2
 800a400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a402:	4b14      	ldr	r3, [pc, #80]	; (800a454 <prvAddCurrentTaskToDelayedList+0x94>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d209      	bcs.n	800a426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a412:	4b12      	ldr	r3, [pc, #72]	; (800a45c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	4b0f      	ldr	r3, [pc, #60]	; (800a454 <prvAddCurrentTaskToDelayedList+0x94>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3304      	adds	r3, #4
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f7fe fbd5 	bl	8008bce <vListInsert>
}
 800a424:	e010      	b.n	800a448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a426:	4b0e      	ldr	r3, [pc, #56]	; (800a460 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <prvAddCurrentTaskToDelayedList+0x94>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3304      	adds	r3, #4
 800a430:	4619      	mov	r1, r3
 800a432:	4610      	mov	r0, r2
 800a434:	f7fe fbcb 	bl	8008bce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a438:	4b0a      	ldr	r3, [pc, #40]	; (800a464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d202      	bcs.n	800a448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a442:	4a08      	ldr	r2, [pc, #32]	; (800a464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	6013      	str	r3, [r2, #0]
}
 800a448:	bf00      	nop
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	20000efc 	.word	0x20000efc
 800a454:	20000a24 	.word	0x20000a24
 800a458:	20000ee4 	.word	0x20000ee4
 800a45c:	20000eb4 	.word	0x20000eb4
 800a460:	20000eb0 	.word	0x20000eb0
 800a464:	20000f18 	.word	0x20000f18

0800a468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08a      	sub	sp, #40	; 0x28
 800a46c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a46e:	2300      	movs	r3, #0
 800a470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a472:	f000 fb07 	bl	800aa84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a476:	4b1c      	ldr	r3, [pc, #112]	; (800a4e8 <xTimerCreateTimerTask+0x80>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d021      	beq.n	800a4c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a482:	2300      	movs	r3, #0
 800a484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a486:	1d3a      	adds	r2, r7, #4
 800a488:	f107 0108 	add.w	r1, r7, #8
 800a48c:	f107 030c 	add.w	r3, r7, #12
 800a490:	4618      	mov	r0, r3
 800a492:	f7fe fb31 	bl	8008af8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a496:	6879      	ldr	r1, [r7, #4]
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	9202      	str	r2, [sp, #8]
 800a49e:	9301      	str	r3, [sp, #4]
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	460a      	mov	r2, r1
 800a4a8:	4910      	ldr	r1, [pc, #64]	; (800a4ec <xTimerCreateTimerTask+0x84>)
 800a4aa:	4811      	ldr	r0, [pc, #68]	; (800a4f0 <xTimerCreateTimerTask+0x88>)
 800a4ac:	f7ff f8de 	bl	800966c <xTaskCreateStatic>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	4a10      	ldr	r2, [pc, #64]	; (800a4f4 <xTimerCreateTimerTask+0x8c>)
 800a4b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a4b6:	4b0f      	ldr	r3, [pc, #60]	; (800a4f4 <xTimerCreateTimerTask+0x8c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10a      	bne.n	800a4de <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	613b      	str	r3, [r7, #16]
}
 800a4da:	bf00      	nop
 800a4dc:	e7fe      	b.n	800a4dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a4de:	697b      	ldr	r3, [r7, #20]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20000f54 	.word	0x20000f54
 800a4ec:	0800dbe4 	.word	0x0800dbe4
 800a4f0:	0800a62d 	.word	0x0800a62d
 800a4f4:	20000f58 	.word	0x20000f58

0800a4f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08a      	sub	sp, #40	; 0x28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a506:	2300      	movs	r3, #0
 800a508:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	623b      	str	r3, [r7, #32]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a526:	4b1a      	ldr	r3, [pc, #104]	; (800a590 <xTimerGenericCommand+0x98>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d02a      	beq.n	800a584 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b05      	cmp	r3, #5
 800a53e:	dc18      	bgt.n	800a572 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a540:	f7ff feb2 	bl	800a2a8 <xTaskGetSchedulerState>
 800a544:	4603      	mov	r3, r0
 800a546:	2b02      	cmp	r3, #2
 800a548:	d109      	bne.n	800a55e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a54a:	4b11      	ldr	r3, [pc, #68]	; (800a590 <xTimerGenericCommand+0x98>)
 800a54c:	6818      	ldr	r0, [r3, #0]
 800a54e:	f107 0110 	add.w	r1, r7, #16
 800a552:	2300      	movs	r3, #0
 800a554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a556:	f7fe fca1 	bl	8008e9c <xQueueGenericSend>
 800a55a:	6278      	str	r0, [r7, #36]	; 0x24
 800a55c:	e012      	b.n	800a584 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a55e:	4b0c      	ldr	r3, [pc, #48]	; (800a590 <xTimerGenericCommand+0x98>)
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	f107 0110 	add.w	r1, r7, #16
 800a566:	2300      	movs	r3, #0
 800a568:	2200      	movs	r2, #0
 800a56a:	f7fe fc97 	bl	8008e9c <xQueueGenericSend>
 800a56e:	6278      	str	r0, [r7, #36]	; 0x24
 800a570:	e008      	b.n	800a584 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <xTimerGenericCommand+0x98>)
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	f107 0110 	add.w	r1, r7, #16
 800a57a:	2300      	movs	r3, #0
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	f7fe fd8b 	bl	8009098 <xQueueGenericSendFromISR>
 800a582:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a586:	4618      	mov	r0, r3
 800a588:	3728      	adds	r7, #40	; 0x28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	20000f54 	.word	0x20000f54

0800a594 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af02      	add	r7, sp, #8
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a59e:	4b22      	ldr	r3, [pc, #136]	; (800a628 <prvProcessExpiredTimer+0x94>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fb47 	bl	8008c40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d022      	beq.n	800a606 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	699a      	ldr	r2, [r3, #24]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	18d1      	adds	r1, r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	6978      	ldr	r0, [r7, #20]
 800a5ce:	f000 f8d1 	bl	800a774 <prvInsertTimerInActiveList>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01f      	beq.n	800a618 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5d8:	2300      	movs	r3, #0
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	6978      	ldr	r0, [r7, #20]
 800a5e4:	f7ff ff88 	bl	800a4f8 <xTimerGenericCommand>
 800a5e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d113      	bne.n	800a618 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	60fb      	str	r3, [r7, #12]
}
 800a602:	bf00      	nop
 800a604:	e7fe      	b.n	800a604 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a60c:	f023 0301 	bic.w	r3, r3, #1
 800a610:	b2da      	uxtb	r2, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	6a1b      	ldr	r3, [r3, #32]
 800a61c:	6978      	ldr	r0, [r7, #20]
 800a61e:	4798      	blx	r3
}
 800a620:	bf00      	nop
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20000f4c 	.word	0x20000f4c

0800a62c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a634:	f107 0308 	add.w	r3, r7, #8
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 f857 	bl	800a6ec <prvGetNextExpireTime>
 800a63e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	4619      	mov	r1, r3
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 f803 	bl	800a650 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a64a:	f000 f8d5 	bl	800a7f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a64e:	e7f1      	b.n	800a634 <prvTimerTask+0x8>

0800a650 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a65a:	f7ff fa43 	bl	8009ae4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a65e:	f107 0308 	add.w	r3, r7, #8
 800a662:	4618      	mov	r0, r3
 800a664:	f000 f866 	bl	800a734 <prvSampleTimeNow>
 800a668:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d130      	bne.n	800a6d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <prvProcessTimerOrBlockTask+0x3c>
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d806      	bhi.n	800a68c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a67e:	f7ff fa3f 	bl	8009b00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a682:	68f9      	ldr	r1, [r7, #12]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7ff ff85 	bl	800a594 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a68a:	e024      	b.n	800a6d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d008      	beq.n	800a6a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a692:	4b13      	ldr	r3, [pc, #76]	; (800a6e0 <prvProcessTimerOrBlockTask+0x90>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <prvProcessTimerOrBlockTask+0x50>
 800a69c:	2301      	movs	r3, #1
 800a69e:	e000      	b.n	800a6a2 <prvProcessTimerOrBlockTask+0x52>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6a4:	4b0f      	ldr	r3, [pc, #60]	; (800a6e4 <prvProcessTimerOrBlockTask+0x94>)
 800a6a6:	6818      	ldr	r0, [r3, #0]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f7fe ffa7 	bl	8009604 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a6b6:	f7ff fa23 	bl	8009b00 <xTaskResumeAll>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10a      	bne.n	800a6d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a6c0:	4b09      	ldr	r3, [pc, #36]	; (800a6e8 <prvProcessTimerOrBlockTask+0x98>)
 800a6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	f3bf 8f6f 	isb	sy
}
 800a6d0:	e001      	b.n	800a6d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a6d2:	f7ff fa15 	bl	8009b00 <xTaskResumeAll>
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20000f50 	.word	0x20000f50
 800a6e4:	20000f54 	.word	0x20000f54
 800a6e8:	e000ed04 	.word	0xe000ed04

0800a6ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6f4:	4b0e      	ldr	r3, [pc, #56]	; (800a730 <prvGetNextExpireTime+0x44>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <prvGetNextExpireTime+0x16>
 800a6fe:	2201      	movs	r2, #1
 800a700:	e000      	b.n	800a704 <prvGetNextExpireTime+0x18>
 800a702:	2200      	movs	r2, #0
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d105      	bne.n	800a71c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a710:	4b07      	ldr	r3, [pc, #28]	; (800a730 <prvGetNextExpireTime+0x44>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	60fb      	str	r3, [r7, #12]
 800a71a:	e001      	b.n	800a720 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a71c:	2300      	movs	r3, #0
 800a71e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a720:	68fb      	ldr	r3, [r7, #12]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	20000f4c 	.word	0x20000f4c

0800a734 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a73c:	f7ff fa7e 	bl	8009c3c <xTaskGetTickCount>
 800a740:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a742:	4b0b      	ldr	r3, [pc, #44]	; (800a770 <prvSampleTimeNow+0x3c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d205      	bcs.n	800a758 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a74c:	f000 f936 	bl	800a9bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	e002      	b.n	800a75e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a75e:	4a04      	ldr	r2, [pc, #16]	; (800a770 <prvSampleTimeNow+0x3c>)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a764:	68fb      	ldr	r3, [r7, #12]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	20000f5c 	.word	0x20000f5c

0800a774 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a782:	2300      	movs	r3, #0
 800a784:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	429a      	cmp	r2, r3
 800a798:	d812      	bhi.n	800a7c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	1ad2      	subs	r2, r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	699b      	ldr	r3, [r3, #24]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d302      	bcc.n	800a7ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	e01b      	b.n	800a7e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7ae:	4b10      	ldr	r3, [pc, #64]	; (800a7f0 <prvInsertTimerInActiveList+0x7c>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	f7fe fa08 	bl	8008bce <vListInsert>
 800a7be:	e012      	b.n	800a7e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d206      	bcs.n	800a7d6 <prvInsertTimerInActiveList+0x62>
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d302      	bcc.n	800a7d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	617b      	str	r3, [r7, #20]
 800a7d4:	e007      	b.n	800a7e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7d6:	4b07      	ldr	r3, [pc, #28]	; (800a7f4 <prvInsertTimerInActiveList+0x80>)
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3304      	adds	r3, #4
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	f7fe f9f4 	bl	8008bce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7e6:	697b      	ldr	r3, [r7, #20]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20000f50 	.word	0x20000f50
 800a7f4:	20000f4c 	.word	0x20000f4c

0800a7f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08e      	sub	sp, #56	; 0x38
 800a7fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7fe:	e0ca      	b.n	800a996 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	da18      	bge.n	800a838 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a806:	1d3b      	adds	r3, r7, #4
 800a808:	3304      	adds	r3, #4
 800a80a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10a      	bne.n	800a828 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	61fb      	str	r3, [r7, #28]
}
 800a824:	bf00      	nop
 800a826:	e7fe      	b.n	800a826 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a82e:	6850      	ldr	r0, [r2, #4]
 800a830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a832:	6892      	ldr	r2, [r2, #8]
 800a834:	4611      	mov	r1, r2
 800a836:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f2c0 80aa 	blt.w	800a994 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d004      	beq.n	800a856 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	3304      	adds	r3, #4
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe f9f5 	bl	8008c40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a856:	463b      	mov	r3, r7
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff ff6b 	bl	800a734 <prvSampleTimeNow>
 800a85e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b09      	cmp	r3, #9
 800a864:	f200 8097 	bhi.w	800a996 <prvProcessReceivedCommands+0x19e>
 800a868:	a201      	add	r2, pc, #4	; (adr r2, 800a870 <prvProcessReceivedCommands+0x78>)
 800a86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86e:	bf00      	nop
 800a870:	0800a899 	.word	0x0800a899
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a899 	.word	0x0800a899
 800a87c:	0800a90d 	.word	0x0800a90d
 800a880:	0800a921 	.word	0x0800a921
 800a884:	0800a96b 	.word	0x0800a96b
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a899 	.word	0x0800a899
 800a890:	0800a90d 	.word	0x0800a90d
 800a894:	0800a921 	.word	0x0800a921
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a89e:	f043 0301 	orr.w	r3, r3, #1
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	18d1      	adds	r1, r2, r3
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8b8:	f7ff ff5c 	bl	800a774 <prvInsertTimerInActiveList>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d069      	beq.n	800a996 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8d0:	f003 0304 	and.w	r3, r3, #4
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d05e      	beq.n	800a996 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	441a      	add	r2, r3
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ea:	f7ff fe05 	bl	800a4f8 <xTimerGenericCommand>
 800a8ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d14f      	bne.n	800a996 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	61bb      	str	r3, [r7, #24]
}
 800a908:	bf00      	nop
 800a90a:	e7fe      	b.n	800a90a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a912:	f023 0301 	bic.w	r3, r3, #1
 800a916:	b2da      	uxtb	r2, r3
 800a918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a91e:	e03a      	b.n	800a996 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a926:	f043 0301 	orr.w	r3, r3, #1
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a936:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10a      	bne.n	800a956 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	617b      	str	r3, [r7, #20]
}
 800a952:	bf00      	nop
 800a954:	e7fe      	b.n	800a954 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	699a      	ldr	r2, [r3, #24]
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	18d1      	adds	r1, r2, r3
 800a95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a964:	f7ff ff06 	bl	800a774 <prvInsertTimerInActiveList>
					break;
 800a968:	e015      	b.n	800a996 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d103      	bne.n	800a980 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a97a:	f000 fba3 	bl	800b0c4 <vPortFree>
 800a97e:	e00a      	b.n	800a996 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a986:	f023 0301 	bic.w	r3, r3, #1
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a992:	e000      	b.n	800a996 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a994:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a996:	4b08      	ldr	r3, [pc, #32]	; (800a9b8 <prvProcessReceivedCommands+0x1c0>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	1d39      	adds	r1, r7, #4
 800a99c:	2200      	movs	r2, #0
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe fc16 	bl	80091d0 <xQueueReceive>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f47f af2a 	bne.w	800a800 <prvProcessReceivedCommands+0x8>
	}
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	3730      	adds	r7, #48	; 0x30
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20000f54 	.word	0x20000f54

0800a9bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9c2:	e048      	b.n	800aa56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9c4:	4b2d      	ldr	r3, [pc, #180]	; (800aa7c <prvSwitchTimerLists+0xc0>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9ce:	4b2b      	ldr	r3, [pc, #172]	; (800aa7c <prvSwitchTimerLists+0xc0>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe f92f 	bl	8008c40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d02e      	beq.n	800aa56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	4413      	add	r3, r2
 800aa00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d90e      	bls.n	800aa28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa16:	4b19      	ldr	r3, [pc, #100]	; (800aa7c <prvSwitchTimerLists+0xc0>)
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4610      	mov	r0, r2
 800aa22:	f7fe f8d4 	bl	8008bce <vListInsert>
 800aa26:	e016      	b.n	800aa56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa28:	2300      	movs	r3, #0
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	2100      	movs	r1, #0
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7ff fd60 	bl	800a4f8 <xTimerGenericCommand>
 800aa38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10a      	bne.n	800aa56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	603b      	str	r3, [r7, #0]
}
 800aa52:	bf00      	nop
 800aa54:	e7fe      	b.n	800aa54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa56:	4b09      	ldr	r3, [pc, #36]	; (800aa7c <prvSwitchTimerLists+0xc0>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1b1      	bne.n	800a9c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa60:	4b06      	ldr	r3, [pc, #24]	; (800aa7c <prvSwitchTimerLists+0xc0>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa66:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <prvSwitchTimerLists+0xc4>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a04      	ldr	r2, [pc, #16]	; (800aa7c <prvSwitchTimerLists+0xc0>)
 800aa6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa6e:	4a04      	ldr	r2, [pc, #16]	; (800aa80 <prvSwitchTimerLists+0xc4>)
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	6013      	str	r3, [r2, #0]
}
 800aa74:	bf00      	nop
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	20000f4c 	.word	0x20000f4c
 800aa80:	20000f50 	.word	0x20000f50

0800aa84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa8a:	f000 f96b 	bl	800ad64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa8e:	4b15      	ldr	r3, [pc, #84]	; (800aae4 <prvCheckForValidListAndQueue+0x60>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d120      	bne.n	800aad8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa96:	4814      	ldr	r0, [pc, #80]	; (800aae8 <prvCheckForValidListAndQueue+0x64>)
 800aa98:	f7fe f848 	bl	8008b2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa9c:	4813      	ldr	r0, [pc, #76]	; (800aaec <prvCheckForValidListAndQueue+0x68>)
 800aa9e:	f7fe f845 	bl	8008b2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aaa2:	4b13      	ldr	r3, [pc, #76]	; (800aaf0 <prvCheckForValidListAndQueue+0x6c>)
 800aaa4:	4a10      	ldr	r2, [pc, #64]	; (800aae8 <prvCheckForValidListAndQueue+0x64>)
 800aaa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aaa8:	4b12      	ldr	r3, [pc, #72]	; (800aaf4 <prvCheckForValidListAndQueue+0x70>)
 800aaaa:	4a10      	ldr	r2, [pc, #64]	; (800aaec <prvCheckForValidListAndQueue+0x68>)
 800aaac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aaae:	2300      	movs	r3, #0
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	4b11      	ldr	r3, [pc, #68]	; (800aaf8 <prvCheckForValidListAndQueue+0x74>)
 800aab4:	4a11      	ldr	r2, [pc, #68]	; (800aafc <prvCheckForValidListAndQueue+0x78>)
 800aab6:	2110      	movs	r1, #16
 800aab8:	200a      	movs	r0, #10
 800aaba:	f7fe f953 	bl	8008d64 <xQueueGenericCreateStatic>
 800aabe:	4603      	mov	r3, r0
 800aac0:	4a08      	ldr	r2, [pc, #32]	; (800aae4 <prvCheckForValidListAndQueue+0x60>)
 800aac2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aac4:	4b07      	ldr	r3, [pc, #28]	; (800aae4 <prvCheckForValidListAndQueue+0x60>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d005      	beq.n	800aad8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aacc:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <prvCheckForValidListAndQueue+0x60>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	490b      	ldr	r1, [pc, #44]	; (800ab00 <prvCheckForValidListAndQueue+0x7c>)
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe fd6c 	bl	80095b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aad8:	f000 f974 	bl	800adc4 <vPortExitCritical>
}
 800aadc:	bf00      	nop
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20000f54 	.word	0x20000f54
 800aae8:	20000f24 	.word	0x20000f24
 800aaec:	20000f38 	.word	0x20000f38
 800aaf0:	20000f4c 	.word	0x20000f4c
 800aaf4:	20000f50 	.word	0x20000f50
 800aaf8:	20001000 	.word	0x20001000
 800aafc:	20000f60 	.word	0x20000f60
 800ab00:	0800dbec 	.word	0x0800dbec

0800ab04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3b04      	subs	r3, #4
 800ab14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3b04      	subs	r3, #4
 800ab22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f023 0201 	bic.w	r2, r3, #1
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3b04      	subs	r3, #4
 800ab32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab34:	4a0c      	ldr	r2, [pc, #48]	; (800ab68 <pxPortInitialiseStack+0x64>)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3b14      	subs	r3, #20
 800ab3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	3b04      	subs	r3, #4
 800ab4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f06f 0202 	mvn.w	r2, #2
 800ab52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	3b20      	subs	r3, #32
 800ab58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	0800ab6d 	.word	0x0800ab6d

0800ab6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab76:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <prvTaskExitError+0x54>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7e:	d00a      	beq.n	800ab96 <prvTaskExitError+0x2a>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	60fb      	str	r3, [r7, #12]
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <prvTaskExitError+0x28>
	__asm volatile
 800ab96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	60bb      	str	r3, [r7, #8]
}
 800aba8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800abaa:	bf00      	nop
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0fc      	beq.n	800abac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800abb2:	bf00      	nop
 800abb4:	bf00      	nop
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	2000013c 	.word	0x2000013c
	...

0800abd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800abd0:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <pxCurrentTCBConst2>)
 800abd2:	6819      	ldr	r1, [r3, #0]
 800abd4:	6808      	ldr	r0, [r1, #0]
 800abd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abda:	f380 8809 	msr	PSP, r0
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f04f 0000 	mov.w	r0, #0
 800abe6:	f380 8811 	msr	BASEPRI, r0
 800abea:	4770      	bx	lr
 800abec:	f3af 8000 	nop.w

0800abf0 <pxCurrentTCBConst2>:
 800abf0:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop

0800abf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abf8:	4808      	ldr	r0, [pc, #32]	; (800ac1c <prvPortStartFirstTask+0x24>)
 800abfa:	6800      	ldr	r0, [r0, #0]
 800abfc:	6800      	ldr	r0, [r0, #0]
 800abfe:	f380 8808 	msr	MSP, r0
 800ac02:	f04f 0000 	mov.w	r0, #0
 800ac06:	f380 8814 	msr	CONTROL, r0
 800ac0a:	b662      	cpsie	i
 800ac0c:	b661      	cpsie	f
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	df00      	svc	0
 800ac18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac1a:	bf00      	nop
 800ac1c:	e000ed08 	.word	0xe000ed08

0800ac20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac26:	4b46      	ldr	r3, [pc, #280]	; (800ad40 <xPortStartScheduler+0x120>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a46      	ldr	r2, [pc, #280]	; (800ad44 <xPortStartScheduler+0x124>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d10a      	bne.n	800ac46 <xPortStartScheduler+0x26>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	613b      	str	r3, [r7, #16]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac46:	4b3e      	ldr	r3, [pc, #248]	; (800ad40 <xPortStartScheduler+0x120>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a3f      	ldr	r2, [pc, #252]	; (800ad48 <xPortStartScheduler+0x128>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d10a      	bne.n	800ac66 <xPortStartScheduler+0x46>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	60fb      	str	r3, [r7, #12]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac66:	4b39      	ldr	r3, [pc, #228]	; (800ad4c <xPortStartScheduler+0x12c>)
 800ac68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	22ff      	movs	r2, #255	; 0xff
 800ac76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	4b31      	ldr	r3, [pc, #196]	; (800ad50 <xPortStartScheduler+0x130>)
 800ac8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac8e:	4b31      	ldr	r3, [pc, #196]	; (800ad54 <xPortStartScheduler+0x134>)
 800ac90:	2207      	movs	r2, #7
 800ac92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac94:	e009      	b.n	800acaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac96:	4b2f      	ldr	r3, [pc, #188]	; (800ad54 <xPortStartScheduler+0x134>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	4a2d      	ldr	r2, [pc, #180]	; (800ad54 <xPortStartScheduler+0x134>)
 800ac9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aca0:	78fb      	ldrb	r3, [r7, #3]
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acaa:	78fb      	ldrb	r3, [r7, #3]
 800acac:	b2db      	uxtb	r3, r3
 800acae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb2:	2b80      	cmp	r3, #128	; 0x80
 800acb4:	d0ef      	beq.n	800ac96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800acb6:	4b27      	ldr	r3, [pc, #156]	; (800ad54 <xPortStartScheduler+0x134>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f1c3 0307 	rsb	r3, r3, #7
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d00a      	beq.n	800acd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800acc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	60bb      	str	r3, [r7, #8]
}
 800acd4:	bf00      	nop
 800acd6:	e7fe      	b.n	800acd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800acd8:	4b1e      	ldr	r3, [pc, #120]	; (800ad54 <xPortStartScheduler+0x134>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	4a1d      	ldr	r2, [pc, #116]	; (800ad54 <xPortStartScheduler+0x134>)
 800ace0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ace2:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <xPortStartScheduler+0x134>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acea:	4a1a      	ldr	r2, [pc, #104]	; (800ad54 <xPortStartScheduler+0x134>)
 800acec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800acf6:	4b18      	ldr	r3, [pc, #96]	; (800ad58 <xPortStartScheduler+0x138>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a17      	ldr	r2, [pc, #92]	; (800ad58 <xPortStartScheduler+0x138>)
 800acfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad02:	4b15      	ldr	r3, [pc, #84]	; (800ad58 <xPortStartScheduler+0x138>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a14      	ldr	r2, [pc, #80]	; (800ad58 <xPortStartScheduler+0x138>)
 800ad08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad0e:	f000 f8dd 	bl	800aecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad12:	4b12      	ldr	r3, [pc, #72]	; (800ad5c <xPortStartScheduler+0x13c>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad18:	f000 f8fc 	bl	800af14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad1c:	4b10      	ldr	r3, [pc, #64]	; (800ad60 <xPortStartScheduler+0x140>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a0f      	ldr	r2, [pc, #60]	; (800ad60 <xPortStartScheduler+0x140>)
 800ad22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad28:	f7ff ff66 	bl	800abf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad2c:	f7ff f850 	bl	8009dd0 <vTaskSwitchContext>
	prvTaskExitError();
 800ad30:	f7ff ff1c 	bl	800ab6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	e000ed00 	.word	0xe000ed00
 800ad44:	410fc271 	.word	0x410fc271
 800ad48:	410fc270 	.word	0x410fc270
 800ad4c:	e000e400 	.word	0xe000e400
 800ad50:	20001050 	.word	0x20001050
 800ad54:	20001054 	.word	0x20001054
 800ad58:	e000ed20 	.word	0xe000ed20
 800ad5c:	2000013c 	.word	0x2000013c
 800ad60:	e000ef34 	.word	0xe000ef34

0800ad64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	607b      	str	r3, [r7, #4]
}
 800ad7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad7e:	4b0f      	ldr	r3, [pc, #60]	; (800adbc <vPortEnterCritical+0x58>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3301      	adds	r3, #1
 800ad84:	4a0d      	ldr	r2, [pc, #52]	; (800adbc <vPortEnterCritical+0x58>)
 800ad86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad88:	4b0c      	ldr	r3, [pc, #48]	; (800adbc <vPortEnterCritical+0x58>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d10f      	bne.n	800adb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad90:	4b0b      	ldr	r3, [pc, #44]	; (800adc0 <vPortEnterCritical+0x5c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	603b      	str	r3, [r7, #0]
}
 800adac:	bf00      	nop
 800adae:	e7fe      	b.n	800adae <vPortEnterCritical+0x4a>
	}
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	2000013c 	.word	0x2000013c
 800adc0:	e000ed04 	.word	0xe000ed04

0800adc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800adca:	4b12      	ldr	r3, [pc, #72]	; (800ae14 <vPortExitCritical+0x50>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <vPortExitCritical+0x24>
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	607b      	str	r3, [r7, #4]
}
 800ade4:	bf00      	nop
 800ade6:	e7fe      	b.n	800ade6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ade8:	4b0a      	ldr	r3, [pc, #40]	; (800ae14 <vPortExitCritical+0x50>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3b01      	subs	r3, #1
 800adee:	4a09      	ldr	r2, [pc, #36]	; (800ae14 <vPortExitCritical+0x50>)
 800adf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800adf2:	4b08      	ldr	r3, [pc, #32]	; (800ae14 <vPortExitCritical+0x50>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d105      	bne.n	800ae06 <vPortExitCritical+0x42>
 800adfa:	2300      	movs	r3, #0
 800adfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	f383 8811 	msr	BASEPRI, r3
}
 800ae04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae06:	bf00      	nop
 800ae08:	370c      	adds	r7, #12
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	2000013c 	.word	0x2000013c
	...

0800ae20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae20:	f3ef 8009 	mrs	r0, PSP
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	4b15      	ldr	r3, [pc, #84]	; (800ae80 <pxCurrentTCBConst>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	f01e 0f10 	tst.w	lr, #16
 800ae30:	bf08      	it	eq
 800ae32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3a:	6010      	str	r0, [r2, #0]
 800ae3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae44:	f380 8811 	msr	BASEPRI, r0
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f7fe ffbe 	bl	8009dd0 <vTaskSwitchContext>
 800ae54:	f04f 0000 	mov.w	r0, #0
 800ae58:	f380 8811 	msr	BASEPRI, r0
 800ae5c:	bc09      	pop	{r0, r3}
 800ae5e:	6819      	ldr	r1, [r3, #0]
 800ae60:	6808      	ldr	r0, [r1, #0]
 800ae62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae66:	f01e 0f10 	tst.w	lr, #16
 800ae6a:	bf08      	it	eq
 800ae6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae70:	f380 8809 	msr	PSP, r0
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	f3af 8000 	nop.w

0800ae80 <pxCurrentTCBConst>:
 800ae80:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae84:	bf00      	nop
 800ae86:	bf00      	nop

0800ae88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	607b      	str	r3, [r7, #4]
}
 800aea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aea2:	f7fe fedb 	bl	8009c5c <xTaskIncrementTick>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aeac:	4b06      	ldr	r3, [pc, #24]	; (800aec8 <xPortSysTickHandler+0x40>)
 800aeae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	f383 8811 	msr	BASEPRI, r3
}
 800aebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aec0:	bf00      	nop
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	e000ed04 	.word	0xe000ed04

0800aecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aed0:	4b0b      	ldr	r3, [pc, #44]	; (800af00 <vPortSetupTimerInterrupt+0x34>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aed6:	4b0b      	ldr	r3, [pc, #44]	; (800af04 <vPortSetupTimerInterrupt+0x38>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aedc:	4b0a      	ldr	r3, [pc, #40]	; (800af08 <vPortSetupTimerInterrupt+0x3c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a0a      	ldr	r2, [pc, #40]	; (800af0c <vPortSetupTimerInterrupt+0x40>)
 800aee2:	fba2 2303 	umull	r2, r3, r2, r3
 800aee6:	099b      	lsrs	r3, r3, #6
 800aee8:	4a09      	ldr	r2, [pc, #36]	; (800af10 <vPortSetupTimerInterrupt+0x44>)
 800aeea:	3b01      	subs	r3, #1
 800aeec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aeee:	4b04      	ldr	r3, [pc, #16]	; (800af00 <vPortSetupTimerInterrupt+0x34>)
 800aef0:	2207      	movs	r2, #7
 800aef2:	601a      	str	r2, [r3, #0]
}
 800aef4:	bf00      	nop
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	e000e010 	.word	0xe000e010
 800af04:	e000e018 	.word	0xe000e018
 800af08:	20000130 	.word	0x20000130
 800af0c:	10624dd3 	.word	0x10624dd3
 800af10:	e000e014 	.word	0xe000e014

0800af14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af24 <vPortEnableVFP+0x10>
 800af18:	6801      	ldr	r1, [r0, #0]
 800af1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af1e:	6001      	str	r1, [r0, #0]
 800af20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af22:	bf00      	nop
 800af24:	e000ed88 	.word	0xe000ed88

0800af28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af2e:	f3ef 8305 	mrs	r3, IPSR
 800af32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b0f      	cmp	r3, #15
 800af38:	d914      	bls.n	800af64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af3a:	4a17      	ldr	r2, [pc, #92]	; (800af98 <vPortValidateInterruptPriority+0x70>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	4413      	add	r3, r2
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af44:	4b15      	ldr	r3, [pc, #84]	; (800af9c <vPortValidateInterruptPriority+0x74>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	7afa      	ldrb	r2, [r7, #11]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d20a      	bcs.n	800af64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	607b      	str	r3, [r7, #4]
}
 800af60:	bf00      	nop
 800af62:	e7fe      	b.n	800af62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af64:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <vPortValidateInterruptPriority+0x78>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af6c:	4b0d      	ldr	r3, [pc, #52]	; (800afa4 <vPortValidateInterruptPriority+0x7c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	429a      	cmp	r2, r3
 800af72:	d90a      	bls.n	800af8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	603b      	str	r3, [r7, #0]
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <vPortValidateInterruptPriority+0x60>
	}
 800af8a:	bf00      	nop
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	e000e3f0 	.word	0xe000e3f0
 800af9c:	20001050 	.word	0x20001050
 800afa0:	e000ed0c 	.word	0xe000ed0c
 800afa4:	20001054 	.word	0x20001054

0800afa8 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b088      	sub	sp, #32
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800afb4:	f7fe fd96 	bl	8009ae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800afb8:	4b3e      	ldr	r3, [pc, #248]	; (800b0b4 <pvPortMalloc+0x10c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d104      	bne.n	800afca <pvPortMalloc+0x22>
		{
			prvHeapInit();
 800afc0:	f000 f8ba 	bl	800b138 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800afc4:	4b3b      	ldr	r3, [pc, #236]	; (800b0b4 <pvPortMalloc+0x10c>)
 800afc6:	2201      	movs	r2, #1
 800afc8:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00e      	beq.n	800afee <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 800afd0:	2308      	movs	r3, #8
 800afd2:	461a      	mov	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4413      	add	r3, r2
 800afd8:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f003 0307 	and.w	r3, r3, #7
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d004      	beq.n	800afee <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f023 0307 	bic.w	r3, r3, #7
 800afea:	3308      	adds	r3, #8
 800afec:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d057      	beq.n	800b0a4 <pvPortMalloc+0xfc>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f247 5227 	movw	r2, #29991	; 0x7527
 800affa:	4293      	cmp	r3, r2
 800affc:	d852      	bhi.n	800b0a4 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800affe:	4b2e      	ldr	r3, [pc, #184]	; (800b0b8 <pvPortMalloc+0x110>)
 800b000:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800b002:	4b2d      	ldr	r3, [pc, #180]	; (800b0b8 <pvPortMalloc+0x110>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b008:	e004      	b.n	800b014 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d903      	bls.n	800b026 <pvPortMalloc+0x7e>
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1f1      	bne.n	800b00a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	4a24      	ldr	r2, [pc, #144]	; (800b0bc <pvPortMalloc+0x114>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d03a      	beq.n	800b0a4 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2208      	movs	r2, #8
 800b034:	4413      	add	r3, r2
 800b036:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	2208      	movs	r2, #8
 800b04a:	0052      	lsls	r2, r2, #1
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d922      	bls.n	800b096 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b050:	69fa      	ldr	r2, [r7, #28]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4413      	add	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	1ad2      	subs	r2, r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	60bb      	str	r3, [r7, #8]
 800b070:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <pvPortMalloc+0x110>)
 800b072:	613b      	str	r3, [r7, #16]
 800b074:	e002      	b.n	800b07c <pvPortMalloc+0xd4>
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	613b      	str	r3, [r7, #16]
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	429a      	cmp	r2, r3
 800b086:	d8f6      	bhi.n	800b076 <pvPortMalloc+0xce>
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b096:	4b0a      	ldr	r3, [pc, #40]	; (800b0c0 <pvPortMalloc+0x118>)
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	4a07      	ldr	r2, [pc, #28]	; (800b0c0 <pvPortMalloc+0x118>)
 800b0a2:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0a4:	f7fe fd2c 	bl	8009b00 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800b0a8:	697b      	ldr	r3, [r7, #20]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3720      	adds	r7, #32
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20008598 	.word	0x20008598
 800b0b8:	20008588 	.word	0x20008588
 800b0bc:	20008590 	.word	0x20008590
 800b0c0:	20000140 	.word	0x20000140

0800b0c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d027      	beq.n	800b126 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800b0d6:	2308      	movs	r3, #8
 800b0d8:	425b      	negs	r3, r3
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	4413      	add	r3, r2
 800b0de:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800b0e4:	f7fe fcfe 	bl	8009ae4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	60bb      	str	r3, [r7, #8]
 800b0ee:	4b10      	ldr	r3, [pc, #64]	; (800b130 <vPortFree+0x6c>)
 800b0f0:	617b      	str	r3, [r7, #20]
 800b0f2:	e002      	b.n	800b0fa <vPortFree+0x36>
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	429a      	cmp	r2, r3
 800b104:	d8f6      	bhi.n	800b0f4 <vPortFree+0x30>
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	4b06      	ldr	r3, [pc, #24]	; (800b134 <vPortFree+0x70>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4413      	add	r3, r2
 800b11e:	4a05      	ldr	r2, [pc, #20]	; (800b134 <vPortFree+0x70>)
 800b120:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800b122:	f7fe fced 	bl	8009b00 <xTaskResumeAll>
	}
}
 800b126:	bf00      	nop
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	20008588 	.word	0x20008588
 800b134:	20000140 	.word	0x20000140

0800b138 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800b13e:	4b10      	ldr	r3, [pc, #64]	; (800b180 <prvHeapInit+0x48>)
 800b140:	f023 0307 	bic.w	r3, r3, #7
 800b144:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b146:	4a0f      	ldr	r2, [pc, #60]	; (800b184 <prvHeapInit+0x4c>)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b14c:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <prvHeapInit+0x4c>)
 800b14e:	2200      	movs	r2, #0
 800b150:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800b152:	4b0d      	ldr	r3, [pc, #52]	; (800b188 <prvHeapInit+0x50>)
 800b154:	f247 5228 	movw	r2, #29992	; 0x7528
 800b158:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800b15a:	4b0b      	ldr	r3, [pc, #44]	; (800b188 <prvHeapInit+0x50>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	f247 5228 	movw	r2, #29992	; 0x7528
 800b16a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	4a06      	ldr	r2, [pc, #24]	; (800b188 <prvHeapInit+0x50>)
 800b170:	601a      	str	r2, [r3, #0]
}
 800b172:	bf00      	nop
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	20001060 	.word	0x20001060
 800b184:	20008588 	.word	0x20008588
 800b188:	20008590 	.word	0x20008590

0800b18c <__errno>:
 800b18c:	4b01      	ldr	r3, [pc, #4]	; (800b194 <__errno+0x8>)
 800b18e:	6818      	ldr	r0, [r3, #0]
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	20000144 	.word	0x20000144

0800b198 <__libc_init_array>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	4d0d      	ldr	r5, [pc, #52]	; (800b1d0 <__libc_init_array+0x38>)
 800b19c:	4c0d      	ldr	r4, [pc, #52]	; (800b1d4 <__libc_init_array+0x3c>)
 800b19e:	1b64      	subs	r4, r4, r5
 800b1a0:	10a4      	asrs	r4, r4, #2
 800b1a2:	2600      	movs	r6, #0
 800b1a4:	42a6      	cmp	r6, r4
 800b1a6:	d109      	bne.n	800b1bc <__libc_init_array+0x24>
 800b1a8:	4d0b      	ldr	r5, [pc, #44]	; (800b1d8 <__libc_init_array+0x40>)
 800b1aa:	4c0c      	ldr	r4, [pc, #48]	; (800b1dc <__libc_init_array+0x44>)
 800b1ac:	f002 fcf2 	bl	800db94 <_init>
 800b1b0:	1b64      	subs	r4, r4, r5
 800b1b2:	10a4      	asrs	r4, r4, #2
 800b1b4:	2600      	movs	r6, #0
 800b1b6:	42a6      	cmp	r6, r4
 800b1b8:	d105      	bne.n	800b1c6 <__libc_init_array+0x2e>
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c0:	4798      	blx	r3
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	e7ee      	b.n	800b1a4 <__libc_init_array+0xc>
 800b1c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ca:	4798      	blx	r3
 800b1cc:	3601      	adds	r6, #1
 800b1ce:	e7f2      	b.n	800b1b6 <__libc_init_array+0x1e>
 800b1d0:	0800e094 	.word	0x0800e094
 800b1d4:	0800e094 	.word	0x0800e094
 800b1d8:	0800e094 	.word	0x0800e094
 800b1dc:	0800e098 	.word	0x0800e098

0800b1e0 <malloc>:
 800b1e0:	4b02      	ldr	r3, [pc, #8]	; (800b1ec <malloc+0xc>)
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	6818      	ldr	r0, [r3, #0]
 800b1e6:	f000 b879 	b.w	800b2dc <_malloc_r>
 800b1ea:	bf00      	nop
 800b1ec:	20000144 	.word	0x20000144

0800b1f0 <memcpy>:
 800b1f0:	440a      	add	r2, r1
 800b1f2:	4291      	cmp	r1, r2
 800b1f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1f8:	d100      	bne.n	800b1fc <memcpy+0xc>
 800b1fa:	4770      	bx	lr
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b202:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b206:	4291      	cmp	r1, r2
 800b208:	d1f9      	bne.n	800b1fe <memcpy+0xe>
 800b20a:	bd10      	pop	{r4, pc}

0800b20c <memset>:
 800b20c:	4402      	add	r2, r0
 800b20e:	4603      	mov	r3, r0
 800b210:	4293      	cmp	r3, r2
 800b212:	d100      	bne.n	800b216 <memset+0xa>
 800b214:	4770      	bx	lr
 800b216:	f803 1b01 	strb.w	r1, [r3], #1
 800b21a:	e7f9      	b.n	800b210 <memset+0x4>

0800b21c <_calloc_r>:
 800b21c:	b513      	push	{r0, r1, r4, lr}
 800b21e:	434a      	muls	r2, r1
 800b220:	4611      	mov	r1, r2
 800b222:	9201      	str	r2, [sp, #4]
 800b224:	f000 f85a 	bl	800b2dc <_malloc_r>
 800b228:	4604      	mov	r4, r0
 800b22a:	b118      	cbz	r0, 800b234 <_calloc_r+0x18>
 800b22c:	9a01      	ldr	r2, [sp, #4]
 800b22e:	2100      	movs	r1, #0
 800b230:	f7ff ffec 	bl	800b20c <memset>
 800b234:	4620      	mov	r0, r4
 800b236:	b002      	add	sp, #8
 800b238:	bd10      	pop	{r4, pc}
	...

0800b23c <_free_r>:
 800b23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b23e:	2900      	cmp	r1, #0
 800b240:	d048      	beq.n	800b2d4 <_free_r+0x98>
 800b242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b246:	9001      	str	r0, [sp, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f1a1 0404 	sub.w	r4, r1, #4
 800b24e:	bfb8      	it	lt
 800b250:	18e4      	addlt	r4, r4, r3
 800b252:	f001 fb95 	bl	800c980 <__malloc_lock>
 800b256:	4a20      	ldr	r2, [pc, #128]	; (800b2d8 <_free_r+0x9c>)
 800b258:	9801      	ldr	r0, [sp, #4]
 800b25a:	6813      	ldr	r3, [r2, #0]
 800b25c:	4615      	mov	r5, r2
 800b25e:	b933      	cbnz	r3, 800b26e <_free_r+0x32>
 800b260:	6063      	str	r3, [r4, #4]
 800b262:	6014      	str	r4, [r2, #0]
 800b264:	b003      	add	sp, #12
 800b266:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b26a:	f001 bb8f 	b.w	800c98c <__malloc_unlock>
 800b26e:	42a3      	cmp	r3, r4
 800b270:	d90b      	bls.n	800b28a <_free_r+0x4e>
 800b272:	6821      	ldr	r1, [r4, #0]
 800b274:	1862      	adds	r2, r4, r1
 800b276:	4293      	cmp	r3, r2
 800b278:	bf04      	itt	eq
 800b27a:	681a      	ldreq	r2, [r3, #0]
 800b27c:	685b      	ldreq	r3, [r3, #4]
 800b27e:	6063      	str	r3, [r4, #4]
 800b280:	bf04      	itt	eq
 800b282:	1852      	addeq	r2, r2, r1
 800b284:	6022      	streq	r2, [r4, #0]
 800b286:	602c      	str	r4, [r5, #0]
 800b288:	e7ec      	b.n	800b264 <_free_r+0x28>
 800b28a:	461a      	mov	r2, r3
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	b10b      	cbz	r3, 800b294 <_free_r+0x58>
 800b290:	42a3      	cmp	r3, r4
 800b292:	d9fa      	bls.n	800b28a <_free_r+0x4e>
 800b294:	6811      	ldr	r1, [r2, #0]
 800b296:	1855      	adds	r5, r2, r1
 800b298:	42a5      	cmp	r5, r4
 800b29a:	d10b      	bne.n	800b2b4 <_free_r+0x78>
 800b29c:	6824      	ldr	r4, [r4, #0]
 800b29e:	4421      	add	r1, r4
 800b2a0:	1854      	adds	r4, r2, r1
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	6011      	str	r1, [r2, #0]
 800b2a6:	d1dd      	bne.n	800b264 <_free_r+0x28>
 800b2a8:	681c      	ldr	r4, [r3, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	6053      	str	r3, [r2, #4]
 800b2ae:	4421      	add	r1, r4
 800b2b0:	6011      	str	r1, [r2, #0]
 800b2b2:	e7d7      	b.n	800b264 <_free_r+0x28>
 800b2b4:	d902      	bls.n	800b2bc <_free_r+0x80>
 800b2b6:	230c      	movs	r3, #12
 800b2b8:	6003      	str	r3, [r0, #0]
 800b2ba:	e7d3      	b.n	800b264 <_free_r+0x28>
 800b2bc:	6825      	ldr	r5, [r4, #0]
 800b2be:	1961      	adds	r1, r4, r5
 800b2c0:	428b      	cmp	r3, r1
 800b2c2:	bf04      	itt	eq
 800b2c4:	6819      	ldreq	r1, [r3, #0]
 800b2c6:	685b      	ldreq	r3, [r3, #4]
 800b2c8:	6063      	str	r3, [r4, #4]
 800b2ca:	bf04      	itt	eq
 800b2cc:	1949      	addeq	r1, r1, r5
 800b2ce:	6021      	streq	r1, [r4, #0]
 800b2d0:	6054      	str	r4, [r2, #4]
 800b2d2:	e7c7      	b.n	800b264 <_free_r+0x28>
 800b2d4:	b003      	add	sp, #12
 800b2d6:	bd30      	pop	{r4, r5, pc}
 800b2d8:	2000859c 	.word	0x2000859c

0800b2dc <_malloc_r>:
 800b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2de:	1ccd      	adds	r5, r1, #3
 800b2e0:	f025 0503 	bic.w	r5, r5, #3
 800b2e4:	3508      	adds	r5, #8
 800b2e6:	2d0c      	cmp	r5, #12
 800b2e8:	bf38      	it	cc
 800b2ea:	250c      	movcc	r5, #12
 800b2ec:	2d00      	cmp	r5, #0
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	db01      	blt.n	800b2f6 <_malloc_r+0x1a>
 800b2f2:	42a9      	cmp	r1, r5
 800b2f4:	d903      	bls.n	800b2fe <_malloc_r+0x22>
 800b2f6:	230c      	movs	r3, #12
 800b2f8:	6033      	str	r3, [r6, #0]
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2fe:	f001 fb3f 	bl	800c980 <__malloc_lock>
 800b302:	4921      	ldr	r1, [pc, #132]	; (800b388 <_malloc_r+0xac>)
 800b304:	680a      	ldr	r2, [r1, #0]
 800b306:	4614      	mov	r4, r2
 800b308:	b99c      	cbnz	r4, 800b332 <_malloc_r+0x56>
 800b30a:	4f20      	ldr	r7, [pc, #128]	; (800b38c <_malloc_r+0xb0>)
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	b923      	cbnz	r3, 800b31a <_malloc_r+0x3e>
 800b310:	4621      	mov	r1, r4
 800b312:	4630      	mov	r0, r6
 800b314:	f000 fca6 	bl	800bc64 <_sbrk_r>
 800b318:	6038      	str	r0, [r7, #0]
 800b31a:	4629      	mov	r1, r5
 800b31c:	4630      	mov	r0, r6
 800b31e:	f000 fca1 	bl	800bc64 <_sbrk_r>
 800b322:	1c43      	adds	r3, r0, #1
 800b324:	d123      	bne.n	800b36e <_malloc_r+0x92>
 800b326:	230c      	movs	r3, #12
 800b328:	6033      	str	r3, [r6, #0]
 800b32a:	4630      	mov	r0, r6
 800b32c:	f001 fb2e 	bl	800c98c <__malloc_unlock>
 800b330:	e7e3      	b.n	800b2fa <_malloc_r+0x1e>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	1b5b      	subs	r3, r3, r5
 800b336:	d417      	bmi.n	800b368 <_malloc_r+0x8c>
 800b338:	2b0b      	cmp	r3, #11
 800b33a:	d903      	bls.n	800b344 <_malloc_r+0x68>
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	441c      	add	r4, r3
 800b340:	6025      	str	r5, [r4, #0]
 800b342:	e004      	b.n	800b34e <_malloc_r+0x72>
 800b344:	6863      	ldr	r3, [r4, #4]
 800b346:	42a2      	cmp	r2, r4
 800b348:	bf0c      	ite	eq
 800b34a:	600b      	streq	r3, [r1, #0]
 800b34c:	6053      	strne	r3, [r2, #4]
 800b34e:	4630      	mov	r0, r6
 800b350:	f001 fb1c 	bl	800c98c <__malloc_unlock>
 800b354:	f104 000b 	add.w	r0, r4, #11
 800b358:	1d23      	adds	r3, r4, #4
 800b35a:	f020 0007 	bic.w	r0, r0, #7
 800b35e:	1ac2      	subs	r2, r0, r3
 800b360:	d0cc      	beq.n	800b2fc <_malloc_r+0x20>
 800b362:	1a1b      	subs	r3, r3, r0
 800b364:	50a3      	str	r3, [r4, r2]
 800b366:	e7c9      	b.n	800b2fc <_malloc_r+0x20>
 800b368:	4622      	mov	r2, r4
 800b36a:	6864      	ldr	r4, [r4, #4]
 800b36c:	e7cc      	b.n	800b308 <_malloc_r+0x2c>
 800b36e:	1cc4      	adds	r4, r0, #3
 800b370:	f024 0403 	bic.w	r4, r4, #3
 800b374:	42a0      	cmp	r0, r4
 800b376:	d0e3      	beq.n	800b340 <_malloc_r+0x64>
 800b378:	1a21      	subs	r1, r4, r0
 800b37a:	4630      	mov	r0, r6
 800b37c:	f000 fc72 	bl	800bc64 <_sbrk_r>
 800b380:	3001      	adds	r0, #1
 800b382:	d1dd      	bne.n	800b340 <_malloc_r+0x64>
 800b384:	e7cf      	b.n	800b326 <_malloc_r+0x4a>
 800b386:	bf00      	nop
 800b388:	2000859c 	.word	0x2000859c
 800b38c:	200085a0 	.word	0x200085a0

0800b390 <__cvt>:
 800b390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b394:	ec55 4b10 	vmov	r4, r5, d0
 800b398:	2d00      	cmp	r5, #0
 800b39a:	460e      	mov	r6, r1
 800b39c:	4619      	mov	r1, r3
 800b39e:	462b      	mov	r3, r5
 800b3a0:	bfbb      	ittet	lt
 800b3a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b3a6:	461d      	movlt	r5, r3
 800b3a8:	2300      	movge	r3, #0
 800b3aa:	232d      	movlt	r3, #45	; 0x2d
 800b3ac:	700b      	strb	r3, [r1, #0]
 800b3ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b3b4:	4691      	mov	r9, r2
 800b3b6:	f023 0820 	bic.w	r8, r3, #32
 800b3ba:	bfbc      	itt	lt
 800b3bc:	4622      	movlt	r2, r4
 800b3be:	4614      	movlt	r4, r2
 800b3c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3c4:	d005      	beq.n	800b3d2 <__cvt+0x42>
 800b3c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b3ca:	d100      	bne.n	800b3ce <__cvt+0x3e>
 800b3cc:	3601      	adds	r6, #1
 800b3ce:	2102      	movs	r1, #2
 800b3d0:	e000      	b.n	800b3d4 <__cvt+0x44>
 800b3d2:	2103      	movs	r1, #3
 800b3d4:	ab03      	add	r3, sp, #12
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	ab02      	add	r3, sp, #8
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	ec45 4b10 	vmov	d0, r4, r5
 800b3e0:	4653      	mov	r3, sl
 800b3e2:	4632      	mov	r2, r6
 800b3e4:	f000 fcdc 	bl	800bda0 <_dtoa_r>
 800b3e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	d102      	bne.n	800b3f6 <__cvt+0x66>
 800b3f0:	f019 0f01 	tst.w	r9, #1
 800b3f4:	d022      	beq.n	800b43c <__cvt+0xac>
 800b3f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3fa:	eb07 0906 	add.w	r9, r7, r6
 800b3fe:	d110      	bne.n	800b422 <__cvt+0x92>
 800b400:	783b      	ldrb	r3, [r7, #0]
 800b402:	2b30      	cmp	r3, #48	; 0x30
 800b404:	d10a      	bne.n	800b41c <__cvt+0x8c>
 800b406:	2200      	movs	r2, #0
 800b408:	2300      	movs	r3, #0
 800b40a:	4620      	mov	r0, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	f7f5 fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b412:	b918      	cbnz	r0, 800b41c <__cvt+0x8c>
 800b414:	f1c6 0601 	rsb	r6, r6, #1
 800b418:	f8ca 6000 	str.w	r6, [sl]
 800b41c:	f8da 3000 	ldr.w	r3, [sl]
 800b420:	4499      	add	r9, r3
 800b422:	2200      	movs	r2, #0
 800b424:	2300      	movs	r3, #0
 800b426:	4620      	mov	r0, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f5 fb4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b42e:	b108      	cbz	r0, 800b434 <__cvt+0xa4>
 800b430:	f8cd 900c 	str.w	r9, [sp, #12]
 800b434:	2230      	movs	r2, #48	; 0x30
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	454b      	cmp	r3, r9
 800b43a:	d307      	bcc.n	800b44c <__cvt+0xbc>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b440:	1bdb      	subs	r3, r3, r7
 800b442:	4638      	mov	r0, r7
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	b004      	add	sp, #16
 800b448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b44c:	1c59      	adds	r1, r3, #1
 800b44e:	9103      	str	r1, [sp, #12]
 800b450:	701a      	strb	r2, [r3, #0]
 800b452:	e7f0      	b.n	800b436 <__cvt+0xa6>

0800b454 <__exponent>:
 800b454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b456:	4603      	mov	r3, r0
 800b458:	2900      	cmp	r1, #0
 800b45a:	bfb8      	it	lt
 800b45c:	4249      	neglt	r1, r1
 800b45e:	f803 2b02 	strb.w	r2, [r3], #2
 800b462:	bfb4      	ite	lt
 800b464:	222d      	movlt	r2, #45	; 0x2d
 800b466:	222b      	movge	r2, #43	; 0x2b
 800b468:	2909      	cmp	r1, #9
 800b46a:	7042      	strb	r2, [r0, #1]
 800b46c:	dd2a      	ble.n	800b4c4 <__exponent+0x70>
 800b46e:	f10d 0407 	add.w	r4, sp, #7
 800b472:	46a4      	mov	ip, r4
 800b474:	270a      	movs	r7, #10
 800b476:	46a6      	mov	lr, r4
 800b478:	460a      	mov	r2, r1
 800b47a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b47e:	fb07 1516 	mls	r5, r7, r6, r1
 800b482:	3530      	adds	r5, #48	; 0x30
 800b484:	2a63      	cmp	r2, #99	; 0x63
 800b486:	f104 34ff 	add.w	r4, r4, #4294967295
 800b48a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b48e:	4631      	mov	r1, r6
 800b490:	dcf1      	bgt.n	800b476 <__exponent+0x22>
 800b492:	3130      	adds	r1, #48	; 0x30
 800b494:	f1ae 0502 	sub.w	r5, lr, #2
 800b498:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b49c:	1c44      	adds	r4, r0, #1
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4561      	cmp	r1, ip
 800b4a2:	d30a      	bcc.n	800b4ba <__exponent+0x66>
 800b4a4:	f10d 0209 	add.w	r2, sp, #9
 800b4a8:	eba2 020e 	sub.w	r2, r2, lr
 800b4ac:	4565      	cmp	r5, ip
 800b4ae:	bf88      	it	hi
 800b4b0:	2200      	movhi	r2, #0
 800b4b2:	4413      	add	r3, r2
 800b4b4:	1a18      	subs	r0, r3, r0
 800b4b6:	b003      	add	sp, #12
 800b4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4be:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b4c2:	e7ed      	b.n	800b4a0 <__exponent+0x4c>
 800b4c4:	2330      	movs	r3, #48	; 0x30
 800b4c6:	3130      	adds	r1, #48	; 0x30
 800b4c8:	7083      	strb	r3, [r0, #2]
 800b4ca:	70c1      	strb	r1, [r0, #3]
 800b4cc:	1d03      	adds	r3, r0, #4
 800b4ce:	e7f1      	b.n	800b4b4 <__exponent+0x60>

0800b4d0 <_printf_float>:
 800b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	ed2d 8b02 	vpush	{d8}
 800b4d8:	b08d      	sub	sp, #52	; 0x34
 800b4da:	460c      	mov	r4, r1
 800b4dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b4e0:	4616      	mov	r6, r2
 800b4e2:	461f      	mov	r7, r3
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	f001 fa47 	bl	800c978 <_localeconv_r>
 800b4ea:	f8d0 a000 	ldr.w	sl, [r0]
 800b4ee:	4650      	mov	r0, sl
 800b4f0:	f7f4 fe6e 	bl	80001d0 <strlen>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	9305      	str	r3, [sp, #20]
 800b4fc:	f8d8 3000 	ldr.w	r3, [r8]
 800b500:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b504:	3307      	adds	r3, #7
 800b506:	f023 0307 	bic.w	r3, r3, #7
 800b50a:	f103 0208 	add.w	r2, r3, #8
 800b50e:	f8c8 2000 	str.w	r2, [r8]
 800b512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b516:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b51a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b51e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b522:	9307      	str	r3, [sp, #28]
 800b524:	f8cd 8018 	str.w	r8, [sp, #24]
 800b528:	ee08 0a10 	vmov	s16, r0
 800b52c:	4b9f      	ldr	r3, [pc, #636]	; (800b7ac <_printf_float+0x2dc>)
 800b52e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b532:	f04f 32ff 	mov.w	r2, #4294967295
 800b536:	f7f5 faf9 	bl	8000b2c <__aeabi_dcmpun>
 800b53a:	bb88      	cbnz	r0, 800b5a0 <_printf_float+0xd0>
 800b53c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b540:	4b9a      	ldr	r3, [pc, #616]	; (800b7ac <_printf_float+0x2dc>)
 800b542:	f04f 32ff 	mov.w	r2, #4294967295
 800b546:	f7f5 fad3 	bl	8000af0 <__aeabi_dcmple>
 800b54a:	bb48      	cbnz	r0, 800b5a0 <_printf_float+0xd0>
 800b54c:	2200      	movs	r2, #0
 800b54e:	2300      	movs	r3, #0
 800b550:	4640      	mov	r0, r8
 800b552:	4649      	mov	r1, r9
 800b554:	f7f5 fac2 	bl	8000adc <__aeabi_dcmplt>
 800b558:	b110      	cbz	r0, 800b560 <_printf_float+0x90>
 800b55a:	232d      	movs	r3, #45	; 0x2d
 800b55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b560:	4b93      	ldr	r3, [pc, #588]	; (800b7b0 <_printf_float+0x2e0>)
 800b562:	4894      	ldr	r0, [pc, #592]	; (800b7b4 <_printf_float+0x2e4>)
 800b564:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b568:	bf94      	ite	ls
 800b56a:	4698      	movls	r8, r3
 800b56c:	4680      	movhi	r8, r0
 800b56e:	2303      	movs	r3, #3
 800b570:	6123      	str	r3, [r4, #16]
 800b572:	9b05      	ldr	r3, [sp, #20]
 800b574:	f023 0204 	bic.w	r2, r3, #4
 800b578:	6022      	str	r2, [r4, #0]
 800b57a:	f04f 0900 	mov.w	r9, #0
 800b57e:	9700      	str	r7, [sp, #0]
 800b580:	4633      	mov	r3, r6
 800b582:	aa0b      	add	r2, sp, #44	; 0x2c
 800b584:	4621      	mov	r1, r4
 800b586:	4628      	mov	r0, r5
 800b588:	f000 f9d8 	bl	800b93c <_printf_common>
 800b58c:	3001      	adds	r0, #1
 800b58e:	f040 8090 	bne.w	800b6b2 <_printf_float+0x1e2>
 800b592:	f04f 30ff 	mov.w	r0, #4294967295
 800b596:	b00d      	add	sp, #52	; 0x34
 800b598:	ecbd 8b02 	vpop	{d8}
 800b59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a0:	4642      	mov	r2, r8
 800b5a2:	464b      	mov	r3, r9
 800b5a4:	4640      	mov	r0, r8
 800b5a6:	4649      	mov	r1, r9
 800b5a8:	f7f5 fac0 	bl	8000b2c <__aeabi_dcmpun>
 800b5ac:	b140      	cbz	r0, 800b5c0 <_printf_float+0xf0>
 800b5ae:	464b      	mov	r3, r9
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	bfbc      	itt	lt
 800b5b4:	232d      	movlt	r3, #45	; 0x2d
 800b5b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b5ba:	487f      	ldr	r0, [pc, #508]	; (800b7b8 <_printf_float+0x2e8>)
 800b5bc:	4b7f      	ldr	r3, [pc, #508]	; (800b7bc <_printf_float+0x2ec>)
 800b5be:	e7d1      	b.n	800b564 <_printf_float+0x94>
 800b5c0:	6863      	ldr	r3, [r4, #4]
 800b5c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b5c6:	9206      	str	r2, [sp, #24]
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	d13f      	bne.n	800b64c <_printf_float+0x17c>
 800b5cc:	2306      	movs	r3, #6
 800b5ce:	6063      	str	r3, [r4, #4]
 800b5d0:	9b05      	ldr	r3, [sp, #20]
 800b5d2:	6861      	ldr	r1, [r4, #4]
 800b5d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	ab0a      	add	r3, sp, #40	; 0x28
 800b5de:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b5e2:	ab09      	add	r3, sp, #36	; 0x24
 800b5e4:	ec49 8b10 	vmov	d0, r8, r9
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	6022      	str	r2, [r4, #0]
 800b5ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f7ff fecd 	bl	800b390 <__cvt>
 800b5f6:	9b06      	ldr	r3, [sp, #24]
 800b5f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5fa:	2b47      	cmp	r3, #71	; 0x47
 800b5fc:	4680      	mov	r8, r0
 800b5fe:	d108      	bne.n	800b612 <_printf_float+0x142>
 800b600:	1cc8      	adds	r0, r1, #3
 800b602:	db02      	blt.n	800b60a <_printf_float+0x13a>
 800b604:	6863      	ldr	r3, [r4, #4]
 800b606:	4299      	cmp	r1, r3
 800b608:	dd41      	ble.n	800b68e <_printf_float+0x1be>
 800b60a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b60e:	fa5f fb8b 	uxtb.w	fp, fp
 800b612:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b616:	d820      	bhi.n	800b65a <_printf_float+0x18a>
 800b618:	3901      	subs	r1, #1
 800b61a:	465a      	mov	r2, fp
 800b61c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b620:	9109      	str	r1, [sp, #36]	; 0x24
 800b622:	f7ff ff17 	bl	800b454 <__exponent>
 800b626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b628:	1813      	adds	r3, r2, r0
 800b62a:	2a01      	cmp	r2, #1
 800b62c:	4681      	mov	r9, r0
 800b62e:	6123      	str	r3, [r4, #16]
 800b630:	dc02      	bgt.n	800b638 <_printf_float+0x168>
 800b632:	6822      	ldr	r2, [r4, #0]
 800b634:	07d2      	lsls	r2, r2, #31
 800b636:	d501      	bpl.n	800b63c <_printf_float+0x16c>
 800b638:	3301      	adds	r3, #1
 800b63a:	6123      	str	r3, [r4, #16]
 800b63c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b640:	2b00      	cmp	r3, #0
 800b642:	d09c      	beq.n	800b57e <_printf_float+0xae>
 800b644:	232d      	movs	r3, #45	; 0x2d
 800b646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b64a:	e798      	b.n	800b57e <_printf_float+0xae>
 800b64c:	9a06      	ldr	r2, [sp, #24]
 800b64e:	2a47      	cmp	r2, #71	; 0x47
 800b650:	d1be      	bne.n	800b5d0 <_printf_float+0x100>
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1bc      	bne.n	800b5d0 <_printf_float+0x100>
 800b656:	2301      	movs	r3, #1
 800b658:	e7b9      	b.n	800b5ce <_printf_float+0xfe>
 800b65a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b65e:	d118      	bne.n	800b692 <_printf_float+0x1c2>
 800b660:	2900      	cmp	r1, #0
 800b662:	6863      	ldr	r3, [r4, #4]
 800b664:	dd0b      	ble.n	800b67e <_printf_float+0x1ae>
 800b666:	6121      	str	r1, [r4, #16]
 800b668:	b913      	cbnz	r3, 800b670 <_printf_float+0x1a0>
 800b66a:	6822      	ldr	r2, [r4, #0]
 800b66c:	07d0      	lsls	r0, r2, #31
 800b66e:	d502      	bpl.n	800b676 <_printf_float+0x1a6>
 800b670:	3301      	adds	r3, #1
 800b672:	440b      	add	r3, r1
 800b674:	6123      	str	r3, [r4, #16]
 800b676:	65a1      	str	r1, [r4, #88]	; 0x58
 800b678:	f04f 0900 	mov.w	r9, #0
 800b67c:	e7de      	b.n	800b63c <_printf_float+0x16c>
 800b67e:	b913      	cbnz	r3, 800b686 <_printf_float+0x1b6>
 800b680:	6822      	ldr	r2, [r4, #0]
 800b682:	07d2      	lsls	r2, r2, #31
 800b684:	d501      	bpl.n	800b68a <_printf_float+0x1ba>
 800b686:	3302      	adds	r3, #2
 800b688:	e7f4      	b.n	800b674 <_printf_float+0x1a4>
 800b68a:	2301      	movs	r3, #1
 800b68c:	e7f2      	b.n	800b674 <_printf_float+0x1a4>
 800b68e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b694:	4299      	cmp	r1, r3
 800b696:	db05      	blt.n	800b6a4 <_printf_float+0x1d4>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	6121      	str	r1, [r4, #16]
 800b69c:	07d8      	lsls	r0, r3, #31
 800b69e:	d5ea      	bpl.n	800b676 <_printf_float+0x1a6>
 800b6a0:	1c4b      	adds	r3, r1, #1
 800b6a2:	e7e7      	b.n	800b674 <_printf_float+0x1a4>
 800b6a4:	2900      	cmp	r1, #0
 800b6a6:	bfd4      	ite	le
 800b6a8:	f1c1 0202 	rsble	r2, r1, #2
 800b6ac:	2201      	movgt	r2, #1
 800b6ae:	4413      	add	r3, r2
 800b6b0:	e7e0      	b.n	800b674 <_printf_float+0x1a4>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	055a      	lsls	r2, r3, #21
 800b6b6:	d407      	bmi.n	800b6c8 <_printf_float+0x1f8>
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	4642      	mov	r2, r8
 800b6bc:	4631      	mov	r1, r6
 800b6be:	4628      	mov	r0, r5
 800b6c0:	47b8      	blx	r7
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	d12c      	bne.n	800b720 <_printf_float+0x250>
 800b6c6:	e764      	b.n	800b592 <_printf_float+0xc2>
 800b6c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b6cc:	f240 80e0 	bls.w	800b890 <_printf_float+0x3c0>
 800b6d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f7f5 f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d034      	beq.n	800b74a <_printf_float+0x27a>
 800b6e0:	4a37      	ldr	r2, [pc, #220]	; (800b7c0 <_printf_float+0x2f0>)
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	47b8      	blx	r7
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	f43f af51 	beq.w	800b592 <_printf_float+0xc2>
 800b6f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	db02      	blt.n	800b6fe <_printf_float+0x22e>
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	07d8      	lsls	r0, r3, #31
 800b6fc:	d510      	bpl.n	800b720 <_printf_float+0x250>
 800b6fe:	ee18 3a10 	vmov	r3, s16
 800b702:	4652      	mov	r2, sl
 800b704:	4631      	mov	r1, r6
 800b706:	4628      	mov	r0, r5
 800b708:	47b8      	blx	r7
 800b70a:	3001      	adds	r0, #1
 800b70c:	f43f af41 	beq.w	800b592 <_printf_float+0xc2>
 800b710:	f04f 0800 	mov.w	r8, #0
 800b714:	f104 091a 	add.w	r9, r4, #26
 800b718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b71a:	3b01      	subs	r3, #1
 800b71c:	4543      	cmp	r3, r8
 800b71e:	dc09      	bgt.n	800b734 <_printf_float+0x264>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	079b      	lsls	r3, r3, #30
 800b724:	f100 8105 	bmi.w	800b932 <_printf_float+0x462>
 800b728:	68e0      	ldr	r0, [r4, #12]
 800b72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b72c:	4298      	cmp	r0, r3
 800b72e:	bfb8      	it	lt
 800b730:	4618      	movlt	r0, r3
 800b732:	e730      	b.n	800b596 <_printf_float+0xc6>
 800b734:	2301      	movs	r3, #1
 800b736:	464a      	mov	r2, r9
 800b738:	4631      	mov	r1, r6
 800b73a:	4628      	mov	r0, r5
 800b73c:	47b8      	blx	r7
 800b73e:	3001      	adds	r0, #1
 800b740:	f43f af27 	beq.w	800b592 <_printf_float+0xc2>
 800b744:	f108 0801 	add.w	r8, r8, #1
 800b748:	e7e6      	b.n	800b718 <_printf_float+0x248>
 800b74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dc39      	bgt.n	800b7c4 <_printf_float+0x2f4>
 800b750:	4a1b      	ldr	r2, [pc, #108]	; (800b7c0 <_printf_float+0x2f0>)
 800b752:	2301      	movs	r3, #1
 800b754:	4631      	mov	r1, r6
 800b756:	4628      	mov	r0, r5
 800b758:	47b8      	blx	r7
 800b75a:	3001      	adds	r0, #1
 800b75c:	f43f af19 	beq.w	800b592 <_printf_float+0xc2>
 800b760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b764:	4313      	orrs	r3, r2
 800b766:	d102      	bne.n	800b76e <_printf_float+0x29e>
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	07d9      	lsls	r1, r3, #31
 800b76c:	d5d8      	bpl.n	800b720 <_printf_float+0x250>
 800b76e:	ee18 3a10 	vmov	r3, s16
 800b772:	4652      	mov	r2, sl
 800b774:	4631      	mov	r1, r6
 800b776:	4628      	mov	r0, r5
 800b778:	47b8      	blx	r7
 800b77a:	3001      	adds	r0, #1
 800b77c:	f43f af09 	beq.w	800b592 <_printf_float+0xc2>
 800b780:	f04f 0900 	mov.w	r9, #0
 800b784:	f104 0a1a 	add.w	sl, r4, #26
 800b788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78a:	425b      	negs	r3, r3
 800b78c:	454b      	cmp	r3, r9
 800b78e:	dc01      	bgt.n	800b794 <_printf_float+0x2c4>
 800b790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b792:	e792      	b.n	800b6ba <_printf_float+0x1ea>
 800b794:	2301      	movs	r3, #1
 800b796:	4652      	mov	r2, sl
 800b798:	4631      	mov	r1, r6
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b8      	blx	r7
 800b79e:	3001      	adds	r0, #1
 800b7a0:	f43f aef7 	beq.w	800b592 <_printf_float+0xc2>
 800b7a4:	f109 0901 	add.w	r9, r9, #1
 800b7a8:	e7ee      	b.n	800b788 <_printf_float+0x2b8>
 800b7aa:	bf00      	nop
 800b7ac:	7fefffff 	.word	0x7fefffff
 800b7b0:	0800dcac 	.word	0x0800dcac
 800b7b4:	0800dcb0 	.word	0x0800dcb0
 800b7b8:	0800dcb8 	.word	0x0800dcb8
 800b7bc:	0800dcb4 	.word	0x0800dcb4
 800b7c0:	0800dcbc 	.word	0x0800dcbc
 800b7c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	bfa8      	it	ge
 800b7cc:	461a      	movge	r2, r3
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	4691      	mov	r9, r2
 800b7d2:	dc37      	bgt.n	800b844 <_printf_float+0x374>
 800b7d4:	f04f 0b00 	mov.w	fp, #0
 800b7d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7dc:	f104 021a 	add.w	r2, r4, #26
 800b7e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7e2:	9305      	str	r3, [sp, #20]
 800b7e4:	eba3 0309 	sub.w	r3, r3, r9
 800b7e8:	455b      	cmp	r3, fp
 800b7ea:	dc33      	bgt.n	800b854 <_printf_float+0x384>
 800b7ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	db3b      	blt.n	800b86c <_printf_float+0x39c>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	07da      	lsls	r2, r3, #31
 800b7f8:	d438      	bmi.n	800b86c <_printf_float+0x39c>
 800b7fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7fc:	9b05      	ldr	r3, [sp, #20]
 800b7fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b800:	1ad3      	subs	r3, r2, r3
 800b802:	eba2 0901 	sub.w	r9, r2, r1
 800b806:	4599      	cmp	r9, r3
 800b808:	bfa8      	it	ge
 800b80a:	4699      	movge	r9, r3
 800b80c:	f1b9 0f00 	cmp.w	r9, #0
 800b810:	dc35      	bgt.n	800b87e <_printf_float+0x3ae>
 800b812:	f04f 0800 	mov.w	r8, #0
 800b816:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b81a:	f104 0a1a 	add.w	sl, r4, #26
 800b81e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b822:	1a9b      	subs	r3, r3, r2
 800b824:	eba3 0309 	sub.w	r3, r3, r9
 800b828:	4543      	cmp	r3, r8
 800b82a:	f77f af79 	ble.w	800b720 <_printf_float+0x250>
 800b82e:	2301      	movs	r3, #1
 800b830:	4652      	mov	r2, sl
 800b832:	4631      	mov	r1, r6
 800b834:	4628      	mov	r0, r5
 800b836:	47b8      	blx	r7
 800b838:	3001      	adds	r0, #1
 800b83a:	f43f aeaa 	beq.w	800b592 <_printf_float+0xc2>
 800b83e:	f108 0801 	add.w	r8, r8, #1
 800b842:	e7ec      	b.n	800b81e <_printf_float+0x34e>
 800b844:	4613      	mov	r3, r2
 800b846:	4631      	mov	r1, r6
 800b848:	4642      	mov	r2, r8
 800b84a:	4628      	mov	r0, r5
 800b84c:	47b8      	blx	r7
 800b84e:	3001      	adds	r0, #1
 800b850:	d1c0      	bne.n	800b7d4 <_printf_float+0x304>
 800b852:	e69e      	b.n	800b592 <_printf_float+0xc2>
 800b854:	2301      	movs	r3, #1
 800b856:	4631      	mov	r1, r6
 800b858:	4628      	mov	r0, r5
 800b85a:	9205      	str	r2, [sp, #20]
 800b85c:	47b8      	blx	r7
 800b85e:	3001      	adds	r0, #1
 800b860:	f43f ae97 	beq.w	800b592 <_printf_float+0xc2>
 800b864:	9a05      	ldr	r2, [sp, #20]
 800b866:	f10b 0b01 	add.w	fp, fp, #1
 800b86a:	e7b9      	b.n	800b7e0 <_printf_float+0x310>
 800b86c:	ee18 3a10 	vmov	r3, s16
 800b870:	4652      	mov	r2, sl
 800b872:	4631      	mov	r1, r6
 800b874:	4628      	mov	r0, r5
 800b876:	47b8      	blx	r7
 800b878:	3001      	adds	r0, #1
 800b87a:	d1be      	bne.n	800b7fa <_printf_float+0x32a>
 800b87c:	e689      	b.n	800b592 <_printf_float+0xc2>
 800b87e:	9a05      	ldr	r2, [sp, #20]
 800b880:	464b      	mov	r3, r9
 800b882:	4442      	add	r2, r8
 800b884:	4631      	mov	r1, r6
 800b886:	4628      	mov	r0, r5
 800b888:	47b8      	blx	r7
 800b88a:	3001      	adds	r0, #1
 800b88c:	d1c1      	bne.n	800b812 <_printf_float+0x342>
 800b88e:	e680      	b.n	800b592 <_printf_float+0xc2>
 800b890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b892:	2a01      	cmp	r2, #1
 800b894:	dc01      	bgt.n	800b89a <_printf_float+0x3ca>
 800b896:	07db      	lsls	r3, r3, #31
 800b898:	d538      	bpl.n	800b90c <_printf_float+0x43c>
 800b89a:	2301      	movs	r3, #1
 800b89c:	4642      	mov	r2, r8
 800b89e:	4631      	mov	r1, r6
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	47b8      	blx	r7
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	f43f ae74 	beq.w	800b592 <_printf_float+0xc2>
 800b8aa:	ee18 3a10 	vmov	r3, s16
 800b8ae:	4652      	mov	r2, sl
 800b8b0:	4631      	mov	r1, r6
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	47b8      	blx	r7
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	f43f ae6b 	beq.w	800b592 <_printf_float+0xc2>
 800b8bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f7f5 f900 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8c8:	b9d8      	cbnz	r0, 800b902 <_printf_float+0x432>
 800b8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8cc:	f108 0201 	add.w	r2, r8, #1
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	47b8      	blx	r7
 800b8d8:	3001      	adds	r0, #1
 800b8da:	d10e      	bne.n	800b8fa <_printf_float+0x42a>
 800b8dc:	e659      	b.n	800b592 <_printf_float+0xc2>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	4652      	mov	r2, sl
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	47b8      	blx	r7
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	f43f ae52 	beq.w	800b592 <_printf_float+0xc2>
 800b8ee:	f108 0801 	add.w	r8, r8, #1
 800b8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	4543      	cmp	r3, r8
 800b8f8:	dcf1      	bgt.n	800b8de <_printf_float+0x40e>
 800b8fa:	464b      	mov	r3, r9
 800b8fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b900:	e6dc      	b.n	800b6bc <_printf_float+0x1ec>
 800b902:	f04f 0800 	mov.w	r8, #0
 800b906:	f104 0a1a 	add.w	sl, r4, #26
 800b90a:	e7f2      	b.n	800b8f2 <_printf_float+0x422>
 800b90c:	2301      	movs	r3, #1
 800b90e:	4642      	mov	r2, r8
 800b910:	e7df      	b.n	800b8d2 <_printf_float+0x402>
 800b912:	2301      	movs	r3, #1
 800b914:	464a      	mov	r2, r9
 800b916:	4631      	mov	r1, r6
 800b918:	4628      	mov	r0, r5
 800b91a:	47b8      	blx	r7
 800b91c:	3001      	adds	r0, #1
 800b91e:	f43f ae38 	beq.w	800b592 <_printf_float+0xc2>
 800b922:	f108 0801 	add.w	r8, r8, #1
 800b926:	68e3      	ldr	r3, [r4, #12]
 800b928:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b92a:	1a5b      	subs	r3, r3, r1
 800b92c:	4543      	cmp	r3, r8
 800b92e:	dcf0      	bgt.n	800b912 <_printf_float+0x442>
 800b930:	e6fa      	b.n	800b728 <_printf_float+0x258>
 800b932:	f04f 0800 	mov.w	r8, #0
 800b936:	f104 0919 	add.w	r9, r4, #25
 800b93a:	e7f4      	b.n	800b926 <_printf_float+0x456>

0800b93c <_printf_common>:
 800b93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b940:	4616      	mov	r6, r2
 800b942:	4699      	mov	r9, r3
 800b944:	688a      	ldr	r2, [r1, #8]
 800b946:	690b      	ldr	r3, [r1, #16]
 800b948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b94c:	4293      	cmp	r3, r2
 800b94e:	bfb8      	it	lt
 800b950:	4613      	movlt	r3, r2
 800b952:	6033      	str	r3, [r6, #0]
 800b954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b958:	4607      	mov	r7, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	b10a      	cbz	r2, 800b962 <_printf_common+0x26>
 800b95e:	3301      	adds	r3, #1
 800b960:	6033      	str	r3, [r6, #0]
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	0699      	lsls	r1, r3, #26
 800b966:	bf42      	ittt	mi
 800b968:	6833      	ldrmi	r3, [r6, #0]
 800b96a:	3302      	addmi	r3, #2
 800b96c:	6033      	strmi	r3, [r6, #0]
 800b96e:	6825      	ldr	r5, [r4, #0]
 800b970:	f015 0506 	ands.w	r5, r5, #6
 800b974:	d106      	bne.n	800b984 <_printf_common+0x48>
 800b976:	f104 0a19 	add.w	sl, r4, #25
 800b97a:	68e3      	ldr	r3, [r4, #12]
 800b97c:	6832      	ldr	r2, [r6, #0]
 800b97e:	1a9b      	subs	r3, r3, r2
 800b980:	42ab      	cmp	r3, r5
 800b982:	dc26      	bgt.n	800b9d2 <_printf_common+0x96>
 800b984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b988:	1e13      	subs	r3, r2, #0
 800b98a:	6822      	ldr	r2, [r4, #0]
 800b98c:	bf18      	it	ne
 800b98e:	2301      	movne	r3, #1
 800b990:	0692      	lsls	r2, r2, #26
 800b992:	d42b      	bmi.n	800b9ec <_printf_common+0xb0>
 800b994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b998:	4649      	mov	r1, r9
 800b99a:	4638      	mov	r0, r7
 800b99c:	47c0      	blx	r8
 800b99e:	3001      	adds	r0, #1
 800b9a0:	d01e      	beq.n	800b9e0 <_printf_common+0xa4>
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	68e5      	ldr	r5, [r4, #12]
 800b9a6:	6832      	ldr	r2, [r6, #0]
 800b9a8:	f003 0306 	and.w	r3, r3, #6
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	bf08      	it	eq
 800b9b0:	1aad      	subeq	r5, r5, r2
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	6922      	ldr	r2, [r4, #16]
 800b9b6:	bf0c      	ite	eq
 800b9b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9bc:	2500      	movne	r5, #0
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	bfc4      	itt	gt
 800b9c2:	1a9b      	subgt	r3, r3, r2
 800b9c4:	18ed      	addgt	r5, r5, r3
 800b9c6:	2600      	movs	r6, #0
 800b9c8:	341a      	adds	r4, #26
 800b9ca:	42b5      	cmp	r5, r6
 800b9cc:	d11a      	bne.n	800ba04 <_printf_common+0xc8>
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	e008      	b.n	800b9e4 <_printf_common+0xa8>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	4652      	mov	r2, sl
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	4638      	mov	r0, r7
 800b9da:	47c0      	blx	r8
 800b9dc:	3001      	adds	r0, #1
 800b9de:	d103      	bne.n	800b9e8 <_printf_common+0xac>
 800b9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e8:	3501      	adds	r5, #1
 800b9ea:	e7c6      	b.n	800b97a <_printf_common+0x3e>
 800b9ec:	18e1      	adds	r1, r4, r3
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	2030      	movs	r0, #48	; 0x30
 800b9f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9f6:	4422      	add	r2, r4
 800b9f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba00:	3302      	adds	r3, #2
 800ba02:	e7c7      	b.n	800b994 <_printf_common+0x58>
 800ba04:	2301      	movs	r3, #1
 800ba06:	4622      	mov	r2, r4
 800ba08:	4649      	mov	r1, r9
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	47c0      	blx	r8
 800ba0e:	3001      	adds	r0, #1
 800ba10:	d0e6      	beq.n	800b9e0 <_printf_common+0xa4>
 800ba12:	3601      	adds	r6, #1
 800ba14:	e7d9      	b.n	800b9ca <_printf_common+0x8e>
	...

0800ba18 <_printf_i>:
 800ba18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1c:	460c      	mov	r4, r1
 800ba1e:	4691      	mov	r9, r2
 800ba20:	7e27      	ldrb	r7, [r4, #24]
 800ba22:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba24:	2f78      	cmp	r7, #120	; 0x78
 800ba26:	4680      	mov	r8, r0
 800ba28:	469a      	mov	sl, r3
 800ba2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba2e:	d807      	bhi.n	800ba40 <_printf_i+0x28>
 800ba30:	2f62      	cmp	r7, #98	; 0x62
 800ba32:	d80a      	bhi.n	800ba4a <_printf_i+0x32>
 800ba34:	2f00      	cmp	r7, #0
 800ba36:	f000 80d8 	beq.w	800bbea <_printf_i+0x1d2>
 800ba3a:	2f58      	cmp	r7, #88	; 0x58
 800ba3c:	f000 80a3 	beq.w	800bb86 <_printf_i+0x16e>
 800ba40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba48:	e03a      	b.n	800bac0 <_printf_i+0xa8>
 800ba4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba4e:	2b15      	cmp	r3, #21
 800ba50:	d8f6      	bhi.n	800ba40 <_printf_i+0x28>
 800ba52:	a001      	add	r0, pc, #4	; (adr r0, 800ba58 <_printf_i+0x40>)
 800ba54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ba58:	0800bab1 	.word	0x0800bab1
 800ba5c:	0800bac5 	.word	0x0800bac5
 800ba60:	0800ba41 	.word	0x0800ba41
 800ba64:	0800ba41 	.word	0x0800ba41
 800ba68:	0800ba41 	.word	0x0800ba41
 800ba6c:	0800ba41 	.word	0x0800ba41
 800ba70:	0800bac5 	.word	0x0800bac5
 800ba74:	0800ba41 	.word	0x0800ba41
 800ba78:	0800ba41 	.word	0x0800ba41
 800ba7c:	0800ba41 	.word	0x0800ba41
 800ba80:	0800ba41 	.word	0x0800ba41
 800ba84:	0800bbd1 	.word	0x0800bbd1
 800ba88:	0800baf5 	.word	0x0800baf5
 800ba8c:	0800bbb3 	.word	0x0800bbb3
 800ba90:	0800ba41 	.word	0x0800ba41
 800ba94:	0800ba41 	.word	0x0800ba41
 800ba98:	0800bbf3 	.word	0x0800bbf3
 800ba9c:	0800ba41 	.word	0x0800ba41
 800baa0:	0800baf5 	.word	0x0800baf5
 800baa4:	0800ba41 	.word	0x0800ba41
 800baa8:	0800ba41 	.word	0x0800ba41
 800baac:	0800bbbb 	.word	0x0800bbbb
 800bab0:	680b      	ldr	r3, [r1, #0]
 800bab2:	1d1a      	adds	r2, r3, #4
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	600a      	str	r2, [r1, #0]
 800bab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800babc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bac0:	2301      	movs	r3, #1
 800bac2:	e0a3      	b.n	800bc0c <_printf_i+0x1f4>
 800bac4:	6825      	ldr	r5, [r4, #0]
 800bac6:	6808      	ldr	r0, [r1, #0]
 800bac8:	062e      	lsls	r6, r5, #24
 800baca:	f100 0304 	add.w	r3, r0, #4
 800bace:	d50a      	bpl.n	800bae6 <_printf_i+0xce>
 800bad0:	6805      	ldr	r5, [r0, #0]
 800bad2:	600b      	str	r3, [r1, #0]
 800bad4:	2d00      	cmp	r5, #0
 800bad6:	da03      	bge.n	800bae0 <_printf_i+0xc8>
 800bad8:	232d      	movs	r3, #45	; 0x2d
 800bada:	426d      	negs	r5, r5
 800badc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bae0:	485e      	ldr	r0, [pc, #376]	; (800bc5c <_printf_i+0x244>)
 800bae2:	230a      	movs	r3, #10
 800bae4:	e019      	b.n	800bb1a <_printf_i+0x102>
 800bae6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800baea:	6805      	ldr	r5, [r0, #0]
 800baec:	600b      	str	r3, [r1, #0]
 800baee:	bf18      	it	ne
 800baf0:	b22d      	sxthne	r5, r5
 800baf2:	e7ef      	b.n	800bad4 <_printf_i+0xbc>
 800baf4:	680b      	ldr	r3, [r1, #0]
 800baf6:	6825      	ldr	r5, [r4, #0]
 800baf8:	1d18      	adds	r0, r3, #4
 800bafa:	6008      	str	r0, [r1, #0]
 800bafc:	0628      	lsls	r0, r5, #24
 800bafe:	d501      	bpl.n	800bb04 <_printf_i+0xec>
 800bb00:	681d      	ldr	r5, [r3, #0]
 800bb02:	e002      	b.n	800bb0a <_printf_i+0xf2>
 800bb04:	0669      	lsls	r1, r5, #25
 800bb06:	d5fb      	bpl.n	800bb00 <_printf_i+0xe8>
 800bb08:	881d      	ldrh	r5, [r3, #0]
 800bb0a:	4854      	ldr	r0, [pc, #336]	; (800bc5c <_printf_i+0x244>)
 800bb0c:	2f6f      	cmp	r7, #111	; 0x6f
 800bb0e:	bf0c      	ite	eq
 800bb10:	2308      	moveq	r3, #8
 800bb12:	230a      	movne	r3, #10
 800bb14:	2100      	movs	r1, #0
 800bb16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb1a:	6866      	ldr	r6, [r4, #4]
 800bb1c:	60a6      	str	r6, [r4, #8]
 800bb1e:	2e00      	cmp	r6, #0
 800bb20:	bfa2      	ittt	ge
 800bb22:	6821      	ldrge	r1, [r4, #0]
 800bb24:	f021 0104 	bicge.w	r1, r1, #4
 800bb28:	6021      	strge	r1, [r4, #0]
 800bb2a:	b90d      	cbnz	r5, 800bb30 <_printf_i+0x118>
 800bb2c:	2e00      	cmp	r6, #0
 800bb2e:	d04d      	beq.n	800bbcc <_printf_i+0x1b4>
 800bb30:	4616      	mov	r6, r2
 800bb32:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb36:	fb03 5711 	mls	r7, r3, r1, r5
 800bb3a:	5dc7      	ldrb	r7, [r0, r7]
 800bb3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb40:	462f      	mov	r7, r5
 800bb42:	42bb      	cmp	r3, r7
 800bb44:	460d      	mov	r5, r1
 800bb46:	d9f4      	bls.n	800bb32 <_printf_i+0x11a>
 800bb48:	2b08      	cmp	r3, #8
 800bb4a:	d10b      	bne.n	800bb64 <_printf_i+0x14c>
 800bb4c:	6823      	ldr	r3, [r4, #0]
 800bb4e:	07df      	lsls	r7, r3, #31
 800bb50:	d508      	bpl.n	800bb64 <_printf_i+0x14c>
 800bb52:	6923      	ldr	r3, [r4, #16]
 800bb54:	6861      	ldr	r1, [r4, #4]
 800bb56:	4299      	cmp	r1, r3
 800bb58:	bfde      	ittt	le
 800bb5a:	2330      	movle	r3, #48	; 0x30
 800bb5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb60:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb64:	1b92      	subs	r2, r2, r6
 800bb66:	6122      	str	r2, [r4, #16]
 800bb68:	f8cd a000 	str.w	sl, [sp]
 800bb6c:	464b      	mov	r3, r9
 800bb6e:	aa03      	add	r2, sp, #12
 800bb70:	4621      	mov	r1, r4
 800bb72:	4640      	mov	r0, r8
 800bb74:	f7ff fee2 	bl	800b93c <_printf_common>
 800bb78:	3001      	adds	r0, #1
 800bb7a:	d14c      	bne.n	800bc16 <_printf_i+0x1fe>
 800bb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb80:	b004      	add	sp, #16
 800bb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb86:	4835      	ldr	r0, [pc, #212]	; (800bc5c <_printf_i+0x244>)
 800bb88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb8c:	6823      	ldr	r3, [r4, #0]
 800bb8e:	680e      	ldr	r6, [r1, #0]
 800bb90:	061f      	lsls	r7, r3, #24
 800bb92:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb96:	600e      	str	r6, [r1, #0]
 800bb98:	d514      	bpl.n	800bbc4 <_printf_i+0x1ac>
 800bb9a:	07d9      	lsls	r1, r3, #31
 800bb9c:	bf44      	itt	mi
 800bb9e:	f043 0320 	orrmi.w	r3, r3, #32
 800bba2:	6023      	strmi	r3, [r4, #0]
 800bba4:	b91d      	cbnz	r5, 800bbae <_printf_i+0x196>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	f023 0320 	bic.w	r3, r3, #32
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	2310      	movs	r3, #16
 800bbb0:	e7b0      	b.n	800bb14 <_printf_i+0xfc>
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	f043 0320 	orr.w	r3, r3, #32
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	2378      	movs	r3, #120	; 0x78
 800bbbc:	4828      	ldr	r0, [pc, #160]	; (800bc60 <_printf_i+0x248>)
 800bbbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbc2:	e7e3      	b.n	800bb8c <_printf_i+0x174>
 800bbc4:	065e      	lsls	r6, r3, #25
 800bbc6:	bf48      	it	mi
 800bbc8:	b2ad      	uxthmi	r5, r5
 800bbca:	e7e6      	b.n	800bb9a <_printf_i+0x182>
 800bbcc:	4616      	mov	r6, r2
 800bbce:	e7bb      	b.n	800bb48 <_printf_i+0x130>
 800bbd0:	680b      	ldr	r3, [r1, #0]
 800bbd2:	6826      	ldr	r6, [r4, #0]
 800bbd4:	6960      	ldr	r0, [r4, #20]
 800bbd6:	1d1d      	adds	r5, r3, #4
 800bbd8:	600d      	str	r5, [r1, #0]
 800bbda:	0635      	lsls	r5, r6, #24
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	d501      	bpl.n	800bbe4 <_printf_i+0x1cc>
 800bbe0:	6018      	str	r0, [r3, #0]
 800bbe2:	e002      	b.n	800bbea <_printf_i+0x1d2>
 800bbe4:	0671      	lsls	r1, r6, #25
 800bbe6:	d5fb      	bpl.n	800bbe0 <_printf_i+0x1c8>
 800bbe8:	8018      	strh	r0, [r3, #0]
 800bbea:	2300      	movs	r3, #0
 800bbec:	6123      	str	r3, [r4, #16]
 800bbee:	4616      	mov	r6, r2
 800bbf0:	e7ba      	b.n	800bb68 <_printf_i+0x150>
 800bbf2:	680b      	ldr	r3, [r1, #0]
 800bbf4:	1d1a      	adds	r2, r3, #4
 800bbf6:	600a      	str	r2, [r1, #0]
 800bbf8:	681e      	ldr	r6, [r3, #0]
 800bbfa:	6862      	ldr	r2, [r4, #4]
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f7f4 faee 	bl	80001e0 <memchr>
 800bc04:	b108      	cbz	r0, 800bc0a <_printf_i+0x1f2>
 800bc06:	1b80      	subs	r0, r0, r6
 800bc08:	6060      	str	r0, [r4, #4]
 800bc0a:	6863      	ldr	r3, [r4, #4]
 800bc0c:	6123      	str	r3, [r4, #16]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc14:	e7a8      	b.n	800bb68 <_printf_i+0x150>
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	4632      	mov	r2, r6
 800bc1a:	4649      	mov	r1, r9
 800bc1c:	4640      	mov	r0, r8
 800bc1e:	47d0      	blx	sl
 800bc20:	3001      	adds	r0, #1
 800bc22:	d0ab      	beq.n	800bb7c <_printf_i+0x164>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	079b      	lsls	r3, r3, #30
 800bc28:	d413      	bmi.n	800bc52 <_printf_i+0x23a>
 800bc2a:	68e0      	ldr	r0, [r4, #12]
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	4298      	cmp	r0, r3
 800bc30:	bfb8      	it	lt
 800bc32:	4618      	movlt	r0, r3
 800bc34:	e7a4      	b.n	800bb80 <_printf_i+0x168>
 800bc36:	2301      	movs	r3, #1
 800bc38:	4632      	mov	r2, r6
 800bc3a:	4649      	mov	r1, r9
 800bc3c:	4640      	mov	r0, r8
 800bc3e:	47d0      	blx	sl
 800bc40:	3001      	adds	r0, #1
 800bc42:	d09b      	beq.n	800bb7c <_printf_i+0x164>
 800bc44:	3501      	adds	r5, #1
 800bc46:	68e3      	ldr	r3, [r4, #12]
 800bc48:	9903      	ldr	r1, [sp, #12]
 800bc4a:	1a5b      	subs	r3, r3, r1
 800bc4c:	42ab      	cmp	r3, r5
 800bc4e:	dcf2      	bgt.n	800bc36 <_printf_i+0x21e>
 800bc50:	e7eb      	b.n	800bc2a <_printf_i+0x212>
 800bc52:	2500      	movs	r5, #0
 800bc54:	f104 0619 	add.w	r6, r4, #25
 800bc58:	e7f5      	b.n	800bc46 <_printf_i+0x22e>
 800bc5a:	bf00      	nop
 800bc5c:	0800dcbe 	.word	0x0800dcbe
 800bc60:	0800dccf 	.word	0x0800dccf

0800bc64 <_sbrk_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d06      	ldr	r5, [pc, #24]	; (800bc80 <_sbrk_r+0x1c>)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	f7f6 faea 	bl	8002248 <_sbrk>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_sbrk_r+0x1a>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_sbrk_r+0x1a>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	20008948 	.word	0x20008948

0800bc84 <quorem>:
 800bc84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	6903      	ldr	r3, [r0, #16]
 800bc8a:	690c      	ldr	r4, [r1, #16]
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	4607      	mov	r7, r0
 800bc90:	f2c0 8081 	blt.w	800bd96 <quorem+0x112>
 800bc94:	3c01      	subs	r4, #1
 800bc96:	f101 0814 	add.w	r8, r1, #20
 800bc9a:	f100 0514 	add.w	r5, r0, #20
 800bc9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bca2:	9301      	str	r3, [sp, #4]
 800bca4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bca8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcac:	3301      	adds	r3, #1
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bcb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bcbc:	d331      	bcc.n	800bd22 <quorem+0x9e>
 800bcbe:	f04f 0e00 	mov.w	lr, #0
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	46ac      	mov	ip, r5
 800bcc6:	46f2      	mov	sl, lr
 800bcc8:	f850 2b04 	ldr.w	r2, [r0], #4
 800bccc:	b293      	uxth	r3, r2
 800bcce:	fb06 e303 	mla	r3, r6, r3, lr
 800bcd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	ebaa 0303 	sub.w	r3, sl, r3
 800bcdc:	0c12      	lsrs	r2, r2, #16
 800bcde:	f8dc a000 	ldr.w	sl, [ip]
 800bce2:	fb06 e202 	mla	r2, r6, r2, lr
 800bce6:	fa13 f38a 	uxtah	r3, r3, sl
 800bcea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bcee:	fa1f fa82 	uxth.w	sl, r2
 800bcf2:	f8dc 2000 	ldr.w	r2, [ip]
 800bcf6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bcfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd04:	4581      	cmp	r9, r0
 800bd06:	f84c 3b04 	str.w	r3, [ip], #4
 800bd0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd0e:	d2db      	bcs.n	800bcc8 <quorem+0x44>
 800bd10:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd14:	b92b      	cbnz	r3, 800bd22 <quorem+0x9e>
 800bd16:	9b01      	ldr	r3, [sp, #4]
 800bd18:	3b04      	subs	r3, #4
 800bd1a:	429d      	cmp	r5, r3
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	d32e      	bcc.n	800bd7e <quorem+0xfa>
 800bd20:	613c      	str	r4, [r7, #16]
 800bd22:	4638      	mov	r0, r7
 800bd24:	f001 f8b6 	bl	800ce94 <__mcmp>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	db24      	blt.n	800bd76 <quorem+0xf2>
 800bd2c:	3601      	adds	r6, #1
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f04f 0c00 	mov.w	ip, #0
 800bd34:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd38:	f8d0 e000 	ldr.w	lr, [r0]
 800bd3c:	b293      	uxth	r3, r2
 800bd3e:	ebac 0303 	sub.w	r3, ip, r3
 800bd42:	0c12      	lsrs	r2, r2, #16
 800bd44:	fa13 f38e 	uxtah	r3, r3, lr
 800bd48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd56:	45c1      	cmp	r9, r8
 800bd58:	f840 3b04 	str.w	r3, [r0], #4
 800bd5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd60:	d2e8      	bcs.n	800bd34 <quorem+0xb0>
 800bd62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd6a:	b922      	cbnz	r2, 800bd76 <quorem+0xf2>
 800bd6c:	3b04      	subs	r3, #4
 800bd6e:	429d      	cmp	r5, r3
 800bd70:	461a      	mov	r2, r3
 800bd72:	d30a      	bcc.n	800bd8a <quorem+0x106>
 800bd74:	613c      	str	r4, [r7, #16]
 800bd76:	4630      	mov	r0, r6
 800bd78:	b003      	add	sp, #12
 800bd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7e:	6812      	ldr	r2, [r2, #0]
 800bd80:	3b04      	subs	r3, #4
 800bd82:	2a00      	cmp	r2, #0
 800bd84:	d1cc      	bne.n	800bd20 <quorem+0x9c>
 800bd86:	3c01      	subs	r4, #1
 800bd88:	e7c7      	b.n	800bd1a <quorem+0x96>
 800bd8a:	6812      	ldr	r2, [r2, #0]
 800bd8c:	3b04      	subs	r3, #4
 800bd8e:	2a00      	cmp	r2, #0
 800bd90:	d1f0      	bne.n	800bd74 <quorem+0xf0>
 800bd92:	3c01      	subs	r4, #1
 800bd94:	e7eb      	b.n	800bd6e <quorem+0xea>
 800bd96:	2000      	movs	r0, #0
 800bd98:	e7ee      	b.n	800bd78 <quorem+0xf4>
 800bd9a:	0000      	movs	r0, r0
 800bd9c:	0000      	movs	r0, r0
	...

0800bda0 <_dtoa_r>:
 800bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda4:	ed2d 8b02 	vpush	{d8}
 800bda8:	ec57 6b10 	vmov	r6, r7, d0
 800bdac:	b095      	sub	sp, #84	; 0x54
 800bdae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bdb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bdb4:	9105      	str	r1, [sp, #20]
 800bdb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bdba:	4604      	mov	r4, r0
 800bdbc:	9209      	str	r2, [sp, #36]	; 0x24
 800bdbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdc0:	b975      	cbnz	r5, 800bde0 <_dtoa_r+0x40>
 800bdc2:	2010      	movs	r0, #16
 800bdc4:	f7ff fa0c 	bl	800b1e0 <malloc>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	6260      	str	r0, [r4, #36]	; 0x24
 800bdcc:	b920      	cbnz	r0, 800bdd8 <_dtoa_r+0x38>
 800bdce:	4bb2      	ldr	r3, [pc, #712]	; (800c098 <_dtoa_r+0x2f8>)
 800bdd0:	21ea      	movs	r1, #234	; 0xea
 800bdd2:	48b2      	ldr	r0, [pc, #712]	; (800c09c <_dtoa_r+0x2fc>)
 800bdd4:	f001 f95e 	bl	800d094 <__assert_func>
 800bdd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bddc:	6005      	str	r5, [r0, #0]
 800bdde:	60c5      	str	r5, [r0, #12]
 800bde0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bde2:	6819      	ldr	r1, [r3, #0]
 800bde4:	b151      	cbz	r1, 800bdfc <_dtoa_r+0x5c>
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	604a      	str	r2, [r1, #4]
 800bdea:	2301      	movs	r3, #1
 800bdec:	4093      	lsls	r3, r2
 800bdee:	608b      	str	r3, [r1, #8]
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f000 fe11 	bl	800ca18 <_Bfree>
 800bdf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	601a      	str	r2, [r3, #0]
 800bdfc:	1e3b      	subs	r3, r7, #0
 800bdfe:	bfb9      	ittee	lt
 800be00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800be04:	9303      	strlt	r3, [sp, #12]
 800be06:	2300      	movge	r3, #0
 800be08:	f8c8 3000 	strge.w	r3, [r8]
 800be0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800be10:	4ba3      	ldr	r3, [pc, #652]	; (800c0a0 <_dtoa_r+0x300>)
 800be12:	bfbc      	itt	lt
 800be14:	2201      	movlt	r2, #1
 800be16:	f8c8 2000 	strlt.w	r2, [r8]
 800be1a:	ea33 0309 	bics.w	r3, r3, r9
 800be1e:	d11b      	bne.n	800be58 <_dtoa_r+0xb8>
 800be20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be22:	f242 730f 	movw	r3, #9999	; 0x270f
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be2c:	4333      	orrs	r3, r6
 800be2e:	f000 857a 	beq.w	800c926 <_dtoa_r+0xb86>
 800be32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be34:	b963      	cbnz	r3, 800be50 <_dtoa_r+0xb0>
 800be36:	4b9b      	ldr	r3, [pc, #620]	; (800c0a4 <_dtoa_r+0x304>)
 800be38:	e024      	b.n	800be84 <_dtoa_r+0xe4>
 800be3a:	4b9b      	ldr	r3, [pc, #620]	; (800c0a8 <_dtoa_r+0x308>)
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	3308      	adds	r3, #8
 800be40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	9800      	ldr	r0, [sp, #0]
 800be46:	b015      	add	sp, #84	; 0x54
 800be48:	ecbd 8b02 	vpop	{d8}
 800be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be50:	4b94      	ldr	r3, [pc, #592]	; (800c0a4 <_dtoa_r+0x304>)
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	3303      	adds	r3, #3
 800be56:	e7f3      	b.n	800be40 <_dtoa_r+0xa0>
 800be58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be5c:	2200      	movs	r2, #0
 800be5e:	ec51 0b17 	vmov	r0, r1, d7
 800be62:	2300      	movs	r3, #0
 800be64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800be68:	f7f4 fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800be6c:	4680      	mov	r8, r0
 800be6e:	b158      	cbz	r0, 800be88 <_dtoa_r+0xe8>
 800be70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be72:	2301      	movs	r3, #1
 800be74:	6013      	str	r3, [r2, #0]
 800be76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 8551 	beq.w	800c920 <_dtoa_r+0xb80>
 800be7e:	488b      	ldr	r0, [pc, #556]	; (800c0ac <_dtoa_r+0x30c>)
 800be80:	6018      	str	r0, [r3, #0]
 800be82:	1e43      	subs	r3, r0, #1
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	e7dd      	b.n	800be44 <_dtoa_r+0xa4>
 800be88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800be8c:	aa12      	add	r2, sp, #72	; 0x48
 800be8e:	a913      	add	r1, sp, #76	; 0x4c
 800be90:	4620      	mov	r0, r4
 800be92:	f001 f8a3 	bl	800cfdc <__d2b>
 800be96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be9a:	4683      	mov	fp, r0
 800be9c:	2d00      	cmp	r5, #0
 800be9e:	d07c      	beq.n	800bf9a <_dtoa_r+0x1fa>
 800bea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beaa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800beae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800beb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800beb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800beba:	4b7d      	ldr	r3, [pc, #500]	; (800c0b0 <_dtoa_r+0x310>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	4630      	mov	r0, r6
 800bec0:	4639      	mov	r1, r7
 800bec2:	f7f4 f9e1 	bl	8000288 <__aeabi_dsub>
 800bec6:	a36e      	add	r3, pc, #440	; (adr r3, 800c080 <_dtoa_r+0x2e0>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	f7f4 fb94 	bl	80005f8 <__aeabi_dmul>
 800bed0:	a36d      	add	r3, pc, #436	; (adr r3, 800c088 <_dtoa_r+0x2e8>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	f7f4 f9d9 	bl	800028c <__adddf3>
 800beda:	4606      	mov	r6, r0
 800bedc:	4628      	mov	r0, r5
 800bede:	460f      	mov	r7, r1
 800bee0:	f7f4 fb20 	bl	8000524 <__aeabi_i2d>
 800bee4:	a36a      	add	r3, pc, #424	; (adr r3, 800c090 <_dtoa_r+0x2f0>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	f7f4 fb85 	bl	80005f8 <__aeabi_dmul>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	4630      	mov	r0, r6
 800bef4:	4639      	mov	r1, r7
 800bef6:	f7f4 f9c9 	bl	800028c <__adddf3>
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	f7f4 fe2b 	bl	8000b58 <__aeabi_d2iz>
 800bf02:	2200      	movs	r2, #0
 800bf04:	4682      	mov	sl, r0
 800bf06:	2300      	movs	r3, #0
 800bf08:	4630      	mov	r0, r6
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	f7f4 fde6 	bl	8000adc <__aeabi_dcmplt>
 800bf10:	b148      	cbz	r0, 800bf26 <_dtoa_r+0x186>
 800bf12:	4650      	mov	r0, sl
 800bf14:	f7f4 fb06 	bl	8000524 <__aeabi_i2d>
 800bf18:	4632      	mov	r2, r6
 800bf1a:	463b      	mov	r3, r7
 800bf1c:	f7f4 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf20:	b908      	cbnz	r0, 800bf26 <_dtoa_r+0x186>
 800bf22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf26:	f1ba 0f16 	cmp.w	sl, #22
 800bf2a:	d854      	bhi.n	800bfd6 <_dtoa_r+0x236>
 800bf2c:	4b61      	ldr	r3, [pc, #388]	; (800c0b4 <_dtoa_r+0x314>)
 800bf2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf3a:	f7f4 fdcf 	bl	8000adc <__aeabi_dcmplt>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d04b      	beq.n	800bfda <_dtoa_r+0x23a>
 800bf42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf46:	2300      	movs	r3, #0
 800bf48:	930e      	str	r3, [sp, #56]	; 0x38
 800bf4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf4c:	1b5d      	subs	r5, r3, r5
 800bf4e:	1e6b      	subs	r3, r5, #1
 800bf50:	9304      	str	r3, [sp, #16]
 800bf52:	bf43      	ittte	mi
 800bf54:	2300      	movmi	r3, #0
 800bf56:	f1c5 0801 	rsbmi	r8, r5, #1
 800bf5a:	9304      	strmi	r3, [sp, #16]
 800bf5c:	f04f 0800 	movpl.w	r8, #0
 800bf60:	f1ba 0f00 	cmp.w	sl, #0
 800bf64:	db3b      	blt.n	800bfde <_dtoa_r+0x23e>
 800bf66:	9b04      	ldr	r3, [sp, #16]
 800bf68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bf6c:	4453      	add	r3, sl
 800bf6e:	9304      	str	r3, [sp, #16]
 800bf70:	2300      	movs	r3, #0
 800bf72:	9306      	str	r3, [sp, #24]
 800bf74:	9b05      	ldr	r3, [sp, #20]
 800bf76:	2b09      	cmp	r3, #9
 800bf78:	d869      	bhi.n	800c04e <_dtoa_r+0x2ae>
 800bf7a:	2b05      	cmp	r3, #5
 800bf7c:	bfc4      	itt	gt
 800bf7e:	3b04      	subgt	r3, #4
 800bf80:	9305      	strgt	r3, [sp, #20]
 800bf82:	9b05      	ldr	r3, [sp, #20]
 800bf84:	f1a3 0302 	sub.w	r3, r3, #2
 800bf88:	bfcc      	ite	gt
 800bf8a:	2500      	movgt	r5, #0
 800bf8c:	2501      	movle	r5, #1
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	d869      	bhi.n	800c066 <_dtoa_r+0x2c6>
 800bf92:	e8df f003 	tbb	[pc, r3]
 800bf96:	4e2c      	.short	0x4e2c
 800bf98:	5a4c      	.short	0x5a4c
 800bf9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bf9e:	441d      	add	r5, r3
 800bfa0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bfa4:	2b20      	cmp	r3, #32
 800bfa6:	bfc1      	itttt	gt
 800bfa8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bfac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bfb0:	fa09 f303 	lslgt.w	r3, r9, r3
 800bfb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bfb8:	bfda      	itte	le
 800bfba:	f1c3 0320 	rsble	r3, r3, #32
 800bfbe:	fa06 f003 	lslle.w	r0, r6, r3
 800bfc2:	4318      	orrgt	r0, r3
 800bfc4:	f7f4 fa9e 	bl	8000504 <__aeabi_ui2d>
 800bfc8:	2301      	movs	r3, #1
 800bfca:	4606      	mov	r6, r0
 800bfcc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bfd0:	3d01      	subs	r5, #1
 800bfd2:	9310      	str	r3, [sp, #64]	; 0x40
 800bfd4:	e771      	b.n	800beba <_dtoa_r+0x11a>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e7b6      	b.n	800bf48 <_dtoa_r+0x1a8>
 800bfda:	900e      	str	r0, [sp, #56]	; 0x38
 800bfdc:	e7b5      	b.n	800bf4a <_dtoa_r+0x1aa>
 800bfde:	f1ca 0300 	rsb	r3, sl, #0
 800bfe2:	9306      	str	r3, [sp, #24]
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	eba8 080a 	sub.w	r8, r8, sl
 800bfea:	930d      	str	r3, [sp, #52]	; 0x34
 800bfec:	e7c2      	b.n	800bf74 <_dtoa_r+0x1d4>
 800bfee:	2300      	movs	r3, #0
 800bff0:	9308      	str	r3, [sp, #32]
 800bff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dc39      	bgt.n	800c06c <_dtoa_r+0x2cc>
 800bff8:	f04f 0901 	mov.w	r9, #1
 800bffc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c000:	464b      	mov	r3, r9
 800c002:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c006:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c008:	2200      	movs	r2, #0
 800c00a:	6042      	str	r2, [r0, #4]
 800c00c:	2204      	movs	r2, #4
 800c00e:	f102 0614 	add.w	r6, r2, #20
 800c012:	429e      	cmp	r6, r3
 800c014:	6841      	ldr	r1, [r0, #4]
 800c016:	d92f      	bls.n	800c078 <_dtoa_r+0x2d8>
 800c018:	4620      	mov	r0, r4
 800c01a:	f000 fcbd 	bl	800c998 <_Balloc>
 800c01e:	9000      	str	r0, [sp, #0]
 800c020:	2800      	cmp	r0, #0
 800c022:	d14b      	bne.n	800c0bc <_dtoa_r+0x31c>
 800c024:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <_dtoa_r+0x318>)
 800c026:	4602      	mov	r2, r0
 800c028:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c02c:	e6d1      	b.n	800bdd2 <_dtoa_r+0x32>
 800c02e:	2301      	movs	r3, #1
 800c030:	e7de      	b.n	800bff0 <_dtoa_r+0x250>
 800c032:	2300      	movs	r3, #0
 800c034:	9308      	str	r3, [sp, #32]
 800c036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c038:	eb0a 0903 	add.w	r9, sl, r3
 800c03c:	f109 0301 	add.w	r3, r9, #1
 800c040:	2b01      	cmp	r3, #1
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	bfb8      	it	lt
 800c046:	2301      	movlt	r3, #1
 800c048:	e7dd      	b.n	800c006 <_dtoa_r+0x266>
 800c04a:	2301      	movs	r3, #1
 800c04c:	e7f2      	b.n	800c034 <_dtoa_r+0x294>
 800c04e:	2501      	movs	r5, #1
 800c050:	2300      	movs	r3, #0
 800c052:	9305      	str	r3, [sp, #20]
 800c054:	9508      	str	r5, [sp, #32]
 800c056:	f04f 39ff 	mov.w	r9, #4294967295
 800c05a:	2200      	movs	r2, #0
 800c05c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c060:	2312      	movs	r3, #18
 800c062:	9209      	str	r2, [sp, #36]	; 0x24
 800c064:	e7cf      	b.n	800c006 <_dtoa_r+0x266>
 800c066:	2301      	movs	r3, #1
 800c068:	9308      	str	r3, [sp, #32]
 800c06a:	e7f4      	b.n	800c056 <_dtoa_r+0x2b6>
 800c06c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c070:	f8cd 9004 	str.w	r9, [sp, #4]
 800c074:	464b      	mov	r3, r9
 800c076:	e7c6      	b.n	800c006 <_dtoa_r+0x266>
 800c078:	3101      	adds	r1, #1
 800c07a:	6041      	str	r1, [r0, #4]
 800c07c:	0052      	lsls	r2, r2, #1
 800c07e:	e7c6      	b.n	800c00e <_dtoa_r+0x26e>
 800c080:	636f4361 	.word	0x636f4361
 800c084:	3fd287a7 	.word	0x3fd287a7
 800c088:	8b60c8b3 	.word	0x8b60c8b3
 800c08c:	3fc68a28 	.word	0x3fc68a28
 800c090:	509f79fb 	.word	0x509f79fb
 800c094:	3fd34413 	.word	0x3fd34413
 800c098:	0800dced 	.word	0x0800dced
 800c09c:	0800dd04 	.word	0x0800dd04
 800c0a0:	7ff00000 	.word	0x7ff00000
 800c0a4:	0800dce9 	.word	0x0800dce9
 800c0a8:	0800dce0 	.word	0x0800dce0
 800c0ac:	0800dcbd 	.word	0x0800dcbd
 800c0b0:	3ff80000 	.word	0x3ff80000
 800c0b4:	0800de00 	.word	0x0800de00
 800c0b8:	0800dd63 	.word	0x0800dd63
 800c0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0be:	9a00      	ldr	r2, [sp, #0]
 800c0c0:	601a      	str	r2, [r3, #0]
 800c0c2:	9b01      	ldr	r3, [sp, #4]
 800c0c4:	2b0e      	cmp	r3, #14
 800c0c6:	f200 80ad 	bhi.w	800c224 <_dtoa_r+0x484>
 800c0ca:	2d00      	cmp	r5, #0
 800c0cc:	f000 80aa 	beq.w	800c224 <_dtoa_r+0x484>
 800c0d0:	f1ba 0f00 	cmp.w	sl, #0
 800c0d4:	dd36      	ble.n	800c144 <_dtoa_r+0x3a4>
 800c0d6:	4ac3      	ldr	r2, [pc, #780]	; (800c3e4 <_dtoa_r+0x644>)
 800c0d8:	f00a 030f 	and.w	r3, sl, #15
 800c0dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c0e0:	ed93 7b00 	vldr	d7, [r3]
 800c0e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c0e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c0ec:	eeb0 8a47 	vmov.f32	s16, s14
 800c0f0:	eef0 8a67 	vmov.f32	s17, s15
 800c0f4:	d016      	beq.n	800c124 <_dtoa_r+0x384>
 800c0f6:	4bbc      	ldr	r3, [pc, #752]	; (800c3e8 <_dtoa_r+0x648>)
 800c0f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c0fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c100:	f7f4 fba4 	bl	800084c <__aeabi_ddiv>
 800c104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c108:	f007 070f 	and.w	r7, r7, #15
 800c10c:	2503      	movs	r5, #3
 800c10e:	4eb6      	ldr	r6, [pc, #728]	; (800c3e8 <_dtoa_r+0x648>)
 800c110:	b957      	cbnz	r7, 800c128 <_dtoa_r+0x388>
 800c112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c116:	ec53 2b18 	vmov	r2, r3, d8
 800c11a:	f7f4 fb97 	bl	800084c <__aeabi_ddiv>
 800c11e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c122:	e029      	b.n	800c178 <_dtoa_r+0x3d8>
 800c124:	2502      	movs	r5, #2
 800c126:	e7f2      	b.n	800c10e <_dtoa_r+0x36e>
 800c128:	07f9      	lsls	r1, r7, #31
 800c12a:	d508      	bpl.n	800c13e <_dtoa_r+0x39e>
 800c12c:	ec51 0b18 	vmov	r0, r1, d8
 800c130:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c134:	f7f4 fa60 	bl	80005f8 <__aeabi_dmul>
 800c138:	ec41 0b18 	vmov	d8, r0, r1
 800c13c:	3501      	adds	r5, #1
 800c13e:	107f      	asrs	r7, r7, #1
 800c140:	3608      	adds	r6, #8
 800c142:	e7e5      	b.n	800c110 <_dtoa_r+0x370>
 800c144:	f000 80a6 	beq.w	800c294 <_dtoa_r+0x4f4>
 800c148:	f1ca 0600 	rsb	r6, sl, #0
 800c14c:	4ba5      	ldr	r3, [pc, #660]	; (800c3e4 <_dtoa_r+0x644>)
 800c14e:	4fa6      	ldr	r7, [pc, #664]	; (800c3e8 <_dtoa_r+0x648>)
 800c150:	f006 020f 	and.w	r2, r6, #15
 800c154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c160:	f7f4 fa4a 	bl	80005f8 <__aeabi_dmul>
 800c164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c168:	1136      	asrs	r6, r6, #4
 800c16a:	2300      	movs	r3, #0
 800c16c:	2502      	movs	r5, #2
 800c16e:	2e00      	cmp	r6, #0
 800c170:	f040 8085 	bne.w	800c27e <_dtoa_r+0x4de>
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1d2      	bne.n	800c11e <_dtoa_r+0x37e>
 800c178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f000 808c 	beq.w	800c298 <_dtoa_r+0x4f8>
 800c180:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c184:	4b99      	ldr	r3, [pc, #612]	; (800c3ec <_dtoa_r+0x64c>)
 800c186:	2200      	movs	r2, #0
 800c188:	4630      	mov	r0, r6
 800c18a:	4639      	mov	r1, r7
 800c18c:	f7f4 fca6 	bl	8000adc <__aeabi_dcmplt>
 800c190:	2800      	cmp	r0, #0
 800c192:	f000 8081 	beq.w	800c298 <_dtoa_r+0x4f8>
 800c196:	9b01      	ldr	r3, [sp, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d07d      	beq.n	800c298 <_dtoa_r+0x4f8>
 800c19c:	f1b9 0f00 	cmp.w	r9, #0
 800c1a0:	dd3c      	ble.n	800c21c <_dtoa_r+0x47c>
 800c1a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c1a6:	9307      	str	r3, [sp, #28]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	4b91      	ldr	r3, [pc, #580]	; (800c3f0 <_dtoa_r+0x650>)
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	4639      	mov	r1, r7
 800c1b0:	f7f4 fa22 	bl	80005f8 <__aeabi_dmul>
 800c1b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c1be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	f7f4 f9ae 	bl	8000524 <__aeabi_i2d>
 800c1c8:	4632      	mov	r2, r6
 800c1ca:	463b      	mov	r3, r7
 800c1cc:	f7f4 fa14 	bl	80005f8 <__aeabi_dmul>
 800c1d0:	4b88      	ldr	r3, [pc, #544]	; (800c3f4 <_dtoa_r+0x654>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7f4 f85a 	bl	800028c <__adddf3>
 800c1d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c1dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1e0:	9303      	str	r3, [sp, #12]
 800c1e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d15c      	bne.n	800c2a2 <_dtoa_r+0x502>
 800c1e8:	4b83      	ldr	r3, [pc, #524]	; (800c3f8 <_dtoa_r+0x658>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	f7f4 f84a 	bl	8000288 <__aeabi_dsub>
 800c1f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1f8:	4606      	mov	r6, r0
 800c1fa:	460f      	mov	r7, r1
 800c1fc:	f7f4 fc8c 	bl	8000b18 <__aeabi_dcmpgt>
 800c200:	2800      	cmp	r0, #0
 800c202:	f040 8296 	bne.w	800c732 <_dtoa_r+0x992>
 800c206:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c20a:	4630      	mov	r0, r6
 800c20c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c210:	4639      	mov	r1, r7
 800c212:	f7f4 fc63 	bl	8000adc <__aeabi_dcmplt>
 800c216:	2800      	cmp	r0, #0
 800c218:	f040 8288 	bne.w	800c72c <_dtoa_r+0x98c>
 800c21c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c220:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c226:	2b00      	cmp	r3, #0
 800c228:	f2c0 8158 	blt.w	800c4dc <_dtoa_r+0x73c>
 800c22c:	f1ba 0f0e 	cmp.w	sl, #14
 800c230:	f300 8154 	bgt.w	800c4dc <_dtoa_r+0x73c>
 800c234:	4b6b      	ldr	r3, [pc, #428]	; (800c3e4 <_dtoa_r+0x644>)
 800c236:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c23a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c240:	2b00      	cmp	r3, #0
 800c242:	f280 80e3 	bge.w	800c40c <_dtoa_r+0x66c>
 800c246:	9b01      	ldr	r3, [sp, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f300 80df 	bgt.w	800c40c <_dtoa_r+0x66c>
 800c24e:	f040 826d 	bne.w	800c72c <_dtoa_r+0x98c>
 800c252:	4b69      	ldr	r3, [pc, #420]	; (800c3f8 <_dtoa_r+0x658>)
 800c254:	2200      	movs	r2, #0
 800c256:	4640      	mov	r0, r8
 800c258:	4649      	mov	r1, r9
 800c25a:	f7f4 f9cd 	bl	80005f8 <__aeabi_dmul>
 800c25e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c262:	f7f4 fc4f 	bl	8000b04 <__aeabi_dcmpge>
 800c266:	9e01      	ldr	r6, [sp, #4]
 800c268:	4637      	mov	r7, r6
 800c26a:	2800      	cmp	r0, #0
 800c26c:	f040 8243 	bne.w	800c6f6 <_dtoa_r+0x956>
 800c270:	9d00      	ldr	r5, [sp, #0]
 800c272:	2331      	movs	r3, #49	; 0x31
 800c274:	f805 3b01 	strb.w	r3, [r5], #1
 800c278:	f10a 0a01 	add.w	sl, sl, #1
 800c27c:	e23f      	b.n	800c6fe <_dtoa_r+0x95e>
 800c27e:	07f2      	lsls	r2, r6, #31
 800c280:	d505      	bpl.n	800c28e <_dtoa_r+0x4ee>
 800c282:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c286:	f7f4 f9b7 	bl	80005f8 <__aeabi_dmul>
 800c28a:	3501      	adds	r5, #1
 800c28c:	2301      	movs	r3, #1
 800c28e:	1076      	asrs	r6, r6, #1
 800c290:	3708      	adds	r7, #8
 800c292:	e76c      	b.n	800c16e <_dtoa_r+0x3ce>
 800c294:	2502      	movs	r5, #2
 800c296:	e76f      	b.n	800c178 <_dtoa_r+0x3d8>
 800c298:	9b01      	ldr	r3, [sp, #4]
 800c29a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c29e:	930c      	str	r3, [sp, #48]	; 0x30
 800c2a0:	e78d      	b.n	800c1be <_dtoa_r+0x41e>
 800c2a2:	9900      	ldr	r1, [sp, #0]
 800c2a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c2a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2a8:	4b4e      	ldr	r3, [pc, #312]	; (800c3e4 <_dtoa_r+0x644>)
 800c2aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2ae:	4401      	add	r1, r0
 800c2b0:	9102      	str	r1, [sp, #8]
 800c2b2:	9908      	ldr	r1, [sp, #32]
 800c2b4:	eeb0 8a47 	vmov.f32	s16, s14
 800c2b8:	eef0 8a67 	vmov.f32	s17, s15
 800c2bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2c4:	2900      	cmp	r1, #0
 800c2c6:	d045      	beq.n	800c354 <_dtoa_r+0x5b4>
 800c2c8:	494c      	ldr	r1, [pc, #304]	; (800c3fc <_dtoa_r+0x65c>)
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7f4 fabe 	bl	800084c <__aeabi_ddiv>
 800c2d0:	ec53 2b18 	vmov	r2, r3, d8
 800c2d4:	f7f3 ffd8 	bl	8000288 <__aeabi_dsub>
 800c2d8:	9d00      	ldr	r5, [sp, #0]
 800c2da:	ec41 0b18 	vmov	d8, r0, r1
 800c2de:	4639      	mov	r1, r7
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f7f4 fc39 	bl	8000b58 <__aeabi_d2iz>
 800c2e6:	900c      	str	r0, [sp, #48]	; 0x30
 800c2e8:	f7f4 f91c 	bl	8000524 <__aeabi_i2d>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	f7f3 ffc8 	bl	8000288 <__aeabi_dsub>
 800c2f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2fa:	3330      	adds	r3, #48	; 0x30
 800c2fc:	f805 3b01 	strb.w	r3, [r5], #1
 800c300:	ec53 2b18 	vmov	r2, r3, d8
 800c304:	4606      	mov	r6, r0
 800c306:	460f      	mov	r7, r1
 800c308:	f7f4 fbe8 	bl	8000adc <__aeabi_dcmplt>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d165      	bne.n	800c3dc <_dtoa_r+0x63c>
 800c310:	4632      	mov	r2, r6
 800c312:	463b      	mov	r3, r7
 800c314:	4935      	ldr	r1, [pc, #212]	; (800c3ec <_dtoa_r+0x64c>)
 800c316:	2000      	movs	r0, #0
 800c318:	f7f3 ffb6 	bl	8000288 <__aeabi_dsub>
 800c31c:	ec53 2b18 	vmov	r2, r3, d8
 800c320:	f7f4 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800c324:	2800      	cmp	r0, #0
 800c326:	f040 80b9 	bne.w	800c49c <_dtoa_r+0x6fc>
 800c32a:	9b02      	ldr	r3, [sp, #8]
 800c32c:	429d      	cmp	r5, r3
 800c32e:	f43f af75 	beq.w	800c21c <_dtoa_r+0x47c>
 800c332:	4b2f      	ldr	r3, [pc, #188]	; (800c3f0 <_dtoa_r+0x650>)
 800c334:	ec51 0b18 	vmov	r0, r1, d8
 800c338:	2200      	movs	r2, #0
 800c33a:	f7f4 f95d 	bl	80005f8 <__aeabi_dmul>
 800c33e:	4b2c      	ldr	r3, [pc, #176]	; (800c3f0 <_dtoa_r+0x650>)
 800c340:	ec41 0b18 	vmov	d8, r0, r1
 800c344:	2200      	movs	r2, #0
 800c346:	4630      	mov	r0, r6
 800c348:	4639      	mov	r1, r7
 800c34a:	f7f4 f955 	bl	80005f8 <__aeabi_dmul>
 800c34e:	4606      	mov	r6, r0
 800c350:	460f      	mov	r7, r1
 800c352:	e7c4      	b.n	800c2de <_dtoa_r+0x53e>
 800c354:	ec51 0b17 	vmov	r0, r1, d7
 800c358:	f7f4 f94e 	bl	80005f8 <__aeabi_dmul>
 800c35c:	9b02      	ldr	r3, [sp, #8]
 800c35e:	9d00      	ldr	r5, [sp, #0]
 800c360:	930c      	str	r3, [sp, #48]	; 0x30
 800c362:	ec41 0b18 	vmov	d8, r0, r1
 800c366:	4639      	mov	r1, r7
 800c368:	4630      	mov	r0, r6
 800c36a:	f7f4 fbf5 	bl	8000b58 <__aeabi_d2iz>
 800c36e:	9011      	str	r0, [sp, #68]	; 0x44
 800c370:	f7f4 f8d8 	bl	8000524 <__aeabi_i2d>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	4630      	mov	r0, r6
 800c37a:	4639      	mov	r1, r7
 800c37c:	f7f3 ff84 	bl	8000288 <__aeabi_dsub>
 800c380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c382:	3330      	adds	r3, #48	; 0x30
 800c384:	f805 3b01 	strb.w	r3, [r5], #1
 800c388:	9b02      	ldr	r3, [sp, #8]
 800c38a:	429d      	cmp	r5, r3
 800c38c:	4606      	mov	r6, r0
 800c38e:	460f      	mov	r7, r1
 800c390:	f04f 0200 	mov.w	r2, #0
 800c394:	d134      	bne.n	800c400 <_dtoa_r+0x660>
 800c396:	4b19      	ldr	r3, [pc, #100]	; (800c3fc <_dtoa_r+0x65c>)
 800c398:	ec51 0b18 	vmov	r0, r1, d8
 800c39c:	f7f3 ff76 	bl	800028c <__adddf3>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	4639      	mov	r1, r7
 800c3a8:	f7f4 fbb6 	bl	8000b18 <__aeabi_dcmpgt>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d175      	bne.n	800c49c <_dtoa_r+0x6fc>
 800c3b0:	ec53 2b18 	vmov	r2, r3, d8
 800c3b4:	4911      	ldr	r1, [pc, #68]	; (800c3fc <_dtoa_r+0x65c>)
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	f7f3 ff66 	bl	8000288 <__aeabi_dsub>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	4639      	mov	r1, r7
 800c3c4:	f7f4 fb8a 	bl	8000adc <__aeabi_dcmplt>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	f43f af27 	beq.w	800c21c <_dtoa_r+0x47c>
 800c3ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3d0:	1e6b      	subs	r3, r5, #1
 800c3d2:	930c      	str	r3, [sp, #48]	; 0x30
 800c3d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3d8:	2b30      	cmp	r3, #48	; 0x30
 800c3da:	d0f8      	beq.n	800c3ce <_dtoa_r+0x62e>
 800c3dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c3e0:	e04a      	b.n	800c478 <_dtoa_r+0x6d8>
 800c3e2:	bf00      	nop
 800c3e4:	0800de00 	.word	0x0800de00
 800c3e8:	0800ddd8 	.word	0x0800ddd8
 800c3ec:	3ff00000 	.word	0x3ff00000
 800c3f0:	40240000 	.word	0x40240000
 800c3f4:	401c0000 	.word	0x401c0000
 800c3f8:	40140000 	.word	0x40140000
 800c3fc:	3fe00000 	.word	0x3fe00000
 800c400:	4baf      	ldr	r3, [pc, #700]	; (800c6c0 <_dtoa_r+0x920>)
 800c402:	f7f4 f8f9 	bl	80005f8 <__aeabi_dmul>
 800c406:	4606      	mov	r6, r0
 800c408:	460f      	mov	r7, r1
 800c40a:	e7ac      	b.n	800c366 <_dtoa_r+0x5c6>
 800c40c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c410:	9d00      	ldr	r5, [sp, #0]
 800c412:	4642      	mov	r2, r8
 800c414:	464b      	mov	r3, r9
 800c416:	4630      	mov	r0, r6
 800c418:	4639      	mov	r1, r7
 800c41a:	f7f4 fa17 	bl	800084c <__aeabi_ddiv>
 800c41e:	f7f4 fb9b 	bl	8000b58 <__aeabi_d2iz>
 800c422:	9002      	str	r0, [sp, #8]
 800c424:	f7f4 f87e 	bl	8000524 <__aeabi_i2d>
 800c428:	4642      	mov	r2, r8
 800c42a:	464b      	mov	r3, r9
 800c42c:	f7f4 f8e4 	bl	80005f8 <__aeabi_dmul>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	4630      	mov	r0, r6
 800c436:	4639      	mov	r1, r7
 800c438:	f7f3 ff26 	bl	8000288 <__aeabi_dsub>
 800c43c:	9e02      	ldr	r6, [sp, #8]
 800c43e:	9f01      	ldr	r7, [sp, #4]
 800c440:	3630      	adds	r6, #48	; 0x30
 800c442:	f805 6b01 	strb.w	r6, [r5], #1
 800c446:	9e00      	ldr	r6, [sp, #0]
 800c448:	1bae      	subs	r6, r5, r6
 800c44a:	42b7      	cmp	r7, r6
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	d137      	bne.n	800c4c2 <_dtoa_r+0x722>
 800c452:	f7f3 ff1b 	bl	800028c <__adddf3>
 800c456:	4642      	mov	r2, r8
 800c458:	464b      	mov	r3, r9
 800c45a:	4606      	mov	r6, r0
 800c45c:	460f      	mov	r7, r1
 800c45e:	f7f4 fb5b 	bl	8000b18 <__aeabi_dcmpgt>
 800c462:	b9c8      	cbnz	r0, 800c498 <_dtoa_r+0x6f8>
 800c464:	4642      	mov	r2, r8
 800c466:	464b      	mov	r3, r9
 800c468:	4630      	mov	r0, r6
 800c46a:	4639      	mov	r1, r7
 800c46c:	f7f4 fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c470:	b110      	cbz	r0, 800c478 <_dtoa_r+0x6d8>
 800c472:	9b02      	ldr	r3, [sp, #8]
 800c474:	07d9      	lsls	r1, r3, #31
 800c476:	d40f      	bmi.n	800c498 <_dtoa_r+0x6f8>
 800c478:	4620      	mov	r0, r4
 800c47a:	4659      	mov	r1, fp
 800c47c:	f000 facc 	bl	800ca18 <_Bfree>
 800c480:	2300      	movs	r3, #0
 800c482:	702b      	strb	r3, [r5, #0]
 800c484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c486:	f10a 0001 	add.w	r0, sl, #1
 800c48a:	6018      	str	r0, [r3, #0]
 800c48c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f43f acd8 	beq.w	800be44 <_dtoa_r+0xa4>
 800c494:	601d      	str	r5, [r3, #0]
 800c496:	e4d5      	b.n	800be44 <_dtoa_r+0xa4>
 800c498:	f8cd a01c 	str.w	sl, [sp, #28]
 800c49c:	462b      	mov	r3, r5
 800c49e:	461d      	mov	r5, r3
 800c4a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4a4:	2a39      	cmp	r2, #57	; 0x39
 800c4a6:	d108      	bne.n	800c4ba <_dtoa_r+0x71a>
 800c4a8:	9a00      	ldr	r2, [sp, #0]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d1f7      	bne.n	800c49e <_dtoa_r+0x6fe>
 800c4ae:	9a07      	ldr	r2, [sp, #28]
 800c4b0:	9900      	ldr	r1, [sp, #0]
 800c4b2:	3201      	adds	r2, #1
 800c4b4:	9207      	str	r2, [sp, #28]
 800c4b6:	2230      	movs	r2, #48	; 0x30
 800c4b8:	700a      	strb	r2, [r1, #0]
 800c4ba:	781a      	ldrb	r2, [r3, #0]
 800c4bc:	3201      	adds	r2, #1
 800c4be:	701a      	strb	r2, [r3, #0]
 800c4c0:	e78c      	b.n	800c3dc <_dtoa_r+0x63c>
 800c4c2:	4b7f      	ldr	r3, [pc, #508]	; (800c6c0 <_dtoa_r+0x920>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f7f4 f897 	bl	80005f8 <__aeabi_dmul>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	460f      	mov	r7, r1
 800c4d2:	f7f4 faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d09b      	beq.n	800c412 <_dtoa_r+0x672>
 800c4da:	e7cd      	b.n	800c478 <_dtoa_r+0x6d8>
 800c4dc:	9a08      	ldr	r2, [sp, #32]
 800c4de:	2a00      	cmp	r2, #0
 800c4e0:	f000 80c4 	beq.w	800c66c <_dtoa_r+0x8cc>
 800c4e4:	9a05      	ldr	r2, [sp, #20]
 800c4e6:	2a01      	cmp	r2, #1
 800c4e8:	f300 80a8 	bgt.w	800c63c <_dtoa_r+0x89c>
 800c4ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	f000 80a0 	beq.w	800c634 <_dtoa_r+0x894>
 800c4f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4f8:	9e06      	ldr	r6, [sp, #24]
 800c4fa:	4645      	mov	r5, r8
 800c4fc:	9a04      	ldr	r2, [sp, #16]
 800c4fe:	2101      	movs	r1, #1
 800c500:	441a      	add	r2, r3
 800c502:	4620      	mov	r0, r4
 800c504:	4498      	add	r8, r3
 800c506:	9204      	str	r2, [sp, #16]
 800c508:	f000 fb42 	bl	800cb90 <__i2b>
 800c50c:	4607      	mov	r7, r0
 800c50e:	2d00      	cmp	r5, #0
 800c510:	dd0b      	ble.n	800c52a <_dtoa_r+0x78a>
 800c512:	9b04      	ldr	r3, [sp, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	dd08      	ble.n	800c52a <_dtoa_r+0x78a>
 800c518:	42ab      	cmp	r3, r5
 800c51a:	9a04      	ldr	r2, [sp, #16]
 800c51c:	bfa8      	it	ge
 800c51e:	462b      	movge	r3, r5
 800c520:	eba8 0803 	sub.w	r8, r8, r3
 800c524:	1aed      	subs	r5, r5, r3
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	9304      	str	r3, [sp, #16]
 800c52a:	9b06      	ldr	r3, [sp, #24]
 800c52c:	b1fb      	cbz	r3, 800c56e <_dtoa_r+0x7ce>
 800c52e:	9b08      	ldr	r3, [sp, #32]
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 809f 	beq.w	800c674 <_dtoa_r+0x8d4>
 800c536:	2e00      	cmp	r6, #0
 800c538:	dd11      	ble.n	800c55e <_dtoa_r+0x7be>
 800c53a:	4639      	mov	r1, r7
 800c53c:	4632      	mov	r2, r6
 800c53e:	4620      	mov	r0, r4
 800c540:	f000 fbe2 	bl	800cd08 <__pow5mult>
 800c544:	465a      	mov	r2, fp
 800c546:	4601      	mov	r1, r0
 800c548:	4607      	mov	r7, r0
 800c54a:	4620      	mov	r0, r4
 800c54c:	f000 fb36 	bl	800cbbc <__multiply>
 800c550:	4659      	mov	r1, fp
 800c552:	9007      	str	r0, [sp, #28]
 800c554:	4620      	mov	r0, r4
 800c556:	f000 fa5f 	bl	800ca18 <_Bfree>
 800c55a:	9b07      	ldr	r3, [sp, #28]
 800c55c:	469b      	mov	fp, r3
 800c55e:	9b06      	ldr	r3, [sp, #24]
 800c560:	1b9a      	subs	r2, r3, r6
 800c562:	d004      	beq.n	800c56e <_dtoa_r+0x7ce>
 800c564:	4659      	mov	r1, fp
 800c566:	4620      	mov	r0, r4
 800c568:	f000 fbce 	bl	800cd08 <__pow5mult>
 800c56c:	4683      	mov	fp, r0
 800c56e:	2101      	movs	r1, #1
 800c570:	4620      	mov	r0, r4
 800c572:	f000 fb0d 	bl	800cb90 <__i2b>
 800c576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c578:	2b00      	cmp	r3, #0
 800c57a:	4606      	mov	r6, r0
 800c57c:	dd7c      	ble.n	800c678 <_dtoa_r+0x8d8>
 800c57e:	461a      	mov	r2, r3
 800c580:	4601      	mov	r1, r0
 800c582:	4620      	mov	r0, r4
 800c584:	f000 fbc0 	bl	800cd08 <__pow5mult>
 800c588:	9b05      	ldr	r3, [sp, #20]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	4606      	mov	r6, r0
 800c58e:	dd76      	ble.n	800c67e <_dtoa_r+0x8de>
 800c590:	2300      	movs	r3, #0
 800c592:	9306      	str	r3, [sp, #24]
 800c594:	6933      	ldr	r3, [r6, #16]
 800c596:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c59a:	6918      	ldr	r0, [r3, #16]
 800c59c:	f000 faa8 	bl	800caf0 <__hi0bits>
 800c5a0:	f1c0 0020 	rsb	r0, r0, #32
 800c5a4:	9b04      	ldr	r3, [sp, #16]
 800c5a6:	4418      	add	r0, r3
 800c5a8:	f010 001f 	ands.w	r0, r0, #31
 800c5ac:	f000 8086 	beq.w	800c6bc <_dtoa_r+0x91c>
 800c5b0:	f1c0 0320 	rsb	r3, r0, #32
 800c5b4:	2b04      	cmp	r3, #4
 800c5b6:	dd7f      	ble.n	800c6b8 <_dtoa_r+0x918>
 800c5b8:	f1c0 001c 	rsb	r0, r0, #28
 800c5bc:	9b04      	ldr	r3, [sp, #16]
 800c5be:	4403      	add	r3, r0
 800c5c0:	4480      	add	r8, r0
 800c5c2:	4405      	add	r5, r0
 800c5c4:	9304      	str	r3, [sp, #16]
 800c5c6:	f1b8 0f00 	cmp.w	r8, #0
 800c5ca:	dd05      	ble.n	800c5d8 <_dtoa_r+0x838>
 800c5cc:	4659      	mov	r1, fp
 800c5ce:	4642      	mov	r2, r8
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f000 fbf3 	bl	800cdbc <__lshift>
 800c5d6:	4683      	mov	fp, r0
 800c5d8:	9b04      	ldr	r3, [sp, #16]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	dd05      	ble.n	800c5ea <_dtoa_r+0x84a>
 800c5de:	4631      	mov	r1, r6
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 fbea 	bl	800cdbc <__lshift>
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d069      	beq.n	800c6c4 <_dtoa_r+0x924>
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4658      	mov	r0, fp
 800c5f4:	f000 fc4e 	bl	800ce94 <__mcmp>
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	da63      	bge.n	800c6c4 <_dtoa_r+0x924>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	4659      	mov	r1, fp
 800c600:	220a      	movs	r2, #10
 800c602:	4620      	mov	r0, r4
 800c604:	f000 fa2a 	bl	800ca5c <__multadd>
 800c608:	9b08      	ldr	r3, [sp, #32]
 800c60a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c60e:	4683      	mov	fp, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	f000 818f 	beq.w	800c934 <_dtoa_r+0xb94>
 800c616:	4639      	mov	r1, r7
 800c618:	2300      	movs	r3, #0
 800c61a:	220a      	movs	r2, #10
 800c61c:	4620      	mov	r0, r4
 800c61e:	f000 fa1d 	bl	800ca5c <__multadd>
 800c622:	f1b9 0f00 	cmp.w	r9, #0
 800c626:	4607      	mov	r7, r0
 800c628:	f300 808e 	bgt.w	800c748 <_dtoa_r+0x9a8>
 800c62c:	9b05      	ldr	r3, [sp, #20]
 800c62e:	2b02      	cmp	r3, #2
 800c630:	dc50      	bgt.n	800c6d4 <_dtoa_r+0x934>
 800c632:	e089      	b.n	800c748 <_dtoa_r+0x9a8>
 800c634:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c63a:	e75d      	b.n	800c4f8 <_dtoa_r+0x758>
 800c63c:	9b01      	ldr	r3, [sp, #4]
 800c63e:	1e5e      	subs	r6, r3, #1
 800c640:	9b06      	ldr	r3, [sp, #24]
 800c642:	42b3      	cmp	r3, r6
 800c644:	bfbf      	itttt	lt
 800c646:	9b06      	ldrlt	r3, [sp, #24]
 800c648:	9606      	strlt	r6, [sp, #24]
 800c64a:	1af2      	sublt	r2, r6, r3
 800c64c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c64e:	bfb6      	itet	lt
 800c650:	189b      	addlt	r3, r3, r2
 800c652:	1b9e      	subge	r6, r3, r6
 800c654:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c656:	9b01      	ldr	r3, [sp, #4]
 800c658:	bfb8      	it	lt
 800c65a:	2600      	movlt	r6, #0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	bfb5      	itete	lt
 800c660:	eba8 0503 	sublt.w	r5, r8, r3
 800c664:	9b01      	ldrge	r3, [sp, #4]
 800c666:	2300      	movlt	r3, #0
 800c668:	4645      	movge	r5, r8
 800c66a:	e747      	b.n	800c4fc <_dtoa_r+0x75c>
 800c66c:	9e06      	ldr	r6, [sp, #24]
 800c66e:	9f08      	ldr	r7, [sp, #32]
 800c670:	4645      	mov	r5, r8
 800c672:	e74c      	b.n	800c50e <_dtoa_r+0x76e>
 800c674:	9a06      	ldr	r2, [sp, #24]
 800c676:	e775      	b.n	800c564 <_dtoa_r+0x7c4>
 800c678:	9b05      	ldr	r3, [sp, #20]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	dc18      	bgt.n	800c6b0 <_dtoa_r+0x910>
 800c67e:	9b02      	ldr	r3, [sp, #8]
 800c680:	b9b3      	cbnz	r3, 800c6b0 <_dtoa_r+0x910>
 800c682:	9b03      	ldr	r3, [sp, #12]
 800c684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c688:	b9a3      	cbnz	r3, 800c6b4 <_dtoa_r+0x914>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c690:	0d1b      	lsrs	r3, r3, #20
 800c692:	051b      	lsls	r3, r3, #20
 800c694:	b12b      	cbz	r3, 800c6a2 <_dtoa_r+0x902>
 800c696:	9b04      	ldr	r3, [sp, #16]
 800c698:	3301      	adds	r3, #1
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	f108 0801 	add.w	r8, r8, #1
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	9306      	str	r3, [sp, #24]
 800c6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f47f af74 	bne.w	800c594 <_dtoa_r+0x7f4>
 800c6ac:	2001      	movs	r0, #1
 800c6ae:	e779      	b.n	800c5a4 <_dtoa_r+0x804>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	e7f6      	b.n	800c6a2 <_dtoa_r+0x902>
 800c6b4:	9b02      	ldr	r3, [sp, #8]
 800c6b6:	e7f4      	b.n	800c6a2 <_dtoa_r+0x902>
 800c6b8:	d085      	beq.n	800c5c6 <_dtoa_r+0x826>
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	301c      	adds	r0, #28
 800c6be:	e77d      	b.n	800c5bc <_dtoa_r+0x81c>
 800c6c0:	40240000 	.word	0x40240000
 800c6c4:	9b01      	ldr	r3, [sp, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	dc38      	bgt.n	800c73c <_dtoa_r+0x99c>
 800c6ca:	9b05      	ldr	r3, [sp, #20]
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	dd35      	ble.n	800c73c <_dtoa_r+0x99c>
 800c6d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c6d4:	f1b9 0f00 	cmp.w	r9, #0
 800c6d8:	d10d      	bne.n	800c6f6 <_dtoa_r+0x956>
 800c6da:	4631      	mov	r1, r6
 800c6dc:	464b      	mov	r3, r9
 800c6de:	2205      	movs	r2, #5
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 f9bb 	bl	800ca5c <__multadd>
 800c6e6:	4601      	mov	r1, r0
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	4658      	mov	r0, fp
 800c6ec:	f000 fbd2 	bl	800ce94 <__mcmp>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	f73f adbd 	bgt.w	800c270 <_dtoa_r+0x4d0>
 800c6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6f8:	9d00      	ldr	r5, [sp, #0]
 800c6fa:	ea6f 0a03 	mvn.w	sl, r3
 800c6fe:	f04f 0800 	mov.w	r8, #0
 800c702:	4631      	mov	r1, r6
 800c704:	4620      	mov	r0, r4
 800c706:	f000 f987 	bl	800ca18 <_Bfree>
 800c70a:	2f00      	cmp	r7, #0
 800c70c:	f43f aeb4 	beq.w	800c478 <_dtoa_r+0x6d8>
 800c710:	f1b8 0f00 	cmp.w	r8, #0
 800c714:	d005      	beq.n	800c722 <_dtoa_r+0x982>
 800c716:	45b8      	cmp	r8, r7
 800c718:	d003      	beq.n	800c722 <_dtoa_r+0x982>
 800c71a:	4641      	mov	r1, r8
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 f97b 	bl	800ca18 <_Bfree>
 800c722:	4639      	mov	r1, r7
 800c724:	4620      	mov	r0, r4
 800c726:	f000 f977 	bl	800ca18 <_Bfree>
 800c72a:	e6a5      	b.n	800c478 <_dtoa_r+0x6d8>
 800c72c:	2600      	movs	r6, #0
 800c72e:	4637      	mov	r7, r6
 800c730:	e7e1      	b.n	800c6f6 <_dtoa_r+0x956>
 800c732:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c734:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c738:	4637      	mov	r7, r6
 800c73a:	e599      	b.n	800c270 <_dtoa_r+0x4d0>
 800c73c:	9b08      	ldr	r3, [sp, #32]
 800c73e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 80fd 	beq.w	800c942 <_dtoa_r+0xba2>
 800c748:	2d00      	cmp	r5, #0
 800c74a:	dd05      	ble.n	800c758 <_dtoa_r+0x9b8>
 800c74c:	4639      	mov	r1, r7
 800c74e:	462a      	mov	r2, r5
 800c750:	4620      	mov	r0, r4
 800c752:	f000 fb33 	bl	800cdbc <__lshift>
 800c756:	4607      	mov	r7, r0
 800c758:	9b06      	ldr	r3, [sp, #24]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d05c      	beq.n	800c818 <_dtoa_r+0xa78>
 800c75e:	6879      	ldr	r1, [r7, #4]
 800c760:	4620      	mov	r0, r4
 800c762:	f000 f919 	bl	800c998 <_Balloc>
 800c766:	4605      	mov	r5, r0
 800c768:	b928      	cbnz	r0, 800c776 <_dtoa_r+0x9d6>
 800c76a:	4b80      	ldr	r3, [pc, #512]	; (800c96c <_dtoa_r+0xbcc>)
 800c76c:	4602      	mov	r2, r0
 800c76e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c772:	f7ff bb2e 	b.w	800bdd2 <_dtoa_r+0x32>
 800c776:	693a      	ldr	r2, [r7, #16]
 800c778:	3202      	adds	r2, #2
 800c77a:	0092      	lsls	r2, r2, #2
 800c77c:	f107 010c 	add.w	r1, r7, #12
 800c780:	300c      	adds	r0, #12
 800c782:	f7fe fd35 	bl	800b1f0 <memcpy>
 800c786:	2201      	movs	r2, #1
 800c788:	4629      	mov	r1, r5
 800c78a:	4620      	mov	r0, r4
 800c78c:	f000 fb16 	bl	800cdbc <__lshift>
 800c790:	9b00      	ldr	r3, [sp, #0]
 800c792:	3301      	adds	r3, #1
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	9b00      	ldr	r3, [sp, #0]
 800c798:	444b      	add	r3, r9
 800c79a:	9307      	str	r3, [sp, #28]
 800c79c:	9b02      	ldr	r3, [sp, #8]
 800c79e:	f003 0301 	and.w	r3, r3, #1
 800c7a2:	46b8      	mov	r8, r7
 800c7a4:	9306      	str	r3, [sp, #24]
 800c7a6:	4607      	mov	r7, r0
 800c7a8:	9b01      	ldr	r3, [sp, #4]
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	4658      	mov	r0, fp
 800c7b0:	9302      	str	r3, [sp, #8]
 800c7b2:	f7ff fa67 	bl	800bc84 <quorem>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	3330      	adds	r3, #48	; 0x30
 800c7ba:	9004      	str	r0, [sp, #16]
 800c7bc:	4641      	mov	r1, r8
 800c7be:	4658      	mov	r0, fp
 800c7c0:	9308      	str	r3, [sp, #32]
 800c7c2:	f000 fb67 	bl	800ce94 <__mcmp>
 800c7c6:	463a      	mov	r2, r7
 800c7c8:	4681      	mov	r9, r0
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f000 fb7d 	bl	800cecc <__mdiff>
 800c7d2:	68c2      	ldr	r2, [r0, #12]
 800c7d4:	9b08      	ldr	r3, [sp, #32]
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	bb02      	cbnz	r2, 800c81c <_dtoa_r+0xa7c>
 800c7da:	4601      	mov	r1, r0
 800c7dc:	4658      	mov	r0, fp
 800c7de:	f000 fb59 	bl	800ce94 <__mcmp>
 800c7e2:	9b08      	ldr	r3, [sp, #32]
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c7ee:	f000 f913 	bl	800ca18 <_Bfree>
 800c7f2:	9b05      	ldr	r3, [sp, #20]
 800c7f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7f6:	9d01      	ldr	r5, [sp, #4]
 800c7f8:	ea43 0102 	orr.w	r1, r3, r2
 800c7fc:	9b06      	ldr	r3, [sp, #24]
 800c7fe:	430b      	orrs	r3, r1
 800c800:	9b08      	ldr	r3, [sp, #32]
 800c802:	d10d      	bne.n	800c820 <_dtoa_r+0xa80>
 800c804:	2b39      	cmp	r3, #57	; 0x39
 800c806:	d029      	beq.n	800c85c <_dtoa_r+0xabc>
 800c808:	f1b9 0f00 	cmp.w	r9, #0
 800c80c:	dd01      	ble.n	800c812 <_dtoa_r+0xa72>
 800c80e:	9b04      	ldr	r3, [sp, #16]
 800c810:	3331      	adds	r3, #49	; 0x31
 800c812:	9a02      	ldr	r2, [sp, #8]
 800c814:	7013      	strb	r3, [r2, #0]
 800c816:	e774      	b.n	800c702 <_dtoa_r+0x962>
 800c818:	4638      	mov	r0, r7
 800c81a:	e7b9      	b.n	800c790 <_dtoa_r+0x9f0>
 800c81c:	2201      	movs	r2, #1
 800c81e:	e7e2      	b.n	800c7e6 <_dtoa_r+0xa46>
 800c820:	f1b9 0f00 	cmp.w	r9, #0
 800c824:	db06      	blt.n	800c834 <_dtoa_r+0xa94>
 800c826:	9905      	ldr	r1, [sp, #20]
 800c828:	ea41 0909 	orr.w	r9, r1, r9
 800c82c:	9906      	ldr	r1, [sp, #24]
 800c82e:	ea59 0101 	orrs.w	r1, r9, r1
 800c832:	d120      	bne.n	800c876 <_dtoa_r+0xad6>
 800c834:	2a00      	cmp	r2, #0
 800c836:	ddec      	ble.n	800c812 <_dtoa_r+0xa72>
 800c838:	4659      	mov	r1, fp
 800c83a:	2201      	movs	r2, #1
 800c83c:	4620      	mov	r0, r4
 800c83e:	9301      	str	r3, [sp, #4]
 800c840:	f000 fabc 	bl	800cdbc <__lshift>
 800c844:	4631      	mov	r1, r6
 800c846:	4683      	mov	fp, r0
 800c848:	f000 fb24 	bl	800ce94 <__mcmp>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	9b01      	ldr	r3, [sp, #4]
 800c850:	dc02      	bgt.n	800c858 <_dtoa_r+0xab8>
 800c852:	d1de      	bne.n	800c812 <_dtoa_r+0xa72>
 800c854:	07da      	lsls	r2, r3, #31
 800c856:	d5dc      	bpl.n	800c812 <_dtoa_r+0xa72>
 800c858:	2b39      	cmp	r3, #57	; 0x39
 800c85a:	d1d8      	bne.n	800c80e <_dtoa_r+0xa6e>
 800c85c:	9a02      	ldr	r2, [sp, #8]
 800c85e:	2339      	movs	r3, #57	; 0x39
 800c860:	7013      	strb	r3, [r2, #0]
 800c862:	462b      	mov	r3, r5
 800c864:	461d      	mov	r5, r3
 800c866:	3b01      	subs	r3, #1
 800c868:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c86c:	2a39      	cmp	r2, #57	; 0x39
 800c86e:	d050      	beq.n	800c912 <_dtoa_r+0xb72>
 800c870:	3201      	adds	r2, #1
 800c872:	701a      	strb	r2, [r3, #0]
 800c874:	e745      	b.n	800c702 <_dtoa_r+0x962>
 800c876:	2a00      	cmp	r2, #0
 800c878:	dd03      	ble.n	800c882 <_dtoa_r+0xae2>
 800c87a:	2b39      	cmp	r3, #57	; 0x39
 800c87c:	d0ee      	beq.n	800c85c <_dtoa_r+0xabc>
 800c87e:	3301      	adds	r3, #1
 800c880:	e7c7      	b.n	800c812 <_dtoa_r+0xa72>
 800c882:	9a01      	ldr	r2, [sp, #4]
 800c884:	9907      	ldr	r1, [sp, #28]
 800c886:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c88a:	428a      	cmp	r2, r1
 800c88c:	d02a      	beq.n	800c8e4 <_dtoa_r+0xb44>
 800c88e:	4659      	mov	r1, fp
 800c890:	2300      	movs	r3, #0
 800c892:	220a      	movs	r2, #10
 800c894:	4620      	mov	r0, r4
 800c896:	f000 f8e1 	bl	800ca5c <__multadd>
 800c89a:	45b8      	cmp	r8, r7
 800c89c:	4683      	mov	fp, r0
 800c89e:	f04f 0300 	mov.w	r3, #0
 800c8a2:	f04f 020a 	mov.w	r2, #10
 800c8a6:	4641      	mov	r1, r8
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	d107      	bne.n	800c8bc <_dtoa_r+0xb1c>
 800c8ac:	f000 f8d6 	bl	800ca5c <__multadd>
 800c8b0:	4680      	mov	r8, r0
 800c8b2:	4607      	mov	r7, r0
 800c8b4:	9b01      	ldr	r3, [sp, #4]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	9301      	str	r3, [sp, #4]
 800c8ba:	e775      	b.n	800c7a8 <_dtoa_r+0xa08>
 800c8bc:	f000 f8ce 	bl	800ca5c <__multadd>
 800c8c0:	4639      	mov	r1, r7
 800c8c2:	4680      	mov	r8, r0
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	220a      	movs	r2, #10
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f000 f8c7 	bl	800ca5c <__multadd>
 800c8ce:	4607      	mov	r7, r0
 800c8d0:	e7f0      	b.n	800c8b4 <_dtoa_r+0xb14>
 800c8d2:	f1b9 0f00 	cmp.w	r9, #0
 800c8d6:	9a00      	ldr	r2, [sp, #0]
 800c8d8:	bfcc      	ite	gt
 800c8da:	464d      	movgt	r5, r9
 800c8dc:	2501      	movle	r5, #1
 800c8de:	4415      	add	r5, r2
 800c8e0:	f04f 0800 	mov.w	r8, #0
 800c8e4:	4659      	mov	r1, fp
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	9301      	str	r3, [sp, #4]
 800c8ec:	f000 fa66 	bl	800cdbc <__lshift>
 800c8f0:	4631      	mov	r1, r6
 800c8f2:	4683      	mov	fp, r0
 800c8f4:	f000 face 	bl	800ce94 <__mcmp>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	dcb2      	bgt.n	800c862 <_dtoa_r+0xac2>
 800c8fc:	d102      	bne.n	800c904 <_dtoa_r+0xb64>
 800c8fe:	9b01      	ldr	r3, [sp, #4]
 800c900:	07db      	lsls	r3, r3, #31
 800c902:	d4ae      	bmi.n	800c862 <_dtoa_r+0xac2>
 800c904:	462b      	mov	r3, r5
 800c906:	461d      	mov	r5, r3
 800c908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c90c:	2a30      	cmp	r2, #48	; 0x30
 800c90e:	d0fa      	beq.n	800c906 <_dtoa_r+0xb66>
 800c910:	e6f7      	b.n	800c702 <_dtoa_r+0x962>
 800c912:	9a00      	ldr	r2, [sp, #0]
 800c914:	429a      	cmp	r2, r3
 800c916:	d1a5      	bne.n	800c864 <_dtoa_r+0xac4>
 800c918:	f10a 0a01 	add.w	sl, sl, #1
 800c91c:	2331      	movs	r3, #49	; 0x31
 800c91e:	e779      	b.n	800c814 <_dtoa_r+0xa74>
 800c920:	4b13      	ldr	r3, [pc, #76]	; (800c970 <_dtoa_r+0xbd0>)
 800c922:	f7ff baaf 	b.w	800be84 <_dtoa_r+0xe4>
 800c926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f47f aa86 	bne.w	800be3a <_dtoa_r+0x9a>
 800c92e:	4b11      	ldr	r3, [pc, #68]	; (800c974 <_dtoa_r+0xbd4>)
 800c930:	f7ff baa8 	b.w	800be84 <_dtoa_r+0xe4>
 800c934:	f1b9 0f00 	cmp.w	r9, #0
 800c938:	dc03      	bgt.n	800c942 <_dtoa_r+0xba2>
 800c93a:	9b05      	ldr	r3, [sp, #20]
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	f73f aec9 	bgt.w	800c6d4 <_dtoa_r+0x934>
 800c942:	9d00      	ldr	r5, [sp, #0]
 800c944:	4631      	mov	r1, r6
 800c946:	4658      	mov	r0, fp
 800c948:	f7ff f99c 	bl	800bc84 <quorem>
 800c94c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c950:	f805 3b01 	strb.w	r3, [r5], #1
 800c954:	9a00      	ldr	r2, [sp, #0]
 800c956:	1aaa      	subs	r2, r5, r2
 800c958:	4591      	cmp	r9, r2
 800c95a:	ddba      	ble.n	800c8d2 <_dtoa_r+0xb32>
 800c95c:	4659      	mov	r1, fp
 800c95e:	2300      	movs	r3, #0
 800c960:	220a      	movs	r2, #10
 800c962:	4620      	mov	r0, r4
 800c964:	f000 f87a 	bl	800ca5c <__multadd>
 800c968:	4683      	mov	fp, r0
 800c96a:	e7eb      	b.n	800c944 <_dtoa_r+0xba4>
 800c96c:	0800dd63 	.word	0x0800dd63
 800c970:	0800dcbc 	.word	0x0800dcbc
 800c974:	0800dce0 	.word	0x0800dce0

0800c978 <_localeconv_r>:
 800c978:	4800      	ldr	r0, [pc, #0]	; (800c97c <_localeconv_r+0x4>)
 800c97a:	4770      	bx	lr
 800c97c:	20000298 	.word	0x20000298

0800c980 <__malloc_lock>:
 800c980:	4801      	ldr	r0, [pc, #4]	; (800c988 <__malloc_lock+0x8>)
 800c982:	f000 bbb8 	b.w	800d0f6 <__retarget_lock_acquire_recursive>
 800c986:	bf00      	nop
 800c988:	20008950 	.word	0x20008950

0800c98c <__malloc_unlock>:
 800c98c:	4801      	ldr	r0, [pc, #4]	; (800c994 <__malloc_unlock+0x8>)
 800c98e:	f000 bbb3 	b.w	800d0f8 <__retarget_lock_release_recursive>
 800c992:	bf00      	nop
 800c994:	20008950 	.word	0x20008950

0800c998 <_Balloc>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c99c:	4604      	mov	r4, r0
 800c99e:	460d      	mov	r5, r1
 800c9a0:	b976      	cbnz	r6, 800c9c0 <_Balloc+0x28>
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	f7fe fc1c 	bl	800b1e0 <malloc>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	6260      	str	r0, [r4, #36]	; 0x24
 800c9ac:	b920      	cbnz	r0, 800c9b8 <_Balloc+0x20>
 800c9ae:	4b18      	ldr	r3, [pc, #96]	; (800ca10 <_Balloc+0x78>)
 800c9b0:	4818      	ldr	r0, [pc, #96]	; (800ca14 <_Balloc+0x7c>)
 800c9b2:	2166      	movs	r1, #102	; 0x66
 800c9b4:	f000 fb6e 	bl	800d094 <__assert_func>
 800c9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9bc:	6006      	str	r6, [r0, #0]
 800c9be:	60c6      	str	r6, [r0, #12]
 800c9c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9c2:	68f3      	ldr	r3, [r6, #12]
 800c9c4:	b183      	cbz	r3, 800c9e8 <_Balloc+0x50>
 800c9c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ce:	b9b8      	cbnz	r0, 800ca00 <_Balloc+0x68>
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	fa01 f605 	lsl.w	r6, r1, r5
 800c9d6:	1d72      	adds	r2, r6, #5
 800c9d8:	0092      	lsls	r2, r2, #2
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f7fe fc1e 	bl	800b21c <_calloc_r>
 800c9e0:	b160      	cbz	r0, 800c9fc <_Balloc+0x64>
 800c9e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9e6:	e00e      	b.n	800ca06 <_Balloc+0x6e>
 800c9e8:	2221      	movs	r2, #33	; 0x21
 800c9ea:	2104      	movs	r1, #4
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f7fe fc15 	bl	800b21c <_calloc_r>
 800c9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9f4:	60f0      	str	r0, [r6, #12]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e4      	bne.n	800c9c6 <_Balloc+0x2e>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	6802      	ldr	r2, [r0, #0]
 800ca02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca06:	2300      	movs	r3, #0
 800ca08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca0c:	e7f7      	b.n	800c9fe <_Balloc+0x66>
 800ca0e:	bf00      	nop
 800ca10:	0800dced 	.word	0x0800dced
 800ca14:	0800dd74 	.word	0x0800dd74

0800ca18 <_Bfree>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	460c      	mov	r4, r1
 800ca20:	b976      	cbnz	r6, 800ca40 <_Bfree+0x28>
 800ca22:	2010      	movs	r0, #16
 800ca24:	f7fe fbdc 	bl	800b1e0 <malloc>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	6268      	str	r0, [r5, #36]	; 0x24
 800ca2c:	b920      	cbnz	r0, 800ca38 <_Bfree+0x20>
 800ca2e:	4b09      	ldr	r3, [pc, #36]	; (800ca54 <_Bfree+0x3c>)
 800ca30:	4809      	ldr	r0, [pc, #36]	; (800ca58 <_Bfree+0x40>)
 800ca32:	218a      	movs	r1, #138	; 0x8a
 800ca34:	f000 fb2e 	bl	800d094 <__assert_func>
 800ca38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca3c:	6006      	str	r6, [r0, #0]
 800ca3e:	60c6      	str	r6, [r0, #12]
 800ca40:	b13c      	cbz	r4, 800ca52 <_Bfree+0x3a>
 800ca42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca44:	6862      	ldr	r2, [r4, #4]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca4c:	6021      	str	r1, [r4, #0]
 800ca4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	0800dced 	.word	0x0800dced
 800ca58:	0800dd74 	.word	0x0800dd74

0800ca5c <__multadd>:
 800ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca60:	690e      	ldr	r6, [r1, #16]
 800ca62:	4607      	mov	r7, r0
 800ca64:	4698      	mov	r8, r3
 800ca66:	460c      	mov	r4, r1
 800ca68:	f101 0014 	add.w	r0, r1, #20
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6805      	ldr	r5, [r0, #0]
 800ca70:	b2a9      	uxth	r1, r5
 800ca72:	fb02 8101 	mla	r1, r2, r1, r8
 800ca76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ca7a:	0c2d      	lsrs	r5, r5, #16
 800ca7c:	fb02 c505 	mla	r5, r2, r5, ip
 800ca80:	b289      	uxth	r1, r1
 800ca82:	3301      	adds	r3, #1
 800ca84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ca88:	429e      	cmp	r6, r3
 800ca8a:	f840 1b04 	str.w	r1, [r0], #4
 800ca8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ca92:	dcec      	bgt.n	800ca6e <__multadd+0x12>
 800ca94:	f1b8 0f00 	cmp.w	r8, #0
 800ca98:	d022      	beq.n	800cae0 <__multadd+0x84>
 800ca9a:	68a3      	ldr	r3, [r4, #8]
 800ca9c:	42b3      	cmp	r3, r6
 800ca9e:	dc19      	bgt.n	800cad4 <__multadd+0x78>
 800caa0:	6861      	ldr	r1, [r4, #4]
 800caa2:	4638      	mov	r0, r7
 800caa4:	3101      	adds	r1, #1
 800caa6:	f7ff ff77 	bl	800c998 <_Balloc>
 800caaa:	4605      	mov	r5, r0
 800caac:	b928      	cbnz	r0, 800caba <__multadd+0x5e>
 800caae:	4602      	mov	r2, r0
 800cab0:	4b0d      	ldr	r3, [pc, #52]	; (800cae8 <__multadd+0x8c>)
 800cab2:	480e      	ldr	r0, [pc, #56]	; (800caec <__multadd+0x90>)
 800cab4:	21b5      	movs	r1, #181	; 0xb5
 800cab6:	f000 faed 	bl	800d094 <__assert_func>
 800caba:	6922      	ldr	r2, [r4, #16]
 800cabc:	3202      	adds	r2, #2
 800cabe:	f104 010c 	add.w	r1, r4, #12
 800cac2:	0092      	lsls	r2, r2, #2
 800cac4:	300c      	adds	r0, #12
 800cac6:	f7fe fb93 	bl	800b1f0 <memcpy>
 800caca:	4621      	mov	r1, r4
 800cacc:	4638      	mov	r0, r7
 800cace:	f7ff ffa3 	bl	800ca18 <_Bfree>
 800cad2:	462c      	mov	r4, r5
 800cad4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cad8:	3601      	adds	r6, #1
 800cada:	f8c3 8014 	str.w	r8, [r3, #20]
 800cade:	6126      	str	r6, [r4, #16]
 800cae0:	4620      	mov	r0, r4
 800cae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae6:	bf00      	nop
 800cae8:	0800dd63 	.word	0x0800dd63
 800caec:	0800dd74 	.word	0x0800dd74

0800caf0 <__hi0bits>:
 800caf0:	0c03      	lsrs	r3, r0, #16
 800caf2:	041b      	lsls	r3, r3, #16
 800caf4:	b9d3      	cbnz	r3, 800cb2c <__hi0bits+0x3c>
 800caf6:	0400      	lsls	r0, r0, #16
 800caf8:	2310      	movs	r3, #16
 800cafa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cafe:	bf04      	itt	eq
 800cb00:	0200      	lsleq	r0, r0, #8
 800cb02:	3308      	addeq	r3, #8
 800cb04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb08:	bf04      	itt	eq
 800cb0a:	0100      	lsleq	r0, r0, #4
 800cb0c:	3304      	addeq	r3, #4
 800cb0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb12:	bf04      	itt	eq
 800cb14:	0080      	lsleq	r0, r0, #2
 800cb16:	3302      	addeq	r3, #2
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	db05      	blt.n	800cb28 <__hi0bits+0x38>
 800cb1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb20:	f103 0301 	add.w	r3, r3, #1
 800cb24:	bf08      	it	eq
 800cb26:	2320      	moveq	r3, #32
 800cb28:	4618      	mov	r0, r3
 800cb2a:	4770      	bx	lr
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	e7e4      	b.n	800cafa <__hi0bits+0xa>

0800cb30 <__lo0bits>:
 800cb30:	6803      	ldr	r3, [r0, #0]
 800cb32:	f013 0207 	ands.w	r2, r3, #7
 800cb36:	4601      	mov	r1, r0
 800cb38:	d00b      	beq.n	800cb52 <__lo0bits+0x22>
 800cb3a:	07da      	lsls	r2, r3, #31
 800cb3c:	d424      	bmi.n	800cb88 <__lo0bits+0x58>
 800cb3e:	0798      	lsls	r0, r3, #30
 800cb40:	bf49      	itett	mi
 800cb42:	085b      	lsrmi	r3, r3, #1
 800cb44:	089b      	lsrpl	r3, r3, #2
 800cb46:	2001      	movmi	r0, #1
 800cb48:	600b      	strmi	r3, [r1, #0]
 800cb4a:	bf5c      	itt	pl
 800cb4c:	600b      	strpl	r3, [r1, #0]
 800cb4e:	2002      	movpl	r0, #2
 800cb50:	4770      	bx	lr
 800cb52:	b298      	uxth	r0, r3
 800cb54:	b9b0      	cbnz	r0, 800cb84 <__lo0bits+0x54>
 800cb56:	0c1b      	lsrs	r3, r3, #16
 800cb58:	2010      	movs	r0, #16
 800cb5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb5e:	bf04      	itt	eq
 800cb60:	0a1b      	lsreq	r3, r3, #8
 800cb62:	3008      	addeq	r0, #8
 800cb64:	071a      	lsls	r2, r3, #28
 800cb66:	bf04      	itt	eq
 800cb68:	091b      	lsreq	r3, r3, #4
 800cb6a:	3004      	addeq	r0, #4
 800cb6c:	079a      	lsls	r2, r3, #30
 800cb6e:	bf04      	itt	eq
 800cb70:	089b      	lsreq	r3, r3, #2
 800cb72:	3002      	addeq	r0, #2
 800cb74:	07da      	lsls	r2, r3, #31
 800cb76:	d403      	bmi.n	800cb80 <__lo0bits+0x50>
 800cb78:	085b      	lsrs	r3, r3, #1
 800cb7a:	f100 0001 	add.w	r0, r0, #1
 800cb7e:	d005      	beq.n	800cb8c <__lo0bits+0x5c>
 800cb80:	600b      	str	r3, [r1, #0]
 800cb82:	4770      	bx	lr
 800cb84:	4610      	mov	r0, r2
 800cb86:	e7e8      	b.n	800cb5a <__lo0bits+0x2a>
 800cb88:	2000      	movs	r0, #0
 800cb8a:	4770      	bx	lr
 800cb8c:	2020      	movs	r0, #32
 800cb8e:	4770      	bx	lr

0800cb90 <__i2b>:
 800cb90:	b510      	push	{r4, lr}
 800cb92:	460c      	mov	r4, r1
 800cb94:	2101      	movs	r1, #1
 800cb96:	f7ff feff 	bl	800c998 <_Balloc>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	b928      	cbnz	r0, 800cbaa <__i2b+0x1a>
 800cb9e:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <__i2b+0x24>)
 800cba0:	4805      	ldr	r0, [pc, #20]	; (800cbb8 <__i2b+0x28>)
 800cba2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cba6:	f000 fa75 	bl	800d094 <__assert_func>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	6144      	str	r4, [r0, #20]
 800cbae:	6103      	str	r3, [r0, #16]
 800cbb0:	bd10      	pop	{r4, pc}
 800cbb2:	bf00      	nop
 800cbb4:	0800dd63 	.word	0x0800dd63
 800cbb8:	0800dd74 	.word	0x0800dd74

0800cbbc <__multiply>:
 800cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	4614      	mov	r4, r2
 800cbc2:	690a      	ldr	r2, [r1, #16]
 800cbc4:	6923      	ldr	r3, [r4, #16]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	bfb8      	it	lt
 800cbca:	460b      	movlt	r3, r1
 800cbcc:	460d      	mov	r5, r1
 800cbce:	bfbc      	itt	lt
 800cbd0:	4625      	movlt	r5, r4
 800cbd2:	461c      	movlt	r4, r3
 800cbd4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cbd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cbdc:	68ab      	ldr	r3, [r5, #8]
 800cbde:	6869      	ldr	r1, [r5, #4]
 800cbe0:	eb0a 0709 	add.w	r7, sl, r9
 800cbe4:	42bb      	cmp	r3, r7
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	bfb8      	it	lt
 800cbea:	3101      	addlt	r1, #1
 800cbec:	f7ff fed4 	bl	800c998 <_Balloc>
 800cbf0:	b930      	cbnz	r0, 800cc00 <__multiply+0x44>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	4b42      	ldr	r3, [pc, #264]	; (800cd00 <__multiply+0x144>)
 800cbf6:	4843      	ldr	r0, [pc, #268]	; (800cd04 <__multiply+0x148>)
 800cbf8:	f240 115d 	movw	r1, #349	; 0x15d
 800cbfc:	f000 fa4a 	bl	800d094 <__assert_func>
 800cc00:	f100 0614 	add.w	r6, r0, #20
 800cc04:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cc08:	4633      	mov	r3, r6
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	4543      	cmp	r3, r8
 800cc0e:	d31e      	bcc.n	800cc4e <__multiply+0x92>
 800cc10:	f105 0c14 	add.w	ip, r5, #20
 800cc14:	f104 0314 	add.w	r3, r4, #20
 800cc18:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cc1c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cc20:	9202      	str	r2, [sp, #8]
 800cc22:	ebac 0205 	sub.w	r2, ip, r5
 800cc26:	3a15      	subs	r2, #21
 800cc28:	f022 0203 	bic.w	r2, r2, #3
 800cc2c:	3204      	adds	r2, #4
 800cc2e:	f105 0115 	add.w	r1, r5, #21
 800cc32:	458c      	cmp	ip, r1
 800cc34:	bf38      	it	cc
 800cc36:	2204      	movcc	r2, #4
 800cc38:	9201      	str	r2, [sp, #4]
 800cc3a:	9a02      	ldr	r2, [sp, #8]
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d808      	bhi.n	800cc54 <__multiply+0x98>
 800cc42:	2f00      	cmp	r7, #0
 800cc44:	dc55      	bgt.n	800ccf2 <__multiply+0x136>
 800cc46:	6107      	str	r7, [r0, #16]
 800cc48:	b005      	add	sp, #20
 800cc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4e:	f843 2b04 	str.w	r2, [r3], #4
 800cc52:	e7db      	b.n	800cc0c <__multiply+0x50>
 800cc54:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc58:	f1ba 0f00 	cmp.w	sl, #0
 800cc5c:	d020      	beq.n	800cca0 <__multiply+0xe4>
 800cc5e:	f105 0e14 	add.w	lr, r5, #20
 800cc62:	46b1      	mov	r9, r6
 800cc64:	2200      	movs	r2, #0
 800cc66:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cc6a:	f8d9 b000 	ldr.w	fp, [r9]
 800cc6e:	b2a1      	uxth	r1, r4
 800cc70:	fa1f fb8b 	uxth.w	fp, fp
 800cc74:	fb0a b101 	mla	r1, sl, r1, fp
 800cc78:	4411      	add	r1, r2
 800cc7a:	f8d9 2000 	ldr.w	r2, [r9]
 800cc7e:	0c24      	lsrs	r4, r4, #16
 800cc80:	0c12      	lsrs	r2, r2, #16
 800cc82:	fb0a 2404 	mla	r4, sl, r4, r2
 800cc86:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cc8a:	b289      	uxth	r1, r1
 800cc8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cc90:	45f4      	cmp	ip, lr
 800cc92:	f849 1b04 	str.w	r1, [r9], #4
 800cc96:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cc9a:	d8e4      	bhi.n	800cc66 <__multiply+0xaa>
 800cc9c:	9901      	ldr	r1, [sp, #4]
 800cc9e:	5072      	str	r2, [r6, r1]
 800cca0:	9a03      	ldr	r2, [sp, #12]
 800cca2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cca6:	3304      	adds	r3, #4
 800cca8:	f1b9 0f00 	cmp.w	r9, #0
 800ccac:	d01f      	beq.n	800ccee <__multiply+0x132>
 800ccae:	6834      	ldr	r4, [r6, #0]
 800ccb0:	f105 0114 	add.w	r1, r5, #20
 800ccb4:	46b6      	mov	lr, r6
 800ccb6:	f04f 0a00 	mov.w	sl, #0
 800ccba:	880a      	ldrh	r2, [r1, #0]
 800ccbc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ccc0:	fb09 b202 	mla	r2, r9, r2, fp
 800ccc4:	4492      	add	sl, r2
 800ccc6:	b2a4      	uxth	r4, r4
 800ccc8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cccc:	f84e 4b04 	str.w	r4, [lr], #4
 800ccd0:	f851 4b04 	ldr.w	r4, [r1], #4
 800ccd4:	f8be 2000 	ldrh.w	r2, [lr]
 800ccd8:	0c24      	lsrs	r4, r4, #16
 800ccda:	fb09 2404 	mla	r4, r9, r4, r2
 800ccde:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cce2:	458c      	cmp	ip, r1
 800cce4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cce8:	d8e7      	bhi.n	800ccba <__multiply+0xfe>
 800ccea:	9a01      	ldr	r2, [sp, #4]
 800ccec:	50b4      	str	r4, [r6, r2]
 800ccee:	3604      	adds	r6, #4
 800ccf0:	e7a3      	b.n	800cc3a <__multiply+0x7e>
 800ccf2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1a5      	bne.n	800cc46 <__multiply+0x8a>
 800ccfa:	3f01      	subs	r7, #1
 800ccfc:	e7a1      	b.n	800cc42 <__multiply+0x86>
 800ccfe:	bf00      	nop
 800cd00:	0800dd63 	.word	0x0800dd63
 800cd04:	0800dd74 	.word	0x0800dd74

0800cd08 <__pow5mult>:
 800cd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd0c:	4615      	mov	r5, r2
 800cd0e:	f012 0203 	ands.w	r2, r2, #3
 800cd12:	4606      	mov	r6, r0
 800cd14:	460f      	mov	r7, r1
 800cd16:	d007      	beq.n	800cd28 <__pow5mult+0x20>
 800cd18:	4c25      	ldr	r4, [pc, #148]	; (800cdb0 <__pow5mult+0xa8>)
 800cd1a:	3a01      	subs	r2, #1
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd22:	f7ff fe9b 	bl	800ca5c <__multadd>
 800cd26:	4607      	mov	r7, r0
 800cd28:	10ad      	asrs	r5, r5, #2
 800cd2a:	d03d      	beq.n	800cda8 <__pow5mult+0xa0>
 800cd2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd2e:	b97c      	cbnz	r4, 800cd50 <__pow5mult+0x48>
 800cd30:	2010      	movs	r0, #16
 800cd32:	f7fe fa55 	bl	800b1e0 <malloc>
 800cd36:	4602      	mov	r2, r0
 800cd38:	6270      	str	r0, [r6, #36]	; 0x24
 800cd3a:	b928      	cbnz	r0, 800cd48 <__pow5mult+0x40>
 800cd3c:	4b1d      	ldr	r3, [pc, #116]	; (800cdb4 <__pow5mult+0xac>)
 800cd3e:	481e      	ldr	r0, [pc, #120]	; (800cdb8 <__pow5mult+0xb0>)
 800cd40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd44:	f000 f9a6 	bl	800d094 <__assert_func>
 800cd48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd4c:	6004      	str	r4, [r0, #0]
 800cd4e:	60c4      	str	r4, [r0, #12]
 800cd50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd58:	b94c      	cbnz	r4, 800cd6e <__pow5mult+0x66>
 800cd5a:	f240 2171 	movw	r1, #625	; 0x271
 800cd5e:	4630      	mov	r0, r6
 800cd60:	f7ff ff16 	bl	800cb90 <__i2b>
 800cd64:	2300      	movs	r3, #0
 800cd66:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	6003      	str	r3, [r0, #0]
 800cd6e:	f04f 0900 	mov.w	r9, #0
 800cd72:	07eb      	lsls	r3, r5, #31
 800cd74:	d50a      	bpl.n	800cd8c <__pow5mult+0x84>
 800cd76:	4639      	mov	r1, r7
 800cd78:	4622      	mov	r2, r4
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f7ff ff1e 	bl	800cbbc <__multiply>
 800cd80:	4639      	mov	r1, r7
 800cd82:	4680      	mov	r8, r0
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7ff fe47 	bl	800ca18 <_Bfree>
 800cd8a:	4647      	mov	r7, r8
 800cd8c:	106d      	asrs	r5, r5, #1
 800cd8e:	d00b      	beq.n	800cda8 <__pow5mult+0xa0>
 800cd90:	6820      	ldr	r0, [r4, #0]
 800cd92:	b938      	cbnz	r0, 800cda4 <__pow5mult+0x9c>
 800cd94:	4622      	mov	r2, r4
 800cd96:	4621      	mov	r1, r4
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7ff ff0f 	bl	800cbbc <__multiply>
 800cd9e:	6020      	str	r0, [r4, #0]
 800cda0:	f8c0 9000 	str.w	r9, [r0]
 800cda4:	4604      	mov	r4, r0
 800cda6:	e7e4      	b.n	800cd72 <__pow5mult+0x6a>
 800cda8:	4638      	mov	r0, r7
 800cdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdae:	bf00      	nop
 800cdb0:	0800dec8 	.word	0x0800dec8
 800cdb4:	0800dced 	.word	0x0800dced
 800cdb8:	0800dd74 	.word	0x0800dd74

0800cdbc <__lshift>:
 800cdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	6849      	ldr	r1, [r1, #4]
 800cdc4:	6923      	ldr	r3, [r4, #16]
 800cdc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdca:	68a3      	ldr	r3, [r4, #8]
 800cdcc:	4607      	mov	r7, r0
 800cdce:	4691      	mov	r9, r2
 800cdd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdd4:	f108 0601 	add.w	r6, r8, #1
 800cdd8:	42b3      	cmp	r3, r6
 800cdda:	db0b      	blt.n	800cdf4 <__lshift+0x38>
 800cddc:	4638      	mov	r0, r7
 800cdde:	f7ff fddb 	bl	800c998 <_Balloc>
 800cde2:	4605      	mov	r5, r0
 800cde4:	b948      	cbnz	r0, 800cdfa <__lshift+0x3e>
 800cde6:	4602      	mov	r2, r0
 800cde8:	4b28      	ldr	r3, [pc, #160]	; (800ce8c <__lshift+0xd0>)
 800cdea:	4829      	ldr	r0, [pc, #164]	; (800ce90 <__lshift+0xd4>)
 800cdec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cdf0:	f000 f950 	bl	800d094 <__assert_func>
 800cdf4:	3101      	adds	r1, #1
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	e7ee      	b.n	800cdd8 <__lshift+0x1c>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	f100 0114 	add.w	r1, r0, #20
 800ce00:	f100 0210 	add.w	r2, r0, #16
 800ce04:	4618      	mov	r0, r3
 800ce06:	4553      	cmp	r3, sl
 800ce08:	db33      	blt.n	800ce72 <__lshift+0xb6>
 800ce0a:	6920      	ldr	r0, [r4, #16]
 800ce0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce10:	f104 0314 	add.w	r3, r4, #20
 800ce14:	f019 091f 	ands.w	r9, r9, #31
 800ce18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce20:	d02b      	beq.n	800ce7a <__lshift+0xbe>
 800ce22:	f1c9 0e20 	rsb	lr, r9, #32
 800ce26:	468a      	mov	sl, r1
 800ce28:	2200      	movs	r2, #0
 800ce2a:	6818      	ldr	r0, [r3, #0]
 800ce2c:	fa00 f009 	lsl.w	r0, r0, r9
 800ce30:	4302      	orrs	r2, r0
 800ce32:	f84a 2b04 	str.w	r2, [sl], #4
 800ce36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce3a:	459c      	cmp	ip, r3
 800ce3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce40:	d8f3      	bhi.n	800ce2a <__lshift+0x6e>
 800ce42:	ebac 0304 	sub.w	r3, ip, r4
 800ce46:	3b15      	subs	r3, #21
 800ce48:	f023 0303 	bic.w	r3, r3, #3
 800ce4c:	3304      	adds	r3, #4
 800ce4e:	f104 0015 	add.w	r0, r4, #21
 800ce52:	4584      	cmp	ip, r0
 800ce54:	bf38      	it	cc
 800ce56:	2304      	movcc	r3, #4
 800ce58:	50ca      	str	r2, [r1, r3]
 800ce5a:	b10a      	cbz	r2, 800ce60 <__lshift+0xa4>
 800ce5c:	f108 0602 	add.w	r6, r8, #2
 800ce60:	3e01      	subs	r6, #1
 800ce62:	4638      	mov	r0, r7
 800ce64:	612e      	str	r6, [r5, #16]
 800ce66:	4621      	mov	r1, r4
 800ce68:	f7ff fdd6 	bl	800ca18 <_Bfree>
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce72:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce76:	3301      	adds	r3, #1
 800ce78:	e7c5      	b.n	800ce06 <__lshift+0x4a>
 800ce7a:	3904      	subs	r1, #4
 800ce7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce80:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce84:	459c      	cmp	ip, r3
 800ce86:	d8f9      	bhi.n	800ce7c <__lshift+0xc0>
 800ce88:	e7ea      	b.n	800ce60 <__lshift+0xa4>
 800ce8a:	bf00      	nop
 800ce8c:	0800dd63 	.word	0x0800dd63
 800ce90:	0800dd74 	.word	0x0800dd74

0800ce94 <__mcmp>:
 800ce94:	b530      	push	{r4, r5, lr}
 800ce96:	6902      	ldr	r2, [r0, #16]
 800ce98:	690c      	ldr	r4, [r1, #16]
 800ce9a:	1b12      	subs	r2, r2, r4
 800ce9c:	d10e      	bne.n	800cebc <__mcmp+0x28>
 800ce9e:	f100 0314 	add.w	r3, r0, #20
 800cea2:	3114      	adds	r1, #20
 800cea4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cea8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ceac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ceb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ceb4:	42a5      	cmp	r5, r4
 800ceb6:	d003      	beq.n	800cec0 <__mcmp+0x2c>
 800ceb8:	d305      	bcc.n	800cec6 <__mcmp+0x32>
 800ceba:	2201      	movs	r2, #1
 800cebc:	4610      	mov	r0, r2
 800cebe:	bd30      	pop	{r4, r5, pc}
 800cec0:	4283      	cmp	r3, r0
 800cec2:	d3f3      	bcc.n	800ceac <__mcmp+0x18>
 800cec4:	e7fa      	b.n	800cebc <__mcmp+0x28>
 800cec6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceca:	e7f7      	b.n	800cebc <__mcmp+0x28>

0800cecc <__mdiff>:
 800cecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced0:	460c      	mov	r4, r1
 800ced2:	4606      	mov	r6, r0
 800ced4:	4611      	mov	r1, r2
 800ced6:	4620      	mov	r0, r4
 800ced8:	4617      	mov	r7, r2
 800ceda:	f7ff ffdb 	bl	800ce94 <__mcmp>
 800cede:	1e05      	subs	r5, r0, #0
 800cee0:	d110      	bne.n	800cf04 <__mdiff+0x38>
 800cee2:	4629      	mov	r1, r5
 800cee4:	4630      	mov	r0, r6
 800cee6:	f7ff fd57 	bl	800c998 <_Balloc>
 800ceea:	b930      	cbnz	r0, 800cefa <__mdiff+0x2e>
 800ceec:	4b39      	ldr	r3, [pc, #228]	; (800cfd4 <__mdiff+0x108>)
 800ceee:	4602      	mov	r2, r0
 800cef0:	f240 2132 	movw	r1, #562	; 0x232
 800cef4:	4838      	ldr	r0, [pc, #224]	; (800cfd8 <__mdiff+0x10c>)
 800cef6:	f000 f8cd 	bl	800d094 <__assert_func>
 800cefa:	2301      	movs	r3, #1
 800cefc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf04:	bfa4      	itt	ge
 800cf06:	463b      	movge	r3, r7
 800cf08:	4627      	movge	r7, r4
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	6879      	ldr	r1, [r7, #4]
 800cf0e:	bfa6      	itte	ge
 800cf10:	461c      	movge	r4, r3
 800cf12:	2500      	movge	r5, #0
 800cf14:	2501      	movlt	r5, #1
 800cf16:	f7ff fd3f 	bl	800c998 <_Balloc>
 800cf1a:	b920      	cbnz	r0, 800cf26 <__mdiff+0x5a>
 800cf1c:	4b2d      	ldr	r3, [pc, #180]	; (800cfd4 <__mdiff+0x108>)
 800cf1e:	4602      	mov	r2, r0
 800cf20:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf24:	e7e6      	b.n	800cef4 <__mdiff+0x28>
 800cf26:	693e      	ldr	r6, [r7, #16]
 800cf28:	60c5      	str	r5, [r0, #12]
 800cf2a:	6925      	ldr	r5, [r4, #16]
 800cf2c:	f107 0114 	add.w	r1, r7, #20
 800cf30:	f104 0914 	add.w	r9, r4, #20
 800cf34:	f100 0e14 	add.w	lr, r0, #20
 800cf38:	f107 0210 	add.w	r2, r7, #16
 800cf3c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cf40:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cf44:	46f2      	mov	sl, lr
 800cf46:	2700      	movs	r7, #0
 800cf48:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf50:	fa1f f883 	uxth.w	r8, r3
 800cf54:	fa17 f78b 	uxtah	r7, r7, fp
 800cf58:	0c1b      	lsrs	r3, r3, #16
 800cf5a:	eba7 0808 	sub.w	r8, r7, r8
 800cf5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf66:	fa1f f888 	uxth.w	r8, r8
 800cf6a:	141f      	asrs	r7, r3, #16
 800cf6c:	454d      	cmp	r5, r9
 800cf6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf72:	f84a 3b04 	str.w	r3, [sl], #4
 800cf76:	d8e7      	bhi.n	800cf48 <__mdiff+0x7c>
 800cf78:	1b2b      	subs	r3, r5, r4
 800cf7a:	3b15      	subs	r3, #21
 800cf7c:	f023 0303 	bic.w	r3, r3, #3
 800cf80:	3304      	adds	r3, #4
 800cf82:	3415      	adds	r4, #21
 800cf84:	42a5      	cmp	r5, r4
 800cf86:	bf38      	it	cc
 800cf88:	2304      	movcc	r3, #4
 800cf8a:	4419      	add	r1, r3
 800cf8c:	4473      	add	r3, lr
 800cf8e:	469e      	mov	lr, r3
 800cf90:	460d      	mov	r5, r1
 800cf92:	4565      	cmp	r5, ip
 800cf94:	d30e      	bcc.n	800cfb4 <__mdiff+0xe8>
 800cf96:	f10c 0203 	add.w	r2, ip, #3
 800cf9a:	1a52      	subs	r2, r2, r1
 800cf9c:	f022 0203 	bic.w	r2, r2, #3
 800cfa0:	3903      	subs	r1, #3
 800cfa2:	458c      	cmp	ip, r1
 800cfa4:	bf38      	it	cc
 800cfa6:	2200      	movcc	r2, #0
 800cfa8:	441a      	add	r2, r3
 800cfaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cfae:	b17b      	cbz	r3, 800cfd0 <__mdiff+0x104>
 800cfb0:	6106      	str	r6, [r0, #16]
 800cfb2:	e7a5      	b.n	800cf00 <__mdiff+0x34>
 800cfb4:	f855 8b04 	ldr.w	r8, [r5], #4
 800cfb8:	fa17 f488 	uxtah	r4, r7, r8
 800cfbc:	1422      	asrs	r2, r4, #16
 800cfbe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cfc2:	b2a4      	uxth	r4, r4
 800cfc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cfc8:	f84e 4b04 	str.w	r4, [lr], #4
 800cfcc:	1417      	asrs	r7, r2, #16
 800cfce:	e7e0      	b.n	800cf92 <__mdiff+0xc6>
 800cfd0:	3e01      	subs	r6, #1
 800cfd2:	e7ea      	b.n	800cfaa <__mdiff+0xde>
 800cfd4:	0800dd63 	.word	0x0800dd63
 800cfd8:	0800dd74 	.word	0x0800dd74

0800cfdc <__d2b>:
 800cfdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfe0:	4689      	mov	r9, r1
 800cfe2:	2101      	movs	r1, #1
 800cfe4:	ec57 6b10 	vmov	r6, r7, d0
 800cfe8:	4690      	mov	r8, r2
 800cfea:	f7ff fcd5 	bl	800c998 <_Balloc>
 800cfee:	4604      	mov	r4, r0
 800cff0:	b930      	cbnz	r0, 800d000 <__d2b+0x24>
 800cff2:	4602      	mov	r2, r0
 800cff4:	4b25      	ldr	r3, [pc, #148]	; (800d08c <__d2b+0xb0>)
 800cff6:	4826      	ldr	r0, [pc, #152]	; (800d090 <__d2b+0xb4>)
 800cff8:	f240 310a 	movw	r1, #778	; 0x30a
 800cffc:	f000 f84a 	bl	800d094 <__assert_func>
 800d000:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d004:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d008:	bb35      	cbnz	r5, 800d058 <__d2b+0x7c>
 800d00a:	2e00      	cmp	r6, #0
 800d00c:	9301      	str	r3, [sp, #4]
 800d00e:	d028      	beq.n	800d062 <__d2b+0x86>
 800d010:	4668      	mov	r0, sp
 800d012:	9600      	str	r6, [sp, #0]
 800d014:	f7ff fd8c 	bl	800cb30 <__lo0bits>
 800d018:	9900      	ldr	r1, [sp, #0]
 800d01a:	b300      	cbz	r0, 800d05e <__d2b+0x82>
 800d01c:	9a01      	ldr	r2, [sp, #4]
 800d01e:	f1c0 0320 	rsb	r3, r0, #32
 800d022:	fa02 f303 	lsl.w	r3, r2, r3
 800d026:	430b      	orrs	r3, r1
 800d028:	40c2      	lsrs	r2, r0
 800d02a:	6163      	str	r3, [r4, #20]
 800d02c:	9201      	str	r2, [sp, #4]
 800d02e:	9b01      	ldr	r3, [sp, #4]
 800d030:	61a3      	str	r3, [r4, #24]
 800d032:	2b00      	cmp	r3, #0
 800d034:	bf14      	ite	ne
 800d036:	2202      	movne	r2, #2
 800d038:	2201      	moveq	r2, #1
 800d03a:	6122      	str	r2, [r4, #16]
 800d03c:	b1d5      	cbz	r5, 800d074 <__d2b+0x98>
 800d03e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d042:	4405      	add	r5, r0
 800d044:	f8c9 5000 	str.w	r5, [r9]
 800d048:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d04c:	f8c8 0000 	str.w	r0, [r8]
 800d050:	4620      	mov	r0, r4
 800d052:	b003      	add	sp, #12
 800d054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d05c:	e7d5      	b.n	800d00a <__d2b+0x2e>
 800d05e:	6161      	str	r1, [r4, #20]
 800d060:	e7e5      	b.n	800d02e <__d2b+0x52>
 800d062:	a801      	add	r0, sp, #4
 800d064:	f7ff fd64 	bl	800cb30 <__lo0bits>
 800d068:	9b01      	ldr	r3, [sp, #4]
 800d06a:	6163      	str	r3, [r4, #20]
 800d06c:	2201      	movs	r2, #1
 800d06e:	6122      	str	r2, [r4, #16]
 800d070:	3020      	adds	r0, #32
 800d072:	e7e3      	b.n	800d03c <__d2b+0x60>
 800d074:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d078:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d07c:	f8c9 0000 	str.w	r0, [r9]
 800d080:	6918      	ldr	r0, [r3, #16]
 800d082:	f7ff fd35 	bl	800caf0 <__hi0bits>
 800d086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d08a:	e7df      	b.n	800d04c <__d2b+0x70>
 800d08c:	0800dd63 	.word	0x0800dd63
 800d090:	0800dd74 	.word	0x0800dd74

0800d094 <__assert_func>:
 800d094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d096:	4614      	mov	r4, r2
 800d098:	461a      	mov	r2, r3
 800d09a:	4b09      	ldr	r3, [pc, #36]	; (800d0c0 <__assert_func+0x2c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4605      	mov	r5, r0
 800d0a0:	68d8      	ldr	r0, [r3, #12]
 800d0a2:	b14c      	cbz	r4, 800d0b8 <__assert_func+0x24>
 800d0a4:	4b07      	ldr	r3, [pc, #28]	; (800d0c4 <__assert_func+0x30>)
 800d0a6:	9100      	str	r1, [sp, #0]
 800d0a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0ac:	4906      	ldr	r1, [pc, #24]	; (800d0c8 <__assert_func+0x34>)
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	f000 f80e 	bl	800d0d0 <fiprintf>
 800d0b4:	f000 fa5a 	bl	800d56c <abort>
 800d0b8:	4b04      	ldr	r3, [pc, #16]	; (800d0cc <__assert_func+0x38>)
 800d0ba:	461c      	mov	r4, r3
 800d0bc:	e7f3      	b.n	800d0a6 <__assert_func+0x12>
 800d0be:	bf00      	nop
 800d0c0:	20000144 	.word	0x20000144
 800d0c4:	0800ded4 	.word	0x0800ded4
 800d0c8:	0800dee1 	.word	0x0800dee1
 800d0cc:	0800df0f 	.word	0x0800df0f

0800d0d0 <fiprintf>:
 800d0d0:	b40e      	push	{r1, r2, r3}
 800d0d2:	b503      	push	{r0, r1, lr}
 800d0d4:	4601      	mov	r1, r0
 800d0d6:	ab03      	add	r3, sp, #12
 800d0d8:	4805      	ldr	r0, [pc, #20]	; (800d0f0 <fiprintf+0x20>)
 800d0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0de:	6800      	ldr	r0, [r0, #0]
 800d0e0:	9301      	str	r3, [sp, #4]
 800d0e2:	f000 f845 	bl	800d170 <_vfiprintf_r>
 800d0e6:	b002      	add	sp, #8
 800d0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0ec:	b003      	add	sp, #12
 800d0ee:	4770      	bx	lr
 800d0f0:	20000144 	.word	0x20000144

0800d0f4 <__retarget_lock_init_recursive>:
 800d0f4:	4770      	bx	lr

0800d0f6 <__retarget_lock_acquire_recursive>:
 800d0f6:	4770      	bx	lr

0800d0f8 <__retarget_lock_release_recursive>:
 800d0f8:	4770      	bx	lr

0800d0fa <__ascii_mbtowc>:
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	b901      	cbnz	r1, 800d100 <__ascii_mbtowc+0x6>
 800d0fe:	a901      	add	r1, sp, #4
 800d100:	b142      	cbz	r2, 800d114 <__ascii_mbtowc+0x1a>
 800d102:	b14b      	cbz	r3, 800d118 <__ascii_mbtowc+0x1e>
 800d104:	7813      	ldrb	r3, [r2, #0]
 800d106:	600b      	str	r3, [r1, #0]
 800d108:	7812      	ldrb	r2, [r2, #0]
 800d10a:	1e10      	subs	r0, r2, #0
 800d10c:	bf18      	it	ne
 800d10e:	2001      	movne	r0, #1
 800d110:	b002      	add	sp, #8
 800d112:	4770      	bx	lr
 800d114:	4610      	mov	r0, r2
 800d116:	e7fb      	b.n	800d110 <__ascii_mbtowc+0x16>
 800d118:	f06f 0001 	mvn.w	r0, #1
 800d11c:	e7f8      	b.n	800d110 <__ascii_mbtowc+0x16>

0800d11e <__sfputc_r>:
 800d11e:	6893      	ldr	r3, [r2, #8]
 800d120:	3b01      	subs	r3, #1
 800d122:	2b00      	cmp	r3, #0
 800d124:	b410      	push	{r4}
 800d126:	6093      	str	r3, [r2, #8]
 800d128:	da08      	bge.n	800d13c <__sfputc_r+0x1e>
 800d12a:	6994      	ldr	r4, [r2, #24]
 800d12c:	42a3      	cmp	r3, r4
 800d12e:	db01      	blt.n	800d134 <__sfputc_r+0x16>
 800d130:	290a      	cmp	r1, #10
 800d132:	d103      	bne.n	800d13c <__sfputc_r+0x1e>
 800d134:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d138:	f000 b94a 	b.w	800d3d0 <__swbuf_r>
 800d13c:	6813      	ldr	r3, [r2, #0]
 800d13e:	1c58      	adds	r0, r3, #1
 800d140:	6010      	str	r0, [r2, #0]
 800d142:	7019      	strb	r1, [r3, #0]
 800d144:	4608      	mov	r0, r1
 800d146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <__sfputs_r>:
 800d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14e:	4606      	mov	r6, r0
 800d150:	460f      	mov	r7, r1
 800d152:	4614      	mov	r4, r2
 800d154:	18d5      	adds	r5, r2, r3
 800d156:	42ac      	cmp	r4, r5
 800d158:	d101      	bne.n	800d15e <__sfputs_r+0x12>
 800d15a:	2000      	movs	r0, #0
 800d15c:	e007      	b.n	800d16e <__sfputs_r+0x22>
 800d15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d162:	463a      	mov	r2, r7
 800d164:	4630      	mov	r0, r6
 800d166:	f7ff ffda 	bl	800d11e <__sfputc_r>
 800d16a:	1c43      	adds	r3, r0, #1
 800d16c:	d1f3      	bne.n	800d156 <__sfputs_r+0xa>
 800d16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d170 <_vfiprintf_r>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	460d      	mov	r5, r1
 800d176:	b09d      	sub	sp, #116	; 0x74
 800d178:	4614      	mov	r4, r2
 800d17a:	4698      	mov	r8, r3
 800d17c:	4606      	mov	r6, r0
 800d17e:	b118      	cbz	r0, 800d188 <_vfiprintf_r+0x18>
 800d180:	6983      	ldr	r3, [r0, #24]
 800d182:	b90b      	cbnz	r3, 800d188 <_vfiprintf_r+0x18>
 800d184:	f000 fb14 	bl	800d7b0 <__sinit>
 800d188:	4b89      	ldr	r3, [pc, #548]	; (800d3b0 <_vfiprintf_r+0x240>)
 800d18a:	429d      	cmp	r5, r3
 800d18c:	d11b      	bne.n	800d1c6 <_vfiprintf_r+0x56>
 800d18e:	6875      	ldr	r5, [r6, #4]
 800d190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d192:	07d9      	lsls	r1, r3, #31
 800d194:	d405      	bmi.n	800d1a2 <_vfiprintf_r+0x32>
 800d196:	89ab      	ldrh	r3, [r5, #12]
 800d198:	059a      	lsls	r2, r3, #22
 800d19a:	d402      	bmi.n	800d1a2 <_vfiprintf_r+0x32>
 800d19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d19e:	f7ff ffaa 	bl	800d0f6 <__retarget_lock_acquire_recursive>
 800d1a2:	89ab      	ldrh	r3, [r5, #12]
 800d1a4:	071b      	lsls	r3, r3, #28
 800d1a6:	d501      	bpl.n	800d1ac <_vfiprintf_r+0x3c>
 800d1a8:	692b      	ldr	r3, [r5, #16]
 800d1aa:	b9eb      	cbnz	r3, 800d1e8 <_vfiprintf_r+0x78>
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f000 f96e 	bl	800d490 <__swsetup_r>
 800d1b4:	b1c0      	cbz	r0, 800d1e8 <_vfiprintf_r+0x78>
 800d1b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1b8:	07dc      	lsls	r4, r3, #31
 800d1ba:	d50e      	bpl.n	800d1da <_vfiprintf_r+0x6a>
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	b01d      	add	sp, #116	; 0x74
 800d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c6:	4b7b      	ldr	r3, [pc, #492]	; (800d3b4 <_vfiprintf_r+0x244>)
 800d1c8:	429d      	cmp	r5, r3
 800d1ca:	d101      	bne.n	800d1d0 <_vfiprintf_r+0x60>
 800d1cc:	68b5      	ldr	r5, [r6, #8]
 800d1ce:	e7df      	b.n	800d190 <_vfiprintf_r+0x20>
 800d1d0:	4b79      	ldr	r3, [pc, #484]	; (800d3b8 <_vfiprintf_r+0x248>)
 800d1d2:	429d      	cmp	r5, r3
 800d1d4:	bf08      	it	eq
 800d1d6:	68f5      	ldreq	r5, [r6, #12]
 800d1d8:	e7da      	b.n	800d190 <_vfiprintf_r+0x20>
 800d1da:	89ab      	ldrh	r3, [r5, #12]
 800d1dc:	0598      	lsls	r0, r3, #22
 800d1de:	d4ed      	bmi.n	800d1bc <_vfiprintf_r+0x4c>
 800d1e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1e2:	f7ff ff89 	bl	800d0f8 <__retarget_lock_release_recursive>
 800d1e6:	e7e9      	b.n	800d1bc <_vfiprintf_r+0x4c>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ec:	2320      	movs	r3, #32
 800d1ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1f6:	2330      	movs	r3, #48	; 0x30
 800d1f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d3bc <_vfiprintf_r+0x24c>
 800d1fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d200:	f04f 0901 	mov.w	r9, #1
 800d204:	4623      	mov	r3, r4
 800d206:	469a      	mov	sl, r3
 800d208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d20c:	b10a      	cbz	r2, 800d212 <_vfiprintf_r+0xa2>
 800d20e:	2a25      	cmp	r2, #37	; 0x25
 800d210:	d1f9      	bne.n	800d206 <_vfiprintf_r+0x96>
 800d212:	ebba 0b04 	subs.w	fp, sl, r4
 800d216:	d00b      	beq.n	800d230 <_vfiprintf_r+0xc0>
 800d218:	465b      	mov	r3, fp
 800d21a:	4622      	mov	r2, r4
 800d21c:	4629      	mov	r1, r5
 800d21e:	4630      	mov	r0, r6
 800d220:	f7ff ff94 	bl	800d14c <__sfputs_r>
 800d224:	3001      	adds	r0, #1
 800d226:	f000 80aa 	beq.w	800d37e <_vfiprintf_r+0x20e>
 800d22a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d22c:	445a      	add	r2, fp
 800d22e:	9209      	str	r2, [sp, #36]	; 0x24
 800d230:	f89a 3000 	ldrb.w	r3, [sl]
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 80a2 	beq.w	800d37e <_vfiprintf_r+0x20e>
 800d23a:	2300      	movs	r3, #0
 800d23c:	f04f 32ff 	mov.w	r2, #4294967295
 800d240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d244:	f10a 0a01 	add.w	sl, sl, #1
 800d248:	9304      	str	r3, [sp, #16]
 800d24a:	9307      	str	r3, [sp, #28]
 800d24c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d250:	931a      	str	r3, [sp, #104]	; 0x68
 800d252:	4654      	mov	r4, sl
 800d254:	2205      	movs	r2, #5
 800d256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d25a:	4858      	ldr	r0, [pc, #352]	; (800d3bc <_vfiprintf_r+0x24c>)
 800d25c:	f7f2 ffc0 	bl	80001e0 <memchr>
 800d260:	9a04      	ldr	r2, [sp, #16]
 800d262:	b9d8      	cbnz	r0, 800d29c <_vfiprintf_r+0x12c>
 800d264:	06d1      	lsls	r1, r2, #27
 800d266:	bf44      	itt	mi
 800d268:	2320      	movmi	r3, #32
 800d26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d26e:	0713      	lsls	r3, r2, #28
 800d270:	bf44      	itt	mi
 800d272:	232b      	movmi	r3, #43	; 0x2b
 800d274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d278:	f89a 3000 	ldrb.w	r3, [sl]
 800d27c:	2b2a      	cmp	r3, #42	; 0x2a
 800d27e:	d015      	beq.n	800d2ac <_vfiprintf_r+0x13c>
 800d280:	9a07      	ldr	r2, [sp, #28]
 800d282:	4654      	mov	r4, sl
 800d284:	2000      	movs	r0, #0
 800d286:	f04f 0c0a 	mov.w	ip, #10
 800d28a:	4621      	mov	r1, r4
 800d28c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d290:	3b30      	subs	r3, #48	; 0x30
 800d292:	2b09      	cmp	r3, #9
 800d294:	d94e      	bls.n	800d334 <_vfiprintf_r+0x1c4>
 800d296:	b1b0      	cbz	r0, 800d2c6 <_vfiprintf_r+0x156>
 800d298:	9207      	str	r2, [sp, #28]
 800d29a:	e014      	b.n	800d2c6 <_vfiprintf_r+0x156>
 800d29c:	eba0 0308 	sub.w	r3, r0, r8
 800d2a0:	fa09 f303 	lsl.w	r3, r9, r3
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	46a2      	mov	sl, r4
 800d2aa:	e7d2      	b.n	800d252 <_vfiprintf_r+0xe2>
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	1d19      	adds	r1, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	9103      	str	r1, [sp, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bfbb      	ittet	lt
 800d2b8:	425b      	neglt	r3, r3
 800d2ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d2be:	9307      	strge	r3, [sp, #28]
 800d2c0:	9307      	strlt	r3, [sp, #28]
 800d2c2:	bfb8      	it	lt
 800d2c4:	9204      	strlt	r2, [sp, #16]
 800d2c6:	7823      	ldrb	r3, [r4, #0]
 800d2c8:	2b2e      	cmp	r3, #46	; 0x2e
 800d2ca:	d10c      	bne.n	800d2e6 <_vfiprintf_r+0x176>
 800d2cc:	7863      	ldrb	r3, [r4, #1]
 800d2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d2d0:	d135      	bne.n	800d33e <_vfiprintf_r+0x1ce>
 800d2d2:	9b03      	ldr	r3, [sp, #12]
 800d2d4:	1d1a      	adds	r2, r3, #4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	9203      	str	r2, [sp, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	bfb8      	it	lt
 800d2de:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2e2:	3402      	adds	r4, #2
 800d2e4:	9305      	str	r3, [sp, #20]
 800d2e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d3cc <_vfiprintf_r+0x25c>
 800d2ea:	7821      	ldrb	r1, [r4, #0]
 800d2ec:	2203      	movs	r2, #3
 800d2ee:	4650      	mov	r0, sl
 800d2f0:	f7f2 ff76 	bl	80001e0 <memchr>
 800d2f4:	b140      	cbz	r0, 800d308 <_vfiprintf_r+0x198>
 800d2f6:	2340      	movs	r3, #64	; 0x40
 800d2f8:	eba0 000a 	sub.w	r0, r0, sl
 800d2fc:	fa03 f000 	lsl.w	r0, r3, r0
 800d300:	9b04      	ldr	r3, [sp, #16]
 800d302:	4303      	orrs	r3, r0
 800d304:	3401      	adds	r4, #1
 800d306:	9304      	str	r3, [sp, #16]
 800d308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30c:	482c      	ldr	r0, [pc, #176]	; (800d3c0 <_vfiprintf_r+0x250>)
 800d30e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d312:	2206      	movs	r2, #6
 800d314:	f7f2 ff64 	bl	80001e0 <memchr>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d03f      	beq.n	800d39c <_vfiprintf_r+0x22c>
 800d31c:	4b29      	ldr	r3, [pc, #164]	; (800d3c4 <_vfiprintf_r+0x254>)
 800d31e:	bb1b      	cbnz	r3, 800d368 <_vfiprintf_r+0x1f8>
 800d320:	9b03      	ldr	r3, [sp, #12]
 800d322:	3307      	adds	r3, #7
 800d324:	f023 0307 	bic.w	r3, r3, #7
 800d328:	3308      	adds	r3, #8
 800d32a:	9303      	str	r3, [sp, #12]
 800d32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32e:	443b      	add	r3, r7
 800d330:	9309      	str	r3, [sp, #36]	; 0x24
 800d332:	e767      	b.n	800d204 <_vfiprintf_r+0x94>
 800d334:	fb0c 3202 	mla	r2, ip, r2, r3
 800d338:	460c      	mov	r4, r1
 800d33a:	2001      	movs	r0, #1
 800d33c:	e7a5      	b.n	800d28a <_vfiprintf_r+0x11a>
 800d33e:	2300      	movs	r3, #0
 800d340:	3401      	adds	r4, #1
 800d342:	9305      	str	r3, [sp, #20]
 800d344:	4619      	mov	r1, r3
 800d346:	f04f 0c0a 	mov.w	ip, #10
 800d34a:	4620      	mov	r0, r4
 800d34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d350:	3a30      	subs	r2, #48	; 0x30
 800d352:	2a09      	cmp	r2, #9
 800d354:	d903      	bls.n	800d35e <_vfiprintf_r+0x1ee>
 800d356:	2b00      	cmp	r3, #0
 800d358:	d0c5      	beq.n	800d2e6 <_vfiprintf_r+0x176>
 800d35a:	9105      	str	r1, [sp, #20]
 800d35c:	e7c3      	b.n	800d2e6 <_vfiprintf_r+0x176>
 800d35e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d362:	4604      	mov	r4, r0
 800d364:	2301      	movs	r3, #1
 800d366:	e7f0      	b.n	800d34a <_vfiprintf_r+0x1da>
 800d368:	ab03      	add	r3, sp, #12
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	462a      	mov	r2, r5
 800d36e:	4b16      	ldr	r3, [pc, #88]	; (800d3c8 <_vfiprintf_r+0x258>)
 800d370:	a904      	add	r1, sp, #16
 800d372:	4630      	mov	r0, r6
 800d374:	f7fe f8ac 	bl	800b4d0 <_printf_float>
 800d378:	4607      	mov	r7, r0
 800d37a:	1c78      	adds	r0, r7, #1
 800d37c:	d1d6      	bne.n	800d32c <_vfiprintf_r+0x1bc>
 800d37e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d380:	07d9      	lsls	r1, r3, #31
 800d382:	d405      	bmi.n	800d390 <_vfiprintf_r+0x220>
 800d384:	89ab      	ldrh	r3, [r5, #12]
 800d386:	059a      	lsls	r2, r3, #22
 800d388:	d402      	bmi.n	800d390 <_vfiprintf_r+0x220>
 800d38a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d38c:	f7ff feb4 	bl	800d0f8 <__retarget_lock_release_recursive>
 800d390:	89ab      	ldrh	r3, [r5, #12]
 800d392:	065b      	lsls	r3, r3, #25
 800d394:	f53f af12 	bmi.w	800d1bc <_vfiprintf_r+0x4c>
 800d398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d39a:	e711      	b.n	800d1c0 <_vfiprintf_r+0x50>
 800d39c:	ab03      	add	r3, sp, #12
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	462a      	mov	r2, r5
 800d3a2:	4b09      	ldr	r3, [pc, #36]	; (800d3c8 <_vfiprintf_r+0x258>)
 800d3a4:	a904      	add	r1, sp, #16
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	f7fe fb36 	bl	800ba18 <_printf_i>
 800d3ac:	e7e4      	b.n	800d378 <_vfiprintf_r+0x208>
 800d3ae:	bf00      	nop
 800d3b0:	0800e04c 	.word	0x0800e04c
 800d3b4:	0800e06c 	.word	0x0800e06c
 800d3b8:	0800e02c 	.word	0x0800e02c
 800d3bc:	0800df1a 	.word	0x0800df1a
 800d3c0:	0800df24 	.word	0x0800df24
 800d3c4:	0800b4d1 	.word	0x0800b4d1
 800d3c8:	0800d14d 	.word	0x0800d14d
 800d3cc:	0800df20 	.word	0x0800df20

0800d3d0 <__swbuf_r>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	460e      	mov	r6, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	b118      	cbz	r0, 800d3e2 <__swbuf_r+0x12>
 800d3da:	6983      	ldr	r3, [r0, #24]
 800d3dc:	b90b      	cbnz	r3, 800d3e2 <__swbuf_r+0x12>
 800d3de:	f000 f9e7 	bl	800d7b0 <__sinit>
 800d3e2:	4b21      	ldr	r3, [pc, #132]	; (800d468 <__swbuf_r+0x98>)
 800d3e4:	429c      	cmp	r4, r3
 800d3e6:	d12b      	bne.n	800d440 <__swbuf_r+0x70>
 800d3e8:	686c      	ldr	r4, [r5, #4]
 800d3ea:	69a3      	ldr	r3, [r4, #24]
 800d3ec:	60a3      	str	r3, [r4, #8]
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	071a      	lsls	r2, r3, #28
 800d3f2:	d52f      	bpl.n	800d454 <__swbuf_r+0x84>
 800d3f4:	6923      	ldr	r3, [r4, #16]
 800d3f6:	b36b      	cbz	r3, 800d454 <__swbuf_r+0x84>
 800d3f8:	6923      	ldr	r3, [r4, #16]
 800d3fa:	6820      	ldr	r0, [r4, #0]
 800d3fc:	1ac0      	subs	r0, r0, r3
 800d3fe:	6963      	ldr	r3, [r4, #20]
 800d400:	b2f6      	uxtb	r6, r6
 800d402:	4283      	cmp	r3, r0
 800d404:	4637      	mov	r7, r6
 800d406:	dc04      	bgt.n	800d412 <__swbuf_r+0x42>
 800d408:	4621      	mov	r1, r4
 800d40a:	4628      	mov	r0, r5
 800d40c:	f000 f93c 	bl	800d688 <_fflush_r>
 800d410:	bb30      	cbnz	r0, 800d460 <__swbuf_r+0x90>
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	3b01      	subs	r3, #1
 800d416:	60a3      	str	r3, [r4, #8]
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	1c5a      	adds	r2, r3, #1
 800d41c:	6022      	str	r2, [r4, #0]
 800d41e:	701e      	strb	r6, [r3, #0]
 800d420:	6963      	ldr	r3, [r4, #20]
 800d422:	3001      	adds	r0, #1
 800d424:	4283      	cmp	r3, r0
 800d426:	d004      	beq.n	800d432 <__swbuf_r+0x62>
 800d428:	89a3      	ldrh	r3, [r4, #12]
 800d42a:	07db      	lsls	r3, r3, #31
 800d42c:	d506      	bpl.n	800d43c <__swbuf_r+0x6c>
 800d42e:	2e0a      	cmp	r6, #10
 800d430:	d104      	bne.n	800d43c <__swbuf_r+0x6c>
 800d432:	4621      	mov	r1, r4
 800d434:	4628      	mov	r0, r5
 800d436:	f000 f927 	bl	800d688 <_fflush_r>
 800d43a:	b988      	cbnz	r0, 800d460 <__swbuf_r+0x90>
 800d43c:	4638      	mov	r0, r7
 800d43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d440:	4b0a      	ldr	r3, [pc, #40]	; (800d46c <__swbuf_r+0x9c>)
 800d442:	429c      	cmp	r4, r3
 800d444:	d101      	bne.n	800d44a <__swbuf_r+0x7a>
 800d446:	68ac      	ldr	r4, [r5, #8]
 800d448:	e7cf      	b.n	800d3ea <__swbuf_r+0x1a>
 800d44a:	4b09      	ldr	r3, [pc, #36]	; (800d470 <__swbuf_r+0xa0>)
 800d44c:	429c      	cmp	r4, r3
 800d44e:	bf08      	it	eq
 800d450:	68ec      	ldreq	r4, [r5, #12]
 800d452:	e7ca      	b.n	800d3ea <__swbuf_r+0x1a>
 800d454:	4621      	mov	r1, r4
 800d456:	4628      	mov	r0, r5
 800d458:	f000 f81a 	bl	800d490 <__swsetup_r>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d0cb      	beq.n	800d3f8 <__swbuf_r+0x28>
 800d460:	f04f 37ff 	mov.w	r7, #4294967295
 800d464:	e7ea      	b.n	800d43c <__swbuf_r+0x6c>
 800d466:	bf00      	nop
 800d468:	0800e04c 	.word	0x0800e04c
 800d46c:	0800e06c 	.word	0x0800e06c
 800d470:	0800e02c 	.word	0x0800e02c

0800d474 <__ascii_wctomb>:
 800d474:	b149      	cbz	r1, 800d48a <__ascii_wctomb+0x16>
 800d476:	2aff      	cmp	r2, #255	; 0xff
 800d478:	bf85      	ittet	hi
 800d47a:	238a      	movhi	r3, #138	; 0x8a
 800d47c:	6003      	strhi	r3, [r0, #0]
 800d47e:	700a      	strbls	r2, [r1, #0]
 800d480:	f04f 30ff 	movhi.w	r0, #4294967295
 800d484:	bf98      	it	ls
 800d486:	2001      	movls	r0, #1
 800d488:	4770      	bx	lr
 800d48a:	4608      	mov	r0, r1
 800d48c:	4770      	bx	lr
	...

0800d490 <__swsetup_r>:
 800d490:	4b32      	ldr	r3, [pc, #200]	; (800d55c <__swsetup_r+0xcc>)
 800d492:	b570      	push	{r4, r5, r6, lr}
 800d494:	681d      	ldr	r5, [r3, #0]
 800d496:	4606      	mov	r6, r0
 800d498:	460c      	mov	r4, r1
 800d49a:	b125      	cbz	r5, 800d4a6 <__swsetup_r+0x16>
 800d49c:	69ab      	ldr	r3, [r5, #24]
 800d49e:	b913      	cbnz	r3, 800d4a6 <__swsetup_r+0x16>
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f000 f985 	bl	800d7b0 <__sinit>
 800d4a6:	4b2e      	ldr	r3, [pc, #184]	; (800d560 <__swsetup_r+0xd0>)
 800d4a8:	429c      	cmp	r4, r3
 800d4aa:	d10f      	bne.n	800d4cc <__swsetup_r+0x3c>
 800d4ac:	686c      	ldr	r4, [r5, #4]
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4b4:	0719      	lsls	r1, r3, #28
 800d4b6:	d42c      	bmi.n	800d512 <__swsetup_r+0x82>
 800d4b8:	06dd      	lsls	r5, r3, #27
 800d4ba:	d411      	bmi.n	800d4e0 <__swsetup_r+0x50>
 800d4bc:	2309      	movs	r3, #9
 800d4be:	6033      	str	r3, [r6, #0]
 800d4c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4c4:	81a3      	strh	r3, [r4, #12]
 800d4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ca:	e03e      	b.n	800d54a <__swsetup_r+0xba>
 800d4cc:	4b25      	ldr	r3, [pc, #148]	; (800d564 <__swsetup_r+0xd4>)
 800d4ce:	429c      	cmp	r4, r3
 800d4d0:	d101      	bne.n	800d4d6 <__swsetup_r+0x46>
 800d4d2:	68ac      	ldr	r4, [r5, #8]
 800d4d4:	e7eb      	b.n	800d4ae <__swsetup_r+0x1e>
 800d4d6:	4b24      	ldr	r3, [pc, #144]	; (800d568 <__swsetup_r+0xd8>)
 800d4d8:	429c      	cmp	r4, r3
 800d4da:	bf08      	it	eq
 800d4dc:	68ec      	ldreq	r4, [r5, #12]
 800d4de:	e7e6      	b.n	800d4ae <__swsetup_r+0x1e>
 800d4e0:	0758      	lsls	r0, r3, #29
 800d4e2:	d512      	bpl.n	800d50a <__swsetup_r+0x7a>
 800d4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4e6:	b141      	cbz	r1, 800d4fa <__swsetup_r+0x6a>
 800d4e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4ec:	4299      	cmp	r1, r3
 800d4ee:	d002      	beq.n	800d4f6 <__swsetup_r+0x66>
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f7fd fea3 	bl	800b23c <_free_r>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	6363      	str	r3, [r4, #52]	; 0x34
 800d4fa:	89a3      	ldrh	r3, [r4, #12]
 800d4fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d500:	81a3      	strh	r3, [r4, #12]
 800d502:	2300      	movs	r3, #0
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	6923      	ldr	r3, [r4, #16]
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f043 0308 	orr.w	r3, r3, #8
 800d510:	81a3      	strh	r3, [r4, #12]
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	b94b      	cbnz	r3, 800d52a <__swsetup_r+0x9a>
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d51c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d520:	d003      	beq.n	800d52a <__swsetup_r+0x9a>
 800d522:	4621      	mov	r1, r4
 800d524:	4630      	mov	r0, r6
 800d526:	f000 fa05 	bl	800d934 <__smakebuf_r>
 800d52a:	89a0      	ldrh	r0, [r4, #12]
 800d52c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d530:	f010 0301 	ands.w	r3, r0, #1
 800d534:	d00a      	beq.n	800d54c <__swsetup_r+0xbc>
 800d536:	2300      	movs	r3, #0
 800d538:	60a3      	str	r3, [r4, #8]
 800d53a:	6963      	ldr	r3, [r4, #20]
 800d53c:	425b      	negs	r3, r3
 800d53e:	61a3      	str	r3, [r4, #24]
 800d540:	6923      	ldr	r3, [r4, #16]
 800d542:	b943      	cbnz	r3, 800d556 <__swsetup_r+0xc6>
 800d544:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d548:	d1ba      	bne.n	800d4c0 <__swsetup_r+0x30>
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	0781      	lsls	r1, r0, #30
 800d54e:	bf58      	it	pl
 800d550:	6963      	ldrpl	r3, [r4, #20]
 800d552:	60a3      	str	r3, [r4, #8]
 800d554:	e7f4      	b.n	800d540 <__swsetup_r+0xb0>
 800d556:	2000      	movs	r0, #0
 800d558:	e7f7      	b.n	800d54a <__swsetup_r+0xba>
 800d55a:	bf00      	nop
 800d55c:	20000144 	.word	0x20000144
 800d560:	0800e04c 	.word	0x0800e04c
 800d564:	0800e06c 	.word	0x0800e06c
 800d568:	0800e02c 	.word	0x0800e02c

0800d56c <abort>:
 800d56c:	b508      	push	{r3, lr}
 800d56e:	2006      	movs	r0, #6
 800d570:	f000 fa48 	bl	800da04 <raise>
 800d574:	2001      	movs	r0, #1
 800d576:	f7f4 fdef 	bl	8002158 <_exit>
	...

0800d57c <__sflush_r>:
 800d57c:	898a      	ldrh	r2, [r1, #12]
 800d57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d582:	4605      	mov	r5, r0
 800d584:	0710      	lsls	r0, r2, #28
 800d586:	460c      	mov	r4, r1
 800d588:	d458      	bmi.n	800d63c <__sflush_r+0xc0>
 800d58a:	684b      	ldr	r3, [r1, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dc05      	bgt.n	800d59c <__sflush_r+0x20>
 800d590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d592:	2b00      	cmp	r3, #0
 800d594:	dc02      	bgt.n	800d59c <__sflush_r+0x20>
 800d596:	2000      	movs	r0, #0
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d59e:	2e00      	cmp	r6, #0
 800d5a0:	d0f9      	beq.n	800d596 <__sflush_r+0x1a>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5a8:	682f      	ldr	r7, [r5, #0]
 800d5aa:	602b      	str	r3, [r5, #0]
 800d5ac:	d032      	beq.n	800d614 <__sflush_r+0x98>
 800d5ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	075a      	lsls	r2, r3, #29
 800d5b4:	d505      	bpl.n	800d5c2 <__sflush_r+0x46>
 800d5b6:	6863      	ldr	r3, [r4, #4]
 800d5b8:	1ac0      	subs	r0, r0, r3
 800d5ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5bc:	b10b      	cbz	r3, 800d5c2 <__sflush_r+0x46>
 800d5be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5c0:	1ac0      	subs	r0, r0, r3
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5c8:	6a21      	ldr	r1, [r4, #32]
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	47b0      	blx	r6
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	d106      	bne.n	800d5e2 <__sflush_r+0x66>
 800d5d4:	6829      	ldr	r1, [r5, #0]
 800d5d6:	291d      	cmp	r1, #29
 800d5d8:	d82c      	bhi.n	800d634 <__sflush_r+0xb8>
 800d5da:	4a2a      	ldr	r2, [pc, #168]	; (800d684 <__sflush_r+0x108>)
 800d5dc:	40ca      	lsrs	r2, r1
 800d5de:	07d6      	lsls	r6, r2, #31
 800d5e0:	d528      	bpl.n	800d634 <__sflush_r+0xb8>
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	6062      	str	r2, [r4, #4]
 800d5e6:	04d9      	lsls	r1, r3, #19
 800d5e8:	6922      	ldr	r2, [r4, #16]
 800d5ea:	6022      	str	r2, [r4, #0]
 800d5ec:	d504      	bpl.n	800d5f8 <__sflush_r+0x7c>
 800d5ee:	1c42      	adds	r2, r0, #1
 800d5f0:	d101      	bne.n	800d5f6 <__sflush_r+0x7a>
 800d5f2:	682b      	ldr	r3, [r5, #0]
 800d5f4:	b903      	cbnz	r3, 800d5f8 <__sflush_r+0x7c>
 800d5f6:	6560      	str	r0, [r4, #84]	; 0x54
 800d5f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5fa:	602f      	str	r7, [r5, #0]
 800d5fc:	2900      	cmp	r1, #0
 800d5fe:	d0ca      	beq.n	800d596 <__sflush_r+0x1a>
 800d600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d604:	4299      	cmp	r1, r3
 800d606:	d002      	beq.n	800d60e <__sflush_r+0x92>
 800d608:	4628      	mov	r0, r5
 800d60a:	f7fd fe17 	bl	800b23c <_free_r>
 800d60e:	2000      	movs	r0, #0
 800d610:	6360      	str	r0, [r4, #52]	; 0x34
 800d612:	e7c1      	b.n	800d598 <__sflush_r+0x1c>
 800d614:	6a21      	ldr	r1, [r4, #32]
 800d616:	2301      	movs	r3, #1
 800d618:	4628      	mov	r0, r5
 800d61a:	47b0      	blx	r6
 800d61c:	1c41      	adds	r1, r0, #1
 800d61e:	d1c7      	bne.n	800d5b0 <__sflush_r+0x34>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0c4      	beq.n	800d5b0 <__sflush_r+0x34>
 800d626:	2b1d      	cmp	r3, #29
 800d628:	d001      	beq.n	800d62e <__sflush_r+0xb2>
 800d62a:	2b16      	cmp	r3, #22
 800d62c:	d101      	bne.n	800d632 <__sflush_r+0xb6>
 800d62e:	602f      	str	r7, [r5, #0]
 800d630:	e7b1      	b.n	800d596 <__sflush_r+0x1a>
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d638:	81a3      	strh	r3, [r4, #12]
 800d63a:	e7ad      	b.n	800d598 <__sflush_r+0x1c>
 800d63c:	690f      	ldr	r7, [r1, #16]
 800d63e:	2f00      	cmp	r7, #0
 800d640:	d0a9      	beq.n	800d596 <__sflush_r+0x1a>
 800d642:	0793      	lsls	r3, r2, #30
 800d644:	680e      	ldr	r6, [r1, #0]
 800d646:	bf08      	it	eq
 800d648:	694b      	ldreq	r3, [r1, #20]
 800d64a:	600f      	str	r7, [r1, #0]
 800d64c:	bf18      	it	ne
 800d64e:	2300      	movne	r3, #0
 800d650:	eba6 0807 	sub.w	r8, r6, r7
 800d654:	608b      	str	r3, [r1, #8]
 800d656:	f1b8 0f00 	cmp.w	r8, #0
 800d65a:	dd9c      	ble.n	800d596 <__sflush_r+0x1a>
 800d65c:	6a21      	ldr	r1, [r4, #32]
 800d65e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d660:	4643      	mov	r3, r8
 800d662:	463a      	mov	r2, r7
 800d664:	4628      	mov	r0, r5
 800d666:	47b0      	blx	r6
 800d668:	2800      	cmp	r0, #0
 800d66a:	dc06      	bgt.n	800d67a <__sflush_r+0xfe>
 800d66c:	89a3      	ldrh	r3, [r4, #12]
 800d66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d672:	81a3      	strh	r3, [r4, #12]
 800d674:	f04f 30ff 	mov.w	r0, #4294967295
 800d678:	e78e      	b.n	800d598 <__sflush_r+0x1c>
 800d67a:	4407      	add	r7, r0
 800d67c:	eba8 0800 	sub.w	r8, r8, r0
 800d680:	e7e9      	b.n	800d656 <__sflush_r+0xda>
 800d682:	bf00      	nop
 800d684:	20400001 	.word	0x20400001

0800d688 <_fflush_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	690b      	ldr	r3, [r1, #16]
 800d68c:	4605      	mov	r5, r0
 800d68e:	460c      	mov	r4, r1
 800d690:	b913      	cbnz	r3, 800d698 <_fflush_r+0x10>
 800d692:	2500      	movs	r5, #0
 800d694:	4628      	mov	r0, r5
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	b118      	cbz	r0, 800d6a2 <_fflush_r+0x1a>
 800d69a:	6983      	ldr	r3, [r0, #24]
 800d69c:	b90b      	cbnz	r3, 800d6a2 <_fflush_r+0x1a>
 800d69e:	f000 f887 	bl	800d7b0 <__sinit>
 800d6a2:	4b14      	ldr	r3, [pc, #80]	; (800d6f4 <_fflush_r+0x6c>)
 800d6a4:	429c      	cmp	r4, r3
 800d6a6:	d11b      	bne.n	800d6e0 <_fflush_r+0x58>
 800d6a8:	686c      	ldr	r4, [r5, #4]
 800d6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0ef      	beq.n	800d692 <_fflush_r+0xa>
 800d6b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6b4:	07d0      	lsls	r0, r2, #31
 800d6b6:	d404      	bmi.n	800d6c2 <_fflush_r+0x3a>
 800d6b8:	0599      	lsls	r1, r3, #22
 800d6ba:	d402      	bmi.n	800d6c2 <_fflush_r+0x3a>
 800d6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6be:	f7ff fd1a 	bl	800d0f6 <__retarget_lock_acquire_recursive>
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	f7ff ff59 	bl	800d57c <__sflush_r>
 800d6ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6cc:	07da      	lsls	r2, r3, #31
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	d4e0      	bmi.n	800d694 <_fflush_r+0xc>
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	059b      	lsls	r3, r3, #22
 800d6d6:	d4dd      	bmi.n	800d694 <_fflush_r+0xc>
 800d6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6da:	f7ff fd0d 	bl	800d0f8 <__retarget_lock_release_recursive>
 800d6de:	e7d9      	b.n	800d694 <_fflush_r+0xc>
 800d6e0:	4b05      	ldr	r3, [pc, #20]	; (800d6f8 <_fflush_r+0x70>)
 800d6e2:	429c      	cmp	r4, r3
 800d6e4:	d101      	bne.n	800d6ea <_fflush_r+0x62>
 800d6e6:	68ac      	ldr	r4, [r5, #8]
 800d6e8:	e7df      	b.n	800d6aa <_fflush_r+0x22>
 800d6ea:	4b04      	ldr	r3, [pc, #16]	; (800d6fc <_fflush_r+0x74>)
 800d6ec:	429c      	cmp	r4, r3
 800d6ee:	bf08      	it	eq
 800d6f0:	68ec      	ldreq	r4, [r5, #12]
 800d6f2:	e7da      	b.n	800d6aa <_fflush_r+0x22>
 800d6f4:	0800e04c 	.word	0x0800e04c
 800d6f8:	0800e06c 	.word	0x0800e06c
 800d6fc:	0800e02c 	.word	0x0800e02c

0800d700 <std>:
 800d700:	2300      	movs	r3, #0
 800d702:	b510      	push	{r4, lr}
 800d704:	4604      	mov	r4, r0
 800d706:	e9c0 3300 	strd	r3, r3, [r0]
 800d70a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d70e:	6083      	str	r3, [r0, #8]
 800d710:	8181      	strh	r1, [r0, #12]
 800d712:	6643      	str	r3, [r0, #100]	; 0x64
 800d714:	81c2      	strh	r2, [r0, #14]
 800d716:	6183      	str	r3, [r0, #24]
 800d718:	4619      	mov	r1, r3
 800d71a:	2208      	movs	r2, #8
 800d71c:	305c      	adds	r0, #92	; 0x5c
 800d71e:	f7fd fd75 	bl	800b20c <memset>
 800d722:	4b05      	ldr	r3, [pc, #20]	; (800d738 <std+0x38>)
 800d724:	6263      	str	r3, [r4, #36]	; 0x24
 800d726:	4b05      	ldr	r3, [pc, #20]	; (800d73c <std+0x3c>)
 800d728:	62a3      	str	r3, [r4, #40]	; 0x28
 800d72a:	4b05      	ldr	r3, [pc, #20]	; (800d740 <std+0x40>)
 800d72c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d72e:	4b05      	ldr	r3, [pc, #20]	; (800d744 <std+0x44>)
 800d730:	6224      	str	r4, [r4, #32]
 800d732:	6323      	str	r3, [r4, #48]	; 0x30
 800d734:	bd10      	pop	{r4, pc}
 800d736:	bf00      	nop
 800d738:	0800da3d 	.word	0x0800da3d
 800d73c:	0800da5f 	.word	0x0800da5f
 800d740:	0800da97 	.word	0x0800da97
 800d744:	0800dabb 	.word	0x0800dabb

0800d748 <_cleanup_r>:
 800d748:	4901      	ldr	r1, [pc, #4]	; (800d750 <_cleanup_r+0x8>)
 800d74a:	f000 b8af 	b.w	800d8ac <_fwalk_reent>
 800d74e:	bf00      	nop
 800d750:	0800d689 	.word	0x0800d689

0800d754 <__sfmoreglue>:
 800d754:	b570      	push	{r4, r5, r6, lr}
 800d756:	1e4a      	subs	r2, r1, #1
 800d758:	2568      	movs	r5, #104	; 0x68
 800d75a:	4355      	muls	r5, r2
 800d75c:	460e      	mov	r6, r1
 800d75e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d762:	f7fd fdbb 	bl	800b2dc <_malloc_r>
 800d766:	4604      	mov	r4, r0
 800d768:	b140      	cbz	r0, 800d77c <__sfmoreglue+0x28>
 800d76a:	2100      	movs	r1, #0
 800d76c:	e9c0 1600 	strd	r1, r6, [r0]
 800d770:	300c      	adds	r0, #12
 800d772:	60a0      	str	r0, [r4, #8]
 800d774:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d778:	f7fd fd48 	bl	800b20c <memset>
 800d77c:	4620      	mov	r0, r4
 800d77e:	bd70      	pop	{r4, r5, r6, pc}

0800d780 <__sfp_lock_acquire>:
 800d780:	4801      	ldr	r0, [pc, #4]	; (800d788 <__sfp_lock_acquire+0x8>)
 800d782:	f7ff bcb8 	b.w	800d0f6 <__retarget_lock_acquire_recursive>
 800d786:	bf00      	nop
 800d788:	20008954 	.word	0x20008954

0800d78c <__sfp_lock_release>:
 800d78c:	4801      	ldr	r0, [pc, #4]	; (800d794 <__sfp_lock_release+0x8>)
 800d78e:	f7ff bcb3 	b.w	800d0f8 <__retarget_lock_release_recursive>
 800d792:	bf00      	nop
 800d794:	20008954 	.word	0x20008954

0800d798 <__sinit_lock_acquire>:
 800d798:	4801      	ldr	r0, [pc, #4]	; (800d7a0 <__sinit_lock_acquire+0x8>)
 800d79a:	f7ff bcac 	b.w	800d0f6 <__retarget_lock_acquire_recursive>
 800d79e:	bf00      	nop
 800d7a0:	2000894f 	.word	0x2000894f

0800d7a4 <__sinit_lock_release>:
 800d7a4:	4801      	ldr	r0, [pc, #4]	; (800d7ac <__sinit_lock_release+0x8>)
 800d7a6:	f7ff bca7 	b.w	800d0f8 <__retarget_lock_release_recursive>
 800d7aa:	bf00      	nop
 800d7ac:	2000894f 	.word	0x2000894f

0800d7b0 <__sinit>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	f7ff fff0 	bl	800d798 <__sinit_lock_acquire>
 800d7b8:	69a3      	ldr	r3, [r4, #24]
 800d7ba:	b11b      	cbz	r3, 800d7c4 <__sinit+0x14>
 800d7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7c0:	f7ff bff0 	b.w	800d7a4 <__sinit_lock_release>
 800d7c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7c8:	6523      	str	r3, [r4, #80]	; 0x50
 800d7ca:	4b13      	ldr	r3, [pc, #76]	; (800d818 <__sinit+0x68>)
 800d7cc:	4a13      	ldr	r2, [pc, #76]	; (800d81c <__sinit+0x6c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d7d2:	42a3      	cmp	r3, r4
 800d7d4:	bf04      	itt	eq
 800d7d6:	2301      	moveq	r3, #1
 800d7d8:	61a3      	streq	r3, [r4, #24]
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f000 f820 	bl	800d820 <__sfp>
 800d7e0:	6060      	str	r0, [r4, #4]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f000 f81c 	bl	800d820 <__sfp>
 800d7e8:	60a0      	str	r0, [r4, #8]
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 f818 	bl	800d820 <__sfp>
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	60e0      	str	r0, [r4, #12]
 800d7f4:	2104      	movs	r1, #4
 800d7f6:	6860      	ldr	r0, [r4, #4]
 800d7f8:	f7ff ff82 	bl	800d700 <std>
 800d7fc:	68a0      	ldr	r0, [r4, #8]
 800d7fe:	2201      	movs	r2, #1
 800d800:	2109      	movs	r1, #9
 800d802:	f7ff ff7d 	bl	800d700 <std>
 800d806:	68e0      	ldr	r0, [r4, #12]
 800d808:	2202      	movs	r2, #2
 800d80a:	2112      	movs	r1, #18
 800d80c:	f7ff ff78 	bl	800d700 <std>
 800d810:	2301      	movs	r3, #1
 800d812:	61a3      	str	r3, [r4, #24]
 800d814:	e7d2      	b.n	800d7bc <__sinit+0xc>
 800d816:	bf00      	nop
 800d818:	0800dca8 	.word	0x0800dca8
 800d81c:	0800d749 	.word	0x0800d749

0800d820 <__sfp>:
 800d820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d822:	4607      	mov	r7, r0
 800d824:	f7ff ffac 	bl	800d780 <__sfp_lock_acquire>
 800d828:	4b1e      	ldr	r3, [pc, #120]	; (800d8a4 <__sfp+0x84>)
 800d82a:	681e      	ldr	r6, [r3, #0]
 800d82c:	69b3      	ldr	r3, [r6, #24]
 800d82e:	b913      	cbnz	r3, 800d836 <__sfp+0x16>
 800d830:	4630      	mov	r0, r6
 800d832:	f7ff ffbd 	bl	800d7b0 <__sinit>
 800d836:	3648      	adds	r6, #72	; 0x48
 800d838:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	d503      	bpl.n	800d848 <__sfp+0x28>
 800d840:	6833      	ldr	r3, [r6, #0]
 800d842:	b30b      	cbz	r3, 800d888 <__sfp+0x68>
 800d844:	6836      	ldr	r6, [r6, #0]
 800d846:	e7f7      	b.n	800d838 <__sfp+0x18>
 800d848:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d84c:	b9d5      	cbnz	r5, 800d884 <__sfp+0x64>
 800d84e:	4b16      	ldr	r3, [pc, #88]	; (800d8a8 <__sfp+0x88>)
 800d850:	60e3      	str	r3, [r4, #12]
 800d852:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d856:	6665      	str	r5, [r4, #100]	; 0x64
 800d858:	f7ff fc4c 	bl	800d0f4 <__retarget_lock_init_recursive>
 800d85c:	f7ff ff96 	bl	800d78c <__sfp_lock_release>
 800d860:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d864:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d868:	6025      	str	r5, [r4, #0]
 800d86a:	61a5      	str	r5, [r4, #24]
 800d86c:	2208      	movs	r2, #8
 800d86e:	4629      	mov	r1, r5
 800d870:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d874:	f7fd fcca 	bl	800b20c <memset>
 800d878:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d87c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d880:	4620      	mov	r0, r4
 800d882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d884:	3468      	adds	r4, #104	; 0x68
 800d886:	e7d9      	b.n	800d83c <__sfp+0x1c>
 800d888:	2104      	movs	r1, #4
 800d88a:	4638      	mov	r0, r7
 800d88c:	f7ff ff62 	bl	800d754 <__sfmoreglue>
 800d890:	4604      	mov	r4, r0
 800d892:	6030      	str	r0, [r6, #0]
 800d894:	2800      	cmp	r0, #0
 800d896:	d1d5      	bne.n	800d844 <__sfp+0x24>
 800d898:	f7ff ff78 	bl	800d78c <__sfp_lock_release>
 800d89c:	230c      	movs	r3, #12
 800d89e:	603b      	str	r3, [r7, #0]
 800d8a0:	e7ee      	b.n	800d880 <__sfp+0x60>
 800d8a2:	bf00      	nop
 800d8a4:	0800dca8 	.word	0x0800dca8
 800d8a8:	ffff0001 	.word	0xffff0001

0800d8ac <_fwalk_reent>:
 800d8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8b0:	4606      	mov	r6, r0
 800d8b2:	4688      	mov	r8, r1
 800d8b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8b8:	2700      	movs	r7, #0
 800d8ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8be:	f1b9 0901 	subs.w	r9, r9, #1
 800d8c2:	d505      	bpl.n	800d8d0 <_fwalk_reent+0x24>
 800d8c4:	6824      	ldr	r4, [r4, #0]
 800d8c6:	2c00      	cmp	r4, #0
 800d8c8:	d1f7      	bne.n	800d8ba <_fwalk_reent+0xe>
 800d8ca:	4638      	mov	r0, r7
 800d8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d0:	89ab      	ldrh	r3, [r5, #12]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d907      	bls.n	800d8e6 <_fwalk_reent+0x3a>
 800d8d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	d003      	beq.n	800d8e6 <_fwalk_reent+0x3a>
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	47c0      	blx	r8
 800d8e4:	4307      	orrs	r7, r0
 800d8e6:	3568      	adds	r5, #104	; 0x68
 800d8e8:	e7e9      	b.n	800d8be <_fwalk_reent+0x12>

0800d8ea <__swhatbuf_r>:
 800d8ea:	b570      	push	{r4, r5, r6, lr}
 800d8ec:	460e      	mov	r6, r1
 800d8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f2:	2900      	cmp	r1, #0
 800d8f4:	b096      	sub	sp, #88	; 0x58
 800d8f6:	4614      	mov	r4, r2
 800d8f8:	461d      	mov	r5, r3
 800d8fa:	da07      	bge.n	800d90c <__swhatbuf_r+0x22>
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	602b      	str	r3, [r5, #0]
 800d900:	89b3      	ldrh	r3, [r6, #12]
 800d902:	061a      	lsls	r2, r3, #24
 800d904:	d410      	bmi.n	800d928 <__swhatbuf_r+0x3e>
 800d906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d90a:	e00e      	b.n	800d92a <__swhatbuf_r+0x40>
 800d90c:	466a      	mov	r2, sp
 800d90e:	f000 f8fb 	bl	800db08 <_fstat_r>
 800d912:	2800      	cmp	r0, #0
 800d914:	dbf2      	blt.n	800d8fc <__swhatbuf_r+0x12>
 800d916:	9a01      	ldr	r2, [sp, #4]
 800d918:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d91c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d920:	425a      	negs	r2, r3
 800d922:	415a      	adcs	r2, r3
 800d924:	602a      	str	r2, [r5, #0]
 800d926:	e7ee      	b.n	800d906 <__swhatbuf_r+0x1c>
 800d928:	2340      	movs	r3, #64	; 0x40
 800d92a:	2000      	movs	r0, #0
 800d92c:	6023      	str	r3, [r4, #0]
 800d92e:	b016      	add	sp, #88	; 0x58
 800d930:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d934 <__smakebuf_r>:
 800d934:	898b      	ldrh	r3, [r1, #12]
 800d936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d938:	079d      	lsls	r5, r3, #30
 800d93a:	4606      	mov	r6, r0
 800d93c:	460c      	mov	r4, r1
 800d93e:	d507      	bpl.n	800d950 <__smakebuf_r+0x1c>
 800d940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	6123      	str	r3, [r4, #16]
 800d948:	2301      	movs	r3, #1
 800d94a:	6163      	str	r3, [r4, #20]
 800d94c:	b002      	add	sp, #8
 800d94e:	bd70      	pop	{r4, r5, r6, pc}
 800d950:	ab01      	add	r3, sp, #4
 800d952:	466a      	mov	r2, sp
 800d954:	f7ff ffc9 	bl	800d8ea <__swhatbuf_r>
 800d958:	9900      	ldr	r1, [sp, #0]
 800d95a:	4605      	mov	r5, r0
 800d95c:	4630      	mov	r0, r6
 800d95e:	f7fd fcbd 	bl	800b2dc <_malloc_r>
 800d962:	b948      	cbnz	r0, 800d978 <__smakebuf_r+0x44>
 800d964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d968:	059a      	lsls	r2, r3, #22
 800d96a:	d4ef      	bmi.n	800d94c <__smakebuf_r+0x18>
 800d96c:	f023 0303 	bic.w	r3, r3, #3
 800d970:	f043 0302 	orr.w	r3, r3, #2
 800d974:	81a3      	strh	r3, [r4, #12]
 800d976:	e7e3      	b.n	800d940 <__smakebuf_r+0xc>
 800d978:	4b0d      	ldr	r3, [pc, #52]	; (800d9b0 <__smakebuf_r+0x7c>)
 800d97a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	6020      	str	r0, [r4, #0]
 800d980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d984:	81a3      	strh	r3, [r4, #12]
 800d986:	9b00      	ldr	r3, [sp, #0]
 800d988:	6163      	str	r3, [r4, #20]
 800d98a:	9b01      	ldr	r3, [sp, #4]
 800d98c:	6120      	str	r0, [r4, #16]
 800d98e:	b15b      	cbz	r3, 800d9a8 <__smakebuf_r+0x74>
 800d990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d994:	4630      	mov	r0, r6
 800d996:	f000 f8c9 	bl	800db2c <_isatty_r>
 800d99a:	b128      	cbz	r0, 800d9a8 <__smakebuf_r+0x74>
 800d99c:	89a3      	ldrh	r3, [r4, #12]
 800d99e:	f023 0303 	bic.w	r3, r3, #3
 800d9a2:	f043 0301 	orr.w	r3, r3, #1
 800d9a6:	81a3      	strh	r3, [r4, #12]
 800d9a8:	89a0      	ldrh	r0, [r4, #12]
 800d9aa:	4305      	orrs	r5, r0
 800d9ac:	81a5      	strh	r5, [r4, #12]
 800d9ae:	e7cd      	b.n	800d94c <__smakebuf_r+0x18>
 800d9b0:	0800d749 	.word	0x0800d749

0800d9b4 <_raise_r>:
 800d9b4:	291f      	cmp	r1, #31
 800d9b6:	b538      	push	{r3, r4, r5, lr}
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	460d      	mov	r5, r1
 800d9bc:	d904      	bls.n	800d9c8 <_raise_r+0x14>
 800d9be:	2316      	movs	r3, #22
 800d9c0:	6003      	str	r3, [r0, #0]
 800d9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c6:	bd38      	pop	{r3, r4, r5, pc}
 800d9c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9ca:	b112      	cbz	r2, 800d9d2 <_raise_r+0x1e>
 800d9cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9d0:	b94b      	cbnz	r3, 800d9e6 <_raise_r+0x32>
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f000 f830 	bl	800da38 <_getpid_r>
 800d9d8:	462a      	mov	r2, r5
 800d9da:	4601      	mov	r1, r0
 800d9dc:	4620      	mov	r0, r4
 800d9de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9e2:	f000 b817 	b.w	800da14 <_kill_r>
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d00a      	beq.n	800da00 <_raise_r+0x4c>
 800d9ea:	1c59      	adds	r1, r3, #1
 800d9ec:	d103      	bne.n	800d9f6 <_raise_r+0x42>
 800d9ee:	2316      	movs	r3, #22
 800d9f0:	6003      	str	r3, [r0, #0]
 800d9f2:	2001      	movs	r0, #1
 800d9f4:	e7e7      	b.n	800d9c6 <_raise_r+0x12>
 800d9f6:	2400      	movs	r4, #0
 800d9f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	4798      	blx	r3
 800da00:	2000      	movs	r0, #0
 800da02:	e7e0      	b.n	800d9c6 <_raise_r+0x12>

0800da04 <raise>:
 800da04:	4b02      	ldr	r3, [pc, #8]	; (800da10 <raise+0xc>)
 800da06:	4601      	mov	r1, r0
 800da08:	6818      	ldr	r0, [r3, #0]
 800da0a:	f7ff bfd3 	b.w	800d9b4 <_raise_r>
 800da0e:	bf00      	nop
 800da10:	20000144 	.word	0x20000144

0800da14 <_kill_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4d07      	ldr	r5, [pc, #28]	; (800da34 <_kill_r+0x20>)
 800da18:	2300      	movs	r3, #0
 800da1a:	4604      	mov	r4, r0
 800da1c:	4608      	mov	r0, r1
 800da1e:	4611      	mov	r1, r2
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	f7f4 fb89 	bl	8002138 <_kill>
 800da26:	1c43      	adds	r3, r0, #1
 800da28:	d102      	bne.n	800da30 <_kill_r+0x1c>
 800da2a:	682b      	ldr	r3, [r5, #0]
 800da2c:	b103      	cbz	r3, 800da30 <_kill_r+0x1c>
 800da2e:	6023      	str	r3, [r4, #0]
 800da30:	bd38      	pop	{r3, r4, r5, pc}
 800da32:	bf00      	nop
 800da34:	20008948 	.word	0x20008948

0800da38 <_getpid_r>:
 800da38:	f7f4 bb76 	b.w	8002128 <_getpid>

0800da3c <__sread>:
 800da3c:	b510      	push	{r4, lr}
 800da3e:	460c      	mov	r4, r1
 800da40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da44:	f000 f894 	bl	800db70 <_read_r>
 800da48:	2800      	cmp	r0, #0
 800da4a:	bfab      	itete	ge
 800da4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da4e:	89a3      	ldrhlt	r3, [r4, #12]
 800da50:	181b      	addge	r3, r3, r0
 800da52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da56:	bfac      	ite	ge
 800da58:	6563      	strge	r3, [r4, #84]	; 0x54
 800da5a:	81a3      	strhlt	r3, [r4, #12]
 800da5c:	bd10      	pop	{r4, pc}

0800da5e <__swrite>:
 800da5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da62:	461f      	mov	r7, r3
 800da64:	898b      	ldrh	r3, [r1, #12]
 800da66:	05db      	lsls	r3, r3, #23
 800da68:	4605      	mov	r5, r0
 800da6a:	460c      	mov	r4, r1
 800da6c:	4616      	mov	r6, r2
 800da6e:	d505      	bpl.n	800da7c <__swrite+0x1e>
 800da70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da74:	2302      	movs	r3, #2
 800da76:	2200      	movs	r2, #0
 800da78:	f000 f868 	bl	800db4c <_lseek_r>
 800da7c:	89a3      	ldrh	r3, [r4, #12]
 800da7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da86:	81a3      	strh	r3, [r4, #12]
 800da88:	4632      	mov	r2, r6
 800da8a:	463b      	mov	r3, r7
 800da8c:	4628      	mov	r0, r5
 800da8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da92:	f000 b817 	b.w	800dac4 <_write_r>

0800da96 <__sseek>:
 800da96:	b510      	push	{r4, lr}
 800da98:	460c      	mov	r4, r1
 800da9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da9e:	f000 f855 	bl	800db4c <_lseek_r>
 800daa2:	1c43      	adds	r3, r0, #1
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	bf15      	itete	ne
 800daa8:	6560      	strne	r0, [r4, #84]	; 0x54
 800daaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800daae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dab2:	81a3      	strheq	r3, [r4, #12]
 800dab4:	bf18      	it	ne
 800dab6:	81a3      	strhne	r3, [r4, #12]
 800dab8:	bd10      	pop	{r4, pc}

0800daba <__sclose>:
 800daba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dabe:	f000 b813 	b.w	800dae8 <_close_r>
	...

0800dac4 <_write_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4d07      	ldr	r5, [pc, #28]	; (800dae4 <_write_r+0x20>)
 800dac8:	4604      	mov	r4, r0
 800daca:	4608      	mov	r0, r1
 800dacc:	4611      	mov	r1, r2
 800dace:	2200      	movs	r2, #0
 800dad0:	602a      	str	r2, [r5, #0]
 800dad2:	461a      	mov	r2, r3
 800dad4:	f7f4 fb67 	bl	80021a6 <_write>
 800dad8:	1c43      	adds	r3, r0, #1
 800dada:	d102      	bne.n	800dae2 <_write_r+0x1e>
 800dadc:	682b      	ldr	r3, [r5, #0]
 800dade:	b103      	cbz	r3, 800dae2 <_write_r+0x1e>
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	bd38      	pop	{r3, r4, r5, pc}
 800dae4:	20008948 	.word	0x20008948

0800dae8 <_close_r>:
 800dae8:	b538      	push	{r3, r4, r5, lr}
 800daea:	4d06      	ldr	r5, [pc, #24]	; (800db04 <_close_r+0x1c>)
 800daec:	2300      	movs	r3, #0
 800daee:	4604      	mov	r4, r0
 800daf0:	4608      	mov	r0, r1
 800daf2:	602b      	str	r3, [r5, #0]
 800daf4:	f7f4 fb73 	bl	80021de <_close>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d102      	bne.n	800db02 <_close_r+0x1a>
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	b103      	cbz	r3, 800db02 <_close_r+0x1a>
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	bd38      	pop	{r3, r4, r5, pc}
 800db04:	20008948 	.word	0x20008948

0800db08 <_fstat_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d07      	ldr	r5, [pc, #28]	; (800db28 <_fstat_r+0x20>)
 800db0c:	2300      	movs	r3, #0
 800db0e:	4604      	mov	r4, r0
 800db10:	4608      	mov	r0, r1
 800db12:	4611      	mov	r1, r2
 800db14:	602b      	str	r3, [r5, #0]
 800db16:	f7f4 fb6e 	bl	80021f6 <_fstat>
 800db1a:	1c43      	adds	r3, r0, #1
 800db1c:	d102      	bne.n	800db24 <_fstat_r+0x1c>
 800db1e:	682b      	ldr	r3, [r5, #0]
 800db20:	b103      	cbz	r3, 800db24 <_fstat_r+0x1c>
 800db22:	6023      	str	r3, [r4, #0]
 800db24:	bd38      	pop	{r3, r4, r5, pc}
 800db26:	bf00      	nop
 800db28:	20008948 	.word	0x20008948

0800db2c <_isatty_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d06      	ldr	r5, [pc, #24]	; (800db48 <_isatty_r+0x1c>)
 800db30:	2300      	movs	r3, #0
 800db32:	4604      	mov	r4, r0
 800db34:	4608      	mov	r0, r1
 800db36:	602b      	str	r3, [r5, #0]
 800db38:	f7f4 fb6d 	bl	8002216 <_isatty>
 800db3c:	1c43      	adds	r3, r0, #1
 800db3e:	d102      	bne.n	800db46 <_isatty_r+0x1a>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	b103      	cbz	r3, 800db46 <_isatty_r+0x1a>
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	bd38      	pop	{r3, r4, r5, pc}
 800db48:	20008948 	.word	0x20008948

0800db4c <_lseek_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4d07      	ldr	r5, [pc, #28]	; (800db6c <_lseek_r+0x20>)
 800db50:	4604      	mov	r4, r0
 800db52:	4608      	mov	r0, r1
 800db54:	4611      	mov	r1, r2
 800db56:	2200      	movs	r2, #0
 800db58:	602a      	str	r2, [r5, #0]
 800db5a:	461a      	mov	r2, r3
 800db5c:	f7f4 fb66 	bl	800222c <_lseek>
 800db60:	1c43      	adds	r3, r0, #1
 800db62:	d102      	bne.n	800db6a <_lseek_r+0x1e>
 800db64:	682b      	ldr	r3, [r5, #0]
 800db66:	b103      	cbz	r3, 800db6a <_lseek_r+0x1e>
 800db68:	6023      	str	r3, [r4, #0]
 800db6a:	bd38      	pop	{r3, r4, r5, pc}
 800db6c:	20008948 	.word	0x20008948

0800db70 <_read_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4d07      	ldr	r5, [pc, #28]	; (800db90 <_read_r+0x20>)
 800db74:	4604      	mov	r4, r0
 800db76:	4608      	mov	r0, r1
 800db78:	4611      	mov	r1, r2
 800db7a:	2200      	movs	r2, #0
 800db7c:	602a      	str	r2, [r5, #0]
 800db7e:	461a      	mov	r2, r3
 800db80:	f7f4 faf4 	bl	800216c <_read>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_read_r+0x1e>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_read_r+0x1e>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	20008948 	.word	0x20008948

0800db94 <_init>:
 800db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db96:	bf00      	nop
 800db98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db9a:	bc08      	pop	{r3}
 800db9c:	469e      	mov	lr, r3
 800db9e:	4770      	bx	lr

0800dba0 <_fini>:
 800dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba2:	bf00      	nop
 800dba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba6:	bc08      	pop	{r3}
 800dba8:	469e      	mov	lr, r3
 800dbaa:	4770      	bx	lr
