
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800ccf0  0800ccf0  0001ccf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1cc  0800d1cc  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1cc  0800d1cc  0001d1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1d4  0800d1d4  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1d4  0800d1d4  0001d1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1d8  0800d1d8  0001d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0800d1dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008640  20000314  0800d4f0  00020314  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008954  0800d4f0  00028954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031a20  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d05  00000000  00000000  00051d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002188  00000000  00000000  00057a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f30  00000000  00000000  00059bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029264  00000000  00000000  0005bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026eb1  00000000  00000000  00084d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eef0b  00000000  00000000  000abc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019ab48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bb8  00000000  00000000  0019ab9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000314 	.word	0x20000314
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ccd4 	.word	0x0800ccd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000318 	.word	0x20000318
 80001cc:	0800ccd4 	.word	0x0800ccd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <AS7341init>:
/*
void AS7341begin(I2C_HandleTypeDef hi2c1){
	as7341.hi2c = hi2c1;
}
*/
bool AS7341init(I2C_HandleTypeDef hi2c1, int32_t sensor_id){
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	f107 0c08 	add.w	ip, r7, #8
 8000eea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	as7341.hi2c = hi2c1;
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <AS7341init+0xc8>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	224c      	movs	r2, #76	; 0x4c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f009 fa19 	bl	800a330 <memcpy>

	as7341.sensor_ID 		= sensor_id;
 8000efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <AS7341init+0xc8>)
 8000f04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	as7341.writing_ID		= 0x72;
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <AS7341init+0xc8>)
 8000f0a:	2272      	movs	r2, #114	; 0x72
 8000f0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	as7341.astep.address_L 	= AS7341_ASTEP_L;
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <AS7341init+0xc8>)
 8000f12:	22ca      	movs	r2, #202	; 0xca
 8000f14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	as7341.astep.address_H 	= AS7341_ASTEP_H;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <AS7341init+0xc8>)
 8000f1a:	22cb      	movs	r2, #203	; 0xcb
 8000f1c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	as7341.astep.value		= 1;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <AS7341init+0xc8>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	as7341.atime.address 	= AS7341_ATIME;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <AS7341init+0xc8>)
 8000f2a:	2281      	movs	r2, #129	; 0x81
 8000f2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	as7341.atime.value		= 999;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <AS7341init+0xc8>)
 8000f32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	as7341.gain.address		= AS7341_CFG1;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <AS7341init+0xc8>)
 8000f3c:	22aa      	movs	r2, #170	; 0xaa
 8000f3e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	as7341.integrationTime	= (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <AS7341init+0xc8>)
 8000f44:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000f48:	3301      	adds	r3, #1
 8000f4a:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <AS7341init+0xc8>)
 8000f4c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8000f50:	3201      	adds	r2, #1
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fae4 	bl	8000524 <__aeabi_i2d>
 8000f5c:	a310      	add	r3, pc, #64	; (adr r3, 8000fa0 <AS7341init+0xc0>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fb49 	bl	80005f8 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <AS7341init+0xcc>)
 8000f74:	f7ff fc6a 	bl	800084c <__aeabi_ddiv>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fe12 	bl	8000ba8 <__aeabi_d2uiz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <AS7341init+0xc8>)
 8000f8a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
}
 8000f8e:	bf00      	nop
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f98:	b004      	add	sp, #16
 8000f9a:	4770      	bx	lr
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	a3d70a3d 	.word	0xa3d70a3d
 8000fa4:	40063d70 	.word	0x40063d70
 8000fa8:	200085a0 	.word	0x200085a0
 8000fac:	408f4000 	.word	0x408f4000

08000fb0 <setGain>:

	return AS7341_ERROR_NO;
}

//TESTED
as7341_ReturnError_t setGain(uint8_t gain_value) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	//make sure GAIN is between 0 and 10
	if(gain_value<AS7341_GAIN_0_5X || gain_value>=AS7341_GAIN_512X){
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d902      	bls.n	8000fc6 <setGain+0x16>
		return AS7341_ERROR_ATIME_OUT_OF_RANGE;
 8000fc0:	f06f 0301 	mvn.w	r3, #1
 8000fc4:	e030      	b.n	8001028 <setGain+0x78>
	}

	uint8_t data[] = {as7341.gain.address, gain_value};
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <setGain+0x80>)
 8000fc8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000fcc:	733b      	strb	r3, [r7, #12]
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, data, sizeof(data), HAL_MAX_DELAY);
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <setGain+0x80>)
 8000fd4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000fd8:	b299      	uxth	r1, r3
 8000fda:	f107 020c 	add.w	r2, r7, #12
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	4812      	ldr	r0, [pc, #72]	; (8001030 <setGain+0x80>)
 8000fe8:	f003 faa4 	bl	8004534 <HAL_I2C_Master_Transmit>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <setGain+0x84>)
 8000ff2:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_IsDeviceReady(&as7341.hi2c, as7341.writing_ID, 10, 200);
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <setGain+0x80>)
 8000ff6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	23c8      	movs	r3, #200	; 0xc8
 8000ffe:	220a      	movs	r2, #10
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <setGain+0x80>)
 8001002:	f003 fc81 	bl	8004908 <HAL_I2C_IsDeviceReady>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <setGain+0x84>)
 800100c:	701a      	strb	r2, [r3, #0]

	if(status != HAL_OK){
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <setGain+0x84>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <setGain+0x6e>
		return status;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <setGain+0x84>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b25b      	sxtb	r3, r3
 800101c:	e004      	b.n	8001028 <setGain+0x78>
	}

	as7341.gain.value = gain_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <setGain+0x80>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57

	return AS7341_ERROR_NO;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200085a0 	.word	0x200085a0
 8001034:	20008620 	.word	0x20008620

08001038 <readAllChannels>:
	  as7341.rawToBasicCounts = raw / (gain_val * (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000);
	  return as7341.rawToBasicCounts;
}


uint16_t readAllChannels(uint16_t *readings_buffer) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_CH0_DATA_L,0x02};
 8001040:	f240 2395 	movw	r3, #661	; 0x295
 8001044:	813b      	strh	r3, [r7, #8]
	uint16_t buff = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	817b      	strh	r3, [r7, #10]

    for(int i=0; i<12; i++){
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e009      	b.n	8001064 <readAllChannels+0x2c>
        as7341._channel_readings[i]=0;
 8001050:	4a53      	ldr	r2, [pc, #332]	; (80011a0 <readAllChannels+0x168>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3330      	adds	r3, #48	; 0x30
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	2200      	movs	r2, #0
 800105c:	809a      	strh	r2, [r3, #4]
    for(int i=0; i<12; i++){
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b0b      	cmp	r3, #11
 8001068:	ddf2      	ble.n	8001050 <readAllChannels+0x18>
    }

	setSMUXLowChannels(true);        // Configure SMUX to read low channels
 800106a:	2001      	movs	r0, #1
 800106c:	f000 fa88 	bl	8001580 <setSMUXLowChannels>
  	enableSpectralMeasurement(true); // Start integration
 8001070:	2001      	movs	r0, #1
 8001072:	f000 f995 	bl	80013a0 <enableSpectralMeasurement>
  	delayForData(0);                 // I'll wait for you for all time
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f89a 	bl	80011b0 <delayForData>

  	readings_buffer=as7341._channel_readings;
 800107c:	4b49      	ldr	r3, [pc, #292]	; (80011a4 <readAllChannels+0x16c>)
 800107e:	607b      	str	r3, [r7, #4]

  	status = HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY);
 8001080:	f107 0208 	add.w	r2, r7, #8
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	2172      	movs	r1, #114	; 0x72
 800108e:	4844      	ldr	r0, [pc, #272]	; (80011a0 <readAllChannels+0x168>)
 8001090:	f003 fa50 	bl	8004534 <HAL_I2C_Master_Transmit>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <readAllChannels+0x170>)
 800109a:	701a      	strb	r2, [r3, #0]
  	status = HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200);
 800109c:	23c8      	movs	r3, #200	; 0xc8
 800109e:	220a      	movs	r2, #10
 80010a0:	2172      	movs	r1, #114	; 0x72
 80010a2:	483f      	ldr	r0, [pc, #252]	; (80011a0 <readAllChannels+0x168>)
 80010a4:	f003 fc30 	bl	8004908 <HAL_I2C_IsDeviceReady>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <readAllChannels+0x170>)
 80010ae:	701a      	strb	r2, [r3, #0]

  	regwrite[0]=AS7341_CH0_DATA_L;
 80010b0:	2395      	movs	r3, #149	; 0x95
 80010b2:	723b      	strb	r3, [r7, #8]
  	status = HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 80010b4:	f107 0208 	add.w	r2, r7, #8
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2302      	movs	r3, #2
 80010c0:	2172      	movs	r1, #114	; 0x72
 80010c2:	4837      	ldr	r0, [pc, #220]	; (80011a0 <readAllChannels+0x168>)
 80010c4:	f003 fa36 	bl	8004534 <HAL_I2C_Master_Transmit>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <readAllChannels+0x170>)
 80010ce:	701a      	strb	r2, [r3, #0]
  	status = HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200);
 80010d0:	23c8      	movs	r3, #200	; 0xc8
 80010d2:	220a      	movs	r2, #10
 80010d4:	2172      	movs	r1, #114	; 0x72
 80010d6:	4832      	ldr	r0, [pc, #200]	; (80011a0 <readAllChannels+0x168>)
 80010d8:	f003 fc16 	bl	8004908 <HAL_I2C_IsDeviceReady>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <readAllChannels+0x170>)
 80010e2:	701a      	strb	r2, [r3, #0]
  	status = HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, (uint8_t *)as7341._channel_readings, 12, HAL_MAX_DELAY);
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	230c      	movs	r3, #12
 80010ec:	4a2d      	ldr	r2, [pc, #180]	; (80011a4 <readAllChannels+0x16c>)
 80010ee:	2172      	movs	r1, #114	; 0x72
 80010f0:	482b      	ldr	r0, [pc, #172]	; (80011a0 <readAllChannels+0x168>)
 80010f2:	f003 fb13 	bl	800471c <HAL_I2C_Master_Receive>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <readAllChannels+0x170>)
 80010fc:	701a      	strb	r2, [r3, #0]


  setSMUXLowChannels(false);       // Configure SMUX to read high channels
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 fa3e 	bl	8001580 <setSMUXLowChannels>
  enableSpectralMeasurement(true); // Start integration
 8001104:	2001      	movs	r0, #1
 8001106:	f000 f94b 	bl	80013a0 <enableSpectralMeasurement>
  delayForData(0);                 // I'll wait for you for all time
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f850 	bl	80011b0 <delayForData>

  regwrite[0]=AS7341_CH0_DATA_L;
 8001110:	2395      	movs	r3, #149	; 0x95
 8001112:	723b      	strb	r3, [r7, #8]
  regwrite[1]=0x02;
 8001114:	2302      	movs	r3, #2
 8001116:	727b      	strb	r3, [r7, #9]
  while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 8001118:	bf00      	nop
 800111a:	f107 0208 	add.w	r2, r7, #8
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2172      	movs	r1, #114	; 0x72
 8001128:	481d      	ldr	r0, [pc, #116]	; (80011a0 <readAllChannels+0x168>)
 800112a:	f003 fa03 	bl	8004534 <HAL_I2C_Master_Transmit>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f2      	bne.n	800111a <readAllChannels+0xe2>
  while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8001134:	bf00      	nop
 8001136:	23c8      	movs	r3, #200	; 0xc8
 8001138:	220a      	movs	r2, #10
 800113a:	2172      	movs	r1, #114	; 0x72
 800113c:	4818      	ldr	r0, [pc, #96]	; (80011a0 <readAllChannels+0x168>)
 800113e:	f003 fbe3 	bl	8004908 <HAL_I2C_IsDeviceReady>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f6      	bne.n	8001136 <readAllChannels+0xfe>

  regwrite[0]=AS7341_CH0_DATA_L;
 8001148:	2395      	movs	r3, #149	; 0x95
 800114a:	723b      	strb	r3, [r7, #8]
  while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 800114c:	bf00      	nop
 800114e:	f107 0208 	add.w	r2, r7, #8
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2302      	movs	r3, #2
 800115a:	2172      	movs	r1, #114	; 0x72
 800115c:	4810      	ldr	r0, [pc, #64]	; (80011a0 <readAllChannels+0x168>)
 800115e:	f003 f9e9 	bl	8004534 <HAL_I2C_Master_Transmit>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f2      	bne.n	800114e <readAllChannels+0x116>
  while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8001168:	bf00      	nop
 800116a:	23c8      	movs	r3, #200	; 0xc8
 800116c:	220a      	movs	r2, #10
 800116e:	2172      	movs	r1, #114	; 0x72
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <readAllChannels+0x168>)
 8001172:	f003 fbc9 	bl	8004908 <HAL_I2C_IsDeviceReady>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f6      	bne.n	800116a <readAllChannels+0x132>
  while(HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, (uint8_t *)&as7341._channel_readings[6], 12, HAL_MAX_DELAY)!= HAL_OK);
 800117c:	bf00      	nop
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	230c      	movs	r3, #12
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <readAllChannels+0x174>)
 8001188:	2172      	movs	r1, #114	; 0x72
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <readAllChannels+0x168>)
 800118c:	f003 fac6 	bl	800471c <HAL_I2C_Master_Receive>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f3      	bne.n	800117e <readAllChannels+0x146>
  for(int i=0; i<12; i++){
	  buff = ((as7341._channel_readings[i] & 0x00FF) << 8) | (as7341._channel_readings[i]>>8);
	  as7341._channel_readings[i] = buff;
  }
*/
  return 1;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200085a0 	.word	0x200085a0
 80011a4:	20008604 	.word	0x20008604
 80011a8:	20008620 	.word	0x20008620
 80011ac:	20008610 	.word	0x20008610

080011b0 <delayForData>:

void delayForData(int waitTime) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_STATUS2};
 80011b8:	23a3      	movs	r3, #163	; 0xa3
 80011ba:	733b      	strb	r3, [r7, #12]
	uint8_t regRead[1]={0};
 80011bc:	2300      	movs	r3, #0
 80011be:	723b      	strb	r3, [r7, #8]

	while(regRead[0]>>6!=0x01){
 80011c0:	e025      	b.n	800120e <delayForData+0x5e>
//		HAL_Delay(100);
		while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80011c2:	bf00      	nop
 80011c4:	f107 020c 	add.w	r2, r7, #12
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	2172      	movs	r1, #114	; 0x72
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <delayForData+0x74>)
 80011d4:	f003 f9ae 	bl	8004534 <HAL_I2C_Master_Transmit>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f2      	bne.n	80011c4 <delayForData+0x14>
		while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 80011de:	bf00      	nop
 80011e0:	23c8      	movs	r3, #200	; 0xc8
 80011e2:	220a      	movs	r2, #10
 80011e4:	2172      	movs	r1, #114	; 0x72
 80011e6:	480f      	ldr	r0, [pc, #60]	; (8001224 <delayForData+0x74>)
 80011e8:	f003 fb8e 	bl	8004908 <HAL_I2C_IsDeviceReady>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f6      	bne.n	80011e0 <delayForData+0x30>
		while(HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 80011f2:	bf00      	nop
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	2172      	movs	r1, #114	; 0x72
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <delayForData+0x74>)
 8001204:	f003 fa8a 	bl	800471c <HAL_I2C_Master_Receive>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f2      	bne.n	80011f4 <delayForData+0x44>
	while(regRead[0]>>6!=0x01){
 800120e:	7a3b      	ldrb	r3, [r7, #8]
 8001210:	099b      	lsrs	r3, r3, #6
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d1d4      	bne.n	80011c2 <delayForData+0x12>
		//sprintf(msg, "delayForData = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200085a0 	.word	0x200085a0

08001228 <getChannel>:
	read16bits = ((read[0] & 0x00FF) << 8) | read[0]>>8;
	return read16bits;

}

uint16_t getChannel(as7341_color_channel_t channel) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  return as7341._channel_readings[channel];
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <getChannel+0x24>)
 8001236:	3330      	adds	r3, #48	; 0x30
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	889b      	ldrh	r3, [r3, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200085a0 	.word	0x200085a0

08001250 <setup_F1F4_Clear_NIR>:
	  default:
	    return 0;
	  }
}

void setup_F1F4_Clear_NIR() {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  // SMUX Config for F1,F2,F3,F4,NIR,Clear
  writeRegister((0x00), (0x30)); // F3 left set to ADC2
 8001254:	2130      	movs	r1, #48	; 0x30
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f966 	bl	8001528 <writeRegister>
  writeRegister((0x01), (0x01)); // F1 left set to ADC0
 800125c:	2101      	movs	r1, #1
 800125e:	2001      	movs	r0, #1
 8001260:	f000 f962 	bl	8001528 <writeRegister>
  writeRegister((0x02), (0x00)); // Reserved or disabled
 8001264:	2100      	movs	r1, #0
 8001266:	2002      	movs	r0, #2
 8001268:	f000 f95e 	bl	8001528 <writeRegister>
  writeRegister((0x03), (0x00)); // F8 left disabled
 800126c:	2100      	movs	r1, #0
 800126e:	2003      	movs	r0, #3
 8001270:	f000 f95a 	bl	8001528 <writeRegister>
  writeRegister((0x04), (0x00)); // F6 left disabled
 8001274:	2100      	movs	r1, #0
 8001276:	2004      	movs	r0, #4
 8001278:	f000 f956 	bl	8001528 <writeRegister>
  writeRegister((0x05), (0x42)); // F4 left connected to ADC3/f2 left connected to ADC1
 800127c:	2142      	movs	r1, #66	; 0x42
 800127e:	2005      	movs	r0, #5
 8001280:	f000 f952 	bl	8001528 <writeRegister>
  writeRegister((0x06), (0x00)); // F5 left disbled
 8001284:	2100      	movs	r1, #0
 8001286:	2006      	movs	r0, #6
 8001288:	f000 f94e 	bl	8001528 <writeRegister>
  writeRegister((0x07), (0x00)); // F7 left disbled
 800128c:	2100      	movs	r1, #0
 800128e:	2007      	movs	r0, #7
 8001290:	f000 f94a 	bl	8001528 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR connected to ADC4
 8001294:	2150      	movs	r1, #80	; 0x50
 8001296:	2008      	movs	r0, #8
 8001298:	f000 f946 	bl	8001528 <writeRegister>
  writeRegister((0x09), (0x00)); // F5 right disabled
 800129c:	2100      	movs	r1, #0
 800129e:	2009      	movs	r0, #9
 80012a0:	f000 f942 	bl	8001528 <writeRegister>
  writeRegister((0x0A), (0x00)); // F7 right disabled
 80012a4:	2100      	movs	r1, #0
 80012a6:	200a      	movs	r0, #10
 80012a8:	f000 f93e 	bl	8001528 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 80012ac:	2100      	movs	r1, #0
 80012ae:	200b      	movs	r0, #11
 80012b0:	f000 f93a 	bl	8001528 <writeRegister>
  writeRegister((0x0C), (0x20)); // F2 right connected to ADC1
 80012b4:	2120      	movs	r1, #32
 80012b6:	200c      	movs	r0, #12
 80012b8:	f000 f936 	bl	8001528 <writeRegister>
  writeRegister((0x0D), (0x04)); // F4 right connected to ADC3
 80012bc:	2104      	movs	r1, #4
 80012be:	200d      	movs	r0, #13
 80012c0:	f000 f932 	bl	8001528 <writeRegister>
  writeRegister((0x0E), (0x00)); // F6/F8 right disabled
 80012c4:	2100      	movs	r1, #0
 80012c6:	200e      	movs	r0, #14
 80012c8:	f000 f92e 	bl	8001528 <writeRegister>
  writeRegister((0x0F), (0x30)); // F3 right connected to AD2
 80012cc:	2130      	movs	r1, #48	; 0x30
 80012ce:	200f      	movs	r0, #15
 80012d0:	f000 f92a 	bl	8001528 <writeRegister>
  writeRegister((0x10), (0x01)); // F1 right connected to AD0
 80012d4:	2101      	movs	r1, #1
 80012d6:	2010      	movs	r0, #16
 80012d8:	f000 f926 	bl	8001528 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 80012dc:	2150      	movs	r1, #80	; 0x50
 80012de:	2011      	movs	r0, #17
 80012e0:	f000 f922 	bl	8001528 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 80012e4:	2100      	movs	r1, #0
 80012e6:	2012      	movs	r0, #18
 80012e8:	f000 f91e 	bl	8001528 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 80012ec:	2106      	movs	r1, #6
 80012ee:	2013      	movs	r0, #19
 80012f0:	f000 f91a 	bl	8001528 <writeRegister>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <setup_F5F8_Clear_NIR>:

void setup_F5F8_Clear_NIR() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  // SMUX Config for F5,F6,F7,F8,NIR,Clear
  writeRegister((0x00), (0x00)); // F3 left disable
 80012fc:	2100      	movs	r1, #0
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f912 	bl	8001528 <writeRegister>
  writeRegister((0x01), (0x00)); // F1 left disable
 8001304:	2100      	movs	r1, #0
 8001306:	2001      	movs	r0, #1
 8001308:	f000 f90e 	bl	8001528 <writeRegister>
  writeRegister((0x02), (0x00)); // reserved/disable
 800130c:	2100      	movs	r1, #0
 800130e:	2002      	movs	r0, #2
 8001310:	f000 f90a 	bl	8001528 <writeRegister>
  writeRegister((0x03), (0x40)); // F8 left connected to ADC3
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	2003      	movs	r0, #3
 8001318:	f000 f906 	bl	8001528 <writeRegister>
  writeRegister((0x04), (0x02)); // F6 left connected to ADC1
 800131c:	2102      	movs	r1, #2
 800131e:	2004      	movs	r0, #4
 8001320:	f000 f902 	bl	8001528 <writeRegister>
  writeRegister((0x05), (0x00)); // F4/ F2 disabled
 8001324:	2100      	movs	r1, #0
 8001326:	2005      	movs	r0, #5
 8001328:	f000 f8fe 	bl	8001528 <writeRegister>
  writeRegister((0x06), (0x10)); // F5 left connected to ADC0
 800132c:	2110      	movs	r1, #16
 800132e:	2006      	movs	r0, #6
 8001330:	f000 f8fa 	bl	8001528 <writeRegister>
  writeRegister((0x07), (0x03)); // F7 left connected to ADC2
 8001334:	2103      	movs	r1, #3
 8001336:	2007      	movs	r0, #7
 8001338:	f000 f8f6 	bl	8001528 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR Connected to ADC4
 800133c:	2150      	movs	r1, #80	; 0x50
 800133e:	2008      	movs	r0, #8
 8001340:	f000 f8f2 	bl	8001528 <writeRegister>
  writeRegister((0x09), (0x10)); // F5 right connected to ADC0
 8001344:	2110      	movs	r1, #16
 8001346:	2009      	movs	r0, #9
 8001348:	f000 f8ee 	bl	8001528 <writeRegister>
  writeRegister((0x0A), (0x03)); // F7 right connected to ADC2
 800134c:	2103      	movs	r1, #3
 800134e:	200a      	movs	r0, #10
 8001350:	f000 f8ea 	bl	8001528 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 8001354:	2100      	movs	r1, #0
 8001356:	200b      	movs	r0, #11
 8001358:	f000 f8e6 	bl	8001528 <writeRegister>
  writeRegister((0x0C), (0x00)); // F2 right disabled
 800135c:	2100      	movs	r1, #0
 800135e:	200c      	movs	r0, #12
 8001360:	f000 f8e2 	bl	8001528 <writeRegister>
  writeRegister((0x0D), (0x00)); // F4 right disabled
 8001364:	2100      	movs	r1, #0
 8001366:	200d      	movs	r0, #13
 8001368:	f000 f8de 	bl	8001528 <writeRegister>
  writeRegister((0x0E), (0x24)); // F8 right connected to ADC2/ F6 right connected to ADC1
 800136c:	2124      	movs	r1, #36	; 0x24
 800136e:	200e      	movs	r0, #14
 8001370:	f000 f8da 	bl	8001528 <writeRegister>
  writeRegister((0x0F), (0x00)); // F3 right disabled
 8001374:	2100      	movs	r1, #0
 8001376:	200f      	movs	r0, #15
 8001378:	f000 f8d6 	bl	8001528 <writeRegister>
  writeRegister((0x10), (0x00)); // F1 right disabled
 800137c:	2100      	movs	r1, #0
 800137e:	2010      	movs	r0, #16
 8001380:	f000 f8d2 	bl	8001528 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 8001384:	2150      	movs	r1, #80	; 0x50
 8001386:	2011      	movs	r0, #17
 8001388:	f000 f8ce 	bl	8001528 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 800138c:	2100      	movs	r1, #0
 800138e:	2012      	movs	r0, #18
 8001390:	f000 f8ca 	bl	8001528 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 8001394:	2106      	movs	r1, #6
 8001396:	2013      	movs	r0, #19
 8001398:	f000 f8c6 	bl	8001528 <writeRegister>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <enableSpectralMeasurement>:
	uint8_t regWrite[]={AS7341_ENABLE,0x01}; //PON to 1
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
}

bool enableSpectralMeasurement(bool enable_measurement) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_ENABLE,0x01};
 80013aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013ae:	81bb      	strh	r3, [r7, #12]
	//uint8_t regRead[1]={0};
	HAL_StatusTypeDef status;
	if(enable_measurement==0){
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f083 0301 	eor.w	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01a      	beq.n	80013f2 <enableSpectralMeasurement+0x52>
		regwrite[1]=0x01;
 80013bc:	2301      	movs	r3, #1
 80013be:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80013c0:	bf00      	nop
 80013c2:	f107 020c 	add.w	r2, r7, #12
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2302      	movs	r3, #2
 80013ce:	2172      	movs	r1, #114	; 0x72
 80013d0:	4817      	ldr	r0, [pc, #92]	; (8001430 <enableSpectralMeasurement+0x90>)
 80013d2:	f003 f8af 	bl	8004534 <HAL_I2C_Master_Transmit>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f2      	bne.n	80013c2 <enableSpectralMeasurement+0x22>
		while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 80013dc:	bf00      	nop
 80013de:	23c8      	movs	r3, #200	; 0xc8
 80013e0:	220a      	movs	r2, #10
 80013e2:	2172      	movs	r1, #114	; 0x72
 80013e4:	4812      	ldr	r0, [pc, #72]	; (8001430 <enableSpectralMeasurement+0x90>)
 80013e6:	f003 fa8f 	bl	8004908 <HAL_I2C_IsDeviceReady>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f6      	bne.n	80013de <enableSpectralMeasurement+0x3e>
 80013f0:	e019      	b.n	8001426 <enableSpectralMeasurement+0x86>
	}
	else{
		regwrite[1]=0x03;
 80013f2:	2303      	movs	r3, #3
 80013f4:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80013f6:	bf00      	nop
 80013f8:	f107 020c 	add.w	r2, r7, #12
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2302      	movs	r3, #2
 8001404:	2172      	movs	r1, #114	; 0x72
 8001406:	480a      	ldr	r0, [pc, #40]	; (8001430 <enableSpectralMeasurement+0x90>)
 8001408:	f003 f894 	bl	8004534 <HAL_I2C_Master_Transmit>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f2      	bne.n	80013f8 <enableSpectralMeasurement+0x58>
		while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200) !=HAL_OK);
 8001412:	bf00      	nop
 8001414:	23c8      	movs	r3, #200	; 0xc8
 8001416:	220a      	movs	r2, #10
 8001418:	2172      	movs	r1, #114	; 0x72
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <enableSpectralMeasurement+0x90>)
 800141c:	f003 fa74 	bl	8004908 <HAL_I2C_IsDeviceReady>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f6      	bne.n	8001414 <enableSpectralMeasurement+0x74>
	}
  return 1;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200085a0 	.word	0x200085a0

08001434 <enableSMUX>:
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
	return 1;
}*/

bool enableSMUX() {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af02      	add	r7, sp, #8
	uint8_t regwrite[]={AS7341_ENABLE,0x19};
 800143a:	f44f 53cc 	mov.w	r3, #6528	; 0x1980
 800143e:	80bb      	strh	r3, [r7, #4]
	uint8_t regRead[1]={0};
 8001440:	2300      	movs	r3, #0
 8001442:	703b      	strb	r3, [r7, #0]

	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001444:	bf00      	nop
 8001446:	1d3a      	adds	r2, r7, #4
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2302      	movs	r3, #2
 8001450:	2172      	movs	r1, #114	; 0x72
 8001452:	4820      	ldr	r0, [pc, #128]	; (80014d4 <enableSMUX+0xa0>)
 8001454:	f003 f86e 	bl	8004534 <HAL_I2C_Master_Transmit>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f3      	bne.n	8001446 <enableSMUX+0x12>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 800145e:	bf00      	nop
 8001460:	23c8      	movs	r3, #200	; 0xc8
 8001462:	220a      	movs	r2, #10
 8001464:	2172      	movs	r1, #114	; 0x72
 8001466:	481b      	ldr	r0, [pc, #108]	; (80014d4 <enableSMUX+0xa0>)
 8001468:	f003 fa4e 	bl	8004908 <HAL_I2C_IsDeviceReady>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f6      	bne.n	8001460 <enableSMUX+0x2c>


	regwrite[0]=AS7341_ENABLE;//0xA9 to AS7341_ENABLE
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	713b      	strb	r3, [r7, #4]
	regRead[0]=0;
 8001476:	2300      	movs	r3, #0
 8001478:	703b      	strb	r3, [r7, #0]
	while(regRead[0]==0){
 800147a:	e023      	b.n	80014c4 <enableSMUX+0x90>
		while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 800147c:	bf00      	nop
 800147e:	1d3a      	adds	r2, r7, #4
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	2172      	movs	r1, #114	; 0x72
 800148a:	4812      	ldr	r0, [pc, #72]	; (80014d4 <enableSMUX+0xa0>)
 800148c:	f003 f852 	bl	8004534 <HAL_I2C_Master_Transmit>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f3      	bne.n	800147e <enableSMUX+0x4a>
		while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8001496:	bf00      	nop
 8001498:	23c8      	movs	r3, #200	; 0xc8
 800149a:	220a      	movs	r2, #10
 800149c:	2172      	movs	r1, #114	; 0x72
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <enableSMUX+0xa0>)
 80014a0:	f003 fa32 	bl	8004908 <HAL_I2C_IsDeviceReady>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f6      	bne.n	8001498 <enableSMUX+0x64>
		while(HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 80014aa:	bf00      	nop
 80014ac:	463a      	mov	r2, r7
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	2172      	movs	r1, #114	; 0x72
 80014b8:	4806      	ldr	r0, [pc, #24]	; (80014d4 <enableSMUX+0xa0>)
 80014ba:	f003 f92f 	bl	800471c <HAL_I2C_Master_Receive>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f3      	bne.n	80014ac <enableSMUX+0x78>
	while(regRead[0]==0){
 80014c4:	783b      	ldrb	r3, [r7, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0d8      	beq.n	800147c <enableSMUX+0x48>

		//sprintf(msg, "enableSMUX = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}

    return 1;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200085a0 	.word	0x200085a0

080014d8 <setSMUXCommand>:
	while(HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);

	return read[0];
}

bool setSMUXCommand(as7341_smux_cmd_t command) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_CFG6,0x10}; //should be command << to something
 80014e2:	f241 03af 	movw	r3, #4271	; 0x10af
 80014e6:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80014e8:	bf00      	nop
 80014ea:	f107 020c 	add.w	r2, r7, #12
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2302      	movs	r3, #2
 80014f6:	2172      	movs	r1, #114	; 0x72
 80014f8:	480a      	ldr	r0, [pc, #40]	; (8001524 <setSMUXCommand+0x4c>)
 80014fa:	f003 f81b 	bl	8004534 <HAL_I2C_Master_Transmit>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f2      	bne.n	80014ea <setSMUXCommand+0x12>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8001504:	bf00      	nop
 8001506:	23c8      	movs	r3, #200	; 0xc8
 8001508:	220a      	movs	r2, #10
 800150a:	2172      	movs	r1, #114	; 0x72
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <setSMUXCommand+0x4c>)
 800150e:	f003 f9fb 	bl	8004908 <HAL_I2C_IsDeviceReady>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f6      	bne.n	8001506 <setSMUXCommand+0x2e>
	return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200085a0 	.word	0x200085a0

08001528 <writeRegister>:

void writeRegister(uint8_t addr, uint8_t val) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {addr, val};
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	733b      	strb	r3, [r7, #12]
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8001540:	bf00      	nop
 8001542:	f107 020c 	add.w	r2, r7, #12
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2302      	movs	r3, #2
 800154e:	2172      	movs	r1, #114	; 0x72
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <writeRegister+0x54>)
 8001552:	f002 ffef 	bl	8004534 <HAL_I2C_Master_Transmit>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f2      	bne.n	8001542 <writeRegister+0x1a>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 800155c:	bf00      	nop
 800155e:	23c8      	movs	r3, #200	; 0xc8
 8001560:	220a      	movs	r2, #10
 8001562:	2172      	movs	r1, #114	; 0x72
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <writeRegister+0x54>)
 8001566:	f003 f9cf 	bl	8004908 <HAL_I2C_IsDeviceReady>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f6      	bne.n	800155e <writeRegister+0x36>

}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200085a0 	.word	0x200085a0

08001580 <setSMUXLowChannels>:


void setSMUXLowChannels(bool f1_f4) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  enableSpectralMeasurement(false);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff ff08 	bl	80013a0 <enableSpectralMeasurement>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
 8001590:	2002      	movs	r0, #2
 8001592:	f7ff ffa1 	bl	80014d8 <setSMUXCommand>
  if (f1_f4) {
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <setSMUXLowChannels+0x22>
    setup_F1F4_Clear_NIR();
 800159c:	f7ff fe58 	bl	8001250 <setup_F1F4_Clear_NIR>
 80015a0:	e001      	b.n	80015a6 <setSMUXLowChannels+0x26>
  } else {
    setup_F5F8_Clear_NIR();
 80015a2:	f7ff fea9 	bl	80012f8 <setup_F5F8_Clear_NIR>
  }
  enableSMUX(&as7341.hi2c);
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <setSMUXLowChannels+0x34>)
 80015a8:	f7ff ff44 	bl	8001434 <enableSMUX>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200085a0 	.word	0x200085a0

080015b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015be:	463b      	mov	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015ce:	4b29      	ldr	r3, [pc, #164]	; (8001674 <MX_ADC1_Init+0xbc>)
 80015d0:	4a29      	ldr	r2, [pc, #164]	; (8001678 <MX_ADC1_Init+0xc0>)
 80015d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MX_ADC1_Init+0xbc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015da:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_ADC1_Init+0xbc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_ADC1_Init+0xbc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_ADC1_Init+0xbc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <MX_ADC1_Init+0xbc>)
 80015ee:	2204      	movs	r2, #4
 80015f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_ADC1_Init+0xbc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <MX_ADC1_Init+0xbc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_ADC1_Init+0xbc>)
 8001600:	2201      	movs	r2, #1
 8001602:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_ADC1_Init+0xbc>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_ADC1_Init+0xbc>)
 800160e:	2200      	movs	r2, #0
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_ADC1_Init+0xbc>)
 8001614:	2200      	movs	r2, #0
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_ADC1_Init+0xbc>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_ADC1_Init+0xbc>)
 8001622:	2200      	movs	r2, #0
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_ADC1_Init+0xbc>)
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800162e:	4811      	ldr	r0, [pc, #68]	; (8001674 <MX_ADC1_Init+0xbc>)
 8001630:	f001 f9e2 	bl	80029f8 <HAL_ADC_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800163a:	f000 fb0d 	bl	8001c58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_ADC1_Init+0xc4>)
 8001640:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001642:	2306      	movs	r3, #6
 8001644:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800164a:	237f      	movs	r3, #127	; 0x7f
 800164c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800164e:	2304      	movs	r3, #4
 8001650:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001656:	463b      	mov	r3, r7
 8001658:	4619      	mov	r1, r3
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <MX_ADC1_Init+0xbc>)
 800165c:	f001 fb14 	bl	8002c88 <HAL_ADC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001666:	f000 faf7 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20008624 	.word	0x20008624
 8001678:	50040000 	.word	0x50040000
 800167c:	19200040 	.word	0x19200040

08001680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <HAL_ADC_MspInit+0x74>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d124      	bne.n	80016ec <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_ADC_MspInit+0x78>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_ADC_MspInit+0x78>)
 80016a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_ADC_MspInit+0x78>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_ADC_MspInit+0x78>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_ADC_MspInit+0x78>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_ADC_MspInit+0x78>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016d2:	2372      	movs	r3, #114	; 0x72
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016d6:	230b      	movs	r3, #11
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f002 fd2a 	bl	8004140 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	50040000 	.word	0x50040000
 80016f8:	40021000 	.word	0x40021000

080016fc <spectro>:

/*******************************************************************************/
void program1ms(void){
	scenario();
}
void spectro(){
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	b097      	sub	sp, #92	; 0x5c
 8001700:	af10      	add	r7, sp, #64	; 0x40
      //PCM9600begin(hi2c1);
	  AS7341init(hi2c1, 0x80);
 8001702:	4e1b      	ldr	r6, [pc, #108]	; (8001770 <spectro+0x74>)
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	930f      	str	r3, [sp, #60]	; 0x3c
 8001708:	466d      	mov	r5, sp
 800170a:	f106 0410 	add.w	r4, r6, #16
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800171e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001722:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001726:	f7ff fbdb 	bl	8000ee0 <AS7341init>
      //setASTEP(999);
      //setATIME(100);
      setGain(AS7341_GAIN_256X);
 800172a:	2009      	movs	r0, #9
 800172c:	f7ff fc40 	bl	8000fb0 <setGain>

      uint16_t buff[12];
      readAllChannels(buff);
 8001730:	463b      	mov	r3, r7
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fc80 	bl	8001038 <readAllChannels>

      //cansend can0 602#3B00180510000000 ask for PDO every 10s
      //cansend can0 602#4001640100000000
      CO_OD_RAM.readAnalogueInput16Bit[0] = getChannel(AS7341_CHANNEL_415nm_F1); //added by me set the value of an object
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff fd75 	bl	8001228 <getChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	b21a      	sxth	r2, r3
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <spectro+0x78>)
 8001744:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      CO_OD_RAM.readAnalogueInput16Bit[1] = getChannel(AS7341_CHANNEL_445nm_F2);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff fd6d 	bl	8001228 <getChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	b21a      	sxth	r2, r3
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <spectro+0x78>)
 8001754:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
      CO_OD_RAM.readAnalogueInput16Bit[2] = getChannel(AS7341_CHANNEL_480nm_F3);
 8001758:	2002      	movs	r0, #2
 800175a:	f7ff fd65 	bl	8001228 <getChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <spectro+0x78>)
 8001764:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

}
 8001768:	bf00      	nop
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001770:	200086bc 	.word	0x200086bc
 8001774:	20000000 	.word	0x20000000

08001778 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_CAN1_Init+0x64>)
 800177e:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <MX_CAN1_Init+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_CAN1_Init+0x64>)
 8001784:	2201      	movs	r2, #1
 8001786:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_CAN1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_CAN1_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_CAN1_Init+0x64>)
 8001796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800179a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_CAN1_Init+0x64>)
 800179e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017a2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <MX_CAN1_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_CAN1_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <MX_CAN1_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_CAN1_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <MX_CAN1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_CAN1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <MX_CAN1_Init+0x64>)
 80017ca:	f001 fe3d 	bl	8003448 <HAL_CAN_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80017d4:	f000 fa40 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20008688 	.word	0x20008688
 80017e0:	40006400 	.word	0x40006400

080017e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a20      	ldr	r2, [pc, #128]	; (8001884 <HAL_CAN_MspInit+0xa0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d139      	bne.n	800187a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_CAN_MspInit+0xa4>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_CAN_MspInit+0xa4>)
 800180c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001810:	6593      	str	r3, [r2, #88]	; 0x58
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_CAN_MspInit+0xa4>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_CAN_MspInit+0xa4>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_CAN_MspInit+0xa4>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_CAN_MspInit+0xa4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001836:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001848:	2309      	movs	r3, #9
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f002 fc73 	bl	8004140 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2105      	movs	r1, #5
 800185e:	2013      	movs	r0, #19
 8001860:	f002 fadc 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001864:	2013      	movs	r0, #19
 8001866:	f002 faf5 	bl	8003e54 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2105      	movs	r1, #5
 800186e:	2014      	movs	r0, #20
 8001870:	f002 fad4 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001874:	2014      	movs	r0, #20
 8001876:	f002 faed 	bl	8003e54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40006400 	.word	0x40006400
 8001888:	40021000 	.word	0x40021000

0800188c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_DMA_Init+0x48>)
 8001894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <MX_DMA_Init+0x48>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6493      	str	r3, [r2, #72]	; 0x48
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <MX_DMA_Init+0x48>)
 80018a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2105      	movs	r1, #5
 80018ae:	2010      	movs	r0, #16
 80018b0:	f002 fab4 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80018b4:	2010      	movs	r0, #16
 80018b6:	f002 facd 	bl	8003e54 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2105      	movs	r1, #5
 80018be:	2011      	movs	r0, #17
 80018c0:	f002 faac 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018c4:	2011      	movs	r0, #17
 80018c6:	f002 fac5 	bl	8003e54 <HAL_NVIC_EnableIRQ>

}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <MX_FREERTOS_Init+0x38>)
 80018de:	2100      	movs	r1, #0
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_FREERTOS_Init+0x3c>)
 80018e2:	f006 f8e3 	bl	8007aac <osThreadNew>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <MX_FREERTOS_Init+0x40>)
 80018ea:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <MX_FREERTOS_Init+0x44>)
 80018ee:	2100      	movs	r1, #0
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <MX_FREERTOS_Init+0x48>)
 80018f2:	f006 f8db 	bl	8007aac <osThreadNew>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <MX_FREERTOS_Init+0x4c>)
 80018fa:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <MX_FREERTOS_Init+0x50>)
 80018fe:	2100      	movs	r1, #0
 8001900:	480a      	ldr	r0, [pc, #40]	; (800192c <MX_FREERTOS_Init+0x54>)
 8001902:	f006 f8d3 	bl	8007aac <osThreadNew>
 8001906:	4603      	mov	r3, r0
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <MX_FREERTOS_Init+0x58>)
 800190a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	0800cd34 	.word	0x0800cd34
 8001914:	08001935 	.word	0x08001935
 8001918:	200086b0 	.word	0x200086b0
 800191c:	0800cd58 	.word	0x0800cd58
 8001920:	08001943 	.word	0x08001943
 8001924:	200086b4 	.word	0x200086b4
 8001928:	0800cd7c 	.word	0x0800cd7c
 800192c:	08001953 	.word	0x08001953
 8001930:	200086b8 	.word	0x200086b8

08001934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  spectro();
 800193c:	f7ff fede 	bl	80016fc <spectro>
 8001940:	e7fc      	b.n	800193c <StartDefaultTask+0x8>

08001942 <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f006 f940 	bl	8007bd0 <osDelay>
 8001950:	e7fb      	b.n	800194a <StartReadTempTask+0x8>

08001952 <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f006 f938 	bl	8007bd0 <osDelay>
 8001960:	e7fb      	b.n	800195a <StartReadLightTask+0x8>
	...

08001964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_GPIO_Init+0x5c>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <MX_GPIO_Init+0x5c>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_GPIO_Init+0x5c>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_GPIO_Init+0x5c>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <MX_GPIO_Init+0x5c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_GPIO_Init+0x5c>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_GPIO_Init+0x5c>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <MX_GPIO_Init+0x5c>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_GPIO_Init+0x5c>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_I2C1_Init+0x74>)
 80019ca:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <MX_I2C1_Init+0x78>)
 80019cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_I2C1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_I2C1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_I2C1_Init+0x74>)
 80019dc:	2201      	movs	r2, #1
 80019de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <MX_I2C1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_I2C1_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_I2C1_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_I2C1_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_I2C1_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <MX_I2C1_Init+0x74>)
 8001a00:	f002 fd08 	bl	8004414 <HAL_I2C_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a0a:	f000 f925 	bl	8001c58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <MX_I2C1_Init+0x74>)
 8001a12:	f003 fa61 	bl	8004ed8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a1c:	f000 f91c 	bl	8001c58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a20:	2100      	movs	r1, #0
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_I2C1_Init+0x74>)
 8001a24:	f003 faa3 	bl	8004f6e <HAL_I2CEx_ConfigDigitalFilter>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a2e:	f000 f913 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200086bc 	.word	0x200086bc
 8001a3c:	40005400 	.word	0x40005400

08001a40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a17      	ldr	r2, [pc, #92]	; (8001abc <HAL_I2C_MspInit+0x7c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d127      	bne.n	8001ab2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a16      	ldr	r2, [pc, #88]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a7a:	23c0      	movs	r3, #192	; 0xc0
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7e:	2312      	movs	r3, #18
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <HAL_I2C_MspInit+0x84>)
 8001a96:	f002 fb53 	bl	8004140 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	48000400 	.word	0x48000400

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001acc:	f000 fdd0 	bl	8002670 <HAL_Init>
  //uint8_t I2C_address = 0x80;
  //pca9685_init(&hi2c3, I2C_address);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad0:	f000 f818 	bl	8001b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad4:	f7ff ff46 	bl	8001964 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ad8:	f7ff fed8 	bl	800188c <MX_DMA_Init>
  MX_I2C1_Init();
 8001adc:	f7ff ff72 	bl	80019c4 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001ae0:	f7ff fe4a 	bl	8001778 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001ae4:	f000 fa7c 	bl	8001fe0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001ae8:	f7ff fd66 	bl	80015b8 <MX_ADC1_Init>
  MX_TIM15_Init();
 8001aec:	f000 fb20 	bl	8002130 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001af0:	f000 fc32 	bl	8002358 <MX_USART2_UART_Init>
*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001af4:	f005 ff90 	bl	8007a18 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001af8:	f7ff feee 	bl	80018d8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001afc:	f005 ffb0 	bl	8007a60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <main+0x38>
	...

08001b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0ac      	sub	sp, #176	; 0xb0
 8001b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b0e:	2244      	movs	r2, #68	; 0x44
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f008 fc1a 	bl	800a34c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2254      	movs	r2, #84	; 0x54
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f008 fc0c 	bl	800a34c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b34:	f003 fa68 	bl	8005008 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <SystemClock_Config+0x12c>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	4a3c      	ldr	r2, [pc, #240]	; (8001c30 <SystemClock_Config+0x12c>)
 8001b40:	f023 0318 	bic.w	r3, r3, #24
 8001b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b48:	2314      	movs	r3, #20
 8001b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001b5c:	2390      	movs	r3, #144	; 0x90
 8001b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001b6e:	2305      	movs	r3, #5
 8001b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001b74:	2310      	movs	r3, #16
 8001b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b80:	2302      	movs	r3, #2
 8001b82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001b86:	2306      	movs	r3, #6
 8001b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 faad 	bl	80050f0 <HAL_RCC_OscConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b9c:	f000 f85c 	bl	8001c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001ba8:	23a0      	movs	r3, #160	; 0xa0
 8001baa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001bac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001bb0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 feb7 	bl	8005930 <HAL_RCC_ClockConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001bc8:	f000 f846 	bl	8001c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001bcc:	f244 0342 	movw	r3, #16450	; 0x4042
 8001bd0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001be0:	2301      	movs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001be4:	2305      	movs	r3, #5
 8001be6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 8001be8:	230e      	movs	r3, #14
 8001bea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001bec:	2307      	movs	r3, #7
 8001bee:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bfc:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 f8cb 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001c0c:	f000 f824 	bl	8001c58 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c14:	f003 fa16 	bl	8005044 <HAL_PWREx_ControlVoltageScaling>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001c1e:	f000 f81b 	bl	8001c58 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c22:	f004 faaf 	bl	8006184 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c26:	bf00      	nop
 8001c28:	37b0      	adds	r7, #176	; 0xb0
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c46:	f000 fd2b 	bl	80026a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40001000 	.word	0x40001000

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <Error_Handler+0x4>
	...

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_MspInit+0x4c>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_MspInit+0x4c>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6613      	str	r3, [r2, #96]	; 0x60
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_MspInit+0x4c>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_MspInit+0x4c>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_MspInit+0x4c>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_MspInit+0x4c>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	210f      	movs	r1, #15
 8001c9a:	f06f 0001 	mvn.w	r0, #1
 8001c9e:	f002 f8bd 	bl	8003e1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	; 0x30
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	2036      	movs	r0, #54	; 0x36
 8001cc6:	f002 f8a9 	bl	8003e1c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cca:	2036      	movs	r0, #54	; 0x36
 8001ccc:	f002 f8c2 	bl	8003e54 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_InitTick+0xa0>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	4a1e      	ldr	r2, [pc, #120]	; (8001d50 <HAL_InitTick+0xa0>)
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
 8001cda:	6593      	str	r3, [r2, #88]	; 0x58
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_InitTick+0xa0>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ce8:	f107 0210 	add.w	r2, r7, #16
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 ffc0 	bl	8005c78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cf8:	f003 ff92 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <HAL_InitTick+0xa4>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9b      	lsrs	r3, r3, #18
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_InitTick+0xa8>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <HAL_InitTick+0xac>)
 8001d14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_InitTick+0xa8>)
 8001d18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <HAL_InitTick+0xa8>)
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_InitTick+0xa8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_InitTick+0xa8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d30:	4809      	ldr	r0, [pc, #36]	; (8001d58 <HAL_InitTick+0xa8>)
 8001d32:	f004 fb29 	bl	8006388 <HAL_TIM_Base_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d104      	bne.n	8001d46 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d3c:	4806      	ldr	r0, [pc, #24]	; (8001d58 <HAL_InitTick+0xa8>)
 8001d3e:	f004 fb85 	bl	800644c <HAL_TIM_Base_Start_IT>
 8001d42:	4603      	mov	r3, r0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3730      	adds	r7, #48	; 0x30
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	20008708 	.word	0x20008708
 8001d5c:	40001000 	.word	0x40001000

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <NMI_Handler+0x4>

08001d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <MemManage_Handler+0x4>

08001d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <DMA1_Channel6_IRQHandler+0x10>)
 8001d92:	f002 f925 	bl	8003fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200087ec 	.word	0x200087ec

08001da0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <DMA1_Channel7_IRQHandler+0x10>)
 8001da6:	f002 f91b 	bl	8003fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20008834 	.word	0x20008834

08001db4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <CAN1_TX_IRQHandler+0x10>)
 8001dba:	f001 fd52 	bl	8003862 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20008688 	.word	0x20008688

08001dc8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <CAN1_RX0_IRQHandler+0x10>)
 8001dce:	f001 fd48 	bl	8003862 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20008688 	.word	0x20008688

08001ddc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <TIM6_DAC_IRQHandler+0x10>)
 8001de2:	f004 fbde 	bl	80065a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20008708 	.word	0x20008708

08001df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	return 1;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_kill>:

int _kill(int pid, int sig)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e0a:	f008 fa5f 	bl	800a2cc <__errno>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2216      	movs	r2, #22
 8001e12:	601a      	str	r2, [r3, #0]
	return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_exit>:

void _exit (int status)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ffe7 	bl	8001e00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e32:	e7fe      	b.n	8001e32 <_exit+0x12>

08001e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	e00a      	b.n	8001e5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e46:	f3af 8000 	nop.w
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	b2ca      	uxtb	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf0      	blt.n	8001e46 <_read+0x12>
	}

return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e009      	b.n	8001e94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbf1      	blt.n	8001e80 <_write+0x12>
	}
	return len;
 8001e9c:	687b      	ldr	r3, [r7, #4]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_close>:

int _close(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ece:	605a      	str	r2, [r3, #4]
	return 0;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <_isatty>:

int _isatty(int file)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
	return 0;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f40:	f008 f9c4 	bl	800a2cc <__errno>
 8001f44:	4603      	mov	r3, r0
 8001f46:	220c      	movs	r2, #12
 8001f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <_sbrk+0x64>)
 8001f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20010000 	.word	0x20010000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	20000330 	.word	0x20000330
 8001f78:	20008958 	.word	0x20008958

08001f7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <SystemInit+0x5c>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <SystemInit+0x5c>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <SystemInit+0x60>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <SystemInit+0x60>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <SystemInit+0x60>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <SystemInit+0x60>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <SystemInit+0x60>)
 8001fa8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001fac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <SystemInit+0x60>)
 8001fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fb8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <SystemInit+0x60>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <SystemInit+0x60>)
 8001fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SystemInit+0x60>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b096      	sub	sp, #88	; 0x58
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	611a      	str	r2, [r3, #16]
 8002002:	615a      	str	r2, [r3, #20]
 8002004:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	222c      	movs	r2, #44	; 0x2c
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f008 f99d 	bl	800a34c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002012:	4b45      	ldr	r3, [pc, #276]	; (8002128 <MX_TIM1_Init+0x148>)
 8002014:	4a45      	ldr	r2, [pc, #276]	; (800212c <MX_TIM1_Init+0x14c>)
 8002016:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002018:	4b43      	ldr	r3, [pc, #268]	; (8002128 <MX_TIM1_Init+0x148>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b42      	ldr	r3, [pc, #264]	; (8002128 <MX_TIM1_Init+0x148>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002024:	4b40      	ldr	r3, [pc, #256]	; (8002128 <MX_TIM1_Init+0x148>)
 8002026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b3e      	ldr	r3, [pc, #248]	; (8002128 <MX_TIM1_Init+0x148>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <MX_TIM1_Init+0x148>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <MX_TIM1_Init+0x148>)
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800203e:	483a      	ldr	r0, [pc, #232]	; (8002128 <MX_TIM1_Init+0x148>)
 8002040:	f004 fa58 	bl	80064f4 <HAL_TIM_PWM_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800204a:	f7ff fe05 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800205a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800205e:	4619      	mov	r1, r3
 8002060:	4831      	ldr	r0, [pc, #196]	; (8002128 <MX_TIM1_Init+0x148>)
 8002062:	f004 ffd7 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800206c:	f7ff fdf4 	bl	8001c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002070:	2360      	movs	r3, #96	; 0x60
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002078:	2300      	movs	r3, #0
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800208c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002090:	2200      	movs	r2, #0
 8002092:	4619      	mov	r1, r3
 8002094:	4824      	ldr	r0, [pc, #144]	; (8002128 <MX_TIM1_Init+0x148>)
 8002096:	f004 fba3 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80020a0:	f7ff fdda 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a8:	2204      	movs	r2, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	481e      	ldr	r0, [pc, #120]	; (8002128 <MX_TIM1_Init+0x148>)
 80020ae:	f004 fb97 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80020b8:	f7ff fdce 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c0:	2208      	movs	r2, #8
 80020c2:	4619      	mov	r1, r3
 80020c4:	4818      	ldr	r0, [pc, #96]	; (8002128 <MX_TIM1_Init+0x148>)
 80020c6:	f004 fb8b 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80020d0:	f7ff fdc2 	bl	8001c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4807      	ldr	r0, [pc, #28]	; (8002128 <MX_TIM1_Init+0x148>)
 800210a:	f004 ffe9 	bl	80070e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002114:	f7ff fda0 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002118:	4803      	ldr	r0, [pc, #12]	; (8002128 <MX_TIM1_Init+0x148>)
 800211a:	f000 f8c1 	bl	80022a0 <HAL_TIM_MspPostInit>

}
 800211e:	bf00      	nop
 8002120:	3758      	adds	r7, #88	; 0x58
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200087a0 	.word	0x200087a0
 800212c:	40012c00 	.word	0x40012c00

08002130 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b096      	sub	sp, #88	; 0x58
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002136:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]
 8002152:	615a      	str	r2, [r3, #20]
 8002154:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	222c      	movs	r2, #44	; 0x2c
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f008 f8f5 	bl	800a34c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <MX_TIM15_Init+0x100>)
 8002164:	4a33      	ldr	r2, [pc, #204]	; (8002234 <MX_TIM15_Init+0x104>)
 8002166:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <MX_TIM15_Init+0x100>)
 800216a:	2200      	movs	r2, #0
 800216c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b30      	ldr	r3, [pc, #192]	; (8002230 <MX_TIM15_Init+0x100>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002174:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <MX_TIM15_Init+0x100>)
 8002176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <MX_TIM15_Init+0x100>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <MX_TIM15_Init+0x100>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <MX_TIM15_Init+0x100>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800218e:	4828      	ldr	r0, [pc, #160]	; (8002230 <MX_TIM15_Init+0x100>)
 8002190:	f004 f9b0 	bl	80064f4 <HAL_TIM_PWM_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800219a:	f7ff fd5d 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80021a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021aa:	4619      	mov	r1, r3
 80021ac:	4820      	ldr	r0, [pc, #128]	; (8002230 <MX_TIM15_Init+0x100>)
 80021ae:	f004 ff31 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80021b8:	f7ff fd4e 	bl	8001c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021bc:	2360      	movs	r3, #96	; 0x60
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021dc:	2204      	movs	r2, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4813      	ldr	r0, [pc, #76]	; (8002230 <MX_TIM15_Init+0x100>)
 80021e2:	f004 fafd 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80021ec:	f7ff fd34 	bl	8001c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002208:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4807      	ldr	r0, [pc, #28]	; (8002230 <MX_TIM15_Init+0x100>)
 8002214:	f004 ff64 	bl	80070e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800221e:	f7ff fd1b 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002222:	4803      	ldr	r0, [pc, #12]	; (8002230 <MX_TIM15_Init+0x100>)
 8002224:	f000 f83c 	bl	80022a0 <HAL_TIM_MspPostInit>

}
 8002228:	bf00      	nop
 800222a:	3758      	adds	r7, #88	; 0x58
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20008754 	.word	0x20008754
 8002234:	40014000 	.word	0x40014000

08002238 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_TIM_PWM_MspInit+0x5c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10c      	bne.n	8002264 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_TIM_PWM_MspInit+0x60>)
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <HAL_TIM_PWM_MspInit+0x60>)
 8002250:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002254:	6613      	str	r3, [r2, #96]	; 0x60
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_TIM_PWM_MspInit+0x60>)
 8002258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002262:	e010      	b.n	8002286 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM15)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_TIM_PWM_MspInit+0x64>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10b      	bne.n	8002286 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_TIM_PWM_MspInit+0x60>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_TIM_PWM_MspInit+0x60>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6613      	str	r3, [r2, #96]	; 0x60
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_TIM_PWM_MspInit+0x60>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40021000 	.word	0x40021000
 800229c:	40014000 	.word	0x40014000

080022a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a23      	ldr	r2, [pc, #140]	; (800234c <HAL_TIM_MspPostInit+0xac>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11e      	bne.n	8002300 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_TIM_MspPostInit+0xb0>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4a22      	ldr	r2, [pc, #136]	; (8002350 <HAL_TIM_MspPostInit+0xb0>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_TIM_MspPostInit+0xb0>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80022da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fa:	f001 ff21 	bl	8004140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80022fe:	e021      	b.n	8002344 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a13      	ldr	r2, [pc, #76]	; (8002354 <HAL_TIM_MspPostInit+0xb4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d11c      	bne.n	8002344 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_TIM_MspPostInit+0xb0>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_TIM_MspPostInit+0xb0>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_TIM_MspPostInit+0xb0>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002322:	2308      	movs	r3, #8
 8002324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002332:	230e      	movs	r3, #14
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002340:	f001 fefe 	bl	8004140 <HAL_GPIO_Init>
}
 8002344:	bf00      	nop
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40014000 	.word	0x40014000

08002358 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <MX_USART2_UART_Init+0x5c>)
 8002360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800239c:	f004 ff36 	bl	800720c <HAL_UART_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023a6:	f7ff fc57 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000887c 	.word	0x2000887c
 80023b4:	40004400 	.word	0x40004400

080023b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_UART_MspInit+0x148>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f040 808d 	bne.w	80024f6 <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023dc:	4b49      	ldr	r3, [pc, #292]	; (8002504 <HAL_UART_MspInit+0x14c>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	4a48      	ldr	r2, [pc, #288]	; (8002504 <HAL_UART_MspInit+0x14c>)
 80023e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e6:	6593      	str	r3, [r2, #88]	; 0x58
 80023e8:	4b46      	ldr	r3, [pc, #280]	; (8002504 <HAL_UART_MspInit+0x14c>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_UART_MspInit+0x14c>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HAL_UART_MspInit+0x14c>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002400:	4b40      	ldr	r3, [pc, #256]	; (8002504 <HAL_UART_MspInit+0x14c>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800240c:	2304      	movs	r3, #4
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800241c:	2307      	movs	r3, #7
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242a:	f001 fe89 	bl	8004140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800242e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002440:	2303      	movs	r3, #3
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244e:	f001 fe77 	bl	8004140 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_UART_MspInit+0x150>)
 8002454:	4a2d      	ldr	r2, [pc, #180]	; (800250c <HAL_UART_MspInit+0x154>)
 8002456:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_UART_MspInit+0x150>)
 800245a:	2202      	movs	r2, #2
 800245c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <HAL_UART_MspInit+0x150>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <HAL_UART_MspInit+0x150>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800246a:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_UART_MspInit+0x150>)
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_UART_MspInit+0x150>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_UART_MspInit+0x150>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <HAL_UART_MspInit+0x150>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_UART_MspInit+0x150>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002488:	481f      	ldr	r0, [pc, #124]	; (8002508 <HAL_UART_MspInit+0x150>)
 800248a:	f001 fcf1 	bl	8003e70 <HAL_DMA_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002494:	f7ff fbe0 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <HAL_UART_MspInit+0x150>)
 800249c:	671a      	str	r2, [r3, #112]	; 0x70
 800249e:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <HAL_UART_MspInit+0x150>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024a6:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_UART_MspInit+0x15c>)
 80024a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024ac:	2202      	movs	r2, #2
 80024ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024b2:	2210      	movs	r2, #16
 80024b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024be:	2280      	movs	r2, #128	; 0x80
 80024c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024da:	480d      	ldr	r0, [pc, #52]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024dc:	f001 fcc8 	bl	8003e70 <HAL_DMA_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80024e6:	f7ff fbb7 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_UART_MspInit+0x158>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40004400 	.word	0x40004400
 8002504:	40021000 	.word	0x40021000
 8002508:	200087ec 	.word	0x200087ec
 800250c:	4002006c 	.word	0x4002006c
 8002510:	20008834 	.word	0x20008834
 8002514:	40020080 	.word	0x40020080

08002518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002550 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800251c:	f7ff fd2e 	bl	8001f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002520:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002522:	e003      	b.n	800252c <LoopCopyDataInit>

08002524 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002526:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002528:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800252a:	3104      	adds	r1, #4

0800252c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800252c:	480a      	ldr	r0, [pc, #40]	; (8002558 <LoopForever+0xa>)
	ldr	r3, =_edata
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002530:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002532:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002534:	d3f6      	bcc.n	8002524 <CopyDataInit>
	ldr	r2, =_sbss
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002538:	e002      	b.n	8002540 <LoopFillZerobss>

0800253a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800253a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800253c:	f842 3b04 	str.w	r3, [r2], #4

08002540 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <LoopForever+0x16>)
	cmp	r2, r3
 8002542:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002544:	d3f9      	bcc.n	800253a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002546:	f007 fec7 	bl	800a2d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800254a:	f7ff fabd 	bl	8001ac8 <main>

0800254e <LoopForever>:

LoopForever:
    b LoopForever
 800254e:	e7fe      	b.n	800254e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002550:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002554:	0800d1dc 	.word	0x0800d1dc
	ldr	r0, =_sdata
 8002558:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800255c:	20000314 	.word	0x20000314
	ldr	r2, =_sbss
 8002560:	20000314 	.word	0x20000314
	ldr	r3, = _ebss
 8002564:	20008954 	.word	0x20008954

08002568 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC1_IRQHandler>
	...

0800256c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* \brief 	Cube MX callbacks for Fifo0 and Fifo1
 * \details It is assumed that only one CANmodule is (CO->CANmodule[0]) is used.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f81b 	bl	80025bc <CO_CANinterrupt_Rx>
		 *but for some reason interrupts get activated as soon as HAL_NVIC_EnableIRQ is called.
		 *According to Cube CAN docs HAL_CAN_ActivateNotification should be executed to
		 *activate callbacks.
		 */
	}
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000334 	.word	0x20000334

08002594 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <HAL_CAN_RxFifo1MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f807 	bl	80025bc <CO_CANinterrupt_Rx>
	}
	else
	{
		;//TODO add assert here
	}
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000334 	.word	0x20000334

080025bc <CO_CANinterrupt_Rx>:
}

/*Interrupt handlers*/
/******************************************************************************/
void CO_CANinterrupt_Rx(const CO_CANmodule_t *CANmodule)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	/* receive interrupt */

	static CO_CANrxMsg_t CANmessage;
	bool_t msgMatched = false;
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]
	CO_CANrx_t *MsgBuff = CANmodule->rxArray; /* receive message buffer from CO_CANmodule_t object. */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]
	HAL_CAN_GetRxMessage(CANmodule->CANbaseAddress, CAN_RX_FIFO0, &CANmessage.RxHeader, &CANmessage.data[0]);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	4b25      	ldr	r3, [pc, #148]	; (8002668 <CO_CANinterrupt_Rx+0xac>)
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <CO_CANinterrupt_Rx+0xb0>)
 80025d6:	2100      	movs	r1, #0
 80025d8:	f001 f831 	bl	800363e <HAL_CAN_GetRxMessage>

	/*dirty hack, consider change to a pointer here*/
	CANmessage.DLC = (uint8_t)CANmessage.RxHeader.DLC;
 80025dc:	4b23      	ldr	r3, [pc, #140]	; (800266c <CO_CANinterrupt_Rx+0xb0>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <CO_CANinterrupt_Rx+0xb0>)
 80025e4:	f883 2020 	strb.w	r2, [r3, #32]
	CANmessage.ident = CANmessage.RxHeader.StdId;
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <CO_CANinterrupt_Rx+0xb0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1f      	ldr	r2, [pc, #124]	; (800266c <CO_CANinterrupt_Rx+0xb0>)
 80025ee:	61d3      	str	r3, [r2, #28]

	uint32_t index;
	/* Search rxArray form CANmodule for the same CAN-ID. */
	for (index = 0; index < CANmodule->rxSize; index++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e01d      	b.n	8002632 <CO_CANinterrupt_Rx+0x76>
	{
		uint16_t msg = (((uint16_t)(CANmessage.RxHeader.StdId << 2)) | (uint16_t)(CANmessage.RxHeader.RTR));
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <CO_CANinterrupt_Rx+0xb0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <CO_CANinterrupt_Rx+0xb0>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4313      	orrs	r3, r2
 8002608:	817b      	strh	r3, [r7, #10]
		if (((msg ^ MsgBuff->ident) & MsgBuff->mask) == 0)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	4053      	eors	r3, r2
 8002612:	b29a      	uxth	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	885b      	ldrh	r3, [r3, #2]
 8002618:	4013      	ands	r3, r2
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <CO_CANinterrupt_Rx+0x6a>
		{
			msgMatched = true;
 8002620:	2301      	movs	r3, #1
 8002622:	75fb      	strb	r3, [r7, #23]
			break;
 8002624:	e00b      	b.n	800263e <CO_CANinterrupt_Rx+0x82>
		}
		MsgBuff++;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	330c      	adds	r3, #12
 800262a:	613b      	str	r3, [r7, #16]
	for (index = 0; index < CANmodule->rxSize; index++)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3301      	adds	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	891b      	ldrh	r3, [r3, #8]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4293      	cmp	r3, r2
 800263c:	d3db      	bcc.n	80025f6 <CO_CANinterrupt_Rx+0x3a>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <CO_CANinterrupt_Rx+0xa4>
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <CO_CANinterrupt_Rx+0xa4>
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <CO_CANinterrupt_Rx+0xa4>
	{
		MsgBuff->pFunct(MsgBuff->object, &CANmessage);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	6852      	ldr	r2, [r2, #4]
 800265a:	4904      	ldr	r1, [pc, #16]	; (800266c <CO_CANinterrupt_Rx+0xb0>)
 800265c:	4610      	mov	r0, r2
 800265e:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000359 	.word	0x20000359
 800266c:	20000338 	.word	0x20000338

08002670 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267a:	2003      	movs	r0, #3
 800267c:	f001 fbc3 	bl	8003e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002680:	2000      	movs	r0, #0
 8002682:	f7ff fb15 	bl	8001cb0 <HAL_InitTick>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	e001      	b.n	8002696 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002692:	f7ff fae5 	bl	8001c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002696:	79fb      	ldrb	r3, [r7, #7]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000138 	.word	0x20000138
 80026c4:	20008900 	.word	0x20008900

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20008900 	.word	0x20008900

080026e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	609a      	str	r2, [r3, #8]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	609a      	str	r2, [r3, #8]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3360      	adds	r3, #96	; 0x60
 800275a:	461a      	mov	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <LL_ADC_SetOffset+0x44>)
 800276a:	4013      	ands	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	4313      	orrs	r3, r2
 8002778:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	03fff000 	.word	0x03fff000

08002790 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3360      	adds	r3, #96	; 0x60
 800279e:	461a      	mov	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3360      	adds	r3, #96	; 0x60
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3330      	adds	r3, #48	; 0x30
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	211f      	movs	r1, #31
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	401a      	ands	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	f003 011f 	and.w	r1, r3, #31
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	431a      	orrs	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3314      	adds	r3, #20
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	0e5b      	lsrs	r3, r3, #25
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	0d1b      	lsrs	r3, r3, #20
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2107      	movs	r1, #7
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	401a      	ands	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	0d1b      	lsrs	r3, r3, #20
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	431a      	orrs	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	43db      	mvns	r3, r3
 80028ba:	401a      	ands	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0318 	and.w	r3, r3, #24
 80028c2:	4908      	ldr	r1, [pc, #32]	; (80028e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028c4:	40d9      	lsrs	r1, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	400b      	ands	r3, r1
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	0007ffff 	.word	0x0007ffff

080028e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6093      	str	r3, [r2, #8]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800291c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002920:	d101      	bne.n	8002926 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002948:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002970:	d101      	bne.n	8002976 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <LL_ADC_IsEnabled+0x18>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <LL_ADC_IsEnabled+0x1a>
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d101      	bne.n	80029c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d101      	bne.n	80029e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e12c      	b.n	8002c6c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fe fe2d 	bl	8001680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff67 	bl	800290c <LL_ADC_IsDeepPowerDownEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff4d 	bl	80028e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff82 	bl	800295c <LL_ADC_IsInternalRegulatorEnabled>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff66 	bl	8002934 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a68:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_ADC_Init+0x27c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	4a82      	ldr	r2, [pc, #520]	; (8002c78 <HAL_ADC_Init+0x280>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a7c:	e002      	b.n	8002a84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f9      	bne.n	8002a7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff64 	bl	800295c <LL_ADC_IsInternalRegulatorEnabled>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff75 	bl	80029aa <LL_ADC_REG_IsConversionOngoing>
 8002ac0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 80c5 	bne.w	8002c5a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 80c1 	bne.w	8002c5a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ae0:	f043 0202 	orr.w	r2, r3, #2
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff49 	bl	8002984 <LL_ADC_IsEnabled>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002af8:	4860      	ldr	r0, [pc, #384]	; (8002c7c <HAL_ADC_Init+0x284>)
 8002afa:	f7ff ff43 	bl	8002984 <LL_ADC_IsEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	485d      	ldr	r0, [pc, #372]	; (8002c80 <HAL_ADC_Init+0x288>)
 8002b0c:	f7ff fde8 	bl	80026e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7e5b      	ldrb	r3, [r3, #25]
 8002b14:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b1a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b20:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b26:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b2e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d106      	bne.n	8002b4c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	3b01      	subs	r3, #1
 8002b44:	045b      	lsls	r3, r3, #17
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	4b45      	ldr	r3, [pc, #276]	; (8002c84 <HAL_ADC_Init+0x28c>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	69b9      	ldr	r1, [r7, #24]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff12 	bl	80029aa <LL_ADC_REG_IsConversionOngoing>
 8002b86:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff1f 	bl	80029d0 <LL_ADC_INJ_IsConversionOngoing>
 8002b92:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d13d      	bne.n	8002c16 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d13a      	bne.n	8002c16 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ba4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bbc:	f023 0302 	bic.w	r3, r3, #2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	69b9      	ldr	r1, [r7, #24]
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d118      	bne.n	8002c06 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bde:	f023 0304 	bic.w	r3, r3, #4
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bf0:	4311      	orrs	r1, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	611a      	str	r2, [r3, #16]
 8002c04:	e007      	b.n	8002c16 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10c      	bne.n	8002c38 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f023 010f 	bic.w	r1, r3, #15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	1e5a      	subs	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
 8002c36:	e007      	b.n	8002c48 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 020f 	bic.w	r2, r2, #15
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	f023 0303 	bic.w	r3, r3, #3
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
 8002c58:	e007      	b.n	8002c6a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f043 0210 	orr.w	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000130 	.word	0x20000130
 8002c78:	053e2d63 	.word	0x053e2d63
 8002c7c:	50040000 	.word	0x50040000
 8002c80:	50040300 	.word	0x50040300
 8002c84:	fff0c007 	.word	0xfff0c007

08002c88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b0b6      	sub	sp, #216	; 0xd8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x22>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e3b9      	b.n	800341e <HAL_ADC_ConfigChannel+0x796>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fe77 	bl	80029aa <LL_ADC_REG_IsConversionOngoing>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 839e 	bne.w	8003400 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d824      	bhi.n	8002d16 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	3b02      	subs	r3, #2
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d81b      	bhi.n	8002d0e <HAL_ADC_ConfigChannel+0x86>
 8002cd6:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_ADC_ConfigChannel+0x54>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cf5 	.word	0x08002cf5
 8002ce4:	08002cfd 	.word	0x08002cfd
 8002ce8:	08002d05 	.word	0x08002d05
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	220c      	movs	r2, #12
 8002cf0:	605a      	str	r2, [r3, #4]
          break;
 8002cf2:	e011      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2212      	movs	r2, #18
 8002cf8:	605a      	str	r2, [r3, #4]
          break;
 8002cfa:	e00d      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2218      	movs	r2, #24
 8002d00:	605a      	str	r2, [r3, #4]
          break;
 8002d02:	e009      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0a:	605a      	str	r2, [r3, #4]
          break;
 8002d0c:	e004      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2206      	movs	r2, #6
 8002d12:	605a      	str	r2, [r3, #4]
          break;
 8002d14:	e000      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002d16:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	f7ff fd64 	bl	80027f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fe3b 	bl	80029aa <LL_ADC_REG_IsConversionOngoing>
 8002d34:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fe47 	bl	80029d0 <LL_ADC_INJ_IsConversionOngoing>
 8002d42:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 81a6 	bne.w	800309c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 81a1 	bne.w	800309c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f7ff fd6f 	bl	800284a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	08db      	lsrs	r3, r3, #3
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d00a      	beq.n	8002da4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6919      	ldr	r1, [r3, #16]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d9e:	f7ff fcd3 	bl	8002748 <LL_ADC_SetOffset>
 8002da2:	e17b      	b.n	800309c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fcf0 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x148>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fce5 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	f003 021f 	and.w	r2, r3, #31
 8002dce:	e01e      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x186>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fcda 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002df2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e004      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002e02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x19e>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	0e9b      	lsrs	r3, r3, #26
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	e018      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x1d0>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e004      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002e4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d106      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fca9 	bl	80027bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fc8d 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x20e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fc82 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	e01e      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x24c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fc77 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	e004      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002ec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x264>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	e018      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x296>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e004      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d106      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	2101      	movs	r1, #1
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fc46 	bl	80027bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fc2a 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x2d4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fc1f 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	f003 021f 	and.w	r2, r3, #31
 8002f5a:	e01e      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x312>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2102      	movs	r1, #2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fc14 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	e004      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x32a>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	0e9b      	lsrs	r3, r3, #26
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	e016      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x358>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002fc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e004      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d106      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2102      	movs	r1, #2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fbe5 	bl	80027bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fbc9 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <HAL_ADC_ConfigChannel+0x396>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2103      	movs	r1, #3
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fbbe 	bl	8002790 <LL_ADC_GetOffsetChannel>
 8003014:	4603      	mov	r3, r0
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	f003 021f 	and.w	r2, r3, #31
 800301c:	e017      	b.n	800304e <HAL_ADC_ConfigChannel+0x3c6>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2103      	movs	r1, #3
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fbb3 	bl	8002790 <LL_ADC_GetOffsetChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003038:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800303a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003040:	2320      	movs	r3, #32
 8003042:	e003      	b.n	800304c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x3de>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	e011      	b.n	800308a <HAL_ADC_ConfigChannel+0x402>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003076:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800307e:	2320      	movs	r3, #32
 8003080:	e003      	b.n	800308a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800308a:	429a      	cmp	r2, r3
 800308c:	d106      	bne.n	800309c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	2103      	movs	r1, #3
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fb90 	bl	80027bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fc6f 	bl	8002984 <LL_ADC_IsEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 813f 	bne.w	800332c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff fbf0 	bl	80028a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a8e      	ldr	r2, [pc, #568]	; (8003300 <HAL_ADC_ConfigChannel+0x678>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	f040 8130 	bne.w	800332c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10b      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x46c>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	0e9b      	lsrs	r3, r3, #26
 80030e2:	3301      	adds	r3, #1
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	bf94      	ite	ls
 80030ec:	2301      	movls	r3, #1
 80030ee:	2300      	movhi	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e019      	b.n	8003128 <HAL_ADC_ConfigChannel+0x4a0>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003104:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e003      	b.n	8003118 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2b09      	cmp	r3, #9
 8003120:	bf94      	ite	ls
 8003122:	2301      	movls	r3, #1
 8003124:	2300      	movhi	r3, #0
 8003126:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003128:	2b00      	cmp	r3, #0
 800312a:	d079      	beq.n	8003220 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x4c0>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	3301      	adds	r3, #1
 8003140:	069b      	lsls	r3, r3, #26
 8003142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003146:	e015      	b.n	8003174 <HAL_ADC_ConfigChannel+0x4ec>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003158:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800315a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003160:	2320      	movs	r3, #32
 8003162:	e003      	b.n	800316c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	3301      	adds	r3, #1
 800316e:	069b      	lsls	r3, r3, #26
 8003170:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317c:	2b00      	cmp	r3, #0
 800317e:	d109      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x50c>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	3301      	adds	r3, #1
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	e017      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x53c>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80031ac:	2320      	movs	r3, #32
 80031ae:	e003      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80031b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	ea42 0103 	orr.w	r1, r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x562>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	3301      	adds	r3, #1
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	051b      	lsls	r3, r3, #20
 80031e8:	e018      	b.n	800321c <HAL_ADC_ConfigChannel+0x594>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003202:	2320      	movs	r3, #32
 8003204:	e003      	b.n	800320e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800321c:	430b      	orrs	r3, r1
 800321e:	e080      	b.n	8003322 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_ADC_ConfigChannel+0x5b4>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0e9b      	lsrs	r3, r3, #26
 8003232:	3301      	adds	r3, #1
 8003234:	069b      	lsls	r3, r3, #26
 8003236:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800323a:	e015      	b.n	8003268 <HAL_ADC_ConfigChannel+0x5e0>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003254:	2320      	movs	r3, #32
 8003256:	e003      	b.n	8003260 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3301      	adds	r3, #1
 8003262:	069b      	lsls	r3, r3, #26
 8003264:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x600>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	3301      	adds	r3, #1
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	e017      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x630>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	61fb      	str	r3, [r7, #28]
  return result;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e003      	b.n	80032ac <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	ea42 0103 	orr.w	r1, r2, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x65c>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0e9b      	lsrs	r3, r3, #26
 80032ce:	3301      	adds	r3, #1
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	3b1e      	subs	r3, #30
 80032dc:	051b      	lsls	r3, r3, #20
 80032de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032e2:	e01d      	b.n	8003320 <HAL_ADC_ConfigChannel+0x698>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	613b      	str	r3, [r7, #16]
  return result;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d103      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80032fc:	2320      	movs	r3, #32
 80032fe:	e005      	b.n	800330c <HAL_ADC_ConfigChannel+0x684>
 8003300:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3301      	adds	r3, #1
 800330e:	f003 021f 	and.w	r2, r3, #31
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	3b1e      	subs	r3, #30
 800331a:	051b      	lsls	r3, r3, #20
 800331c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003320:	430b      	orrs	r3, r1
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	6892      	ldr	r2, [r2, #8]
 8003326:	4619      	mov	r1, r3
 8003328:	f7ff fa8f 	bl	800284a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_ADC_ConfigChannel+0x7a0>)
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d06c      	beq.n	8003412 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003338:	483c      	ldr	r0, [pc, #240]	; (800342c <HAL_ADC_ConfigChannel+0x7a4>)
 800333a:	f7ff f9f7 	bl	800272c <LL_ADC_GetCommonPathInternalCh>
 800333e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3a      	ldr	r2, [pc, #232]	; (8003430 <HAL_ADC_ConfigChannel+0x7a8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d127      	bne.n	800339c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800334c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d121      	bne.n	800339c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <HAL_ADC_ConfigChannel+0x7ac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d157      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800336a:	4619      	mov	r1, r3
 800336c:	482f      	ldr	r0, [pc, #188]	; (800342c <HAL_ADC_ConfigChannel+0x7a4>)
 800336e:	f7ff f9ca 	bl	8002706 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <HAL_ADC_ConfigChannel+0x7b0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	4a30      	ldr	r2, [pc, #192]	; (800343c <HAL_ADC_ConfigChannel+0x7b4>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	099b      	lsrs	r3, r3, #6
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800338c:	e002      	b.n	8003394 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3b01      	subs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f9      	bne.n	800338e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800339a:	e03a      	b.n	8003412 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_ADC_ConfigChannel+0x7b8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d113      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x746>
 80033a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_ADC_ConfigChannel+0x7ac>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d12a      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c4:	4619      	mov	r1, r3
 80033c6:	4819      	ldr	r0, [pc, #100]	; (800342c <HAL_ADC_ConfigChannel+0x7a4>)
 80033c8:	f7ff f99d 	bl	8002706 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033cc:	e021      	b.n	8003412 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1c      	ldr	r2, [pc, #112]	; (8003444 <HAL_ADC_ConfigChannel+0x7bc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d11c      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d116      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a12      	ldr	r2, [pc, #72]	; (8003434 <HAL_ADC_ConfigChannel+0x7ac>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d111      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033f6:	4619      	mov	r1, r3
 80033f8:	480c      	ldr	r0, [pc, #48]	; (800342c <HAL_ADC_ConfigChannel+0x7a4>)
 80033fa:	f7ff f984 	bl	8002706 <LL_ADC_SetCommonPathInternalCh>
 80033fe:	e008      	b.n	8003412 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800341a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800341e:	4618      	mov	r0, r3
 8003420:	37d8      	adds	r7, #216	; 0xd8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	80080000 	.word	0x80080000
 800342c:	50040300 	.word	0x50040300
 8003430:	c7520000 	.word	0xc7520000
 8003434:	50040000 	.word	0x50040000
 8003438:	20000130 	.word	0x20000130
 800343c:	053e2d63 	.word	0x053e2d63
 8003440:	cb840000 	.word	0xcb840000
 8003444:	80000001 	.word	0x80000001

08003448 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0ed      	b.n	8003636 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe f9bc 	bl	80017e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0202 	bic.w	r2, r2, #2
 800347a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800347c:	f7ff f924 	bl	80026c8 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003482:	e012      	b.n	80034aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003484:	f7ff f920 	bl	80026c8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b0a      	cmp	r3, #10
 8003490:	d90b      	bls.n	80034aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2205      	movs	r2, #5
 80034a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0c5      	b.n	8003636 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e5      	bne.n	8003484 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c8:	f7ff f8fe 	bl	80026c8 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ce:	e012      	b.n	80034f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034d0:	f7ff f8fa 	bl	80026c8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b0a      	cmp	r3, #10
 80034dc:	d90b      	bls.n	80034f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2205      	movs	r2, #5
 80034ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e09f      	b.n	8003636 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0e5      	beq.n	80034d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7e1b      	ldrb	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d108      	bne.n	800351e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e007      	b.n	800352e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7e5b      	ldrb	r3, [r3, #25]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d108      	bne.n	8003548 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e007      	b.n	8003558 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003556:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7e9b      	ldrb	r3, [r3, #26]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d108      	bne.n	8003572 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0220 	orr.w	r2, r2, #32
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e007      	b.n	8003582 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0220 	bic.w	r2, r2, #32
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7edb      	ldrb	r3, [r3, #27]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d108      	bne.n	800359c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0210 	bic.w	r2, r2, #16
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e007      	b.n	80035ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0210 	orr.w	r2, r2, #16
 80035aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7f1b      	ldrb	r3, [r3, #28]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d108      	bne.n	80035c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e007      	b.n	80035d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0208 	bic.w	r2, r2, #8
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7f5b      	ldrb	r3, [r3, #29]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d108      	bne.n	80035f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0204 	orr.w	r2, r2, #4
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e007      	b.n	8003600 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0204 	bic.w	r2, r2, #4
 80035fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	ea42 0103 	orr.w	r1, r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	1e5a      	subs	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800363e:	b480      	push	{r7}
 8003640:	b087      	sub	sp, #28
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003652:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d003      	beq.n	8003662 <HAL_CAN_GetRxMessage+0x24>
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	2b02      	cmp	r3, #2
 800365e:	f040 80f3 	bne.w	8003848 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10e      	bne.n	8003686 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d116      	bne.n	80036a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e0e7      	b.n	8003856 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0d8      	b.n	8003856 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	331b      	adds	r3, #27
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4413      	add	r3, r2
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0204 	and.w	r2, r3, #4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10c      	bne.n	80036dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	331b      	adds	r3, #27
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4413      	add	r3, r2
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0d5b      	lsrs	r3, r3, #21
 80036d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	331b      	adds	r3, #27
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	08db      	lsrs	r3, r3, #3
 80036ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	331b      	adds	r3, #27
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	4413      	add	r3, r2
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0202 	and.w	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	331b      	adds	r3, #27
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	331b      	adds	r3, #27
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b2da      	uxtb	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	331b      	adds	r3, #27
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	4413      	add	r3, r2
 8003746:	3304      	adds	r3, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	4413      	add	r3, r2
 800375c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	4413      	add	r3, r2
 8003772:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	0a1a      	lsrs	r2, r3, #8
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	4413      	add	r3, r2
 800378c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	0c1a      	lsrs	r2, r3, #16
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	3302      	adds	r3, #2
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e1a      	lsrs	r2, r3, #24
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	3303      	adds	r3, #3
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4413      	add	r3, r2
 80037c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	3304      	adds	r3, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	0a1a      	lsrs	r2, r3, #8
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	3305      	adds	r3, #5
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0c1a      	lsrs	r2, r3, #16
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	3306      	adds	r3, #6
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	4413      	add	r3, r2
 800380c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	0e1a      	lsrs	r2, r3, #24
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	3307      	adds	r3, #7
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0220 	orr.w	r2, r2, #32
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	e007      	b.n	8003844 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0220 	orr.w	r2, r2, #32
 8003842:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e006      	b.n	8003856 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b08a      	sub	sp, #40	; 0x28
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d07c      	beq.n	80039a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d023      	beq.n	80038fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2201      	movs	r2, #1
 80038b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f983 	bl	8003bd0 <HAL_CAN_TxMailbox0CompleteCallback>
 80038ca:	e016      	b.n	80038fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
 80038de:	e00c      	b.n	80038fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
 80038f2:	e002      	b.n	80038fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f989 	bl	8003c0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d024      	beq.n	800394e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800390c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f963 	bl	8003be4 <HAL_CAN_TxMailbox1CompleteCallback>
 800391e:	e016      	b.n	800394e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
 8003932:	e00c      	b.n	800394e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
 8003946:	e002      	b.n	800394e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f969 	bl	8003c20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d024      	beq.n	80039a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003960:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f943 	bl	8003bf8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003972:	e016      	b.n	80039a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
 8003986:	e00c      	b.n	80039a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d004      	beq.n	800399c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	e002      	b.n	80039a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f949 	bl	8003c34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00c      	beq.n	80039c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2210      	movs	r2, #16
 80039c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d006      	beq.n	80039e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2208      	movs	r2, #8
 80039e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f930 	bl	8003c48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7fe fdb3 	bl	800256c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00c      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2210      	movs	r2, #16
 8003a28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00b      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d006      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2208      	movs	r2, #8
 8003a44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f908 	bl	8003c5c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fe fd95 	bl	8002594 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2210      	movs	r2, #16
 8003a84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8f2 	bl	8003c70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d006      	beq.n	8003aae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f8eb 	bl	8003c84 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d07b      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d072      	beq.n	8003ba8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d043      	beq.n	8003ba8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d03e      	beq.n	8003ba8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b30:	2b60      	cmp	r3, #96	; 0x60
 8003b32:	d02b      	beq.n	8003b8c <HAL_CAN_IRQHandler+0x32a>
 8003b34:	2b60      	cmp	r3, #96	; 0x60
 8003b36:	d82e      	bhi.n	8003b96 <HAL_CAN_IRQHandler+0x334>
 8003b38:	2b50      	cmp	r3, #80	; 0x50
 8003b3a:	d022      	beq.n	8003b82 <HAL_CAN_IRQHandler+0x320>
 8003b3c:	2b50      	cmp	r3, #80	; 0x50
 8003b3e:	d82a      	bhi.n	8003b96 <HAL_CAN_IRQHandler+0x334>
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d019      	beq.n	8003b78 <HAL_CAN_IRQHandler+0x316>
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d826      	bhi.n	8003b96 <HAL_CAN_IRQHandler+0x334>
 8003b48:	2b30      	cmp	r3, #48	; 0x30
 8003b4a:	d010      	beq.n	8003b6e <HAL_CAN_IRQHandler+0x30c>
 8003b4c:	2b30      	cmp	r3, #48	; 0x30
 8003b4e:	d822      	bhi.n	8003b96 <HAL_CAN_IRQHandler+0x334>
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d002      	beq.n	8003b5a <HAL_CAN_IRQHandler+0x2f8>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d005      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b58:	e01d      	b.n	8003b96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f043 0308 	orr.w	r3, r3, #8
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b62:	e019      	b.n	8003b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	f043 0310 	orr.w	r3, r3, #16
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b6c:	e014      	b.n	8003b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	f043 0320 	orr.w	r3, r3, #32
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b76:	e00f      	b.n	8003b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b80:	e00a      	b.n	8003b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b8a:	e005      	b.n	8003b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b94:	e000      	b.n	8003b98 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b96:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ba6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2204      	movs	r2, #4
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f868 	bl	8003c98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bc8:	bf00      	nop
 8003bca:	3728      	adds	r7, #40	; 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cde:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60d3      	str	r3, [r2, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <__NVIC_GetPriorityGrouping+0x18>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	f003 0307 	and.w	r3, r3, #7
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	db0b      	blt.n	8003d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	f003 021f 	and.w	r2, r3, #31
 8003d28:	4907      	ldr	r1, [pc, #28]	; (8003d48 <__NVIC_EnableIRQ+0x38>)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2001      	movs	r0, #1
 8003d32:	fa00 f202 	lsl.w	r2, r0, r2
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000e100 	.word	0xe000e100

08003d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	db0a      	blt.n	8003d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	490c      	ldr	r1, [pc, #48]	; (8003d98 <__NVIC_SetPriority+0x4c>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	0112      	lsls	r2, r2, #4
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	440b      	add	r3, r1
 8003d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d74:	e00a      	b.n	8003d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4908      	ldr	r1, [pc, #32]	; (8003d9c <__NVIC_SetPriority+0x50>)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	3b04      	subs	r3, #4
 8003d84:	0112      	lsls	r2, r2, #4
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	440b      	add	r3, r1
 8003d8a:	761a      	strb	r2, [r3, #24]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000e100 	.word	0xe000e100
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f1c3 0307 	rsb	r3, r3, #7
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	bf28      	it	cs
 8003dbe:	2304      	movcs	r3, #4
 8003dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2b06      	cmp	r3, #6
 8003dc8:	d902      	bls.n	8003dd0 <NVIC_EncodePriority+0x30>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3b03      	subs	r3, #3
 8003dce:	e000      	b.n	8003dd2 <NVIC_EncodePriority+0x32>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	401a      	ands	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	43d9      	mvns	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df8:	4313      	orrs	r3, r2
         );
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ff4c 	bl	8003cac <__NVIC_SetPriorityGrouping>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e2e:	f7ff ff61 	bl	8003cf4 <__NVIC_GetPriorityGrouping>
 8003e32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	6978      	ldr	r0, [r7, #20]
 8003e3a:	f7ff ffb1 	bl	8003da0 <NVIC_EncodePriority>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff80 	bl	8003d4c <__NVIC_SetPriority>
}
 8003e4c:	bf00      	nop
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff54 	bl	8003d10 <__NVIC_EnableIRQ>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e098      	b.n	8003fb4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	4b4d      	ldr	r3, [pc, #308]	; (8003fc0 <HAL_DMA_Init+0x150>)
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d80f      	bhi.n	8003eae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <HAL_DMA_Init+0x154>)
 8003e96:	4413      	add	r3, r2
 8003e98:	4a4b      	ldr	r2, [pc, #300]	; (8003fc8 <HAL_DMA_Init+0x158>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	009a      	lsls	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a48      	ldr	r2, [pc, #288]	; (8003fcc <HAL_DMA_Init+0x15c>)
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8003eac:	e00e      	b.n	8003ecc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_DMA_Init+0x160>)
 8003eb6:	4413      	add	r3, r2
 8003eb8:	4a43      	ldr	r2, [pc, #268]	; (8003fc8 <HAL_DMA_Init+0x158>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	009a      	lsls	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a42      	ldr	r2, [pc, #264]	; (8003fd4 <HAL_DMA_Init+0x164>)
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f26:	d039      	beq.n	8003f9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <HAL_DMA_Init+0x15c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d11a      	bne.n	8003f68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f32:	4b29      	ldr	r3, [pc, #164]	; (8003fd8 <HAL_DMA_Init+0x168>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	f003 031c 	and.w	r3, r3, #28
 8003f3e:	210f      	movs	r1, #15
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	4924      	ldr	r1, [pc, #144]	; (8003fd8 <HAL_DMA_Init+0x168>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f4c:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <HAL_DMA_Init+0x168>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	f003 031c 	and.w	r3, r3, #28
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	491d      	ldr	r1, [pc, #116]	; (8003fd8 <HAL_DMA_Init+0x168>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
 8003f66:	e019      	b.n	8003f9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f68:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <HAL_DMA_Init+0x16c>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f003 031c 	and.w	r3, r3, #28
 8003f74:	210f      	movs	r1, #15
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4917      	ldr	r1, [pc, #92]	; (8003fdc <HAL_DMA_Init+0x16c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f82:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <HAL_DMA_Init+0x16c>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f003 031c 	and.w	r3, r3, #28
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	4911      	ldr	r1, [pc, #68]	; (8003fdc <HAL_DMA_Init+0x16c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40020407 	.word	0x40020407
 8003fc4:	bffdfff8 	.word	0xbffdfff8
 8003fc8:	cccccccd 	.word	0xcccccccd
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	bffdfbf8 	.word	0xbffdfbf8
 8003fd4:	40020400 	.word	0x40020400
 8003fd8:	400200a8 	.word	0x400200a8
 8003fdc:	400204a8 	.word	0x400204a8

08003fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	f003 031c 	and.w	r3, r3, #28
 8004000:	2204      	movs	r2, #4
 8004002:	409a      	lsls	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d026      	beq.n	800405a <HAL_DMA_IRQHandler+0x7a>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d021      	beq.n	800405a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d107      	bne.n	8004034 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0204 	bic.w	r2, r2, #4
 8004032:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	f003 021c 	and.w	r2, r3, #28
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2104      	movs	r1, #4
 8004042:	fa01 f202 	lsl.w	r2, r1, r2
 8004046:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	2b00      	cmp	r3, #0
 800404e:	d071      	beq.n	8004134 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004058:	e06c      	b.n	8004134 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f003 031c 	and.w	r3, r3, #28
 8004062:	2202      	movs	r2, #2
 8004064:	409a      	lsls	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02e      	beq.n	80040cc <HAL_DMA_IRQHandler+0xec>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d029      	beq.n	80040cc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 020a 	bic.w	r2, r2, #10
 8004094:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	f003 021c 	and.w	r2, r3, #28
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2102      	movs	r1, #2
 80040ac:	fa01 f202 	lsl.w	r2, r1, r2
 80040b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d038      	beq.n	8004134 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040ca:	e033      	b.n	8004134 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f003 031c 	and.w	r3, r3, #28
 80040d4:	2208      	movs	r2, #8
 80040d6:	409a      	lsls	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02a      	beq.n	8004136 <HAL_DMA_IRQHandler+0x156>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d025      	beq.n	8004136 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 020e 	bic.w	r2, r2, #14
 80040f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f003 021c 	and.w	r2, r3, #28
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2101      	movs	r1, #1
 8004108:	fa01 f202 	lsl.w	r2, r1, r2
 800410c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004134:	bf00      	nop
 8004136:	bf00      	nop
}
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800414e:	e148      	b.n	80043e2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	2101      	movs	r1, #1
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	4013      	ands	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 813a 	beq.w	80043dc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d00b      	beq.n	8004188 <HAL_GPIO_Init+0x48>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d007      	beq.n	8004188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800417c:	2b11      	cmp	r3, #17
 800417e:	d003      	beq.n	8004188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b12      	cmp	r3, #18
 8004186:	d130      	bne.n	80041ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041be:	2201      	movs	r2, #1
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	f003 0201 	and.w	r2, r3, #1
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2203      	movs	r2, #3
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0xea>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b12      	cmp	r3, #18
 8004228:	d123      	bne.n	8004272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	08da      	lsrs	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3208      	adds	r2, #8
 8004232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	220f      	movs	r2, #15
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4013      	ands	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	08da      	lsrs	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3208      	adds	r2, #8
 800426c:	6939      	ldr	r1, [r7, #16]
 800426e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2203      	movs	r2, #3
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4013      	ands	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 0203 	and.w	r2, r3, #3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8094 	beq.w	80043dc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b4:	4b52      	ldr	r3, [pc, #328]	; (8004400 <HAL_GPIO_Init+0x2c0>)
 80042b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b8:	4a51      	ldr	r2, [pc, #324]	; (8004400 <HAL_GPIO_Init+0x2c0>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6613      	str	r3, [r2, #96]	; 0x60
 80042c0:	4b4f      	ldr	r3, [pc, #316]	; (8004400 <HAL_GPIO_Init+0x2c0>)
 80042c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042cc:	4a4d      	ldr	r2, [pc, #308]	; (8004404 <HAL_GPIO_Init+0x2c4>)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	089b      	lsrs	r3, r3, #2
 80042d2:	3302      	adds	r3, #2
 80042d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	220f      	movs	r2, #15
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4013      	ands	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042f6:	d00d      	beq.n	8004314 <HAL_GPIO_Init+0x1d4>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a43      	ldr	r2, [pc, #268]	; (8004408 <HAL_GPIO_Init+0x2c8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <HAL_GPIO_Init+0x1d0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a42      	ldr	r2, [pc, #264]	; (800440c <HAL_GPIO_Init+0x2cc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <HAL_GPIO_Init+0x1cc>
 8004308:	2302      	movs	r3, #2
 800430a:	e004      	b.n	8004316 <HAL_GPIO_Init+0x1d6>
 800430c:	2307      	movs	r3, #7
 800430e:	e002      	b.n	8004316 <HAL_GPIO_Init+0x1d6>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <HAL_GPIO_Init+0x1d6>
 8004314:	2300      	movs	r3, #0
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	f002 0203 	and.w	r2, r2, #3
 800431c:	0092      	lsls	r2, r2, #2
 800431e:	4093      	lsls	r3, r2
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004326:	4937      	ldr	r1, [pc, #220]	; (8004404 <HAL_GPIO_Init+0x2c4>)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	089b      	lsrs	r3, r3, #2
 800432c:	3302      	adds	r3, #2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004334:	4b36      	ldr	r3, [pc, #216]	; (8004410 <HAL_GPIO_Init+0x2d0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	43db      	mvns	r3, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4013      	ands	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004358:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <HAL_GPIO_Init+0x2d0>)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <HAL_GPIO_Init+0x2d0>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004382:	4a23      	ldr	r2, [pc, #140]	; (8004410 <HAL_GPIO_Init+0x2d0>)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004388:	4b21      	ldr	r3, [pc, #132]	; (8004410 <HAL_GPIO_Init+0x2d0>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	43db      	mvns	r3, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_GPIO_Init+0x2d0>)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <HAL_GPIO_Init+0x2d0>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	43db      	mvns	r3, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043d6:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <HAL_GPIO_Init+0x2d0>)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3301      	adds	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f47f aeaf 	bne.w	8004150 <HAL_GPIO_Init+0x10>
  }
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40021000 	.word	0x40021000
 8004404:	40010000 	.word	0x40010000
 8004408:	48000400 	.word	0x48000400
 800440c:	48000800 	.word	0x48000800
 8004410:	40010400 	.word	0x40010400

08004414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e081      	b.n	800452a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fd fb00 	bl	8001a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2224      	movs	r2, #36	; 0x24
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0201 	bic.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004464:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004474:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d107      	bne.n	800448e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	e006      	b.n	800449c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800449a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d104      	bne.n	80044ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	ea42 0103 	orr.w	r1, r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	021a      	lsls	r2, r3, #8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69d9      	ldr	r1, [r3, #28]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1a      	ldr	r2, [r3, #32]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	461a      	mov	r2, r3
 8004540:	460b      	mov	r3, r1
 8004542:	817b      	strh	r3, [r7, #10]
 8004544:	4613      	mov	r3, r2
 8004546:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b20      	cmp	r3, #32
 8004552:	f040 80da 	bne.w	800470a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_I2C_Master_Transmit+0x30>
 8004560:	2302      	movs	r3, #2
 8004562:	e0d3      	b.n	800470c <HAL_I2C_Master_Transmit+0x1d8>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800456c:	f7fe f8ac 	bl	80026c8 <HAL_GetTick>
 8004570:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	2319      	movs	r3, #25
 8004578:	2201      	movs	r2, #1
 800457a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 faed 	bl	8004b5e <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0be      	b.n	800470c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2221      	movs	r2, #33	; 0x21
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2210      	movs	r2, #16
 800459a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	893a      	ldrh	r2, [r7, #8]
 80045ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2bff      	cmp	r3, #255	; 0xff
 80045be:	d90e      	bls.n	80045de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	22ff      	movs	r2, #255	; 0xff
 80045c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	8979      	ldrh	r1, [r7, #10]
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_I2C_Master_Transmit+0x1e0>)
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fc50 	bl	8004e7c <I2C_TransferConfig>
 80045dc:	e06c      	b.n	80046b8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	8979      	ldrh	r1, [r7, #10]
 80045f0:	4b48      	ldr	r3, [pc, #288]	; (8004714 <HAL_I2C_Master_Transmit+0x1e0>)
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fc3f 	bl	8004e7c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80045fe:	e05b      	b.n	80046b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	6a39      	ldr	r1, [r7, #32]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 faea 	bl	8004bde <I2C_WaitOnTXISFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e07b      	b.n	800470c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d034      	beq.n	80046b8 <HAL_I2C_Master_Transmit+0x184>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	d130      	bne.n	80046b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	2200      	movs	r2, #0
 800465e:	2180      	movs	r1, #128	; 0x80
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fa7c 	bl	8004b5e <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e04d      	b.n	800470c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2bff      	cmp	r3, #255	; 0xff
 8004678:	d90e      	bls.n	8004698 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	22ff      	movs	r2, #255	; 0xff
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	b2da      	uxtb	r2, r3
 8004686:	8979      	ldrh	r1, [r7, #10]
 8004688:	2300      	movs	r3, #0
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fbf3 	bl	8004e7c <I2C_TransferConfig>
 8004696:	e00f      	b.n	80046b8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	8979      	ldrh	r1, [r7, #10]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fbe2 	bl	8004e7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d19e      	bne.n	8004600 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	6a39      	ldr	r1, [r7, #32]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fac9 	bl	8004c5e <I2C_WaitOnSTOPFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e01a      	b.n	800470c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2220      	movs	r2, #32
 80046dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_I2C_Master_Transmit+0x1e4>)
 80046ea:	400b      	ands	r3, r1
 80046ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	80002000 	.word	0x80002000
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	461a      	mov	r2, r3
 8004728:	460b      	mov	r3, r1
 800472a:	817b      	strh	r3, [r7, #10]
 800472c:	4613      	mov	r3, r2
 800472e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b20      	cmp	r3, #32
 800473a:	f040 80db 	bne.w	80048f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_I2C_Master_Receive+0x30>
 8004748:	2302      	movs	r3, #2
 800474a:	e0d4      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004754:	f7fd ffb8 	bl	80026c8 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2319      	movs	r3, #25
 8004760:	2201      	movs	r2, #1
 8004762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f9f9 	bl	8004b5e <I2C_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0bf      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2222      	movs	r2, #34	; 0x22
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2210      	movs	r2, #16
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	893a      	ldrh	r2, [r7, #8]
 8004796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2bff      	cmp	r3, #255	; 0xff
 80047a6:	d90e      	bls.n	80047c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	22ff      	movs	r2, #255	; 0xff
 80047ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	8979      	ldrh	r1, [r7, #10]
 80047b6:	4b52      	ldr	r3, [pc, #328]	; (8004900 <HAL_I2C_Master_Receive+0x1e4>)
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fb5c 	bl	8004e7c <I2C_TransferConfig>
 80047c4:	e06d      	b.n	80048a2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	8979      	ldrh	r1, [r7, #10]
 80047d8:	4b49      	ldr	r3, [pc, #292]	; (8004900 <HAL_I2C_Master_Receive+0x1e4>)
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fb4b 	bl	8004e7c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80047e6:	e05c      	b.n	80048a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	6a39      	ldr	r1, [r7, #32]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fa73 	bl	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e07c      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d034      	beq.n	80048a2 <HAL_I2C_Master_Receive+0x186>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	d130      	bne.n	80048a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	2200      	movs	r2, #0
 8004848:	2180      	movs	r1, #128	; 0x80
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f987 	bl	8004b5e <I2C_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e04d      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	2bff      	cmp	r3, #255	; 0xff
 8004862:	d90e      	bls.n	8004882 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	22ff      	movs	r2, #255	; 0xff
 8004868:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	b2da      	uxtb	r2, r3
 8004870:	8979      	ldrh	r1, [r7, #10]
 8004872:	2300      	movs	r3, #0
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fafe 	bl	8004e7c <I2C_TransferConfig>
 8004880:	e00f      	b.n	80048a2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	b2da      	uxtb	r2, r3
 8004892:	8979      	ldrh	r1, [r7, #10]
 8004894:	2300      	movs	r3, #0
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 faed 	bl	8004e7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d19d      	bne.n	80047e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	6a39      	ldr	r1, [r7, #32]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f9d4 	bl	8004c5e <I2C_WaitOnSTOPFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e01a      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2220      	movs	r2, #32
 80048c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <HAL_I2C_Master_Receive+0x1e8>)
 80048d4:	400b      	ands	r3, r1
 80048d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048f4:	2302      	movs	r3, #2
  }
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	80002400 	.word	0x80002400
 8004904:	fe00e800 	.word	0xfe00e800

08004908 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	460b      	mov	r3, r1
 8004916:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b20      	cmp	r3, #32
 8004926:	f040 80f1 	bne.w	8004b0c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004938:	d101      	bne.n	800493e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800493a:	2302      	movs	r3, #2
 800493c:	e0e7      	b.n	8004b0e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_I2C_IsDeviceReady+0x44>
 8004948:	2302      	movs	r3, #2
 800494a:	e0e0      	b.n	8004b0e <HAL_I2C_IsDeviceReady+0x206>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d107      	bne.n	800497a <HAL_I2C_IsDeviceReady+0x72>
 800496a:	897b      	ldrh	r3, [r7, #10]
 800496c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004974:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004978:	e004      	b.n	8004984 <HAL_I2C_IsDeviceReady+0x7c>
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004980:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800498a:	f7fd fe9d 	bl	80026c8 <HAL_GetTick>
 800498e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b20      	cmp	r3, #32
 800499c:	bf0c      	ite	eq
 800499e:	2301      	moveq	r3, #1
 80049a0:	2300      	movne	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80049bc:	e034      	b.n	8004a28 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d01a      	beq.n	80049fc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049c6:	f7fd fe7f 	bl	80026c8 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d302      	bcc.n	80049dc <HAL_I2C_IsDeviceReady+0xd4>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10f      	bne.n	80049fc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	f043 0220 	orr.w	r2, r3, #32
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e088      	b.n	8004b0e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	bf0c      	ite	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	2300      	movne	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004a28:	7ffb      	ldrb	r3, [r7, #31]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <HAL_I2C_IsDeviceReady+0x12c>
 8004a2e:	7fbb      	ldrb	r3, [r7, #30]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0c4      	beq.n	80049be <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d01a      	beq.n	8004a78 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f886 	bl	8004b5e <I2C_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e058      	b.n	8004b0e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2220      	movs	r2, #32
 8004a62:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e04a      	b.n	8004b0e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2120      	movs	r1, #32
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f86b 	bl	8004b5e <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e03d      	b.n	8004b0e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2210      	movs	r2, #16
 8004a98:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d118      	bne.n	8004adc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ab8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2120      	movs	r1, #32
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f84a 	bl	8004b5e <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e01c      	b.n	8004b0e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	f63f af3b 	bhi.w	8004962 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
  }
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d103      	bne.n	8004b34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d007      	beq.n	8004b52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	619a      	str	r2, [r3, #24]
  }
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b6e:	e022      	b.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d01e      	beq.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fd fda6 	bl	80026c8 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d113      	bne.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	f043 0220 	orr.w	r2, r3, #32
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e00f      	b.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0cd      	beq.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bea:	e02c      	b.n	8004c46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f8dd 	bl	8004db0 <I2C_IsAcknowledgeFailed>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e02a      	b.n	8004c56 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d01e      	beq.n	8004c46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c08:	f7fd fd5e 	bl	80026c8 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d302      	bcc.n	8004c1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d113      	bne.n	8004c46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e007      	b.n	8004c56 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d1cb      	bne.n	8004bec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c6a:	e028      	b.n	8004cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f89d 	bl	8004db0 <I2C_IsAcknowledgeFailed>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e026      	b.n	8004cce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c80:	f7fd fd22 	bl	80026c8 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d113      	bne.n	8004cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e007      	b.n	8004cce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d1cf      	bne.n	8004c6c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce4:	e055      	b.n	8004d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f860 	bl	8004db0 <I2C_IsAcknowledgeFailed>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e053      	b.n	8004da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d129      	bne.n	8004d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d105      	bne.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e03f      	b.n	8004da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2220      	movs	r2, #32
 8004d28:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004d36:	400b      	ands	r3, r1
 8004d38:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e022      	b.n	8004da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5c:	f7fd fcb4 	bl	80026c8 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e007      	b.n	8004da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d1a2      	bne.n	8004ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	fe00e800 	.word	0xfe00e800

08004db0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d151      	bne.n	8004e6e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dca:	e022      	b.n	8004e12 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d01e      	beq.n	8004e12 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd4:	f7fd fc78 	bl	80026c8 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d302      	bcc.n	8004dea <I2C_IsAcknowledgeFailed+0x3a>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d113      	bne.n	8004e12 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e02e      	b.n	8004e70 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d1d5      	bne.n	8004dcc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2210      	movs	r2, #16
 8004e26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fe70 	bl	8004b16 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6859      	ldr	r1, [r3, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <I2C_IsAcknowledgeFailed+0xc8>)
 8004e42:	400b      	ands	r3, r1
 8004e44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	f043 0204 	orr.w	r2, r3, #4
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	fe00e800 	.word	0xfe00e800

08004e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	0d5b      	lsrs	r3, r3, #21
 8004e98:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <I2C_TransferConfig+0x58>)
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	ea02 0103 	and.w	r1, r2, r3
 8004ea6:	897b      	ldrh	r3, [r7, #10]
 8004ea8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004eac:	7a7b      	ldrb	r3, [r7, #9]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	03ff63ff 	.word	0x03ff63ff

08004ed8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d138      	bne.n	8004f60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e032      	b.n	8004f62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2224      	movs	r2, #36	; 0x24
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6819      	ldr	r1, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e000      	b.n	8004f62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f60:	2302      	movs	r3, #2
  }
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d139      	bne.n	8004ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e033      	b.n	8004ffa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2224      	movs	r2, #36	; 0x24
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e000      	b.n	8004ffa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ff8:	2302      	movs	r3, #2
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40007000 	.word	0x40007000

08005028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <HAL_PWREx_GetVoltageRange+0x18>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40007000 	.word	0x40007000

08005044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005052:	d130      	bne.n	80050b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005054:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800505c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005060:	d038      	beq.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005062:	4b20      	ldr	r3, [pc, #128]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800506a:	4a1e      	ldr	r2, [pc, #120]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800506c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2232      	movs	r2, #50	; 0x32
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	0c9b      	lsrs	r3, r3, #18
 8005084:	3301      	adds	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005088:	e002      	b.n	8005090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b01      	subs	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005090:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509c:	d102      	bne.n	80050a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f2      	bne.n	800508a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050a4:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b0:	d110      	bne.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e00f      	b.n	80050d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c2:	d007      	beq.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050c4:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050cc:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40007000 	.word	0x40007000
 80050e8:	20000130 	.word	0x20000130
 80050ec:	431bde83 	.word	0x431bde83

080050f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f000 bc11 	b.w	8005926 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005104:	4ba0      	ldr	r3, [pc, #640]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800510e:	4b9e      	ldr	r3, [pc, #632]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80e4 	beq.w	80052ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_RCC_OscConfig+0x4c>
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	f040 808b 	bne.w	800524a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b01      	cmp	r3, #1
 8005138:	f040 8087 	bne.w	800524a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800513c:	4b92      	ldr	r3, [pc, #584]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_OscConfig+0x64>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e3e8      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1a      	ldr	r2, [r3, #32]
 8005158:	4b8b      	ldr	r3, [pc, #556]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <HAL_RCC_OscConfig+0x7e>
 8005164:	4b88      	ldr	r3, [pc, #544]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800516c:	e005      	b.n	800517a <HAL_RCC_OscConfig+0x8a>
 800516e:	4b86      	ldr	r3, [pc, #536]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800517a:	4293      	cmp	r3, r2
 800517c:	d223      	bcs.n	80051c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fdaa 	bl	8005cdc <RCC_SetFlashLatencyFromMSIRange>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e3c9      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005192:	4b7d      	ldr	r3, [pc, #500]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a7c      	ldr	r2, [pc, #496]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005198:	f043 0308 	orr.w	r3, r3, #8
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4b7a      	ldr	r3, [pc, #488]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	4977      	ldr	r1, [pc, #476]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051b0:	4b75      	ldr	r3, [pc, #468]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	4972      	ldr	r1, [pc, #456]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	604b      	str	r3, [r1, #4]
 80051c4:	e025      	b.n	8005212 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051c6:	4b70      	ldr	r3, [pc, #448]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a6f      	ldr	r2, [pc, #444]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051cc:	f043 0308 	orr.w	r3, r3, #8
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	4b6d      	ldr	r3, [pc, #436]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	496a      	ldr	r1, [pc, #424]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051e4:	4b68      	ldr	r3, [pc, #416]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	4965      	ldr	r1, [pc, #404]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fd6a 	bl	8005cdc <RCC_SetFlashLatencyFromMSIRange>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e389      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005212:	f000 fc6f 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005216:	4602      	mov	r2, r0
 8005218:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	495a      	ldr	r1, [pc, #360]	; (800538c <HAL_RCC_OscConfig+0x29c>)
 8005224:	5ccb      	ldrb	r3, [r1, r3]
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	fa22 f303 	lsr.w	r3, r2, r3
 800522e:	4a58      	ldr	r2, [pc, #352]	; (8005390 <HAL_RCC_OscConfig+0x2a0>)
 8005230:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005232:	4b58      	ldr	r3, [pc, #352]	; (8005394 <HAL_RCC_OscConfig+0x2a4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fc fd3a 	bl	8001cb0 <HAL_InitTick>
 800523c:	4603      	mov	r3, r0
 800523e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d052      	beq.n	80052ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	e36d      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d032      	beq.n	80052b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005252:	4b4d      	ldr	r3, [pc, #308]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a4c      	ldr	r2, [pc, #304]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800525e:	f7fd fa33 	bl	80026c8 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005266:	f7fd fa2f 	bl	80026c8 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e356      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005278:	4b43      	ldr	r3, [pc, #268]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0f0      	beq.n	8005266 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005284:	4b40      	ldr	r3, [pc, #256]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3f      	ldr	r2, [pc, #252]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 800528a:	f043 0308 	orr.w	r3, r3, #8
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	4b3d      	ldr	r3, [pc, #244]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	493a      	ldr	r1, [pc, #232]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052a2:	4b39      	ldr	r3, [pc, #228]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	4935      	ldr	r1, [pc, #212]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	604b      	str	r3, [r1, #4]
 80052b6:	e01a      	b.n	80052ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052b8:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a32      	ldr	r2, [pc, #200]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052c4:	f7fd fa00 	bl	80026c8 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052cc:	f7fd f9fc 	bl	80026c8 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e323      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052de:	4b2a      	ldr	r3, [pc, #168]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x1dc>
 80052ea:	e000      	b.n	80052ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d073      	beq.n	80053e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d005      	beq.n	800530c <HAL_RCC_OscConfig+0x21c>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b0c      	cmp	r3, #12
 8005304:	d10e      	bne.n	8005324 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d10b      	bne.n	8005324 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d063      	beq.n	80053e0 <HAL_RCC_OscConfig+0x2f0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d15f      	bne.n	80053e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e300      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532c:	d106      	bne.n	800533c <HAL_RCC_OscConfig+0x24c>
 800532e:	4b16      	ldr	r3, [pc, #88]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a15      	ldr	r2, [pc, #84]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e01d      	b.n	8005378 <HAL_RCC_OscConfig+0x288>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x270>
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 800534c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a0c      	ldr	r2, [pc, #48]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0x288>
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a08      	ldr	r2, [pc, #32]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a05      	ldr	r2, [pc, #20]	; (8005388 <HAL_RCC_OscConfig+0x298>)
 8005372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fd f9a2 	bl	80026c8 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005386:	e010      	b.n	80053aa <HAL_RCC_OscConfig+0x2ba>
 8005388:	40021000 	.word	0x40021000
 800538c:	0800cda0 	.word	0x0800cda0
 8005390:	20000130 	.word	0x20000130
 8005394:	20000134 	.word	0x20000134
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005398:	f7fd f996 	bl	80026c8 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	; 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e2bd      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053aa:	4baf      	ldr	r3, [pc, #700]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x2a8>
 80053b6:	e014      	b.n	80053e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fd f986 	bl	80026c8 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c0:	f7fd f982 	bl	80026c8 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	; 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e2a9      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053d2:	4ba5      	ldr	r3, [pc, #660]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x2d0>
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d060      	beq.n	80054b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_OscConfig+0x310>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d119      	bne.n	800542e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d116      	bne.n	800542e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005400:	4b99      	ldr	r3, [pc, #612]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_RCC_OscConfig+0x328>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e286      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005418:	4b93      	ldr	r3, [pc, #588]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	4990      	ldr	r1, [pc, #576]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800542c:	e040      	b.n	80054b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d023      	beq.n	800547e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005436:	4b8c      	ldr	r3, [pc, #560]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a8b      	ldr	r2, [pc, #556]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 800543c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fd f941 	bl	80026c8 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800544a:	f7fd f93d 	bl	80026c8 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e264      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800545c:	4b82      	ldr	r3, [pc, #520]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005468:	4b7f      	ldr	r3, [pc, #508]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	497c      	ldr	r1, [pc, #496]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
 800547c:	e018      	b.n	80054b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547e:	4b7a      	ldr	r3, [pc, #488]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a79      	ldr	r2, [pc, #484]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548a:	f7fd f91d 	bl	80026c8 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005492:	f7fd f919 	bl	80026c8 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e240      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a4:	4b70      	ldr	r3, [pc, #448]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f0      	bne.n	8005492 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d03c      	beq.n	8005536 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01c      	beq.n	80054fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c4:	4b68      	ldr	r3, [pc, #416]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80054c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ca:	4a67      	ldr	r2, [pc, #412]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d4:	f7fd f8f8 	bl	80026c8 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054dc:	f7fd f8f4 	bl	80026c8 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e21b      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ee:	4b5e      	ldr	r3, [pc, #376]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80054f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0ef      	beq.n	80054dc <HAL_RCC_OscConfig+0x3ec>
 80054fc:	e01b      	b.n	8005536 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054fe:	4b5a      	ldr	r3, [pc, #360]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005504:	4a58      	ldr	r2, [pc, #352]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550e:	f7fd f8db 	bl	80026c8 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005516:	f7fd f8d7 	bl	80026c8 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1fe      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005528:	4b4f      	ldr	r3, [pc, #316]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 800552a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1ef      	bne.n	8005516 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80a6 	beq.w	8005690 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005544:	2300      	movs	r3, #0
 8005546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005548:	4b47      	ldr	r3, [pc, #284]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 800554a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10d      	bne.n	8005570 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005554:	4b44      	ldr	r3, [pc, #272]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	4a43      	ldr	r2, [pc, #268]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 800555a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555e:	6593      	str	r3, [r2, #88]	; 0x58
 8005560:	4b41      	ldr	r3, [pc, #260]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556c:	2301      	movs	r3, #1
 800556e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005570:	4b3e      	ldr	r3, [pc, #248]	; (800566c <HAL_RCC_OscConfig+0x57c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d118      	bne.n	80055ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800557c:	4b3b      	ldr	r3, [pc, #236]	; (800566c <HAL_RCC_OscConfig+0x57c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a3a      	ldr	r2, [pc, #232]	; (800566c <HAL_RCC_OscConfig+0x57c>)
 8005582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005588:	f7fd f89e 	bl	80026c8 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005590:	f7fd f89a 	bl	80026c8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e1c1      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a2:	4b32      	ldr	r3, [pc, #200]	; (800566c <HAL_RCC_OscConfig+0x57c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d108      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4d8>
 80055b6:	4b2c      	ldr	r3, [pc, #176]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055bc:	4a2a      	ldr	r2, [pc, #168]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055c6:	e024      	b.n	8005612 <HAL_RCC_OscConfig+0x522>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d110      	bne.n	80055f2 <HAL_RCC_OscConfig+0x502>
 80055d0:	4b25      	ldr	r3, [pc, #148]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	4a24      	ldr	r2, [pc, #144]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80055d8:	f043 0304 	orr.w	r3, r3, #4
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055e0:	4b21      	ldr	r3, [pc, #132]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	4a20      	ldr	r2, [pc, #128]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055f0:	e00f      	b.n	8005612 <HAL_RCC_OscConfig+0x522>
 80055f2:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005602:	4b19      	ldr	r3, [pc, #100]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 800560a:	f023 0304 	bic.w	r3, r3, #4
 800560e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561a:	f7fd f855 	bl	80026c8 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005620:	e00a      	b.n	8005638 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005622:	f7fd f851 	bl	80026c8 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005630:	4293      	cmp	r3, r2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e176      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <HAL_RCC_OscConfig+0x578>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0ed      	beq.n	8005622 <HAL_RCC_OscConfig+0x532>
 8005646:	e01a      	b.n	800567e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fd f83e 	bl	80026c8 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800564e:	e00f      	b.n	8005670 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005650:	f7fd f83a 	bl	80026c8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d906      	bls.n	8005670 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e15f      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
 8005666:	bf00      	nop
 8005668:	40021000 	.word	0x40021000
 800566c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005670:	4baa      	ldr	r3, [pc, #680]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e8      	bne.n	8005650 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800567e:	7ffb      	ldrb	r3, [r7, #31]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005684:	4ba5      	ldr	r3, [pc, #660]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005688:	4aa4      	ldr	r2, [pc, #656]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 800568a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d03c      	beq.n	8005716 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01c      	beq.n	80056de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056a4:	4b9d      	ldr	r3, [pc, #628]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80056a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056aa:	4a9c      	ldr	r2, [pc, #624]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fd f808 	bl	80026c8 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056bc:	f7fd f804 	bl	80026c8 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e12b      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056ce:	4b93      	ldr	r3, [pc, #588]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80056d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ef      	beq.n	80056bc <HAL_RCC_OscConfig+0x5cc>
 80056dc:	e01b      	b.n	8005716 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056de:	4b8f      	ldr	r3, [pc, #572]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80056e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e4:	4a8d      	ldr	r2, [pc, #564]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7fc ffeb 	bl	80026c8 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056f6:	f7fc ffe7 	bl	80026c8 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e10e      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005708:	4b84      	ldr	r3, [pc, #528]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 800570a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1ef      	bne.n	80056f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8102 	beq.w	8005924 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	2b02      	cmp	r3, #2
 8005726:	f040 80c5 	bne.w	80058b4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800572a:	4b7c      	ldr	r3, [pc, #496]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 0203 	and.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	429a      	cmp	r2, r3
 800573c:	d12c      	bne.n	8005798 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	3b01      	subs	r3, #1
 800574a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d123      	bne.n	8005798 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d11b      	bne.n	8005798 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d113      	bne.n	8005798 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	3b01      	subs	r3, #1
 800577e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005780:	429a      	cmp	r2, r3
 8005782:	d109      	bne.n	8005798 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	3b01      	subs	r3, #1
 8005792:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d067      	beq.n	8005868 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d062      	beq.n	8005864 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800579e:	4b5f      	ldr	r3, [pc, #380]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e0bb      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057ae:	4b5b      	ldr	r3, [pc, #364]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a5a      	ldr	r2, [pc, #360]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80057b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057ba:	f7fc ff85 	bl	80026c8 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c2:	f7fc ff81 	bl	80026c8 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e0a8      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d4:	4b51      	ldr	r3, [pc, #324]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1f0      	bne.n	80057c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057e0:	4b4e      	ldr	r3, [pc, #312]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	4b4e      	ldr	r3, [pc, #312]	; (8005920 <HAL_RCC_OscConfig+0x830>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057f0:	3a01      	subs	r2, #1
 80057f2:	0112      	lsls	r2, r2, #4
 80057f4:	4311      	orrs	r1, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057fa:	0212      	lsls	r2, r2, #8
 80057fc:	4311      	orrs	r1, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005802:	0852      	lsrs	r2, r2, #1
 8005804:	3a01      	subs	r2, #1
 8005806:	0552      	lsls	r2, r2, #21
 8005808:	4311      	orrs	r1, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800580e:	0852      	lsrs	r2, r2, #1
 8005810:	3a01      	subs	r2, #1
 8005812:	0652      	lsls	r2, r2, #25
 8005814:	4311      	orrs	r1, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800581a:	06d2      	lsls	r2, r2, #27
 800581c:	430a      	orrs	r2, r1
 800581e:	493f      	ldr	r1, [pc, #252]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005820:	4313      	orrs	r3, r2
 8005822:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005824:	4b3d      	ldr	r3, [pc, #244]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a3c      	ldr	r2, [pc, #240]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 800582a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800582e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005830:	4b3a      	ldr	r3, [pc, #232]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4a39      	ldr	r2, [pc, #228]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800583a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800583c:	f7fc ff44 	bl	80026c8 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005844:	f7fc ff40 	bl	80026c8 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e067      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005856:	4b31      	ldr	r3, [pc, #196]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005862:	e05f      	b.n	8005924 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e05e      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005868:	4b2c      	ldr	r3, [pc, #176]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d157      	bne.n	8005924 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005874:	4b29      	ldr	r3, [pc, #164]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a28      	ldr	r2, [pc, #160]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 800587a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005880:	4b26      	ldr	r3, [pc, #152]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4a25      	ldr	r2, [pc, #148]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 8005886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800588a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800588c:	f7fc ff1c 	bl	80026c8 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005894:	f7fc ff18 	bl	80026c8 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e03f      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a6:	4b1d      	ldr	r3, [pc, #116]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x7a4>
 80058b2:	e037      	b.n	8005924 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b0c      	cmp	r3, #12
 80058b8:	d02d      	beq.n	8005916 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ba:	4b18      	ldr	r3, [pc, #96]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a17      	ldr	r2, [pc, #92]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80058c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d105      	bne.n	80058de <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	4a11      	ldr	r2, [pc, #68]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80058d8:	f023 0303 	bic.w	r3, r3, #3
 80058dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80058de:	4b0f      	ldr	r3, [pc, #60]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	4a0e      	ldr	r2, [pc, #56]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 80058e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80058e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fc feeb 	bl	80026c8 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f6:	f7fc fee7 	bl	80026c8 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e00e      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <HAL_RCC_OscConfig+0x82c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f0      	bne.n	80058f6 <HAL_RCC_OscConfig+0x806>
 8005914:	e006      	b.n	8005924 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e005      	b.n	8005926 <HAL_RCC_OscConfig+0x836>
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000
 8005920:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop

08005930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e0c8      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005944:	4b66      	ldr	r3, [pc, #408]	; (8005ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d910      	bls.n	8005974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005952:	4b63      	ldr	r3, [pc, #396]	; (8005ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 0207 	bic.w	r2, r3, #7
 800595a:	4961      	ldr	r1, [pc, #388]	; (8005ae0 <HAL_RCC_ClockConfig+0x1b0>)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	4313      	orrs	r3, r2
 8005960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005962:	4b5f      	ldr	r3, [pc, #380]	; (8005ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d001      	beq.n	8005974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0b0      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d04c      	beq.n	8005a1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b03      	cmp	r3, #3
 8005986:	d107      	bne.n	8005998 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005988:	4b56      	ldr	r3, [pc, #344]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d121      	bne.n	80059d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e09e      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d107      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a0:	4b50      	ldr	r3, [pc, #320]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d115      	bne.n	80059d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e092      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d107      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059b8:	4b4a      	ldr	r3, [pc, #296]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e086      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059c8:	4b46      	ldr	r3, [pc, #280]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e07e      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059d8:	4b42      	ldr	r3, [pc, #264]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f023 0203 	bic.w	r2, r3, #3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	493f      	ldr	r1, [pc, #252]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ea:	f7fc fe6d 	bl	80026c8 <HAL_GetTick>
 80059ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f0:	e00a      	b.n	8005a08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f2:	f7fc fe69 	bl	80026c8 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e066      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a08:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 020c 	and.w	r2, r3, #12
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d1eb      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a26:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	492c      	ldr	r1, [pc, #176]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a38:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d210      	bcs.n	8005a68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b26      	ldr	r3, [pc, #152]	; (8005ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 0207 	bic.w	r2, r3, #7
 8005a4e:	4924      	ldr	r1, [pc, #144]	; (8005ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b22      	ldr	r3, [pc, #136]	; (8005ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e036      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a74:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4918      	ldr	r1, [pc, #96]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a92:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4910      	ldr	r1, [pc, #64]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aa6:	f000 f825 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	490c      	ldr	r1, [pc, #48]	; (8005ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab8:	5ccb      	ldrb	r3, [r1, r3]
 8005aba:	f003 031f 	and.w	r3, r3, #31
 8005abe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fc f8f0 	bl	8001cb0 <HAL_InitTick>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40022000 	.word	0x40022000
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	0800cda0 	.word	0x0800cda0
 8005aec:	20000130 	.word	0x20000130
 8005af0:	20000134 	.word	0x20000134

08005af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	2300      	movs	r3, #0
 8005b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b02:	4b3e      	ldr	r3, [pc, #248]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b0c:	4b3b      	ldr	r3, [pc, #236]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0x34>
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d121      	bne.n	8005b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d11e      	bne.n	8005b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b28:	4b34      	ldr	r3, [pc, #208]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d107      	bne.n	8005b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b34:	4b31      	ldr	r3, [pc, #196]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	e005      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b44:	4b2d      	ldr	r3, [pc, #180]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b50:	4a2b      	ldr	r2, [pc, #172]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b64:	e00a      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d102      	bne.n	8005b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b6c:	4b25      	ldr	r3, [pc, #148]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	e004      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b78:	4b22      	ldr	r3, [pc, #136]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d134      	bne.n	8005bec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b82:	4b1e      	ldr	r3, [pc, #120]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d003      	beq.n	8005b9a <HAL_RCC_GetSysClockFreq+0xa6>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xac>
 8005b98:	e005      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b9a:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b9c:	617b      	str	r3, [r7, #20]
      break;
 8005b9e:	e005      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ba0:	4b18      	ldr	r3, [pc, #96]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ba2:	617b      	str	r3, [r7, #20]
      break;
 8005ba4:	e002      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	617b      	str	r3, [r7, #20]
      break;
 8005baa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	fb02 f203 	mul.w	r2, r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	0e5b      	lsrs	r3, r3, #25
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	3301      	adds	r3, #1
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005bec:	69bb      	ldr	r3, [r7, #24]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3724      	adds	r7, #36	; 0x24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	0800cdb8 	.word	0x0800cdb8
 8005c04:	00f42400 	.word	0x00f42400

08005c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c0c:	4b03      	ldr	r3, [pc, #12]	; (8005c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000130 	.word	0x20000130

08005c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c24:	f7ff fff0 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4904      	ldr	r1, [pc, #16]	; (8005c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40021000 	.word	0x40021000
 8005c48:	0800cdb0 	.word	0x0800cdb0

08005c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c50:	f7ff ffda 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8005c54:	4602      	mov	r2, r0
 8005c56:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	0adb      	lsrs	r3, r3, #11
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	4904      	ldr	r1, [pc, #16]	; (8005c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c62:	5ccb      	ldrb	r3, [r1, r3]
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000
 8005c74:	0800cdb0 	.word	0x0800cdb0

08005c78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	220f      	movs	r2, #15
 8005c86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005c88:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 0203 	and.w	r2, r3, #3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005c94:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005cac:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	08db      	lsrs	r3, r3, #3
 8005cb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <HAL_RCC_GetClockConfig+0x60>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0207 	and.w	r2, r3, #7
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	601a      	str	r2, [r3, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40022000 	.word	0x40022000

08005cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ce8:	4b2a      	ldr	r3, [pc, #168]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005cf4:	f7ff f998 	bl	8005028 <HAL_PWREx_GetVoltageRange>
 8005cf8:	6178      	str	r0, [r7, #20]
 8005cfa:	e014      	b.n	8005d26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cfc:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d00:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d06:	6593      	str	r3, [r2, #88]	; 0x58
 8005d08:	4b22      	ldr	r3, [pc, #136]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d14:	f7ff f988 	bl	8005028 <HAL_PWREx_GetVoltageRange>
 8005d18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d1a:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d2c:	d10b      	bne.n	8005d46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b80      	cmp	r3, #128	; 0x80
 8005d32:	d919      	bls.n	8005d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2ba0      	cmp	r3, #160	; 0xa0
 8005d38:	d902      	bls.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	e013      	b.n	8005d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d40:	2301      	movs	r3, #1
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	e010      	b.n	8005d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b80      	cmp	r3, #128	; 0x80
 8005d4a:	d902      	bls.n	8005d52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	e00a      	b.n	8005d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b80      	cmp	r3, #128	; 0x80
 8005d56:	d102      	bne.n	8005d5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d58:	2302      	movs	r3, #2
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	e004      	b.n	8005d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b70      	cmp	r3, #112	; 0x70
 8005d62:	d101      	bne.n	8005d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d64:	2301      	movs	r3, #1
 8005d66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f023 0207 	bic.w	r2, r3, #7
 8005d70:	4909      	ldr	r1, [pc, #36]	; (8005d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d78:	4b07      	ldr	r3, [pc, #28]	; (8005d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d001      	beq.n	8005d8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40021000 	.word	0x40021000
 8005d98:	40022000 	.word	0x40022000

08005d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005da4:	2300      	movs	r3, #0
 8005da6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005da8:	2300      	movs	r3, #0
 8005daa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d031      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dc0:	d01a      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005dc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dc6:	d814      	bhi.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d009      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dd0:	d10f      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005dd2:	4bac      	ldr	r3, [pc, #688]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	4aab      	ldr	r2, [pc, #684]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ddc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dde:	e00c      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 f9dc 	bl	80061a4 <RCCEx_PLLSAI1_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	74fb      	strb	r3, [r7, #19]
      break;
 8005df6:	e000      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dfa:	7cfb      	ldrb	r3, [r7, #19]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10b      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e00:	4ba0      	ldr	r3, [pc, #640]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0e:	499d      	ldr	r1, [pc, #628]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e16:	e001      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	7cfb      	ldrb	r3, [r7, #19]
 8005e1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8099 	beq.w	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e2e:	4b95      	ldr	r3, [pc, #596]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e44:	4b8f      	ldr	r3, [pc, #572]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	4a8e      	ldr	r2, [pc, #568]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e50:	4b8c      	ldr	r3, [pc, #560]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e60:	4b89      	ldr	r3, [pc, #548]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a88      	ldr	r2, [pc, #544]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e6c:	f7fc fc2c 	bl	80026c8 <HAL_GetTick>
 8005e70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e72:	e009      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e74:	f7fc fc28 	bl	80026c8 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d902      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	74fb      	strb	r3, [r7, #19]
        break;
 8005e86:	e005      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e88:	4b7f      	ldr	r3, [pc, #508]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ef      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d155      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e9a:	4b7a      	ldr	r3, [pc, #488]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01e      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d019      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005eb6:	4b73      	ldr	r3, [pc, #460]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ec2:	4b70      	ldr	r3, [pc, #448]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	4a6e      	ldr	r2, [pc, #440]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ed2:	4b6c      	ldr	r3, [pc, #432]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed8:	4a6a      	ldr	r2, [pc, #424]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ee2:	4a68      	ldr	r2, [pc, #416]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d016      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7fc fbe8 	bl	80026c8 <HAL_GetTick>
 8005ef8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005efa:	e00b      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efc:	f7fc fbe4 	bl	80026c8 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d902      	bls.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	74fb      	strb	r3, [r7, #19]
            break;
 8005f12:	e006      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f14:	4b5b      	ldr	r3, [pc, #364]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0ec      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005f22:	7cfb      	ldrb	r3, [r7, #19]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10b      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f28:	4b56      	ldr	r3, [pc, #344]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f36:	4953      	ldr	r1, [pc, #332]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f3e:	e004      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f40:	7cfb      	ldrb	r3, [r7, #19]
 8005f42:	74bb      	strb	r3, [r7, #18]
 8005f44:	e001      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f4a:	7c7b      	ldrb	r3, [r7, #17]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d105      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f50:	4b4c      	ldr	r3, [pc, #304]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f54:	4a4b      	ldr	r2, [pc, #300]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f68:	4b46      	ldr	r3, [pc, #280]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f023 0203 	bic.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	4943      	ldr	r1, [pc, #268]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f8a:	4b3e      	ldr	r3, [pc, #248]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	f023 020c 	bic.w	r2, r3, #12
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	493a      	ldr	r1, [pc, #232]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fac:	4b35      	ldr	r3, [pc, #212]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	4932      	ldr	r1, [pc, #200]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fce:	4b2d      	ldr	r3, [pc, #180]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	4929      	ldr	r1, [pc, #164]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ff0:	4b24      	ldr	r3, [pc, #144]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	4921      	ldr	r1, [pc, #132]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	4918      	ldr	r1, [pc, #96]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006034:	4b13      	ldr	r3, [pc, #76]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	4910      	ldr	r1, [pc, #64]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d02c      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006056:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	4907      	ldr	r1, [pc, #28]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006074:	d10a      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006076:	4b03      	ldr	r3, [pc, #12]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	4a02      	ldr	r2, [pc, #8]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800607c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006080:	60d3      	str	r3, [r2, #12]
 8006082:	e015      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006084:	40021000 	.word	0x40021000
 8006088:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006094:	d10c      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3304      	adds	r3, #4
 800609a:	2101      	movs	r1, #1
 800609c:	4618      	mov	r0, r3
 800609e:	f000 f881 	bl	80061a4 <RCCEx_PLLSAI1_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060a6:	7cfb      	ldrb	r3, [r7, #19]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80060ac:	7cfb      	ldrb	r3, [r7, #19]
 80060ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d028      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060bc:	4b30      	ldr	r3, [pc, #192]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	492d      	ldr	r1, [pc, #180]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060da:	d106      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060dc:	4b28      	ldr	r3, [pc, #160]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	4a27      	ldr	r2, [pc, #156]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060e6:	60d3      	str	r3, [r2, #12]
 80060e8:	e011      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060f2:	d10c      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3304      	adds	r3, #4
 80060f8:	2101      	movs	r1, #1
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f852 	bl	80061a4 <RCCEx_PLLSAI1_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006104:	7cfb      	ldrb	r3, [r7, #19]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800610a:	7cfb      	ldrb	r3, [r7, #19]
 800610c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01c      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800611a:	4b19      	ldr	r3, [pc, #100]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006120:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006128:	4915      	ldr	r1, [pc, #84]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006138:	d10c      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	2102      	movs	r1, #2
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f82f 	bl	80061a4 <RCCEx_PLLSAI1_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006150:	7cfb      	ldrb	r3, [r7, #19]
 8006152:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006160:	4b07      	ldr	r3, [pc, #28]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616e:	4904      	ldr	r1, [pc, #16]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006176:	7cbb      	ldrb	r3, [r7, #18]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40021000 	.word	0x40021000

08006184 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a04      	ldr	r2, [pc, #16]	; (80061a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800618e:	f043 0304 	orr.w	r3, r3, #4
 8006192:	6013      	str	r3, [r2, #0]
}
 8006194:	bf00      	nop
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40021000 	.word	0x40021000

080061a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061b2:	4b74      	ldr	r3, [pc, #464]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d018      	beq.n	80061f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80061be:	4b71      	ldr	r3, [pc, #452]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f003 0203 	and.w	r2, r3, #3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d10d      	bne.n	80061ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
       ||
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80061d6:	4b6b      	ldr	r3, [pc, #428]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	091b      	lsrs	r3, r3, #4
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
       ||
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d047      	beq.n	800627a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	73fb      	strb	r3, [r7, #15]
 80061ee:	e044      	b.n	800627a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d018      	beq.n	800622a <RCCEx_PLLSAI1_Config+0x86>
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d825      	bhi.n	8006248 <RCCEx_PLLSAI1_Config+0xa4>
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d002      	beq.n	8006206 <RCCEx_PLLSAI1_Config+0x62>
 8006200:	2b02      	cmp	r3, #2
 8006202:	d009      	beq.n	8006218 <RCCEx_PLLSAI1_Config+0x74>
 8006204:	e020      	b.n	8006248 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006206:	4b5f      	ldr	r3, [pc, #380]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d11d      	bne.n	800624e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006216:	e01a      	b.n	800624e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006218:	4b5a      	ldr	r3, [pc, #360]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006220:	2b00      	cmp	r3, #0
 8006222:	d116      	bne.n	8006252 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006228:	e013      	b.n	8006252 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800622a:	4b56      	ldr	r3, [pc, #344]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10f      	bne.n	8006256 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006236:	4b53      	ldr	r3, [pc, #332]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006246:	e006      	b.n	8006256 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
      break;
 800624c:	e004      	b.n	8006258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800624e:	bf00      	nop
 8006250:	e002      	b.n	8006258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006252:	bf00      	nop
 8006254:	e000      	b.n	8006258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006256:	bf00      	nop
    }

    if(status == HAL_OK)
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10d      	bne.n	800627a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800625e:	4b49      	ldr	r3, [pc, #292]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6819      	ldr	r1, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	3b01      	subs	r3, #1
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	430b      	orrs	r3, r1
 8006274:	4943      	ldr	r1, [pc, #268]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006276:	4313      	orrs	r3, r2
 8006278:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d17c      	bne.n	800637a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006280:	4b40      	ldr	r3, [pc, #256]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a3f      	ldr	r2, [pc, #252]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800628a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800628c:	f7fc fa1c 	bl	80026c8 <HAL_GetTick>
 8006290:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006292:	e009      	b.n	80062a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006294:	f7fc fa18 	bl	80026c8 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d902      	bls.n	80062a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	73fb      	strb	r3, [r7, #15]
        break;
 80062a6:	e005      	b.n	80062b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062a8:	4b36      	ldr	r3, [pc, #216]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1ef      	bne.n	8006294 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d15f      	bne.n	800637a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d110      	bne.n	80062e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062c0:	4b30      	ldr	r3, [pc, #192]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80062c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6892      	ldr	r2, [r2, #8]
 80062d0:	0211      	lsls	r1, r2, #8
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68d2      	ldr	r2, [r2, #12]
 80062d6:	06d2      	lsls	r2, r2, #27
 80062d8:	430a      	orrs	r2, r1
 80062da:	492a      	ldr	r1, [pc, #168]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	610b      	str	r3, [r1, #16]
 80062e0:	e027      	b.n	8006332 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d112      	bne.n	800630e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062e8:	4b26      	ldr	r3, [pc, #152]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80062f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6892      	ldr	r2, [r2, #8]
 80062f8:	0211      	lsls	r1, r2, #8
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6912      	ldr	r2, [r2, #16]
 80062fe:	0852      	lsrs	r2, r2, #1
 8006300:	3a01      	subs	r2, #1
 8006302:	0552      	lsls	r2, r2, #21
 8006304:	430a      	orrs	r2, r1
 8006306:	491f      	ldr	r1, [pc, #124]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006308:	4313      	orrs	r3, r2
 800630a:	610b      	str	r3, [r1, #16]
 800630c:	e011      	b.n	8006332 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006316:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6892      	ldr	r2, [r2, #8]
 800631e:	0211      	lsls	r1, r2, #8
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6952      	ldr	r2, [r2, #20]
 8006324:	0852      	lsrs	r2, r2, #1
 8006326:	3a01      	subs	r2, #1
 8006328:	0652      	lsls	r2, r2, #25
 800632a:	430a      	orrs	r2, r1
 800632c:	4915      	ldr	r1, [pc, #84]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800632e:	4313      	orrs	r3, r2
 8006330:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a13      	ldr	r2, [pc, #76]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006338:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800633c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800633e:	f7fc f9c3 	bl	80026c8 <HAL_GetTick>
 8006342:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006344:	e009      	b.n	800635a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006346:	f7fc f9bf 	bl	80026c8 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d902      	bls.n	800635a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	73fb      	strb	r3, [r7, #15]
          break;
 8006358:	e005      	b.n	8006366 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800635a:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0ef      	beq.n	8006346 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d106      	bne.n	800637a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	4903      	ldr	r1, [pc, #12]	; (8006384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006376:	4313      	orrs	r3, r2
 8006378:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40021000 	.word	0x40021000

08006388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e049      	b.n	800642e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f841 	bl	8006436 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f000 fb42 	bl	8006a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d001      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e03b      	b.n	80064dc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a19      	ldr	r2, [pc, #100]	; (80064e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_TIM_Base_Start_IT+0x4e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648e:	d004      	beq.n	800649a <HAL_TIM_Base_Start_IT+0x4e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a15      	ldr	r2, [pc, #84]	; (80064ec <HAL_TIM_Base_Start_IT+0xa0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d115      	bne.n	80064c6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <HAL_TIM_Base_Start_IT+0xa4>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b06      	cmp	r3, #6
 80064aa:	d015      	beq.n	80064d8 <HAL_TIM_Base_Start_IT+0x8c>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b2:	d011      	beq.n	80064d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c4:	e008      	b.n	80064d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e000      	b.n	80064da <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	40014000 	.word	0x40014000
 80064f0:	00010007 	.word	0x00010007

080064f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e049      	b.n	800659a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fb fe8c 	bl	8002238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f000 fa8c 	bl	8006a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d122      	bne.n	80065fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d11b      	bne.n	80065fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f06f 0202 	mvn.w	r2, #2
 80065ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fa15 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 80065ea:	e005      	b.n	80065f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fa07 	bl	8006a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa18 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b04      	cmp	r3, #4
 800660a:	d122      	bne.n	8006652 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b04      	cmp	r3, #4
 8006618:	d11b      	bne.n	8006652 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f06f 0204 	mvn.w	r2, #4
 8006622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f9eb 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 800663e:	e005      	b.n	800664c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f9dd 	bl	8006a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9ee 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b08      	cmp	r3, #8
 800665e:	d122      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b08      	cmp	r3, #8
 800666c:	d11b      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f06f 0208 	mvn.w	r2, #8
 8006676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2204      	movs	r2, #4
 800667c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f9c1 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 8006692:	e005      	b.n	80066a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f9b3 	bl	8006a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9c4 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d122      	bne.n	80066fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b10      	cmp	r3, #16
 80066c0:	d11b      	bne.n	80066fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0210 	mvn.w	r2, #16
 80066ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2208      	movs	r2, #8
 80066d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f997 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 80066e6:	e005      	b.n	80066f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f989 	bl	8006a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f99a 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d10e      	bne.n	8006726 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b01      	cmp	r3, #1
 8006714:	d107      	bne.n	8006726 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f06f 0201 	mvn.w	r2, #1
 800671e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fb fa87 	bl	8001c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006730:	2b80      	cmp	r3, #128	; 0x80
 8006732:	d10e      	bne.n	8006752 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673e:	2b80      	cmp	r3, #128	; 0x80
 8006740:	d107      	bne.n	8006752 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800674a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fd49 	bl	80071e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006760:	d10e      	bne.n	8006780 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676c:	2b80      	cmp	r3, #128	; 0x80
 800676e:	d107      	bne.n	8006780 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fd3c 	bl	80071f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d10e      	bne.n	80067ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d107      	bne.n	80067ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f948 	bl	8006a3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d10e      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d107      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0220 	mvn.w	r2, #32
 80067d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fcfc 	bl	80071d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e0fd      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b14      	cmp	r3, #20
 8006806:	f200 80f0 	bhi.w	80069ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800680a:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006865 	.word	0x08006865
 8006814:	080069eb 	.word	0x080069eb
 8006818:	080069eb 	.word	0x080069eb
 800681c:	080069eb 	.word	0x080069eb
 8006820:	080068a5 	.word	0x080068a5
 8006824:	080069eb 	.word	0x080069eb
 8006828:	080069eb 	.word	0x080069eb
 800682c:	080069eb 	.word	0x080069eb
 8006830:	080068e7 	.word	0x080068e7
 8006834:	080069eb 	.word	0x080069eb
 8006838:	080069eb 	.word	0x080069eb
 800683c:	080069eb 	.word	0x080069eb
 8006840:	08006927 	.word	0x08006927
 8006844:	080069eb 	.word	0x080069eb
 8006848:	080069eb 	.word	0x080069eb
 800684c:	080069eb 	.word	0x080069eb
 8006850:	08006969 	.word	0x08006969
 8006854:	080069eb 	.word	0x080069eb
 8006858:	080069eb 	.word	0x080069eb
 800685c:	080069eb 	.word	0x080069eb
 8006860:	080069a9 	.word	0x080069a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f954 	bl	8006b18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0208 	orr.w	r2, r2, #8
 800687e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0204 	bic.w	r2, r2, #4
 800688e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6999      	ldr	r1, [r3, #24]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	619a      	str	r2, [r3, #24]
      break;
 80068a2:	e0a3      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f9b0 	bl	8006c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6999      	ldr	r1, [r3, #24]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	021a      	lsls	r2, r3, #8
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	619a      	str	r2, [r3, #24]
      break;
 80068e4:	e082      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fa09 	bl	8006d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0208 	orr.w	r2, r2, #8
 8006900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0204 	bic.w	r2, r2, #4
 8006910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69d9      	ldr	r1, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	61da      	str	r2, [r3, #28]
      break;
 8006924:	e062      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fa61 	bl	8006df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69d9      	ldr	r1, [r3, #28]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	021a      	lsls	r2, r3, #8
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	61da      	str	r2, [r3, #28]
      break;
 8006966:	e041      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fa9e 	bl	8006eb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0208 	orr.w	r2, r2, #8
 8006982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0204 	bic.w	r2, r2, #4
 8006992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069a6:	e021      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fad6 	bl	8006f60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	021a      	lsls	r2, r3, #8
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069e8:	e000      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80069ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop

08006a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a2a      	ldr	r2, [pc, #168]	; (8006b0c <TIM_Base_SetConfig+0xbc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_Base_SetConfig+0x20>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6e:	d108      	bne.n	8006a82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a21      	ldr	r2, [pc, #132]	; (8006b0c <TIM_Base_SetConfig+0xbc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00b      	beq.n	8006aa2 <TIM_Base_SetConfig+0x52>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a90:	d007      	beq.n	8006aa2 <TIM_Base_SetConfig+0x52>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <TIM_Base_SetConfig+0xc0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d003      	beq.n	8006aa2 <TIM_Base_SetConfig+0x52>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <TIM_Base_SetConfig+0xc4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d108      	bne.n	8006ab4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a0c      	ldr	r2, [pc, #48]	; (8006b0c <TIM_Base_SetConfig+0xbc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <TIM_Base_SetConfig+0xa0>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <TIM_Base_SetConfig+0xc0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_Base_SetConfig+0xa0>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a0a      	ldr	r2, [pc, #40]	; (8006b14 <TIM_Base_SetConfig+0xc4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d103      	bne.n	8006af8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	615a      	str	r2, [r3, #20]
}
 8006afe:	bf00      	nop
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40014000 	.word	0x40014000
 8006b14:	40014400 	.word	0x40014400

08006b18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f023 0201 	bic.w	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0302 	bic.w	r3, r3, #2
 8006b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a24      	ldr	r2, [pc, #144]	; (8006c04 <TIM_OC1_SetConfig+0xec>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d007      	beq.n	8006b88 <TIM_OC1_SetConfig+0x70>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a23      	ldr	r2, [pc, #140]	; (8006c08 <TIM_OC1_SetConfig+0xf0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_OC1_SetConfig+0x70>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <TIM_OC1_SetConfig+0xf4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d10c      	bne.n	8006ba2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f023 0308 	bic.w	r3, r3, #8
 8006b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f023 0304 	bic.w	r3, r3, #4
 8006ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a17      	ldr	r2, [pc, #92]	; (8006c04 <TIM_OC1_SetConfig+0xec>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <TIM_OC1_SetConfig+0xa2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <TIM_OC1_SetConfig+0xf0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_OC1_SetConfig+0xa2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <TIM_OC1_SetConfig+0xf4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d111      	bne.n	8006bde <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	621a      	str	r2, [r3, #32]
}
 8006bf8:	bf00      	nop
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40014000 	.word	0x40014000
 8006c0c:	40014400 	.word	0x40014400

08006c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	f023 0210 	bic.w	r2, r3, #16
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f023 0320 	bic.w	r3, r3, #32
 8006c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a22      	ldr	r2, [pc, #136]	; (8006cf8 <TIM_OC2_SetConfig+0xe8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d10d      	bne.n	8006c90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <TIM_OC2_SetConfig+0xe8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d007      	beq.n	8006ca8 <TIM_OC2_SetConfig+0x98>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a18      	ldr	r2, [pc, #96]	; (8006cfc <TIM_OC2_SetConfig+0xec>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d003      	beq.n	8006ca8 <TIM_OC2_SetConfig+0x98>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a17      	ldr	r2, [pc, #92]	; (8006d00 <TIM_OC2_SetConfig+0xf0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d113      	bne.n	8006cd0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	621a      	str	r2, [r3, #32]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	40014400 	.word	0x40014400

08006d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a21      	ldr	r2, [pc, #132]	; (8006de8 <TIM_OC3_SetConfig+0xe4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d10d      	bne.n	8006d82 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a18      	ldr	r2, [pc, #96]	; (8006de8 <TIM_OC3_SetConfig+0xe4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d007      	beq.n	8006d9a <TIM_OC3_SetConfig+0x96>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a17      	ldr	r2, [pc, #92]	; (8006dec <TIM_OC3_SetConfig+0xe8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d003      	beq.n	8006d9a <TIM_OC3_SetConfig+0x96>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a16      	ldr	r2, [pc, #88]	; (8006df0 <TIM_OC3_SetConfig+0xec>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d113      	bne.n	8006dc2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	621a      	str	r2, [r3, #32]
}
 8006ddc:	bf00      	nop
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400

08006df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <TIM_OC4_SetConfig+0xb0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_OC4_SetConfig+0x74>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a13      	ldr	r2, [pc, #76]	; (8006ea8 <TIM_OC4_SetConfig+0xb4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_OC4_SetConfig+0x74>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a12      	ldr	r2, [pc, #72]	; (8006eac <TIM_OC4_SetConfig+0xb8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d109      	bne.n	8006e7c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	019b      	lsls	r3, r3, #6
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	40012c00 	.word	0x40012c00
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40014400 	.word	0x40014400

08006eb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ef4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	041b      	lsls	r3, r3, #16
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <TIM_OC5_SetConfig+0xa4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d007      	beq.n	8006f1a <TIM_OC5_SetConfig+0x6a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a12      	ldr	r2, [pc, #72]	; (8006f58 <TIM_OC5_SetConfig+0xa8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC5_SetConfig+0x6a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a11      	ldr	r2, [pc, #68]	; (8006f5c <TIM_OC5_SetConfig+0xac>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d109      	bne.n	8006f2e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40014400 	.word	0x40014400

08006f60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	051b      	lsls	r3, r3, #20
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a14      	ldr	r2, [pc, #80]	; (8007008 <TIM_OC6_SetConfig+0xa8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d007      	beq.n	8006fcc <TIM_OC6_SetConfig+0x6c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a13      	ldr	r2, [pc, #76]	; (800700c <TIM_OC6_SetConfig+0xac>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC6_SetConfig+0x6c>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a12      	ldr	r2, [pc, #72]	; (8007010 <TIM_OC6_SetConfig+0xb0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d109      	bne.n	8006fe0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40014000 	.word	0x40014000
 8007010:	40014400 	.word	0x40014400

08007014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007028:	2302      	movs	r3, #2
 800702a:	e04f      	b.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a21      	ldr	r2, [pc, #132]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d108      	bne.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800705c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a14      	ldr	r2, [pc, #80]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d009      	beq.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007094:	d004      	beq.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a10      	ldr	r2, [pc, #64]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d10c      	bne.n	80070ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40014000 	.word	0x40014000

080070e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e060      	b.n	80071be <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a14      	ldr	r2, [pc, #80]	; (80071cc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d115      	bne.n	80071ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	051b      	lsls	r3, r3, #20
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40012c00 	.word	0x40012c00

080071d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e040      	b.n	80072a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fb f8c2 	bl	80023b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2224      	movs	r2, #36	; 0x24
 8007238:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0201 	bic.w	r2, r2, #1
 8007248:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f82c 	bl	80072a8 <UART_SetConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e022      	b.n	80072a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fa2c 	bl	80076c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fab3 	bl	8007804 <UART_CheckIdleState>
 800729e:	4603      	mov	r3, r0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a8:	b5b0      	push	{r4, r5, r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4baf      	ldr	r3, [pc, #700]	; (8007590 <UART_SetConfig+0x2e8>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	69f9      	ldr	r1, [r7, #28]
 80072dc:	430b      	orrs	r3, r1
 80072de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4aa4      	ldr	r2, [pc, #656]	; (8007594 <UART_SetConfig+0x2ec>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	4313      	orrs	r3, r2
 800730e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	430a      	orrs	r2, r1
 8007322:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a9b      	ldr	r2, [pc, #620]	; (8007598 <UART_SetConfig+0x2f0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d121      	bne.n	8007372 <UART_SetConfig+0xca>
 800732e:	4b9b      	ldr	r3, [pc, #620]	; (800759c <UART_SetConfig+0x2f4>)
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	2b03      	cmp	r3, #3
 800733a:	d817      	bhi.n	800736c <UART_SetConfig+0xc4>
 800733c:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <UART_SetConfig+0x9c>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007355 	.word	0x08007355
 8007348:	08007361 	.word	0x08007361
 800734c:	0800735b 	.word	0x0800735b
 8007350:	08007367 	.word	0x08007367
 8007354:	2301      	movs	r3, #1
 8007356:	76fb      	strb	r3, [r7, #27]
 8007358:	e070      	b.n	800743c <UART_SetConfig+0x194>
 800735a:	2302      	movs	r3, #2
 800735c:	76fb      	strb	r3, [r7, #27]
 800735e:	e06d      	b.n	800743c <UART_SetConfig+0x194>
 8007360:	2304      	movs	r3, #4
 8007362:	76fb      	strb	r3, [r7, #27]
 8007364:	e06a      	b.n	800743c <UART_SetConfig+0x194>
 8007366:	2308      	movs	r3, #8
 8007368:	76fb      	strb	r3, [r7, #27]
 800736a:	e067      	b.n	800743c <UART_SetConfig+0x194>
 800736c:	2310      	movs	r3, #16
 800736e:	76fb      	strb	r3, [r7, #27]
 8007370:	e064      	b.n	800743c <UART_SetConfig+0x194>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a8a      	ldr	r2, [pc, #552]	; (80075a0 <UART_SetConfig+0x2f8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d132      	bne.n	80073e2 <UART_SetConfig+0x13a>
 800737c:	4b87      	ldr	r3, [pc, #540]	; (800759c <UART_SetConfig+0x2f4>)
 800737e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007382:	f003 030c 	and.w	r3, r3, #12
 8007386:	2b0c      	cmp	r3, #12
 8007388:	d828      	bhi.n	80073dc <UART_SetConfig+0x134>
 800738a:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0xe8>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	080073c5 	.word	0x080073c5
 8007394:	080073dd 	.word	0x080073dd
 8007398:	080073dd 	.word	0x080073dd
 800739c:	080073dd 	.word	0x080073dd
 80073a0:	080073d1 	.word	0x080073d1
 80073a4:	080073dd 	.word	0x080073dd
 80073a8:	080073dd 	.word	0x080073dd
 80073ac:	080073dd 	.word	0x080073dd
 80073b0:	080073cb 	.word	0x080073cb
 80073b4:	080073dd 	.word	0x080073dd
 80073b8:	080073dd 	.word	0x080073dd
 80073bc:	080073dd 	.word	0x080073dd
 80073c0:	080073d7 	.word	0x080073d7
 80073c4:	2300      	movs	r3, #0
 80073c6:	76fb      	strb	r3, [r7, #27]
 80073c8:	e038      	b.n	800743c <UART_SetConfig+0x194>
 80073ca:	2302      	movs	r3, #2
 80073cc:	76fb      	strb	r3, [r7, #27]
 80073ce:	e035      	b.n	800743c <UART_SetConfig+0x194>
 80073d0:	2304      	movs	r3, #4
 80073d2:	76fb      	strb	r3, [r7, #27]
 80073d4:	e032      	b.n	800743c <UART_SetConfig+0x194>
 80073d6:	2308      	movs	r3, #8
 80073d8:	76fb      	strb	r3, [r7, #27]
 80073da:	e02f      	b.n	800743c <UART_SetConfig+0x194>
 80073dc:	2310      	movs	r3, #16
 80073de:	76fb      	strb	r3, [r7, #27]
 80073e0:	e02c      	b.n	800743c <UART_SetConfig+0x194>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a6b      	ldr	r2, [pc, #428]	; (8007594 <UART_SetConfig+0x2ec>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d125      	bne.n	8007438 <UART_SetConfig+0x190>
 80073ec:	4b6b      	ldr	r3, [pc, #428]	; (800759c <UART_SetConfig+0x2f4>)
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073fa:	d017      	beq.n	800742c <UART_SetConfig+0x184>
 80073fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007400:	d817      	bhi.n	8007432 <UART_SetConfig+0x18a>
 8007402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007406:	d00b      	beq.n	8007420 <UART_SetConfig+0x178>
 8007408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800740c:	d811      	bhi.n	8007432 <UART_SetConfig+0x18a>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <UART_SetConfig+0x172>
 8007412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007416:	d006      	beq.n	8007426 <UART_SetConfig+0x17e>
 8007418:	e00b      	b.n	8007432 <UART_SetConfig+0x18a>
 800741a:	2300      	movs	r3, #0
 800741c:	76fb      	strb	r3, [r7, #27]
 800741e:	e00d      	b.n	800743c <UART_SetConfig+0x194>
 8007420:	2302      	movs	r3, #2
 8007422:	76fb      	strb	r3, [r7, #27]
 8007424:	e00a      	b.n	800743c <UART_SetConfig+0x194>
 8007426:	2304      	movs	r3, #4
 8007428:	76fb      	strb	r3, [r7, #27]
 800742a:	e007      	b.n	800743c <UART_SetConfig+0x194>
 800742c:	2308      	movs	r3, #8
 800742e:	76fb      	strb	r3, [r7, #27]
 8007430:	e004      	b.n	800743c <UART_SetConfig+0x194>
 8007432:	2310      	movs	r3, #16
 8007434:	76fb      	strb	r3, [r7, #27]
 8007436:	e001      	b.n	800743c <UART_SetConfig+0x194>
 8007438:	2310      	movs	r3, #16
 800743a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a54      	ldr	r2, [pc, #336]	; (8007594 <UART_SetConfig+0x2ec>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d173      	bne.n	800752e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007446:	7efb      	ldrb	r3, [r7, #27]
 8007448:	2b08      	cmp	r3, #8
 800744a:	d824      	bhi.n	8007496 <UART_SetConfig+0x1ee>
 800744c:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x1ac>)
 800744e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007452:	bf00      	nop
 8007454:	08007479 	.word	0x08007479
 8007458:	08007497 	.word	0x08007497
 800745c:	08007481 	.word	0x08007481
 8007460:	08007497 	.word	0x08007497
 8007464:	08007487 	.word	0x08007487
 8007468:	08007497 	.word	0x08007497
 800746c:	08007497 	.word	0x08007497
 8007470:	08007497 	.word	0x08007497
 8007474:	0800748f 	.word	0x0800748f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007478:	f7fe fbd2 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 800747c:	6178      	str	r0, [r7, #20]
        break;
 800747e:	e00f      	b.n	80074a0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007480:	4b48      	ldr	r3, [pc, #288]	; (80075a4 <UART_SetConfig+0x2fc>)
 8007482:	617b      	str	r3, [r7, #20]
        break;
 8007484:	e00c      	b.n	80074a0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007486:	f7fe fb35 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 800748a:	6178      	str	r0, [r7, #20]
        break;
 800748c:	e008      	b.n	80074a0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007492:	617b      	str	r3, [r7, #20]
        break;
 8007494:	e004      	b.n	80074a0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	76bb      	strb	r3, [r7, #26]
        break;
 800749e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80fe 	beq.w	80076a4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d305      	bcc.n	80074c4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d902      	bls.n	80074ca <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	76bb      	strb	r3, [r7, #26]
 80074c8:	e0ec      	b.n	80076a4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f04f 0100 	mov.w	r1, #0
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	020b      	lsls	r3, r1, #8
 80074dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074e0:	0202      	lsls	r2, r0, #8
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	6849      	ldr	r1, [r1, #4]
 80074e6:	0849      	lsrs	r1, r1, #1
 80074e8:	4608      	mov	r0, r1
 80074ea:	f04f 0100 	mov.w	r1, #0
 80074ee:	1814      	adds	r4, r2, r0
 80074f0:	eb43 0501 	adc.w	r5, r3, r1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	461a      	mov	r2, r3
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f9 fb71 	bl	8000be8 <__aeabi_uldivmod>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4613      	mov	r3, r2
 800750c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007514:	d308      	bcc.n	8007528 <UART_SetConfig+0x280>
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751c:	d204      	bcs.n	8007528 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	60da      	str	r2, [r3, #12]
 8007526:	e0bd      	b.n	80076a4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	76bb      	strb	r3, [r7, #26]
 800752c:	e0ba      	b.n	80076a4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007536:	d168      	bne.n	800760a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8007538:	7efb      	ldrb	r3, [r7, #27]
 800753a:	2b08      	cmp	r3, #8
 800753c:	d834      	bhi.n	80075a8 <UART_SetConfig+0x300>
 800753e:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <UART_SetConfig+0x29c>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	08007569 	.word	0x08007569
 8007548:	08007571 	.word	0x08007571
 800754c:	08007579 	.word	0x08007579
 8007550:	080075a9 	.word	0x080075a9
 8007554:	0800757f 	.word	0x0800757f
 8007558:	080075a9 	.word	0x080075a9
 800755c:	080075a9 	.word	0x080075a9
 8007560:	080075a9 	.word	0x080075a9
 8007564:	08007587 	.word	0x08007587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007568:	f7fe fb5a 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 800756c:	6178      	str	r0, [r7, #20]
        break;
 800756e:	e020      	b.n	80075b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007570:	f7fe fb6c 	bl	8005c4c <HAL_RCC_GetPCLK2Freq>
 8007574:	6178      	str	r0, [r7, #20]
        break;
 8007576:	e01c      	b.n	80075b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <UART_SetConfig+0x2fc>)
 800757a:	617b      	str	r3, [r7, #20]
        break;
 800757c:	e019      	b.n	80075b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757e:	f7fe fab9 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8007582:	6178      	str	r0, [r7, #20]
        break;
 8007584:	e015      	b.n	80075b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800758a:	617b      	str	r3, [r7, #20]
        break;
 800758c:	e011      	b.n	80075b2 <UART_SetConfig+0x30a>
 800758e:	bf00      	nop
 8007590:	efff69f3 	.word	0xefff69f3
 8007594:	40008000 	.word	0x40008000
 8007598:	40013800 	.word	0x40013800
 800759c:	40021000 	.word	0x40021000
 80075a0:	40004400 	.word	0x40004400
 80075a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	76bb      	strb	r3, [r7, #26]
        break;
 80075b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d075      	beq.n	80076a4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	005a      	lsls	r2, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	441a      	add	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b0f      	cmp	r3, #15
 80075d4:	d916      	bls.n	8007604 <UART_SetConfig+0x35c>
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075dc:	d212      	bcs.n	8007604 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f023 030f 	bic.w	r3, r3, #15
 80075e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	89fb      	ldrh	r3, [r7, #14]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	89fa      	ldrh	r2, [r7, #14]
 8007600:	60da      	str	r2, [r3, #12]
 8007602:	e04f      	b.n	80076a4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	76bb      	strb	r3, [r7, #26]
 8007608:	e04c      	b.n	80076a4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800760a:	7efb      	ldrb	r3, [r7, #27]
 800760c:	2b08      	cmp	r3, #8
 800760e:	d828      	bhi.n	8007662 <UART_SetConfig+0x3ba>
 8007610:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <UART_SetConfig+0x370>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	0800763d 	.word	0x0800763d
 800761c:	08007645 	.word	0x08007645
 8007620:	0800764d 	.word	0x0800764d
 8007624:	08007663 	.word	0x08007663
 8007628:	08007653 	.word	0x08007653
 800762c:	08007663 	.word	0x08007663
 8007630:	08007663 	.word	0x08007663
 8007634:	08007663 	.word	0x08007663
 8007638:	0800765b 	.word	0x0800765b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800763c:	f7fe faf0 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 8007640:	6178      	str	r0, [r7, #20]
        break;
 8007642:	e013      	b.n	800766c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007644:	f7fe fb02 	bl	8005c4c <HAL_RCC_GetPCLK2Freq>
 8007648:	6178      	str	r0, [r7, #20]
        break;
 800764a:	e00f      	b.n	800766c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800764c:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <UART_SetConfig+0x414>)
 800764e:	617b      	str	r3, [r7, #20]
        break;
 8007650:	e00c      	b.n	800766c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007652:	f7fe fa4f 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8007656:	6178      	str	r0, [r7, #20]
        break;
 8007658:	e008      	b.n	800766c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800765a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765e:	617b      	str	r3, [r7, #20]
        break;
 8007660:	e004      	b.n	800766c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	76bb      	strb	r3, [r7, #26]
        break;
 800766a:	bf00      	nop
    }

    if (pclk != 0U)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d018      	beq.n	80076a4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	085a      	lsrs	r2, r3, #1
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	441a      	add	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	fbb2 f3f3 	udiv	r3, r2, r3
 8007684:	b29b      	uxth	r3, r3
 8007686:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	2b0f      	cmp	r3, #15
 800768c:	d908      	bls.n	80076a0 <UART_SetConfig+0x3f8>
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007694:	d204      	bcs.n	80076a0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	60da      	str	r2, [r3, #12]
 800769e:	e001      	b.n	80076a4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bdb0      	pop	{r4, r5, r7, pc}
 80076ba:	bf00      	nop
 80076bc:	00f42400 	.word	0x00f42400

080076c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	f003 0310 	and.w	r3, r3, #16
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01a      	beq.n	80077d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077be:	d10a      	bne.n	80077d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	605a      	str	r2, [r3, #4]
  }
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af02      	add	r7, sp, #8
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007814:	f7fa ff58 	bl	80026c8 <HAL_GetTick>
 8007818:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b08      	cmp	r3, #8
 8007826:	d10e      	bne.n	8007846 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f82d 	bl	8007896 <UART_WaitOnFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e023      	b.n	800788e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b04      	cmp	r3, #4
 8007852:	d10e      	bne.n	8007872 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f817 	bl	8007896 <UART_WaitOnFlagUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e00d      	b.n	800788e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	603b      	str	r3, [r7, #0]
 80078a2:	4613      	mov	r3, r2
 80078a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a6:	e05e      	b.n	8007966 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ae:	d05a      	beq.n	8007966 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b0:	f7fa ff0a 	bl	80026c8 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d302      	bcc.n	80078c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d11b      	bne.n	80078fe <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0201 	bic.w	r2, r2, #1
 80078e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e043      	b.n	8007986 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d02c      	beq.n	8007966 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800791a:	d124      	bne.n	8007966 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007924:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007934:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0201 	bic.w	r2, r2, #1
 8007944:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2220      	movs	r2, #32
 800794a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2220      	movs	r2, #32
 8007950:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2220      	movs	r2, #32
 8007956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e00f      	b.n	8007986 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69da      	ldr	r2, [r3, #28]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4013      	ands	r3, r2
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	429a      	cmp	r2, r3
 8007974:	bf0c      	ite	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	2300      	movne	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	429a      	cmp	r2, r3
 8007982:	d091      	beq.n	80078a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <__NVIC_SetPriority>:
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	6039      	str	r1, [r7, #0]
 800799a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800799c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	db0a      	blt.n	80079ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	490c      	ldr	r1, [pc, #48]	; (80079dc <__NVIC_SetPriority+0x4c>)
 80079aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ae:	0112      	lsls	r2, r2, #4
 80079b0:	b2d2      	uxtb	r2, r2
 80079b2:	440b      	add	r3, r1
 80079b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80079b8:	e00a      	b.n	80079d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	4908      	ldr	r1, [pc, #32]	; (80079e0 <__NVIC_SetPriority+0x50>)
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	3b04      	subs	r3, #4
 80079c8:	0112      	lsls	r2, r2, #4
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	440b      	add	r3, r1
 80079ce:	761a      	strb	r2, [r3, #24]
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	e000e100 	.word	0xe000e100
 80079e0:	e000ed00 	.word	0xe000ed00

080079e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80079e8:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <SysTick_Handler+0x1c>)
 80079ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80079ec:	f001 fcfe 	bl	80093ec <xTaskGetSchedulerState>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d001      	beq.n	80079fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80079f6:	f002 fae7 	bl	8009fc8 <xPortSysTickHandler>
  }
}
 80079fa:	bf00      	nop
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	e000e010 	.word	0xe000e010

08007a04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a08:	2100      	movs	r1, #0
 8007a0a:	f06f 0004 	mvn.w	r0, #4
 8007a0e:	f7ff ffbf 	bl	8007990 <__NVIC_SetPriority>
#endif
}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a1e:	f3ef 8305 	mrs	r3, IPSR
 8007a22:	603b      	str	r3, [r7, #0]
  return(result);
 8007a24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a2a:	f06f 0305 	mvn.w	r3, #5
 8007a2e:	607b      	str	r3, [r7, #4]
 8007a30:	e00c      	b.n	8007a4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a32:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <osKernelInitialize+0x44>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d105      	bne.n	8007a46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a3a:	4b08      	ldr	r3, [pc, #32]	; (8007a5c <osKernelInitialize+0x44>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	607b      	str	r3, [r7, #4]
 8007a44:	e002      	b.n	8007a4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a46:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a4c:	687b      	ldr	r3, [r7, #4]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000364 	.word	0x20000364

08007a60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a66:	f3ef 8305 	mrs	r3, IPSR
 8007a6a:	603b      	str	r3, [r7, #0]
  return(result);
 8007a6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a72:	f06f 0305 	mvn.w	r3, #5
 8007a76:	607b      	str	r3, [r7, #4]
 8007a78:	e010      	b.n	8007a9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	; (8007aa8 <osKernelStart+0x48>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d109      	bne.n	8007a96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a82:	f7ff ffbf 	bl	8007a04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a86:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <osKernelStart+0x48>)
 8007a88:	2202      	movs	r2, #2
 8007a8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a8c:	f001 f866 	bl	8008b5c <vTaskStartScheduler>
      stat = osOK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	607b      	str	r3, [r7, #4]
 8007a94:	e002      	b.n	8007a9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a96:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a9c:	687b      	ldr	r3, [r7, #4]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000364 	.word	0x20000364

08007aac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08e      	sub	sp, #56	; 0x38
 8007ab0:	af04      	add	r7, sp, #16
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007abc:	f3ef 8305 	mrs	r3, IPSR
 8007ac0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ac2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d17e      	bne.n	8007bc6 <osThreadNew+0x11a>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d07b      	beq.n	8007bc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ace:	2380      	movs	r3, #128	; 0x80
 8007ad0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ad2:	2318      	movs	r3, #24
 8007ad4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007ada:	f04f 33ff 	mov.w	r3, #4294967295
 8007ade:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d045      	beq.n	8007b72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <osThreadNew+0x48>
        name = attr->name;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d008      	beq.n	8007b1a <osThreadNew+0x6e>
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	2b38      	cmp	r3, #56	; 0x38
 8007b0c:	d805      	bhi.n	8007b1a <osThreadNew+0x6e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <osThreadNew+0x72>
        return (NULL);
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e054      	b.n	8007bc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	089b      	lsrs	r3, r3, #2
 8007b2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00e      	beq.n	8007b54 <osThreadNew+0xa8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	2b5b      	cmp	r3, #91	; 0x5b
 8007b3c:	d90a      	bls.n	8007b54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d006      	beq.n	8007b54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <osThreadNew+0xa8>
        mem = 1;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	61bb      	str	r3, [r7, #24]
 8007b52:	e010      	b.n	8007b76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10c      	bne.n	8007b76 <osThreadNew+0xca>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d108      	bne.n	8007b76 <osThreadNew+0xca>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d104      	bne.n	8007b76 <osThreadNew+0xca>
          mem = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]
 8007b70:	e001      	b.n	8007b76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d110      	bne.n	8007b9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b84:	9202      	str	r2, [sp, #8]
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fe0c 	bl	80087b0 <xTaskCreateStatic>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	e013      	b.n	8007bc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d110      	bne.n	8007bc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	f107 0310 	add.w	r3, r7, #16
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 fe57 	bl	800886a <xTaskCreate>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d001      	beq.n	8007bc6 <osThreadNew+0x11a>
            hTask = NULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bc6:	693b      	ldr	r3, [r7, #16]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3728      	adds	r7, #40	; 0x28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bd8:	f3ef 8305 	mrs	r3, IPSR
 8007bdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <osDelay+0x1c>
    stat = osErrorISR;
 8007be4:	f06f 0305 	mvn.w	r3, #5
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e007      	b.n	8007bfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <osDelay+0x2c>
      vTaskDelay(ticks);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 ff7c 	bl	8008af4 <vTaskDelay>
    }
  }

  return (stat);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4a07      	ldr	r2, [pc, #28]	; (8007c34 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	4a06      	ldr	r2, [pc, #24]	; (8007c38 <vApplicationGetIdleTaskMemory+0x30>)
 8007c1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2280      	movs	r2, #128	; 0x80
 8007c24:	601a      	str	r2, [r3, #0]
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20000368 	.word	0x20000368
 8007c38:	200003c4 	.word	0x200003c4

08007c3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4a07      	ldr	r2, [pc, #28]	; (8007c68 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4a06      	ldr	r2, [pc, #24]	; (8007c6c <vApplicationGetTimerTaskMemory+0x30>)
 8007c52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c5a:	601a      	str	r2, [r3, #0]
}
 8007c5c:	bf00      	nop
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	200005c4 	.word	0x200005c4
 8007c6c:	20000620 	.word	0x20000620

08007c70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f103 0208 	add.w	r2, r3, #8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f04f 32ff 	mov.w	r2, #4294967295
 8007c88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f103 0208 	add.w	r2, r3, #8
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f103 0208 	add.w	r2, r3, #8
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]
}
 8007d06:	bf00      	nop
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d103      	bne.n	8007d32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e00c      	b.n	8007d4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3308      	adds	r3, #8
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	e002      	b.n	8007d40 <vListInsert+0x2e>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d2f6      	bcs.n	8007d3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	601a      	str	r2, [r3, #0]
}
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6892      	ldr	r2, [r2, #8]
 8007d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6852      	ldr	r2, [r2, #4]
 8007da4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d103      	bne.n	8007db8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	1e5a      	subs	r2, r3, #1
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e02:	f002 f84f 	bl	8009ea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0e:	68f9      	ldr	r1, [r7, #12]
 8007e10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e12:	fb01 f303 	mul.w	r3, r1, r3
 8007e16:	441a      	add	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e32:	3b01      	subs	r3, #1
 8007e34:	68f9      	ldr	r1, [r7, #12]
 8007e36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e38:	fb01 f303 	mul.w	r3, r1, r3
 8007e3c:	441a      	add	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	22ff      	movs	r2, #255	; 0xff
 8007e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	22ff      	movs	r2, #255	; 0xff
 8007e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d114      	bne.n	8007e82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01a      	beq.n	8007e96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3310      	adds	r3, #16
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 f903 	bl	8009070 <xTaskRemoveFromEventList>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d012      	beq.n	8007e96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e70:	4b0c      	ldr	r3, [pc, #48]	; (8007ea4 <xQueueGenericReset+0xcc>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	e009      	b.n	8007e96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3310      	adds	r3, #16
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff fef2 	bl	8007c70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3324      	adds	r3, #36	; 0x24
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff feed 	bl	8007c70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e96:	f002 f835 	bl	8009f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e9a:	2301      	movs	r3, #1
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	e000ed04 	.word	0xe000ed04

08007ea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08e      	sub	sp, #56	; 0x38
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <xQueueGenericCreateStatic+0x52>
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <xQueueGenericCreateStatic+0x56>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <xQueueGenericCreateStatic+0x58>
 8007efe:	2300      	movs	r3, #0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	623b      	str	r3, [r7, #32]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <xQueueGenericCreateStatic+0x7e>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <xQueueGenericCreateStatic+0x82>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <xQueueGenericCreateStatic+0x84>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	61fb      	str	r3, [r7, #28]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f46:	2350      	movs	r3, #80	; 0x50
 8007f48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b50      	cmp	r3, #80	; 0x50
 8007f4e:	d00a      	beq.n	8007f66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	61bb      	str	r3, [r7, #24]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00d      	beq.n	8007f8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	4613      	mov	r3, r2
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	68b9      	ldr	r1, [r7, #8]
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 f805 	bl	8007f98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3730      	adds	r7, #48	; 0x30
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d103      	bne.n	8007fb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	e002      	b.n	8007fba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	69b8      	ldr	r0, [r7, #24]
 8007fca:	f7ff ff05 	bl	8007dd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	78fa      	ldrb	r2, [r7, #3]
 8007fd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08e      	sub	sp, #56	; 0x38
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <xQueueGenericSend+0x32>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800800e:	bf00      	nop
 8008010:	e7fe      	b.n	8008010 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d103      	bne.n	8008020 <xQueueGenericSend+0x40>
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <xQueueGenericSend+0x44>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <xQueueGenericSend+0x46>
 8008024:	2300      	movs	r3, #0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10a      	bne.n	8008040 <xQueueGenericSend+0x60>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d103      	bne.n	800804e <xQueueGenericSend+0x6e>
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804a:	2b01      	cmp	r3, #1
 800804c:	d101      	bne.n	8008052 <xQueueGenericSend+0x72>
 800804e:	2301      	movs	r3, #1
 8008050:	e000      	b.n	8008054 <xQueueGenericSend+0x74>
 8008052:	2300      	movs	r3, #0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <xQueueGenericSend+0x8e>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	623b      	str	r3, [r7, #32]
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800806e:	f001 f9bd 	bl	80093ec <xTaskGetSchedulerState>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <xQueueGenericSend+0x9e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <xQueueGenericSend+0xa2>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <xQueueGenericSend+0xa4>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <xQueueGenericSend+0xbe>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	61fb      	str	r3, [r7, #28]
}
 800809a:	bf00      	nop
 800809c:	e7fe      	b.n	800809c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800809e:	f001 ff01 	bl	8009ea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d302      	bcc.n	80080b4 <xQueueGenericSend+0xd4>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d129      	bne.n	8008108 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ba:	f000 fa0b 	bl	80084d4 <prvCopyDataToQueue>
 80080be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d010      	beq.n	80080ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	3324      	adds	r3, #36	; 0x24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 ffcf 	bl	8009070 <xTaskRemoveFromEventList>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d013      	beq.n	8008100 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080d8:	4b3f      	ldr	r3, [pc, #252]	; (80081d8 <xQueueGenericSend+0x1f8>)
 80080da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	e00a      	b.n	8008100 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080f0:	4b39      	ldr	r3, [pc, #228]	; (80081d8 <xQueueGenericSend+0x1f8>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008100:	f001 ff00 	bl	8009f04 <vPortExitCritical>
				return pdPASS;
 8008104:	2301      	movs	r3, #1
 8008106:	e063      	b.n	80081d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d103      	bne.n	8008116 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800810e:	f001 fef9 	bl	8009f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008112:	2300      	movs	r3, #0
 8008114:	e05c      	b.n	80081d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	2b00      	cmp	r3, #0
 800811a:	d106      	bne.n	800812a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800811c:	f107 0314 	add.w	r3, r7, #20
 8008120:	4618      	mov	r0, r3
 8008122:	f001 f809 	bl	8009138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008126:	2301      	movs	r3, #1
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800812a:	f001 feeb 	bl	8009f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800812e:	f000 fd7b 	bl	8008c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008132:	f001 feb7 	bl	8009ea4 <vPortEnterCritical>
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800813c:	b25b      	sxtb	r3, r3
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008142:	d103      	bne.n	800814c <xQueueGenericSend+0x16c>
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008152:	b25b      	sxtb	r3, r3
 8008154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008158:	d103      	bne.n	8008162 <xQueueGenericSend+0x182>
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008162:	f001 fecf 	bl	8009f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008166:	1d3a      	adds	r2, r7, #4
 8008168:	f107 0314 	add.w	r3, r7, #20
 800816c:	4611      	mov	r1, r2
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fff8 	bl	8009164 <xTaskCheckForTimeOut>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d124      	bne.n	80081c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800817a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800817c:	f000 faa2 	bl	80086c4 <prvIsQueueFull>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d018      	beq.n	80081b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	3310      	adds	r3, #16
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f000 ff1e 	bl	8008fd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008196:	f000 fa2d 	bl	80085f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800819a:	f000 fd53 	bl	8008c44 <xTaskResumeAll>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f47f af7c 	bne.w	800809e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081a6:	4b0c      	ldr	r3, [pc, #48]	; (80081d8 <xQueueGenericSend+0x1f8>)
 80081a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	e772      	b.n	800809e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ba:	f000 fa1b 	bl	80085f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081be:	f000 fd41 	bl	8008c44 <xTaskResumeAll>
 80081c2:	e76c      	b.n	800809e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c6:	f000 fa15 	bl	80085f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081ca:	f000 fd3b 	bl	8008c44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3738      	adds	r7, #56	; 0x38
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b090      	sub	sp, #64	; 0x40
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10a      	bne.n	800820a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <xQueueGenericSendFromISR+0x3c>
 8008210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <xQueueGenericSendFromISR+0x40>
 8008218:	2301      	movs	r3, #1
 800821a:	e000      	b.n	800821e <xQueueGenericSendFromISR+0x42>
 800821c:	2300      	movs	r3, #0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d103      	bne.n	8008246 <xQueueGenericSendFromISR+0x6a>
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <xQueueGenericSendFromISR+0x6e>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <xQueueGenericSendFromISR+0x70>
 800824a:	2300      	movs	r3, #0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	623b      	str	r3, [r7, #32]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008266:	f001 feff 	bl	800a068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800826a:	f3ef 8211 	mrs	r2, BASEPRI
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	61fa      	str	r2, [r7, #28]
 8008280:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008282:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	429a      	cmp	r2, r3
 8008290:	d302      	bcc.n	8008298 <xQueueGenericSendFromISR+0xbc>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d12f      	bne.n	80082f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800829e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082ae:	f000 f911 	bl	80084d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d112      	bne.n	80082e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d016      	beq.n	80082f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	3324      	adds	r3, #36	; 0x24
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fed1 	bl	8009070 <xTaskRemoveFromEventList>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00e      	beq.n	80082f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e007      	b.n	80082f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082e6:	3301      	adds	r3, #1
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	b25a      	sxtb	r2, r3
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082f2:	2301      	movs	r3, #1
 80082f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80082f6:	e001      	b.n	80082fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008306:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800830a:	4618      	mov	r0, r3
 800830c:	3740      	adds	r7, #64	; 0x40
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08c      	sub	sp, #48	; 0x30
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008320:	2300      	movs	r3, #0
 8008322:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <xQueueReceive+0x30>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	623b      	str	r3, [r7, #32]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d103      	bne.n	8008352 <xQueueReceive+0x3e>
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <xQueueReceive+0x42>
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <xQueueReceive+0x44>
 8008356:	2300      	movs	r3, #0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <xQueueReceive+0x5e>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	61fb      	str	r3, [r7, #28]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008372:	f001 f83b 	bl	80093ec <xTaskGetSchedulerState>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d102      	bne.n	8008382 <xQueueReceive+0x6e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <xQueueReceive+0x72>
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <xQueueReceive+0x74>
 8008386:	2300      	movs	r3, #0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <xQueueReceive+0x8e>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	61bb      	str	r3, [r7, #24]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083a2:	f001 fd7f 	bl	8009ea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d01f      	beq.n	80083f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b6:	f000 f8f7 	bl	80085a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	1e5a      	subs	r2, r3, #1
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00f      	beq.n	80083ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	3310      	adds	r3, #16
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fe4e 	bl	8009070 <xTaskRemoveFromEventList>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083da:	4b3d      	ldr	r3, [pc, #244]	; (80084d0 <xQueueReceive+0x1bc>)
 80083dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083ea:	f001 fd8b 	bl	8009f04 <vPortExitCritical>
				return pdPASS;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e069      	b.n	80084c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083f8:	f001 fd84 	bl	8009f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e062      	b.n	80084c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008402:	2b00      	cmp	r3, #0
 8008404:	d106      	bne.n	8008414 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008406:	f107 0310 	add.w	r3, r7, #16
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fe94 	bl	8009138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008410:	2301      	movs	r3, #1
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008414:	f001 fd76 	bl	8009f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008418:	f000 fc06 	bl	8008c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800841c:	f001 fd42 	bl	8009ea4 <vPortEnterCritical>
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008426:	b25b      	sxtb	r3, r3
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842c:	d103      	bne.n	8008436 <xQueueReceive+0x122>
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800843c:	b25b      	sxtb	r3, r3
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008442:	d103      	bne.n	800844c <xQueueReceive+0x138>
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800844c:	f001 fd5a 	bl	8009f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008450:	1d3a      	adds	r2, r7, #4
 8008452:	f107 0310 	add.w	r3, r7, #16
 8008456:	4611      	mov	r1, r2
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fe83 	bl	8009164 <xTaskCheckForTimeOut>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d123      	bne.n	80084ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008466:	f000 f917 	bl	8008698 <prvIsQueueEmpty>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d017      	beq.n	80084a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	3324      	adds	r3, #36	; 0x24
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fda9 	bl	8008fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800847e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008480:	f000 f8b8 	bl	80085f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008484:	f000 fbde 	bl	8008c44 <xTaskResumeAll>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d189      	bne.n	80083a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800848e:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <xQueueReceive+0x1bc>)
 8008490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	e780      	b.n	80083a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a2:	f000 f8a7 	bl	80085f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a6:	f000 fbcd 	bl	8008c44 <xTaskResumeAll>
 80084aa:	e77a      	b.n	80083a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ae:	f000 f8a1 	bl	80085f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084b2:	f000 fbc7 	bl	8008c44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b8:	f000 f8ee 	bl	8008698 <prvIsQueueEmpty>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f43f af6f 	beq.w	80083a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3730      	adds	r7, #48	; 0x30
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	e000ed04 	.word	0xe000ed04

080084d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10d      	bne.n	800850e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d14d      	bne.n	8008596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 ff92 	bl	8009428 <xTaskPriorityDisinherit>
 8008504:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	609a      	str	r2, [r3, #8]
 800850c:	e043      	b.n	8008596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d119      	bne.n	8008548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6858      	ldr	r0, [r3, #4]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	461a      	mov	r2, r3
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	f001 ff06 	bl	800a330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	441a      	add	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	429a      	cmp	r2, r3
 800853c:	d32b      	bcc.n	8008596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	605a      	str	r2, [r3, #4]
 8008546:	e026      	b.n	8008596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	68d8      	ldr	r0, [r3, #12]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008550:	461a      	mov	r2, r3
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	f001 feec 	bl	800a330 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	425b      	negs	r3, r3
 8008562:	441a      	add	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d207      	bcs.n	8008584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857c:	425b      	negs	r3, r3
 800857e:	441a      	add	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d105      	bne.n	8008596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	3b01      	subs	r3, #1
 8008594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800859e:	697b      	ldr	r3, [r7, #20]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d018      	beq.n	80085ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	441a      	add	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d303      	bcc.n	80085dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68d9      	ldr	r1, [r3, #12]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e4:	461a      	mov	r2, r3
 80085e6:	6838      	ldr	r0, [r7, #0]
 80085e8:	f001 fea2 	bl	800a330 <memcpy>
	}
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085fc:	f001 fc52 	bl	8009ea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008608:	e011      	b.n	800862e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	d012      	beq.n	8008638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	3324      	adds	r3, #36	; 0x24
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fd2a 	bl	8009070 <xTaskRemoveFromEventList>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008622:	f000 fe01 	bl	8009228 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	3b01      	subs	r3, #1
 800862a:	b2db      	uxtb	r3, r3
 800862c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800862e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008632:	2b00      	cmp	r3, #0
 8008634:	dce9      	bgt.n	800860a <prvUnlockQueue+0x16>
 8008636:	e000      	b.n	800863a <prvUnlockQueue+0x46>
					break;
 8008638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	22ff      	movs	r2, #255	; 0xff
 800863e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008642:	f001 fc5f 	bl	8009f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008646:	f001 fc2d 	bl	8009ea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008652:	e011      	b.n	8008678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d012      	beq.n	8008682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3310      	adds	r3, #16
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fd05 	bl	8009070 <xTaskRemoveFromEventList>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800866c:	f000 fddc 	bl	8009228 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	3b01      	subs	r3, #1
 8008674:	b2db      	uxtb	r3, r3
 8008676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dce9      	bgt.n	8008654 <prvUnlockQueue+0x60>
 8008680:	e000      	b.n	8008684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	22ff      	movs	r2, #255	; 0xff
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800868c:	f001 fc3a 	bl	8009f04 <vPortExitCritical>
}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086a0:	f001 fc00 	bl	8009ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d102      	bne.n	80086b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086ac:	2301      	movs	r3, #1
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	e001      	b.n	80086b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086b6:	f001 fc25 	bl	8009f04 <vPortExitCritical>

	return xReturn;
 80086ba:	68fb      	ldr	r3, [r7, #12]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086cc:	f001 fbea 	bl	8009ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d8:	429a      	cmp	r2, r3
 80086da:	d102      	bne.n	80086e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086dc:	2301      	movs	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	e001      	b.n	80086e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086e6:	f001 fc0d 	bl	8009f04 <vPortExitCritical>

	return xReturn;
 80086ea:	68fb      	ldr	r3, [r7, #12]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086fe:	2300      	movs	r3, #0
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	e014      	b.n	800872e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008704:	4a0f      	ldr	r2, [pc, #60]	; (8008744 <vQueueAddToRegistry+0x50>)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10b      	bne.n	8008728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008710:	490c      	ldr	r1, [pc, #48]	; (8008744 <vQueueAddToRegistry+0x50>)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800871a:	4a0a      	ldr	r2, [pc, #40]	; (8008744 <vQueueAddToRegistry+0x50>)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4413      	add	r3, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008726:	e006      	b.n	8008736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3301      	adds	r3, #1
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2b07      	cmp	r3, #7
 8008732:	d9e7      	bls.n	8008704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	20008904 	.word	0x20008904

08008748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008758:	f001 fba4 	bl	8009ea4 <vPortEnterCritical>
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008762:	b25b      	sxtb	r3, r3
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d103      	bne.n	8008772 <vQueueWaitForMessageRestricted+0x2a>
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008778:	b25b      	sxtb	r3, r3
 800877a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877e:	d103      	bne.n	8008788 <vQueueWaitForMessageRestricted+0x40>
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008788:	f001 fbbc 	bl	8009f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	2b00      	cmp	r3, #0
 8008792:	d106      	bne.n	80087a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	3324      	adds	r3, #36	; 0x24
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	68b9      	ldr	r1, [r7, #8]
 800879c:	4618      	mov	r0, r3
 800879e:	f000 fc3b 	bl	8009018 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087a2:	6978      	ldr	r0, [r7, #20]
 80087a4:	f7ff ff26 	bl	80085f4 <prvUnlockQueue>
	}
 80087a8:	bf00      	nop
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08e      	sub	sp, #56	; 0x38
 80087b4:	af04      	add	r7, sp, #16
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xTaskCreateStatic+0x2a>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	623b      	str	r3, [r7, #32]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10a      	bne.n	80087f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	61fb      	str	r3, [r7, #28]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087f6:	235c      	movs	r3, #92	; 0x5c
 80087f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b5c      	cmp	r3, #92	; 0x5c
 80087fe:	d00a      	beq.n	8008816 <xTaskCreateStatic+0x66>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	61bb      	str	r3, [r7, #24]
}
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008816:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	2b00      	cmp	r3, #0
 800881c:	d01e      	beq.n	800885c <xTaskCreateStatic+0xac>
 800881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008820:	2b00      	cmp	r3, #0
 8008822:	d01b      	beq.n	800885c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800882c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	2202      	movs	r2, #2
 8008832:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008836:	2300      	movs	r3, #0
 8008838:	9303      	str	r3, [sp, #12]
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	9302      	str	r3, [sp, #8]
 800883e:	f107 0314 	add.w	r3, r7, #20
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	68b9      	ldr	r1, [r7, #8]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 f850 	bl	80088f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008856:	f000 f8dd 	bl	8008a14 <prvAddNewTaskToReadyList>
 800885a:	e001      	b.n	8008860 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008860:	697b      	ldr	r3, [r7, #20]
	}
 8008862:	4618      	mov	r0, r3
 8008864:	3728      	adds	r7, #40	; 0x28
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800886a:	b580      	push	{r7, lr}
 800886c:	b08c      	sub	sp, #48	; 0x30
 800886e:	af04      	add	r7, sp, #16
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4618      	mov	r0, r3
 8008880:	f001 fc32 	bl	800a0e8 <pvPortMalloc>
 8008884:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00e      	beq.n	80088aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800888c:	205c      	movs	r0, #92	; 0x5c
 800888e:	f001 fc2b 	bl	800a0e8 <pvPortMalloc>
 8008892:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	631a      	str	r2, [r3, #48]	; 0x30
 80088a0:	e005      	b.n	80088ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088a2:	6978      	ldr	r0, [r7, #20]
 80088a4:	f001 fcae 	bl	800a204 <vPortFree>
 80088a8:	e001      	b.n	80088ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d017      	beq.n	80088e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088bc:	88fa      	ldrh	r2, [r7, #6]
 80088be:	2300      	movs	r3, #0
 80088c0:	9303      	str	r3, [sp, #12]
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	9302      	str	r3, [sp, #8]
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	68b9      	ldr	r1, [r7, #8]
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 f80e 	bl	80088f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088d8:	69f8      	ldr	r0, [r7, #28]
 80088da:	f000 f89b 	bl	8008a14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088de:	2301      	movs	r3, #1
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	e002      	b.n	80088ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088e4:	f04f 33ff 	mov.w	r3, #4294967295
 80088e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088ea:	69bb      	ldr	r3, [r7, #24]
	}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	461a      	mov	r2, r3
 800890c:	21a5      	movs	r1, #165	; 0xa5
 800890e:	f001 fd1d 	bl	800a34c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800891c:	3b01      	subs	r3, #1
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	f023 0307 	bic.w	r3, r3, #7
 800892a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	617b      	str	r3, [r7, #20]
}
 8008948:	bf00      	nop
 800894a:	e7fe      	b.n	800894a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01f      	beq.n	8008992 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008952:	2300      	movs	r3, #0
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	e012      	b.n	800897e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	4413      	add	r3, r2
 800895e:	7819      	ldrb	r1, [r3, #0]
 8008960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4413      	add	r3, r2
 8008966:	3334      	adds	r3, #52	; 0x34
 8008968:	460a      	mov	r2, r1
 800896a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d006      	beq.n	8008986 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	3301      	adds	r3, #1
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	2b0f      	cmp	r3, #15
 8008982:	d9e9      	bls.n	8008958 <prvInitialiseNewTask+0x64>
 8008984:	e000      	b.n	8008988 <prvInitialiseNewTask+0x94>
			{
				break;
 8008986:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008990:	e003      	b.n	800899a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	2b37      	cmp	r3, #55	; 0x37
 800899e:	d901      	bls.n	80089a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089a0:	2337      	movs	r3, #55	; 0x37
 80089a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	2200      	movs	r2, #0
 80089b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	3304      	adds	r3, #4
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff f978 	bl	8007cb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	3318      	adds	r3, #24
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7ff f973 	bl	8007cb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	2200      	movs	r2, #0
 80089e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	68f9      	ldr	r1, [r7, #12]
 80089f2:	69b8      	ldr	r0, [r7, #24]
 80089f4:	f001 f928 	bl	8009c48 <pxPortInitialiseStack>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a0a:	bf00      	nop
 8008a0c:	3720      	adds	r7, #32
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a1c:	f001 fa42 	bl	8009ea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a20:	4b2d      	ldr	r3, [pc, #180]	; (8008ad8 <prvAddNewTaskToReadyList+0xc4>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	4a2c      	ldr	r2, [pc, #176]	; (8008ad8 <prvAddNewTaskToReadyList+0xc4>)
 8008a28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a2a:	4b2c      	ldr	r3, [pc, #176]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a32:	4a2a      	ldr	r2, [pc, #168]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a38:	4b27      	ldr	r3, [pc, #156]	; (8008ad8 <prvAddNewTaskToReadyList+0xc4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d110      	bne.n	8008a62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a40:	f000 fc16 	bl	8009270 <prvInitialiseTaskLists>
 8008a44:	e00d      	b.n	8008a62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a46:	4b26      	ldr	r3, [pc, #152]	; (8008ae0 <prvAddNewTaskToReadyList+0xcc>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d109      	bne.n	8008a62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a4e:	4b23      	ldr	r3, [pc, #140]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d802      	bhi.n	8008a62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a5c:	4a1f      	ldr	r2, [pc, #124]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a62:	4b20      	ldr	r3, [pc, #128]	; (8008ae4 <prvAddNewTaskToReadyList+0xd0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	4a1e      	ldr	r2, [pc, #120]	; (8008ae4 <prvAddNewTaskToReadyList+0xd0>)
 8008a6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ae4 <prvAddNewTaskToReadyList+0xd0>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a78:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <prvAddNewTaskToReadyList+0xd4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d903      	bls.n	8008a88 <prvAddNewTaskToReadyList+0x74>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	4a18      	ldr	r2, [pc, #96]	; (8008ae8 <prvAddNewTaskToReadyList+0xd4>)
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4a15      	ldr	r2, [pc, #84]	; (8008aec <prvAddNewTaskToReadyList+0xd8>)
 8008a96:	441a      	add	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7ff f913 	bl	8007cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008aa4:	f001 fa2e 	bl	8009f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <prvAddNewTaskToReadyList+0xcc>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00e      	beq.n	8008ace <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ab0:	4b0a      	ldr	r3, [pc, #40]	; (8008adc <prvAddNewTaskToReadyList+0xc8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d207      	bcs.n	8008ace <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008abe:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <prvAddNewTaskToReadyList+0xdc>)
 8008ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000ef4 	.word	0x20000ef4
 8008adc:	20000a20 	.word	0x20000a20
 8008ae0:	20000f00 	.word	0x20000f00
 8008ae4:	20000f10 	.word	0x20000f10
 8008ae8:	20000efc 	.word	0x20000efc
 8008aec:	20000a24 	.word	0x20000a24
 8008af0:	e000ed04 	.word	0xe000ed04

08008af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d017      	beq.n	8008b36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b06:	4b13      	ldr	r3, [pc, #76]	; (8008b54 <vTaskDelay+0x60>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <vTaskDelay+0x30>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60bb      	str	r3, [r7, #8]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b24:	f000 f880 	bl	8008c28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b28:	2100      	movs	r1, #0
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fcea 	bl	8009504 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b30:	f000 f888 	bl	8008c44 <xTaskResumeAll>
 8008b34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d107      	bne.n	8008b4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b3c:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <vTaskDelay+0x64>)
 8008b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b4c:	bf00      	nop
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20000f1c 	.word	0x20000f1c
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	; 0x28
 8008b60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	1d39      	adds	r1, r7, #4
 8008b6e:	f107 0308 	add.w	r3, r7, #8
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff f848 	bl	8007c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	9202      	str	r2, [sp, #8]
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	2300      	movs	r3, #0
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	2300      	movs	r3, #0
 8008b88:	460a      	mov	r2, r1
 8008b8a:	4921      	ldr	r1, [pc, #132]	; (8008c10 <vTaskStartScheduler+0xb4>)
 8008b8c:	4821      	ldr	r0, [pc, #132]	; (8008c14 <vTaskStartScheduler+0xb8>)
 8008b8e:	f7ff fe0f 	bl	80087b0 <xTaskCreateStatic>
 8008b92:	4603      	mov	r3, r0
 8008b94:	4a20      	ldr	r2, [pc, #128]	; (8008c18 <vTaskStartScheduler+0xbc>)
 8008b96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b98:	4b1f      	ldr	r3, [pc, #124]	; (8008c18 <vTaskStartScheduler+0xbc>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	e001      	b.n	8008baa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d102      	bne.n	8008bb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bb0:	f000 fcfc 	bl	80095ac <xTimerCreateTimerTask>
 8008bb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d116      	bne.n	8008bea <vTaskStartScheduler+0x8e>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	613b      	str	r3, [r7, #16]
}
 8008bce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bd0:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <vTaskStartScheduler+0xc0>)
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bd8:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <vTaskStartScheduler+0xc4>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008bde:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <vTaskStartScheduler+0xc8>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008be4:	f001 f8bc 	bl	8009d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008be8:	e00e      	b.n	8008c08 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf0:	d10a      	bne.n	8008c08 <vTaskStartScheduler+0xac>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	60fb      	str	r3, [r7, #12]
}
 8008c04:	bf00      	nop
 8008c06:	e7fe      	b.n	8008c06 <vTaskStartScheduler+0xaa>
}
 8008c08:	bf00      	nop
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	0800cd1c 	.word	0x0800cd1c
 8008c14:	08009241 	.word	0x08009241
 8008c18:	20000f18 	.word	0x20000f18
 8008c1c:	20000f14 	.word	0x20000f14
 8008c20:	20000f00 	.word	0x20000f00
 8008c24:	20000ef8 	.word	0x20000ef8

08008c28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c2c:	4b04      	ldr	r3, [pc, #16]	; (8008c40 <vTaskSuspendAll+0x18>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3301      	adds	r3, #1
 8008c32:	4a03      	ldr	r2, [pc, #12]	; (8008c40 <vTaskSuspendAll+0x18>)
 8008c34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c36:	bf00      	nop
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000f1c 	.word	0x20000f1c

08008c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c52:	4b42      	ldr	r3, [pc, #264]	; (8008d5c <xTaskResumeAll+0x118>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10a      	bne.n	8008c70 <xTaskResumeAll+0x2c>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	603b      	str	r3, [r7, #0]
}
 8008c6c:	bf00      	nop
 8008c6e:	e7fe      	b.n	8008c6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c70:	f001 f918 	bl	8009ea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c74:	4b39      	ldr	r3, [pc, #228]	; (8008d5c <xTaskResumeAll+0x118>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	4a38      	ldr	r2, [pc, #224]	; (8008d5c <xTaskResumeAll+0x118>)
 8008c7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c7e:	4b37      	ldr	r3, [pc, #220]	; (8008d5c <xTaskResumeAll+0x118>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d162      	bne.n	8008d4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c86:	4b36      	ldr	r3, [pc, #216]	; (8008d60 <xTaskResumeAll+0x11c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d05e      	beq.n	8008d4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c8e:	e02f      	b.n	8008cf0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c90:	4b34      	ldr	r3, [pc, #208]	; (8008d64 <xTaskResumeAll+0x120>)
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3318      	adds	r3, #24
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff f871 	bl	8007d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff f86c 	bl	8007d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb0:	4b2d      	ldr	r3, [pc, #180]	; (8008d68 <xTaskResumeAll+0x124>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d903      	bls.n	8008cc0 <xTaskResumeAll+0x7c>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	4a2a      	ldr	r2, [pc, #168]	; (8008d68 <xTaskResumeAll+0x124>)
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4a27      	ldr	r2, [pc, #156]	; (8008d6c <xTaskResumeAll+0x128>)
 8008cce:	441a      	add	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	f7fe fff7 	bl	8007cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce0:	4b23      	ldr	r3, [pc, #140]	; (8008d70 <xTaskResumeAll+0x12c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d302      	bcc.n	8008cf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008cea:	4b22      	ldr	r3, [pc, #136]	; (8008d74 <xTaskResumeAll+0x130>)
 8008cec:	2201      	movs	r2, #1
 8008cee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cf0:	4b1c      	ldr	r3, [pc, #112]	; (8008d64 <xTaskResumeAll+0x120>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1cb      	bne.n	8008c90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008cfe:	f000 fb55 	bl	80093ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d02:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <xTaskResumeAll+0x134>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d010      	beq.n	8008d30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d0e:	f000 f847 	bl	8008da0 <xTaskIncrementTick>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d18:	4b16      	ldr	r3, [pc, #88]	; (8008d74 <xTaskResumeAll+0x130>)
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1f1      	bne.n	8008d0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d2a:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <xTaskResumeAll+0x134>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d30:	4b10      	ldr	r3, [pc, #64]	; (8008d74 <xTaskResumeAll+0x130>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d3c:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <xTaskResumeAll+0x138>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d4c:	f001 f8da 	bl	8009f04 <vPortExitCritical>

	return xAlreadyYielded;
 8008d50:	68bb      	ldr	r3, [r7, #8]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20000f1c 	.word	0x20000f1c
 8008d60:	20000ef4 	.word	0x20000ef4
 8008d64:	20000eb4 	.word	0x20000eb4
 8008d68:	20000efc 	.word	0x20000efc
 8008d6c:	20000a24 	.word	0x20000a24
 8008d70:	20000a20 	.word	0x20000a20
 8008d74:	20000f08 	.word	0x20000f08
 8008d78:	20000f04 	.word	0x20000f04
 8008d7c:	e000ed04 	.word	0xe000ed04

08008d80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <xTaskGetTickCount+0x1c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d8c:	687b      	ldr	r3, [r7, #4]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20000ef8 	.word	0x20000ef8

08008da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008daa:	4b4f      	ldr	r3, [pc, #316]	; (8008ee8 <xTaskIncrementTick+0x148>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f040 808f 	bne.w	8008ed2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008db4:	4b4d      	ldr	r3, [pc, #308]	; (8008eec <xTaskIncrementTick+0x14c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dbc:	4a4b      	ldr	r2, [pc, #300]	; (8008eec <xTaskIncrementTick+0x14c>)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d120      	bne.n	8008e0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dc8:	4b49      	ldr	r3, [pc, #292]	; (8008ef0 <xTaskIncrementTick+0x150>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	603b      	str	r3, [r7, #0]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <xTaskIncrementTick+0x46>
 8008de8:	4b41      	ldr	r3, [pc, #260]	; (8008ef0 <xTaskIncrementTick+0x150>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	4b41      	ldr	r3, [pc, #260]	; (8008ef4 <xTaskIncrementTick+0x154>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a3f      	ldr	r2, [pc, #252]	; (8008ef0 <xTaskIncrementTick+0x150>)
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	4a3f      	ldr	r2, [pc, #252]	; (8008ef4 <xTaskIncrementTick+0x154>)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	4b3e      	ldr	r3, [pc, #248]	; (8008ef8 <xTaskIncrementTick+0x158>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3301      	adds	r3, #1
 8008e02:	4a3d      	ldr	r2, [pc, #244]	; (8008ef8 <xTaskIncrementTick+0x158>)
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	f000 fad1 	bl	80093ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e0a:	4b3c      	ldr	r3, [pc, #240]	; (8008efc <xTaskIncrementTick+0x15c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d349      	bcc.n	8008ea8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e14:	4b36      	ldr	r3, [pc, #216]	; (8008ef0 <xTaskIncrementTick+0x150>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d104      	bne.n	8008e28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e1e:	4b37      	ldr	r3, [pc, #220]	; (8008efc <xTaskIncrementTick+0x15c>)
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	601a      	str	r2, [r3, #0]
					break;
 8008e26:	e03f      	b.n	8008ea8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e28:	4b31      	ldr	r3, [pc, #196]	; (8008ef0 <xTaskIncrementTick+0x150>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d203      	bcs.n	8008e48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e40:	4a2e      	ldr	r2, [pc, #184]	; (8008efc <xTaskIncrementTick+0x15c>)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e46:	e02f      	b.n	8008ea8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe ff99 	bl	8007d84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d004      	beq.n	8008e64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	3318      	adds	r3, #24
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe ff90 	bl	8007d84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e68:	4b25      	ldr	r3, [pc, #148]	; (8008f00 <xTaskIncrementTick+0x160>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d903      	bls.n	8008e78 <xTaskIncrementTick+0xd8>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	4a22      	ldr	r2, [pc, #136]	; (8008f00 <xTaskIncrementTick+0x160>)
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4a1f      	ldr	r2, [pc, #124]	; (8008f04 <xTaskIncrementTick+0x164>)
 8008e86:	441a      	add	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7fe ff1b 	bl	8007cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e98:	4b1b      	ldr	r3, [pc, #108]	; (8008f08 <xTaskIncrementTick+0x168>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d3b8      	bcc.n	8008e14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ea6:	e7b5      	b.n	8008e14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ea8:	4b17      	ldr	r3, [pc, #92]	; (8008f08 <xTaskIncrementTick+0x168>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eae:	4915      	ldr	r1, [pc, #84]	; (8008f04 <xTaskIncrementTick+0x164>)
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d901      	bls.n	8008ec4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ec4:	4b11      	ldr	r3, [pc, #68]	; (8008f0c <xTaskIncrementTick+0x16c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d007      	beq.n	8008edc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	617b      	str	r3, [r7, #20]
 8008ed0:	e004      	b.n	8008edc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ed2:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <xTaskIncrementTick+0x170>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	4a0d      	ldr	r2, [pc, #52]	; (8008f10 <xTaskIncrementTick+0x170>)
 8008eda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008edc:	697b      	ldr	r3, [r7, #20]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000f1c 	.word	0x20000f1c
 8008eec:	20000ef8 	.word	0x20000ef8
 8008ef0:	20000eac 	.word	0x20000eac
 8008ef4:	20000eb0 	.word	0x20000eb0
 8008ef8:	20000f0c 	.word	0x20000f0c
 8008efc:	20000f14 	.word	0x20000f14
 8008f00:	20000efc 	.word	0x20000efc
 8008f04:	20000a24 	.word	0x20000a24
 8008f08:	20000a20 	.word	0x20000a20
 8008f0c:	20000f08 	.word	0x20000f08
 8008f10:	20000f04 	.word	0x20000f04

08008f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f1a:	4b28      	ldr	r3, [pc, #160]	; (8008fbc <vTaskSwitchContext+0xa8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f22:	4b27      	ldr	r3, [pc, #156]	; (8008fc0 <vTaskSwitchContext+0xac>)
 8008f24:	2201      	movs	r2, #1
 8008f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f28:	e041      	b.n	8008fae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008f2a:	4b25      	ldr	r3, [pc, #148]	; (8008fc0 <vTaskSwitchContext+0xac>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f30:	4b24      	ldr	r3, [pc, #144]	; (8008fc4 <vTaskSwitchContext+0xb0>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	60fb      	str	r3, [r7, #12]
 8008f36:	e010      	b.n	8008f5a <vTaskSwitchContext+0x46>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10a      	bne.n	8008f54 <vTaskSwitchContext+0x40>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	607b      	str	r3, [r7, #4]
}
 8008f50:	bf00      	nop
 8008f52:	e7fe      	b.n	8008f52 <vTaskSwitchContext+0x3e>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	491b      	ldr	r1, [pc, #108]	; (8008fc8 <vTaskSwitchContext+0xb4>)
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0e4      	beq.n	8008f38 <vTaskSwitchContext+0x24>
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4a13      	ldr	r2, [pc, #76]	; (8008fc8 <vTaskSwitchContext+0xb4>)
 8008f7a:	4413      	add	r3, r2
 8008f7c:	60bb      	str	r3, [r7, #8]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	605a      	str	r2, [r3, #4]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	3308      	adds	r3, #8
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d104      	bne.n	8008f9e <vTaskSwitchContext+0x8a>
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	605a      	str	r2, [r3, #4]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	4a09      	ldr	r2, [pc, #36]	; (8008fcc <vTaskSwitchContext+0xb8>)
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	4a06      	ldr	r2, [pc, #24]	; (8008fc4 <vTaskSwitchContext+0xb0>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6013      	str	r3, [r2, #0]
}
 8008fae:	bf00      	nop
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	20000f1c 	.word	0x20000f1c
 8008fc0:	20000f08 	.word	0x20000f08
 8008fc4:	20000efc 	.word	0x20000efc
 8008fc8:	20000a24 	.word	0x20000a24
 8008fcc:	20000a20 	.word	0x20000a20

08008fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10a      	bne.n	8008ff6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	60fb      	str	r3, [r7, #12]
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ff6:	4b07      	ldr	r3, [pc, #28]	; (8009014 <vTaskPlaceOnEventList+0x44>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3318      	adds	r3, #24
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7fe fe87 	bl	8007d12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009004:	2101      	movs	r1, #1
 8009006:	6838      	ldr	r0, [r7, #0]
 8009008:	f000 fa7c 	bl	8009504 <prvAddCurrentTaskToDelayedList>
}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	20000a20 	.word	0x20000a20

08009018 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10a      	bne.n	8009040 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	617b      	str	r3, [r7, #20]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009040:	4b0a      	ldr	r3, [pc, #40]	; (800906c <vTaskPlaceOnEventListRestricted+0x54>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3318      	adds	r3, #24
 8009046:	4619      	mov	r1, r3
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f7fe fe3e 	bl	8007cca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009054:	f04f 33ff 	mov.w	r3, #4294967295
 8009058:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	68b8      	ldr	r0, [r7, #8]
 800905e:	f000 fa51 	bl	8009504 <prvAddCurrentTaskToDelayedList>
	}
 8009062:	bf00      	nop
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000a20 	.word	0x20000a20

08009070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10a      	bne.n	800909c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	60fb      	str	r3, [r7, #12]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	3318      	adds	r3, #24
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe fe6f 	bl	8007d84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a6:	4b1e      	ldr	r3, [pc, #120]	; (8009120 <xTaskRemoveFromEventList+0xb0>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d11d      	bne.n	80090ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	3304      	adds	r3, #4
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe fe66 	bl	8007d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090bc:	4b19      	ldr	r3, [pc, #100]	; (8009124 <xTaskRemoveFromEventList+0xb4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d903      	bls.n	80090cc <xTaskRemoveFromEventList+0x5c>
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c8:	4a16      	ldr	r2, [pc, #88]	; (8009124 <xTaskRemoveFromEventList+0xb4>)
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d0:	4613      	mov	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4a13      	ldr	r2, [pc, #76]	; (8009128 <xTaskRemoveFromEventList+0xb8>)
 80090da:	441a      	add	r2, r3
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	3304      	adds	r3, #4
 80090e0:	4619      	mov	r1, r3
 80090e2:	4610      	mov	r0, r2
 80090e4:	f7fe fdf1 	bl	8007cca <vListInsertEnd>
 80090e8:	e005      	b.n	80090f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	3318      	adds	r3, #24
 80090ee:	4619      	mov	r1, r3
 80090f0:	480e      	ldr	r0, [pc, #56]	; (800912c <xTaskRemoveFromEventList+0xbc>)
 80090f2:	f7fe fdea 	bl	8007cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fa:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <xTaskRemoveFromEventList+0xc0>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	429a      	cmp	r2, r3
 8009102:	d905      	bls.n	8009110 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009104:	2301      	movs	r3, #1
 8009106:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009108:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <xTaskRemoveFromEventList+0xc4>)
 800910a:	2201      	movs	r2, #1
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e001      	b.n	8009114 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009114:	697b      	ldr	r3, [r7, #20]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000f1c 	.word	0x20000f1c
 8009124:	20000efc 	.word	0x20000efc
 8009128:	20000a24 	.word	0x20000a24
 800912c:	20000eb4 	.word	0x20000eb4
 8009130:	20000a20 	.word	0x20000a20
 8009134:	20000f08 	.word	0x20000f08

08009138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009140:	4b06      	ldr	r3, [pc, #24]	; (800915c <vTaskInternalSetTimeOutState+0x24>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <vTaskInternalSetTimeOutState+0x28>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	605a      	str	r2, [r3, #4]
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	20000f0c 	.word	0x20000f0c
 8009160:	20000ef8 	.word	0x20000ef8

08009164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	613b      	str	r3, [r7, #16]
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	60fb      	str	r3, [r7, #12]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80091a6:	f000 fe7d 	bl	8009ea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091aa:	4b1d      	ldr	r3, [pc, #116]	; (8009220 <xTaskCheckForTimeOut+0xbc>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c2:	d102      	bne.n	80091ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091c4:	2300      	movs	r3, #0
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	e023      	b.n	8009212 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4b15      	ldr	r3, [pc, #84]	; (8009224 <xTaskCheckForTimeOut+0xc0>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d007      	beq.n	80091e6 <xTaskCheckForTimeOut+0x82>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d302      	bcc.n	80091e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091e0:	2301      	movs	r3, #1
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	e015      	b.n	8009212 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d20b      	bcs.n	8009208 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	1ad2      	subs	r2, r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff ff9b 	bl	8009138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009202:	2300      	movs	r3, #0
 8009204:	61fb      	str	r3, [r7, #28]
 8009206:	e004      	b.n	8009212 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2200      	movs	r2, #0
 800920c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800920e:	2301      	movs	r3, #1
 8009210:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009212:	f000 fe77 	bl	8009f04 <vPortExitCritical>

	return xReturn;
 8009216:	69fb      	ldr	r3, [r7, #28]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3720      	adds	r7, #32
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20000ef8 	.word	0x20000ef8
 8009224:	20000f0c 	.word	0x20000f0c

08009228 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800922c:	4b03      	ldr	r3, [pc, #12]	; (800923c <vTaskMissedYield+0x14>)
 800922e:	2201      	movs	r2, #1
 8009230:	601a      	str	r2, [r3, #0]
}
 8009232:	bf00      	nop
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20000f08 	.word	0x20000f08

08009240 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009248:	f000 f852 	bl	80092f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800924c:	4b06      	ldr	r3, [pc, #24]	; (8009268 <prvIdleTask+0x28>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d9f9      	bls.n	8009248 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <prvIdleTask+0x2c>)
 8009256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009264:	e7f0      	b.n	8009248 <prvIdleTask+0x8>
 8009266:	bf00      	nop
 8009268:	20000a24 	.word	0x20000a24
 800926c:	e000ed04 	.word	0xe000ed04

08009270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009276:	2300      	movs	r3, #0
 8009278:	607b      	str	r3, [r7, #4]
 800927a:	e00c      	b.n	8009296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4a12      	ldr	r2, [pc, #72]	; (80092d0 <prvInitialiseTaskLists+0x60>)
 8009288:	4413      	add	r3, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fcf0 	bl	8007c70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3301      	adds	r3, #1
 8009294:	607b      	str	r3, [r7, #4]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b37      	cmp	r3, #55	; 0x37
 800929a:	d9ef      	bls.n	800927c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800929c:	480d      	ldr	r0, [pc, #52]	; (80092d4 <prvInitialiseTaskLists+0x64>)
 800929e:	f7fe fce7 	bl	8007c70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092a2:	480d      	ldr	r0, [pc, #52]	; (80092d8 <prvInitialiseTaskLists+0x68>)
 80092a4:	f7fe fce4 	bl	8007c70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092a8:	480c      	ldr	r0, [pc, #48]	; (80092dc <prvInitialiseTaskLists+0x6c>)
 80092aa:	f7fe fce1 	bl	8007c70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092ae:	480c      	ldr	r0, [pc, #48]	; (80092e0 <prvInitialiseTaskLists+0x70>)
 80092b0:	f7fe fcde 	bl	8007c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092b4:	480b      	ldr	r0, [pc, #44]	; (80092e4 <prvInitialiseTaskLists+0x74>)
 80092b6:	f7fe fcdb 	bl	8007c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <prvInitialiseTaskLists+0x78>)
 80092bc:	4a05      	ldr	r2, [pc, #20]	; (80092d4 <prvInitialiseTaskLists+0x64>)
 80092be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <prvInitialiseTaskLists+0x7c>)
 80092c2:	4a05      	ldr	r2, [pc, #20]	; (80092d8 <prvInitialiseTaskLists+0x68>)
 80092c4:	601a      	str	r2, [r3, #0]
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000a24 	.word	0x20000a24
 80092d4:	20000e84 	.word	0x20000e84
 80092d8:	20000e98 	.word	0x20000e98
 80092dc:	20000eb4 	.word	0x20000eb4
 80092e0:	20000ec8 	.word	0x20000ec8
 80092e4:	20000ee0 	.word	0x20000ee0
 80092e8:	20000eac 	.word	0x20000eac
 80092ec:	20000eb0 	.word	0x20000eb0

080092f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092f6:	e019      	b.n	800932c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092f8:	f000 fdd4 	bl	8009ea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092fc:	4b10      	ldr	r3, [pc, #64]	; (8009340 <prvCheckTasksWaitingTermination+0x50>)
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3304      	adds	r3, #4
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fd3b 	bl	8007d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800930e:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <prvCheckTasksWaitingTermination+0x54>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3b01      	subs	r3, #1
 8009314:	4a0b      	ldr	r2, [pc, #44]	; (8009344 <prvCheckTasksWaitingTermination+0x54>)
 8009316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009318:	4b0b      	ldr	r3, [pc, #44]	; (8009348 <prvCheckTasksWaitingTermination+0x58>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3b01      	subs	r3, #1
 800931e:	4a0a      	ldr	r2, [pc, #40]	; (8009348 <prvCheckTasksWaitingTermination+0x58>)
 8009320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009322:	f000 fdef 	bl	8009f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f810 	bl	800934c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800932c:	4b06      	ldr	r3, [pc, #24]	; (8009348 <prvCheckTasksWaitingTermination+0x58>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e1      	bne.n	80092f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000ec8 	.word	0x20000ec8
 8009344:	20000ef4 	.word	0x20000ef4
 8009348:	20000edc 	.word	0x20000edc

0800934c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800935a:	2b00      	cmp	r3, #0
 800935c:	d108      	bne.n	8009370 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	4618      	mov	r0, r3
 8009364:	f000 ff4e 	bl	800a204 <vPortFree>
				vPortFree( pxTCB );
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 ff4b 	bl	800a204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800936e:	e018      	b.n	80093a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009376:	2b01      	cmp	r3, #1
 8009378:	d103      	bne.n	8009382 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 ff42 	bl	800a204 <vPortFree>
	}
 8009380:	e00f      	b.n	80093a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009388:	2b02      	cmp	r3, #2
 800938a:	d00a      	beq.n	80093a2 <prvDeleteTCB+0x56>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	60fb      	str	r3, [r7, #12]
}
 800939e:	bf00      	nop
 80093a0:	e7fe      	b.n	80093a0 <prvDeleteTCB+0x54>
	}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093b2:	4b0c      	ldr	r3, [pc, #48]	; (80093e4 <prvResetNextTaskUnblockTime+0x38>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <prvResetNextTaskUnblockTime+0x3c>)
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093c4:	e008      	b.n	80093d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c6:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <prvResetNextTaskUnblockTime+0x38>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	4a04      	ldr	r2, [pc, #16]	; (80093e8 <prvResetNextTaskUnblockTime+0x3c>)
 80093d6:	6013      	str	r3, [r2, #0]
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	20000eac 	.word	0x20000eac
 80093e8:	20000f14 	.word	0x20000f14

080093ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093f2:	4b0b      	ldr	r3, [pc, #44]	; (8009420 <xTaskGetSchedulerState+0x34>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093fa:	2301      	movs	r3, #1
 80093fc:	607b      	str	r3, [r7, #4]
 80093fe:	e008      	b.n	8009412 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009400:	4b08      	ldr	r3, [pc, #32]	; (8009424 <xTaskGetSchedulerState+0x38>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009408:	2302      	movs	r3, #2
 800940a:	607b      	str	r3, [r7, #4]
 800940c:	e001      	b.n	8009412 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800940e:	2300      	movs	r3, #0
 8009410:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009412:	687b      	ldr	r3, [r7, #4]
	}
 8009414:	4618      	mov	r0, r3
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	20000f00 	.word	0x20000f00
 8009424:	20000f1c 	.word	0x20000f1c

08009428 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009434:	2300      	movs	r3, #0
 8009436:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d056      	beq.n	80094ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800943e:	4b2e      	ldr	r3, [pc, #184]	; (80094f8 <xTaskPriorityDisinherit+0xd0>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	429a      	cmp	r2, r3
 8009446:	d00a      	beq.n	800945e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	60fb      	str	r3, [r7, #12]
}
 800945a:	bf00      	nop
 800945c:	e7fe      	b.n	800945c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10a      	bne.n	800947c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	60bb      	str	r3, [r7, #8]
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009480:	1e5a      	subs	r2, r3, #1
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800948e:	429a      	cmp	r2, r3
 8009490:	d02c      	beq.n	80094ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009496:	2b00      	cmp	r3, #0
 8009498:	d128      	bne.n	80094ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	3304      	adds	r3, #4
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe fc70 	bl	8007d84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094bc:	4b0f      	ldr	r3, [pc, #60]	; (80094fc <xTaskPriorityDisinherit+0xd4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d903      	bls.n	80094cc <xTaskPriorityDisinherit+0xa4>
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	4a0c      	ldr	r2, [pc, #48]	; (80094fc <xTaskPriorityDisinherit+0xd4>)
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4a09      	ldr	r2, [pc, #36]	; (8009500 <xTaskPriorityDisinherit+0xd8>)
 80094da:	441a      	add	r2, r3
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	3304      	adds	r3, #4
 80094e0:	4619      	mov	r1, r3
 80094e2:	4610      	mov	r0, r2
 80094e4:	f7fe fbf1 	bl	8007cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094e8:	2301      	movs	r3, #1
 80094ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094ec:	697b      	ldr	r3, [r7, #20]
	}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000a20 	.word	0x20000a20
 80094fc:	20000efc 	.word	0x20000efc
 8009500:	20000a24 	.word	0x20000a24

08009504 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800950e:	4b21      	ldr	r3, [pc, #132]	; (8009594 <prvAddCurrentTaskToDelayedList+0x90>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009514:	4b20      	ldr	r3, [pc, #128]	; (8009598 <prvAddCurrentTaskToDelayedList+0x94>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3304      	adds	r3, #4
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe fc32 	bl	8007d84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009526:	d10a      	bne.n	800953e <prvAddCurrentTaskToDelayedList+0x3a>
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d007      	beq.n	800953e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800952e:	4b1a      	ldr	r3, [pc, #104]	; (8009598 <prvAddCurrentTaskToDelayedList+0x94>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3304      	adds	r3, #4
 8009534:	4619      	mov	r1, r3
 8009536:	4819      	ldr	r0, [pc, #100]	; (800959c <prvAddCurrentTaskToDelayedList+0x98>)
 8009538:	f7fe fbc7 	bl	8007cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800953c:	e026      	b.n	800958c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4413      	add	r3, r2
 8009544:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009546:	4b14      	ldr	r3, [pc, #80]	; (8009598 <prvAddCurrentTaskToDelayedList+0x94>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	429a      	cmp	r2, r3
 8009554:	d209      	bcs.n	800956a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009556:	4b12      	ldr	r3, [pc, #72]	; (80095a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <prvAddCurrentTaskToDelayedList+0x94>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3304      	adds	r3, #4
 8009560:	4619      	mov	r1, r3
 8009562:	4610      	mov	r0, r2
 8009564:	f7fe fbd5 	bl	8007d12 <vListInsert>
}
 8009568:	e010      	b.n	800958c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800956a:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <prvAddCurrentTaskToDelayedList+0x94>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3304      	adds	r3, #4
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f7fe fbcb 	bl	8007d12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800957c:	4b0a      	ldr	r3, [pc, #40]	; (80095a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	429a      	cmp	r2, r3
 8009584:	d202      	bcs.n	800958c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009586:	4a08      	ldr	r2, [pc, #32]	; (80095a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	6013      	str	r3, [r2, #0]
}
 800958c:	bf00      	nop
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000ef8 	.word	0x20000ef8
 8009598:	20000a20 	.word	0x20000a20
 800959c:	20000ee0 	.word	0x20000ee0
 80095a0:	20000eb0 	.word	0x20000eb0
 80095a4:	20000eac 	.word	0x20000eac
 80095a8:	20000f14 	.word	0x20000f14

080095ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08a      	sub	sp, #40	; 0x28
 80095b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095b2:	2300      	movs	r3, #0
 80095b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095b6:	f000 fb07 	bl	8009bc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095ba:	4b1c      	ldr	r3, [pc, #112]	; (800962c <xTimerCreateTimerTask+0x80>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d021      	beq.n	8009606 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095ca:	1d3a      	adds	r2, r7, #4
 80095cc:	f107 0108 	add.w	r1, r7, #8
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fb31 	bl	8007c3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	9202      	str	r2, [sp, #8]
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	2302      	movs	r3, #2
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	2300      	movs	r3, #0
 80095ea:	460a      	mov	r2, r1
 80095ec:	4910      	ldr	r1, [pc, #64]	; (8009630 <xTimerCreateTimerTask+0x84>)
 80095ee:	4811      	ldr	r0, [pc, #68]	; (8009634 <xTimerCreateTimerTask+0x88>)
 80095f0:	f7ff f8de 	bl	80087b0 <xTaskCreateStatic>
 80095f4:	4603      	mov	r3, r0
 80095f6:	4a10      	ldr	r2, [pc, #64]	; (8009638 <xTimerCreateTimerTask+0x8c>)
 80095f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80095fa:	4b0f      	ldr	r3, [pc, #60]	; (8009638 <xTimerCreateTimerTask+0x8c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009602:	2301      	movs	r3, #1
 8009604:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	613b      	str	r3, [r7, #16]
}
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009622:	697b      	ldr	r3, [r7, #20]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000f50 	.word	0x20000f50
 8009630:	0800cd24 	.word	0x0800cd24
 8009634:	08009771 	.word	0x08009771
 8009638:	20000f54 	.word	0x20000f54

0800963c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b08a      	sub	sp, #40	; 0x28
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
 8009648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800964a:	2300      	movs	r3, #0
 800964c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10a      	bne.n	800966a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	623b      	str	r3, [r7, #32]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800966a:	4b1a      	ldr	r3, [pc, #104]	; (80096d4 <xTimerGenericCommand+0x98>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d02a      	beq.n	80096c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b05      	cmp	r3, #5
 8009682:	dc18      	bgt.n	80096b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009684:	f7ff feb2 	bl	80093ec <xTaskGetSchedulerState>
 8009688:	4603      	mov	r3, r0
 800968a:	2b02      	cmp	r3, #2
 800968c:	d109      	bne.n	80096a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800968e:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <xTimerGenericCommand+0x98>)
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f107 0110 	add.w	r1, r7, #16
 8009696:	2300      	movs	r3, #0
 8009698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800969a:	f7fe fca1 	bl	8007fe0 <xQueueGenericSend>
 800969e:	6278      	str	r0, [r7, #36]	; 0x24
 80096a0:	e012      	b.n	80096c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096a2:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <xTimerGenericCommand+0x98>)
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	f107 0110 	add.w	r1, r7, #16
 80096aa:	2300      	movs	r3, #0
 80096ac:	2200      	movs	r2, #0
 80096ae:	f7fe fc97 	bl	8007fe0 <xQueueGenericSend>
 80096b2:	6278      	str	r0, [r7, #36]	; 0x24
 80096b4:	e008      	b.n	80096c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096b6:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <xTimerGenericCommand+0x98>)
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	f107 0110 	add.w	r1, r7, #16
 80096be:	2300      	movs	r3, #0
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	f7fe fd8b 	bl	80081dc <xQueueGenericSendFromISR>
 80096c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3728      	adds	r7, #40	; 0x28
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000f50 	.word	0x20000f50

080096d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b088      	sub	sp, #32
 80096dc:	af02      	add	r7, sp, #8
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e2:	4b22      	ldr	r3, [pc, #136]	; (800976c <prvProcessExpiredTimer+0x94>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe fb47 	bl	8007d84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d022      	beq.n	800974a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	699a      	ldr	r2, [r3, #24]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	18d1      	adds	r1, r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	6978      	ldr	r0, [r7, #20]
 8009712:	f000 f8d1 	bl	80098b8 <prvInsertTimerInActiveList>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d01f      	beq.n	800975c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800971c:	2300      	movs	r3, #0
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	2300      	movs	r3, #0
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	2100      	movs	r1, #0
 8009726:	6978      	ldr	r0, [r7, #20]
 8009728:	f7ff ff88 	bl	800963c <xTimerGenericCommand>
 800972c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d113      	bne.n	800975c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	60fb      	str	r3, [r7, #12]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009750:	f023 0301 	bic.w	r3, r3, #1
 8009754:	b2da      	uxtb	r2, r3
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	6978      	ldr	r0, [r7, #20]
 8009762:	4798      	blx	r3
}
 8009764:	bf00      	nop
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000f48 	.word	0x20000f48

08009770 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f857 	bl	8009830 <prvGetNextExpireTime>
 8009782:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	4619      	mov	r1, r3
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 f803 	bl	8009794 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800978e:	f000 f8d5 	bl	800993c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009792:	e7f1      	b.n	8009778 <prvTimerTask+0x8>

08009794 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800979e:	f7ff fa43 	bl	8008c28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097a2:	f107 0308 	add.w	r3, r7, #8
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f866 	bl	8009878 <prvSampleTimeNow>
 80097ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d130      	bne.n	8009816 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10a      	bne.n	80097d0 <prvProcessTimerOrBlockTask+0x3c>
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d806      	bhi.n	80097d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097c2:	f7ff fa3f 	bl	8008c44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097c6:	68f9      	ldr	r1, [r7, #12]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff ff85 	bl	80096d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097ce:	e024      	b.n	800981a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d008      	beq.n	80097e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097d6:	4b13      	ldr	r3, [pc, #76]	; (8009824 <prvProcessTimerOrBlockTask+0x90>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <prvProcessTimerOrBlockTask+0x50>
 80097e0:	2301      	movs	r3, #1
 80097e2:	e000      	b.n	80097e6 <prvProcessTimerOrBlockTask+0x52>
 80097e4:	2300      	movs	r3, #0
 80097e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097e8:	4b0f      	ldr	r3, [pc, #60]	; (8009828 <prvProcessTimerOrBlockTask+0x94>)
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	4619      	mov	r1, r3
 80097f6:	f7fe ffa7 	bl	8008748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097fa:	f7ff fa23 	bl	8008c44 <xTaskResumeAll>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10a      	bne.n	800981a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009804:	4b09      	ldr	r3, [pc, #36]	; (800982c <prvProcessTimerOrBlockTask+0x98>)
 8009806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	f3bf 8f6f 	isb	sy
}
 8009814:	e001      	b.n	800981a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009816:	f7ff fa15 	bl	8008c44 <xTaskResumeAll>
}
 800981a:	bf00      	nop
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000f4c 	.word	0x20000f4c
 8009828:	20000f50 	.word	0x20000f50
 800982c:	e000ed04 	.word	0xe000ed04

08009830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009838:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <prvGetNextExpireTime+0x44>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <prvGetNextExpireTime+0x16>
 8009842:	2201      	movs	r2, #1
 8009844:	e000      	b.n	8009848 <prvGetNextExpireTime+0x18>
 8009846:	2200      	movs	r2, #0
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d105      	bne.n	8009860 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <prvGetNextExpireTime+0x44>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	e001      	b.n	8009864 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009864:	68fb      	ldr	r3, [r7, #12]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	20000f48 	.word	0x20000f48

08009878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009880:	f7ff fa7e 	bl	8008d80 <xTaskGetTickCount>
 8009884:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009886:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <prvSampleTimeNow+0x3c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	429a      	cmp	r2, r3
 800988e:	d205      	bcs.n	800989c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009890:	f000 f936 	bl	8009b00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	e002      	b.n	80098a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098a2:	4a04      	ldr	r2, [pc, #16]	; (80098b4 <prvSampleTimeNow+0x3c>)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098a8:	68fb      	ldr	r3, [r7, #12]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000f58 	.word	0x20000f58

080098b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d812      	bhi.n	8009904 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	1ad2      	subs	r2, r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d302      	bcc.n	80098f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098ec:	2301      	movs	r3, #1
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	e01b      	b.n	800992a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098f2:	4b10      	ldr	r3, [pc, #64]	; (8009934 <prvInsertTimerInActiveList+0x7c>)
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7fe fa08 	bl	8007d12 <vListInsert>
 8009902:	e012      	b.n	800992a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	d206      	bcs.n	800991a <prvInsertTimerInActiveList+0x62>
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009914:	2301      	movs	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	e007      	b.n	800992a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800991a:	4b07      	ldr	r3, [pc, #28]	; (8009938 <prvInsertTimerInActiveList+0x80>)
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3304      	adds	r3, #4
 8009922:	4619      	mov	r1, r3
 8009924:	4610      	mov	r0, r2
 8009926:	f7fe f9f4 	bl	8007d12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800992a:	697b      	ldr	r3, [r7, #20]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	20000f4c 	.word	0x20000f4c
 8009938:	20000f48 	.word	0x20000f48

0800993c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08e      	sub	sp, #56	; 0x38
 8009940:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009942:	e0ca      	b.n	8009ada <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	da18      	bge.n	800997c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800994a:	1d3b      	adds	r3, r7, #4
 800994c:	3304      	adds	r3, #4
 800994e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10a      	bne.n	800996c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	61fb      	str	r3, [r7, #28]
}
 8009968:	bf00      	nop
 800996a:	e7fe      	b.n	800996a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009972:	6850      	ldr	r0, [r2, #4]
 8009974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009976:	6892      	ldr	r2, [r2, #8]
 8009978:	4611      	mov	r1, r2
 800997a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f2c0 80aa 	blt.w	8009ad8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	3304      	adds	r3, #4
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe f9f5 	bl	8007d84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800999a:	463b      	mov	r3, r7
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff ff6b 	bl	8009878 <prvSampleTimeNow>
 80099a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b09      	cmp	r3, #9
 80099a8:	f200 8097 	bhi.w	8009ada <prvProcessReceivedCommands+0x19e>
 80099ac:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <prvProcessReceivedCommands+0x78>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099dd 	.word	0x080099dd
 80099b8:	080099dd 	.word	0x080099dd
 80099bc:	080099dd 	.word	0x080099dd
 80099c0:	08009a51 	.word	0x08009a51
 80099c4:	08009a65 	.word	0x08009a65
 80099c8:	08009aaf 	.word	0x08009aaf
 80099cc:	080099dd 	.word	0x080099dd
 80099d0:	080099dd 	.word	0x080099dd
 80099d4:	08009a51 	.word	0x08009a51
 80099d8:	08009a65 	.word	0x08009a65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099e2:	f043 0301 	orr.w	r3, r3, #1
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	18d1      	adds	r1, r2, r3
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099fc:	f7ff ff5c 	bl	80098b8 <prvInsertTimerInActiveList>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d069      	beq.n	8009ada <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a14:	f003 0304 	and.w	r3, r3, #4
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d05e      	beq.n	8009ada <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	441a      	add	r2, r3
 8009a24:	2300      	movs	r3, #0
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a2e:	f7ff fe05 	bl	800963c <xTimerGenericCommand>
 8009a32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d14f      	bne.n	8009ada <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	61bb      	str	r3, [r7, #24]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a56:	f023 0301 	bic.w	r3, r3, #1
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a62:	e03a      	b.n	8009ada <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a6a:	f043 0301 	orr.w	r3, r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10a      	bne.n	8009a9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	617b      	str	r3, [r7, #20]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	699a      	ldr	r2, [r3, #24]
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	18d1      	adds	r1, r2, r3
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa8:	f7ff ff06 	bl	80098b8 <prvInsertTimerInActiveList>
					break;
 8009aac:	e015      	b.n	8009ada <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ab4:	f003 0302 	and.w	r3, r3, #2
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d103      	bne.n	8009ac4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009abe:	f000 fba1 	bl	800a204 <vPortFree>
 8009ac2:	e00a      	b.n	8009ada <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aca:	f023 0301 	bic.w	r3, r3, #1
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ad6:	e000      	b.n	8009ada <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009ad8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ada:	4b08      	ldr	r3, [pc, #32]	; (8009afc <prvProcessReceivedCommands+0x1c0>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	1d39      	adds	r1, r7, #4
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe fc16 	bl	8008314 <xQueueReceive>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f47f af2a 	bne.w	8009944 <prvProcessReceivedCommands+0x8>
	}
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	3730      	adds	r7, #48	; 0x30
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20000f50 	.word	0x20000f50

08009b00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b06:	e048      	b.n	8009b9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b08:	4b2d      	ldr	r3, [pc, #180]	; (8009bc0 <prvSwitchTimerLists+0xc0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b12:	4b2b      	ldr	r3, [pc, #172]	; (8009bc0 <prvSwitchTimerLists+0xc0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe f92f 	bl	8007d84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d02e      	beq.n	8009b9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	4413      	add	r3, r2
 8009b44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d90e      	bls.n	8009b6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b5a:	4b19      	ldr	r3, [pc, #100]	; (8009bc0 <prvSwitchTimerLists+0xc0>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3304      	adds	r3, #4
 8009b62:	4619      	mov	r1, r3
 8009b64:	4610      	mov	r0, r2
 8009b66:	f7fe f8d4 	bl	8007d12 <vListInsert>
 8009b6a:	e016      	b.n	8009b9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	2300      	movs	r3, #0
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	2100      	movs	r1, #0
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7ff fd60 	bl	800963c <xTimerGenericCommand>
 8009b7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	603b      	str	r3, [r7, #0]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <prvSwitchTimerLists+0xc0>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1b1      	bne.n	8009b08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <prvSwitchTimerLists+0xc0>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009baa:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <prvSwitchTimerLists+0xc4>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a04      	ldr	r2, [pc, #16]	; (8009bc0 <prvSwitchTimerLists+0xc0>)
 8009bb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bb2:	4a04      	ldr	r2, [pc, #16]	; (8009bc4 <prvSwitchTimerLists+0xc4>)
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	6013      	str	r3, [r2, #0]
}
 8009bb8:	bf00      	nop
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20000f48 	.word	0x20000f48
 8009bc4:	20000f4c 	.word	0x20000f4c

08009bc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bce:	f000 f969 	bl	8009ea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bd2:	4b15      	ldr	r3, [pc, #84]	; (8009c28 <prvCheckForValidListAndQueue+0x60>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d120      	bne.n	8009c1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bda:	4814      	ldr	r0, [pc, #80]	; (8009c2c <prvCheckForValidListAndQueue+0x64>)
 8009bdc:	f7fe f848 	bl	8007c70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009be0:	4813      	ldr	r0, [pc, #76]	; (8009c30 <prvCheckForValidListAndQueue+0x68>)
 8009be2:	f7fe f845 	bl	8007c70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009be6:	4b13      	ldr	r3, [pc, #76]	; (8009c34 <prvCheckForValidListAndQueue+0x6c>)
 8009be8:	4a10      	ldr	r2, [pc, #64]	; (8009c2c <prvCheckForValidListAndQueue+0x64>)
 8009bea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009bec:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <prvCheckForValidListAndQueue+0x70>)
 8009bee:	4a10      	ldr	r2, [pc, #64]	; (8009c30 <prvCheckForValidListAndQueue+0x68>)
 8009bf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <prvCheckForValidListAndQueue+0x74>)
 8009bf8:	4a11      	ldr	r2, [pc, #68]	; (8009c40 <prvCheckForValidListAndQueue+0x78>)
 8009bfa:	2110      	movs	r1, #16
 8009bfc:	200a      	movs	r0, #10
 8009bfe:	f7fe f953 	bl	8007ea8 <xQueueGenericCreateStatic>
 8009c02:	4603      	mov	r3, r0
 8009c04:	4a08      	ldr	r2, [pc, #32]	; (8009c28 <prvCheckForValidListAndQueue+0x60>)
 8009c06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c08:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <prvCheckForValidListAndQueue+0x60>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d005      	beq.n	8009c1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c10:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <prvCheckForValidListAndQueue+0x60>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	490b      	ldr	r1, [pc, #44]	; (8009c44 <prvCheckForValidListAndQueue+0x7c>)
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fe fd6c 	bl	80086f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c1c:	f000 f972 	bl	8009f04 <vPortExitCritical>
}
 8009c20:	bf00      	nop
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000f50 	.word	0x20000f50
 8009c2c:	20000f20 	.word	0x20000f20
 8009c30:	20000f34 	.word	0x20000f34
 8009c34:	20000f48 	.word	0x20000f48
 8009c38:	20000f4c 	.word	0x20000f4c
 8009c3c:	20000ffc 	.word	0x20000ffc
 8009c40:	20000f5c 	.word	0x20000f5c
 8009c44:	0800cd2c 	.word	0x0800cd2c

08009c48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3b04      	subs	r3, #4
 8009c58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3b04      	subs	r3, #4
 8009c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f023 0201 	bic.w	r2, r3, #1
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3b04      	subs	r3, #4
 8009c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c78:	4a0c      	ldr	r2, [pc, #48]	; (8009cac <pxPortInitialiseStack+0x64>)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3b14      	subs	r3, #20
 8009c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3b04      	subs	r3, #4
 8009c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f06f 0202 	mvn.w	r2, #2
 8009c96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3b20      	subs	r3, #32
 8009c9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	08009cb1 	.word	0x08009cb1

08009cb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cba:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <prvTaskExitError+0x54>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc2:	d00a      	beq.n	8009cda <prvTaskExitError+0x2a>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	60fb      	str	r3, [r7, #12]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <prvTaskExitError+0x28>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	60bb      	str	r3, [r7, #8]
}
 8009cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cee:	bf00      	nop
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0fc      	beq.n	8009cf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	2000013c 	.word	0x2000013c
	...

08009d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d10:	4b07      	ldr	r3, [pc, #28]	; (8009d30 <pxCurrentTCBConst2>)
 8009d12:	6819      	ldr	r1, [r3, #0]
 8009d14:	6808      	ldr	r0, [r1, #0]
 8009d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1a:	f380 8809 	msr	PSP, r0
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f04f 0000 	mov.w	r0, #0
 8009d26:	f380 8811 	msr	BASEPRI, r0
 8009d2a:	4770      	bx	lr
 8009d2c:	f3af 8000 	nop.w

08009d30 <pxCurrentTCBConst2>:
 8009d30:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d34:	bf00      	nop
 8009d36:	bf00      	nop

08009d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d38:	4808      	ldr	r0, [pc, #32]	; (8009d5c <prvPortStartFirstTask+0x24>)
 8009d3a:	6800      	ldr	r0, [r0, #0]
 8009d3c:	6800      	ldr	r0, [r0, #0]
 8009d3e:	f380 8808 	msr	MSP, r0
 8009d42:	f04f 0000 	mov.w	r0, #0
 8009d46:	f380 8814 	msr	CONTROL, r0
 8009d4a:	b662      	cpsie	i
 8009d4c:	b661      	cpsie	f
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	df00      	svc	0
 8009d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d5a:	bf00      	nop
 8009d5c:	e000ed08 	.word	0xe000ed08

08009d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d66:	4b46      	ldr	r3, [pc, #280]	; (8009e80 <xPortStartScheduler+0x120>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a46      	ldr	r2, [pc, #280]	; (8009e84 <xPortStartScheduler+0x124>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d10a      	bne.n	8009d86 <xPortStartScheduler+0x26>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	613b      	str	r3, [r7, #16]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d86:	4b3e      	ldr	r3, [pc, #248]	; (8009e80 <xPortStartScheduler+0x120>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a3f      	ldr	r2, [pc, #252]	; (8009e88 <xPortStartScheduler+0x128>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d10a      	bne.n	8009da6 <xPortStartScheduler+0x46>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	60fb      	str	r3, [r7, #12]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009da6:	4b39      	ldr	r3, [pc, #228]	; (8009e8c <xPortStartScheduler+0x12c>)
 8009da8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	22ff      	movs	r2, #255	; 0xff
 8009db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	4b31      	ldr	r3, [pc, #196]	; (8009e90 <xPortStartScheduler+0x130>)
 8009dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dce:	4b31      	ldr	r3, [pc, #196]	; (8009e94 <xPortStartScheduler+0x134>)
 8009dd0:	2207      	movs	r2, #7
 8009dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dd4:	e009      	b.n	8009dea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009dd6:	4b2f      	ldr	r3, [pc, #188]	; (8009e94 <xPortStartScheduler+0x134>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	4a2d      	ldr	r2, [pc, #180]	; (8009e94 <xPortStartScheduler+0x134>)
 8009dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dea:	78fb      	ldrb	r3, [r7, #3]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df2:	2b80      	cmp	r3, #128	; 0x80
 8009df4:	d0ef      	beq.n	8009dd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009df6:	4b27      	ldr	r3, [pc, #156]	; (8009e94 <xPortStartScheduler+0x134>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f1c3 0307 	rsb	r3, r3, #7
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d00a      	beq.n	8009e18 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	60bb      	str	r3, [r7, #8]
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e18:	4b1e      	ldr	r3, [pc, #120]	; (8009e94 <xPortStartScheduler+0x134>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	021b      	lsls	r3, r3, #8
 8009e1e:	4a1d      	ldr	r2, [pc, #116]	; (8009e94 <xPortStartScheduler+0x134>)
 8009e20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e22:	4b1c      	ldr	r3, [pc, #112]	; (8009e94 <xPortStartScheduler+0x134>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e2a:	4a1a      	ldr	r2, [pc, #104]	; (8009e94 <xPortStartScheduler+0x134>)
 8009e2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e36:	4b18      	ldr	r3, [pc, #96]	; (8009e98 <xPortStartScheduler+0x138>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a17      	ldr	r2, [pc, #92]	; (8009e98 <xPortStartScheduler+0x138>)
 8009e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e42:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <xPortStartScheduler+0x138>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a14      	ldr	r2, [pc, #80]	; (8009e98 <xPortStartScheduler+0x138>)
 8009e48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e4e:	f000 f8dd 	bl	800a00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e52:	4b12      	ldr	r3, [pc, #72]	; (8009e9c <xPortStartScheduler+0x13c>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e58:	f000 f8fc 	bl	800a054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e5c:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <xPortStartScheduler+0x140>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a0f      	ldr	r2, [pc, #60]	; (8009ea0 <xPortStartScheduler+0x140>)
 8009e62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e68:	f7ff ff66 	bl	8009d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e6c:	f7ff f852 	bl	8008f14 <vTaskSwitchContext>
	prvTaskExitError();
 8009e70:	f7ff ff1e 	bl	8009cb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	e000ed00 	.word	0xe000ed00
 8009e84:	410fc271 	.word	0x410fc271
 8009e88:	410fc270 	.word	0x410fc270
 8009e8c:	e000e400 	.word	0xe000e400
 8009e90:	2000104c 	.word	0x2000104c
 8009e94:	20001050 	.word	0x20001050
 8009e98:	e000ed20 	.word	0xe000ed20
 8009e9c:	2000013c 	.word	0x2000013c
 8009ea0:	e000ef34 	.word	0xe000ef34

08009ea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	607b      	str	r3, [r7, #4]
}
 8009ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <vPortEnterCritical+0x58>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	4a0d      	ldr	r2, [pc, #52]	; (8009efc <vPortEnterCritical+0x58>)
 8009ec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ec8:	4b0c      	ldr	r3, [pc, #48]	; (8009efc <vPortEnterCritical+0x58>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d10f      	bne.n	8009ef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <vPortEnterCritical+0x5c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	603b      	str	r3, [r7, #0]
}
 8009eec:	bf00      	nop
 8009eee:	e7fe      	b.n	8009eee <vPortEnterCritical+0x4a>
	}
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	2000013c 	.word	0x2000013c
 8009f00:	e000ed04 	.word	0xe000ed04

08009f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f0a:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <vPortExitCritical+0x50>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10a      	bne.n	8009f28 <vPortExitCritical+0x24>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	607b      	str	r3, [r7, #4]
}
 8009f24:	bf00      	nop
 8009f26:	e7fe      	b.n	8009f26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f28:	4b0a      	ldr	r3, [pc, #40]	; (8009f54 <vPortExitCritical+0x50>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	4a09      	ldr	r2, [pc, #36]	; (8009f54 <vPortExitCritical+0x50>)
 8009f30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f32:	4b08      	ldr	r3, [pc, #32]	; (8009f54 <vPortExitCritical+0x50>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d105      	bne.n	8009f46 <vPortExitCritical+0x42>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	f383 8811 	msr	BASEPRI, r3
}
 8009f44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	2000013c 	.word	0x2000013c
	...

08009f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f60:	f3ef 8009 	mrs	r0, PSP
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	4b15      	ldr	r3, [pc, #84]	; (8009fc0 <pxCurrentTCBConst>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	f01e 0f10 	tst.w	lr, #16
 8009f70:	bf08      	it	eq
 8009f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7a:	6010      	str	r0, [r2, #0]
 8009f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f84:	f380 8811 	msr	BASEPRI, r0
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f7fe ffc0 	bl	8008f14 <vTaskSwitchContext>
 8009f94:	f04f 0000 	mov.w	r0, #0
 8009f98:	f380 8811 	msr	BASEPRI, r0
 8009f9c:	bc09      	pop	{r0, r3}
 8009f9e:	6819      	ldr	r1, [r3, #0]
 8009fa0:	6808      	ldr	r0, [r1, #0]
 8009fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa6:	f01e 0f10 	tst.w	lr, #16
 8009faa:	bf08      	it	eq
 8009fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fb0:	f380 8809 	msr	PSP, r0
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	f3af 8000 	nop.w

08009fc0 <pxCurrentTCBConst>:
 8009fc0:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop

08009fc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	607b      	str	r3, [r7, #4]
}
 8009fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fe2:	f7fe fedd 	bl	8008da0 <xTaskIncrementTick>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d003      	beq.n	8009ff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fec:	4b06      	ldr	r3, [pc, #24]	; (800a008 <xPortSysTickHandler+0x40>)
 8009fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	f383 8811 	msr	BASEPRI, r3
}
 8009ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	e000ed04 	.word	0xe000ed04

0800a00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a010:	4b0b      	ldr	r3, [pc, #44]	; (800a040 <vPortSetupTimerInterrupt+0x34>)
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a016:	4b0b      	ldr	r3, [pc, #44]	; (800a044 <vPortSetupTimerInterrupt+0x38>)
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a01c:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <vPortSetupTimerInterrupt+0x3c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <vPortSetupTimerInterrupt+0x40>)
 800a022:	fba2 2303 	umull	r2, r3, r2, r3
 800a026:	099b      	lsrs	r3, r3, #6
 800a028:	4a09      	ldr	r2, [pc, #36]	; (800a050 <vPortSetupTimerInterrupt+0x44>)
 800a02a:	3b01      	subs	r3, #1
 800a02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a02e:	4b04      	ldr	r3, [pc, #16]	; (800a040 <vPortSetupTimerInterrupt+0x34>)
 800a030:	2207      	movs	r2, #7
 800a032:	601a      	str	r2, [r3, #0]
}
 800a034:	bf00      	nop
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	e000e010 	.word	0xe000e010
 800a044:	e000e018 	.word	0xe000e018
 800a048:	20000130 	.word	0x20000130
 800a04c:	10624dd3 	.word	0x10624dd3
 800a050:	e000e014 	.word	0xe000e014

0800a054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a064 <vPortEnableVFP+0x10>
 800a058:	6801      	ldr	r1, [r0, #0]
 800a05a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a05e:	6001      	str	r1, [r0, #0]
 800a060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a062:	bf00      	nop
 800a064:	e000ed88 	.word	0xe000ed88

0800a068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a06e:	f3ef 8305 	mrs	r3, IPSR
 800a072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b0f      	cmp	r3, #15
 800a078:	d914      	bls.n	800a0a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a07a:	4a17      	ldr	r2, [pc, #92]	; (800a0d8 <vPortValidateInterruptPriority+0x70>)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4413      	add	r3, r2
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a084:	4b15      	ldr	r3, [pc, #84]	; (800a0dc <vPortValidateInterruptPriority+0x74>)
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	7afa      	ldrb	r2, [r7, #11]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d20a      	bcs.n	800a0a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	607b      	str	r3, [r7, #4]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <vPortValidateInterruptPriority+0x78>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0ac:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <vPortValidateInterruptPriority+0x7c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d90a      	bls.n	800a0ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	603b      	str	r3, [r7, #0]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <vPortValidateInterruptPriority+0x60>
	}
 800a0ca:	bf00      	nop
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	e000e3f0 	.word	0xe000e3f0
 800a0dc:	2000104c 	.word	0x2000104c
 800a0e0:	e000ed0c 	.word	0xe000ed0c
 800a0e4:	20001050 	.word	0x20001050

0800a0e8 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800a0f4:	f7fe fd98 	bl	8008c28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800a0f8:	4b3e      	ldr	r3, [pc, #248]	; (800a1f4 <pvPortMalloc+0x10c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d104      	bne.n	800a10a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 800a100:	f000 f8ba 	bl	800a278 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800a104:	4b3b      	ldr	r3, [pc, #236]	; (800a1f4 <pvPortMalloc+0x10c>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00e      	beq.n	800a12e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 800a110:	2308      	movs	r3, #8
 800a112:	461a      	mov	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4413      	add	r3, r2
 800a118:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f003 0307 	and.w	r3, r3, #7
 800a120:	2b00      	cmp	r3, #0
 800a122:	d004      	beq.n	800a12e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f023 0307 	bic.w	r3, r3, #7
 800a12a:	3308      	adds	r3, #8
 800a12c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d057      	beq.n	800a1e4 <pvPortMalloc+0xfc>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f247 5227 	movw	r2, #29991	; 0x7527
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d852      	bhi.n	800a1e4 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800a13e:	4b2e      	ldr	r3, [pc, #184]	; (800a1f8 <pvPortMalloc+0x110>)
 800a140:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800a142:	4b2d      	ldr	r3, [pc, #180]	; (800a1f8 <pvPortMalloc+0x110>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a148:	e004      	b.n	800a154 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d903      	bls.n	800a166 <pvPortMalloc+0x7e>
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1f1      	bne.n	800a14a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4a24      	ldr	r2, [pc, #144]	; (800a1fc <pvPortMalloc+0x114>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d03a      	beq.n	800a1e4 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2208      	movs	r2, #8
 800a174:	4413      	add	r3, r2
 800a176:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	2208      	movs	r2, #8
 800a18a:	0052      	lsls	r2, r2, #1
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d922      	bls.n	800a1d6 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4413      	add	r3, r2
 800a196:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	1ad2      	subs	r2, r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	60bb      	str	r3, [r7, #8]
 800a1b0:	4b11      	ldr	r3, [pc, #68]	; (800a1f8 <pvPortMalloc+0x110>)
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	e002      	b.n	800a1bc <pvPortMalloc+0xd4>
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	613b      	str	r3, [r7, #16]
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d8f6      	bhi.n	800a1b6 <pvPortMalloc+0xce>
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1d6:	4b0a      	ldr	r3, [pc, #40]	; (800a200 <pvPortMalloc+0x118>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	4a07      	ldr	r2, [pc, #28]	; (800a200 <pvPortMalloc+0x118>)
 800a1e2:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1e4:	f7fe fd2e 	bl	8008c44 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800a1e8:	697b      	ldr	r3, [r7, #20]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20008594 	.word	0x20008594
 800a1f8:	20008584 	.word	0x20008584
 800a1fc:	2000858c 	.word	0x2000858c
 800a200:	20000140 	.word	0x20000140

0800a204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d027      	beq.n	800a266 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800a216:	2308      	movs	r3, #8
 800a218:	425b      	negs	r3, r3
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	4413      	add	r3, r2
 800a21e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800a224:	f7fe fd00 	bl	8008c28 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	60bb      	str	r3, [r7, #8]
 800a22e:	4b10      	ldr	r3, [pc, #64]	; (800a270 <vPortFree+0x6c>)
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	e002      	b.n	800a23a <vPortFree+0x36>
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	429a      	cmp	r2, r3
 800a244:	d8f6      	bhi.n	800a234 <vPortFree+0x30>
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	4b06      	ldr	r3, [pc, #24]	; (800a274 <vPortFree+0x70>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4413      	add	r3, r2
 800a25e:	4a05      	ldr	r2, [pc, #20]	; (800a274 <vPortFree+0x70>)
 800a260:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800a262:	f7fe fcef 	bl	8008c44 <xTaskResumeAll>
	}
}
 800a266:	bf00      	nop
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	20008584 	.word	0x20008584
 800a274:	20000140 	.word	0x20000140

0800a278 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800a27e:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <prvHeapInit+0x48>)
 800a280:	f023 0307 	bic.w	r3, r3, #7
 800a284:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a286:	4a0f      	ldr	r2, [pc, #60]	; (800a2c4 <prvHeapInit+0x4c>)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a28c:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <prvHeapInit+0x4c>)
 800a28e:	2200      	movs	r2, #0
 800a290:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800a292:	4b0d      	ldr	r3, [pc, #52]	; (800a2c8 <prvHeapInit+0x50>)
 800a294:	f247 5228 	movw	r2, #29992	; 0x7528
 800a298:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800a29a:	4b0b      	ldr	r3, [pc, #44]	; (800a2c8 <prvHeapInit+0x50>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	f247 5228 	movw	r2, #29992	; 0x7528
 800a2aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	4a06      	ldr	r2, [pc, #24]	; (800a2c8 <prvHeapInit+0x50>)
 800a2b0:	601a      	str	r2, [r3, #0]
}
 800a2b2:	bf00      	nop
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	2000105c 	.word	0x2000105c
 800a2c4:	20008584 	.word	0x20008584
 800a2c8:	2000858c 	.word	0x2000858c

0800a2cc <__errno>:
 800a2cc:	4b01      	ldr	r3, [pc, #4]	; (800a2d4 <__errno+0x8>)
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000144 	.word	0x20000144

0800a2d8 <__libc_init_array>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	4d0d      	ldr	r5, [pc, #52]	; (800a310 <__libc_init_array+0x38>)
 800a2dc:	4c0d      	ldr	r4, [pc, #52]	; (800a314 <__libc_init_array+0x3c>)
 800a2de:	1b64      	subs	r4, r4, r5
 800a2e0:	10a4      	asrs	r4, r4, #2
 800a2e2:	2600      	movs	r6, #0
 800a2e4:	42a6      	cmp	r6, r4
 800a2e6:	d109      	bne.n	800a2fc <__libc_init_array+0x24>
 800a2e8:	4d0b      	ldr	r5, [pc, #44]	; (800a318 <__libc_init_array+0x40>)
 800a2ea:	4c0c      	ldr	r4, [pc, #48]	; (800a31c <__libc_init_array+0x44>)
 800a2ec:	f002 fcf2 	bl	800ccd4 <_init>
 800a2f0:	1b64      	subs	r4, r4, r5
 800a2f2:	10a4      	asrs	r4, r4, #2
 800a2f4:	2600      	movs	r6, #0
 800a2f6:	42a6      	cmp	r6, r4
 800a2f8:	d105      	bne.n	800a306 <__libc_init_array+0x2e>
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a300:	4798      	blx	r3
 800a302:	3601      	adds	r6, #1
 800a304:	e7ee      	b.n	800a2e4 <__libc_init_array+0xc>
 800a306:	f855 3b04 	ldr.w	r3, [r5], #4
 800a30a:	4798      	blx	r3
 800a30c:	3601      	adds	r6, #1
 800a30e:	e7f2      	b.n	800a2f6 <__libc_init_array+0x1e>
 800a310:	0800d1d4 	.word	0x0800d1d4
 800a314:	0800d1d4 	.word	0x0800d1d4
 800a318:	0800d1d4 	.word	0x0800d1d4
 800a31c:	0800d1d8 	.word	0x0800d1d8

0800a320 <malloc>:
 800a320:	4b02      	ldr	r3, [pc, #8]	; (800a32c <malloc+0xc>)
 800a322:	4601      	mov	r1, r0
 800a324:	6818      	ldr	r0, [r3, #0]
 800a326:	f000 b879 	b.w	800a41c <_malloc_r>
 800a32a:	bf00      	nop
 800a32c:	20000144 	.word	0x20000144

0800a330 <memcpy>:
 800a330:	440a      	add	r2, r1
 800a332:	4291      	cmp	r1, r2
 800a334:	f100 33ff 	add.w	r3, r0, #4294967295
 800a338:	d100      	bne.n	800a33c <memcpy+0xc>
 800a33a:	4770      	bx	lr
 800a33c:	b510      	push	{r4, lr}
 800a33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a342:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a346:	4291      	cmp	r1, r2
 800a348:	d1f9      	bne.n	800a33e <memcpy+0xe>
 800a34a:	bd10      	pop	{r4, pc}

0800a34c <memset>:
 800a34c:	4402      	add	r2, r0
 800a34e:	4603      	mov	r3, r0
 800a350:	4293      	cmp	r3, r2
 800a352:	d100      	bne.n	800a356 <memset+0xa>
 800a354:	4770      	bx	lr
 800a356:	f803 1b01 	strb.w	r1, [r3], #1
 800a35a:	e7f9      	b.n	800a350 <memset+0x4>

0800a35c <_calloc_r>:
 800a35c:	b513      	push	{r0, r1, r4, lr}
 800a35e:	434a      	muls	r2, r1
 800a360:	4611      	mov	r1, r2
 800a362:	9201      	str	r2, [sp, #4]
 800a364:	f000 f85a 	bl	800a41c <_malloc_r>
 800a368:	4604      	mov	r4, r0
 800a36a:	b118      	cbz	r0, 800a374 <_calloc_r+0x18>
 800a36c:	9a01      	ldr	r2, [sp, #4]
 800a36e:	2100      	movs	r1, #0
 800a370:	f7ff ffec 	bl	800a34c <memset>
 800a374:	4620      	mov	r0, r4
 800a376:	b002      	add	sp, #8
 800a378:	bd10      	pop	{r4, pc}
	...

0800a37c <_free_r>:
 800a37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a37e:	2900      	cmp	r1, #0
 800a380:	d048      	beq.n	800a414 <_free_r+0x98>
 800a382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a386:	9001      	str	r0, [sp, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f1a1 0404 	sub.w	r4, r1, #4
 800a38e:	bfb8      	it	lt
 800a390:	18e4      	addlt	r4, r4, r3
 800a392:	f001 fb95 	bl	800bac0 <__malloc_lock>
 800a396:	4a20      	ldr	r2, [pc, #128]	; (800a418 <_free_r+0x9c>)
 800a398:	9801      	ldr	r0, [sp, #4]
 800a39a:	6813      	ldr	r3, [r2, #0]
 800a39c:	4615      	mov	r5, r2
 800a39e:	b933      	cbnz	r3, 800a3ae <_free_r+0x32>
 800a3a0:	6063      	str	r3, [r4, #4]
 800a3a2:	6014      	str	r4, [r2, #0]
 800a3a4:	b003      	add	sp, #12
 800a3a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3aa:	f001 bb8f 	b.w	800bacc <__malloc_unlock>
 800a3ae:	42a3      	cmp	r3, r4
 800a3b0:	d90b      	bls.n	800a3ca <_free_r+0x4e>
 800a3b2:	6821      	ldr	r1, [r4, #0]
 800a3b4:	1862      	adds	r2, r4, r1
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	bf04      	itt	eq
 800a3ba:	681a      	ldreq	r2, [r3, #0]
 800a3bc:	685b      	ldreq	r3, [r3, #4]
 800a3be:	6063      	str	r3, [r4, #4]
 800a3c0:	bf04      	itt	eq
 800a3c2:	1852      	addeq	r2, r2, r1
 800a3c4:	6022      	streq	r2, [r4, #0]
 800a3c6:	602c      	str	r4, [r5, #0]
 800a3c8:	e7ec      	b.n	800a3a4 <_free_r+0x28>
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	b10b      	cbz	r3, 800a3d4 <_free_r+0x58>
 800a3d0:	42a3      	cmp	r3, r4
 800a3d2:	d9fa      	bls.n	800a3ca <_free_r+0x4e>
 800a3d4:	6811      	ldr	r1, [r2, #0]
 800a3d6:	1855      	adds	r5, r2, r1
 800a3d8:	42a5      	cmp	r5, r4
 800a3da:	d10b      	bne.n	800a3f4 <_free_r+0x78>
 800a3dc:	6824      	ldr	r4, [r4, #0]
 800a3de:	4421      	add	r1, r4
 800a3e0:	1854      	adds	r4, r2, r1
 800a3e2:	42a3      	cmp	r3, r4
 800a3e4:	6011      	str	r1, [r2, #0]
 800a3e6:	d1dd      	bne.n	800a3a4 <_free_r+0x28>
 800a3e8:	681c      	ldr	r4, [r3, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	6053      	str	r3, [r2, #4]
 800a3ee:	4421      	add	r1, r4
 800a3f0:	6011      	str	r1, [r2, #0]
 800a3f2:	e7d7      	b.n	800a3a4 <_free_r+0x28>
 800a3f4:	d902      	bls.n	800a3fc <_free_r+0x80>
 800a3f6:	230c      	movs	r3, #12
 800a3f8:	6003      	str	r3, [r0, #0]
 800a3fa:	e7d3      	b.n	800a3a4 <_free_r+0x28>
 800a3fc:	6825      	ldr	r5, [r4, #0]
 800a3fe:	1961      	adds	r1, r4, r5
 800a400:	428b      	cmp	r3, r1
 800a402:	bf04      	itt	eq
 800a404:	6819      	ldreq	r1, [r3, #0]
 800a406:	685b      	ldreq	r3, [r3, #4]
 800a408:	6063      	str	r3, [r4, #4]
 800a40a:	bf04      	itt	eq
 800a40c:	1949      	addeq	r1, r1, r5
 800a40e:	6021      	streq	r1, [r4, #0]
 800a410:	6054      	str	r4, [r2, #4]
 800a412:	e7c7      	b.n	800a3a4 <_free_r+0x28>
 800a414:	b003      	add	sp, #12
 800a416:	bd30      	pop	{r4, r5, pc}
 800a418:	20008598 	.word	0x20008598

0800a41c <_malloc_r>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	1ccd      	adds	r5, r1, #3
 800a420:	f025 0503 	bic.w	r5, r5, #3
 800a424:	3508      	adds	r5, #8
 800a426:	2d0c      	cmp	r5, #12
 800a428:	bf38      	it	cc
 800a42a:	250c      	movcc	r5, #12
 800a42c:	2d00      	cmp	r5, #0
 800a42e:	4606      	mov	r6, r0
 800a430:	db01      	blt.n	800a436 <_malloc_r+0x1a>
 800a432:	42a9      	cmp	r1, r5
 800a434:	d903      	bls.n	800a43e <_malloc_r+0x22>
 800a436:	230c      	movs	r3, #12
 800a438:	6033      	str	r3, [r6, #0]
 800a43a:	2000      	movs	r0, #0
 800a43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a43e:	f001 fb3f 	bl	800bac0 <__malloc_lock>
 800a442:	4921      	ldr	r1, [pc, #132]	; (800a4c8 <_malloc_r+0xac>)
 800a444:	680a      	ldr	r2, [r1, #0]
 800a446:	4614      	mov	r4, r2
 800a448:	b99c      	cbnz	r4, 800a472 <_malloc_r+0x56>
 800a44a:	4f20      	ldr	r7, [pc, #128]	; (800a4cc <_malloc_r+0xb0>)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	b923      	cbnz	r3, 800a45a <_malloc_r+0x3e>
 800a450:	4621      	mov	r1, r4
 800a452:	4630      	mov	r0, r6
 800a454:	f000 fca6 	bl	800ada4 <_sbrk_r>
 800a458:	6038      	str	r0, [r7, #0]
 800a45a:	4629      	mov	r1, r5
 800a45c:	4630      	mov	r0, r6
 800a45e:	f000 fca1 	bl	800ada4 <_sbrk_r>
 800a462:	1c43      	adds	r3, r0, #1
 800a464:	d123      	bne.n	800a4ae <_malloc_r+0x92>
 800a466:	230c      	movs	r3, #12
 800a468:	6033      	str	r3, [r6, #0]
 800a46a:	4630      	mov	r0, r6
 800a46c:	f001 fb2e 	bl	800bacc <__malloc_unlock>
 800a470:	e7e3      	b.n	800a43a <_malloc_r+0x1e>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	1b5b      	subs	r3, r3, r5
 800a476:	d417      	bmi.n	800a4a8 <_malloc_r+0x8c>
 800a478:	2b0b      	cmp	r3, #11
 800a47a:	d903      	bls.n	800a484 <_malloc_r+0x68>
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	441c      	add	r4, r3
 800a480:	6025      	str	r5, [r4, #0]
 800a482:	e004      	b.n	800a48e <_malloc_r+0x72>
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	42a2      	cmp	r2, r4
 800a488:	bf0c      	ite	eq
 800a48a:	600b      	streq	r3, [r1, #0]
 800a48c:	6053      	strne	r3, [r2, #4]
 800a48e:	4630      	mov	r0, r6
 800a490:	f001 fb1c 	bl	800bacc <__malloc_unlock>
 800a494:	f104 000b 	add.w	r0, r4, #11
 800a498:	1d23      	adds	r3, r4, #4
 800a49a:	f020 0007 	bic.w	r0, r0, #7
 800a49e:	1ac2      	subs	r2, r0, r3
 800a4a0:	d0cc      	beq.n	800a43c <_malloc_r+0x20>
 800a4a2:	1a1b      	subs	r3, r3, r0
 800a4a4:	50a3      	str	r3, [r4, r2]
 800a4a6:	e7c9      	b.n	800a43c <_malloc_r+0x20>
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	6864      	ldr	r4, [r4, #4]
 800a4ac:	e7cc      	b.n	800a448 <_malloc_r+0x2c>
 800a4ae:	1cc4      	adds	r4, r0, #3
 800a4b0:	f024 0403 	bic.w	r4, r4, #3
 800a4b4:	42a0      	cmp	r0, r4
 800a4b6:	d0e3      	beq.n	800a480 <_malloc_r+0x64>
 800a4b8:	1a21      	subs	r1, r4, r0
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f000 fc72 	bl	800ada4 <_sbrk_r>
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d1dd      	bne.n	800a480 <_malloc_r+0x64>
 800a4c4:	e7cf      	b.n	800a466 <_malloc_r+0x4a>
 800a4c6:	bf00      	nop
 800a4c8:	20008598 	.word	0x20008598
 800a4cc:	2000859c 	.word	0x2000859c

0800a4d0 <__cvt>:
 800a4d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d4:	ec55 4b10 	vmov	r4, r5, d0
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	460e      	mov	r6, r1
 800a4dc:	4619      	mov	r1, r3
 800a4de:	462b      	mov	r3, r5
 800a4e0:	bfbb      	ittet	lt
 800a4e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a4e6:	461d      	movlt	r5, r3
 800a4e8:	2300      	movge	r3, #0
 800a4ea:	232d      	movlt	r3, #45	; 0x2d
 800a4ec:	700b      	strb	r3, [r1, #0]
 800a4ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a4f4:	4691      	mov	r9, r2
 800a4f6:	f023 0820 	bic.w	r8, r3, #32
 800a4fa:	bfbc      	itt	lt
 800a4fc:	4622      	movlt	r2, r4
 800a4fe:	4614      	movlt	r4, r2
 800a500:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a504:	d005      	beq.n	800a512 <__cvt+0x42>
 800a506:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a50a:	d100      	bne.n	800a50e <__cvt+0x3e>
 800a50c:	3601      	adds	r6, #1
 800a50e:	2102      	movs	r1, #2
 800a510:	e000      	b.n	800a514 <__cvt+0x44>
 800a512:	2103      	movs	r1, #3
 800a514:	ab03      	add	r3, sp, #12
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	ab02      	add	r3, sp, #8
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	ec45 4b10 	vmov	d0, r4, r5
 800a520:	4653      	mov	r3, sl
 800a522:	4632      	mov	r2, r6
 800a524:	f000 fcdc 	bl	800aee0 <_dtoa_r>
 800a528:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a52c:	4607      	mov	r7, r0
 800a52e:	d102      	bne.n	800a536 <__cvt+0x66>
 800a530:	f019 0f01 	tst.w	r9, #1
 800a534:	d022      	beq.n	800a57c <__cvt+0xac>
 800a536:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a53a:	eb07 0906 	add.w	r9, r7, r6
 800a53e:	d110      	bne.n	800a562 <__cvt+0x92>
 800a540:	783b      	ldrb	r3, [r7, #0]
 800a542:	2b30      	cmp	r3, #48	; 0x30
 800a544:	d10a      	bne.n	800a55c <__cvt+0x8c>
 800a546:	2200      	movs	r2, #0
 800a548:	2300      	movs	r3, #0
 800a54a:	4620      	mov	r0, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7f6 fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a552:	b918      	cbnz	r0, 800a55c <__cvt+0x8c>
 800a554:	f1c6 0601 	rsb	r6, r6, #1
 800a558:	f8ca 6000 	str.w	r6, [sl]
 800a55c:	f8da 3000 	ldr.w	r3, [sl]
 800a560:	4499      	add	r9, r3
 800a562:	2200      	movs	r2, #0
 800a564:	2300      	movs	r3, #0
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f6 faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a56e:	b108      	cbz	r0, 800a574 <__cvt+0xa4>
 800a570:	f8cd 900c 	str.w	r9, [sp, #12]
 800a574:	2230      	movs	r2, #48	; 0x30
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	454b      	cmp	r3, r9
 800a57a:	d307      	bcc.n	800a58c <__cvt+0xbc>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a580:	1bdb      	subs	r3, r3, r7
 800a582:	4638      	mov	r0, r7
 800a584:	6013      	str	r3, [r2, #0]
 800a586:	b004      	add	sp, #16
 800a588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58c:	1c59      	adds	r1, r3, #1
 800a58e:	9103      	str	r1, [sp, #12]
 800a590:	701a      	strb	r2, [r3, #0]
 800a592:	e7f0      	b.n	800a576 <__cvt+0xa6>

0800a594 <__exponent>:
 800a594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a596:	4603      	mov	r3, r0
 800a598:	2900      	cmp	r1, #0
 800a59a:	bfb8      	it	lt
 800a59c:	4249      	neglt	r1, r1
 800a59e:	f803 2b02 	strb.w	r2, [r3], #2
 800a5a2:	bfb4      	ite	lt
 800a5a4:	222d      	movlt	r2, #45	; 0x2d
 800a5a6:	222b      	movge	r2, #43	; 0x2b
 800a5a8:	2909      	cmp	r1, #9
 800a5aa:	7042      	strb	r2, [r0, #1]
 800a5ac:	dd2a      	ble.n	800a604 <__exponent+0x70>
 800a5ae:	f10d 0407 	add.w	r4, sp, #7
 800a5b2:	46a4      	mov	ip, r4
 800a5b4:	270a      	movs	r7, #10
 800a5b6:	46a6      	mov	lr, r4
 800a5b8:	460a      	mov	r2, r1
 800a5ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5be:	fb07 1516 	mls	r5, r7, r6, r1
 800a5c2:	3530      	adds	r5, #48	; 0x30
 800a5c4:	2a63      	cmp	r2, #99	; 0x63
 800a5c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	dcf1      	bgt.n	800a5b6 <__exponent+0x22>
 800a5d2:	3130      	adds	r1, #48	; 0x30
 800a5d4:	f1ae 0502 	sub.w	r5, lr, #2
 800a5d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5dc:	1c44      	adds	r4, r0, #1
 800a5de:	4629      	mov	r1, r5
 800a5e0:	4561      	cmp	r1, ip
 800a5e2:	d30a      	bcc.n	800a5fa <__exponent+0x66>
 800a5e4:	f10d 0209 	add.w	r2, sp, #9
 800a5e8:	eba2 020e 	sub.w	r2, r2, lr
 800a5ec:	4565      	cmp	r5, ip
 800a5ee:	bf88      	it	hi
 800a5f0:	2200      	movhi	r2, #0
 800a5f2:	4413      	add	r3, r2
 800a5f4:	1a18      	subs	r0, r3, r0
 800a5f6:	b003      	add	sp, #12
 800a5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a602:	e7ed      	b.n	800a5e0 <__exponent+0x4c>
 800a604:	2330      	movs	r3, #48	; 0x30
 800a606:	3130      	adds	r1, #48	; 0x30
 800a608:	7083      	strb	r3, [r0, #2]
 800a60a:	70c1      	strb	r1, [r0, #3]
 800a60c:	1d03      	adds	r3, r0, #4
 800a60e:	e7f1      	b.n	800a5f4 <__exponent+0x60>

0800a610 <_printf_float>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	ed2d 8b02 	vpush	{d8}
 800a618:	b08d      	sub	sp, #52	; 0x34
 800a61a:	460c      	mov	r4, r1
 800a61c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a620:	4616      	mov	r6, r2
 800a622:	461f      	mov	r7, r3
 800a624:	4605      	mov	r5, r0
 800a626:	f001 fa47 	bl	800bab8 <_localeconv_r>
 800a62a:	f8d0 a000 	ldr.w	sl, [r0]
 800a62e:	4650      	mov	r0, sl
 800a630:	f7f5 fdce 	bl	80001d0 <strlen>
 800a634:	2300      	movs	r3, #0
 800a636:	930a      	str	r3, [sp, #40]	; 0x28
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	f8d8 3000 	ldr.w	r3, [r8]
 800a640:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a644:	3307      	adds	r3, #7
 800a646:	f023 0307 	bic.w	r3, r3, #7
 800a64a:	f103 0208 	add.w	r2, r3, #8
 800a64e:	f8c8 2000 	str.w	r2, [r8]
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a65a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a65e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a662:	9307      	str	r3, [sp, #28]
 800a664:	f8cd 8018 	str.w	r8, [sp, #24]
 800a668:	ee08 0a10 	vmov	s16, r0
 800a66c:	4b9f      	ldr	r3, [pc, #636]	; (800a8ec <_printf_float+0x2dc>)
 800a66e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a672:	f04f 32ff 	mov.w	r2, #4294967295
 800a676:	f7f6 fa59 	bl	8000b2c <__aeabi_dcmpun>
 800a67a:	bb88      	cbnz	r0, 800a6e0 <_printf_float+0xd0>
 800a67c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a680:	4b9a      	ldr	r3, [pc, #616]	; (800a8ec <_printf_float+0x2dc>)
 800a682:	f04f 32ff 	mov.w	r2, #4294967295
 800a686:	f7f6 fa33 	bl	8000af0 <__aeabi_dcmple>
 800a68a:	bb48      	cbnz	r0, 800a6e0 <_printf_float+0xd0>
 800a68c:	2200      	movs	r2, #0
 800a68e:	2300      	movs	r3, #0
 800a690:	4640      	mov	r0, r8
 800a692:	4649      	mov	r1, r9
 800a694:	f7f6 fa22 	bl	8000adc <__aeabi_dcmplt>
 800a698:	b110      	cbz	r0, 800a6a0 <_printf_float+0x90>
 800a69a:	232d      	movs	r3, #45	; 0x2d
 800a69c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6a0:	4b93      	ldr	r3, [pc, #588]	; (800a8f0 <_printf_float+0x2e0>)
 800a6a2:	4894      	ldr	r0, [pc, #592]	; (800a8f4 <_printf_float+0x2e4>)
 800a6a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6a8:	bf94      	ite	ls
 800a6aa:	4698      	movls	r8, r3
 800a6ac:	4680      	movhi	r8, r0
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	9b05      	ldr	r3, [sp, #20]
 800a6b4:	f023 0204 	bic.w	r2, r3, #4
 800a6b8:	6022      	str	r2, [r4, #0]
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	9700      	str	r7, [sp, #0]
 800a6c0:	4633      	mov	r3, r6
 800a6c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f000 f9d8 	bl	800aa7c <_printf_common>
 800a6cc:	3001      	adds	r0, #1
 800a6ce:	f040 8090 	bne.w	800a7f2 <_printf_float+0x1e2>
 800a6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d6:	b00d      	add	sp, #52	; 0x34
 800a6d8:	ecbd 8b02 	vpop	{d8}
 800a6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e0:	4642      	mov	r2, r8
 800a6e2:	464b      	mov	r3, r9
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	4649      	mov	r1, r9
 800a6e8:	f7f6 fa20 	bl	8000b2c <__aeabi_dcmpun>
 800a6ec:	b140      	cbz	r0, 800a700 <_printf_float+0xf0>
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bfbc      	itt	lt
 800a6f4:	232d      	movlt	r3, #45	; 0x2d
 800a6f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6fa:	487f      	ldr	r0, [pc, #508]	; (800a8f8 <_printf_float+0x2e8>)
 800a6fc:	4b7f      	ldr	r3, [pc, #508]	; (800a8fc <_printf_float+0x2ec>)
 800a6fe:	e7d1      	b.n	800a6a4 <_printf_float+0x94>
 800a700:	6863      	ldr	r3, [r4, #4]
 800a702:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a706:	9206      	str	r2, [sp, #24]
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	d13f      	bne.n	800a78c <_printf_float+0x17c>
 800a70c:	2306      	movs	r3, #6
 800a70e:	6063      	str	r3, [r4, #4]
 800a710:	9b05      	ldr	r3, [sp, #20]
 800a712:	6861      	ldr	r1, [r4, #4]
 800a714:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a718:	2300      	movs	r3, #0
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	ab0a      	add	r3, sp, #40	; 0x28
 800a71e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a722:	ab09      	add	r3, sp, #36	; 0x24
 800a724:	ec49 8b10 	vmov	d0, r8, r9
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	6022      	str	r2, [r4, #0]
 800a72c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a730:	4628      	mov	r0, r5
 800a732:	f7ff fecd 	bl	800a4d0 <__cvt>
 800a736:	9b06      	ldr	r3, [sp, #24]
 800a738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a73a:	2b47      	cmp	r3, #71	; 0x47
 800a73c:	4680      	mov	r8, r0
 800a73e:	d108      	bne.n	800a752 <_printf_float+0x142>
 800a740:	1cc8      	adds	r0, r1, #3
 800a742:	db02      	blt.n	800a74a <_printf_float+0x13a>
 800a744:	6863      	ldr	r3, [r4, #4]
 800a746:	4299      	cmp	r1, r3
 800a748:	dd41      	ble.n	800a7ce <_printf_float+0x1be>
 800a74a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a74e:	fa5f fb8b 	uxtb.w	fp, fp
 800a752:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a756:	d820      	bhi.n	800a79a <_printf_float+0x18a>
 800a758:	3901      	subs	r1, #1
 800a75a:	465a      	mov	r2, fp
 800a75c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a760:	9109      	str	r1, [sp, #36]	; 0x24
 800a762:	f7ff ff17 	bl	800a594 <__exponent>
 800a766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a768:	1813      	adds	r3, r2, r0
 800a76a:	2a01      	cmp	r2, #1
 800a76c:	4681      	mov	r9, r0
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	dc02      	bgt.n	800a778 <_printf_float+0x168>
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	07d2      	lsls	r2, r2, #31
 800a776:	d501      	bpl.n	800a77c <_printf_float+0x16c>
 800a778:	3301      	adds	r3, #1
 800a77a:	6123      	str	r3, [r4, #16]
 800a77c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a780:	2b00      	cmp	r3, #0
 800a782:	d09c      	beq.n	800a6be <_printf_float+0xae>
 800a784:	232d      	movs	r3, #45	; 0x2d
 800a786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a78a:	e798      	b.n	800a6be <_printf_float+0xae>
 800a78c:	9a06      	ldr	r2, [sp, #24]
 800a78e:	2a47      	cmp	r2, #71	; 0x47
 800a790:	d1be      	bne.n	800a710 <_printf_float+0x100>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1bc      	bne.n	800a710 <_printf_float+0x100>
 800a796:	2301      	movs	r3, #1
 800a798:	e7b9      	b.n	800a70e <_printf_float+0xfe>
 800a79a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a79e:	d118      	bne.n	800a7d2 <_printf_float+0x1c2>
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	6863      	ldr	r3, [r4, #4]
 800a7a4:	dd0b      	ble.n	800a7be <_printf_float+0x1ae>
 800a7a6:	6121      	str	r1, [r4, #16]
 800a7a8:	b913      	cbnz	r3, 800a7b0 <_printf_float+0x1a0>
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	07d0      	lsls	r0, r2, #31
 800a7ae:	d502      	bpl.n	800a7b6 <_printf_float+0x1a6>
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	440b      	add	r3, r1
 800a7b4:	6123      	str	r3, [r4, #16]
 800a7b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7b8:	f04f 0900 	mov.w	r9, #0
 800a7bc:	e7de      	b.n	800a77c <_printf_float+0x16c>
 800a7be:	b913      	cbnz	r3, 800a7c6 <_printf_float+0x1b6>
 800a7c0:	6822      	ldr	r2, [r4, #0]
 800a7c2:	07d2      	lsls	r2, r2, #31
 800a7c4:	d501      	bpl.n	800a7ca <_printf_float+0x1ba>
 800a7c6:	3302      	adds	r3, #2
 800a7c8:	e7f4      	b.n	800a7b4 <_printf_float+0x1a4>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e7f2      	b.n	800a7b4 <_printf_float+0x1a4>
 800a7ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d4:	4299      	cmp	r1, r3
 800a7d6:	db05      	blt.n	800a7e4 <_printf_float+0x1d4>
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	6121      	str	r1, [r4, #16]
 800a7dc:	07d8      	lsls	r0, r3, #31
 800a7de:	d5ea      	bpl.n	800a7b6 <_printf_float+0x1a6>
 800a7e0:	1c4b      	adds	r3, r1, #1
 800a7e2:	e7e7      	b.n	800a7b4 <_printf_float+0x1a4>
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	bfd4      	ite	le
 800a7e8:	f1c1 0202 	rsble	r2, r1, #2
 800a7ec:	2201      	movgt	r2, #1
 800a7ee:	4413      	add	r3, r2
 800a7f0:	e7e0      	b.n	800a7b4 <_printf_float+0x1a4>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	055a      	lsls	r2, r3, #21
 800a7f6:	d407      	bmi.n	800a808 <_printf_float+0x1f8>
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	4642      	mov	r2, r8
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b8      	blx	r7
 800a802:	3001      	adds	r0, #1
 800a804:	d12c      	bne.n	800a860 <_printf_float+0x250>
 800a806:	e764      	b.n	800a6d2 <_printf_float+0xc2>
 800a808:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a80c:	f240 80e0 	bls.w	800a9d0 <_printf_float+0x3c0>
 800a810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a814:	2200      	movs	r2, #0
 800a816:	2300      	movs	r3, #0
 800a818:	f7f6 f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d034      	beq.n	800a88a <_printf_float+0x27a>
 800a820:	4a37      	ldr	r2, [pc, #220]	; (800a900 <_printf_float+0x2f0>)
 800a822:	2301      	movs	r3, #1
 800a824:	4631      	mov	r1, r6
 800a826:	4628      	mov	r0, r5
 800a828:	47b8      	blx	r7
 800a82a:	3001      	adds	r0, #1
 800a82c:	f43f af51 	beq.w	800a6d2 <_printf_float+0xc2>
 800a830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a834:	429a      	cmp	r2, r3
 800a836:	db02      	blt.n	800a83e <_printf_float+0x22e>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	07d8      	lsls	r0, r3, #31
 800a83c:	d510      	bpl.n	800a860 <_printf_float+0x250>
 800a83e:	ee18 3a10 	vmov	r3, s16
 800a842:	4652      	mov	r2, sl
 800a844:	4631      	mov	r1, r6
 800a846:	4628      	mov	r0, r5
 800a848:	47b8      	blx	r7
 800a84a:	3001      	adds	r0, #1
 800a84c:	f43f af41 	beq.w	800a6d2 <_printf_float+0xc2>
 800a850:	f04f 0800 	mov.w	r8, #0
 800a854:	f104 091a 	add.w	r9, r4, #26
 800a858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a85a:	3b01      	subs	r3, #1
 800a85c:	4543      	cmp	r3, r8
 800a85e:	dc09      	bgt.n	800a874 <_printf_float+0x264>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	079b      	lsls	r3, r3, #30
 800a864:	f100 8105 	bmi.w	800aa72 <_printf_float+0x462>
 800a868:	68e0      	ldr	r0, [r4, #12]
 800a86a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a86c:	4298      	cmp	r0, r3
 800a86e:	bfb8      	it	lt
 800a870:	4618      	movlt	r0, r3
 800a872:	e730      	b.n	800a6d6 <_printf_float+0xc6>
 800a874:	2301      	movs	r3, #1
 800a876:	464a      	mov	r2, r9
 800a878:	4631      	mov	r1, r6
 800a87a:	4628      	mov	r0, r5
 800a87c:	47b8      	blx	r7
 800a87e:	3001      	adds	r0, #1
 800a880:	f43f af27 	beq.w	800a6d2 <_printf_float+0xc2>
 800a884:	f108 0801 	add.w	r8, r8, #1
 800a888:	e7e6      	b.n	800a858 <_printf_float+0x248>
 800a88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dc39      	bgt.n	800a904 <_printf_float+0x2f4>
 800a890:	4a1b      	ldr	r2, [pc, #108]	; (800a900 <_printf_float+0x2f0>)
 800a892:	2301      	movs	r3, #1
 800a894:	4631      	mov	r1, r6
 800a896:	4628      	mov	r0, r5
 800a898:	47b8      	blx	r7
 800a89a:	3001      	adds	r0, #1
 800a89c:	f43f af19 	beq.w	800a6d2 <_printf_float+0xc2>
 800a8a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	d102      	bne.n	800a8ae <_printf_float+0x29e>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	07d9      	lsls	r1, r3, #31
 800a8ac:	d5d8      	bpl.n	800a860 <_printf_float+0x250>
 800a8ae:	ee18 3a10 	vmov	r3, s16
 800a8b2:	4652      	mov	r2, sl
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	47b8      	blx	r7
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	f43f af09 	beq.w	800a6d2 <_printf_float+0xc2>
 800a8c0:	f04f 0900 	mov.w	r9, #0
 800a8c4:	f104 0a1a 	add.w	sl, r4, #26
 800a8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ca:	425b      	negs	r3, r3
 800a8cc:	454b      	cmp	r3, r9
 800a8ce:	dc01      	bgt.n	800a8d4 <_printf_float+0x2c4>
 800a8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d2:	e792      	b.n	800a7fa <_printf_float+0x1ea>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	4652      	mov	r2, sl
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4628      	mov	r0, r5
 800a8dc:	47b8      	blx	r7
 800a8de:	3001      	adds	r0, #1
 800a8e0:	f43f aef7 	beq.w	800a6d2 <_printf_float+0xc2>
 800a8e4:	f109 0901 	add.w	r9, r9, #1
 800a8e8:	e7ee      	b.n	800a8c8 <_printf_float+0x2b8>
 800a8ea:	bf00      	nop
 800a8ec:	7fefffff 	.word	0x7fefffff
 800a8f0:	0800cdec 	.word	0x0800cdec
 800a8f4:	0800cdf0 	.word	0x0800cdf0
 800a8f8:	0800cdf8 	.word	0x0800cdf8
 800a8fc:	0800cdf4 	.word	0x0800cdf4
 800a900:	0800cdfc 	.word	0x0800cdfc
 800a904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a906:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a908:	429a      	cmp	r2, r3
 800a90a:	bfa8      	it	ge
 800a90c:	461a      	movge	r2, r3
 800a90e:	2a00      	cmp	r2, #0
 800a910:	4691      	mov	r9, r2
 800a912:	dc37      	bgt.n	800a984 <_printf_float+0x374>
 800a914:	f04f 0b00 	mov.w	fp, #0
 800a918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a91c:	f104 021a 	add.w	r2, r4, #26
 800a920:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a922:	9305      	str	r3, [sp, #20]
 800a924:	eba3 0309 	sub.w	r3, r3, r9
 800a928:	455b      	cmp	r3, fp
 800a92a:	dc33      	bgt.n	800a994 <_printf_float+0x384>
 800a92c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a930:	429a      	cmp	r2, r3
 800a932:	db3b      	blt.n	800a9ac <_printf_float+0x39c>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	07da      	lsls	r2, r3, #31
 800a938:	d438      	bmi.n	800a9ac <_printf_float+0x39c>
 800a93a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a93c:	9b05      	ldr	r3, [sp, #20]
 800a93e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	eba2 0901 	sub.w	r9, r2, r1
 800a946:	4599      	cmp	r9, r3
 800a948:	bfa8      	it	ge
 800a94a:	4699      	movge	r9, r3
 800a94c:	f1b9 0f00 	cmp.w	r9, #0
 800a950:	dc35      	bgt.n	800a9be <_printf_float+0x3ae>
 800a952:	f04f 0800 	mov.w	r8, #0
 800a956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a95a:	f104 0a1a 	add.w	sl, r4, #26
 800a95e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a962:	1a9b      	subs	r3, r3, r2
 800a964:	eba3 0309 	sub.w	r3, r3, r9
 800a968:	4543      	cmp	r3, r8
 800a96a:	f77f af79 	ble.w	800a860 <_printf_float+0x250>
 800a96e:	2301      	movs	r3, #1
 800a970:	4652      	mov	r2, sl
 800a972:	4631      	mov	r1, r6
 800a974:	4628      	mov	r0, r5
 800a976:	47b8      	blx	r7
 800a978:	3001      	adds	r0, #1
 800a97a:	f43f aeaa 	beq.w	800a6d2 <_printf_float+0xc2>
 800a97e:	f108 0801 	add.w	r8, r8, #1
 800a982:	e7ec      	b.n	800a95e <_printf_float+0x34e>
 800a984:	4613      	mov	r3, r2
 800a986:	4631      	mov	r1, r6
 800a988:	4642      	mov	r2, r8
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b8      	blx	r7
 800a98e:	3001      	adds	r0, #1
 800a990:	d1c0      	bne.n	800a914 <_printf_float+0x304>
 800a992:	e69e      	b.n	800a6d2 <_printf_float+0xc2>
 800a994:	2301      	movs	r3, #1
 800a996:	4631      	mov	r1, r6
 800a998:	4628      	mov	r0, r5
 800a99a:	9205      	str	r2, [sp, #20]
 800a99c:	47b8      	blx	r7
 800a99e:	3001      	adds	r0, #1
 800a9a0:	f43f ae97 	beq.w	800a6d2 <_printf_float+0xc2>
 800a9a4:	9a05      	ldr	r2, [sp, #20]
 800a9a6:	f10b 0b01 	add.w	fp, fp, #1
 800a9aa:	e7b9      	b.n	800a920 <_printf_float+0x310>
 800a9ac:	ee18 3a10 	vmov	r3, s16
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b8      	blx	r7
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d1be      	bne.n	800a93a <_printf_float+0x32a>
 800a9bc:	e689      	b.n	800a6d2 <_printf_float+0xc2>
 800a9be:	9a05      	ldr	r2, [sp, #20]
 800a9c0:	464b      	mov	r3, r9
 800a9c2:	4442      	add	r2, r8
 800a9c4:	4631      	mov	r1, r6
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	47b8      	blx	r7
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	d1c1      	bne.n	800a952 <_printf_float+0x342>
 800a9ce:	e680      	b.n	800a6d2 <_printf_float+0xc2>
 800a9d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d2:	2a01      	cmp	r2, #1
 800a9d4:	dc01      	bgt.n	800a9da <_printf_float+0x3ca>
 800a9d6:	07db      	lsls	r3, r3, #31
 800a9d8:	d538      	bpl.n	800aa4c <_printf_float+0x43c>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4642      	mov	r2, r8
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	47b8      	blx	r7
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	f43f ae74 	beq.w	800a6d2 <_printf_float+0xc2>
 800a9ea:	ee18 3a10 	vmov	r3, s16
 800a9ee:	4652      	mov	r2, sl
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	47b8      	blx	r7
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	f43f ae6b 	beq.w	800a6d2 <_printf_float+0xc2>
 800a9fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa00:	2200      	movs	r2, #0
 800aa02:	2300      	movs	r3, #0
 800aa04:	f7f6 f860 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa08:	b9d8      	cbnz	r0, 800aa42 <_printf_float+0x432>
 800aa0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0c:	f108 0201 	add.w	r2, r8, #1
 800aa10:	3b01      	subs	r3, #1
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b8      	blx	r7
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d10e      	bne.n	800aa3a <_printf_float+0x42a>
 800aa1c:	e659      	b.n	800a6d2 <_printf_float+0xc2>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	4652      	mov	r2, sl
 800aa22:	4631      	mov	r1, r6
 800aa24:	4628      	mov	r0, r5
 800aa26:	47b8      	blx	r7
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f43f ae52 	beq.w	800a6d2 <_printf_float+0xc2>
 800aa2e:	f108 0801 	add.w	r8, r8, #1
 800aa32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa34:	3b01      	subs	r3, #1
 800aa36:	4543      	cmp	r3, r8
 800aa38:	dcf1      	bgt.n	800aa1e <_printf_float+0x40e>
 800aa3a:	464b      	mov	r3, r9
 800aa3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa40:	e6dc      	b.n	800a7fc <_printf_float+0x1ec>
 800aa42:	f04f 0800 	mov.w	r8, #0
 800aa46:	f104 0a1a 	add.w	sl, r4, #26
 800aa4a:	e7f2      	b.n	800aa32 <_printf_float+0x422>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	4642      	mov	r2, r8
 800aa50:	e7df      	b.n	800aa12 <_printf_float+0x402>
 800aa52:	2301      	movs	r3, #1
 800aa54:	464a      	mov	r2, r9
 800aa56:	4631      	mov	r1, r6
 800aa58:	4628      	mov	r0, r5
 800aa5a:	47b8      	blx	r7
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	f43f ae38 	beq.w	800a6d2 <_printf_float+0xc2>
 800aa62:	f108 0801 	add.w	r8, r8, #1
 800aa66:	68e3      	ldr	r3, [r4, #12]
 800aa68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa6a:	1a5b      	subs	r3, r3, r1
 800aa6c:	4543      	cmp	r3, r8
 800aa6e:	dcf0      	bgt.n	800aa52 <_printf_float+0x442>
 800aa70:	e6fa      	b.n	800a868 <_printf_float+0x258>
 800aa72:	f04f 0800 	mov.w	r8, #0
 800aa76:	f104 0919 	add.w	r9, r4, #25
 800aa7a:	e7f4      	b.n	800aa66 <_printf_float+0x456>

0800aa7c <_printf_common>:
 800aa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa80:	4616      	mov	r6, r2
 800aa82:	4699      	mov	r9, r3
 800aa84:	688a      	ldr	r2, [r1, #8]
 800aa86:	690b      	ldr	r3, [r1, #16]
 800aa88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	bfb8      	it	lt
 800aa90:	4613      	movlt	r3, r2
 800aa92:	6033      	str	r3, [r6, #0]
 800aa94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa98:	4607      	mov	r7, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	b10a      	cbz	r2, 800aaa2 <_printf_common+0x26>
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	6033      	str	r3, [r6, #0]
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	0699      	lsls	r1, r3, #26
 800aaa6:	bf42      	ittt	mi
 800aaa8:	6833      	ldrmi	r3, [r6, #0]
 800aaaa:	3302      	addmi	r3, #2
 800aaac:	6033      	strmi	r3, [r6, #0]
 800aaae:	6825      	ldr	r5, [r4, #0]
 800aab0:	f015 0506 	ands.w	r5, r5, #6
 800aab4:	d106      	bne.n	800aac4 <_printf_common+0x48>
 800aab6:	f104 0a19 	add.w	sl, r4, #25
 800aaba:	68e3      	ldr	r3, [r4, #12]
 800aabc:	6832      	ldr	r2, [r6, #0]
 800aabe:	1a9b      	subs	r3, r3, r2
 800aac0:	42ab      	cmp	r3, r5
 800aac2:	dc26      	bgt.n	800ab12 <_printf_common+0x96>
 800aac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aac8:	1e13      	subs	r3, r2, #0
 800aaca:	6822      	ldr	r2, [r4, #0]
 800aacc:	bf18      	it	ne
 800aace:	2301      	movne	r3, #1
 800aad0:	0692      	lsls	r2, r2, #26
 800aad2:	d42b      	bmi.n	800ab2c <_printf_common+0xb0>
 800aad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aad8:	4649      	mov	r1, r9
 800aada:	4638      	mov	r0, r7
 800aadc:	47c0      	blx	r8
 800aade:	3001      	adds	r0, #1
 800aae0:	d01e      	beq.n	800ab20 <_printf_common+0xa4>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	68e5      	ldr	r5, [r4, #12]
 800aae6:	6832      	ldr	r2, [r6, #0]
 800aae8:	f003 0306 	and.w	r3, r3, #6
 800aaec:	2b04      	cmp	r3, #4
 800aaee:	bf08      	it	eq
 800aaf0:	1aad      	subeq	r5, r5, r2
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	6922      	ldr	r2, [r4, #16]
 800aaf6:	bf0c      	ite	eq
 800aaf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aafc:	2500      	movne	r5, #0
 800aafe:	4293      	cmp	r3, r2
 800ab00:	bfc4      	itt	gt
 800ab02:	1a9b      	subgt	r3, r3, r2
 800ab04:	18ed      	addgt	r5, r5, r3
 800ab06:	2600      	movs	r6, #0
 800ab08:	341a      	adds	r4, #26
 800ab0a:	42b5      	cmp	r5, r6
 800ab0c:	d11a      	bne.n	800ab44 <_printf_common+0xc8>
 800ab0e:	2000      	movs	r0, #0
 800ab10:	e008      	b.n	800ab24 <_printf_common+0xa8>
 800ab12:	2301      	movs	r3, #1
 800ab14:	4652      	mov	r2, sl
 800ab16:	4649      	mov	r1, r9
 800ab18:	4638      	mov	r0, r7
 800ab1a:	47c0      	blx	r8
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d103      	bne.n	800ab28 <_printf_common+0xac>
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab28:	3501      	adds	r5, #1
 800ab2a:	e7c6      	b.n	800aaba <_printf_common+0x3e>
 800ab2c:	18e1      	adds	r1, r4, r3
 800ab2e:	1c5a      	adds	r2, r3, #1
 800ab30:	2030      	movs	r0, #48	; 0x30
 800ab32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab36:	4422      	add	r2, r4
 800ab38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab40:	3302      	adds	r3, #2
 800ab42:	e7c7      	b.n	800aad4 <_printf_common+0x58>
 800ab44:	2301      	movs	r3, #1
 800ab46:	4622      	mov	r2, r4
 800ab48:	4649      	mov	r1, r9
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	47c0      	blx	r8
 800ab4e:	3001      	adds	r0, #1
 800ab50:	d0e6      	beq.n	800ab20 <_printf_common+0xa4>
 800ab52:	3601      	adds	r6, #1
 800ab54:	e7d9      	b.n	800ab0a <_printf_common+0x8e>
	...

0800ab58 <_printf_i>:
 800ab58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	4691      	mov	r9, r2
 800ab60:	7e27      	ldrb	r7, [r4, #24]
 800ab62:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab64:	2f78      	cmp	r7, #120	; 0x78
 800ab66:	4680      	mov	r8, r0
 800ab68:	469a      	mov	sl, r3
 800ab6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab6e:	d807      	bhi.n	800ab80 <_printf_i+0x28>
 800ab70:	2f62      	cmp	r7, #98	; 0x62
 800ab72:	d80a      	bhi.n	800ab8a <_printf_i+0x32>
 800ab74:	2f00      	cmp	r7, #0
 800ab76:	f000 80d8 	beq.w	800ad2a <_printf_i+0x1d2>
 800ab7a:	2f58      	cmp	r7, #88	; 0x58
 800ab7c:	f000 80a3 	beq.w	800acc6 <_printf_i+0x16e>
 800ab80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab88:	e03a      	b.n	800ac00 <_printf_i+0xa8>
 800ab8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab8e:	2b15      	cmp	r3, #21
 800ab90:	d8f6      	bhi.n	800ab80 <_printf_i+0x28>
 800ab92:	a001      	add	r0, pc, #4	; (adr r0, 800ab98 <_printf_i+0x40>)
 800ab94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ab98:	0800abf1 	.word	0x0800abf1
 800ab9c:	0800ac05 	.word	0x0800ac05
 800aba0:	0800ab81 	.word	0x0800ab81
 800aba4:	0800ab81 	.word	0x0800ab81
 800aba8:	0800ab81 	.word	0x0800ab81
 800abac:	0800ab81 	.word	0x0800ab81
 800abb0:	0800ac05 	.word	0x0800ac05
 800abb4:	0800ab81 	.word	0x0800ab81
 800abb8:	0800ab81 	.word	0x0800ab81
 800abbc:	0800ab81 	.word	0x0800ab81
 800abc0:	0800ab81 	.word	0x0800ab81
 800abc4:	0800ad11 	.word	0x0800ad11
 800abc8:	0800ac35 	.word	0x0800ac35
 800abcc:	0800acf3 	.word	0x0800acf3
 800abd0:	0800ab81 	.word	0x0800ab81
 800abd4:	0800ab81 	.word	0x0800ab81
 800abd8:	0800ad33 	.word	0x0800ad33
 800abdc:	0800ab81 	.word	0x0800ab81
 800abe0:	0800ac35 	.word	0x0800ac35
 800abe4:	0800ab81 	.word	0x0800ab81
 800abe8:	0800ab81 	.word	0x0800ab81
 800abec:	0800acfb 	.word	0x0800acfb
 800abf0:	680b      	ldr	r3, [r1, #0]
 800abf2:	1d1a      	adds	r2, r3, #4
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	600a      	str	r2, [r1, #0]
 800abf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac00:	2301      	movs	r3, #1
 800ac02:	e0a3      	b.n	800ad4c <_printf_i+0x1f4>
 800ac04:	6825      	ldr	r5, [r4, #0]
 800ac06:	6808      	ldr	r0, [r1, #0]
 800ac08:	062e      	lsls	r6, r5, #24
 800ac0a:	f100 0304 	add.w	r3, r0, #4
 800ac0e:	d50a      	bpl.n	800ac26 <_printf_i+0xce>
 800ac10:	6805      	ldr	r5, [r0, #0]
 800ac12:	600b      	str	r3, [r1, #0]
 800ac14:	2d00      	cmp	r5, #0
 800ac16:	da03      	bge.n	800ac20 <_printf_i+0xc8>
 800ac18:	232d      	movs	r3, #45	; 0x2d
 800ac1a:	426d      	negs	r5, r5
 800ac1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac20:	485e      	ldr	r0, [pc, #376]	; (800ad9c <_printf_i+0x244>)
 800ac22:	230a      	movs	r3, #10
 800ac24:	e019      	b.n	800ac5a <_printf_i+0x102>
 800ac26:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac2a:	6805      	ldr	r5, [r0, #0]
 800ac2c:	600b      	str	r3, [r1, #0]
 800ac2e:	bf18      	it	ne
 800ac30:	b22d      	sxthne	r5, r5
 800ac32:	e7ef      	b.n	800ac14 <_printf_i+0xbc>
 800ac34:	680b      	ldr	r3, [r1, #0]
 800ac36:	6825      	ldr	r5, [r4, #0]
 800ac38:	1d18      	adds	r0, r3, #4
 800ac3a:	6008      	str	r0, [r1, #0]
 800ac3c:	0628      	lsls	r0, r5, #24
 800ac3e:	d501      	bpl.n	800ac44 <_printf_i+0xec>
 800ac40:	681d      	ldr	r5, [r3, #0]
 800ac42:	e002      	b.n	800ac4a <_printf_i+0xf2>
 800ac44:	0669      	lsls	r1, r5, #25
 800ac46:	d5fb      	bpl.n	800ac40 <_printf_i+0xe8>
 800ac48:	881d      	ldrh	r5, [r3, #0]
 800ac4a:	4854      	ldr	r0, [pc, #336]	; (800ad9c <_printf_i+0x244>)
 800ac4c:	2f6f      	cmp	r7, #111	; 0x6f
 800ac4e:	bf0c      	ite	eq
 800ac50:	2308      	moveq	r3, #8
 800ac52:	230a      	movne	r3, #10
 800ac54:	2100      	movs	r1, #0
 800ac56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac5a:	6866      	ldr	r6, [r4, #4]
 800ac5c:	60a6      	str	r6, [r4, #8]
 800ac5e:	2e00      	cmp	r6, #0
 800ac60:	bfa2      	ittt	ge
 800ac62:	6821      	ldrge	r1, [r4, #0]
 800ac64:	f021 0104 	bicge.w	r1, r1, #4
 800ac68:	6021      	strge	r1, [r4, #0]
 800ac6a:	b90d      	cbnz	r5, 800ac70 <_printf_i+0x118>
 800ac6c:	2e00      	cmp	r6, #0
 800ac6e:	d04d      	beq.n	800ad0c <_printf_i+0x1b4>
 800ac70:	4616      	mov	r6, r2
 800ac72:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac76:	fb03 5711 	mls	r7, r3, r1, r5
 800ac7a:	5dc7      	ldrb	r7, [r0, r7]
 800ac7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac80:	462f      	mov	r7, r5
 800ac82:	42bb      	cmp	r3, r7
 800ac84:	460d      	mov	r5, r1
 800ac86:	d9f4      	bls.n	800ac72 <_printf_i+0x11a>
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d10b      	bne.n	800aca4 <_printf_i+0x14c>
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	07df      	lsls	r7, r3, #31
 800ac90:	d508      	bpl.n	800aca4 <_printf_i+0x14c>
 800ac92:	6923      	ldr	r3, [r4, #16]
 800ac94:	6861      	ldr	r1, [r4, #4]
 800ac96:	4299      	cmp	r1, r3
 800ac98:	bfde      	ittt	le
 800ac9a:	2330      	movle	r3, #48	; 0x30
 800ac9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aca4:	1b92      	subs	r2, r2, r6
 800aca6:	6122      	str	r2, [r4, #16]
 800aca8:	f8cd a000 	str.w	sl, [sp]
 800acac:	464b      	mov	r3, r9
 800acae:	aa03      	add	r2, sp, #12
 800acb0:	4621      	mov	r1, r4
 800acb2:	4640      	mov	r0, r8
 800acb4:	f7ff fee2 	bl	800aa7c <_printf_common>
 800acb8:	3001      	adds	r0, #1
 800acba:	d14c      	bne.n	800ad56 <_printf_i+0x1fe>
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295
 800acc0:	b004      	add	sp, #16
 800acc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc6:	4835      	ldr	r0, [pc, #212]	; (800ad9c <_printf_i+0x244>)
 800acc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	680e      	ldr	r6, [r1, #0]
 800acd0:	061f      	lsls	r7, r3, #24
 800acd2:	f856 5b04 	ldr.w	r5, [r6], #4
 800acd6:	600e      	str	r6, [r1, #0]
 800acd8:	d514      	bpl.n	800ad04 <_printf_i+0x1ac>
 800acda:	07d9      	lsls	r1, r3, #31
 800acdc:	bf44      	itt	mi
 800acde:	f043 0320 	orrmi.w	r3, r3, #32
 800ace2:	6023      	strmi	r3, [r4, #0]
 800ace4:	b91d      	cbnz	r5, 800acee <_printf_i+0x196>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	f023 0320 	bic.w	r3, r3, #32
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	2310      	movs	r3, #16
 800acf0:	e7b0      	b.n	800ac54 <_printf_i+0xfc>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	f043 0320 	orr.w	r3, r3, #32
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	2378      	movs	r3, #120	; 0x78
 800acfc:	4828      	ldr	r0, [pc, #160]	; (800ada0 <_printf_i+0x248>)
 800acfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad02:	e7e3      	b.n	800accc <_printf_i+0x174>
 800ad04:	065e      	lsls	r6, r3, #25
 800ad06:	bf48      	it	mi
 800ad08:	b2ad      	uxthmi	r5, r5
 800ad0a:	e7e6      	b.n	800acda <_printf_i+0x182>
 800ad0c:	4616      	mov	r6, r2
 800ad0e:	e7bb      	b.n	800ac88 <_printf_i+0x130>
 800ad10:	680b      	ldr	r3, [r1, #0]
 800ad12:	6826      	ldr	r6, [r4, #0]
 800ad14:	6960      	ldr	r0, [r4, #20]
 800ad16:	1d1d      	adds	r5, r3, #4
 800ad18:	600d      	str	r5, [r1, #0]
 800ad1a:	0635      	lsls	r5, r6, #24
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	d501      	bpl.n	800ad24 <_printf_i+0x1cc>
 800ad20:	6018      	str	r0, [r3, #0]
 800ad22:	e002      	b.n	800ad2a <_printf_i+0x1d2>
 800ad24:	0671      	lsls	r1, r6, #25
 800ad26:	d5fb      	bpl.n	800ad20 <_printf_i+0x1c8>
 800ad28:	8018      	strh	r0, [r3, #0]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	6123      	str	r3, [r4, #16]
 800ad2e:	4616      	mov	r6, r2
 800ad30:	e7ba      	b.n	800aca8 <_printf_i+0x150>
 800ad32:	680b      	ldr	r3, [r1, #0]
 800ad34:	1d1a      	adds	r2, r3, #4
 800ad36:	600a      	str	r2, [r1, #0]
 800ad38:	681e      	ldr	r6, [r3, #0]
 800ad3a:	6862      	ldr	r2, [r4, #4]
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f7f5 fa4e 	bl	80001e0 <memchr>
 800ad44:	b108      	cbz	r0, 800ad4a <_printf_i+0x1f2>
 800ad46:	1b80      	subs	r0, r0, r6
 800ad48:	6060      	str	r0, [r4, #4]
 800ad4a:	6863      	ldr	r3, [r4, #4]
 800ad4c:	6123      	str	r3, [r4, #16]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad54:	e7a8      	b.n	800aca8 <_printf_i+0x150>
 800ad56:	6923      	ldr	r3, [r4, #16]
 800ad58:	4632      	mov	r2, r6
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	47d0      	blx	sl
 800ad60:	3001      	adds	r0, #1
 800ad62:	d0ab      	beq.n	800acbc <_printf_i+0x164>
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	079b      	lsls	r3, r3, #30
 800ad68:	d413      	bmi.n	800ad92 <_printf_i+0x23a>
 800ad6a:	68e0      	ldr	r0, [r4, #12]
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	4298      	cmp	r0, r3
 800ad70:	bfb8      	it	lt
 800ad72:	4618      	movlt	r0, r3
 800ad74:	e7a4      	b.n	800acc0 <_printf_i+0x168>
 800ad76:	2301      	movs	r3, #1
 800ad78:	4632      	mov	r2, r6
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	47d0      	blx	sl
 800ad80:	3001      	adds	r0, #1
 800ad82:	d09b      	beq.n	800acbc <_printf_i+0x164>
 800ad84:	3501      	adds	r5, #1
 800ad86:	68e3      	ldr	r3, [r4, #12]
 800ad88:	9903      	ldr	r1, [sp, #12]
 800ad8a:	1a5b      	subs	r3, r3, r1
 800ad8c:	42ab      	cmp	r3, r5
 800ad8e:	dcf2      	bgt.n	800ad76 <_printf_i+0x21e>
 800ad90:	e7eb      	b.n	800ad6a <_printf_i+0x212>
 800ad92:	2500      	movs	r5, #0
 800ad94:	f104 0619 	add.w	r6, r4, #25
 800ad98:	e7f5      	b.n	800ad86 <_printf_i+0x22e>
 800ad9a:	bf00      	nop
 800ad9c:	0800cdfe 	.word	0x0800cdfe
 800ada0:	0800ce0f 	.word	0x0800ce0f

0800ada4 <_sbrk_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d06      	ldr	r5, [pc, #24]	; (800adc0 <_sbrk_r+0x1c>)
 800ada8:	2300      	movs	r3, #0
 800adaa:	4604      	mov	r4, r0
 800adac:	4608      	mov	r0, r1
 800adae:	602b      	str	r3, [r5, #0]
 800adb0:	f7f7 f8ae 	bl	8001f10 <_sbrk>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d102      	bne.n	800adbe <_sbrk_r+0x1a>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b103      	cbz	r3, 800adbe <_sbrk_r+0x1a>
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	20008944 	.word	0x20008944

0800adc4 <quorem>:
 800adc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	6903      	ldr	r3, [r0, #16]
 800adca:	690c      	ldr	r4, [r1, #16]
 800adcc:	42a3      	cmp	r3, r4
 800adce:	4607      	mov	r7, r0
 800add0:	f2c0 8081 	blt.w	800aed6 <quorem+0x112>
 800add4:	3c01      	subs	r4, #1
 800add6:	f101 0814 	add.w	r8, r1, #20
 800adda:	f100 0514 	add.w	r5, r0, #20
 800adde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ade8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adec:	3301      	adds	r3, #1
 800adee:	429a      	cmp	r2, r3
 800adf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adf8:	fbb2 f6f3 	udiv	r6, r2, r3
 800adfc:	d331      	bcc.n	800ae62 <quorem+0x9e>
 800adfe:	f04f 0e00 	mov.w	lr, #0
 800ae02:	4640      	mov	r0, r8
 800ae04:	46ac      	mov	ip, r5
 800ae06:	46f2      	mov	sl, lr
 800ae08:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae0c:	b293      	uxth	r3, r2
 800ae0e:	fb06 e303 	mla	r3, r6, r3, lr
 800ae12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	ebaa 0303 	sub.w	r3, sl, r3
 800ae1c:	0c12      	lsrs	r2, r2, #16
 800ae1e:	f8dc a000 	ldr.w	sl, [ip]
 800ae22:	fb06 e202 	mla	r2, r6, r2, lr
 800ae26:	fa13 f38a 	uxtah	r3, r3, sl
 800ae2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae2e:	fa1f fa82 	uxth.w	sl, r2
 800ae32:	f8dc 2000 	ldr.w	r2, [ip]
 800ae36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ae3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae44:	4581      	cmp	r9, r0
 800ae46:	f84c 3b04 	str.w	r3, [ip], #4
 800ae4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae4e:	d2db      	bcs.n	800ae08 <quorem+0x44>
 800ae50:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae54:	b92b      	cbnz	r3, 800ae62 <quorem+0x9e>
 800ae56:	9b01      	ldr	r3, [sp, #4]
 800ae58:	3b04      	subs	r3, #4
 800ae5a:	429d      	cmp	r5, r3
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	d32e      	bcc.n	800aebe <quorem+0xfa>
 800ae60:	613c      	str	r4, [r7, #16]
 800ae62:	4638      	mov	r0, r7
 800ae64:	f001 f8b6 	bl	800bfd4 <__mcmp>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	db24      	blt.n	800aeb6 <quorem+0xf2>
 800ae6c:	3601      	adds	r6, #1
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f04f 0c00 	mov.w	ip, #0
 800ae74:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae78:	f8d0 e000 	ldr.w	lr, [r0]
 800ae7c:	b293      	uxth	r3, r2
 800ae7e:	ebac 0303 	sub.w	r3, ip, r3
 800ae82:	0c12      	lsrs	r2, r2, #16
 800ae84:	fa13 f38e 	uxtah	r3, r3, lr
 800ae88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae96:	45c1      	cmp	r9, r8
 800ae98:	f840 3b04 	str.w	r3, [r0], #4
 800ae9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aea0:	d2e8      	bcs.n	800ae74 <quorem+0xb0>
 800aea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeaa:	b922      	cbnz	r2, 800aeb6 <quorem+0xf2>
 800aeac:	3b04      	subs	r3, #4
 800aeae:	429d      	cmp	r5, r3
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	d30a      	bcc.n	800aeca <quorem+0x106>
 800aeb4:	613c      	str	r4, [r7, #16]
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	b003      	add	sp, #12
 800aeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebe:	6812      	ldr	r2, [r2, #0]
 800aec0:	3b04      	subs	r3, #4
 800aec2:	2a00      	cmp	r2, #0
 800aec4:	d1cc      	bne.n	800ae60 <quorem+0x9c>
 800aec6:	3c01      	subs	r4, #1
 800aec8:	e7c7      	b.n	800ae5a <quorem+0x96>
 800aeca:	6812      	ldr	r2, [r2, #0]
 800aecc:	3b04      	subs	r3, #4
 800aece:	2a00      	cmp	r2, #0
 800aed0:	d1f0      	bne.n	800aeb4 <quorem+0xf0>
 800aed2:	3c01      	subs	r4, #1
 800aed4:	e7eb      	b.n	800aeae <quorem+0xea>
 800aed6:	2000      	movs	r0, #0
 800aed8:	e7ee      	b.n	800aeb8 <quorem+0xf4>
 800aeda:	0000      	movs	r0, r0
 800aedc:	0000      	movs	r0, r0
	...

0800aee0 <_dtoa_r>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	ed2d 8b02 	vpush	{d8}
 800aee8:	ec57 6b10 	vmov	r6, r7, d0
 800aeec:	b095      	sub	sp, #84	; 0x54
 800aeee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aef0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aef4:	9105      	str	r1, [sp, #20]
 800aef6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800aefa:	4604      	mov	r4, r0
 800aefc:	9209      	str	r2, [sp, #36]	; 0x24
 800aefe:	930f      	str	r3, [sp, #60]	; 0x3c
 800af00:	b975      	cbnz	r5, 800af20 <_dtoa_r+0x40>
 800af02:	2010      	movs	r0, #16
 800af04:	f7ff fa0c 	bl	800a320 <malloc>
 800af08:	4602      	mov	r2, r0
 800af0a:	6260      	str	r0, [r4, #36]	; 0x24
 800af0c:	b920      	cbnz	r0, 800af18 <_dtoa_r+0x38>
 800af0e:	4bb2      	ldr	r3, [pc, #712]	; (800b1d8 <_dtoa_r+0x2f8>)
 800af10:	21ea      	movs	r1, #234	; 0xea
 800af12:	48b2      	ldr	r0, [pc, #712]	; (800b1dc <_dtoa_r+0x2fc>)
 800af14:	f001 f95e 	bl	800c1d4 <__assert_func>
 800af18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af1c:	6005      	str	r5, [r0, #0]
 800af1e:	60c5      	str	r5, [r0, #12]
 800af20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af22:	6819      	ldr	r1, [r3, #0]
 800af24:	b151      	cbz	r1, 800af3c <_dtoa_r+0x5c>
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	604a      	str	r2, [r1, #4]
 800af2a:	2301      	movs	r3, #1
 800af2c:	4093      	lsls	r3, r2
 800af2e:	608b      	str	r3, [r1, #8]
 800af30:	4620      	mov	r0, r4
 800af32:	f000 fe11 	bl	800bb58 <_Bfree>
 800af36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	1e3b      	subs	r3, r7, #0
 800af3e:	bfb9      	ittee	lt
 800af40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af44:	9303      	strlt	r3, [sp, #12]
 800af46:	2300      	movge	r3, #0
 800af48:	f8c8 3000 	strge.w	r3, [r8]
 800af4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800af50:	4ba3      	ldr	r3, [pc, #652]	; (800b1e0 <_dtoa_r+0x300>)
 800af52:	bfbc      	itt	lt
 800af54:	2201      	movlt	r2, #1
 800af56:	f8c8 2000 	strlt.w	r2, [r8]
 800af5a:	ea33 0309 	bics.w	r3, r3, r9
 800af5e:	d11b      	bne.n	800af98 <_dtoa_r+0xb8>
 800af60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af62:	f242 730f 	movw	r3, #9999	; 0x270f
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af6c:	4333      	orrs	r3, r6
 800af6e:	f000 857a 	beq.w	800ba66 <_dtoa_r+0xb86>
 800af72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af74:	b963      	cbnz	r3, 800af90 <_dtoa_r+0xb0>
 800af76:	4b9b      	ldr	r3, [pc, #620]	; (800b1e4 <_dtoa_r+0x304>)
 800af78:	e024      	b.n	800afc4 <_dtoa_r+0xe4>
 800af7a:	4b9b      	ldr	r3, [pc, #620]	; (800b1e8 <_dtoa_r+0x308>)
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	3308      	adds	r3, #8
 800af80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af82:	6013      	str	r3, [r2, #0]
 800af84:	9800      	ldr	r0, [sp, #0]
 800af86:	b015      	add	sp, #84	; 0x54
 800af88:	ecbd 8b02 	vpop	{d8}
 800af8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af90:	4b94      	ldr	r3, [pc, #592]	; (800b1e4 <_dtoa_r+0x304>)
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	3303      	adds	r3, #3
 800af96:	e7f3      	b.n	800af80 <_dtoa_r+0xa0>
 800af98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af9c:	2200      	movs	r2, #0
 800af9e:	ec51 0b17 	vmov	r0, r1, d7
 800afa2:	2300      	movs	r3, #0
 800afa4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800afa8:	f7f5 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800afac:	4680      	mov	r8, r0
 800afae:	b158      	cbz	r0, 800afc8 <_dtoa_r+0xe8>
 800afb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afb2:	2301      	movs	r3, #1
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 8551 	beq.w	800ba60 <_dtoa_r+0xb80>
 800afbe:	488b      	ldr	r0, [pc, #556]	; (800b1ec <_dtoa_r+0x30c>)
 800afc0:	6018      	str	r0, [r3, #0]
 800afc2:	1e43      	subs	r3, r0, #1
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	e7dd      	b.n	800af84 <_dtoa_r+0xa4>
 800afc8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800afcc:	aa12      	add	r2, sp, #72	; 0x48
 800afce:	a913      	add	r1, sp, #76	; 0x4c
 800afd0:	4620      	mov	r0, r4
 800afd2:	f001 f8a3 	bl	800c11c <__d2b>
 800afd6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afda:	4683      	mov	fp, r0
 800afdc:	2d00      	cmp	r5, #0
 800afde:	d07c      	beq.n	800b0da <_dtoa_r+0x1fa>
 800afe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800afe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800afee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aff2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800affa:	4b7d      	ldr	r3, [pc, #500]	; (800b1f0 <_dtoa_r+0x310>)
 800affc:	2200      	movs	r2, #0
 800affe:	4630      	mov	r0, r6
 800b000:	4639      	mov	r1, r7
 800b002:	f7f5 f941 	bl	8000288 <__aeabi_dsub>
 800b006:	a36e      	add	r3, pc, #440	; (adr r3, 800b1c0 <_dtoa_r+0x2e0>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f7f5 faf4 	bl	80005f8 <__aeabi_dmul>
 800b010:	a36d      	add	r3, pc, #436	; (adr r3, 800b1c8 <_dtoa_r+0x2e8>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f7f5 f939 	bl	800028c <__adddf3>
 800b01a:	4606      	mov	r6, r0
 800b01c:	4628      	mov	r0, r5
 800b01e:	460f      	mov	r7, r1
 800b020:	f7f5 fa80 	bl	8000524 <__aeabi_i2d>
 800b024:	a36a      	add	r3, pc, #424	; (adr r3, 800b1d0 <_dtoa_r+0x2f0>)
 800b026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02a:	f7f5 fae5 	bl	80005f8 <__aeabi_dmul>
 800b02e:	4602      	mov	r2, r0
 800b030:	460b      	mov	r3, r1
 800b032:	4630      	mov	r0, r6
 800b034:	4639      	mov	r1, r7
 800b036:	f7f5 f929 	bl	800028c <__adddf3>
 800b03a:	4606      	mov	r6, r0
 800b03c:	460f      	mov	r7, r1
 800b03e:	f7f5 fd8b 	bl	8000b58 <__aeabi_d2iz>
 800b042:	2200      	movs	r2, #0
 800b044:	4682      	mov	sl, r0
 800b046:	2300      	movs	r3, #0
 800b048:	4630      	mov	r0, r6
 800b04a:	4639      	mov	r1, r7
 800b04c:	f7f5 fd46 	bl	8000adc <__aeabi_dcmplt>
 800b050:	b148      	cbz	r0, 800b066 <_dtoa_r+0x186>
 800b052:	4650      	mov	r0, sl
 800b054:	f7f5 fa66 	bl	8000524 <__aeabi_i2d>
 800b058:	4632      	mov	r2, r6
 800b05a:	463b      	mov	r3, r7
 800b05c:	f7f5 fd34 	bl	8000ac8 <__aeabi_dcmpeq>
 800b060:	b908      	cbnz	r0, 800b066 <_dtoa_r+0x186>
 800b062:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b066:	f1ba 0f16 	cmp.w	sl, #22
 800b06a:	d854      	bhi.n	800b116 <_dtoa_r+0x236>
 800b06c:	4b61      	ldr	r3, [pc, #388]	; (800b1f4 <_dtoa_r+0x314>)
 800b06e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b07a:	f7f5 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d04b      	beq.n	800b11a <_dtoa_r+0x23a>
 800b082:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b086:	2300      	movs	r3, #0
 800b088:	930e      	str	r3, [sp, #56]	; 0x38
 800b08a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b08c:	1b5d      	subs	r5, r3, r5
 800b08e:	1e6b      	subs	r3, r5, #1
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	bf43      	ittte	mi
 800b094:	2300      	movmi	r3, #0
 800b096:	f1c5 0801 	rsbmi	r8, r5, #1
 800b09a:	9304      	strmi	r3, [sp, #16]
 800b09c:	f04f 0800 	movpl.w	r8, #0
 800b0a0:	f1ba 0f00 	cmp.w	sl, #0
 800b0a4:	db3b      	blt.n	800b11e <_dtoa_r+0x23e>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b0ac:	4453      	add	r3, sl
 800b0ae:	9304      	str	r3, [sp, #16]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9306      	str	r3, [sp, #24]
 800b0b4:	9b05      	ldr	r3, [sp, #20]
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	d869      	bhi.n	800b18e <_dtoa_r+0x2ae>
 800b0ba:	2b05      	cmp	r3, #5
 800b0bc:	bfc4      	itt	gt
 800b0be:	3b04      	subgt	r3, #4
 800b0c0:	9305      	strgt	r3, [sp, #20]
 800b0c2:	9b05      	ldr	r3, [sp, #20]
 800b0c4:	f1a3 0302 	sub.w	r3, r3, #2
 800b0c8:	bfcc      	ite	gt
 800b0ca:	2500      	movgt	r5, #0
 800b0cc:	2501      	movle	r5, #1
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	d869      	bhi.n	800b1a6 <_dtoa_r+0x2c6>
 800b0d2:	e8df f003 	tbb	[pc, r3]
 800b0d6:	4e2c      	.short	0x4e2c
 800b0d8:	5a4c      	.short	0x5a4c
 800b0da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b0de:	441d      	add	r5, r3
 800b0e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0e4:	2b20      	cmp	r3, #32
 800b0e6:	bfc1      	itttt	gt
 800b0e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b0f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800b0f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0f8:	bfda      	itte	le
 800b0fa:	f1c3 0320 	rsble	r3, r3, #32
 800b0fe:	fa06 f003 	lslle.w	r0, r6, r3
 800b102:	4318      	orrgt	r0, r3
 800b104:	f7f5 f9fe 	bl	8000504 <__aeabi_ui2d>
 800b108:	2301      	movs	r3, #1
 800b10a:	4606      	mov	r6, r0
 800b10c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b110:	3d01      	subs	r5, #1
 800b112:	9310      	str	r3, [sp, #64]	; 0x40
 800b114:	e771      	b.n	800affa <_dtoa_r+0x11a>
 800b116:	2301      	movs	r3, #1
 800b118:	e7b6      	b.n	800b088 <_dtoa_r+0x1a8>
 800b11a:	900e      	str	r0, [sp, #56]	; 0x38
 800b11c:	e7b5      	b.n	800b08a <_dtoa_r+0x1aa>
 800b11e:	f1ca 0300 	rsb	r3, sl, #0
 800b122:	9306      	str	r3, [sp, #24]
 800b124:	2300      	movs	r3, #0
 800b126:	eba8 080a 	sub.w	r8, r8, sl
 800b12a:	930d      	str	r3, [sp, #52]	; 0x34
 800b12c:	e7c2      	b.n	800b0b4 <_dtoa_r+0x1d4>
 800b12e:	2300      	movs	r3, #0
 800b130:	9308      	str	r3, [sp, #32]
 800b132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b134:	2b00      	cmp	r3, #0
 800b136:	dc39      	bgt.n	800b1ac <_dtoa_r+0x2cc>
 800b138:	f04f 0901 	mov.w	r9, #1
 800b13c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b140:	464b      	mov	r3, r9
 800b142:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b146:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b148:	2200      	movs	r2, #0
 800b14a:	6042      	str	r2, [r0, #4]
 800b14c:	2204      	movs	r2, #4
 800b14e:	f102 0614 	add.w	r6, r2, #20
 800b152:	429e      	cmp	r6, r3
 800b154:	6841      	ldr	r1, [r0, #4]
 800b156:	d92f      	bls.n	800b1b8 <_dtoa_r+0x2d8>
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 fcbd 	bl	800bad8 <_Balloc>
 800b15e:	9000      	str	r0, [sp, #0]
 800b160:	2800      	cmp	r0, #0
 800b162:	d14b      	bne.n	800b1fc <_dtoa_r+0x31c>
 800b164:	4b24      	ldr	r3, [pc, #144]	; (800b1f8 <_dtoa_r+0x318>)
 800b166:	4602      	mov	r2, r0
 800b168:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b16c:	e6d1      	b.n	800af12 <_dtoa_r+0x32>
 800b16e:	2301      	movs	r3, #1
 800b170:	e7de      	b.n	800b130 <_dtoa_r+0x250>
 800b172:	2300      	movs	r3, #0
 800b174:	9308      	str	r3, [sp, #32]
 800b176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b178:	eb0a 0903 	add.w	r9, sl, r3
 800b17c:	f109 0301 	add.w	r3, r9, #1
 800b180:	2b01      	cmp	r3, #1
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	bfb8      	it	lt
 800b186:	2301      	movlt	r3, #1
 800b188:	e7dd      	b.n	800b146 <_dtoa_r+0x266>
 800b18a:	2301      	movs	r3, #1
 800b18c:	e7f2      	b.n	800b174 <_dtoa_r+0x294>
 800b18e:	2501      	movs	r5, #1
 800b190:	2300      	movs	r3, #0
 800b192:	9305      	str	r3, [sp, #20]
 800b194:	9508      	str	r5, [sp, #32]
 800b196:	f04f 39ff 	mov.w	r9, #4294967295
 800b19a:	2200      	movs	r2, #0
 800b19c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1a0:	2312      	movs	r3, #18
 800b1a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1a4:	e7cf      	b.n	800b146 <_dtoa_r+0x266>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	9308      	str	r3, [sp, #32]
 800b1aa:	e7f4      	b.n	800b196 <_dtoa_r+0x2b6>
 800b1ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b1b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1b4:	464b      	mov	r3, r9
 800b1b6:	e7c6      	b.n	800b146 <_dtoa_r+0x266>
 800b1b8:	3101      	adds	r1, #1
 800b1ba:	6041      	str	r1, [r0, #4]
 800b1bc:	0052      	lsls	r2, r2, #1
 800b1be:	e7c6      	b.n	800b14e <_dtoa_r+0x26e>
 800b1c0:	636f4361 	.word	0x636f4361
 800b1c4:	3fd287a7 	.word	0x3fd287a7
 800b1c8:	8b60c8b3 	.word	0x8b60c8b3
 800b1cc:	3fc68a28 	.word	0x3fc68a28
 800b1d0:	509f79fb 	.word	0x509f79fb
 800b1d4:	3fd34413 	.word	0x3fd34413
 800b1d8:	0800ce2d 	.word	0x0800ce2d
 800b1dc:	0800ce44 	.word	0x0800ce44
 800b1e0:	7ff00000 	.word	0x7ff00000
 800b1e4:	0800ce29 	.word	0x0800ce29
 800b1e8:	0800ce20 	.word	0x0800ce20
 800b1ec:	0800cdfd 	.word	0x0800cdfd
 800b1f0:	3ff80000 	.word	0x3ff80000
 800b1f4:	0800cf40 	.word	0x0800cf40
 800b1f8:	0800cea3 	.word	0x0800cea3
 800b1fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1fe:	9a00      	ldr	r2, [sp, #0]
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	9b01      	ldr	r3, [sp, #4]
 800b204:	2b0e      	cmp	r3, #14
 800b206:	f200 80ad 	bhi.w	800b364 <_dtoa_r+0x484>
 800b20a:	2d00      	cmp	r5, #0
 800b20c:	f000 80aa 	beq.w	800b364 <_dtoa_r+0x484>
 800b210:	f1ba 0f00 	cmp.w	sl, #0
 800b214:	dd36      	ble.n	800b284 <_dtoa_r+0x3a4>
 800b216:	4ac3      	ldr	r2, [pc, #780]	; (800b524 <_dtoa_r+0x644>)
 800b218:	f00a 030f 	and.w	r3, sl, #15
 800b21c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b220:	ed93 7b00 	vldr	d7, [r3]
 800b224:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b228:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b22c:	eeb0 8a47 	vmov.f32	s16, s14
 800b230:	eef0 8a67 	vmov.f32	s17, s15
 800b234:	d016      	beq.n	800b264 <_dtoa_r+0x384>
 800b236:	4bbc      	ldr	r3, [pc, #752]	; (800b528 <_dtoa_r+0x648>)
 800b238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b23c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b240:	f7f5 fb04 	bl	800084c <__aeabi_ddiv>
 800b244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b248:	f007 070f 	and.w	r7, r7, #15
 800b24c:	2503      	movs	r5, #3
 800b24e:	4eb6      	ldr	r6, [pc, #728]	; (800b528 <_dtoa_r+0x648>)
 800b250:	b957      	cbnz	r7, 800b268 <_dtoa_r+0x388>
 800b252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b256:	ec53 2b18 	vmov	r2, r3, d8
 800b25a:	f7f5 faf7 	bl	800084c <__aeabi_ddiv>
 800b25e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b262:	e029      	b.n	800b2b8 <_dtoa_r+0x3d8>
 800b264:	2502      	movs	r5, #2
 800b266:	e7f2      	b.n	800b24e <_dtoa_r+0x36e>
 800b268:	07f9      	lsls	r1, r7, #31
 800b26a:	d508      	bpl.n	800b27e <_dtoa_r+0x39e>
 800b26c:	ec51 0b18 	vmov	r0, r1, d8
 800b270:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b274:	f7f5 f9c0 	bl	80005f8 <__aeabi_dmul>
 800b278:	ec41 0b18 	vmov	d8, r0, r1
 800b27c:	3501      	adds	r5, #1
 800b27e:	107f      	asrs	r7, r7, #1
 800b280:	3608      	adds	r6, #8
 800b282:	e7e5      	b.n	800b250 <_dtoa_r+0x370>
 800b284:	f000 80a6 	beq.w	800b3d4 <_dtoa_r+0x4f4>
 800b288:	f1ca 0600 	rsb	r6, sl, #0
 800b28c:	4ba5      	ldr	r3, [pc, #660]	; (800b524 <_dtoa_r+0x644>)
 800b28e:	4fa6      	ldr	r7, [pc, #664]	; (800b528 <_dtoa_r+0x648>)
 800b290:	f006 020f 	and.w	r2, r6, #15
 800b294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2a0:	f7f5 f9aa 	bl	80005f8 <__aeabi_dmul>
 800b2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2a8:	1136      	asrs	r6, r6, #4
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	2502      	movs	r5, #2
 800b2ae:	2e00      	cmp	r6, #0
 800b2b0:	f040 8085 	bne.w	800b3be <_dtoa_r+0x4de>
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1d2      	bne.n	800b25e <_dtoa_r+0x37e>
 800b2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f000 808c 	beq.w	800b3d8 <_dtoa_r+0x4f8>
 800b2c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2c4:	4b99      	ldr	r3, [pc, #612]	; (800b52c <_dtoa_r+0x64c>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	4639      	mov	r1, r7
 800b2cc:	f7f5 fc06 	bl	8000adc <__aeabi_dcmplt>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	f000 8081 	beq.w	800b3d8 <_dtoa_r+0x4f8>
 800b2d6:	9b01      	ldr	r3, [sp, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d07d      	beq.n	800b3d8 <_dtoa_r+0x4f8>
 800b2dc:	f1b9 0f00 	cmp.w	r9, #0
 800b2e0:	dd3c      	ble.n	800b35c <_dtoa_r+0x47c>
 800b2e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b2e6:	9307      	str	r3, [sp, #28]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	4b91      	ldr	r3, [pc, #580]	; (800b530 <_dtoa_r+0x650>)
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	4639      	mov	r1, r7
 800b2f0:	f7f5 f982 	bl	80005f8 <__aeabi_dmul>
 800b2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f8:	3501      	adds	r5, #1
 800b2fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b2fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b302:	4628      	mov	r0, r5
 800b304:	f7f5 f90e 	bl	8000524 <__aeabi_i2d>
 800b308:	4632      	mov	r2, r6
 800b30a:	463b      	mov	r3, r7
 800b30c:	f7f5 f974 	bl	80005f8 <__aeabi_dmul>
 800b310:	4b88      	ldr	r3, [pc, #544]	; (800b534 <_dtoa_r+0x654>)
 800b312:	2200      	movs	r2, #0
 800b314:	f7f4 ffba 	bl	800028c <__adddf3>
 800b318:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b31c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b320:	9303      	str	r3, [sp, #12]
 800b322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b324:	2b00      	cmp	r3, #0
 800b326:	d15c      	bne.n	800b3e2 <_dtoa_r+0x502>
 800b328:	4b83      	ldr	r3, [pc, #524]	; (800b538 <_dtoa_r+0x658>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f4 ffaa 	bl	8000288 <__aeabi_dsub>
 800b334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b338:	4606      	mov	r6, r0
 800b33a:	460f      	mov	r7, r1
 800b33c:	f7f5 fbec 	bl	8000b18 <__aeabi_dcmpgt>
 800b340:	2800      	cmp	r0, #0
 800b342:	f040 8296 	bne.w	800b872 <_dtoa_r+0x992>
 800b346:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b34a:	4630      	mov	r0, r6
 800b34c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b350:	4639      	mov	r1, r7
 800b352:	f7f5 fbc3 	bl	8000adc <__aeabi_dcmplt>
 800b356:	2800      	cmp	r0, #0
 800b358:	f040 8288 	bne.w	800b86c <_dtoa_r+0x98c>
 800b35c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b360:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b366:	2b00      	cmp	r3, #0
 800b368:	f2c0 8158 	blt.w	800b61c <_dtoa_r+0x73c>
 800b36c:	f1ba 0f0e 	cmp.w	sl, #14
 800b370:	f300 8154 	bgt.w	800b61c <_dtoa_r+0x73c>
 800b374:	4b6b      	ldr	r3, [pc, #428]	; (800b524 <_dtoa_r+0x644>)
 800b376:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b37a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b380:	2b00      	cmp	r3, #0
 800b382:	f280 80e3 	bge.w	800b54c <_dtoa_r+0x66c>
 800b386:	9b01      	ldr	r3, [sp, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f300 80df 	bgt.w	800b54c <_dtoa_r+0x66c>
 800b38e:	f040 826d 	bne.w	800b86c <_dtoa_r+0x98c>
 800b392:	4b69      	ldr	r3, [pc, #420]	; (800b538 <_dtoa_r+0x658>)
 800b394:	2200      	movs	r2, #0
 800b396:	4640      	mov	r0, r8
 800b398:	4649      	mov	r1, r9
 800b39a:	f7f5 f92d 	bl	80005f8 <__aeabi_dmul>
 800b39e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3a2:	f7f5 fbaf 	bl	8000b04 <__aeabi_dcmpge>
 800b3a6:	9e01      	ldr	r6, [sp, #4]
 800b3a8:	4637      	mov	r7, r6
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	f040 8243 	bne.w	800b836 <_dtoa_r+0x956>
 800b3b0:	9d00      	ldr	r5, [sp, #0]
 800b3b2:	2331      	movs	r3, #49	; 0x31
 800b3b4:	f805 3b01 	strb.w	r3, [r5], #1
 800b3b8:	f10a 0a01 	add.w	sl, sl, #1
 800b3bc:	e23f      	b.n	800b83e <_dtoa_r+0x95e>
 800b3be:	07f2      	lsls	r2, r6, #31
 800b3c0:	d505      	bpl.n	800b3ce <_dtoa_r+0x4ee>
 800b3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3c6:	f7f5 f917 	bl	80005f8 <__aeabi_dmul>
 800b3ca:	3501      	adds	r5, #1
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	1076      	asrs	r6, r6, #1
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	e76c      	b.n	800b2ae <_dtoa_r+0x3ce>
 800b3d4:	2502      	movs	r5, #2
 800b3d6:	e76f      	b.n	800b2b8 <_dtoa_r+0x3d8>
 800b3d8:	9b01      	ldr	r3, [sp, #4]
 800b3da:	f8cd a01c 	str.w	sl, [sp, #28]
 800b3de:	930c      	str	r3, [sp, #48]	; 0x30
 800b3e0:	e78d      	b.n	800b2fe <_dtoa_r+0x41e>
 800b3e2:	9900      	ldr	r1, [sp, #0]
 800b3e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b3e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3e8:	4b4e      	ldr	r3, [pc, #312]	; (800b524 <_dtoa_r+0x644>)
 800b3ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3ee:	4401      	add	r1, r0
 800b3f0:	9102      	str	r1, [sp, #8]
 800b3f2:	9908      	ldr	r1, [sp, #32]
 800b3f4:	eeb0 8a47 	vmov.f32	s16, s14
 800b3f8:	eef0 8a67 	vmov.f32	s17, s15
 800b3fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b400:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b404:	2900      	cmp	r1, #0
 800b406:	d045      	beq.n	800b494 <_dtoa_r+0x5b4>
 800b408:	494c      	ldr	r1, [pc, #304]	; (800b53c <_dtoa_r+0x65c>)
 800b40a:	2000      	movs	r0, #0
 800b40c:	f7f5 fa1e 	bl	800084c <__aeabi_ddiv>
 800b410:	ec53 2b18 	vmov	r2, r3, d8
 800b414:	f7f4 ff38 	bl	8000288 <__aeabi_dsub>
 800b418:	9d00      	ldr	r5, [sp, #0]
 800b41a:	ec41 0b18 	vmov	d8, r0, r1
 800b41e:	4639      	mov	r1, r7
 800b420:	4630      	mov	r0, r6
 800b422:	f7f5 fb99 	bl	8000b58 <__aeabi_d2iz>
 800b426:	900c      	str	r0, [sp, #48]	; 0x30
 800b428:	f7f5 f87c 	bl	8000524 <__aeabi_i2d>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4630      	mov	r0, r6
 800b432:	4639      	mov	r1, r7
 800b434:	f7f4 ff28 	bl	8000288 <__aeabi_dsub>
 800b438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b43a:	3330      	adds	r3, #48	; 0x30
 800b43c:	f805 3b01 	strb.w	r3, [r5], #1
 800b440:	ec53 2b18 	vmov	r2, r3, d8
 800b444:	4606      	mov	r6, r0
 800b446:	460f      	mov	r7, r1
 800b448:	f7f5 fb48 	bl	8000adc <__aeabi_dcmplt>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d165      	bne.n	800b51c <_dtoa_r+0x63c>
 800b450:	4632      	mov	r2, r6
 800b452:	463b      	mov	r3, r7
 800b454:	4935      	ldr	r1, [pc, #212]	; (800b52c <_dtoa_r+0x64c>)
 800b456:	2000      	movs	r0, #0
 800b458:	f7f4 ff16 	bl	8000288 <__aeabi_dsub>
 800b45c:	ec53 2b18 	vmov	r2, r3, d8
 800b460:	f7f5 fb3c 	bl	8000adc <__aeabi_dcmplt>
 800b464:	2800      	cmp	r0, #0
 800b466:	f040 80b9 	bne.w	800b5dc <_dtoa_r+0x6fc>
 800b46a:	9b02      	ldr	r3, [sp, #8]
 800b46c:	429d      	cmp	r5, r3
 800b46e:	f43f af75 	beq.w	800b35c <_dtoa_r+0x47c>
 800b472:	4b2f      	ldr	r3, [pc, #188]	; (800b530 <_dtoa_r+0x650>)
 800b474:	ec51 0b18 	vmov	r0, r1, d8
 800b478:	2200      	movs	r2, #0
 800b47a:	f7f5 f8bd 	bl	80005f8 <__aeabi_dmul>
 800b47e:	4b2c      	ldr	r3, [pc, #176]	; (800b530 <_dtoa_r+0x650>)
 800b480:	ec41 0b18 	vmov	d8, r0, r1
 800b484:	2200      	movs	r2, #0
 800b486:	4630      	mov	r0, r6
 800b488:	4639      	mov	r1, r7
 800b48a:	f7f5 f8b5 	bl	80005f8 <__aeabi_dmul>
 800b48e:	4606      	mov	r6, r0
 800b490:	460f      	mov	r7, r1
 800b492:	e7c4      	b.n	800b41e <_dtoa_r+0x53e>
 800b494:	ec51 0b17 	vmov	r0, r1, d7
 800b498:	f7f5 f8ae 	bl	80005f8 <__aeabi_dmul>
 800b49c:	9b02      	ldr	r3, [sp, #8]
 800b49e:	9d00      	ldr	r5, [sp, #0]
 800b4a0:	930c      	str	r3, [sp, #48]	; 0x30
 800b4a2:	ec41 0b18 	vmov	d8, r0, r1
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f7f5 fb55 	bl	8000b58 <__aeabi_d2iz>
 800b4ae:	9011      	str	r0, [sp, #68]	; 0x44
 800b4b0:	f7f5 f838 	bl	8000524 <__aeabi_i2d>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	f7f4 fee4 	bl	8000288 <__aeabi_dsub>
 800b4c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4c2:	3330      	adds	r3, #48	; 0x30
 800b4c4:	f805 3b01 	strb.w	r3, [r5], #1
 800b4c8:	9b02      	ldr	r3, [sp, #8]
 800b4ca:	429d      	cmp	r5, r3
 800b4cc:	4606      	mov	r6, r0
 800b4ce:	460f      	mov	r7, r1
 800b4d0:	f04f 0200 	mov.w	r2, #0
 800b4d4:	d134      	bne.n	800b540 <_dtoa_r+0x660>
 800b4d6:	4b19      	ldr	r3, [pc, #100]	; (800b53c <_dtoa_r+0x65c>)
 800b4d8:	ec51 0b18 	vmov	r0, r1, d8
 800b4dc:	f7f4 fed6 	bl	800028c <__adddf3>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	f7f5 fb16 	bl	8000b18 <__aeabi_dcmpgt>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d175      	bne.n	800b5dc <_dtoa_r+0x6fc>
 800b4f0:	ec53 2b18 	vmov	r2, r3, d8
 800b4f4:	4911      	ldr	r1, [pc, #68]	; (800b53c <_dtoa_r+0x65c>)
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f7f4 fec6 	bl	8000288 <__aeabi_dsub>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4630      	mov	r0, r6
 800b502:	4639      	mov	r1, r7
 800b504:	f7f5 faea 	bl	8000adc <__aeabi_dcmplt>
 800b508:	2800      	cmp	r0, #0
 800b50a:	f43f af27 	beq.w	800b35c <_dtoa_r+0x47c>
 800b50e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b510:	1e6b      	subs	r3, r5, #1
 800b512:	930c      	str	r3, [sp, #48]	; 0x30
 800b514:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b518:	2b30      	cmp	r3, #48	; 0x30
 800b51a:	d0f8      	beq.n	800b50e <_dtoa_r+0x62e>
 800b51c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b520:	e04a      	b.n	800b5b8 <_dtoa_r+0x6d8>
 800b522:	bf00      	nop
 800b524:	0800cf40 	.word	0x0800cf40
 800b528:	0800cf18 	.word	0x0800cf18
 800b52c:	3ff00000 	.word	0x3ff00000
 800b530:	40240000 	.word	0x40240000
 800b534:	401c0000 	.word	0x401c0000
 800b538:	40140000 	.word	0x40140000
 800b53c:	3fe00000 	.word	0x3fe00000
 800b540:	4baf      	ldr	r3, [pc, #700]	; (800b800 <_dtoa_r+0x920>)
 800b542:	f7f5 f859 	bl	80005f8 <__aeabi_dmul>
 800b546:	4606      	mov	r6, r0
 800b548:	460f      	mov	r7, r1
 800b54a:	e7ac      	b.n	800b4a6 <_dtoa_r+0x5c6>
 800b54c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b550:	9d00      	ldr	r5, [sp, #0]
 800b552:	4642      	mov	r2, r8
 800b554:	464b      	mov	r3, r9
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	f7f5 f977 	bl	800084c <__aeabi_ddiv>
 800b55e:	f7f5 fafb 	bl	8000b58 <__aeabi_d2iz>
 800b562:	9002      	str	r0, [sp, #8]
 800b564:	f7f4 ffde 	bl	8000524 <__aeabi_i2d>
 800b568:	4642      	mov	r2, r8
 800b56a:	464b      	mov	r3, r9
 800b56c:	f7f5 f844 	bl	80005f8 <__aeabi_dmul>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4630      	mov	r0, r6
 800b576:	4639      	mov	r1, r7
 800b578:	f7f4 fe86 	bl	8000288 <__aeabi_dsub>
 800b57c:	9e02      	ldr	r6, [sp, #8]
 800b57e:	9f01      	ldr	r7, [sp, #4]
 800b580:	3630      	adds	r6, #48	; 0x30
 800b582:	f805 6b01 	strb.w	r6, [r5], #1
 800b586:	9e00      	ldr	r6, [sp, #0]
 800b588:	1bae      	subs	r6, r5, r6
 800b58a:	42b7      	cmp	r7, r6
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	d137      	bne.n	800b602 <_dtoa_r+0x722>
 800b592:	f7f4 fe7b 	bl	800028c <__adddf3>
 800b596:	4642      	mov	r2, r8
 800b598:	464b      	mov	r3, r9
 800b59a:	4606      	mov	r6, r0
 800b59c:	460f      	mov	r7, r1
 800b59e:	f7f5 fabb 	bl	8000b18 <__aeabi_dcmpgt>
 800b5a2:	b9c8      	cbnz	r0, 800b5d8 <_dtoa_r+0x6f8>
 800b5a4:	4642      	mov	r2, r8
 800b5a6:	464b      	mov	r3, r9
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f5 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5b0:	b110      	cbz	r0, 800b5b8 <_dtoa_r+0x6d8>
 800b5b2:	9b02      	ldr	r3, [sp, #8]
 800b5b4:	07d9      	lsls	r1, r3, #31
 800b5b6:	d40f      	bmi.n	800b5d8 <_dtoa_r+0x6f8>
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4659      	mov	r1, fp
 800b5bc:	f000 facc 	bl	800bb58 <_Bfree>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	702b      	strb	r3, [r5, #0]
 800b5c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5c6:	f10a 0001 	add.w	r0, sl, #1
 800b5ca:	6018      	str	r0, [r3, #0]
 800b5cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f43f acd8 	beq.w	800af84 <_dtoa_r+0xa4>
 800b5d4:	601d      	str	r5, [r3, #0]
 800b5d6:	e4d5      	b.n	800af84 <_dtoa_r+0xa4>
 800b5d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800b5dc:	462b      	mov	r3, r5
 800b5de:	461d      	mov	r5, r3
 800b5e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5e4:	2a39      	cmp	r2, #57	; 0x39
 800b5e6:	d108      	bne.n	800b5fa <_dtoa_r+0x71a>
 800b5e8:	9a00      	ldr	r2, [sp, #0]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d1f7      	bne.n	800b5de <_dtoa_r+0x6fe>
 800b5ee:	9a07      	ldr	r2, [sp, #28]
 800b5f0:	9900      	ldr	r1, [sp, #0]
 800b5f2:	3201      	adds	r2, #1
 800b5f4:	9207      	str	r2, [sp, #28]
 800b5f6:	2230      	movs	r2, #48	; 0x30
 800b5f8:	700a      	strb	r2, [r1, #0]
 800b5fa:	781a      	ldrb	r2, [r3, #0]
 800b5fc:	3201      	adds	r2, #1
 800b5fe:	701a      	strb	r2, [r3, #0]
 800b600:	e78c      	b.n	800b51c <_dtoa_r+0x63c>
 800b602:	4b7f      	ldr	r3, [pc, #508]	; (800b800 <_dtoa_r+0x920>)
 800b604:	2200      	movs	r2, #0
 800b606:	f7f4 fff7 	bl	80005f8 <__aeabi_dmul>
 800b60a:	2200      	movs	r2, #0
 800b60c:	2300      	movs	r3, #0
 800b60e:	4606      	mov	r6, r0
 800b610:	460f      	mov	r7, r1
 800b612:	f7f5 fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 800b616:	2800      	cmp	r0, #0
 800b618:	d09b      	beq.n	800b552 <_dtoa_r+0x672>
 800b61a:	e7cd      	b.n	800b5b8 <_dtoa_r+0x6d8>
 800b61c:	9a08      	ldr	r2, [sp, #32]
 800b61e:	2a00      	cmp	r2, #0
 800b620:	f000 80c4 	beq.w	800b7ac <_dtoa_r+0x8cc>
 800b624:	9a05      	ldr	r2, [sp, #20]
 800b626:	2a01      	cmp	r2, #1
 800b628:	f300 80a8 	bgt.w	800b77c <_dtoa_r+0x89c>
 800b62c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b62e:	2a00      	cmp	r2, #0
 800b630:	f000 80a0 	beq.w	800b774 <_dtoa_r+0x894>
 800b634:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b638:	9e06      	ldr	r6, [sp, #24]
 800b63a:	4645      	mov	r5, r8
 800b63c:	9a04      	ldr	r2, [sp, #16]
 800b63e:	2101      	movs	r1, #1
 800b640:	441a      	add	r2, r3
 800b642:	4620      	mov	r0, r4
 800b644:	4498      	add	r8, r3
 800b646:	9204      	str	r2, [sp, #16]
 800b648:	f000 fb42 	bl	800bcd0 <__i2b>
 800b64c:	4607      	mov	r7, r0
 800b64e:	2d00      	cmp	r5, #0
 800b650:	dd0b      	ble.n	800b66a <_dtoa_r+0x78a>
 800b652:	9b04      	ldr	r3, [sp, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	dd08      	ble.n	800b66a <_dtoa_r+0x78a>
 800b658:	42ab      	cmp	r3, r5
 800b65a:	9a04      	ldr	r2, [sp, #16]
 800b65c:	bfa8      	it	ge
 800b65e:	462b      	movge	r3, r5
 800b660:	eba8 0803 	sub.w	r8, r8, r3
 800b664:	1aed      	subs	r5, r5, r3
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	9304      	str	r3, [sp, #16]
 800b66a:	9b06      	ldr	r3, [sp, #24]
 800b66c:	b1fb      	cbz	r3, 800b6ae <_dtoa_r+0x7ce>
 800b66e:	9b08      	ldr	r3, [sp, #32]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 809f 	beq.w	800b7b4 <_dtoa_r+0x8d4>
 800b676:	2e00      	cmp	r6, #0
 800b678:	dd11      	ble.n	800b69e <_dtoa_r+0x7be>
 800b67a:	4639      	mov	r1, r7
 800b67c:	4632      	mov	r2, r6
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 fbe2 	bl	800be48 <__pow5mult>
 800b684:	465a      	mov	r2, fp
 800b686:	4601      	mov	r1, r0
 800b688:	4607      	mov	r7, r0
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fb36 	bl	800bcfc <__multiply>
 800b690:	4659      	mov	r1, fp
 800b692:	9007      	str	r0, [sp, #28]
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fa5f 	bl	800bb58 <_Bfree>
 800b69a:	9b07      	ldr	r3, [sp, #28]
 800b69c:	469b      	mov	fp, r3
 800b69e:	9b06      	ldr	r3, [sp, #24]
 800b6a0:	1b9a      	subs	r2, r3, r6
 800b6a2:	d004      	beq.n	800b6ae <_dtoa_r+0x7ce>
 800b6a4:	4659      	mov	r1, fp
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 fbce 	bl	800be48 <__pow5mult>
 800b6ac:	4683      	mov	fp, r0
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 fb0d 	bl	800bcd0 <__i2b>
 800b6b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	dd7c      	ble.n	800b7b8 <_dtoa_r+0x8d8>
 800b6be:	461a      	mov	r2, r3
 800b6c0:	4601      	mov	r1, r0
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 fbc0 	bl	800be48 <__pow5mult>
 800b6c8:	9b05      	ldr	r3, [sp, #20]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	dd76      	ble.n	800b7be <_dtoa_r+0x8de>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9306      	str	r3, [sp, #24]
 800b6d4:	6933      	ldr	r3, [r6, #16]
 800b6d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6da:	6918      	ldr	r0, [r3, #16]
 800b6dc:	f000 faa8 	bl	800bc30 <__hi0bits>
 800b6e0:	f1c0 0020 	rsb	r0, r0, #32
 800b6e4:	9b04      	ldr	r3, [sp, #16]
 800b6e6:	4418      	add	r0, r3
 800b6e8:	f010 001f 	ands.w	r0, r0, #31
 800b6ec:	f000 8086 	beq.w	800b7fc <_dtoa_r+0x91c>
 800b6f0:	f1c0 0320 	rsb	r3, r0, #32
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	dd7f      	ble.n	800b7f8 <_dtoa_r+0x918>
 800b6f8:	f1c0 001c 	rsb	r0, r0, #28
 800b6fc:	9b04      	ldr	r3, [sp, #16]
 800b6fe:	4403      	add	r3, r0
 800b700:	4480      	add	r8, r0
 800b702:	4405      	add	r5, r0
 800b704:	9304      	str	r3, [sp, #16]
 800b706:	f1b8 0f00 	cmp.w	r8, #0
 800b70a:	dd05      	ble.n	800b718 <_dtoa_r+0x838>
 800b70c:	4659      	mov	r1, fp
 800b70e:	4642      	mov	r2, r8
 800b710:	4620      	mov	r0, r4
 800b712:	f000 fbf3 	bl	800befc <__lshift>
 800b716:	4683      	mov	fp, r0
 800b718:	9b04      	ldr	r3, [sp, #16]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dd05      	ble.n	800b72a <_dtoa_r+0x84a>
 800b71e:	4631      	mov	r1, r6
 800b720:	461a      	mov	r2, r3
 800b722:	4620      	mov	r0, r4
 800b724:	f000 fbea 	bl	800befc <__lshift>
 800b728:	4606      	mov	r6, r0
 800b72a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d069      	beq.n	800b804 <_dtoa_r+0x924>
 800b730:	4631      	mov	r1, r6
 800b732:	4658      	mov	r0, fp
 800b734:	f000 fc4e 	bl	800bfd4 <__mcmp>
 800b738:	2800      	cmp	r0, #0
 800b73a:	da63      	bge.n	800b804 <_dtoa_r+0x924>
 800b73c:	2300      	movs	r3, #0
 800b73e:	4659      	mov	r1, fp
 800b740:	220a      	movs	r2, #10
 800b742:	4620      	mov	r0, r4
 800b744:	f000 fa2a 	bl	800bb9c <__multadd>
 800b748:	9b08      	ldr	r3, [sp, #32]
 800b74a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b74e:	4683      	mov	fp, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 818f 	beq.w	800ba74 <_dtoa_r+0xb94>
 800b756:	4639      	mov	r1, r7
 800b758:	2300      	movs	r3, #0
 800b75a:	220a      	movs	r2, #10
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 fa1d 	bl	800bb9c <__multadd>
 800b762:	f1b9 0f00 	cmp.w	r9, #0
 800b766:	4607      	mov	r7, r0
 800b768:	f300 808e 	bgt.w	800b888 <_dtoa_r+0x9a8>
 800b76c:	9b05      	ldr	r3, [sp, #20]
 800b76e:	2b02      	cmp	r3, #2
 800b770:	dc50      	bgt.n	800b814 <_dtoa_r+0x934>
 800b772:	e089      	b.n	800b888 <_dtoa_r+0x9a8>
 800b774:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b776:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b77a:	e75d      	b.n	800b638 <_dtoa_r+0x758>
 800b77c:	9b01      	ldr	r3, [sp, #4]
 800b77e:	1e5e      	subs	r6, r3, #1
 800b780:	9b06      	ldr	r3, [sp, #24]
 800b782:	42b3      	cmp	r3, r6
 800b784:	bfbf      	itttt	lt
 800b786:	9b06      	ldrlt	r3, [sp, #24]
 800b788:	9606      	strlt	r6, [sp, #24]
 800b78a:	1af2      	sublt	r2, r6, r3
 800b78c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b78e:	bfb6      	itet	lt
 800b790:	189b      	addlt	r3, r3, r2
 800b792:	1b9e      	subge	r6, r3, r6
 800b794:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b796:	9b01      	ldr	r3, [sp, #4]
 800b798:	bfb8      	it	lt
 800b79a:	2600      	movlt	r6, #0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	bfb5      	itete	lt
 800b7a0:	eba8 0503 	sublt.w	r5, r8, r3
 800b7a4:	9b01      	ldrge	r3, [sp, #4]
 800b7a6:	2300      	movlt	r3, #0
 800b7a8:	4645      	movge	r5, r8
 800b7aa:	e747      	b.n	800b63c <_dtoa_r+0x75c>
 800b7ac:	9e06      	ldr	r6, [sp, #24]
 800b7ae:	9f08      	ldr	r7, [sp, #32]
 800b7b0:	4645      	mov	r5, r8
 800b7b2:	e74c      	b.n	800b64e <_dtoa_r+0x76e>
 800b7b4:	9a06      	ldr	r2, [sp, #24]
 800b7b6:	e775      	b.n	800b6a4 <_dtoa_r+0x7c4>
 800b7b8:	9b05      	ldr	r3, [sp, #20]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	dc18      	bgt.n	800b7f0 <_dtoa_r+0x910>
 800b7be:	9b02      	ldr	r3, [sp, #8]
 800b7c0:	b9b3      	cbnz	r3, 800b7f0 <_dtoa_r+0x910>
 800b7c2:	9b03      	ldr	r3, [sp, #12]
 800b7c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7c8:	b9a3      	cbnz	r3, 800b7f4 <_dtoa_r+0x914>
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7d0:	0d1b      	lsrs	r3, r3, #20
 800b7d2:	051b      	lsls	r3, r3, #20
 800b7d4:	b12b      	cbz	r3, 800b7e2 <_dtoa_r+0x902>
 800b7d6:	9b04      	ldr	r3, [sp, #16]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	f108 0801 	add.w	r8, r8, #1
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	9306      	str	r3, [sp, #24]
 800b7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f47f af74 	bne.w	800b6d4 <_dtoa_r+0x7f4>
 800b7ec:	2001      	movs	r0, #1
 800b7ee:	e779      	b.n	800b6e4 <_dtoa_r+0x804>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	e7f6      	b.n	800b7e2 <_dtoa_r+0x902>
 800b7f4:	9b02      	ldr	r3, [sp, #8]
 800b7f6:	e7f4      	b.n	800b7e2 <_dtoa_r+0x902>
 800b7f8:	d085      	beq.n	800b706 <_dtoa_r+0x826>
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	301c      	adds	r0, #28
 800b7fe:	e77d      	b.n	800b6fc <_dtoa_r+0x81c>
 800b800:	40240000 	.word	0x40240000
 800b804:	9b01      	ldr	r3, [sp, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	dc38      	bgt.n	800b87c <_dtoa_r+0x99c>
 800b80a:	9b05      	ldr	r3, [sp, #20]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	dd35      	ble.n	800b87c <_dtoa_r+0x99c>
 800b810:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b814:	f1b9 0f00 	cmp.w	r9, #0
 800b818:	d10d      	bne.n	800b836 <_dtoa_r+0x956>
 800b81a:	4631      	mov	r1, r6
 800b81c:	464b      	mov	r3, r9
 800b81e:	2205      	movs	r2, #5
 800b820:	4620      	mov	r0, r4
 800b822:	f000 f9bb 	bl	800bb9c <__multadd>
 800b826:	4601      	mov	r1, r0
 800b828:	4606      	mov	r6, r0
 800b82a:	4658      	mov	r0, fp
 800b82c:	f000 fbd2 	bl	800bfd4 <__mcmp>
 800b830:	2800      	cmp	r0, #0
 800b832:	f73f adbd 	bgt.w	800b3b0 <_dtoa_r+0x4d0>
 800b836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b838:	9d00      	ldr	r5, [sp, #0]
 800b83a:	ea6f 0a03 	mvn.w	sl, r3
 800b83e:	f04f 0800 	mov.w	r8, #0
 800b842:	4631      	mov	r1, r6
 800b844:	4620      	mov	r0, r4
 800b846:	f000 f987 	bl	800bb58 <_Bfree>
 800b84a:	2f00      	cmp	r7, #0
 800b84c:	f43f aeb4 	beq.w	800b5b8 <_dtoa_r+0x6d8>
 800b850:	f1b8 0f00 	cmp.w	r8, #0
 800b854:	d005      	beq.n	800b862 <_dtoa_r+0x982>
 800b856:	45b8      	cmp	r8, r7
 800b858:	d003      	beq.n	800b862 <_dtoa_r+0x982>
 800b85a:	4641      	mov	r1, r8
 800b85c:	4620      	mov	r0, r4
 800b85e:	f000 f97b 	bl	800bb58 <_Bfree>
 800b862:	4639      	mov	r1, r7
 800b864:	4620      	mov	r0, r4
 800b866:	f000 f977 	bl	800bb58 <_Bfree>
 800b86a:	e6a5      	b.n	800b5b8 <_dtoa_r+0x6d8>
 800b86c:	2600      	movs	r6, #0
 800b86e:	4637      	mov	r7, r6
 800b870:	e7e1      	b.n	800b836 <_dtoa_r+0x956>
 800b872:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b874:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b878:	4637      	mov	r7, r6
 800b87a:	e599      	b.n	800b3b0 <_dtoa_r+0x4d0>
 800b87c:	9b08      	ldr	r3, [sp, #32]
 800b87e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 80fd 	beq.w	800ba82 <_dtoa_r+0xba2>
 800b888:	2d00      	cmp	r5, #0
 800b88a:	dd05      	ble.n	800b898 <_dtoa_r+0x9b8>
 800b88c:	4639      	mov	r1, r7
 800b88e:	462a      	mov	r2, r5
 800b890:	4620      	mov	r0, r4
 800b892:	f000 fb33 	bl	800befc <__lshift>
 800b896:	4607      	mov	r7, r0
 800b898:	9b06      	ldr	r3, [sp, #24]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d05c      	beq.n	800b958 <_dtoa_r+0xa78>
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 f919 	bl	800bad8 <_Balloc>
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	b928      	cbnz	r0, 800b8b6 <_dtoa_r+0x9d6>
 800b8aa:	4b80      	ldr	r3, [pc, #512]	; (800baac <_dtoa_r+0xbcc>)
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8b2:	f7ff bb2e 	b.w	800af12 <_dtoa_r+0x32>
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	3202      	adds	r2, #2
 800b8ba:	0092      	lsls	r2, r2, #2
 800b8bc:	f107 010c 	add.w	r1, r7, #12
 800b8c0:	300c      	adds	r0, #12
 800b8c2:	f7fe fd35 	bl	800a330 <memcpy>
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fb16 	bl	800befc <__lshift>
 800b8d0:	9b00      	ldr	r3, [sp, #0]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	444b      	add	r3, r9
 800b8da:	9307      	str	r3, [sp, #28]
 800b8dc:	9b02      	ldr	r3, [sp, #8]
 800b8de:	f003 0301 	and.w	r3, r3, #1
 800b8e2:	46b8      	mov	r8, r7
 800b8e4:	9306      	str	r3, [sp, #24]
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	9b01      	ldr	r3, [sp, #4]
 800b8ea:	4631      	mov	r1, r6
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	4658      	mov	r0, fp
 800b8f0:	9302      	str	r3, [sp, #8]
 800b8f2:	f7ff fa67 	bl	800adc4 <quorem>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	3330      	adds	r3, #48	; 0x30
 800b8fa:	9004      	str	r0, [sp, #16]
 800b8fc:	4641      	mov	r1, r8
 800b8fe:	4658      	mov	r0, fp
 800b900:	9308      	str	r3, [sp, #32]
 800b902:	f000 fb67 	bl	800bfd4 <__mcmp>
 800b906:	463a      	mov	r2, r7
 800b908:	4681      	mov	r9, r0
 800b90a:	4631      	mov	r1, r6
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 fb7d 	bl	800c00c <__mdiff>
 800b912:	68c2      	ldr	r2, [r0, #12]
 800b914:	9b08      	ldr	r3, [sp, #32]
 800b916:	4605      	mov	r5, r0
 800b918:	bb02      	cbnz	r2, 800b95c <_dtoa_r+0xa7c>
 800b91a:	4601      	mov	r1, r0
 800b91c:	4658      	mov	r0, fp
 800b91e:	f000 fb59 	bl	800bfd4 <__mcmp>
 800b922:	9b08      	ldr	r3, [sp, #32]
 800b924:	4602      	mov	r2, r0
 800b926:	4629      	mov	r1, r5
 800b928:	4620      	mov	r0, r4
 800b92a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b92e:	f000 f913 	bl	800bb58 <_Bfree>
 800b932:	9b05      	ldr	r3, [sp, #20]
 800b934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b936:	9d01      	ldr	r5, [sp, #4]
 800b938:	ea43 0102 	orr.w	r1, r3, r2
 800b93c:	9b06      	ldr	r3, [sp, #24]
 800b93e:	430b      	orrs	r3, r1
 800b940:	9b08      	ldr	r3, [sp, #32]
 800b942:	d10d      	bne.n	800b960 <_dtoa_r+0xa80>
 800b944:	2b39      	cmp	r3, #57	; 0x39
 800b946:	d029      	beq.n	800b99c <_dtoa_r+0xabc>
 800b948:	f1b9 0f00 	cmp.w	r9, #0
 800b94c:	dd01      	ble.n	800b952 <_dtoa_r+0xa72>
 800b94e:	9b04      	ldr	r3, [sp, #16]
 800b950:	3331      	adds	r3, #49	; 0x31
 800b952:	9a02      	ldr	r2, [sp, #8]
 800b954:	7013      	strb	r3, [r2, #0]
 800b956:	e774      	b.n	800b842 <_dtoa_r+0x962>
 800b958:	4638      	mov	r0, r7
 800b95a:	e7b9      	b.n	800b8d0 <_dtoa_r+0x9f0>
 800b95c:	2201      	movs	r2, #1
 800b95e:	e7e2      	b.n	800b926 <_dtoa_r+0xa46>
 800b960:	f1b9 0f00 	cmp.w	r9, #0
 800b964:	db06      	blt.n	800b974 <_dtoa_r+0xa94>
 800b966:	9905      	ldr	r1, [sp, #20]
 800b968:	ea41 0909 	orr.w	r9, r1, r9
 800b96c:	9906      	ldr	r1, [sp, #24]
 800b96e:	ea59 0101 	orrs.w	r1, r9, r1
 800b972:	d120      	bne.n	800b9b6 <_dtoa_r+0xad6>
 800b974:	2a00      	cmp	r2, #0
 800b976:	ddec      	ble.n	800b952 <_dtoa_r+0xa72>
 800b978:	4659      	mov	r1, fp
 800b97a:	2201      	movs	r2, #1
 800b97c:	4620      	mov	r0, r4
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	f000 fabc 	bl	800befc <__lshift>
 800b984:	4631      	mov	r1, r6
 800b986:	4683      	mov	fp, r0
 800b988:	f000 fb24 	bl	800bfd4 <__mcmp>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	9b01      	ldr	r3, [sp, #4]
 800b990:	dc02      	bgt.n	800b998 <_dtoa_r+0xab8>
 800b992:	d1de      	bne.n	800b952 <_dtoa_r+0xa72>
 800b994:	07da      	lsls	r2, r3, #31
 800b996:	d5dc      	bpl.n	800b952 <_dtoa_r+0xa72>
 800b998:	2b39      	cmp	r3, #57	; 0x39
 800b99a:	d1d8      	bne.n	800b94e <_dtoa_r+0xa6e>
 800b99c:	9a02      	ldr	r2, [sp, #8]
 800b99e:	2339      	movs	r3, #57	; 0x39
 800b9a0:	7013      	strb	r3, [r2, #0]
 800b9a2:	462b      	mov	r3, r5
 800b9a4:	461d      	mov	r5, r3
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9ac:	2a39      	cmp	r2, #57	; 0x39
 800b9ae:	d050      	beq.n	800ba52 <_dtoa_r+0xb72>
 800b9b0:	3201      	adds	r2, #1
 800b9b2:	701a      	strb	r2, [r3, #0]
 800b9b4:	e745      	b.n	800b842 <_dtoa_r+0x962>
 800b9b6:	2a00      	cmp	r2, #0
 800b9b8:	dd03      	ble.n	800b9c2 <_dtoa_r+0xae2>
 800b9ba:	2b39      	cmp	r3, #57	; 0x39
 800b9bc:	d0ee      	beq.n	800b99c <_dtoa_r+0xabc>
 800b9be:	3301      	adds	r3, #1
 800b9c0:	e7c7      	b.n	800b952 <_dtoa_r+0xa72>
 800b9c2:	9a01      	ldr	r2, [sp, #4]
 800b9c4:	9907      	ldr	r1, [sp, #28]
 800b9c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b9ca:	428a      	cmp	r2, r1
 800b9cc:	d02a      	beq.n	800ba24 <_dtoa_r+0xb44>
 800b9ce:	4659      	mov	r1, fp
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	220a      	movs	r2, #10
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 f8e1 	bl	800bb9c <__multadd>
 800b9da:	45b8      	cmp	r8, r7
 800b9dc:	4683      	mov	fp, r0
 800b9de:	f04f 0300 	mov.w	r3, #0
 800b9e2:	f04f 020a 	mov.w	r2, #10
 800b9e6:	4641      	mov	r1, r8
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	d107      	bne.n	800b9fc <_dtoa_r+0xb1c>
 800b9ec:	f000 f8d6 	bl	800bb9c <__multadd>
 800b9f0:	4680      	mov	r8, r0
 800b9f2:	4607      	mov	r7, r0
 800b9f4:	9b01      	ldr	r3, [sp, #4]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	e775      	b.n	800b8e8 <_dtoa_r+0xa08>
 800b9fc:	f000 f8ce 	bl	800bb9c <__multadd>
 800ba00:	4639      	mov	r1, r7
 800ba02:	4680      	mov	r8, r0
 800ba04:	2300      	movs	r3, #0
 800ba06:	220a      	movs	r2, #10
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f000 f8c7 	bl	800bb9c <__multadd>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	e7f0      	b.n	800b9f4 <_dtoa_r+0xb14>
 800ba12:	f1b9 0f00 	cmp.w	r9, #0
 800ba16:	9a00      	ldr	r2, [sp, #0]
 800ba18:	bfcc      	ite	gt
 800ba1a:	464d      	movgt	r5, r9
 800ba1c:	2501      	movle	r5, #1
 800ba1e:	4415      	add	r5, r2
 800ba20:	f04f 0800 	mov.w	r8, #0
 800ba24:	4659      	mov	r1, fp
 800ba26:	2201      	movs	r2, #1
 800ba28:	4620      	mov	r0, r4
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	f000 fa66 	bl	800befc <__lshift>
 800ba30:	4631      	mov	r1, r6
 800ba32:	4683      	mov	fp, r0
 800ba34:	f000 face 	bl	800bfd4 <__mcmp>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	dcb2      	bgt.n	800b9a2 <_dtoa_r+0xac2>
 800ba3c:	d102      	bne.n	800ba44 <_dtoa_r+0xb64>
 800ba3e:	9b01      	ldr	r3, [sp, #4]
 800ba40:	07db      	lsls	r3, r3, #31
 800ba42:	d4ae      	bmi.n	800b9a2 <_dtoa_r+0xac2>
 800ba44:	462b      	mov	r3, r5
 800ba46:	461d      	mov	r5, r3
 800ba48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba4c:	2a30      	cmp	r2, #48	; 0x30
 800ba4e:	d0fa      	beq.n	800ba46 <_dtoa_r+0xb66>
 800ba50:	e6f7      	b.n	800b842 <_dtoa_r+0x962>
 800ba52:	9a00      	ldr	r2, [sp, #0]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d1a5      	bne.n	800b9a4 <_dtoa_r+0xac4>
 800ba58:	f10a 0a01 	add.w	sl, sl, #1
 800ba5c:	2331      	movs	r3, #49	; 0x31
 800ba5e:	e779      	b.n	800b954 <_dtoa_r+0xa74>
 800ba60:	4b13      	ldr	r3, [pc, #76]	; (800bab0 <_dtoa_r+0xbd0>)
 800ba62:	f7ff baaf 	b.w	800afc4 <_dtoa_r+0xe4>
 800ba66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f47f aa86 	bne.w	800af7a <_dtoa_r+0x9a>
 800ba6e:	4b11      	ldr	r3, [pc, #68]	; (800bab4 <_dtoa_r+0xbd4>)
 800ba70:	f7ff baa8 	b.w	800afc4 <_dtoa_r+0xe4>
 800ba74:	f1b9 0f00 	cmp.w	r9, #0
 800ba78:	dc03      	bgt.n	800ba82 <_dtoa_r+0xba2>
 800ba7a:	9b05      	ldr	r3, [sp, #20]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	f73f aec9 	bgt.w	800b814 <_dtoa_r+0x934>
 800ba82:	9d00      	ldr	r5, [sp, #0]
 800ba84:	4631      	mov	r1, r6
 800ba86:	4658      	mov	r0, fp
 800ba88:	f7ff f99c 	bl	800adc4 <quorem>
 800ba8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ba90:	f805 3b01 	strb.w	r3, [r5], #1
 800ba94:	9a00      	ldr	r2, [sp, #0]
 800ba96:	1aaa      	subs	r2, r5, r2
 800ba98:	4591      	cmp	r9, r2
 800ba9a:	ddba      	ble.n	800ba12 <_dtoa_r+0xb32>
 800ba9c:	4659      	mov	r1, fp
 800ba9e:	2300      	movs	r3, #0
 800baa0:	220a      	movs	r2, #10
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 f87a 	bl	800bb9c <__multadd>
 800baa8:	4683      	mov	fp, r0
 800baaa:	e7eb      	b.n	800ba84 <_dtoa_r+0xba4>
 800baac:	0800cea3 	.word	0x0800cea3
 800bab0:	0800cdfc 	.word	0x0800cdfc
 800bab4:	0800ce20 	.word	0x0800ce20

0800bab8 <_localeconv_r>:
 800bab8:	4800      	ldr	r0, [pc, #0]	; (800babc <_localeconv_r+0x4>)
 800baba:	4770      	bx	lr
 800babc:	20000298 	.word	0x20000298

0800bac0 <__malloc_lock>:
 800bac0:	4801      	ldr	r0, [pc, #4]	; (800bac8 <__malloc_lock+0x8>)
 800bac2:	f000 bbb8 	b.w	800c236 <__retarget_lock_acquire_recursive>
 800bac6:	bf00      	nop
 800bac8:	2000894c 	.word	0x2000894c

0800bacc <__malloc_unlock>:
 800bacc:	4801      	ldr	r0, [pc, #4]	; (800bad4 <__malloc_unlock+0x8>)
 800bace:	f000 bbb3 	b.w	800c238 <__retarget_lock_release_recursive>
 800bad2:	bf00      	nop
 800bad4:	2000894c 	.word	0x2000894c

0800bad8 <_Balloc>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	b976      	cbnz	r6, 800bb00 <_Balloc+0x28>
 800bae2:	2010      	movs	r0, #16
 800bae4:	f7fe fc1c 	bl	800a320 <malloc>
 800bae8:	4602      	mov	r2, r0
 800baea:	6260      	str	r0, [r4, #36]	; 0x24
 800baec:	b920      	cbnz	r0, 800baf8 <_Balloc+0x20>
 800baee:	4b18      	ldr	r3, [pc, #96]	; (800bb50 <_Balloc+0x78>)
 800baf0:	4818      	ldr	r0, [pc, #96]	; (800bb54 <_Balloc+0x7c>)
 800baf2:	2166      	movs	r1, #102	; 0x66
 800baf4:	f000 fb6e 	bl	800c1d4 <__assert_func>
 800baf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bafc:	6006      	str	r6, [r0, #0]
 800bafe:	60c6      	str	r6, [r0, #12]
 800bb00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb02:	68f3      	ldr	r3, [r6, #12]
 800bb04:	b183      	cbz	r3, 800bb28 <_Balloc+0x50>
 800bb06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb0e:	b9b8      	cbnz	r0, 800bb40 <_Balloc+0x68>
 800bb10:	2101      	movs	r1, #1
 800bb12:	fa01 f605 	lsl.w	r6, r1, r5
 800bb16:	1d72      	adds	r2, r6, #5
 800bb18:	0092      	lsls	r2, r2, #2
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f7fe fc1e 	bl	800a35c <_calloc_r>
 800bb20:	b160      	cbz	r0, 800bb3c <_Balloc+0x64>
 800bb22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb26:	e00e      	b.n	800bb46 <_Balloc+0x6e>
 800bb28:	2221      	movs	r2, #33	; 0x21
 800bb2a:	2104      	movs	r1, #4
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f7fe fc15 	bl	800a35c <_calloc_r>
 800bb32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb34:	60f0      	str	r0, [r6, #12]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e4      	bne.n	800bb06 <_Balloc+0x2e>
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
 800bb40:	6802      	ldr	r2, [r0, #0]
 800bb42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb46:	2300      	movs	r3, #0
 800bb48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb4c:	e7f7      	b.n	800bb3e <_Balloc+0x66>
 800bb4e:	bf00      	nop
 800bb50:	0800ce2d 	.word	0x0800ce2d
 800bb54:	0800ceb4 	.word	0x0800ceb4

0800bb58 <_Bfree>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	b976      	cbnz	r6, 800bb80 <_Bfree+0x28>
 800bb62:	2010      	movs	r0, #16
 800bb64:	f7fe fbdc 	bl	800a320 <malloc>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	6268      	str	r0, [r5, #36]	; 0x24
 800bb6c:	b920      	cbnz	r0, 800bb78 <_Bfree+0x20>
 800bb6e:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <_Bfree+0x3c>)
 800bb70:	4809      	ldr	r0, [pc, #36]	; (800bb98 <_Bfree+0x40>)
 800bb72:	218a      	movs	r1, #138	; 0x8a
 800bb74:	f000 fb2e 	bl	800c1d4 <__assert_func>
 800bb78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb7c:	6006      	str	r6, [r0, #0]
 800bb7e:	60c6      	str	r6, [r0, #12]
 800bb80:	b13c      	cbz	r4, 800bb92 <_Bfree+0x3a>
 800bb82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb84:	6862      	ldr	r2, [r4, #4]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb8c:	6021      	str	r1, [r4, #0]
 800bb8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	0800ce2d 	.word	0x0800ce2d
 800bb98:	0800ceb4 	.word	0x0800ceb4

0800bb9c <__multadd>:
 800bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	690e      	ldr	r6, [r1, #16]
 800bba2:	4607      	mov	r7, r0
 800bba4:	4698      	mov	r8, r3
 800bba6:	460c      	mov	r4, r1
 800bba8:	f101 0014 	add.w	r0, r1, #20
 800bbac:	2300      	movs	r3, #0
 800bbae:	6805      	ldr	r5, [r0, #0]
 800bbb0:	b2a9      	uxth	r1, r5
 800bbb2:	fb02 8101 	mla	r1, r2, r1, r8
 800bbb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bbba:	0c2d      	lsrs	r5, r5, #16
 800bbbc:	fb02 c505 	mla	r5, r2, r5, ip
 800bbc0:	b289      	uxth	r1, r1
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bbc8:	429e      	cmp	r6, r3
 800bbca:	f840 1b04 	str.w	r1, [r0], #4
 800bbce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bbd2:	dcec      	bgt.n	800bbae <__multadd+0x12>
 800bbd4:	f1b8 0f00 	cmp.w	r8, #0
 800bbd8:	d022      	beq.n	800bc20 <__multadd+0x84>
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	42b3      	cmp	r3, r6
 800bbde:	dc19      	bgt.n	800bc14 <__multadd+0x78>
 800bbe0:	6861      	ldr	r1, [r4, #4]
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	3101      	adds	r1, #1
 800bbe6:	f7ff ff77 	bl	800bad8 <_Balloc>
 800bbea:	4605      	mov	r5, r0
 800bbec:	b928      	cbnz	r0, 800bbfa <__multadd+0x5e>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	4b0d      	ldr	r3, [pc, #52]	; (800bc28 <__multadd+0x8c>)
 800bbf2:	480e      	ldr	r0, [pc, #56]	; (800bc2c <__multadd+0x90>)
 800bbf4:	21b5      	movs	r1, #181	; 0xb5
 800bbf6:	f000 faed 	bl	800c1d4 <__assert_func>
 800bbfa:	6922      	ldr	r2, [r4, #16]
 800bbfc:	3202      	adds	r2, #2
 800bbfe:	f104 010c 	add.w	r1, r4, #12
 800bc02:	0092      	lsls	r2, r2, #2
 800bc04:	300c      	adds	r0, #12
 800bc06:	f7fe fb93 	bl	800a330 <memcpy>
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	f7ff ffa3 	bl	800bb58 <_Bfree>
 800bc12:	462c      	mov	r4, r5
 800bc14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bc18:	3601      	adds	r6, #1
 800bc1a:	f8c3 8014 	str.w	r8, [r3, #20]
 800bc1e:	6126      	str	r6, [r4, #16]
 800bc20:	4620      	mov	r0, r4
 800bc22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc26:	bf00      	nop
 800bc28:	0800cea3 	.word	0x0800cea3
 800bc2c:	0800ceb4 	.word	0x0800ceb4

0800bc30 <__hi0bits>:
 800bc30:	0c03      	lsrs	r3, r0, #16
 800bc32:	041b      	lsls	r3, r3, #16
 800bc34:	b9d3      	cbnz	r3, 800bc6c <__hi0bits+0x3c>
 800bc36:	0400      	lsls	r0, r0, #16
 800bc38:	2310      	movs	r3, #16
 800bc3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc3e:	bf04      	itt	eq
 800bc40:	0200      	lsleq	r0, r0, #8
 800bc42:	3308      	addeq	r3, #8
 800bc44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc48:	bf04      	itt	eq
 800bc4a:	0100      	lsleq	r0, r0, #4
 800bc4c:	3304      	addeq	r3, #4
 800bc4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc52:	bf04      	itt	eq
 800bc54:	0080      	lsleq	r0, r0, #2
 800bc56:	3302      	addeq	r3, #2
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	db05      	blt.n	800bc68 <__hi0bits+0x38>
 800bc5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc60:	f103 0301 	add.w	r3, r3, #1
 800bc64:	bf08      	it	eq
 800bc66:	2320      	moveq	r3, #32
 800bc68:	4618      	mov	r0, r3
 800bc6a:	4770      	bx	lr
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e7e4      	b.n	800bc3a <__hi0bits+0xa>

0800bc70 <__lo0bits>:
 800bc70:	6803      	ldr	r3, [r0, #0]
 800bc72:	f013 0207 	ands.w	r2, r3, #7
 800bc76:	4601      	mov	r1, r0
 800bc78:	d00b      	beq.n	800bc92 <__lo0bits+0x22>
 800bc7a:	07da      	lsls	r2, r3, #31
 800bc7c:	d424      	bmi.n	800bcc8 <__lo0bits+0x58>
 800bc7e:	0798      	lsls	r0, r3, #30
 800bc80:	bf49      	itett	mi
 800bc82:	085b      	lsrmi	r3, r3, #1
 800bc84:	089b      	lsrpl	r3, r3, #2
 800bc86:	2001      	movmi	r0, #1
 800bc88:	600b      	strmi	r3, [r1, #0]
 800bc8a:	bf5c      	itt	pl
 800bc8c:	600b      	strpl	r3, [r1, #0]
 800bc8e:	2002      	movpl	r0, #2
 800bc90:	4770      	bx	lr
 800bc92:	b298      	uxth	r0, r3
 800bc94:	b9b0      	cbnz	r0, 800bcc4 <__lo0bits+0x54>
 800bc96:	0c1b      	lsrs	r3, r3, #16
 800bc98:	2010      	movs	r0, #16
 800bc9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc9e:	bf04      	itt	eq
 800bca0:	0a1b      	lsreq	r3, r3, #8
 800bca2:	3008      	addeq	r0, #8
 800bca4:	071a      	lsls	r2, r3, #28
 800bca6:	bf04      	itt	eq
 800bca8:	091b      	lsreq	r3, r3, #4
 800bcaa:	3004      	addeq	r0, #4
 800bcac:	079a      	lsls	r2, r3, #30
 800bcae:	bf04      	itt	eq
 800bcb0:	089b      	lsreq	r3, r3, #2
 800bcb2:	3002      	addeq	r0, #2
 800bcb4:	07da      	lsls	r2, r3, #31
 800bcb6:	d403      	bmi.n	800bcc0 <__lo0bits+0x50>
 800bcb8:	085b      	lsrs	r3, r3, #1
 800bcba:	f100 0001 	add.w	r0, r0, #1
 800bcbe:	d005      	beq.n	800bccc <__lo0bits+0x5c>
 800bcc0:	600b      	str	r3, [r1, #0]
 800bcc2:	4770      	bx	lr
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	e7e8      	b.n	800bc9a <__lo0bits+0x2a>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	4770      	bx	lr
 800bccc:	2020      	movs	r0, #32
 800bcce:	4770      	bx	lr

0800bcd0 <__i2b>:
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	f7ff feff 	bl	800bad8 <_Balloc>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	b928      	cbnz	r0, 800bcea <__i2b+0x1a>
 800bcde:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <__i2b+0x24>)
 800bce0:	4805      	ldr	r0, [pc, #20]	; (800bcf8 <__i2b+0x28>)
 800bce2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bce6:	f000 fa75 	bl	800c1d4 <__assert_func>
 800bcea:	2301      	movs	r3, #1
 800bcec:	6144      	str	r4, [r0, #20]
 800bcee:	6103      	str	r3, [r0, #16]
 800bcf0:	bd10      	pop	{r4, pc}
 800bcf2:	bf00      	nop
 800bcf4:	0800cea3 	.word	0x0800cea3
 800bcf8:	0800ceb4 	.word	0x0800ceb4

0800bcfc <__multiply>:
 800bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	4614      	mov	r4, r2
 800bd02:	690a      	ldr	r2, [r1, #16]
 800bd04:	6923      	ldr	r3, [r4, #16]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	bfb8      	it	lt
 800bd0a:	460b      	movlt	r3, r1
 800bd0c:	460d      	mov	r5, r1
 800bd0e:	bfbc      	itt	lt
 800bd10:	4625      	movlt	r5, r4
 800bd12:	461c      	movlt	r4, r3
 800bd14:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bd18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd1c:	68ab      	ldr	r3, [r5, #8]
 800bd1e:	6869      	ldr	r1, [r5, #4]
 800bd20:	eb0a 0709 	add.w	r7, sl, r9
 800bd24:	42bb      	cmp	r3, r7
 800bd26:	b085      	sub	sp, #20
 800bd28:	bfb8      	it	lt
 800bd2a:	3101      	addlt	r1, #1
 800bd2c:	f7ff fed4 	bl	800bad8 <_Balloc>
 800bd30:	b930      	cbnz	r0, 800bd40 <__multiply+0x44>
 800bd32:	4602      	mov	r2, r0
 800bd34:	4b42      	ldr	r3, [pc, #264]	; (800be40 <__multiply+0x144>)
 800bd36:	4843      	ldr	r0, [pc, #268]	; (800be44 <__multiply+0x148>)
 800bd38:	f240 115d 	movw	r1, #349	; 0x15d
 800bd3c:	f000 fa4a 	bl	800c1d4 <__assert_func>
 800bd40:	f100 0614 	add.w	r6, r0, #20
 800bd44:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bd48:	4633      	mov	r3, r6
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4543      	cmp	r3, r8
 800bd4e:	d31e      	bcc.n	800bd8e <__multiply+0x92>
 800bd50:	f105 0c14 	add.w	ip, r5, #20
 800bd54:	f104 0314 	add.w	r3, r4, #20
 800bd58:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bd5c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bd60:	9202      	str	r2, [sp, #8]
 800bd62:	ebac 0205 	sub.w	r2, ip, r5
 800bd66:	3a15      	subs	r2, #21
 800bd68:	f022 0203 	bic.w	r2, r2, #3
 800bd6c:	3204      	adds	r2, #4
 800bd6e:	f105 0115 	add.w	r1, r5, #21
 800bd72:	458c      	cmp	ip, r1
 800bd74:	bf38      	it	cc
 800bd76:	2204      	movcc	r2, #4
 800bd78:	9201      	str	r2, [sp, #4]
 800bd7a:	9a02      	ldr	r2, [sp, #8]
 800bd7c:	9303      	str	r3, [sp, #12]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d808      	bhi.n	800bd94 <__multiply+0x98>
 800bd82:	2f00      	cmp	r7, #0
 800bd84:	dc55      	bgt.n	800be32 <__multiply+0x136>
 800bd86:	6107      	str	r7, [r0, #16]
 800bd88:	b005      	add	sp, #20
 800bd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8e:	f843 2b04 	str.w	r2, [r3], #4
 800bd92:	e7db      	b.n	800bd4c <__multiply+0x50>
 800bd94:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd98:	f1ba 0f00 	cmp.w	sl, #0
 800bd9c:	d020      	beq.n	800bde0 <__multiply+0xe4>
 800bd9e:	f105 0e14 	add.w	lr, r5, #20
 800bda2:	46b1      	mov	r9, r6
 800bda4:	2200      	movs	r2, #0
 800bda6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bdaa:	f8d9 b000 	ldr.w	fp, [r9]
 800bdae:	b2a1      	uxth	r1, r4
 800bdb0:	fa1f fb8b 	uxth.w	fp, fp
 800bdb4:	fb0a b101 	mla	r1, sl, r1, fp
 800bdb8:	4411      	add	r1, r2
 800bdba:	f8d9 2000 	ldr.w	r2, [r9]
 800bdbe:	0c24      	lsrs	r4, r4, #16
 800bdc0:	0c12      	lsrs	r2, r2, #16
 800bdc2:	fb0a 2404 	mla	r4, sl, r4, r2
 800bdc6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bdca:	b289      	uxth	r1, r1
 800bdcc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bdd0:	45f4      	cmp	ip, lr
 800bdd2:	f849 1b04 	str.w	r1, [r9], #4
 800bdd6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bdda:	d8e4      	bhi.n	800bda6 <__multiply+0xaa>
 800bddc:	9901      	ldr	r1, [sp, #4]
 800bdde:	5072      	str	r2, [r6, r1]
 800bde0:	9a03      	ldr	r2, [sp, #12]
 800bde2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bde6:	3304      	adds	r3, #4
 800bde8:	f1b9 0f00 	cmp.w	r9, #0
 800bdec:	d01f      	beq.n	800be2e <__multiply+0x132>
 800bdee:	6834      	ldr	r4, [r6, #0]
 800bdf0:	f105 0114 	add.w	r1, r5, #20
 800bdf4:	46b6      	mov	lr, r6
 800bdf6:	f04f 0a00 	mov.w	sl, #0
 800bdfa:	880a      	ldrh	r2, [r1, #0]
 800bdfc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be00:	fb09 b202 	mla	r2, r9, r2, fp
 800be04:	4492      	add	sl, r2
 800be06:	b2a4      	uxth	r4, r4
 800be08:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be0c:	f84e 4b04 	str.w	r4, [lr], #4
 800be10:	f851 4b04 	ldr.w	r4, [r1], #4
 800be14:	f8be 2000 	ldrh.w	r2, [lr]
 800be18:	0c24      	lsrs	r4, r4, #16
 800be1a:	fb09 2404 	mla	r4, r9, r4, r2
 800be1e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800be22:	458c      	cmp	ip, r1
 800be24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800be28:	d8e7      	bhi.n	800bdfa <__multiply+0xfe>
 800be2a:	9a01      	ldr	r2, [sp, #4]
 800be2c:	50b4      	str	r4, [r6, r2]
 800be2e:	3604      	adds	r6, #4
 800be30:	e7a3      	b.n	800bd7a <__multiply+0x7e>
 800be32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1a5      	bne.n	800bd86 <__multiply+0x8a>
 800be3a:	3f01      	subs	r7, #1
 800be3c:	e7a1      	b.n	800bd82 <__multiply+0x86>
 800be3e:	bf00      	nop
 800be40:	0800cea3 	.word	0x0800cea3
 800be44:	0800ceb4 	.word	0x0800ceb4

0800be48 <__pow5mult>:
 800be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be4c:	4615      	mov	r5, r2
 800be4e:	f012 0203 	ands.w	r2, r2, #3
 800be52:	4606      	mov	r6, r0
 800be54:	460f      	mov	r7, r1
 800be56:	d007      	beq.n	800be68 <__pow5mult+0x20>
 800be58:	4c25      	ldr	r4, [pc, #148]	; (800bef0 <__pow5mult+0xa8>)
 800be5a:	3a01      	subs	r2, #1
 800be5c:	2300      	movs	r3, #0
 800be5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be62:	f7ff fe9b 	bl	800bb9c <__multadd>
 800be66:	4607      	mov	r7, r0
 800be68:	10ad      	asrs	r5, r5, #2
 800be6a:	d03d      	beq.n	800bee8 <__pow5mult+0xa0>
 800be6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be6e:	b97c      	cbnz	r4, 800be90 <__pow5mult+0x48>
 800be70:	2010      	movs	r0, #16
 800be72:	f7fe fa55 	bl	800a320 <malloc>
 800be76:	4602      	mov	r2, r0
 800be78:	6270      	str	r0, [r6, #36]	; 0x24
 800be7a:	b928      	cbnz	r0, 800be88 <__pow5mult+0x40>
 800be7c:	4b1d      	ldr	r3, [pc, #116]	; (800bef4 <__pow5mult+0xac>)
 800be7e:	481e      	ldr	r0, [pc, #120]	; (800bef8 <__pow5mult+0xb0>)
 800be80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be84:	f000 f9a6 	bl	800c1d4 <__assert_func>
 800be88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be8c:	6004      	str	r4, [r0, #0]
 800be8e:	60c4      	str	r4, [r0, #12]
 800be90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be98:	b94c      	cbnz	r4, 800beae <__pow5mult+0x66>
 800be9a:	f240 2171 	movw	r1, #625	; 0x271
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff ff16 	bl	800bcd0 <__i2b>
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8c8 0008 	str.w	r0, [r8, #8]
 800beaa:	4604      	mov	r4, r0
 800beac:	6003      	str	r3, [r0, #0]
 800beae:	f04f 0900 	mov.w	r9, #0
 800beb2:	07eb      	lsls	r3, r5, #31
 800beb4:	d50a      	bpl.n	800becc <__pow5mult+0x84>
 800beb6:	4639      	mov	r1, r7
 800beb8:	4622      	mov	r2, r4
 800beba:	4630      	mov	r0, r6
 800bebc:	f7ff ff1e 	bl	800bcfc <__multiply>
 800bec0:	4639      	mov	r1, r7
 800bec2:	4680      	mov	r8, r0
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7ff fe47 	bl	800bb58 <_Bfree>
 800beca:	4647      	mov	r7, r8
 800becc:	106d      	asrs	r5, r5, #1
 800bece:	d00b      	beq.n	800bee8 <__pow5mult+0xa0>
 800bed0:	6820      	ldr	r0, [r4, #0]
 800bed2:	b938      	cbnz	r0, 800bee4 <__pow5mult+0x9c>
 800bed4:	4622      	mov	r2, r4
 800bed6:	4621      	mov	r1, r4
 800bed8:	4630      	mov	r0, r6
 800beda:	f7ff ff0f 	bl	800bcfc <__multiply>
 800bede:	6020      	str	r0, [r4, #0]
 800bee0:	f8c0 9000 	str.w	r9, [r0]
 800bee4:	4604      	mov	r4, r0
 800bee6:	e7e4      	b.n	800beb2 <__pow5mult+0x6a>
 800bee8:	4638      	mov	r0, r7
 800beea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beee:	bf00      	nop
 800bef0:	0800d008 	.word	0x0800d008
 800bef4:	0800ce2d 	.word	0x0800ce2d
 800bef8:	0800ceb4 	.word	0x0800ceb4

0800befc <__lshift>:
 800befc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf00:	460c      	mov	r4, r1
 800bf02:	6849      	ldr	r1, [r1, #4]
 800bf04:	6923      	ldr	r3, [r4, #16]
 800bf06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	4607      	mov	r7, r0
 800bf0e:	4691      	mov	r9, r2
 800bf10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf14:	f108 0601 	add.w	r6, r8, #1
 800bf18:	42b3      	cmp	r3, r6
 800bf1a:	db0b      	blt.n	800bf34 <__lshift+0x38>
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	f7ff fddb 	bl	800bad8 <_Balloc>
 800bf22:	4605      	mov	r5, r0
 800bf24:	b948      	cbnz	r0, 800bf3a <__lshift+0x3e>
 800bf26:	4602      	mov	r2, r0
 800bf28:	4b28      	ldr	r3, [pc, #160]	; (800bfcc <__lshift+0xd0>)
 800bf2a:	4829      	ldr	r0, [pc, #164]	; (800bfd0 <__lshift+0xd4>)
 800bf2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf30:	f000 f950 	bl	800c1d4 <__assert_func>
 800bf34:	3101      	adds	r1, #1
 800bf36:	005b      	lsls	r3, r3, #1
 800bf38:	e7ee      	b.n	800bf18 <__lshift+0x1c>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f100 0114 	add.w	r1, r0, #20
 800bf40:	f100 0210 	add.w	r2, r0, #16
 800bf44:	4618      	mov	r0, r3
 800bf46:	4553      	cmp	r3, sl
 800bf48:	db33      	blt.n	800bfb2 <__lshift+0xb6>
 800bf4a:	6920      	ldr	r0, [r4, #16]
 800bf4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf50:	f104 0314 	add.w	r3, r4, #20
 800bf54:	f019 091f 	ands.w	r9, r9, #31
 800bf58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf60:	d02b      	beq.n	800bfba <__lshift+0xbe>
 800bf62:	f1c9 0e20 	rsb	lr, r9, #32
 800bf66:	468a      	mov	sl, r1
 800bf68:	2200      	movs	r2, #0
 800bf6a:	6818      	ldr	r0, [r3, #0]
 800bf6c:	fa00 f009 	lsl.w	r0, r0, r9
 800bf70:	4302      	orrs	r2, r0
 800bf72:	f84a 2b04 	str.w	r2, [sl], #4
 800bf76:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf7a:	459c      	cmp	ip, r3
 800bf7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf80:	d8f3      	bhi.n	800bf6a <__lshift+0x6e>
 800bf82:	ebac 0304 	sub.w	r3, ip, r4
 800bf86:	3b15      	subs	r3, #21
 800bf88:	f023 0303 	bic.w	r3, r3, #3
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	f104 0015 	add.w	r0, r4, #21
 800bf92:	4584      	cmp	ip, r0
 800bf94:	bf38      	it	cc
 800bf96:	2304      	movcc	r3, #4
 800bf98:	50ca      	str	r2, [r1, r3]
 800bf9a:	b10a      	cbz	r2, 800bfa0 <__lshift+0xa4>
 800bf9c:	f108 0602 	add.w	r6, r8, #2
 800bfa0:	3e01      	subs	r6, #1
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	612e      	str	r6, [r5, #16]
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	f7ff fdd6 	bl	800bb58 <_Bfree>
 800bfac:	4628      	mov	r0, r5
 800bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	e7c5      	b.n	800bf46 <__lshift+0x4a>
 800bfba:	3904      	subs	r1, #4
 800bfbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfc4:	459c      	cmp	ip, r3
 800bfc6:	d8f9      	bhi.n	800bfbc <__lshift+0xc0>
 800bfc8:	e7ea      	b.n	800bfa0 <__lshift+0xa4>
 800bfca:	bf00      	nop
 800bfcc:	0800cea3 	.word	0x0800cea3
 800bfd0:	0800ceb4 	.word	0x0800ceb4

0800bfd4 <__mcmp>:
 800bfd4:	b530      	push	{r4, r5, lr}
 800bfd6:	6902      	ldr	r2, [r0, #16]
 800bfd8:	690c      	ldr	r4, [r1, #16]
 800bfda:	1b12      	subs	r2, r2, r4
 800bfdc:	d10e      	bne.n	800bffc <__mcmp+0x28>
 800bfde:	f100 0314 	add.w	r3, r0, #20
 800bfe2:	3114      	adds	r1, #20
 800bfe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bff0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bff4:	42a5      	cmp	r5, r4
 800bff6:	d003      	beq.n	800c000 <__mcmp+0x2c>
 800bff8:	d305      	bcc.n	800c006 <__mcmp+0x32>
 800bffa:	2201      	movs	r2, #1
 800bffc:	4610      	mov	r0, r2
 800bffe:	bd30      	pop	{r4, r5, pc}
 800c000:	4283      	cmp	r3, r0
 800c002:	d3f3      	bcc.n	800bfec <__mcmp+0x18>
 800c004:	e7fa      	b.n	800bffc <__mcmp+0x28>
 800c006:	f04f 32ff 	mov.w	r2, #4294967295
 800c00a:	e7f7      	b.n	800bffc <__mcmp+0x28>

0800c00c <__mdiff>:
 800c00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	460c      	mov	r4, r1
 800c012:	4606      	mov	r6, r0
 800c014:	4611      	mov	r1, r2
 800c016:	4620      	mov	r0, r4
 800c018:	4617      	mov	r7, r2
 800c01a:	f7ff ffdb 	bl	800bfd4 <__mcmp>
 800c01e:	1e05      	subs	r5, r0, #0
 800c020:	d110      	bne.n	800c044 <__mdiff+0x38>
 800c022:	4629      	mov	r1, r5
 800c024:	4630      	mov	r0, r6
 800c026:	f7ff fd57 	bl	800bad8 <_Balloc>
 800c02a:	b930      	cbnz	r0, 800c03a <__mdiff+0x2e>
 800c02c:	4b39      	ldr	r3, [pc, #228]	; (800c114 <__mdiff+0x108>)
 800c02e:	4602      	mov	r2, r0
 800c030:	f240 2132 	movw	r1, #562	; 0x232
 800c034:	4838      	ldr	r0, [pc, #224]	; (800c118 <__mdiff+0x10c>)
 800c036:	f000 f8cd 	bl	800c1d4 <__assert_func>
 800c03a:	2301      	movs	r3, #1
 800c03c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c044:	bfa4      	itt	ge
 800c046:	463b      	movge	r3, r7
 800c048:	4627      	movge	r7, r4
 800c04a:	4630      	mov	r0, r6
 800c04c:	6879      	ldr	r1, [r7, #4]
 800c04e:	bfa6      	itte	ge
 800c050:	461c      	movge	r4, r3
 800c052:	2500      	movge	r5, #0
 800c054:	2501      	movlt	r5, #1
 800c056:	f7ff fd3f 	bl	800bad8 <_Balloc>
 800c05a:	b920      	cbnz	r0, 800c066 <__mdiff+0x5a>
 800c05c:	4b2d      	ldr	r3, [pc, #180]	; (800c114 <__mdiff+0x108>)
 800c05e:	4602      	mov	r2, r0
 800c060:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c064:	e7e6      	b.n	800c034 <__mdiff+0x28>
 800c066:	693e      	ldr	r6, [r7, #16]
 800c068:	60c5      	str	r5, [r0, #12]
 800c06a:	6925      	ldr	r5, [r4, #16]
 800c06c:	f107 0114 	add.w	r1, r7, #20
 800c070:	f104 0914 	add.w	r9, r4, #20
 800c074:	f100 0e14 	add.w	lr, r0, #20
 800c078:	f107 0210 	add.w	r2, r7, #16
 800c07c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c080:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c084:	46f2      	mov	sl, lr
 800c086:	2700      	movs	r7, #0
 800c088:	f859 3b04 	ldr.w	r3, [r9], #4
 800c08c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c090:	fa1f f883 	uxth.w	r8, r3
 800c094:	fa17 f78b 	uxtah	r7, r7, fp
 800c098:	0c1b      	lsrs	r3, r3, #16
 800c09a:	eba7 0808 	sub.w	r8, r7, r8
 800c09e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0a6:	fa1f f888 	uxth.w	r8, r8
 800c0aa:	141f      	asrs	r7, r3, #16
 800c0ac:	454d      	cmp	r5, r9
 800c0ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0b2:	f84a 3b04 	str.w	r3, [sl], #4
 800c0b6:	d8e7      	bhi.n	800c088 <__mdiff+0x7c>
 800c0b8:	1b2b      	subs	r3, r5, r4
 800c0ba:	3b15      	subs	r3, #21
 800c0bc:	f023 0303 	bic.w	r3, r3, #3
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	3415      	adds	r4, #21
 800c0c4:	42a5      	cmp	r5, r4
 800c0c6:	bf38      	it	cc
 800c0c8:	2304      	movcc	r3, #4
 800c0ca:	4419      	add	r1, r3
 800c0cc:	4473      	add	r3, lr
 800c0ce:	469e      	mov	lr, r3
 800c0d0:	460d      	mov	r5, r1
 800c0d2:	4565      	cmp	r5, ip
 800c0d4:	d30e      	bcc.n	800c0f4 <__mdiff+0xe8>
 800c0d6:	f10c 0203 	add.w	r2, ip, #3
 800c0da:	1a52      	subs	r2, r2, r1
 800c0dc:	f022 0203 	bic.w	r2, r2, #3
 800c0e0:	3903      	subs	r1, #3
 800c0e2:	458c      	cmp	ip, r1
 800c0e4:	bf38      	it	cc
 800c0e6:	2200      	movcc	r2, #0
 800c0e8:	441a      	add	r2, r3
 800c0ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0ee:	b17b      	cbz	r3, 800c110 <__mdiff+0x104>
 800c0f0:	6106      	str	r6, [r0, #16]
 800c0f2:	e7a5      	b.n	800c040 <__mdiff+0x34>
 800c0f4:	f855 8b04 	ldr.w	r8, [r5], #4
 800c0f8:	fa17 f488 	uxtah	r4, r7, r8
 800c0fc:	1422      	asrs	r2, r4, #16
 800c0fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c102:	b2a4      	uxth	r4, r4
 800c104:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c108:	f84e 4b04 	str.w	r4, [lr], #4
 800c10c:	1417      	asrs	r7, r2, #16
 800c10e:	e7e0      	b.n	800c0d2 <__mdiff+0xc6>
 800c110:	3e01      	subs	r6, #1
 800c112:	e7ea      	b.n	800c0ea <__mdiff+0xde>
 800c114:	0800cea3 	.word	0x0800cea3
 800c118:	0800ceb4 	.word	0x0800ceb4

0800c11c <__d2b>:
 800c11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c120:	4689      	mov	r9, r1
 800c122:	2101      	movs	r1, #1
 800c124:	ec57 6b10 	vmov	r6, r7, d0
 800c128:	4690      	mov	r8, r2
 800c12a:	f7ff fcd5 	bl	800bad8 <_Balloc>
 800c12e:	4604      	mov	r4, r0
 800c130:	b930      	cbnz	r0, 800c140 <__d2b+0x24>
 800c132:	4602      	mov	r2, r0
 800c134:	4b25      	ldr	r3, [pc, #148]	; (800c1cc <__d2b+0xb0>)
 800c136:	4826      	ldr	r0, [pc, #152]	; (800c1d0 <__d2b+0xb4>)
 800c138:	f240 310a 	movw	r1, #778	; 0x30a
 800c13c:	f000 f84a 	bl	800c1d4 <__assert_func>
 800c140:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c144:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c148:	bb35      	cbnz	r5, 800c198 <__d2b+0x7c>
 800c14a:	2e00      	cmp	r6, #0
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	d028      	beq.n	800c1a2 <__d2b+0x86>
 800c150:	4668      	mov	r0, sp
 800c152:	9600      	str	r6, [sp, #0]
 800c154:	f7ff fd8c 	bl	800bc70 <__lo0bits>
 800c158:	9900      	ldr	r1, [sp, #0]
 800c15a:	b300      	cbz	r0, 800c19e <__d2b+0x82>
 800c15c:	9a01      	ldr	r2, [sp, #4]
 800c15e:	f1c0 0320 	rsb	r3, r0, #32
 800c162:	fa02 f303 	lsl.w	r3, r2, r3
 800c166:	430b      	orrs	r3, r1
 800c168:	40c2      	lsrs	r2, r0
 800c16a:	6163      	str	r3, [r4, #20]
 800c16c:	9201      	str	r2, [sp, #4]
 800c16e:	9b01      	ldr	r3, [sp, #4]
 800c170:	61a3      	str	r3, [r4, #24]
 800c172:	2b00      	cmp	r3, #0
 800c174:	bf14      	ite	ne
 800c176:	2202      	movne	r2, #2
 800c178:	2201      	moveq	r2, #1
 800c17a:	6122      	str	r2, [r4, #16]
 800c17c:	b1d5      	cbz	r5, 800c1b4 <__d2b+0x98>
 800c17e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c182:	4405      	add	r5, r0
 800c184:	f8c9 5000 	str.w	r5, [r9]
 800c188:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c18c:	f8c8 0000 	str.w	r0, [r8]
 800c190:	4620      	mov	r0, r4
 800c192:	b003      	add	sp, #12
 800c194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c19c:	e7d5      	b.n	800c14a <__d2b+0x2e>
 800c19e:	6161      	str	r1, [r4, #20]
 800c1a0:	e7e5      	b.n	800c16e <__d2b+0x52>
 800c1a2:	a801      	add	r0, sp, #4
 800c1a4:	f7ff fd64 	bl	800bc70 <__lo0bits>
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	6163      	str	r3, [r4, #20]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	6122      	str	r2, [r4, #16]
 800c1b0:	3020      	adds	r0, #32
 800c1b2:	e7e3      	b.n	800c17c <__d2b+0x60>
 800c1b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1bc:	f8c9 0000 	str.w	r0, [r9]
 800c1c0:	6918      	ldr	r0, [r3, #16]
 800c1c2:	f7ff fd35 	bl	800bc30 <__hi0bits>
 800c1c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1ca:	e7df      	b.n	800c18c <__d2b+0x70>
 800c1cc:	0800cea3 	.word	0x0800cea3
 800c1d0:	0800ceb4 	.word	0x0800ceb4

0800c1d4 <__assert_func>:
 800c1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1d6:	4614      	mov	r4, r2
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4b09      	ldr	r3, [pc, #36]	; (800c200 <__assert_func+0x2c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4605      	mov	r5, r0
 800c1e0:	68d8      	ldr	r0, [r3, #12]
 800c1e2:	b14c      	cbz	r4, 800c1f8 <__assert_func+0x24>
 800c1e4:	4b07      	ldr	r3, [pc, #28]	; (800c204 <__assert_func+0x30>)
 800c1e6:	9100      	str	r1, [sp, #0]
 800c1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1ec:	4906      	ldr	r1, [pc, #24]	; (800c208 <__assert_func+0x34>)
 800c1ee:	462b      	mov	r3, r5
 800c1f0:	f000 f80e 	bl	800c210 <fiprintf>
 800c1f4:	f000 fa5a 	bl	800c6ac <abort>
 800c1f8:	4b04      	ldr	r3, [pc, #16]	; (800c20c <__assert_func+0x38>)
 800c1fa:	461c      	mov	r4, r3
 800c1fc:	e7f3      	b.n	800c1e6 <__assert_func+0x12>
 800c1fe:	bf00      	nop
 800c200:	20000144 	.word	0x20000144
 800c204:	0800d014 	.word	0x0800d014
 800c208:	0800d021 	.word	0x0800d021
 800c20c:	0800d04f 	.word	0x0800d04f

0800c210 <fiprintf>:
 800c210:	b40e      	push	{r1, r2, r3}
 800c212:	b503      	push	{r0, r1, lr}
 800c214:	4601      	mov	r1, r0
 800c216:	ab03      	add	r3, sp, #12
 800c218:	4805      	ldr	r0, [pc, #20]	; (800c230 <fiprintf+0x20>)
 800c21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c21e:	6800      	ldr	r0, [r0, #0]
 800c220:	9301      	str	r3, [sp, #4]
 800c222:	f000 f845 	bl	800c2b0 <_vfiprintf_r>
 800c226:	b002      	add	sp, #8
 800c228:	f85d eb04 	ldr.w	lr, [sp], #4
 800c22c:	b003      	add	sp, #12
 800c22e:	4770      	bx	lr
 800c230:	20000144 	.word	0x20000144

0800c234 <__retarget_lock_init_recursive>:
 800c234:	4770      	bx	lr

0800c236 <__retarget_lock_acquire_recursive>:
 800c236:	4770      	bx	lr

0800c238 <__retarget_lock_release_recursive>:
 800c238:	4770      	bx	lr

0800c23a <__ascii_mbtowc>:
 800c23a:	b082      	sub	sp, #8
 800c23c:	b901      	cbnz	r1, 800c240 <__ascii_mbtowc+0x6>
 800c23e:	a901      	add	r1, sp, #4
 800c240:	b142      	cbz	r2, 800c254 <__ascii_mbtowc+0x1a>
 800c242:	b14b      	cbz	r3, 800c258 <__ascii_mbtowc+0x1e>
 800c244:	7813      	ldrb	r3, [r2, #0]
 800c246:	600b      	str	r3, [r1, #0]
 800c248:	7812      	ldrb	r2, [r2, #0]
 800c24a:	1e10      	subs	r0, r2, #0
 800c24c:	bf18      	it	ne
 800c24e:	2001      	movne	r0, #1
 800c250:	b002      	add	sp, #8
 800c252:	4770      	bx	lr
 800c254:	4610      	mov	r0, r2
 800c256:	e7fb      	b.n	800c250 <__ascii_mbtowc+0x16>
 800c258:	f06f 0001 	mvn.w	r0, #1
 800c25c:	e7f8      	b.n	800c250 <__ascii_mbtowc+0x16>

0800c25e <__sfputc_r>:
 800c25e:	6893      	ldr	r3, [r2, #8]
 800c260:	3b01      	subs	r3, #1
 800c262:	2b00      	cmp	r3, #0
 800c264:	b410      	push	{r4}
 800c266:	6093      	str	r3, [r2, #8]
 800c268:	da08      	bge.n	800c27c <__sfputc_r+0x1e>
 800c26a:	6994      	ldr	r4, [r2, #24]
 800c26c:	42a3      	cmp	r3, r4
 800c26e:	db01      	blt.n	800c274 <__sfputc_r+0x16>
 800c270:	290a      	cmp	r1, #10
 800c272:	d103      	bne.n	800c27c <__sfputc_r+0x1e>
 800c274:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c278:	f000 b94a 	b.w	800c510 <__swbuf_r>
 800c27c:	6813      	ldr	r3, [r2, #0]
 800c27e:	1c58      	adds	r0, r3, #1
 800c280:	6010      	str	r0, [r2, #0]
 800c282:	7019      	strb	r1, [r3, #0]
 800c284:	4608      	mov	r0, r1
 800c286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <__sfputs_r>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	4606      	mov	r6, r0
 800c290:	460f      	mov	r7, r1
 800c292:	4614      	mov	r4, r2
 800c294:	18d5      	adds	r5, r2, r3
 800c296:	42ac      	cmp	r4, r5
 800c298:	d101      	bne.n	800c29e <__sfputs_r+0x12>
 800c29a:	2000      	movs	r0, #0
 800c29c:	e007      	b.n	800c2ae <__sfputs_r+0x22>
 800c29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a2:	463a      	mov	r2, r7
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f7ff ffda 	bl	800c25e <__sfputc_r>
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d1f3      	bne.n	800c296 <__sfputs_r+0xa>
 800c2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2b0 <_vfiprintf_r>:
 800c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	460d      	mov	r5, r1
 800c2b6:	b09d      	sub	sp, #116	; 0x74
 800c2b8:	4614      	mov	r4, r2
 800c2ba:	4698      	mov	r8, r3
 800c2bc:	4606      	mov	r6, r0
 800c2be:	b118      	cbz	r0, 800c2c8 <_vfiprintf_r+0x18>
 800c2c0:	6983      	ldr	r3, [r0, #24]
 800c2c2:	b90b      	cbnz	r3, 800c2c8 <_vfiprintf_r+0x18>
 800c2c4:	f000 fb14 	bl	800c8f0 <__sinit>
 800c2c8:	4b89      	ldr	r3, [pc, #548]	; (800c4f0 <_vfiprintf_r+0x240>)
 800c2ca:	429d      	cmp	r5, r3
 800c2cc:	d11b      	bne.n	800c306 <_vfiprintf_r+0x56>
 800c2ce:	6875      	ldr	r5, [r6, #4]
 800c2d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2d2:	07d9      	lsls	r1, r3, #31
 800c2d4:	d405      	bmi.n	800c2e2 <_vfiprintf_r+0x32>
 800c2d6:	89ab      	ldrh	r3, [r5, #12]
 800c2d8:	059a      	lsls	r2, r3, #22
 800c2da:	d402      	bmi.n	800c2e2 <_vfiprintf_r+0x32>
 800c2dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2de:	f7ff ffaa 	bl	800c236 <__retarget_lock_acquire_recursive>
 800c2e2:	89ab      	ldrh	r3, [r5, #12]
 800c2e4:	071b      	lsls	r3, r3, #28
 800c2e6:	d501      	bpl.n	800c2ec <_vfiprintf_r+0x3c>
 800c2e8:	692b      	ldr	r3, [r5, #16]
 800c2ea:	b9eb      	cbnz	r3, 800c328 <_vfiprintf_r+0x78>
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	f000 f96e 	bl	800c5d0 <__swsetup_r>
 800c2f4:	b1c0      	cbz	r0, 800c328 <_vfiprintf_r+0x78>
 800c2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2f8:	07dc      	lsls	r4, r3, #31
 800c2fa:	d50e      	bpl.n	800c31a <_vfiprintf_r+0x6a>
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c300:	b01d      	add	sp, #116	; 0x74
 800c302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c306:	4b7b      	ldr	r3, [pc, #492]	; (800c4f4 <_vfiprintf_r+0x244>)
 800c308:	429d      	cmp	r5, r3
 800c30a:	d101      	bne.n	800c310 <_vfiprintf_r+0x60>
 800c30c:	68b5      	ldr	r5, [r6, #8]
 800c30e:	e7df      	b.n	800c2d0 <_vfiprintf_r+0x20>
 800c310:	4b79      	ldr	r3, [pc, #484]	; (800c4f8 <_vfiprintf_r+0x248>)
 800c312:	429d      	cmp	r5, r3
 800c314:	bf08      	it	eq
 800c316:	68f5      	ldreq	r5, [r6, #12]
 800c318:	e7da      	b.n	800c2d0 <_vfiprintf_r+0x20>
 800c31a:	89ab      	ldrh	r3, [r5, #12]
 800c31c:	0598      	lsls	r0, r3, #22
 800c31e:	d4ed      	bmi.n	800c2fc <_vfiprintf_r+0x4c>
 800c320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c322:	f7ff ff89 	bl	800c238 <__retarget_lock_release_recursive>
 800c326:	e7e9      	b.n	800c2fc <_vfiprintf_r+0x4c>
 800c328:	2300      	movs	r3, #0
 800c32a:	9309      	str	r3, [sp, #36]	; 0x24
 800c32c:	2320      	movs	r3, #32
 800c32e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c332:	f8cd 800c 	str.w	r8, [sp, #12]
 800c336:	2330      	movs	r3, #48	; 0x30
 800c338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4fc <_vfiprintf_r+0x24c>
 800c33c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c340:	f04f 0901 	mov.w	r9, #1
 800c344:	4623      	mov	r3, r4
 800c346:	469a      	mov	sl, r3
 800c348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c34c:	b10a      	cbz	r2, 800c352 <_vfiprintf_r+0xa2>
 800c34e:	2a25      	cmp	r2, #37	; 0x25
 800c350:	d1f9      	bne.n	800c346 <_vfiprintf_r+0x96>
 800c352:	ebba 0b04 	subs.w	fp, sl, r4
 800c356:	d00b      	beq.n	800c370 <_vfiprintf_r+0xc0>
 800c358:	465b      	mov	r3, fp
 800c35a:	4622      	mov	r2, r4
 800c35c:	4629      	mov	r1, r5
 800c35e:	4630      	mov	r0, r6
 800c360:	f7ff ff94 	bl	800c28c <__sfputs_r>
 800c364:	3001      	adds	r0, #1
 800c366:	f000 80aa 	beq.w	800c4be <_vfiprintf_r+0x20e>
 800c36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c36c:	445a      	add	r2, fp
 800c36e:	9209      	str	r2, [sp, #36]	; 0x24
 800c370:	f89a 3000 	ldrb.w	r3, [sl]
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 80a2 	beq.w	800c4be <_vfiprintf_r+0x20e>
 800c37a:	2300      	movs	r3, #0
 800c37c:	f04f 32ff 	mov.w	r2, #4294967295
 800c380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c384:	f10a 0a01 	add.w	sl, sl, #1
 800c388:	9304      	str	r3, [sp, #16]
 800c38a:	9307      	str	r3, [sp, #28]
 800c38c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c390:	931a      	str	r3, [sp, #104]	; 0x68
 800c392:	4654      	mov	r4, sl
 800c394:	2205      	movs	r2, #5
 800c396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c39a:	4858      	ldr	r0, [pc, #352]	; (800c4fc <_vfiprintf_r+0x24c>)
 800c39c:	f7f3 ff20 	bl	80001e0 <memchr>
 800c3a0:	9a04      	ldr	r2, [sp, #16]
 800c3a2:	b9d8      	cbnz	r0, 800c3dc <_vfiprintf_r+0x12c>
 800c3a4:	06d1      	lsls	r1, r2, #27
 800c3a6:	bf44      	itt	mi
 800c3a8:	2320      	movmi	r3, #32
 800c3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3ae:	0713      	lsls	r3, r2, #28
 800c3b0:	bf44      	itt	mi
 800c3b2:	232b      	movmi	r3, #43	; 0x2b
 800c3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c3be:	d015      	beq.n	800c3ec <_vfiprintf_r+0x13c>
 800c3c0:	9a07      	ldr	r2, [sp, #28]
 800c3c2:	4654      	mov	r4, sl
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	f04f 0c0a 	mov.w	ip, #10
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3d0:	3b30      	subs	r3, #48	; 0x30
 800c3d2:	2b09      	cmp	r3, #9
 800c3d4:	d94e      	bls.n	800c474 <_vfiprintf_r+0x1c4>
 800c3d6:	b1b0      	cbz	r0, 800c406 <_vfiprintf_r+0x156>
 800c3d8:	9207      	str	r2, [sp, #28]
 800c3da:	e014      	b.n	800c406 <_vfiprintf_r+0x156>
 800c3dc:	eba0 0308 	sub.w	r3, r0, r8
 800c3e0:	fa09 f303 	lsl.w	r3, r9, r3
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	9304      	str	r3, [sp, #16]
 800c3e8:	46a2      	mov	sl, r4
 800c3ea:	e7d2      	b.n	800c392 <_vfiprintf_r+0xe2>
 800c3ec:	9b03      	ldr	r3, [sp, #12]
 800c3ee:	1d19      	adds	r1, r3, #4
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	9103      	str	r1, [sp, #12]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	bfbb      	ittet	lt
 800c3f8:	425b      	neglt	r3, r3
 800c3fa:	f042 0202 	orrlt.w	r2, r2, #2
 800c3fe:	9307      	strge	r3, [sp, #28]
 800c400:	9307      	strlt	r3, [sp, #28]
 800c402:	bfb8      	it	lt
 800c404:	9204      	strlt	r2, [sp, #16]
 800c406:	7823      	ldrb	r3, [r4, #0]
 800c408:	2b2e      	cmp	r3, #46	; 0x2e
 800c40a:	d10c      	bne.n	800c426 <_vfiprintf_r+0x176>
 800c40c:	7863      	ldrb	r3, [r4, #1]
 800c40e:	2b2a      	cmp	r3, #42	; 0x2a
 800c410:	d135      	bne.n	800c47e <_vfiprintf_r+0x1ce>
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	1d1a      	adds	r2, r3, #4
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	9203      	str	r2, [sp, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	bfb8      	it	lt
 800c41e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c422:	3402      	adds	r4, #2
 800c424:	9305      	str	r3, [sp, #20]
 800c426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c50c <_vfiprintf_r+0x25c>
 800c42a:	7821      	ldrb	r1, [r4, #0]
 800c42c:	2203      	movs	r2, #3
 800c42e:	4650      	mov	r0, sl
 800c430:	f7f3 fed6 	bl	80001e0 <memchr>
 800c434:	b140      	cbz	r0, 800c448 <_vfiprintf_r+0x198>
 800c436:	2340      	movs	r3, #64	; 0x40
 800c438:	eba0 000a 	sub.w	r0, r0, sl
 800c43c:	fa03 f000 	lsl.w	r0, r3, r0
 800c440:	9b04      	ldr	r3, [sp, #16]
 800c442:	4303      	orrs	r3, r0
 800c444:	3401      	adds	r4, #1
 800c446:	9304      	str	r3, [sp, #16]
 800c448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c44c:	482c      	ldr	r0, [pc, #176]	; (800c500 <_vfiprintf_r+0x250>)
 800c44e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c452:	2206      	movs	r2, #6
 800c454:	f7f3 fec4 	bl	80001e0 <memchr>
 800c458:	2800      	cmp	r0, #0
 800c45a:	d03f      	beq.n	800c4dc <_vfiprintf_r+0x22c>
 800c45c:	4b29      	ldr	r3, [pc, #164]	; (800c504 <_vfiprintf_r+0x254>)
 800c45e:	bb1b      	cbnz	r3, 800c4a8 <_vfiprintf_r+0x1f8>
 800c460:	9b03      	ldr	r3, [sp, #12]
 800c462:	3307      	adds	r3, #7
 800c464:	f023 0307 	bic.w	r3, r3, #7
 800c468:	3308      	adds	r3, #8
 800c46a:	9303      	str	r3, [sp, #12]
 800c46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c46e:	443b      	add	r3, r7
 800c470:	9309      	str	r3, [sp, #36]	; 0x24
 800c472:	e767      	b.n	800c344 <_vfiprintf_r+0x94>
 800c474:	fb0c 3202 	mla	r2, ip, r2, r3
 800c478:	460c      	mov	r4, r1
 800c47a:	2001      	movs	r0, #1
 800c47c:	e7a5      	b.n	800c3ca <_vfiprintf_r+0x11a>
 800c47e:	2300      	movs	r3, #0
 800c480:	3401      	adds	r4, #1
 800c482:	9305      	str	r3, [sp, #20]
 800c484:	4619      	mov	r1, r3
 800c486:	f04f 0c0a 	mov.w	ip, #10
 800c48a:	4620      	mov	r0, r4
 800c48c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c490:	3a30      	subs	r2, #48	; 0x30
 800c492:	2a09      	cmp	r2, #9
 800c494:	d903      	bls.n	800c49e <_vfiprintf_r+0x1ee>
 800c496:	2b00      	cmp	r3, #0
 800c498:	d0c5      	beq.n	800c426 <_vfiprintf_r+0x176>
 800c49a:	9105      	str	r1, [sp, #20]
 800c49c:	e7c3      	b.n	800c426 <_vfiprintf_r+0x176>
 800c49e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e7f0      	b.n	800c48a <_vfiprintf_r+0x1da>
 800c4a8:	ab03      	add	r3, sp, #12
 800c4aa:	9300      	str	r3, [sp, #0]
 800c4ac:	462a      	mov	r2, r5
 800c4ae:	4b16      	ldr	r3, [pc, #88]	; (800c508 <_vfiprintf_r+0x258>)
 800c4b0:	a904      	add	r1, sp, #16
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f7fe f8ac 	bl	800a610 <_printf_float>
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	1c78      	adds	r0, r7, #1
 800c4bc:	d1d6      	bne.n	800c46c <_vfiprintf_r+0x1bc>
 800c4be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4c0:	07d9      	lsls	r1, r3, #31
 800c4c2:	d405      	bmi.n	800c4d0 <_vfiprintf_r+0x220>
 800c4c4:	89ab      	ldrh	r3, [r5, #12]
 800c4c6:	059a      	lsls	r2, r3, #22
 800c4c8:	d402      	bmi.n	800c4d0 <_vfiprintf_r+0x220>
 800c4ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4cc:	f7ff feb4 	bl	800c238 <__retarget_lock_release_recursive>
 800c4d0:	89ab      	ldrh	r3, [r5, #12]
 800c4d2:	065b      	lsls	r3, r3, #25
 800c4d4:	f53f af12 	bmi.w	800c2fc <_vfiprintf_r+0x4c>
 800c4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4da:	e711      	b.n	800c300 <_vfiprintf_r+0x50>
 800c4dc:	ab03      	add	r3, sp, #12
 800c4de:	9300      	str	r3, [sp, #0]
 800c4e0:	462a      	mov	r2, r5
 800c4e2:	4b09      	ldr	r3, [pc, #36]	; (800c508 <_vfiprintf_r+0x258>)
 800c4e4:	a904      	add	r1, sp, #16
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f7fe fb36 	bl	800ab58 <_printf_i>
 800c4ec:	e7e4      	b.n	800c4b8 <_vfiprintf_r+0x208>
 800c4ee:	bf00      	nop
 800c4f0:	0800d18c 	.word	0x0800d18c
 800c4f4:	0800d1ac 	.word	0x0800d1ac
 800c4f8:	0800d16c 	.word	0x0800d16c
 800c4fc:	0800d05a 	.word	0x0800d05a
 800c500:	0800d064 	.word	0x0800d064
 800c504:	0800a611 	.word	0x0800a611
 800c508:	0800c28d 	.word	0x0800c28d
 800c50c:	0800d060 	.word	0x0800d060

0800c510 <__swbuf_r>:
 800c510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c512:	460e      	mov	r6, r1
 800c514:	4614      	mov	r4, r2
 800c516:	4605      	mov	r5, r0
 800c518:	b118      	cbz	r0, 800c522 <__swbuf_r+0x12>
 800c51a:	6983      	ldr	r3, [r0, #24]
 800c51c:	b90b      	cbnz	r3, 800c522 <__swbuf_r+0x12>
 800c51e:	f000 f9e7 	bl	800c8f0 <__sinit>
 800c522:	4b21      	ldr	r3, [pc, #132]	; (800c5a8 <__swbuf_r+0x98>)
 800c524:	429c      	cmp	r4, r3
 800c526:	d12b      	bne.n	800c580 <__swbuf_r+0x70>
 800c528:	686c      	ldr	r4, [r5, #4]
 800c52a:	69a3      	ldr	r3, [r4, #24]
 800c52c:	60a3      	str	r3, [r4, #8]
 800c52e:	89a3      	ldrh	r3, [r4, #12]
 800c530:	071a      	lsls	r2, r3, #28
 800c532:	d52f      	bpl.n	800c594 <__swbuf_r+0x84>
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	b36b      	cbz	r3, 800c594 <__swbuf_r+0x84>
 800c538:	6923      	ldr	r3, [r4, #16]
 800c53a:	6820      	ldr	r0, [r4, #0]
 800c53c:	1ac0      	subs	r0, r0, r3
 800c53e:	6963      	ldr	r3, [r4, #20]
 800c540:	b2f6      	uxtb	r6, r6
 800c542:	4283      	cmp	r3, r0
 800c544:	4637      	mov	r7, r6
 800c546:	dc04      	bgt.n	800c552 <__swbuf_r+0x42>
 800c548:	4621      	mov	r1, r4
 800c54a:	4628      	mov	r0, r5
 800c54c:	f000 f93c 	bl	800c7c8 <_fflush_r>
 800c550:	bb30      	cbnz	r0, 800c5a0 <__swbuf_r+0x90>
 800c552:	68a3      	ldr	r3, [r4, #8]
 800c554:	3b01      	subs	r3, #1
 800c556:	60a3      	str	r3, [r4, #8]
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	6022      	str	r2, [r4, #0]
 800c55e:	701e      	strb	r6, [r3, #0]
 800c560:	6963      	ldr	r3, [r4, #20]
 800c562:	3001      	adds	r0, #1
 800c564:	4283      	cmp	r3, r0
 800c566:	d004      	beq.n	800c572 <__swbuf_r+0x62>
 800c568:	89a3      	ldrh	r3, [r4, #12]
 800c56a:	07db      	lsls	r3, r3, #31
 800c56c:	d506      	bpl.n	800c57c <__swbuf_r+0x6c>
 800c56e:	2e0a      	cmp	r6, #10
 800c570:	d104      	bne.n	800c57c <__swbuf_r+0x6c>
 800c572:	4621      	mov	r1, r4
 800c574:	4628      	mov	r0, r5
 800c576:	f000 f927 	bl	800c7c8 <_fflush_r>
 800c57a:	b988      	cbnz	r0, 800c5a0 <__swbuf_r+0x90>
 800c57c:	4638      	mov	r0, r7
 800c57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c580:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <__swbuf_r+0x9c>)
 800c582:	429c      	cmp	r4, r3
 800c584:	d101      	bne.n	800c58a <__swbuf_r+0x7a>
 800c586:	68ac      	ldr	r4, [r5, #8]
 800c588:	e7cf      	b.n	800c52a <__swbuf_r+0x1a>
 800c58a:	4b09      	ldr	r3, [pc, #36]	; (800c5b0 <__swbuf_r+0xa0>)
 800c58c:	429c      	cmp	r4, r3
 800c58e:	bf08      	it	eq
 800c590:	68ec      	ldreq	r4, [r5, #12]
 800c592:	e7ca      	b.n	800c52a <__swbuf_r+0x1a>
 800c594:	4621      	mov	r1, r4
 800c596:	4628      	mov	r0, r5
 800c598:	f000 f81a 	bl	800c5d0 <__swsetup_r>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d0cb      	beq.n	800c538 <__swbuf_r+0x28>
 800c5a0:	f04f 37ff 	mov.w	r7, #4294967295
 800c5a4:	e7ea      	b.n	800c57c <__swbuf_r+0x6c>
 800c5a6:	bf00      	nop
 800c5a8:	0800d18c 	.word	0x0800d18c
 800c5ac:	0800d1ac 	.word	0x0800d1ac
 800c5b0:	0800d16c 	.word	0x0800d16c

0800c5b4 <__ascii_wctomb>:
 800c5b4:	b149      	cbz	r1, 800c5ca <__ascii_wctomb+0x16>
 800c5b6:	2aff      	cmp	r2, #255	; 0xff
 800c5b8:	bf85      	ittet	hi
 800c5ba:	238a      	movhi	r3, #138	; 0x8a
 800c5bc:	6003      	strhi	r3, [r0, #0]
 800c5be:	700a      	strbls	r2, [r1, #0]
 800c5c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c5c4:	bf98      	it	ls
 800c5c6:	2001      	movls	r0, #1
 800c5c8:	4770      	bx	lr
 800c5ca:	4608      	mov	r0, r1
 800c5cc:	4770      	bx	lr
	...

0800c5d0 <__swsetup_r>:
 800c5d0:	4b32      	ldr	r3, [pc, #200]	; (800c69c <__swsetup_r+0xcc>)
 800c5d2:	b570      	push	{r4, r5, r6, lr}
 800c5d4:	681d      	ldr	r5, [r3, #0]
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	460c      	mov	r4, r1
 800c5da:	b125      	cbz	r5, 800c5e6 <__swsetup_r+0x16>
 800c5dc:	69ab      	ldr	r3, [r5, #24]
 800c5de:	b913      	cbnz	r3, 800c5e6 <__swsetup_r+0x16>
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	f000 f985 	bl	800c8f0 <__sinit>
 800c5e6:	4b2e      	ldr	r3, [pc, #184]	; (800c6a0 <__swsetup_r+0xd0>)
 800c5e8:	429c      	cmp	r4, r3
 800c5ea:	d10f      	bne.n	800c60c <__swsetup_r+0x3c>
 800c5ec:	686c      	ldr	r4, [r5, #4]
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5f4:	0719      	lsls	r1, r3, #28
 800c5f6:	d42c      	bmi.n	800c652 <__swsetup_r+0x82>
 800c5f8:	06dd      	lsls	r5, r3, #27
 800c5fa:	d411      	bmi.n	800c620 <__swsetup_r+0x50>
 800c5fc:	2309      	movs	r3, #9
 800c5fe:	6033      	str	r3, [r6, #0]
 800c600:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c604:	81a3      	strh	r3, [r4, #12]
 800c606:	f04f 30ff 	mov.w	r0, #4294967295
 800c60a:	e03e      	b.n	800c68a <__swsetup_r+0xba>
 800c60c:	4b25      	ldr	r3, [pc, #148]	; (800c6a4 <__swsetup_r+0xd4>)
 800c60e:	429c      	cmp	r4, r3
 800c610:	d101      	bne.n	800c616 <__swsetup_r+0x46>
 800c612:	68ac      	ldr	r4, [r5, #8]
 800c614:	e7eb      	b.n	800c5ee <__swsetup_r+0x1e>
 800c616:	4b24      	ldr	r3, [pc, #144]	; (800c6a8 <__swsetup_r+0xd8>)
 800c618:	429c      	cmp	r4, r3
 800c61a:	bf08      	it	eq
 800c61c:	68ec      	ldreq	r4, [r5, #12]
 800c61e:	e7e6      	b.n	800c5ee <__swsetup_r+0x1e>
 800c620:	0758      	lsls	r0, r3, #29
 800c622:	d512      	bpl.n	800c64a <__swsetup_r+0x7a>
 800c624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c626:	b141      	cbz	r1, 800c63a <__swsetup_r+0x6a>
 800c628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c62c:	4299      	cmp	r1, r3
 800c62e:	d002      	beq.n	800c636 <__swsetup_r+0x66>
 800c630:	4630      	mov	r0, r6
 800c632:	f7fd fea3 	bl	800a37c <_free_r>
 800c636:	2300      	movs	r3, #0
 800c638:	6363      	str	r3, [r4, #52]	; 0x34
 800c63a:	89a3      	ldrh	r3, [r4, #12]
 800c63c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c640:	81a3      	strh	r3, [r4, #12]
 800c642:	2300      	movs	r3, #0
 800c644:	6063      	str	r3, [r4, #4]
 800c646:	6923      	ldr	r3, [r4, #16]
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	89a3      	ldrh	r3, [r4, #12]
 800c64c:	f043 0308 	orr.w	r3, r3, #8
 800c650:	81a3      	strh	r3, [r4, #12]
 800c652:	6923      	ldr	r3, [r4, #16]
 800c654:	b94b      	cbnz	r3, 800c66a <__swsetup_r+0x9a>
 800c656:	89a3      	ldrh	r3, [r4, #12]
 800c658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c660:	d003      	beq.n	800c66a <__swsetup_r+0x9a>
 800c662:	4621      	mov	r1, r4
 800c664:	4630      	mov	r0, r6
 800c666:	f000 fa05 	bl	800ca74 <__smakebuf_r>
 800c66a:	89a0      	ldrh	r0, [r4, #12]
 800c66c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c670:	f010 0301 	ands.w	r3, r0, #1
 800c674:	d00a      	beq.n	800c68c <__swsetup_r+0xbc>
 800c676:	2300      	movs	r3, #0
 800c678:	60a3      	str	r3, [r4, #8]
 800c67a:	6963      	ldr	r3, [r4, #20]
 800c67c:	425b      	negs	r3, r3
 800c67e:	61a3      	str	r3, [r4, #24]
 800c680:	6923      	ldr	r3, [r4, #16]
 800c682:	b943      	cbnz	r3, 800c696 <__swsetup_r+0xc6>
 800c684:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c688:	d1ba      	bne.n	800c600 <__swsetup_r+0x30>
 800c68a:	bd70      	pop	{r4, r5, r6, pc}
 800c68c:	0781      	lsls	r1, r0, #30
 800c68e:	bf58      	it	pl
 800c690:	6963      	ldrpl	r3, [r4, #20]
 800c692:	60a3      	str	r3, [r4, #8]
 800c694:	e7f4      	b.n	800c680 <__swsetup_r+0xb0>
 800c696:	2000      	movs	r0, #0
 800c698:	e7f7      	b.n	800c68a <__swsetup_r+0xba>
 800c69a:	bf00      	nop
 800c69c:	20000144 	.word	0x20000144
 800c6a0:	0800d18c 	.word	0x0800d18c
 800c6a4:	0800d1ac 	.word	0x0800d1ac
 800c6a8:	0800d16c 	.word	0x0800d16c

0800c6ac <abort>:
 800c6ac:	b508      	push	{r3, lr}
 800c6ae:	2006      	movs	r0, #6
 800c6b0:	f000 fa48 	bl	800cb44 <raise>
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	f7f5 fbb3 	bl	8001e20 <_exit>
	...

0800c6bc <__sflush_r>:
 800c6bc:	898a      	ldrh	r2, [r1, #12]
 800c6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	0710      	lsls	r0, r2, #28
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	d458      	bmi.n	800c77c <__sflush_r+0xc0>
 800c6ca:	684b      	ldr	r3, [r1, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dc05      	bgt.n	800c6dc <__sflush_r+0x20>
 800c6d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	dc02      	bgt.n	800c6dc <__sflush_r+0x20>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6de:	2e00      	cmp	r6, #0
 800c6e0:	d0f9      	beq.n	800c6d6 <__sflush_r+0x1a>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6e8:	682f      	ldr	r7, [r5, #0]
 800c6ea:	602b      	str	r3, [r5, #0]
 800c6ec:	d032      	beq.n	800c754 <__sflush_r+0x98>
 800c6ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6f0:	89a3      	ldrh	r3, [r4, #12]
 800c6f2:	075a      	lsls	r2, r3, #29
 800c6f4:	d505      	bpl.n	800c702 <__sflush_r+0x46>
 800c6f6:	6863      	ldr	r3, [r4, #4]
 800c6f8:	1ac0      	subs	r0, r0, r3
 800c6fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6fc:	b10b      	cbz	r3, 800c702 <__sflush_r+0x46>
 800c6fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c700:	1ac0      	subs	r0, r0, r3
 800c702:	2300      	movs	r3, #0
 800c704:	4602      	mov	r2, r0
 800c706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c708:	6a21      	ldr	r1, [r4, #32]
 800c70a:	4628      	mov	r0, r5
 800c70c:	47b0      	blx	r6
 800c70e:	1c43      	adds	r3, r0, #1
 800c710:	89a3      	ldrh	r3, [r4, #12]
 800c712:	d106      	bne.n	800c722 <__sflush_r+0x66>
 800c714:	6829      	ldr	r1, [r5, #0]
 800c716:	291d      	cmp	r1, #29
 800c718:	d82c      	bhi.n	800c774 <__sflush_r+0xb8>
 800c71a:	4a2a      	ldr	r2, [pc, #168]	; (800c7c4 <__sflush_r+0x108>)
 800c71c:	40ca      	lsrs	r2, r1
 800c71e:	07d6      	lsls	r6, r2, #31
 800c720:	d528      	bpl.n	800c774 <__sflush_r+0xb8>
 800c722:	2200      	movs	r2, #0
 800c724:	6062      	str	r2, [r4, #4]
 800c726:	04d9      	lsls	r1, r3, #19
 800c728:	6922      	ldr	r2, [r4, #16]
 800c72a:	6022      	str	r2, [r4, #0]
 800c72c:	d504      	bpl.n	800c738 <__sflush_r+0x7c>
 800c72e:	1c42      	adds	r2, r0, #1
 800c730:	d101      	bne.n	800c736 <__sflush_r+0x7a>
 800c732:	682b      	ldr	r3, [r5, #0]
 800c734:	b903      	cbnz	r3, 800c738 <__sflush_r+0x7c>
 800c736:	6560      	str	r0, [r4, #84]	; 0x54
 800c738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c73a:	602f      	str	r7, [r5, #0]
 800c73c:	2900      	cmp	r1, #0
 800c73e:	d0ca      	beq.n	800c6d6 <__sflush_r+0x1a>
 800c740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c744:	4299      	cmp	r1, r3
 800c746:	d002      	beq.n	800c74e <__sflush_r+0x92>
 800c748:	4628      	mov	r0, r5
 800c74a:	f7fd fe17 	bl	800a37c <_free_r>
 800c74e:	2000      	movs	r0, #0
 800c750:	6360      	str	r0, [r4, #52]	; 0x34
 800c752:	e7c1      	b.n	800c6d8 <__sflush_r+0x1c>
 800c754:	6a21      	ldr	r1, [r4, #32]
 800c756:	2301      	movs	r3, #1
 800c758:	4628      	mov	r0, r5
 800c75a:	47b0      	blx	r6
 800c75c:	1c41      	adds	r1, r0, #1
 800c75e:	d1c7      	bne.n	800c6f0 <__sflush_r+0x34>
 800c760:	682b      	ldr	r3, [r5, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d0c4      	beq.n	800c6f0 <__sflush_r+0x34>
 800c766:	2b1d      	cmp	r3, #29
 800c768:	d001      	beq.n	800c76e <__sflush_r+0xb2>
 800c76a:	2b16      	cmp	r3, #22
 800c76c:	d101      	bne.n	800c772 <__sflush_r+0xb6>
 800c76e:	602f      	str	r7, [r5, #0]
 800c770:	e7b1      	b.n	800c6d6 <__sflush_r+0x1a>
 800c772:	89a3      	ldrh	r3, [r4, #12]
 800c774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c778:	81a3      	strh	r3, [r4, #12]
 800c77a:	e7ad      	b.n	800c6d8 <__sflush_r+0x1c>
 800c77c:	690f      	ldr	r7, [r1, #16]
 800c77e:	2f00      	cmp	r7, #0
 800c780:	d0a9      	beq.n	800c6d6 <__sflush_r+0x1a>
 800c782:	0793      	lsls	r3, r2, #30
 800c784:	680e      	ldr	r6, [r1, #0]
 800c786:	bf08      	it	eq
 800c788:	694b      	ldreq	r3, [r1, #20]
 800c78a:	600f      	str	r7, [r1, #0]
 800c78c:	bf18      	it	ne
 800c78e:	2300      	movne	r3, #0
 800c790:	eba6 0807 	sub.w	r8, r6, r7
 800c794:	608b      	str	r3, [r1, #8]
 800c796:	f1b8 0f00 	cmp.w	r8, #0
 800c79a:	dd9c      	ble.n	800c6d6 <__sflush_r+0x1a>
 800c79c:	6a21      	ldr	r1, [r4, #32]
 800c79e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7a0:	4643      	mov	r3, r8
 800c7a2:	463a      	mov	r2, r7
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	47b0      	blx	r6
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	dc06      	bgt.n	800c7ba <__sflush_r+0xfe>
 800c7ac:	89a3      	ldrh	r3, [r4, #12]
 800c7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7b2:	81a3      	strh	r3, [r4, #12]
 800c7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b8:	e78e      	b.n	800c6d8 <__sflush_r+0x1c>
 800c7ba:	4407      	add	r7, r0
 800c7bc:	eba8 0800 	sub.w	r8, r8, r0
 800c7c0:	e7e9      	b.n	800c796 <__sflush_r+0xda>
 800c7c2:	bf00      	nop
 800c7c4:	20400001 	.word	0x20400001

0800c7c8 <_fflush_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	690b      	ldr	r3, [r1, #16]
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	b913      	cbnz	r3, 800c7d8 <_fflush_r+0x10>
 800c7d2:	2500      	movs	r5, #0
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	b118      	cbz	r0, 800c7e2 <_fflush_r+0x1a>
 800c7da:	6983      	ldr	r3, [r0, #24]
 800c7dc:	b90b      	cbnz	r3, 800c7e2 <_fflush_r+0x1a>
 800c7de:	f000 f887 	bl	800c8f0 <__sinit>
 800c7e2:	4b14      	ldr	r3, [pc, #80]	; (800c834 <_fflush_r+0x6c>)
 800c7e4:	429c      	cmp	r4, r3
 800c7e6:	d11b      	bne.n	800c820 <_fflush_r+0x58>
 800c7e8:	686c      	ldr	r4, [r5, #4]
 800c7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0ef      	beq.n	800c7d2 <_fflush_r+0xa>
 800c7f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7f4:	07d0      	lsls	r0, r2, #31
 800c7f6:	d404      	bmi.n	800c802 <_fflush_r+0x3a>
 800c7f8:	0599      	lsls	r1, r3, #22
 800c7fa:	d402      	bmi.n	800c802 <_fflush_r+0x3a>
 800c7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7fe:	f7ff fd1a 	bl	800c236 <__retarget_lock_acquire_recursive>
 800c802:	4628      	mov	r0, r5
 800c804:	4621      	mov	r1, r4
 800c806:	f7ff ff59 	bl	800c6bc <__sflush_r>
 800c80a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c80c:	07da      	lsls	r2, r3, #31
 800c80e:	4605      	mov	r5, r0
 800c810:	d4e0      	bmi.n	800c7d4 <_fflush_r+0xc>
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	059b      	lsls	r3, r3, #22
 800c816:	d4dd      	bmi.n	800c7d4 <_fflush_r+0xc>
 800c818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c81a:	f7ff fd0d 	bl	800c238 <__retarget_lock_release_recursive>
 800c81e:	e7d9      	b.n	800c7d4 <_fflush_r+0xc>
 800c820:	4b05      	ldr	r3, [pc, #20]	; (800c838 <_fflush_r+0x70>)
 800c822:	429c      	cmp	r4, r3
 800c824:	d101      	bne.n	800c82a <_fflush_r+0x62>
 800c826:	68ac      	ldr	r4, [r5, #8]
 800c828:	e7df      	b.n	800c7ea <_fflush_r+0x22>
 800c82a:	4b04      	ldr	r3, [pc, #16]	; (800c83c <_fflush_r+0x74>)
 800c82c:	429c      	cmp	r4, r3
 800c82e:	bf08      	it	eq
 800c830:	68ec      	ldreq	r4, [r5, #12]
 800c832:	e7da      	b.n	800c7ea <_fflush_r+0x22>
 800c834:	0800d18c 	.word	0x0800d18c
 800c838:	0800d1ac 	.word	0x0800d1ac
 800c83c:	0800d16c 	.word	0x0800d16c

0800c840 <std>:
 800c840:	2300      	movs	r3, #0
 800c842:	b510      	push	{r4, lr}
 800c844:	4604      	mov	r4, r0
 800c846:	e9c0 3300 	strd	r3, r3, [r0]
 800c84a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c84e:	6083      	str	r3, [r0, #8]
 800c850:	8181      	strh	r1, [r0, #12]
 800c852:	6643      	str	r3, [r0, #100]	; 0x64
 800c854:	81c2      	strh	r2, [r0, #14]
 800c856:	6183      	str	r3, [r0, #24]
 800c858:	4619      	mov	r1, r3
 800c85a:	2208      	movs	r2, #8
 800c85c:	305c      	adds	r0, #92	; 0x5c
 800c85e:	f7fd fd75 	bl	800a34c <memset>
 800c862:	4b05      	ldr	r3, [pc, #20]	; (800c878 <std+0x38>)
 800c864:	6263      	str	r3, [r4, #36]	; 0x24
 800c866:	4b05      	ldr	r3, [pc, #20]	; (800c87c <std+0x3c>)
 800c868:	62a3      	str	r3, [r4, #40]	; 0x28
 800c86a:	4b05      	ldr	r3, [pc, #20]	; (800c880 <std+0x40>)
 800c86c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <std+0x44>)
 800c870:	6224      	str	r4, [r4, #32]
 800c872:	6323      	str	r3, [r4, #48]	; 0x30
 800c874:	bd10      	pop	{r4, pc}
 800c876:	bf00      	nop
 800c878:	0800cb7d 	.word	0x0800cb7d
 800c87c:	0800cb9f 	.word	0x0800cb9f
 800c880:	0800cbd7 	.word	0x0800cbd7
 800c884:	0800cbfb 	.word	0x0800cbfb

0800c888 <_cleanup_r>:
 800c888:	4901      	ldr	r1, [pc, #4]	; (800c890 <_cleanup_r+0x8>)
 800c88a:	f000 b8af 	b.w	800c9ec <_fwalk_reent>
 800c88e:	bf00      	nop
 800c890:	0800c7c9 	.word	0x0800c7c9

0800c894 <__sfmoreglue>:
 800c894:	b570      	push	{r4, r5, r6, lr}
 800c896:	1e4a      	subs	r2, r1, #1
 800c898:	2568      	movs	r5, #104	; 0x68
 800c89a:	4355      	muls	r5, r2
 800c89c:	460e      	mov	r6, r1
 800c89e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c8a2:	f7fd fdbb 	bl	800a41c <_malloc_r>
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	b140      	cbz	r0, 800c8bc <__sfmoreglue+0x28>
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	e9c0 1600 	strd	r1, r6, [r0]
 800c8b0:	300c      	adds	r0, #12
 800c8b2:	60a0      	str	r0, [r4, #8]
 800c8b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c8b8:	f7fd fd48 	bl	800a34c <memset>
 800c8bc:	4620      	mov	r0, r4
 800c8be:	bd70      	pop	{r4, r5, r6, pc}

0800c8c0 <__sfp_lock_acquire>:
 800c8c0:	4801      	ldr	r0, [pc, #4]	; (800c8c8 <__sfp_lock_acquire+0x8>)
 800c8c2:	f7ff bcb8 	b.w	800c236 <__retarget_lock_acquire_recursive>
 800c8c6:	bf00      	nop
 800c8c8:	20008950 	.word	0x20008950

0800c8cc <__sfp_lock_release>:
 800c8cc:	4801      	ldr	r0, [pc, #4]	; (800c8d4 <__sfp_lock_release+0x8>)
 800c8ce:	f7ff bcb3 	b.w	800c238 <__retarget_lock_release_recursive>
 800c8d2:	bf00      	nop
 800c8d4:	20008950 	.word	0x20008950

0800c8d8 <__sinit_lock_acquire>:
 800c8d8:	4801      	ldr	r0, [pc, #4]	; (800c8e0 <__sinit_lock_acquire+0x8>)
 800c8da:	f7ff bcac 	b.w	800c236 <__retarget_lock_acquire_recursive>
 800c8de:	bf00      	nop
 800c8e0:	2000894b 	.word	0x2000894b

0800c8e4 <__sinit_lock_release>:
 800c8e4:	4801      	ldr	r0, [pc, #4]	; (800c8ec <__sinit_lock_release+0x8>)
 800c8e6:	f7ff bca7 	b.w	800c238 <__retarget_lock_release_recursive>
 800c8ea:	bf00      	nop
 800c8ec:	2000894b 	.word	0x2000894b

0800c8f0 <__sinit>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	f7ff fff0 	bl	800c8d8 <__sinit_lock_acquire>
 800c8f8:	69a3      	ldr	r3, [r4, #24]
 800c8fa:	b11b      	cbz	r3, 800c904 <__sinit+0x14>
 800c8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c900:	f7ff bff0 	b.w	800c8e4 <__sinit_lock_release>
 800c904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c908:	6523      	str	r3, [r4, #80]	; 0x50
 800c90a:	4b13      	ldr	r3, [pc, #76]	; (800c958 <__sinit+0x68>)
 800c90c:	4a13      	ldr	r2, [pc, #76]	; (800c95c <__sinit+0x6c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	62a2      	str	r2, [r4, #40]	; 0x28
 800c912:	42a3      	cmp	r3, r4
 800c914:	bf04      	itt	eq
 800c916:	2301      	moveq	r3, #1
 800c918:	61a3      	streq	r3, [r4, #24]
 800c91a:	4620      	mov	r0, r4
 800c91c:	f000 f820 	bl	800c960 <__sfp>
 800c920:	6060      	str	r0, [r4, #4]
 800c922:	4620      	mov	r0, r4
 800c924:	f000 f81c 	bl	800c960 <__sfp>
 800c928:	60a0      	str	r0, [r4, #8]
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 f818 	bl	800c960 <__sfp>
 800c930:	2200      	movs	r2, #0
 800c932:	60e0      	str	r0, [r4, #12]
 800c934:	2104      	movs	r1, #4
 800c936:	6860      	ldr	r0, [r4, #4]
 800c938:	f7ff ff82 	bl	800c840 <std>
 800c93c:	68a0      	ldr	r0, [r4, #8]
 800c93e:	2201      	movs	r2, #1
 800c940:	2109      	movs	r1, #9
 800c942:	f7ff ff7d 	bl	800c840 <std>
 800c946:	68e0      	ldr	r0, [r4, #12]
 800c948:	2202      	movs	r2, #2
 800c94a:	2112      	movs	r1, #18
 800c94c:	f7ff ff78 	bl	800c840 <std>
 800c950:	2301      	movs	r3, #1
 800c952:	61a3      	str	r3, [r4, #24]
 800c954:	e7d2      	b.n	800c8fc <__sinit+0xc>
 800c956:	bf00      	nop
 800c958:	0800cde8 	.word	0x0800cde8
 800c95c:	0800c889 	.word	0x0800c889

0800c960 <__sfp>:
 800c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c962:	4607      	mov	r7, r0
 800c964:	f7ff ffac 	bl	800c8c0 <__sfp_lock_acquire>
 800c968:	4b1e      	ldr	r3, [pc, #120]	; (800c9e4 <__sfp+0x84>)
 800c96a:	681e      	ldr	r6, [r3, #0]
 800c96c:	69b3      	ldr	r3, [r6, #24]
 800c96e:	b913      	cbnz	r3, 800c976 <__sfp+0x16>
 800c970:	4630      	mov	r0, r6
 800c972:	f7ff ffbd 	bl	800c8f0 <__sinit>
 800c976:	3648      	adds	r6, #72	; 0x48
 800c978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c97c:	3b01      	subs	r3, #1
 800c97e:	d503      	bpl.n	800c988 <__sfp+0x28>
 800c980:	6833      	ldr	r3, [r6, #0]
 800c982:	b30b      	cbz	r3, 800c9c8 <__sfp+0x68>
 800c984:	6836      	ldr	r6, [r6, #0]
 800c986:	e7f7      	b.n	800c978 <__sfp+0x18>
 800c988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c98c:	b9d5      	cbnz	r5, 800c9c4 <__sfp+0x64>
 800c98e:	4b16      	ldr	r3, [pc, #88]	; (800c9e8 <__sfp+0x88>)
 800c990:	60e3      	str	r3, [r4, #12]
 800c992:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c996:	6665      	str	r5, [r4, #100]	; 0x64
 800c998:	f7ff fc4c 	bl	800c234 <__retarget_lock_init_recursive>
 800c99c:	f7ff ff96 	bl	800c8cc <__sfp_lock_release>
 800c9a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c9a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c9a8:	6025      	str	r5, [r4, #0]
 800c9aa:	61a5      	str	r5, [r4, #24]
 800c9ac:	2208      	movs	r2, #8
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c9b4:	f7fd fcca 	bl	800a34c <memset>
 800c9b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c9bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9c4:	3468      	adds	r4, #104	; 0x68
 800c9c6:	e7d9      	b.n	800c97c <__sfp+0x1c>
 800c9c8:	2104      	movs	r1, #4
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	f7ff ff62 	bl	800c894 <__sfmoreglue>
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	6030      	str	r0, [r6, #0]
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d1d5      	bne.n	800c984 <__sfp+0x24>
 800c9d8:	f7ff ff78 	bl	800c8cc <__sfp_lock_release>
 800c9dc:	230c      	movs	r3, #12
 800c9de:	603b      	str	r3, [r7, #0]
 800c9e0:	e7ee      	b.n	800c9c0 <__sfp+0x60>
 800c9e2:	bf00      	nop
 800c9e4:	0800cde8 	.word	0x0800cde8
 800c9e8:	ffff0001 	.word	0xffff0001

0800c9ec <_fwalk_reent>:
 800c9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	4688      	mov	r8, r1
 800c9f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c9f8:	2700      	movs	r7, #0
 800c9fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9fe:	f1b9 0901 	subs.w	r9, r9, #1
 800ca02:	d505      	bpl.n	800ca10 <_fwalk_reent+0x24>
 800ca04:	6824      	ldr	r4, [r4, #0]
 800ca06:	2c00      	cmp	r4, #0
 800ca08:	d1f7      	bne.n	800c9fa <_fwalk_reent+0xe>
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca10:	89ab      	ldrh	r3, [r5, #12]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d907      	bls.n	800ca26 <_fwalk_reent+0x3a>
 800ca16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	d003      	beq.n	800ca26 <_fwalk_reent+0x3a>
 800ca1e:	4629      	mov	r1, r5
 800ca20:	4630      	mov	r0, r6
 800ca22:	47c0      	blx	r8
 800ca24:	4307      	orrs	r7, r0
 800ca26:	3568      	adds	r5, #104	; 0x68
 800ca28:	e7e9      	b.n	800c9fe <_fwalk_reent+0x12>

0800ca2a <__swhatbuf_r>:
 800ca2a:	b570      	push	{r4, r5, r6, lr}
 800ca2c:	460e      	mov	r6, r1
 800ca2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca32:	2900      	cmp	r1, #0
 800ca34:	b096      	sub	sp, #88	; 0x58
 800ca36:	4614      	mov	r4, r2
 800ca38:	461d      	mov	r5, r3
 800ca3a:	da07      	bge.n	800ca4c <__swhatbuf_r+0x22>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	602b      	str	r3, [r5, #0]
 800ca40:	89b3      	ldrh	r3, [r6, #12]
 800ca42:	061a      	lsls	r2, r3, #24
 800ca44:	d410      	bmi.n	800ca68 <__swhatbuf_r+0x3e>
 800ca46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca4a:	e00e      	b.n	800ca6a <__swhatbuf_r+0x40>
 800ca4c:	466a      	mov	r2, sp
 800ca4e:	f000 f8fb 	bl	800cc48 <_fstat_r>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	dbf2      	blt.n	800ca3c <__swhatbuf_r+0x12>
 800ca56:	9a01      	ldr	r2, [sp, #4]
 800ca58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca60:	425a      	negs	r2, r3
 800ca62:	415a      	adcs	r2, r3
 800ca64:	602a      	str	r2, [r5, #0]
 800ca66:	e7ee      	b.n	800ca46 <__swhatbuf_r+0x1c>
 800ca68:	2340      	movs	r3, #64	; 0x40
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	b016      	add	sp, #88	; 0x58
 800ca70:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca74 <__smakebuf_r>:
 800ca74:	898b      	ldrh	r3, [r1, #12]
 800ca76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca78:	079d      	lsls	r5, r3, #30
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	d507      	bpl.n	800ca90 <__smakebuf_r+0x1c>
 800ca80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca84:	6023      	str	r3, [r4, #0]
 800ca86:	6123      	str	r3, [r4, #16]
 800ca88:	2301      	movs	r3, #1
 800ca8a:	6163      	str	r3, [r4, #20]
 800ca8c:	b002      	add	sp, #8
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	ab01      	add	r3, sp, #4
 800ca92:	466a      	mov	r2, sp
 800ca94:	f7ff ffc9 	bl	800ca2a <__swhatbuf_r>
 800ca98:	9900      	ldr	r1, [sp, #0]
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f7fd fcbd 	bl	800a41c <_malloc_r>
 800caa2:	b948      	cbnz	r0, 800cab8 <__smakebuf_r+0x44>
 800caa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caa8:	059a      	lsls	r2, r3, #22
 800caaa:	d4ef      	bmi.n	800ca8c <__smakebuf_r+0x18>
 800caac:	f023 0303 	bic.w	r3, r3, #3
 800cab0:	f043 0302 	orr.w	r3, r3, #2
 800cab4:	81a3      	strh	r3, [r4, #12]
 800cab6:	e7e3      	b.n	800ca80 <__smakebuf_r+0xc>
 800cab8:	4b0d      	ldr	r3, [pc, #52]	; (800caf0 <__smakebuf_r+0x7c>)
 800caba:	62b3      	str	r3, [r6, #40]	; 0x28
 800cabc:	89a3      	ldrh	r3, [r4, #12]
 800cabe:	6020      	str	r0, [r4, #0]
 800cac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cac4:	81a3      	strh	r3, [r4, #12]
 800cac6:	9b00      	ldr	r3, [sp, #0]
 800cac8:	6163      	str	r3, [r4, #20]
 800caca:	9b01      	ldr	r3, [sp, #4]
 800cacc:	6120      	str	r0, [r4, #16]
 800cace:	b15b      	cbz	r3, 800cae8 <__smakebuf_r+0x74>
 800cad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cad4:	4630      	mov	r0, r6
 800cad6:	f000 f8c9 	bl	800cc6c <_isatty_r>
 800cada:	b128      	cbz	r0, 800cae8 <__smakebuf_r+0x74>
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	f023 0303 	bic.w	r3, r3, #3
 800cae2:	f043 0301 	orr.w	r3, r3, #1
 800cae6:	81a3      	strh	r3, [r4, #12]
 800cae8:	89a0      	ldrh	r0, [r4, #12]
 800caea:	4305      	orrs	r5, r0
 800caec:	81a5      	strh	r5, [r4, #12]
 800caee:	e7cd      	b.n	800ca8c <__smakebuf_r+0x18>
 800caf0:	0800c889 	.word	0x0800c889

0800caf4 <_raise_r>:
 800caf4:	291f      	cmp	r1, #31
 800caf6:	b538      	push	{r3, r4, r5, lr}
 800caf8:	4604      	mov	r4, r0
 800cafa:	460d      	mov	r5, r1
 800cafc:	d904      	bls.n	800cb08 <_raise_r+0x14>
 800cafe:	2316      	movs	r3, #22
 800cb00:	6003      	str	r3, [r0, #0]
 800cb02:	f04f 30ff 	mov.w	r0, #4294967295
 800cb06:	bd38      	pop	{r3, r4, r5, pc}
 800cb08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb0a:	b112      	cbz	r2, 800cb12 <_raise_r+0x1e>
 800cb0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb10:	b94b      	cbnz	r3, 800cb26 <_raise_r+0x32>
 800cb12:	4620      	mov	r0, r4
 800cb14:	f000 f830 	bl	800cb78 <_getpid_r>
 800cb18:	462a      	mov	r2, r5
 800cb1a:	4601      	mov	r1, r0
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb22:	f000 b817 	b.w	800cb54 <_kill_r>
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d00a      	beq.n	800cb40 <_raise_r+0x4c>
 800cb2a:	1c59      	adds	r1, r3, #1
 800cb2c:	d103      	bne.n	800cb36 <_raise_r+0x42>
 800cb2e:	2316      	movs	r3, #22
 800cb30:	6003      	str	r3, [r0, #0]
 800cb32:	2001      	movs	r0, #1
 800cb34:	e7e7      	b.n	800cb06 <_raise_r+0x12>
 800cb36:	2400      	movs	r4, #0
 800cb38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	4798      	blx	r3
 800cb40:	2000      	movs	r0, #0
 800cb42:	e7e0      	b.n	800cb06 <_raise_r+0x12>

0800cb44 <raise>:
 800cb44:	4b02      	ldr	r3, [pc, #8]	; (800cb50 <raise+0xc>)
 800cb46:	4601      	mov	r1, r0
 800cb48:	6818      	ldr	r0, [r3, #0]
 800cb4a:	f7ff bfd3 	b.w	800caf4 <_raise_r>
 800cb4e:	bf00      	nop
 800cb50:	20000144 	.word	0x20000144

0800cb54 <_kill_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d07      	ldr	r5, [pc, #28]	; (800cb74 <_kill_r+0x20>)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	4611      	mov	r1, r2
 800cb60:	602b      	str	r3, [r5, #0]
 800cb62:	f7f5 f94d 	bl	8001e00 <_kill>
 800cb66:	1c43      	adds	r3, r0, #1
 800cb68:	d102      	bne.n	800cb70 <_kill_r+0x1c>
 800cb6a:	682b      	ldr	r3, [r5, #0]
 800cb6c:	b103      	cbz	r3, 800cb70 <_kill_r+0x1c>
 800cb6e:	6023      	str	r3, [r4, #0]
 800cb70:	bd38      	pop	{r3, r4, r5, pc}
 800cb72:	bf00      	nop
 800cb74:	20008944 	.word	0x20008944

0800cb78 <_getpid_r>:
 800cb78:	f7f5 b93a 	b.w	8001df0 <_getpid>

0800cb7c <__sread>:
 800cb7c:	b510      	push	{r4, lr}
 800cb7e:	460c      	mov	r4, r1
 800cb80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb84:	f000 f894 	bl	800ccb0 <_read_r>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	bfab      	itete	ge
 800cb8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb8e:	89a3      	ldrhlt	r3, [r4, #12]
 800cb90:	181b      	addge	r3, r3, r0
 800cb92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb96:	bfac      	ite	ge
 800cb98:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb9a:	81a3      	strhlt	r3, [r4, #12]
 800cb9c:	bd10      	pop	{r4, pc}

0800cb9e <__swrite>:
 800cb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba2:	461f      	mov	r7, r3
 800cba4:	898b      	ldrh	r3, [r1, #12]
 800cba6:	05db      	lsls	r3, r3, #23
 800cba8:	4605      	mov	r5, r0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	4616      	mov	r6, r2
 800cbae:	d505      	bpl.n	800cbbc <__swrite+0x1e>
 800cbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f000 f868 	bl	800cc8c <_lseek_r>
 800cbbc:	89a3      	ldrh	r3, [r4, #12]
 800cbbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbc6:	81a3      	strh	r3, [r4, #12]
 800cbc8:	4632      	mov	r2, r6
 800cbca:	463b      	mov	r3, r7
 800cbcc:	4628      	mov	r0, r5
 800cbce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd2:	f000 b817 	b.w	800cc04 <_write_r>

0800cbd6 <__sseek>:
 800cbd6:	b510      	push	{r4, lr}
 800cbd8:	460c      	mov	r4, r1
 800cbda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbde:	f000 f855 	bl	800cc8c <_lseek_r>
 800cbe2:	1c43      	adds	r3, r0, #1
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	bf15      	itete	ne
 800cbe8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbf2:	81a3      	strheq	r3, [r4, #12]
 800cbf4:	bf18      	it	ne
 800cbf6:	81a3      	strhne	r3, [r4, #12]
 800cbf8:	bd10      	pop	{r4, pc}

0800cbfa <__sclose>:
 800cbfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbfe:	f000 b813 	b.w	800cc28 <_close_r>
	...

0800cc04 <_write_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d07      	ldr	r5, [pc, #28]	; (800cc24 <_write_r+0x20>)
 800cc08:	4604      	mov	r4, r0
 800cc0a:	4608      	mov	r0, r1
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	2200      	movs	r2, #0
 800cc10:	602a      	str	r2, [r5, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	f7f5 f92b 	bl	8001e6e <_write>
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	d102      	bne.n	800cc22 <_write_r+0x1e>
 800cc1c:	682b      	ldr	r3, [r5, #0]
 800cc1e:	b103      	cbz	r3, 800cc22 <_write_r+0x1e>
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	bd38      	pop	{r3, r4, r5, pc}
 800cc24:	20008944 	.word	0x20008944

0800cc28 <_close_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d06      	ldr	r5, [pc, #24]	; (800cc44 <_close_r+0x1c>)
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4604      	mov	r4, r0
 800cc30:	4608      	mov	r0, r1
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	f7f5 f937 	bl	8001ea6 <_close>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_close_r+0x1a>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_close_r+0x1a>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	20008944 	.word	0x20008944

0800cc48 <_fstat_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4d07      	ldr	r5, [pc, #28]	; (800cc68 <_fstat_r+0x20>)
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	4604      	mov	r4, r0
 800cc50:	4608      	mov	r0, r1
 800cc52:	4611      	mov	r1, r2
 800cc54:	602b      	str	r3, [r5, #0]
 800cc56:	f7f5 f932 	bl	8001ebe <_fstat>
 800cc5a:	1c43      	adds	r3, r0, #1
 800cc5c:	d102      	bne.n	800cc64 <_fstat_r+0x1c>
 800cc5e:	682b      	ldr	r3, [r5, #0]
 800cc60:	b103      	cbz	r3, 800cc64 <_fstat_r+0x1c>
 800cc62:	6023      	str	r3, [r4, #0]
 800cc64:	bd38      	pop	{r3, r4, r5, pc}
 800cc66:	bf00      	nop
 800cc68:	20008944 	.word	0x20008944

0800cc6c <_isatty_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4d06      	ldr	r5, [pc, #24]	; (800cc88 <_isatty_r+0x1c>)
 800cc70:	2300      	movs	r3, #0
 800cc72:	4604      	mov	r4, r0
 800cc74:	4608      	mov	r0, r1
 800cc76:	602b      	str	r3, [r5, #0]
 800cc78:	f7f5 f931 	bl	8001ede <_isatty>
 800cc7c:	1c43      	adds	r3, r0, #1
 800cc7e:	d102      	bne.n	800cc86 <_isatty_r+0x1a>
 800cc80:	682b      	ldr	r3, [r5, #0]
 800cc82:	b103      	cbz	r3, 800cc86 <_isatty_r+0x1a>
 800cc84:	6023      	str	r3, [r4, #0]
 800cc86:	bd38      	pop	{r3, r4, r5, pc}
 800cc88:	20008944 	.word	0x20008944

0800cc8c <_lseek_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4d07      	ldr	r5, [pc, #28]	; (800ccac <_lseek_r+0x20>)
 800cc90:	4604      	mov	r4, r0
 800cc92:	4608      	mov	r0, r1
 800cc94:	4611      	mov	r1, r2
 800cc96:	2200      	movs	r2, #0
 800cc98:	602a      	str	r2, [r5, #0]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	f7f5 f92a 	bl	8001ef4 <_lseek>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <_lseek_r+0x1e>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	b103      	cbz	r3, 800ccaa <_lseek_r+0x1e>
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	20008944 	.word	0x20008944

0800ccb0 <_read_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d07      	ldr	r5, [pc, #28]	; (800ccd0 <_read_r+0x20>)
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	4608      	mov	r0, r1
 800ccb8:	4611      	mov	r1, r2
 800ccba:	2200      	movs	r2, #0
 800ccbc:	602a      	str	r2, [r5, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f7f5 f8b8 	bl	8001e34 <_read>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_read_r+0x1e>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_read_r+0x1e>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	20008944 	.word	0x20008944

0800ccd4 <_init>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	bf00      	nop
 800ccd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccda:	bc08      	pop	{r3}
 800ccdc:	469e      	mov	lr, r3
 800ccde:	4770      	bx	lr

0800cce0 <_fini>:
 800cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce2:	bf00      	nop
 800cce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce6:	bc08      	pop	{r3}
 800cce8:	469e      	mov	lr, r3
 800ccea:	4770      	bx	lr
