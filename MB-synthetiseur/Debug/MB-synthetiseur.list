
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d350  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800d4e0  0800d4e0  0001d4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da64  0800da64  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800da64  0800da64  0001da64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da6c  0800da6c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da6c  0800da6c  0001da6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da70  0800da70  0001da70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800da74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085a8  200001e4  0800dc58  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000878c  0800dc58  0002878c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028d59  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e7  00000000  00000000  00048f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0004d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d80  00000000  00000000  0004f790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264ac  00000000  00000000  00051510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000212a4  00000000  00000000  000779bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb9c3  00000000  00000000  00098c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00184623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096c0  00000000  00000000  00184678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d4c8 	.word	0x0800d4c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800d4c8 	.word	0x0800d4c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <getChannel>:
	read16bits = (read[0] << 8) | read[1];
	return read16bits;

}

uint16_t getChannel(as7341_color_channel_t channel) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  return _channel_readings[channel];
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <getChannel+0x20>)
 8000eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20008444 	.word	0x20008444

08000ec4 <setup_F1F4_Clear_NIR>:
    return;
  }
  */
}

void setup_F1F4_Clear_NIR(I2C_HandleTypeDef *hi2c1) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  // SMUX Config for F1,F2,F3,F4,NIR,Clear
  writeRegister(hi2c1, (0x00), (0x30)); // F3 left set to ADC2
 8000ecc:	2230      	movs	r2, #48	; 0x30
 8000ece:	2100      	movs	r1, #0
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f8cf 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x01), (0x01)); // F1 left set to ADC0
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2101      	movs	r1, #1
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f8ca 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x02), (0x00)); // Reserved or disabled
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f8c5 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x03), (0x00)); // F8 left disabled
 8000eea:	2200      	movs	r2, #0
 8000eec:	2103      	movs	r1, #3
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f8c0 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x04), (0x00)); // F6 left disabled
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f8bb 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x05), (0x42)); // F4 left connected to ADC3/f2 left connected to ADC1
 8000efe:	2242      	movs	r2, #66	; 0x42
 8000f00:	2105      	movs	r1, #5
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f8b6 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x06), (0x00)); // F5 left disbled
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2106      	movs	r1, #6
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f8b1 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x07), (0x00)); // F7 left disbled
 8000f12:	2200      	movs	r2, #0
 8000f14:	2107      	movs	r1, #7
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f8ac 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x08), (0x50)); // CLEAR connected to ADC4
 8000f1c:	2250      	movs	r2, #80	; 0x50
 8000f1e:	2108      	movs	r1, #8
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f8a7 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x09), (0x00)); // F5 right disabled
 8000f26:	2200      	movs	r2, #0
 8000f28:	2109      	movs	r1, #9
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f8a2 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0A), (0x00)); // F7 right disabled
 8000f30:	2200      	movs	r2, #0
 8000f32:	210a      	movs	r1, #10
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f89d 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0B), (0x00)); // Reserved or disabled
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	210b      	movs	r1, #11
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f898 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0C), (0x20)); // F2 right connected to ADC1
 8000f44:	2220      	movs	r2, #32
 8000f46:	210c      	movs	r1, #12
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f893 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0D), (0x04)); // F4 right connected to ADC3
 8000f4e:	2204      	movs	r2, #4
 8000f50:	210d      	movs	r1, #13
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f88e 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0E), (0x00)); // F6/F8 right disabled
 8000f58:	2200      	movs	r2, #0
 8000f5a:	210e      	movs	r1, #14
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f889 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0F), (0x30)); // F3 right connected to AD2
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	210f      	movs	r1, #15
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f884 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x10), (0x01)); // F1 right connected to AD0
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2110      	movs	r1, #16
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f87f 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x11), (0x50)); // CLEAR right connected to AD4
 8000f76:	2250      	movs	r2, #80	; 0x50
 8000f78:	2111      	movs	r1, #17
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f87a 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x12), (0x00)); // Reserved or disabled
 8000f80:	2200      	movs	r2, #0
 8000f82:	2112      	movs	r1, #18
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f875 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x13), (0x06)); // NIR connected to ADC5
 8000f8a:	2206      	movs	r2, #6
 8000f8c:	2113      	movs	r1, #19
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f870 	bl	8001074 <writeRegister>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <setup_F5F8_Clear_NIR>:

void setup_F5F8_Clear_NIR(I2C_HandleTypeDef *hi2c1) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  // SMUX Config for F5,F6,F7,F8,NIR,Clear
  writeRegister(hi2c1, (0x00), (0x00)); // F3 left disable
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f863 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x01), (0x00)); // F1 left disable
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f85e 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x02), (0x00)); // reserved/disable
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2102      	movs	r1, #2
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f859 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x03), (0x40)); // F8 left connected to ADC3
 8000fc2:	2240      	movs	r2, #64	; 0x40
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f854 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x04), (0x02)); // F6 left connected to ADC1
 8000fcc:	2202      	movs	r2, #2
 8000fce:	2104      	movs	r1, #4
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f84f 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x05), (0x00)); // F4/ F2 disabled
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2105      	movs	r1, #5
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f84a 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x06), (0x10)); // F5 left connected to ADC0
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	2106      	movs	r1, #6
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f845 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x07), (0x03)); // F7 left connected to ADC2
 8000fea:	2203      	movs	r2, #3
 8000fec:	2107      	movs	r1, #7
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f840 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x08), (0x50)); // CLEAR Connected to ADC4
 8000ff4:	2250      	movs	r2, #80	; 0x50
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f83b 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x09), (0x10)); // F5 right connected to ADC0
 8000ffe:	2210      	movs	r2, #16
 8001000:	2109      	movs	r1, #9
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f836 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0A), (0x03)); // F7 right connected to ADC2
 8001008:	2203      	movs	r2, #3
 800100a:	210a      	movs	r1, #10
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f831 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0B), (0x00)); // Reserved or disabled
 8001012:	2200      	movs	r2, #0
 8001014:	210b      	movs	r1, #11
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f82c 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0C), (0x00)); // F2 right disabled
 800101c:	2200      	movs	r2, #0
 800101e:	210c      	movs	r1, #12
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f827 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0D), (0x00)); // F4 right disabled
 8001026:	2200      	movs	r2, #0
 8001028:	210d      	movs	r1, #13
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f822 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0E), (0x24)); // F8 right connected to ADC2/ F6 right connected to ADC1
 8001030:	2224      	movs	r2, #36	; 0x24
 8001032:	210e      	movs	r1, #14
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f81d 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x0F), (0x00)); // F3 right disabled
 800103a:	2200      	movs	r2, #0
 800103c:	210f      	movs	r1, #15
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f818 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x10), (0x00)); // F1 right disabled
 8001044:	2200      	movs	r2, #0
 8001046:	2110      	movs	r1, #16
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f813 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x11), (0x50)); // CLEAR right connected to AD4
 800104e:	2250      	movs	r2, #80	; 0x50
 8001050:	2111      	movs	r1, #17
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f80e 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x12), (0x00)); // Reserved or disabled
 8001058:	2200      	movs	r2, #0
 800105a:	2112      	movs	r1, #18
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f809 	bl	8001074 <writeRegister>
  writeRegister(hi2c1, (0x13), (0x06)); // NIR connected to ADC5
 8001062:	2206      	movs	r2, #6
 8001064:	2113      	movs	r1, #19
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f804 	bl	8001074 <writeRegister>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <writeRegister>:

void writeRegister(I2C_HandleTypeDef *hi2c1, uint8_t addr, uint8_t val) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
 8001080:	4613      	mov	r3, r2
 8001082:	70bb      	strb	r3, [r7, #2]
	uint8_t data[] = {addr, val};
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	733b      	strb	r3, [r7, #12]
 8001088:	78bb      	ldrb	r3, [r7, #2]
 800108a:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 800108c:	bf00      	nop
 800108e:	f107 020c 	add.w	r2, r7, #12
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2302      	movs	r3, #2
 800109a:	2172      	movs	r1, #114	; 0x72
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f003 fbf1 	bl	8004884 <HAL_I2C_Master_Transmit>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f2      	bne.n	800108e <writeRegister+0x1a>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 80010a8:	bf00      	nop
 80010aa:	23c8      	movs	r3, #200	; 0xc8
 80010ac:	220a      	movs	r2, #10
 80010ae:	2172      	movs	r1, #114	; 0x72
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f003 fdd1 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f6      	bne.n	80010aa <writeRegister+0x36>

}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <setATIME>:

bool setATIME(I2C_HandleTypeDef *hi2c1, uint8_t atime_value) {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af02      	add	r7, sp, #8
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	70fb      	strb	r3, [r7, #3]
	uint8_t data[] = {AS7341_ATIME, atime_value};
 80010d2:	2381      	movs	r3, #129	; 0x81
 80010d4:	733b      	strb	r3, [r7, #12]
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 80010da:	bf00      	nop
 80010dc:	f107 020c 	add.w	r2, r7, #12
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2302      	movs	r3, #2
 80010e8:	2172      	movs	r1, #114	; 0x72
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f003 fbca 	bl	8004884 <HAL_I2C_Master_Transmit>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f2      	bne.n	80010dc <setATIME+0x16>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 80010f6:	bf00      	nop
 80010f8:	23c8      	movs	r3, #200	; 0xc8
 80010fa:	220a      	movs	r2, #10
 80010fc:	2172      	movs	r1, #114	; 0x72
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f003 fdaa 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f6      	bne.n	80010f8 <setATIME+0x32>

	return 1;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <getATIME>:

uint8_t getATIME(I2C_HandleTypeDef *hi2c1) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
	uint8_t regtest[]={AS7341_ATIME};
 800111c:	2381      	movs	r3, #129	; 0x81
 800111e:	733b      	strb	r3, [r7, #12]
	uint8_t regRead[1]={0};
 8001120:	2300      	movs	r3, #0
 8001122:	723b      	strb	r3, [r7, #8]
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001124:	bf00      	nop
 8001126:	f107 020c 	add.w	r2, r7, #12
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	2172      	movs	r1, #114	; 0x72
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f003 fba5 	bl	8004884 <HAL_I2C_Master_Transmit>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f2      	bne.n	8001126 <getATIME+0x12>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 8001140:	bf00      	nop
 8001142:	23c8      	movs	r3, #200	; 0xc8
 8001144:	220a      	movs	r2, #10
 8001146:	2172      	movs	r1, #114	; 0x72
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f003 fd85 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f6      	bne.n	8001142 <getATIME+0x2e>
	while(HAL_I2C_Master_Receive(hi2c1, 0x73, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001154:	bf00      	nop
 8001156:	f107 0208 	add.w	r2, r7, #8
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	2173      	movs	r1, #115	; 0x73
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f003 fc81 	bl	8004a6c <HAL_I2C_Master_Receive>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f2      	bne.n	8001156 <getATIME+0x42>
  return regRead[0];
 8001170:	7a3b      	ldrb	r3, [r7, #8]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <setASTEP>:

bool setASTEP(I2C_HandleTypeDef *hi2c1, uint8_t astep_value) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af02      	add	r7, sp, #8
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
	uint8_t data[] = {AS7341_ASTEP_L, astep_value};
 8001186:	23ca      	movs	r3, #202	; 0xca
 8001188:	733b      	strb	r3, [r7, #12]
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 800118e:	bf00      	nop
 8001190:	f107 020c 	add.w	r2, r7, #12
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2302      	movs	r3, #2
 800119c:	2172      	movs	r1, #114	; 0x72
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f003 fb70 	bl	8004884 <HAL_I2C_Master_Transmit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f2      	bne.n	8001190 <setASTEP+0x16>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 80011aa:	bf00      	nop
 80011ac:	23c8      	movs	r3, #200	; 0xc8
 80011ae:	220a      	movs	r2, #10
 80011b0:	2172      	movs	r1, #114	; 0x72
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f003 fd50 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f6      	bne.n	80011ac <setASTEP+0x32>

	data[0] = AS7341_ASTEP_H;
 80011be:	23cb      	movs	r3, #203	; 0xcb
 80011c0:	733b      	strb	r3, [r7, #12]
	data[1] = 0x03;
 80011c2:	2303      	movs	r3, #3
 80011c4:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 80011c6:	bf00      	nop
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2302      	movs	r3, #2
 80011d4:	2172      	movs	r1, #114	; 0x72
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f003 fb54 	bl	8004884 <HAL_I2C_Master_Transmit>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f2      	bne.n	80011c8 <setASTEP+0x4e>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 80011e2:	bf00      	nop
 80011e4:	23c8      	movs	r3, #200	; 0xc8
 80011e6:	220a      	movs	r2, #10
 80011e8:	2172      	movs	r1, #114	; 0x72
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f003 fd34 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f6      	bne.n	80011e4 <setASTEP+0x6a>

	return 1;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <getASTEP>:

uint16_t getASTEP(I2C_HandleTypeDef *hi2c1) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af02      	add	r7, sp, #8
 8001206:	6078      	str	r0, [r7, #4]
	uint8_t regtest[]={AS7341_ASTEP_L};
 8001208:	23ca      	movs	r3, #202	; 0xca
 800120a:	733b      	strb	r3, [r7, #12]
	uint16_t regRead[1]={0};
 800120c:	2300      	movs	r3, #0
 800120e:	813b      	strh	r3, [r7, #8]
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001210:	bf00      	nop
 8001212:	f107 020c 	add.w	r2, r7, #12
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	2172      	movs	r1, #114	; 0x72
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f003 fb2f 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f2      	bne.n	8001212 <getASTEP+0x12>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 800122c:	bf00      	nop
 800122e:	23c8      	movs	r3, #200	; 0xc8
 8001230:	220a      	movs	r2, #10
 8001232:	2172      	movs	r1, #114	; 0x72
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f003 fd0f 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f6      	bne.n	800122e <getASTEP+0x2e>
	while(HAL_I2C_Master_Receive(hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001240:	bf00      	nop
 8001242:	f107 0208 	add.w	r2, r7, #8
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2302      	movs	r3, #2
 800124e:	2172      	movs	r1, #114	; 0x72
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f003 fc0b 	bl	8004a6c <HAL_I2C_Master_Receive>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f2      	bne.n	8001242 <getASTEP+0x42>
  return regRead[0];
 800125c:	893b      	ldrh	r3, [r7, #8]

}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <setGain>:

bool setGain(I2C_HandleTypeDef *hi2c1, as7341_gain_t gain_value) {
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af02      	add	r7, sp, #8
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	70fb      	strb	r3, [r7, #3]
	uint8_t data[] = {AS7341_CFG1, gain_value};
 8001272:	23aa      	movs	r3, #170	; 0xaa
 8001274:	733b      	strb	r3, [r7, #12]
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 800127a:	bf00      	nop
 800127c:	f107 020c 	add.w	r2, r7, #12
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2302      	movs	r3, #2
 8001288:	2172      	movs	r1, #114	; 0x72
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f003 fafa 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f2      	bne.n	800127c <setGain+0x16>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 8001296:	bf00      	nop
 8001298:	23c8      	movs	r3, #200	; 0xc8
 800129a:	220a      	movs	r2, #10
 800129c:	2172      	movs	r1, #114	; 0x72
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f003 fcda 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f6      	bne.n	8001298 <setGain+0x32>

	return 1;
 80012aa:	2301      	movs	r3, #1
  // AGAIN bitfield is only[0:4] but the rest is empty
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <getGain>:

as7341_gain_t getGain(I2C_HandleTypeDef *hi2c1) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	6078      	str	r0, [r7, #4]
	uint8_t regtest[]={AS7341_CFG1};
 80012bc:	23aa      	movs	r3, #170	; 0xaa
 80012be:	733b      	strb	r3, [r7, #12]
	uint8_t regRead[1]={0};
 80012c0:	2300      	movs	r3, #0
 80012c2:	723b      	strb	r3, [r7, #8]
	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 80012c4:	bf00      	nop
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	2172      	movs	r1, #114	; 0x72
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f003 fad5 	bl	8004884 <HAL_I2C_Master_Transmit>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f2      	bne.n	80012c6 <getGain+0x12>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 80012e0:	bf00      	nop
 80012e2:	23c8      	movs	r3, #200	; 0xc8
 80012e4:	220a      	movs	r2, #10
 80012e6:	2172      	movs	r1, #114	; 0x72
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f003 fcb5 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f6      	bne.n	80012e2 <getGain+0x2e>
	while(HAL_I2C_Master_Receive(hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 80012f4:	bf00      	nop
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	2172      	movs	r1, #114	; 0x72
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f003 fbb1 	bl	8004a6c <HAL_I2C_Master_Receive>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f2      	bne.n	80012f6 <getGain+0x42>

  return (as7341_gain_t)regRead[0];
 8001310:	7a3b      	ldrb	r3, [r7, #8]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f001 fc4b 	bl	8002bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001324:	f000 f840 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001328:	f000 fb30 	bl	800198c <MX_GPIO_Init>
  MX_DMA_Init();
 800132c:	f000 fb08 	bl	8001940 <MX_DMA_Init>
  MX_I2C1_Init();
 8001330:	f000 f96c 	bl	800160c <MX_I2C1_Init>
  MX_CAN1_Init();
 8001334:	f000 f934 	bl	80015a0 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001338:	f000 f9a6 	bl	8001688 <MX_TIM1_Init>
  MX_ADC1_Init();
 800133c:	f000 f8cc 	bl	80014d8 <MX_ADC1_Init>
  MX_TIM15_Init();
 8001340:	f000 fa4a 	bl	80017d8 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001344:	f000 facc 	bl	80018e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001348:	f006 fda2 	bl	8007e90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <main+0x68>)
 800134e:	2100      	movs	r1, #0
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <main+0x6c>)
 8001352:	f006 fde7 	bl	8007f24 <osThreadNew>
 8001356:	4603      	mov	r3, r0
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <main+0x70>)
 800135a:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <main+0x74>)
 800135e:	2100      	movs	r1, #0
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <main+0x78>)
 8001362:	f006 fddf 	bl	8007f24 <osThreadNew>
 8001366:	4603      	mov	r3, r0
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <main+0x7c>)
 800136a:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 800136c:	4a0b      	ldr	r2, [pc, #44]	; (800139c <main+0x80>)
 800136e:	2100      	movs	r1, #0
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <main+0x84>)
 8001372:	f006 fdd7 	bl	8007f24 <osThreadNew>
 8001376:	4603      	mov	r3, r0
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <main+0x88>)
 800137a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800137c:	f006 fdac 	bl	8007ed8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001380:	e7fe      	b.n	8001380 <main+0x64>
 8001382:	bf00      	nop
 8001384:	0800d5cc 	.word	0x0800d5cc
 8001388:	080019ed 	.word	0x080019ed
 800138c:	2000845c 	.word	0x2000845c
 8001390:	0800d5f0 	.word	0x0800d5f0
 8001394:	0800232d 	.word	0x0800232d
 8001398:	20008540 	.word	0x20008540
 800139c:	0800d614 	.word	0x0800d614
 80013a0:	0800237d 	.word	0x0800237d
 80013a4:	2000863c 	.word	0x2000863c

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0ac      	sub	sp, #176	; 0xb0
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013b2:	2244      	movs	r2, #68	; 0x44
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f009 f9f8 	bl	800a7ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2254      	movs	r2, #84	; 0x54
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f009 f9ea 	bl	800a7ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013d8:	f003 ffbe 	bl	8005358 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013dc:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <SystemClock_Config+0x12c>)
 80013de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e2:	4a3c      	ldr	r2, [pc, #240]	; (80014d4 <SystemClock_Config+0x12c>)
 80013e4:	f023 0318 	bic.w	r3, r3, #24
 80013e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013ec:	2314      	movs	r3, #20
 80013ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013f0:	2301      	movs	r3, #1
 80013f2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001400:	2390      	movs	r3, #144	; 0x90
 8001402:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800140c:	2301      	movs	r3, #1
 800140e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001412:	2305      	movs	r3, #5
 8001414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001418:	2310      	movs	r3, #16
 800141a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800141e:	2307      	movs	r3, #7
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800142a:	2306      	movs	r3, #6
 800142c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001434:	4618      	mov	r0, r3
 8001436:	f004 f803 	bl	8005440 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001440:	f000 ffb6 	bl	80023b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2303      	movs	r3, #3
 800144a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800144c:	23a0      	movs	r3, #160	; 0xa0
 800144e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001450:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001454:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800145a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f004 fc0d 	bl	8005c80 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800146c:	f000 ffa0 	bl	80023b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001470:	f244 0342 	movw	r3, #16450	; 0x4042
 8001474:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001476:	2304      	movs	r3, #4
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800147e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001482:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001484:	2301      	movs	r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001488:	2305      	movs	r3, #5
 800148a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 800148c:	230e      	movs	r3, #14
 800148e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001490:	2307      	movs	r3, #7
 8001492:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800149c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 fe21 	bl	80060ec <HAL_RCCEx_PeriphCLKConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80014b0:	f000 ff7e 	bl	80023b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014b8:	f003 ff6c 	bl	8005394 <HAL_PWREx_ControlVoltageScaling>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80014c2:	f000 ff75 	bl	80023b0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014c6:	f005 f805 	bl	80064d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80014ca:	bf00      	nop
 80014cc:	37b0      	adds	r7, #176	; 0xb0
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014de:	463b      	mov	r3, r7
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <MX_ADC1_Init+0xbc>)
 80014f0:	4a29      	ldr	r2, [pc, #164]	; (8001598 <MX_ADC1_Init+0xc0>)
 80014f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_ADC1_Init+0xbc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <MX_ADC1_Init+0xbc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_ADC1_Init+0xbc>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <MX_ADC1_Init+0xbc>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_ADC1_Init+0xbc>)
 800150e:	2204      	movs	r2, #4
 8001510:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <MX_ADC1_Init+0xbc>)
 8001514:	2200      	movs	r2, #0
 8001516:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <MX_ADC1_Init+0xbc>)
 800151a:	2200      	movs	r2, #0
 800151c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_ADC1_Init+0xbc>)
 8001520:	2201      	movs	r2, #1
 8001522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_ADC1_Init+0xbc>)
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_ADC1_Init+0xbc>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_ADC1_Init+0xbc>)
 8001534:	2200      	movs	r2, #0
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_ADC1_Init+0xbc>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_ADC1_Init+0xbc>)
 8001542:	2200      	movs	r2, #0
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_ADC1_Init+0xbc>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800154e:	4811      	ldr	r0, [pc, #68]	; (8001594 <MX_ADC1_Init+0xbc>)
 8001550:	f001 fcf8 	bl	8002f44 <HAL_ADC_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800155a:	f000 ff29 	bl	80023b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_ADC1_Init+0xc4>)
 8001560:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001562:	2306      	movs	r3, #6
 8001564:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800156a:	237f      	movs	r3, #127	; 0x7f
 800156c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800156e:	2304      	movs	r3, #4
 8001570:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	4619      	mov	r1, r3
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_ADC1_Init+0xbc>)
 800157c:	f001 fe2a 	bl	80031d4 <HAL_ADC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001586:	f000 ff13 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20008544 	.word	0x20008544
 8001598:	50040000 	.word	0x50040000
 800159c:	19200040 	.word	0x19200040

080015a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_CAN1_Init+0x64>)
 80015a6:	4a18      	ldr	r2, [pc, #96]	; (8001608 <MX_CAN1_Init+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_CAN1_Init+0x64>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_CAN1_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_CAN1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_CAN1_Init+0x64>)
 80015be:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80015c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_CAN1_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_CAN1_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_CAN1_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_CAN1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_CAN1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_CAN1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_CAN1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_CAN1_Init+0x64>)
 80015f0:	f002 f9d0 	bl	8003994 <HAL_CAN_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80015fa:	f000 fed9 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200086c4 	.word	0x200086c4
 8001608:	40006400 	.word	0x40006400

0800160c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_I2C1_Init+0x74>)
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <MX_I2C1_Init+0x78>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_I2C1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <MX_I2C1_Init+0x74>)
 8001624:	2201      	movs	r2, #1
 8001626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <MX_I2C1_Init+0x74>)
 8001648:	f003 f88c 	bl	8004764 <HAL_I2C_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001652:	f000 fead 	bl	80023b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <MX_I2C1_Init+0x74>)
 800165a:	f003 fde5 	bl	8005228 <HAL_I2CEx_ConfigAnalogFilter>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001664:	f000 fea4 	bl	80023b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_I2C1_Init+0x74>)
 800166c:	f003 fe27 	bl	80052be <HAL_I2CEx_ConfigDigitalFilter>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 fe9b 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200084a8 	.word	0x200084a8
 8001684:	40005400 	.word	0x40005400

08001688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b096      	sub	sp, #88	; 0x58
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	222c      	movs	r2, #44	; 0x2c
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f009 f879 	bl	800a7ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <MX_TIM1_Init+0x148>)
 80016bc:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <MX_TIM1_Init+0x14c>)
 80016be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016c0:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <MX_TIM1_Init+0x148>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <MX_TIM1_Init+0x148>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <MX_TIM1_Init+0x148>)
 80016ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <MX_TIM1_Init+0x148>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <MX_TIM1_Init+0x148>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e0:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <MX_TIM1_Init+0x148>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016e6:	483a      	ldr	r0, [pc, #232]	; (80017d0 <MX_TIM1_Init+0x148>)
 80016e8:	f005 f8ac 	bl	8006844 <HAL_TIM_PWM_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80016f2:	f000 fe5d 	bl	80023b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001702:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001706:	4619      	mov	r1, r3
 8001708:	4831      	ldr	r0, [pc, #196]	; (80017d0 <MX_TIM1_Init+0x148>)
 800170a:	f005 fe2b 	bl	8007364 <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001714:	f000 fe4c 	bl	80023b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001718:	2360      	movs	r3, #96	; 0x60
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001720:	2300      	movs	r3, #0
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001734:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001738:	2200      	movs	r2, #0
 800173a:	4619      	mov	r1, r3
 800173c:	4824      	ldr	r0, [pc, #144]	; (80017d0 <MX_TIM1_Init+0x148>)
 800173e:	f005 f9f7 	bl	8006b30 <HAL_TIM_PWM_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001748:	f000 fe32 	bl	80023b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800174c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001750:	2204      	movs	r2, #4
 8001752:	4619      	mov	r1, r3
 8001754:	481e      	ldr	r0, [pc, #120]	; (80017d0 <MX_TIM1_Init+0x148>)
 8001756:	f005 f9eb 	bl	8006b30 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001760:	f000 fe26 	bl	80023b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001768:	2208      	movs	r2, #8
 800176a:	4619      	mov	r1, r3
 800176c:	4818      	ldr	r0, [pc, #96]	; (80017d0 <MX_TIM1_Init+0x148>)
 800176e:	f005 f9df 	bl	8006b30 <HAL_TIM_PWM_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001778:	f000 fe1a 	bl	80023b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800179e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <MX_TIM1_Init+0x148>)
 80017b2:	f005 fe3d 	bl	8007430 <HAL_TIMEx_ConfigBreakDeadTime>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80017bc:	f000 fdf8 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017c0:	4803      	ldr	r0, [pc, #12]	; (80017d0 <MX_TIM1_Init+0x148>)
 80017c2:	f000 ff2d 	bl	8002620 <HAL_TIM_MspPostInit>

}
 80017c6:	bf00      	nop
 80017c8:	3758      	adds	r7, #88	; 0x58
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200085f0 	.word	0x200085f0
 80017d4:	40012c00 	.word	0x40012c00

080017d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b096      	sub	sp, #88	; 0x58
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	615a      	str	r2, [r3, #20]
 80017fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	222c      	movs	r2, #44	; 0x2c
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f008 ffd1 	bl	800a7ac <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800180a:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <MX_TIM15_Init+0x100>)
 800180c:	4a33      	ldr	r2, [pc, #204]	; (80018dc <MX_TIM15_Init+0x104>)
 800180e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <MX_TIM15_Init+0x100>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <MX_TIM15_Init+0x100>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <MX_TIM15_Init+0x100>)
 800181e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001822:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <MX_TIM15_Init+0x100>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <MX_TIM15_Init+0x100>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <MX_TIM15_Init+0x100>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001836:	4828      	ldr	r0, [pc, #160]	; (80018d8 <MX_TIM15_Init+0x100>)
 8001838:	f005 f804 	bl	8006844 <HAL_TIM_PWM_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001842:	f000 fdb5 	bl	80023b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800184e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001852:	4619      	mov	r1, r3
 8001854:	4820      	ldr	r0, [pc, #128]	; (80018d8 <MX_TIM15_Init+0x100>)
 8001856:	f005 fd85 	bl	8007364 <HAL_TIMEx_MasterConfigSynchronization>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001860:	f000 fda6 	bl	80023b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001864:	2360      	movs	r3, #96	; 0x60
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186c:	2300      	movs	r3, #0
 800186e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001870:	2300      	movs	r3, #0
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001884:	2204      	movs	r2, #4
 8001886:	4619      	mov	r1, r3
 8001888:	4813      	ldr	r0, [pc, #76]	; (80018d8 <MX_TIM15_Init+0x100>)
 800188a:	f005 f951 	bl	8006b30 <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001894:	f000 fd8c 	bl	80023b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <MX_TIM15_Init+0x100>)
 80018bc:	f005 fdb8 	bl	8007430 <HAL_TIMEx_ConfigBreakDeadTime>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80018c6:	f000 fd73 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80018ca:	4803      	ldr	r0, [pc, #12]	; (80018d8 <MX_TIM15_Init+0x100>)
 80018cc:	f000 fea8 	bl	8002620 <HAL_TIM_MspPostInit>

}
 80018d0:	bf00      	nop
 80018d2:	3758      	adds	r7, #88	; 0x58
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200084f4 	.word	0x200084f4
 80018dc:	40014000 	.word	0x40014000

080018e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_USART2_UART_Init+0x58>)
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <MX_USART2_UART_Init+0x5c>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_USART2_UART_Init+0x58>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART2_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_USART2_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART2_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART2_UART_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART2_UART_Init+0x58>)
 8001924:	f005 fe1a 	bl	800755c <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800192e:	f000 fd3f 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20008640 	.word	0x20008640
 800193c:	40004400 	.word	0x40004400

08001940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_DMA_Init+0x48>)
 8001948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194a:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <MX_DMA_Init+0x48>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6493      	str	r3, [r2, #72]	; 0x48
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <MX_DMA_Init+0x48>)
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2105      	movs	r1, #5
 8001962:	2010      	movs	r0, #16
 8001964:	f002 fc02 	bl	800416c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001968:	2010      	movs	r0, #16
 800196a:	f002 fc1b 	bl	80041a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2105      	movs	r1, #5
 8001972:	2011      	movs	r0, #17
 8001974:	f002 fbfa 	bl	800416c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001978:	2011      	movs	r0, #17
 800197a:	f002 fc13 	bl	80041a4 <HAL_NVIC_EnableIRQ>

}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000

0800198c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_GPIO_Init+0x5c>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <MX_GPIO_Init+0x5c>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_GPIO_Init+0x5c>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_GPIO_Init+0x5c>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <MX_GPIO_Init+0x5c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_GPIO_Init+0x5c>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_GPIO_Init+0x5c>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <MX_GPIO_Init+0x5c>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_GPIO_Init+0x5c>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]

}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000

080019ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b09e      	sub	sp, #120	; 0x78
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	6078      	str	r0, [r7, #4]
	  uint8_t MSB = 0;
	  uint8_t LSB = 0;
	  HAL_StatusTypeDef status;
	  */
	  for(;;){
		    osDelay(1000);
 80019f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f8:	f006 fb26 	bl	8008048 <osDelay>

		    for(int i=0; i<12; i++){
 80019fc:	2300      	movs	r3, #0
 80019fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a00:	e007      	b.n	8001a12 <StartDefaultTask+0x26>
		        _channel_readings[i]=0;
 8001a02:	4a9e      	ldr	r2, [pc, #632]	; (8001c7c <StartDefaultTask+0x290>)
 8001a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a06:	2100      	movs	r1, #0
 8001a08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		    for(int i=0; i<12; i++){
 8001a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a0e:	3301      	adds	r3, #1
 8001a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a14:	2b0b      	cmp	r3, #11
 8001a16:	ddf4      	ble.n	8001a02 <StartDefaultTask+0x16>
		    }

		    //POWER enable true
		    uint8_t number = 1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		    number &= ~(1UL << 2); //set bit to 0
 8001a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		    uint8_t regtest[]={AS7341_ENABLE,0x01}; //PON to 1
 8001a2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a2e:	843b      	strh	r3, [r7, #32]
		    uint8_t regRead[1]={0};
 8001a30:	2300      	movs	r3, #0
 8001a32:	773b      	strb	r3, [r7, #28]
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 8001a34:	bf00      	nop
 8001a36:	f107 0220 	add.w	r2, r7, #32
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2302      	movs	r3, #2
 8001a42:	2172      	movs	r1, #114	; 0x72
 8001a44:	488e      	ldr	r0, [pc, #568]	; (8001c80 <StartDefaultTask+0x294>)
 8001a46:	f002 ff1d 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f2      	bne.n	8001a36 <StartDefaultTask+0x4a>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001a50:	bf00      	nop
 8001a52:	23c8      	movs	r3, #200	; 0xc8
 8001a54:	220a      	movs	r2, #10
 8001a56:	2172      	movs	r1, #114	; 0x72
 8001a58:	4889      	ldr	r0, [pc, #548]	; (8001c80 <StartDefaultTask+0x294>)
 8001a5a:	f003 f8fd 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f6      	bne.n	8001a52 <StartDefaultTask+0x66>

			//configure integration time
		    setATIME(&hi2c1,100);
 8001a64:	2164      	movs	r1, #100	; 0x64
 8001a66:	4886      	ldr	r0, [pc, #536]	; (8001c80 <StartDefaultTask+0x294>)
 8001a68:	f7ff fb2d 	bl	80010c6 <setATIME>
		    sprintf(msg, "getATIME = %d\r\n", getATIME(&hi2c1));
 8001a6c:	4884      	ldr	r0, [pc, #528]	; (8001c80 <StartDefaultTask+0x294>)
 8001a6e:	f7ff fb51 	bl	8001114 <getATIME>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	4982      	ldr	r1, [pc, #520]	; (8001c84 <StartDefaultTask+0x298>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f009 fb07 	bl	800b090 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fba2 	bl	80001d0 <strlen>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	487b      	ldr	r0, [pc, #492]	; (8001c88 <StartDefaultTask+0x29c>)
 8001a9a:	f005 fdad 	bl	80075f8 <HAL_UART_Transmit>

		    setASTEP(&hi2c1,0xE7);
 8001a9e:	21e7      	movs	r1, #231	; 0xe7
 8001aa0:	4877      	ldr	r0, [pc, #476]	; (8001c80 <StartDefaultTask+0x294>)
 8001aa2:	f7ff fb6a 	bl	800117a <setASTEP>
		    sprintf(msg, "getASTEP = %d\r\n", getASTEP(&hi2c1));
 8001aa6:	4876      	ldr	r0, [pc, #472]	; (8001c80 <StartDefaultTask+0x294>)
 8001aa8:	f7ff fbaa 	bl	8001200 <getASTEP>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	4975      	ldr	r1, [pc, #468]	; (8001c8c <StartDefaultTask+0x2a0>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f009 faea 	bl	800b090 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fb85 	bl	80001d0 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	486d      	ldr	r0, [pc, #436]	; (8001c88 <StartDefaultTask+0x29c>)
 8001ad4:	f005 fd90 	bl	80075f8 <HAL_UART_Transmit>

		    setGain(&hi2c1,AS7341_GAIN_256X);
 8001ad8:	2109      	movs	r1, #9
 8001ada:	4869      	ldr	r0, [pc, #420]	; (8001c80 <StartDefaultTask+0x294>)
 8001adc:	f7ff fbc3 	bl	8001266 <setGain>
		    sprintf(msg, "getGain = %d\r\n", getGain(&hi2c1));
 8001ae0:	4867      	ldr	r0, [pc, #412]	; (8001c80 <StartDefaultTask+0x294>)
 8001ae2:	f7ff fbe7 	bl	80012b4 <getGain>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	4968      	ldr	r1, [pc, #416]	; (8001c90 <StartDefaultTask+0x2a4>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f009 facd 	bl	800b090 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fb68 	bl	80001d0 <strlen>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0c:	485e      	ldr	r0, [pc, #376]	; (8001c88 <StartDefaultTask+0x29c>)
 8001b0e:	f005 fd73 	bl	80075f8 <HAL_UART_Transmit>

		    //setSMUXLowChannels(true);
		    	//enableSpectralMeasurement(false);
			regtest[0]=AS7341_ENABLE;
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	f887 3020 	strb.w	r3, [r7, #32]
			regtest[1]=	0x01;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 8001b1e:	bf00      	nop
 8001b20:	f107 0220 	add.w	r2, r7, #32
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	2172      	movs	r1, #114	; 0x72
 8001b2e:	4854      	ldr	r0, [pc, #336]	; (8001c80 <StartDefaultTask+0x294>)
 8001b30:	f002 fea8 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f2      	bne.n	8001b20 <StartDefaultTask+0x134>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001b3a:	bf00      	nop
 8001b3c:	23c8      	movs	r3, #200	; 0xc8
 8001b3e:	220a      	movs	r2, #10
 8001b40:	2172      	movs	r1, #114	; 0x72
 8001b42:	484f      	ldr	r0, [pc, #316]	; (8001c80 <StartDefaultTask+0x294>)
 8001b44:	f003 f888 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f6      	bne.n	8001b3c <StartDefaultTask+0x150>

			regtest[0]=AS7341_ENABLE;
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	f887 3020 	strb.w	r3, [r7, #32]
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001b54:	bf00      	nop
 8001b56:	f107 0220 	add.w	r2, r7, #32
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2301      	movs	r3, #1
 8001b62:	2172      	movs	r1, #114	; 0x72
 8001b64:	4846      	ldr	r0, [pc, #280]	; (8001c80 <StartDefaultTask+0x294>)
 8001b66:	f002 fe8d 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f2      	bne.n	8001b56 <StartDefaultTask+0x16a>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001b70:	bf00      	nop
 8001b72:	23c8      	movs	r3, #200	; 0xc8
 8001b74:	220a      	movs	r2, #10
 8001b76:	2172      	movs	r1, #114	; 0x72
 8001b78:	4841      	ldr	r0, [pc, #260]	; (8001c80 <StartDefaultTask+0x294>)
 8001b7a:	f003 f86d 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f6      	bne.n	8001b72 <StartDefaultTask+0x186>
			while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001b84:	bf00      	nop
 8001b86:	f107 021c 	add.w	r2, r7, #28
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2301      	movs	r3, #1
 8001b92:	2172      	movs	r1, #114	; 0x72
 8001b94:	483a      	ldr	r0, [pc, #232]	; (8001c80 <StartDefaultTask+0x294>)
 8001b96:	f002 ff69 	bl	8004a6c <HAL_I2C_Master_Receive>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f2      	bne.n	8001b86 <StartDefaultTask+0x19a>

			//sprintf(msg, "disableSpectralMeasurement = %d\r\n", regRead[0]);
			//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

				//setSMUXCommand(AS7341_SMUX_CMD_WRITE);
			regtest[0]=AS7341_CFG6;
 8001ba0:	23af      	movs	r3, #175	; 0xaf
 8001ba2:	f887 3020 	strb.w	r3, [r7, #32]
			regtest[1]=0x10; //change 3 to 4
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 8001bac:	bf00      	nop
 8001bae:	f107 0220 	add.w	r2, r7, #32
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	2172      	movs	r1, #114	; 0x72
 8001bbc:	4830      	ldr	r0, [pc, #192]	; (8001c80 <StartDefaultTask+0x294>)
 8001bbe:	f002 fe61 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f2      	bne.n	8001bae <StartDefaultTask+0x1c2>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001bc8:	bf00      	nop
 8001bca:	23c8      	movs	r3, #200	; 0xc8
 8001bcc:	220a      	movs	r2, #10
 8001bce:	2172      	movs	r1, #114	; 0x72
 8001bd0:	482b      	ldr	r0, [pc, #172]	; (8001c80 <StartDefaultTask+0x294>)
 8001bd2:	f003 f841 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f6      	bne.n	8001bca <StartDefaultTask+0x1de>

			regtest[0]=AS7341_CFG6; //0xA9 to AS7341_CFG6
 8001bdc:	23af      	movs	r3, #175	; 0xaf
 8001bde:	f887 3020 	strb.w	r3, [r7, #32]
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001be2:	bf00      	nop
 8001be4:	f107 0220 	add.w	r2, r7, #32
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	2172      	movs	r1, #114	; 0x72
 8001bf2:	4823      	ldr	r0, [pc, #140]	; (8001c80 <StartDefaultTask+0x294>)
 8001bf4:	f002 fe46 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f2      	bne.n	8001be4 <StartDefaultTask+0x1f8>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001bfe:	bf00      	nop
 8001c00:	23c8      	movs	r3, #200	; 0xc8
 8001c02:	220a      	movs	r2, #10
 8001c04:	2172      	movs	r1, #114	; 0x72
 8001c06:	481e      	ldr	r0, [pc, #120]	; (8001c80 <StartDefaultTask+0x294>)
 8001c08:	f003 f826 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f6      	bne.n	8001c00 <StartDefaultTask+0x214>
			while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001c12:	bf00      	nop
 8001c14:	f107 021c 	add.w	r2, r7, #28
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2172      	movs	r1, #114	; 0x72
 8001c22:	4817      	ldr	r0, [pc, #92]	; (8001c80 <StartDefaultTask+0x294>)
 8001c24:	f002 ff22 	bl	8004a6c <HAL_I2C_Master_Receive>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f2      	bne.n	8001c14 <StartDefaultTask+0x228>

			//sprintf(msg, "setSMUXCommand = %d\r\n", regRead[0]);
			//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

				//setup_F1F4_Clear_NIR
			setup_F1F4_Clear_NIR(&hi2c1);
 8001c2e:	4814      	ldr	r0, [pc, #80]	; (8001c80 <StartDefaultTask+0x294>)
 8001c30:	f7ff f948 	bl	8000ec4 <setup_F1F4_Clear_NIR>

				//enableSMUX
			regtest[0]=AS7341_ENABLE;
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	f887 3020 	strb.w	r3, [r7, #32]
			regtest[1]=0x19;
 8001c3a:	2319      	movs	r3, #25
 8001c3c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 8001c40:	bf00      	nop
 8001c42:	f107 0220 	add.w	r2, r7, #32
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	2172      	movs	r1, #114	; 0x72
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <StartDefaultTask+0x294>)
 8001c52:	f002 fe17 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f2      	bne.n	8001c42 <StartDefaultTask+0x256>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001c5c:	bf00      	nop
 8001c5e:	23c8      	movs	r3, #200	; 0xc8
 8001c60:	220a      	movs	r2, #10
 8001c62:	2172      	movs	r1, #114	; 0x72
 8001c64:	4806      	ldr	r0, [pc, #24]	; (8001c80 <StartDefaultTask+0x294>)
 8001c66:	f002 fff7 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f6      	bne.n	8001c5e <StartDefaultTask+0x272>


			regtest[0]=AS7341_ENABLE;//0xA9 to AS7341_ENABLE
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	f887 3020 	strb.w	r3, [r7, #32]
			regRead[0]=0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	773b      	strb	r3, [r7, #28]
			while(regRead[0]==0){
 8001c7a:	e031      	b.n	8001ce0 <StartDefaultTask+0x2f4>
 8001c7c:	20008444 	.word	0x20008444
 8001c80:	200084a8 	.word	0x200084a8
 8001c84:	0800d50c 	.word	0x0800d50c
 8001c88:	20008640 	.word	0x20008640
 8001c8c:	0800d51c 	.word	0x0800d51c
 8001c90:	0800d52c 	.word	0x0800d52c
				while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001c94:	bf00      	nop
 8001c96:	f107 0220 	add.w	r2, r7, #32
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	2172      	movs	r1, #114	; 0x72
 8001ca4:	487d      	ldr	r0, [pc, #500]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001ca6:	f002 fded 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f2      	bne.n	8001c96 <StartDefaultTask+0x2aa>
				while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001cb0:	bf00      	nop
 8001cb2:	23c8      	movs	r3, #200	; 0xc8
 8001cb4:	220a      	movs	r2, #10
 8001cb6:	2172      	movs	r1, #114	; 0x72
 8001cb8:	4878      	ldr	r0, [pc, #480]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001cba:	f002 ffcd 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f6      	bne.n	8001cb2 <StartDefaultTask+0x2c6>
				while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001cc4:	bf00      	nop
 8001cc6:	f107 021c 	add.w	r2, r7, #28
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	2172      	movs	r1, #114	; 0x72
 8001cd4:	4871      	ldr	r0, [pc, #452]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001cd6:	f002 fec9 	bl	8004a6c <HAL_I2C_Master_Receive>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f2      	bne.n	8001cc6 <StartDefaultTask+0x2da>
			while(regRead[0]==0){
 8001ce0:	7f3b      	ldrb	r3, [r7, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0d6      	beq.n	8001c94 <StartDefaultTask+0x2a8>
				//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
			}


			//enableSpectralMeasurement(true);
			regtest[0]=AS7341_ENABLE;
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	f887 3020 	strb.w	r3, [r7, #32]
			regtest[1]=	0x03;
 8001cec:	2303      	movs	r3, #3
 8001cee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 8001cf2:	bf00      	nop
 8001cf4:	f107 0220 	add.w	r2, r7, #32
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	2172      	movs	r1, #114	; 0x72
 8001d02:	4866      	ldr	r0, [pc, #408]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001d04:	f002 fdbe 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f2      	bne.n	8001cf4 <StartDefaultTask+0x308>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001d0e:	bf00      	nop
 8001d10:	23c8      	movs	r3, #200	; 0xc8
 8001d12:	220a      	movs	r2, #10
 8001d14:	2172      	movs	r1, #114	; 0x72
 8001d16:	4861      	ldr	r0, [pc, #388]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001d18:	f002 ff9e 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f6      	bne.n	8001d10 <StartDefaultTask+0x324>

			regtest[0]=AS7341_ENABLE;
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	f887 3020 	strb.w	r3, [r7, #32]
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001d28:	bf00      	nop
 8001d2a:	f107 0220 	add.w	r2, r7, #32
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2301      	movs	r3, #1
 8001d36:	2172      	movs	r1, #114	; 0x72
 8001d38:	4858      	ldr	r0, [pc, #352]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001d3a:	f002 fda3 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f2      	bne.n	8001d2a <StartDefaultTask+0x33e>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001d44:	bf00      	nop
 8001d46:	23c8      	movs	r3, #200	; 0xc8
 8001d48:	220a      	movs	r2, #10
 8001d4a:	2172      	movs	r1, #114	; 0x72
 8001d4c:	4853      	ldr	r0, [pc, #332]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001d4e:	f002 ff83 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f6      	bne.n	8001d46 <StartDefaultTask+0x35a>
			while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001d58:	bf00      	nop
 8001d5a:	f107 021c 	add.w	r2, r7, #28
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2301      	movs	r3, #1
 8001d66:	2172      	movs	r1, #114	; 0x72
 8001d68:	484c      	ldr	r0, [pc, #304]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001d6a:	f002 fe7f 	bl	8004a6c <HAL_I2C_Master_Receive>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f2      	bne.n	8001d5a <StartDefaultTask+0x36e>

			sprintf(msg, "enableSpectralMeasurement = %d\r\n", regRead[0]);
 8001d74:	7f3b      	ldrb	r3, [r7, #28]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	4948      	ldr	r1, [pc, #288]	; (8001ea0 <StartDefaultTask+0x4b4>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f009 f986 	bl	800b090 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fa21 	bl	80001d0 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	4842      	ldr	r0, [pc, #264]	; (8001ea4 <StartDefaultTask+0x4b8>)
 8001d9c:	f005 fc2c 	bl	80075f8 <HAL_UART_Transmit>


			//delayForData
			regtest[0]=AS7341_STATUS2;
 8001da0:	23a3      	movs	r3, #163	; 0xa3
 8001da2:	f887 3020 	strb.w	r3, [r7, #32]
			regRead[0]=0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	773b      	strb	r3, [r7, #28]
			while(regRead[0]!=0x40){
 8001daa:	e028      	b.n	8001dfe <StartDefaultTask+0x412>
				osDelay(100);
 8001dac:	2064      	movs	r0, #100	; 0x64
 8001dae:	f006 f94b 	bl	8008048 <osDelay>
				while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001db2:	bf00      	nop
 8001db4:	f107 0220 	add.w	r2, r7, #32
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	2172      	movs	r1, #114	; 0x72
 8001dc2:	4836      	ldr	r0, [pc, #216]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001dc4:	f002 fd5e 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f2      	bne.n	8001db4 <StartDefaultTask+0x3c8>
				while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001dce:	bf00      	nop
 8001dd0:	23c8      	movs	r3, #200	; 0xc8
 8001dd2:	220a      	movs	r2, #10
 8001dd4:	2172      	movs	r1, #114	; 0x72
 8001dd6:	4831      	ldr	r0, [pc, #196]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001dd8:	f002 ff3e 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f6      	bne.n	8001dd0 <StartDefaultTask+0x3e4>
				while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001de2:	bf00      	nop
 8001de4:	f107 021c 	add.w	r2, r7, #28
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2301      	movs	r3, #1
 8001df0:	2172      	movs	r1, #114	; 0x72
 8001df2:	482a      	ldr	r0, [pc, #168]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001df4:	f002 fe3a 	bl	8004a6c <HAL_I2C_Master_Receive>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f2      	bne.n	8001de4 <StartDefaultTask+0x3f8>
			while(regRead[0]!=0x40){
 8001dfe:	7f3b      	ldrb	r3, [r7, #28]
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	d1d3      	bne.n	8001dac <StartDefaultTask+0x3c0>
				//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
			}

			//readAllChannels
		    //AS7341_CH0_DATA_L
		    regtest[0]=AS7341_CH0_DATA_L;
 8001e04:	2395      	movs	r3, #149	; 0x95
 8001e06:	f887 3020 	strb.w	r3, [r7, #32]
		    regtest[1]=0x02;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    uint16_t *readings_buffer;
		    readings_buffer=_channel_readings;
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <StartDefaultTask+0x4bc>)
 8001e12:	65bb      	str	r3, [r7, #88]	; 0x58

			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001e14:	bf00      	nop
 8001e16:	f107 0220 	add.w	r2, r7, #32
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	2172      	movs	r1, #114	; 0x72
 8001e24:	481d      	ldr	r0, [pc, #116]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001e26:	f002 fd2d 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f2      	bne.n	8001e16 <StartDefaultTask+0x42a>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001e30:	bf00      	nop
 8001e32:	23c8      	movs	r3, #200	; 0xc8
 8001e34:	220a      	movs	r2, #10
 8001e36:	2172      	movs	r1, #114	; 0x72
 8001e38:	4818      	ldr	r0, [pc, #96]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001e3a:	f002 ff0d 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f6      	bne.n	8001e32 <StartDefaultTask+0x446>

			regtest[0]=AS7341_CH0_DATA_L;
 8001e44:	2395      	movs	r3, #149	; 0x95
 8001e46:	f887 3020 	strb.w	r3, [r7, #32]
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 8001e4a:	bf00      	nop
 8001e4c:	f107 0220 	add.w	r2, r7, #32
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2302      	movs	r3, #2
 8001e58:	2172      	movs	r1, #114	; 0x72
 8001e5a:	4810      	ldr	r0, [pc, #64]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001e5c:	f002 fd12 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f2      	bne.n	8001e4c <StartDefaultTask+0x460>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001e66:	bf00      	nop
 8001e68:	23c8      	movs	r3, #200	; 0xc8
 8001e6a:	220a      	movs	r2, #10
 8001e6c:	2172      	movs	r1, #114	; 0x72
 8001e6e:	480b      	ldr	r0, [pc, #44]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001e70:	f002 fef2 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f6      	bne.n	8001e68 <StartDefaultTask+0x47c>
			while(HAL_I2C_Master_Receive(&hi2c1, 0x72, (uint8_t *)readings_buffer, 12, HAL_MAX_DELAY)!= HAL_OK);
 8001e7a:	bf00      	nop
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	230c      	movs	r3, #12
 8001e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e86:	2172      	movs	r1, #114	; 0x72
 8001e88:	4804      	ldr	r0, [pc, #16]	; (8001e9c <StartDefaultTask+0x4b0>)
 8001e8a:	f002 fdef 	bl	8004a6c <HAL_I2C_Master_Receive>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f3      	bne.n	8001e7c <StartDefaultTask+0x490>

		    for(int i=0; i<6; i++){
 8001e94:	2300      	movs	r3, #0
 8001e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e98:	e023      	b.n	8001ee2 <StartDefaultTask+0x4f6>
 8001e9a:	bf00      	nop
 8001e9c:	200084a8 	.word	0x200084a8
 8001ea0:	0800d53c 	.word	0x0800d53c
 8001ea4:	20008640 	.word	0x20008640
 8001ea8:	20008444 	.word	0x20008444
		    	sprintf(msg, "readAllChannels %d = %d \r\n",i, _channel_readings[i]);
 8001eac:	4aa4      	ldr	r2, [pc, #656]	; (8002140 <StartDefaultTask+0x754>)
 8001eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eb4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001eb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001eba:	49a2      	ldr	r1, [pc, #648]	; (8002144 <StartDefaultTask+0x758>)
 8001ebc:	f009 f8e8 	bl	800b090 <siprintf>
		    	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe f983 	bl	80001d0 <strlen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	489c      	ldr	r0, [pc, #624]	; (8002148 <StartDefaultTask+0x75c>)
 8001ed8:	f005 fb8e 	bl	80075f8 <HAL_UART_Transmit>
		    for(int i=0; i<6; i++){
 8001edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ede:	3301      	adds	r3, #1
 8001ee0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	dde1      	ble.n	8001eac <StartDefaultTask+0x4c0>


		    //read all H channel//
		    //setSMUXLowChannels(false);
		    	//enableSpectralMeasurement(false);
			regtest[0]=AS7341_ENABLE;
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	f887 3020 	strb.w	r3, [r7, #32]
			regtest[1]=	0x01;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 8001ef4:	bf00      	nop
 8001ef6:	f107 0220 	add.w	r2, r7, #32
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2302      	movs	r3, #2
 8001f02:	2172      	movs	r1, #114	; 0x72
 8001f04:	4891      	ldr	r0, [pc, #580]	; (800214c <StartDefaultTask+0x760>)
 8001f06:	f002 fcbd 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f2      	bne.n	8001ef6 <StartDefaultTask+0x50a>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001f10:	bf00      	nop
 8001f12:	23c8      	movs	r3, #200	; 0xc8
 8001f14:	220a      	movs	r2, #10
 8001f16:	2172      	movs	r1, #114	; 0x72
 8001f18:	488c      	ldr	r0, [pc, #560]	; (800214c <StartDefaultTask+0x760>)
 8001f1a:	f002 fe9d 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f6      	bne.n	8001f12 <StartDefaultTask+0x526>

			regtest[0]=AS7341_ENABLE;
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	f887 3020 	strb.w	r3, [r7, #32]
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001f2a:	bf00      	nop
 8001f2c:	f107 0220 	add.w	r2, r7, #32
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2301      	movs	r3, #1
 8001f38:	2172      	movs	r1, #114	; 0x72
 8001f3a:	4884      	ldr	r0, [pc, #528]	; (800214c <StartDefaultTask+0x760>)
 8001f3c:	f002 fca2 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f2      	bne.n	8001f2c <StartDefaultTask+0x540>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001f46:	bf00      	nop
 8001f48:	23c8      	movs	r3, #200	; 0xc8
 8001f4a:	220a      	movs	r2, #10
 8001f4c:	2172      	movs	r1, #114	; 0x72
 8001f4e:	487f      	ldr	r0, [pc, #508]	; (800214c <StartDefaultTask+0x760>)
 8001f50:	f002 fe82 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f6      	bne.n	8001f48 <StartDefaultTask+0x55c>
			while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001f5a:	bf00      	nop
 8001f5c:	f107 021c 	add.w	r2, r7, #28
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2301      	movs	r3, #1
 8001f68:	2172      	movs	r1, #114	; 0x72
 8001f6a:	4878      	ldr	r0, [pc, #480]	; (800214c <StartDefaultTask+0x760>)
 8001f6c:	f002 fd7e 	bl	8004a6c <HAL_I2C_Master_Receive>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f2      	bne.n	8001f5c <StartDefaultTask+0x570>

			//sprintf(msg, "H disableSpectralMeasurement = %d\r\n", regRead[0]);
			//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

				//setSMUXCommand(AS7341_SMUX_CMD_WRITE);
			regtest[0]=AS7341_CFG6;
 8001f76:	23af      	movs	r3, #175	; 0xaf
 8001f78:	f887 3020 	strb.w	r3, [r7, #32]
			regtest[1]=0x10; //change 3 to 4
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 8001f82:	bf00      	nop
 8001f84:	f107 0220 	add.w	r2, r7, #32
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	2172      	movs	r1, #114	; 0x72
 8001f92:	486e      	ldr	r0, [pc, #440]	; (800214c <StartDefaultTask+0x760>)
 8001f94:	f002 fc76 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f2      	bne.n	8001f84 <StartDefaultTask+0x598>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001f9e:	bf00      	nop
 8001fa0:	23c8      	movs	r3, #200	; 0xc8
 8001fa2:	220a      	movs	r2, #10
 8001fa4:	2172      	movs	r1, #114	; 0x72
 8001fa6:	4869      	ldr	r0, [pc, #420]	; (800214c <StartDefaultTask+0x760>)
 8001fa8:	f002 fe56 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f6      	bne.n	8001fa0 <StartDefaultTask+0x5b4>

			regtest[0]=AS7341_CFG6; //0xA9 to AS7341_CFG6
 8001fb2:	23af      	movs	r3, #175	; 0xaf
 8001fb4:	f887 3020 	strb.w	r3, [r7, #32]
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8001fb8:	bf00      	nop
 8001fba:	f107 0220 	add.w	r2, r7, #32
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2172      	movs	r1, #114	; 0x72
 8001fc8:	4860      	ldr	r0, [pc, #384]	; (800214c <StartDefaultTask+0x760>)
 8001fca:	f002 fc5b 	bl	8004884 <HAL_I2C_Master_Transmit>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f2      	bne.n	8001fba <StartDefaultTask+0x5ce>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8001fd4:	bf00      	nop
 8001fd6:	23c8      	movs	r3, #200	; 0xc8
 8001fd8:	220a      	movs	r2, #10
 8001fda:	2172      	movs	r1, #114	; 0x72
 8001fdc:	485b      	ldr	r0, [pc, #364]	; (800214c <StartDefaultTask+0x760>)
 8001fde:	f002 fe3b 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f6      	bne.n	8001fd6 <StartDefaultTask+0x5ea>
			while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001fe8:	bf00      	nop
 8001fea:	f107 021c 	add.w	r2, r7, #28
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	2172      	movs	r1, #114	; 0x72
 8001ff8:	4854      	ldr	r0, [pc, #336]	; (800214c <StartDefaultTask+0x760>)
 8001ffa:	f002 fd37 	bl	8004a6c <HAL_I2C_Master_Receive>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f2      	bne.n	8001fea <StartDefaultTask+0x5fe>

			//sprintf(msg, "H setSMUXCommand = %d\r\n", regRead[0]);
			//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

				//setup_F5F8_Clear_NIR
			setup_F5F8_Clear_NIR(&hi2c1);
 8002004:	4851      	ldr	r0, [pc, #324]	; (800214c <StartDefaultTask+0x760>)
 8002006:	f7fe ffc9 	bl	8000f9c <setup_F5F8_Clear_NIR>

				//enableSMUX
			regtest[0]=AS7341_ENABLE;
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	f887 3020 	strb.w	r3, [r7, #32]
			regtest[1]=0x19;
 8002010:	2319      	movs	r3, #25
 8002012:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 8002016:	bf00      	nop
 8002018:	f107 0220 	add.w	r2, r7, #32
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2302      	movs	r3, #2
 8002024:	2172      	movs	r1, #114	; 0x72
 8002026:	4849      	ldr	r0, [pc, #292]	; (800214c <StartDefaultTask+0x760>)
 8002028:	f002 fc2c 	bl	8004884 <HAL_I2C_Master_Transmit>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f2      	bne.n	8002018 <StartDefaultTask+0x62c>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8002032:	bf00      	nop
 8002034:	23c8      	movs	r3, #200	; 0xc8
 8002036:	220a      	movs	r2, #10
 8002038:	2172      	movs	r1, #114	; 0x72
 800203a:	4844      	ldr	r0, [pc, #272]	; (800214c <StartDefaultTask+0x760>)
 800203c:	f002 fe0c 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f6      	bne.n	8002034 <StartDefaultTask+0x648>


			regtest[0]=AS7341_ENABLE;//0xA9 to AS7341_ENABLE
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	f887 3020 	strb.w	r3, [r7, #32]
			regRead[0]=0;
 800204c:	2300      	movs	r3, #0
 800204e:	773b      	strb	r3, [r7, #28]
			while(regRead[0]==0){
 8002050:	e025      	b.n	800209e <StartDefaultTask+0x6b2>
				while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8002052:	bf00      	nop
 8002054:	f107 0220 	add.w	r2, r7, #32
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2301      	movs	r3, #1
 8002060:	2172      	movs	r1, #114	; 0x72
 8002062:	483a      	ldr	r0, [pc, #232]	; (800214c <StartDefaultTask+0x760>)
 8002064:	f002 fc0e 	bl	8004884 <HAL_I2C_Master_Transmit>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f2      	bne.n	8002054 <StartDefaultTask+0x668>
				while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 800206e:	bf00      	nop
 8002070:	23c8      	movs	r3, #200	; 0xc8
 8002072:	220a      	movs	r2, #10
 8002074:	2172      	movs	r1, #114	; 0x72
 8002076:	4835      	ldr	r0, [pc, #212]	; (800214c <StartDefaultTask+0x760>)
 8002078:	f002 fdee 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f6      	bne.n	8002070 <StartDefaultTask+0x684>
				while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8002082:	bf00      	nop
 8002084:	f107 021c 	add.w	r2, r7, #28
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	2172      	movs	r1, #114	; 0x72
 8002092:	482e      	ldr	r0, [pc, #184]	; (800214c <StartDefaultTask+0x760>)
 8002094:	f002 fcea 	bl	8004a6c <HAL_I2C_Master_Receive>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f2      	bne.n	8002084 <StartDefaultTask+0x698>
			while(regRead[0]==0){
 800209e:	7f3b      	ldrb	r3, [r7, #28]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0d6      	beq.n	8002052 <StartDefaultTask+0x666>
				//sprintf(msg, "H enableSMUX = %d\r\n", regRead[0]);
				//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
			}

			//enableSpectralMeasurement(true);
			regtest[0]=AS7341_ENABLE;
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	f887 3020 	strb.w	r3, [r7, #32]
			regtest[1]=	0x03;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 80020b0:	bf00      	nop
 80020b2:	f107 0220 	add.w	r2, r7, #32
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2302      	movs	r3, #2
 80020be:	2172      	movs	r1, #114	; 0x72
 80020c0:	4822      	ldr	r0, [pc, #136]	; (800214c <StartDefaultTask+0x760>)
 80020c2:	f002 fbdf 	bl	8004884 <HAL_I2C_Master_Transmit>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f2      	bne.n	80020b2 <StartDefaultTask+0x6c6>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 80020cc:	bf00      	nop
 80020ce:	23c8      	movs	r3, #200	; 0xc8
 80020d0:	220a      	movs	r2, #10
 80020d2:	2172      	movs	r1, #114	; 0x72
 80020d4:	481d      	ldr	r0, [pc, #116]	; (800214c <StartDefaultTask+0x760>)
 80020d6:	f002 fdbf 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f6      	bne.n	80020ce <StartDefaultTask+0x6e2>

			regtest[0]=AS7341_ENABLE;
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	f887 3020 	strb.w	r3, [r7, #32]
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 80020e6:	bf00      	nop
 80020e8:	f107 0220 	add.w	r2, r7, #32
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2301      	movs	r3, #1
 80020f4:	2172      	movs	r1, #114	; 0x72
 80020f6:	4815      	ldr	r0, [pc, #84]	; (800214c <StartDefaultTask+0x760>)
 80020f8:	f002 fbc4 	bl	8004884 <HAL_I2C_Master_Transmit>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f2      	bne.n	80020e8 <StartDefaultTask+0x6fc>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8002102:	bf00      	nop
 8002104:	23c8      	movs	r3, #200	; 0xc8
 8002106:	220a      	movs	r2, #10
 8002108:	2172      	movs	r1, #114	; 0x72
 800210a:	4810      	ldr	r0, [pc, #64]	; (800214c <StartDefaultTask+0x760>)
 800210c:	f002 fda4 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f6      	bne.n	8002104 <StartDefaultTask+0x718>
			while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8002116:	bf00      	nop
 8002118:	f107 021c 	add.w	r2, r7, #28
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2301      	movs	r3, #1
 8002124:	2172      	movs	r1, #114	; 0x72
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <StartDefaultTask+0x760>)
 8002128:	f002 fca0 	bl	8004a6c <HAL_I2C_Master_Receive>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f2      	bne.n	8002118 <StartDefaultTask+0x72c>

			//sprintf(msg, "enableSpectralMeasurement = %d\r\n", regRead[0]);
			//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

			//delayForData
			regtest[0]=AS7341_STATUS2;
 8002132:	23a3      	movs	r3, #163	; 0xa3
 8002134:	f887 3020 	strb.w	r3, [r7, #32]
			regRead[0]=0;
 8002138:	2300      	movs	r3, #0
 800213a:	773b      	strb	r3, [r7, #28]
			while(regRead[0]!=0x40){
 800213c:	e031      	b.n	80021a2 <StartDefaultTask+0x7b6>
 800213e:	bf00      	nop
 8002140:	20008444 	.word	0x20008444
 8002144:	0800d560 	.word	0x0800d560
 8002148:	20008640 	.word	0x20008640
 800214c:	200084a8 	.word	0x200084a8
				osDelay(100);
 8002150:	2064      	movs	r0, #100	; 0x64
 8002152:	f005 ff79 	bl	8008048 <osDelay>
				while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 8002156:	bf00      	nop
 8002158:	f107 0220 	add.w	r2, r7, #32
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2301      	movs	r3, #1
 8002164:	2172      	movs	r1, #114	; 0x72
 8002166:	486c      	ldr	r0, [pc, #432]	; (8002318 <StartDefaultTask+0x92c>)
 8002168:	f002 fb8c 	bl	8004884 <HAL_I2C_Master_Transmit>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f2      	bne.n	8002158 <StartDefaultTask+0x76c>
				while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8002172:	bf00      	nop
 8002174:	23c8      	movs	r3, #200	; 0xc8
 8002176:	220a      	movs	r2, #10
 8002178:	2172      	movs	r1, #114	; 0x72
 800217a:	4867      	ldr	r0, [pc, #412]	; (8002318 <StartDefaultTask+0x92c>)
 800217c:	f002 fd6c 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f6      	bne.n	8002174 <StartDefaultTask+0x788>
				while(HAL_I2C_Master_Receive(&hi2c1, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8002186:	bf00      	nop
 8002188:	f107 021c 	add.w	r2, r7, #28
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2301      	movs	r3, #1
 8002194:	2172      	movs	r1, #114	; 0x72
 8002196:	4860      	ldr	r0, [pc, #384]	; (8002318 <StartDefaultTask+0x92c>)
 8002198:	f002 fc68 	bl	8004a6c <HAL_I2C_Master_Receive>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f2      	bne.n	8002188 <StartDefaultTask+0x79c>
			while(regRead[0]!=0x40){
 80021a2:	7f3b      	ldrb	r3, [r7, #28]
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d1d3      	bne.n	8002150 <StartDefaultTask+0x764>
				//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
			}

			//readAllChannels
		    //AS7341_CH0_DATA_L
		    regtest[0]=AS7341_CH0_DATA_L;
 80021a8:	2395      	movs	r3, #149	; 0x95
 80021aa:	f887 3020 	strb.w	r3, [r7, #32]
		    regtest[1]=0x02;
 80021ae:	2302      	movs	r3, #2
 80021b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, 1, HAL_MAX_DELAY) != HAL_OK);
 80021b4:	bf00      	nop
 80021b6:	f107 0220 	add.w	r2, r7, #32
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2301      	movs	r3, #1
 80021c2:	2172      	movs	r1, #114	; 0x72
 80021c4:	4854      	ldr	r0, [pc, #336]	; (8002318 <StartDefaultTask+0x92c>)
 80021c6:	f002 fb5d 	bl	8004884 <HAL_I2C_Master_Transmit>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f2      	bne.n	80021b6 <StartDefaultTask+0x7ca>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 80021d0:	bf00      	nop
 80021d2:	23c8      	movs	r3, #200	; 0xc8
 80021d4:	220a      	movs	r2, #10
 80021d6:	2172      	movs	r1, #114	; 0x72
 80021d8:	484f      	ldr	r0, [pc, #316]	; (8002318 <StartDefaultTask+0x92c>)
 80021da:	f002 fd3d 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f6      	bne.n	80021d2 <StartDefaultTask+0x7e6>

			regtest[0]=AS7341_CH0_DATA_L;
 80021e4:	2395      	movs	r3, #149	; 0x95
 80021e6:	f887 3020 	strb.w	r3, [r7, #32]
			while(HAL_I2C_Master_Transmit(&hi2c1, 0x72, regtest, sizeof(regtest), HAL_MAX_DELAY) != HAL_OK);
 80021ea:	bf00      	nop
 80021ec:	f107 0220 	add.w	r2, r7, #32
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2302      	movs	r3, #2
 80021f8:	2172      	movs	r1, #114	; 0x72
 80021fa:	4847      	ldr	r0, [pc, #284]	; (8002318 <StartDefaultTask+0x92c>)
 80021fc:	f002 fb42 	bl	8004884 <HAL_I2C_Master_Transmit>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f2      	bne.n	80021ec <StartDefaultTask+0x800>
			while(HAL_I2C_IsDeviceReady(&hi2c1,0x72,10,200)!=HAL_OK);
 8002206:	bf00      	nop
 8002208:	23c8      	movs	r3, #200	; 0xc8
 800220a:	220a      	movs	r2, #10
 800220c:	2172      	movs	r1, #114	; 0x72
 800220e:	4842      	ldr	r0, [pc, #264]	; (8002318 <StartDefaultTask+0x92c>)
 8002210:	f002 fd22 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f6      	bne.n	8002208 <StartDefaultTask+0x81c>
			while(HAL_I2C_Master_Receive(&hi2c1, 0x72, (uint8_t *)&readings_buffer[6], 12, HAL_MAX_DELAY)!= HAL_OK);
 800221a:	bf00      	nop
 800221c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800221e:	f103 020c 	add.w	r2, r3, #12
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	230c      	movs	r3, #12
 800222a:	2172      	movs	r1, #114	; 0x72
 800222c:	483a      	ldr	r0, [pc, #232]	; (8002318 <StartDefaultTask+0x92c>)
 800222e:	f002 fc1d 	bl	8004a6c <HAL_I2C_Master_Receive>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f1      	bne.n	800221c <StartDefaultTask+0x830>

		    for(int i=0; i<12; i++){
 8002238:	2300      	movs	r3, #0
 800223a:	667b      	str	r3, [r7, #100]	; 0x64
 800223c:	e01a      	b.n	8002274 <StartDefaultTask+0x888>
		    	sprintf(msg, "H readAllChannels %d = %d \r\n",i, _channel_readings[i]);
 800223e:	4a37      	ldr	r2, [pc, #220]	; (800231c <StartDefaultTask+0x930>)
 8002240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002246:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800224a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800224c:	4934      	ldr	r1, [pc, #208]	; (8002320 <StartDefaultTask+0x934>)
 800224e:	f008 ff1f 	bl	800b090 <siprintf>
		    	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	4618      	mov	r0, r3
 8002258:	f7fd ffba 	bl	80001d0 <strlen>
 800225c:	4603      	mov	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	482e      	ldr	r0, [pc, #184]	; (8002324 <StartDefaultTask+0x938>)
 800226a:	f005 f9c5 	bl	80075f8 <HAL_UART_Transmit>
		    for(int i=0; i<12; i++){
 800226e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002270:	3301      	adds	r3, #1
 8002272:	667b      	str	r3, [r7, #100]	; 0x64
 8002274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002276:	2b0b      	cmp	r3, #11
 8002278:	dde1      	ble.n	800223e <StartDefaultTask+0x852>
		    uint16_t read[8];
		    //uint16_t read16bits=0;
		    //uint16_t a = readAllChannels(&hi2c1,read16bits);


		    read[0] = getChannel(AS7341_CHANNEL_415nm_F1);
 800227a:	2000      	movs	r0, #0
 800227c:	f7fe fe10 	bl	8000ea0 <getChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	81bb      	strh	r3, [r7, #12]
		    read[1] = getChannel(AS7341_CHANNEL_445nm_F2);
 8002284:	2001      	movs	r0, #1
 8002286:	f7fe fe0b 	bl	8000ea0 <getChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	81fb      	strh	r3, [r7, #14]
		    read[2] = getChannel(AS7341_CHANNEL_480nm_F3);
 800228e:	2002      	movs	r0, #2
 8002290:	f7fe fe06 	bl	8000ea0 <getChannel>
 8002294:	4603      	mov	r3, r0
 8002296:	823b      	strh	r3, [r7, #16]
		    read[3] = getChannel(AS7341_CHANNEL_515nm_F4);
 8002298:	2003      	movs	r0, #3
 800229a:	f7fe fe01 	bl	8000ea0 <getChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	827b      	strh	r3, [r7, #18]
		    read[4] = getChannel(AS7341_CHANNEL_555nm_F5);
 80022a2:	2004      	movs	r0, #4
 80022a4:	f7fe fdfc 	bl	8000ea0 <getChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	82bb      	strh	r3, [r7, #20]
		    read[5] = getChannel(AS7341_CHANNEL_590nm_F6);
 80022ac:	2005      	movs	r0, #5
 80022ae:	f7fe fdf7 	bl	8000ea0 <getChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	82fb      	strh	r3, [r7, #22]
		    read[6] = getChannel(AS7341_CHANNEL_630nm_F7);
 80022b6:	2006      	movs	r0, #6
 80022b8:	f7fe fdf2 	bl	8000ea0 <getChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	833b      	strh	r3, [r7, #24]
		    read[7] = getChannel(AS7341_CHANNEL_680nm_F8);
 80022c0:	2007      	movs	r0, #7
 80022c2:	f7fe fded 	bl	8000ea0 <getChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	837b      	strh	r3, [r7, #26]
		    for(int i=0; i<8; i++){
 80022ca:	2300      	movs	r3, #0
 80022cc:	663b      	str	r3, [r7, #96]	; 0x60
 80022ce:	e01e      	b.n	800230e <StartDefaultTask+0x922>
		    	sprintf(msg, "getChannel %d = %d\r\n",i+1,  read[i]);
 80022d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80022dc:	440b      	add	r3, r1
 80022de:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 80022e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80022e6:	4910      	ldr	r1, [pc, #64]	; (8002328 <StartDefaultTask+0x93c>)
 80022e8:	f008 fed2 	bl	800b090 <siprintf>
		    	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80022ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fd ff6d 	bl	80001d0 <strlen>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	4808      	ldr	r0, [pc, #32]	; (8002324 <StartDefaultTask+0x938>)
 8002304:	f005 f978 	bl	80075f8 <HAL_UART_Transmit>
		    for(int i=0; i<8; i++){
 8002308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800230a:	3301      	adds	r3, #1
 800230c:	663b      	str	r3, [r7, #96]	; 0x60
 800230e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002310:	2b07      	cmp	r3, #7
 8002312:	dddd      	ble.n	80022d0 <StartDefaultTask+0x8e4>
	  for(;;){
 8002314:	f7ff bb6e 	b.w	80019f4 <StartDefaultTask+0x8>
 8002318:	200084a8 	.word	0x200084a8
 800231c:	20008444 	.word	0x20008444
 8002320:	0800d57c 	.word	0x0800d57c
 8002324:	20008640 	.word	0x20008640
 8002328:	0800d59c 	.word	0x0800d59c

0800232c <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b094      	sub	sp, #80	; 0x50
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */

	  char msg[50];
	  uint8_t read[2]={0};
 8002334:	2300      	movs	r3, #0
 8002336:	823b      	strh	r3, [r7, #16]
	  uint16_t readtest;
	  float readfloat=0.0;
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint8_t TH = 0x00;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  uint8_t TV = 0x01;
 8002344:	2301      	movs	r3, #1
 8002346:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	  uint8_t TC = 0x02;
 800234a:	2302      	movs	r3, #2
 800234c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	  uint8_t tempReg[] = {TH,TV,TC};
 8002350:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002354:	733b      	strb	r3, [r7, #12]
 8002356:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800235a:	737b      	strb	r3, [r7, #13]
 800235c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002360:	73bb      	strb	r3, [r7, #14]

	  uint8_t data[1]={TH};
 8002362:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002366:	723b      	strb	r3, [r7, #8]
	  uint8_t MSB = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	  uint8_t LSB = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  HAL_StatusTypeDef status;
	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(10);
 8002374:	200a      	movs	r0, #10
 8002376:	f005 fe67 	bl	8008048 <osDelay>
 800237a:	e7fb      	b.n	8002374 <StartReadTempTask+0x48>

0800237c <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b090      	sub	sp, #64	; 0x40
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  char msg[50];
  /* Infinite loop */

  for(;;)
  {
    osDelay(10);
 8002384:	200a      	movs	r0, #10
 8002386:	f005 fe5f 	bl	8008048 <osDelay>
 800238a:	e7fb      	b.n	8002384 <StartReadLightTask+0x8>

0800238c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800239e:	f000 fc25 	bl	8002bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40001000 	.word	0x40001000

080023b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b4:	b672      	cpsid	i
}
 80023b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <Error_Handler+0x8>
	...

080023bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_MspInit+0x4c>)
 80023c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_MspInit+0x4c>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6613      	str	r3, [r2, #96]	; 0x60
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_MspInit+0x4c>)
 80023d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_MspInit+0x4c>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_MspInit+0x4c>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6593      	str	r3, [r2, #88]	; 0x58
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_MspInit+0x4c>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	210f      	movs	r1, #15
 80023f6:	f06f 0001 	mvn.w	r0, #1
 80023fa:	f001 feb7 	bl	800416c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000

0800240c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_ADC_MspInit+0x74>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d124      	bne.n	8002478 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_ADC_MspInit+0x78>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_ADC_MspInit+0x78>)
 8002434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_ADC_MspInit+0x78>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_ADC_MspInit+0x78>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_ADC_MspInit+0x78>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_ADC_MspInit+0x78>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800245e:	2372      	movs	r3, #114	; 0x72
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002462:	230b      	movs	r3, #11
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002474:	f002 f80c 	bl	8004490 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3728      	adds	r7, #40	; 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	50040000 	.word	0x50040000
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a20      	ldr	r2, [pc, #128]	; (8002528 <HAL_CAN_MspInit+0xa0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d139      	bne.n	800251e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_CAN_MspInit+0xa4>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <HAL_CAN_MspInit+0xa4>)
 80024b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024b4:	6593      	str	r3, [r2, #88]	; 0x58
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_CAN_MspInit+0xa4>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_CAN_MspInit+0xa4>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_CAN_MspInit+0xa4>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <HAL_CAN_MspInit+0xa4>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80024da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80024ec:	2309      	movs	r3, #9
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024fa:	f001 ffc9 	bl	8004490 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2105      	movs	r1, #5
 8002502:	2013      	movs	r0, #19
 8002504:	f001 fe32 	bl	800416c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002508:	2013      	movs	r0, #19
 800250a:	f001 fe4b 	bl	80041a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2105      	movs	r1, #5
 8002512:	2014      	movs	r0, #20
 8002514:	f001 fe2a 	bl	800416c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002518:	2014      	movs	r0, #20
 800251a:	f001 fe43 	bl	80041a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800251e:	bf00      	nop
 8002520:	3728      	adds	r7, #40	; 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40006400 	.word	0x40006400
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a17      	ldr	r2, [pc, #92]	; (80025ac <HAL_I2C_MspInit+0x7c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d127      	bne.n	80025a2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_I2C_MspInit+0x80>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_I2C_MspInit+0x80>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_I2C_MspInit+0x80>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800256a:	23c0      	movs	r3, #192	; 0xc0
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256e:	2312      	movs	r3, #18
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002572:	2301      	movs	r3, #1
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800257a:	2304      	movs	r3, #4
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	480b      	ldr	r0, [pc, #44]	; (80025b4 <HAL_I2C_MspInit+0x84>)
 8002586:	f001 ff83 	bl	8004490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_I2C_MspInit+0x80>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_I2C_MspInit+0x80>)
 8002590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002594:	6593      	str	r3, [r2, #88]	; 0x58
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_I2C_MspInit+0x80>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40005400 	.word	0x40005400
 80025b0:	40021000 	.word	0x40021000
 80025b4:	48000400 	.word	0x48000400

080025b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_TIM_PWM_MspInit+0x5c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10c      	bne.n	80025e4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HAL_TIM_PWM_MspInit+0x60>)
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_TIM_PWM_MspInit+0x60>)
 80025d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d4:	6613      	str	r3, [r2, #96]	; 0x60
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_TIM_PWM_MspInit+0x60>)
 80025d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80025e2:	e010      	b.n	8002606 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <HAL_TIM_PWM_MspInit+0x64>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10b      	bne.n	8002606 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_TIM_PWM_MspInit+0x60>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_TIM_PWM_MspInit+0x60>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6613      	str	r3, [r2, #96]	; 0x60
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_TIM_PWM_MspInit+0x60>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40021000 	.word	0x40021000
 800261c:	40014000 	.word	0x40014000

08002620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a23      	ldr	r2, [pc, #140]	; (80026cc <HAL_TIM_MspPostInit+0xac>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d11e      	bne.n	8002680 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <HAL_TIM_MspPostInit+0xb0>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <HAL_TIM_MspPostInit+0xb0>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_TIM_MspPostInit+0xb0>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800265a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800265e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	f001 ff09 	bl	8004490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800267e:	e021      	b.n	80026c4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM15)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <HAL_TIM_MspPostInit+0xb4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d11c      	bne.n	80026c4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_TIM_MspPostInit+0xb0>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <HAL_TIM_MspPostInit+0xb0>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_TIM_MspPostInit+0xb0>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026a2:	2308      	movs	r3, #8
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80026b2:	230e      	movs	r3, #14
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c0:	f001 fee6 	bl	8004490 <HAL_GPIO_Init>
}
 80026c4:	bf00      	nop
 80026c6:	3728      	adds	r7, #40	; 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40014000 	.word	0x40014000

080026d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a4a      	ldr	r2, [pc, #296]	; (8002820 <HAL_UART_MspInit+0x148>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	f040 808d 	bne.w	8002816 <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026fc:	4b49      	ldr	r3, [pc, #292]	; (8002824 <HAL_UART_MspInit+0x14c>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	4a48      	ldr	r2, [pc, #288]	; (8002824 <HAL_UART_MspInit+0x14c>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002706:	6593      	str	r3, [r2, #88]	; 0x58
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_UART_MspInit+0x14c>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002714:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_UART_MspInit+0x14c>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	4a42      	ldr	r2, [pc, #264]	; (8002824 <HAL_UART_MspInit+0x14c>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002720:	4b40      	ldr	r3, [pc, #256]	; (8002824 <HAL_UART_MspInit+0x14c>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800272c:	2304      	movs	r3, #4
 800272e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800273c:	2307      	movs	r3, #7
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800274a:	f001 fea1 	bl	8004490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800274e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002760:	2303      	movs	r3, #3
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800276e:	f001 fe8f 	bl	8004490 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002772:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <HAL_UART_MspInit+0x150>)
 8002774:	4a2d      	ldr	r2, [pc, #180]	; (800282c <HAL_UART_MspInit+0x154>)
 8002776:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_UART_MspInit+0x150>)
 800277a:	2202      	movs	r2, #2
 800277c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800277e:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <HAL_UART_MspInit+0x150>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_UART_MspInit+0x150>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_UART_MspInit+0x150>)
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002790:	4b25      	ldr	r3, [pc, #148]	; (8002828 <HAL_UART_MspInit+0x150>)
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_UART_MspInit+0x150>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800279c:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_UART_MspInit+0x150>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_UART_MspInit+0x150>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027a8:	481f      	ldr	r0, [pc, #124]	; (8002828 <HAL_UART_MspInit+0x150>)
 80027aa:	f001 fd09 	bl	80041c0 <HAL_DMA_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 80027b4:	f7ff fdfc 	bl	80023b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_UART_MspInit+0x150>)
 80027bc:	671a      	str	r2, [r3, #112]	; 0x70
 80027be:	4a1a      	ldr	r2, [pc, #104]	; (8002828 <HAL_UART_MspInit+0x150>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027c6:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <HAL_UART_MspInit+0x15c>)
 80027c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027cc:	2202      	movs	r2, #2
 80027ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027d2:	2210      	movs	r2, #16
 80027d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027fa:	480d      	ldr	r0, [pc, #52]	; (8002830 <HAL_UART_MspInit+0x158>)
 80027fc:	f001 fce0 	bl	80041c0 <HAL_DMA_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8002806:	f7ff fdd3 	bl	80023b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a08      	ldr	r2, [pc, #32]	; (8002830 <HAL_UART_MspInit+0x158>)
 800280e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_UART_MspInit+0x158>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002816:	bf00      	nop
 8002818:	3728      	adds	r7, #40	; 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40004400 	.word	0x40004400
 8002824:	40021000 	.word	0x40021000
 8002828:	20008460 	.word	0x20008460
 800282c:	4002006c 	.word	0x4002006c
 8002830:	200085a8 	.word	0x200085a8
 8002834:	40020080 	.word	0x40020080

08002838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002848:	2200      	movs	r2, #0
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	2036      	movs	r0, #54	; 0x36
 800284e:	f001 fc8d 	bl	800416c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002852:	2036      	movs	r0, #54	; 0x36
 8002854:	f001 fca6 	bl	80041a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002858:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <HAL_InitTick+0xa0>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <HAL_InitTick+0xa0>)
 800285e:	f043 0310 	orr.w	r3, r3, #16
 8002862:	6593      	str	r3, [r2, #88]	; 0x58
 8002864:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <HAL_InitTick+0xa0>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002870:	f107 0210 	add.w	r2, r7, #16
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f003 fba4 	bl	8005fc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002880:	f003 fb76 	bl	8005f70 <HAL_RCC_GetPCLK1Freq>
 8002884:	4603      	mov	r3, r0
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <HAL_InitTick+0xa4>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9b      	lsrs	r3, r3, #18
 8002894:	3b01      	subs	r3, #1
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_InitTick+0xa8>)
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <HAL_InitTick+0xac>)
 800289c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_InitTick+0xa8>)
 80028a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028a6:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_InitTick+0xa8>)
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_InitTick+0xa8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_InitTick+0xa8>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028b8:	4809      	ldr	r0, [pc, #36]	; (80028e0 <HAL_InitTick+0xa8>)
 80028ba:	f003 ff0d 	bl	80066d8 <HAL_TIM_Base_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028c4:	4806      	ldr	r0, [pc, #24]	; (80028e0 <HAL_InitTick+0xa8>)
 80028c6:	f003 ff69 	bl	800679c <HAL_TIM_Base_Start_IT>
 80028ca:	4603      	mov	r3, r0
 80028cc:	e000      	b.n	80028d0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3730      	adds	r7, #48	; 0x30
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	431bde83 	.word	0x431bde83
 80028e0:	200086ec 	.word	0x200086ec
 80028e4:	40001000 	.word	0x40001000

080028e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <NMI_Handler+0x4>

080028ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <HardFault_Handler+0x4>

080028f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <MemManage_Handler+0x4>

080028fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <BusFault_Handler+0x4>

08002900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <UsageFault_Handler+0x4>

08002906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <DMA1_Channel6_IRQHandler+0x10>)
 800291a:	f001 fd09 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20008460 	.word	0x20008460

08002928 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <DMA1_Channel7_IRQHandler+0x10>)
 800292e:	f001 fcff 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200085a8 	.word	0x200085a8

0800293c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <CAN1_TX_IRQHandler+0x10>)
 8002942:	f001 f922 	bl	8003b8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200086c4 	.word	0x200086c4

08002950 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <CAN1_RX0_IRQHandler+0x10>)
 8002956:	f001 f918 	bl	8003b8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200086c4 	.word	0x200086c4

08002964 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <TIM6_DAC_IRQHandler+0x10>)
 800296a:	f003 ffc2 	bl	80068f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200086ec 	.word	0x200086ec

08002978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
	return 1;
 800297c:	2301      	movs	r3, #1
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_kill>:

int _kill(int pid, int sig)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002992:	f007 fed3 	bl	800a73c <__errno>
 8002996:	4603      	mov	r3, r0
 8002998:	2216      	movs	r2, #22
 800299a:	601a      	str	r2, [r3, #0]
	return -1;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <_exit>:

void _exit (int status)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029b0:	f04f 31ff 	mov.w	r1, #4294967295
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ffe7 	bl	8002988 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029ba:	e7fe      	b.n	80029ba <_exit+0x12>

080029bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	e00a      	b.n	80029e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029ce:	f3af 8000 	nop.w
 80029d2:	4601      	mov	r1, r0
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	60ba      	str	r2, [r7, #8]
 80029da:	b2ca      	uxtb	r2, r1
 80029dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3301      	adds	r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	dbf0      	blt.n	80029ce <_read+0x12>
	}

return len;
 80029ec:	687b      	ldr	r3, [r7, #4]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e009      	b.n	8002a1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	60ba      	str	r2, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	dbf1      	blt.n	8002a08 <_write+0x12>
	}
	return len;
 8002a24:	687b      	ldr	r3, [r7, #4]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_close>:

int _close(int file)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
	return -1;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a56:	605a      	str	r2, [r3, #4]
	return 0;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <_isatty>:

int _isatty(int file)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
	return 0;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <_sbrk+0x5c>)
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <_sbrk+0x60>)
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <_sbrk+0x64>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <_sbrk+0x68>)
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <_sbrk+0x64>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d207      	bcs.n	8002ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac8:	f007 fe38 	bl	800a73c <__errno>
 8002acc:	4603      	mov	r3, r0
 8002ace:	220c      	movs	r2, #12
 8002ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	e009      	b.n	8002aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <_sbrk+0x64>)
 8002ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20010000 	.word	0x20010000
 8002af8:	00000400 	.word	0x00000400
 8002afc:	20000200 	.word	0x20000200
 8002b00:	20008790 	.word	0x20008790

08002b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <SystemInit+0x5c>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <SystemInit+0x5c>)
 8002b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <SystemInit+0x60>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <SystemInit+0x60>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <SystemInit+0x60>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <SystemInit+0x60>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <SystemInit+0x60>)
 8002b30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <SystemInit+0x60>)
 8002b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <SystemInit+0x60>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <SystemInit+0x60>)
 8002b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <SystemInit+0x60>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000ed00 	.word	0xe000ed00
 8002b64:	40021000 	.word	0x40021000

08002b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b6c:	f7ff ffca 	bl	8002b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b72:	e003      	b.n	8002b7c <LoopCopyDataInit>

08002b74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b7a:	3104      	adds	r1, #4

08002b7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b7c:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b84:	d3f6      	bcc.n	8002b74 <CopyDataInit>
	ldr	r2, =_sbss
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b88:	e002      	b.n	8002b90 <LoopFillZerobss>

08002b8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b8c:	f842 3b04 	str.w	r3, [r2], #4

08002b90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <LoopForever+0x16>)
	cmp	r2, r3
 8002b92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b94:	d3f9      	bcc.n	8002b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b96:	f007 fdd7 	bl	800a748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b9a:	f7fe fbbf 	bl	800131c <main>

08002b9e <LoopForever>:

LoopForever:
    b LoopForever
 8002b9e:	e7fe      	b.n	8002b9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ba0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002ba4:	0800da74 	.word	0x0800da74
	ldr	r0, =_sdata
 8002ba8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002bac:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8002bb0:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8002bb4:	2000878c 	.word	0x2000878c

08002bb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bb8:	e7fe      	b.n	8002bb8 <ADC1_IRQHandler>

08002bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f001 fac6 	bl	8004156 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7ff fe34 	bl	8002838 <HAL_InitTick>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	71fb      	strb	r3, [r7, #7]
 8002bda:	e001      	b.n	8002be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bdc:	f7ff fbee 	bl	80023bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002be0:	79fb      	ldrb	r3, [r7, #7]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_IncTick+0x20>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_IncTick+0x24>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <HAL_IncTick+0x24>)
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000008 	.word	0x20000008
 8002c10:	20008738 	.word	0x20008738

08002c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return uwTick;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HAL_GetTick+0x14>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20008738 	.word	0x20008738

08002c2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3360      	adds	r3, #96	; 0x60
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <LL_ADC_SetOffset+0x44>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	03fff000 	.word	0x03fff000

08002cdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	461a      	mov	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3360      	adds	r3, #96	; 0x60
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b087      	sub	sp, #28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3330      	adds	r3, #48	; 0x30
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	4413      	add	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	211f      	movs	r1, #31
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	401a      	ands	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 011f 	and.w	r1, r3, #31
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	431a      	orrs	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b087      	sub	sp, #28
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3314      	adds	r3, #20
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	0e5b      	lsrs	r3, r3, #25
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	4413      	add	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	0d1b      	lsrs	r3, r3, #20
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2107      	movs	r1, #7
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	401a      	ands	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	0d1b      	lsrs	r3, r3, #20
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0318 	and.w	r3, r3, #24
 8002e0e:	4908      	ldr	r1, [pc, #32]	; (8002e30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e10:	40d9      	lsrs	r1, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	400b      	ands	r3, r1
 8002e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	0007ffff 	.word	0x0007ffff

08002e34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6093      	str	r3, [r2, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebc:	d101      	bne.n	8002ec2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <LL_ADC_IsEnabled+0x18>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <LL_ADC_IsEnabled+0x1a>
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d101      	bne.n	8002f0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d101      	bne.n	8002f34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e12c      	b.n	80031b8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff fa4d 	bl	800240c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff67 	bl	8002e58 <LL_ADC_IsDeepPowerDownEnabled>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff4d 	bl	8002e34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff82 	bl	8002ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d115      	bne.n	8002fd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff66 	bl	8002e80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fb4:	4b82      	ldr	r3, [pc, #520]	; (80031c0 <HAL_ADC_Init+0x27c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	4a82      	ldr	r2, [pc, #520]	; (80031c4 <HAL_ADC_Init+0x280>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fc8:	e002      	b.n	8002fd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f9      	bne.n	8002fca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff64 	bl	8002ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	f043 0210 	orr.w	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff75 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 800300c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 80c5 	bne.w	80031a6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 80c1 	bne.w	80031a6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800302c:	f043 0202 	orr.w	r2, r3, #2
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff49 	bl	8002ed0 <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003044:	4860      	ldr	r0, [pc, #384]	; (80031c8 <HAL_ADC_Init+0x284>)
 8003046:	f7ff ff43 	bl	8002ed0 <LL_ADC_IsEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4619      	mov	r1, r3
 8003056:	485d      	ldr	r0, [pc, #372]	; (80031cc <HAL_ADC_Init+0x288>)
 8003058:	f7ff fde8 	bl	8002c2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	7e5b      	ldrb	r3, [r3, #25]
 8003060:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003066:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800306c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003072:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800307a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d106      	bne.n	8003098 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	3b01      	subs	r3, #1
 8003090:	045b      	lsls	r3, r3, #17
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	4b45      	ldr	r3, [pc, #276]	; (80031d0 <HAL_ADC_Init+0x28c>)
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff12 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 80030d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff1f 	bl	8002f1c <LL_ADC_INJ_IsConversionOngoing>
 80030de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d13d      	bne.n	8003162 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d13a      	bne.n	8003162 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003108:	f023 0302 	bic.w	r3, r3, #2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	430b      	orrs	r3, r1
 8003114:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800311c:	2b01      	cmp	r3, #1
 800311e:	d118      	bne.n	8003152 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800312a:	f023 0304 	bic.w	r3, r3, #4
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003142:	430a      	orrs	r2, r1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	611a      	str	r2, [r3, #16]
 8003150:	e007      	b.n	8003162 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10c      	bne.n	8003184 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f023 010f 	bic.w	r1, r3, #15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	1e5a      	subs	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
 8003182:	e007      	b.n	8003194 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 020f 	bic.w	r2, r2, #15
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	f023 0303 	bic.w	r3, r3, #3
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
 80031a4:	e007      	b.n	80031b6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f043 0210 	orr.w	r2, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000000 	.word	0x20000000
 80031c4:	053e2d63 	.word	0x053e2d63
 80031c8:	50040000 	.word	0x50040000
 80031cc:	50040300 	.word	0x50040300
 80031d0:	fff0c007 	.word	0xfff0c007

080031d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b0b6      	sub	sp, #216	; 0xd8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x22>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e3b9      	b.n	800396a <HAL_ADC_ConfigChannel+0x796>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fe77 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 839e 	bne.w	800394c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b05      	cmp	r3, #5
 8003216:	d824      	bhi.n	8003262 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	3b02      	subs	r3, #2
 800321e:	2b03      	cmp	r3, #3
 8003220:	d81b      	bhi.n	800325a <HAL_ADC_ConfigChannel+0x86>
 8003222:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <HAL_ADC_ConfigChannel+0x54>)
 8003224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003228:	08003239 	.word	0x08003239
 800322c:	08003241 	.word	0x08003241
 8003230:	08003249 	.word	0x08003249
 8003234:	08003251 	.word	0x08003251
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	220c      	movs	r2, #12
 800323c:	605a      	str	r2, [r3, #4]
          break;
 800323e:	e011      	b.n	8003264 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2212      	movs	r2, #18
 8003244:	605a      	str	r2, [r3, #4]
          break;
 8003246:	e00d      	b.n	8003264 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2218      	movs	r2, #24
 800324c:	605a      	str	r2, [r3, #4]
          break;
 800324e:	e009      	b.n	8003264 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003256:	605a      	str	r2, [r3, #4]
          break;
 8003258:	e004      	b.n	8003264 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2206      	movs	r2, #6
 800325e:	605a      	str	r2, [r3, #4]
          break;
 8003260:	e000      	b.n	8003264 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003262:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	f7ff fd64 	bl	8002d3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fe3b 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 8003280:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fe47 	bl	8002f1c <LL_ADC_INJ_IsConversionOngoing>
 800328e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003292:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 81a6 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800329c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f040 81a1 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f7ff fd6f 	bl	8002d96 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	08db      	lsrs	r3, r3, #3
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d00a      	beq.n	80032f0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6919      	ldr	r1, [r3, #16]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ea:	f7ff fcd3 	bl	8002c94 <LL_ADC_SetOffset>
 80032ee:	e17b      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fcf0 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <HAL_ADC_ConfigChannel+0x148>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fce5 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003312:	4603      	mov	r3, r0
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	f003 021f 	and.w	r2, r3, #31
 800331a:	e01e      	b.n	800335a <HAL_ADC_ConfigChannel+0x186>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fcda 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800333a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800333e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800334a:	2320      	movs	r3, #32
 800334c:	e004      	b.n	8003358 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800334e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003362:	2b00      	cmp	r3, #0
 8003364:	d105      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x19e>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	e018      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x1d0>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800338a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800338e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e004      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800339a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d106      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fca9 	bl	8002d08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2101      	movs	r1, #1
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fc8d 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x20e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fc82 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 80033d8:	4603      	mov	r3, r0
 80033da:	0e9b      	lsrs	r3, r3, #26
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	e01e      	b.n	8003420 <HAL_ADC_ConfigChannel+0x24c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fc77 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003400:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003410:	2320      	movs	r3, #32
 8003412:	e004      	b.n	800341e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x264>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	e018      	b.n	800346a <HAL_ADC_ConfigChannel+0x296>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800344c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800345c:	2320      	movs	r3, #32
 800345e:	e004      	b.n	800346a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800346a:	429a      	cmp	r2, r3
 800346c:	d106      	bne.n	800347c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	2101      	movs	r1, #1
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fc46 	bl	8002d08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2102      	movs	r1, #2
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fc2a 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003488:	4603      	mov	r3, r0
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x2d4>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2102      	movs	r1, #2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fc1f 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 800349e:	4603      	mov	r3, r0
 80034a0:	0e9b      	lsrs	r3, r3, #26
 80034a2:	f003 021f 	and.w	r2, r3, #31
 80034a6:	e01e      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x312>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2102      	movs	r1, #2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fc14 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80034c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80034ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80034d6:	2320      	movs	r3, #32
 80034d8:	e004      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80034da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x32a>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	e016      	b.n	800352c <HAL_ADC_ConfigChannel+0x358>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003510:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800351e:	2320      	movs	r3, #32
 8003520:	e004      	b.n	800352c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800352c:	429a      	cmp	r2, r3
 800352e:	d106      	bne.n	800353e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	2102      	movs	r1, #2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fbe5 	bl	8002d08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2103      	movs	r1, #3
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fbc9 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 800354a:	4603      	mov	r3, r0
 800354c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <HAL_ADC_ConfigChannel+0x396>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2103      	movs	r1, #3
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fbbe 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	e017      	b.n	800359a <HAL_ADC_ConfigChannel+0x3c6>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2103      	movs	r1, #3
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fbb3 	bl	8002cdc <LL_ADC_GetOffsetChannel>
 8003576:	4603      	mov	r3, r0
 8003578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003584:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d105      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x3de>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	e011      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x402>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80035c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80035c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80035ca:	2320      	movs	r3, #32
 80035cc:	e003      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80035ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d106      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	2103      	movs	r1, #3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fb90 	bl	8002d08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fc6f 	bl	8002ed0 <LL_ADC_IsEnabled>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 813f 	bne.w	8003878 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	461a      	mov	r2, r3
 8003608:	f7ff fbf0 	bl	8002dec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a8e      	ldr	r2, [pc, #568]	; (800384c <HAL_ADC_ConfigChannel+0x678>)
 8003612:	4293      	cmp	r3, r2
 8003614:	f040 8130 	bne.w	8003878 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x46c>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	3301      	adds	r3, #1
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2b09      	cmp	r3, #9
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e019      	b.n	8003674 <HAL_ADC_ConfigChannel+0x4a0>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800364e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003650:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003658:	2320      	movs	r3, #32
 800365a:	e003      	b.n	8003664 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800365c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2b09      	cmp	r3, #9
 800366c:	bf94      	ite	ls
 800366e:	2301      	movls	r3, #1
 8003670:	2300      	movhi	r3, #0
 8003672:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003674:	2b00      	cmp	r3, #0
 8003676:	d079      	beq.n	800376c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x4c0>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	069b      	lsls	r3, r3, #26
 800368e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003692:	e015      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x4ec>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80036a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80036ac:	2320      	movs	r3, #32
 80036ae:	e003      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80036b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	069b      	lsls	r3, r3, #26
 80036bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x50c>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0e9b      	lsrs	r3, r3, #26
 80036d2:	3301      	adds	r3, #1
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	e017      	b.n	8003710 <HAL_ADC_ConfigChannel+0x53c>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80036ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80036f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80036f8:	2320      	movs	r3, #32
 80036fa:	e003      	b.n	8003704 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80036fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	ea42 0103 	orr.w	r1, r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x562>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	3301      	adds	r3, #1
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	051b      	lsls	r3, r3, #20
 8003734:	e018      	b.n	8003768 <HAL_ADC_ConfigChannel+0x594>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e003      	b.n	800375a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f003 021f 	and.w	r2, r3, #31
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003768:	430b      	orrs	r3, r1
 800376a:	e080      	b.n	800386e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x5b4>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	3301      	adds	r3, #1
 8003780:	069b      	lsls	r3, r3, #26
 8003782:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003786:	e015      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x5e0>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80037a0:	2320      	movs	r3, #32
 80037a2:	e003      	b.n	80037ac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	069b      	lsls	r3, r3, #26
 80037b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x600>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	3301      	adds	r3, #1
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2101      	movs	r1, #1
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	e017      	b.n	8003804 <HAL_ADC_ConfigChannel+0x630>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	61fb      	str	r3, [r7, #28]
  return result;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e003      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2101      	movs	r1, #1
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	ea42 0103 	orr.w	r1, r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x65c>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	3301      	adds	r3, #1
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	3b1e      	subs	r3, #30
 8003828:	051b      	lsls	r3, r3, #20
 800382a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800382e:	e01d      	b.n	800386c <HAL_ADC_ConfigChannel+0x698>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	613b      	str	r3, [r7, #16]
  return result;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003848:	2320      	movs	r3, #32
 800384a:	e005      	b.n	8003858 <HAL_ADC_ConfigChannel+0x684>
 800384c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	3301      	adds	r3, #1
 800385a:	f003 021f 	and.w	r2, r3, #31
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	3b1e      	subs	r3, #30
 8003866:	051b      	lsls	r3, r3, #20
 8003868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386c:	430b      	orrs	r3, r1
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	6892      	ldr	r2, [r2, #8]
 8003872:	4619      	mov	r1, r3
 8003874:	f7ff fa8f 	bl	8002d96 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_ADC_ConfigChannel+0x7a0>)
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d06c      	beq.n	800395e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003884:	483c      	ldr	r0, [pc, #240]	; (8003978 <HAL_ADC_ConfigChannel+0x7a4>)
 8003886:	f7ff f9f7 	bl	8002c78 <LL_ADC_GetCommonPathInternalCh>
 800388a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a3a      	ldr	r2, [pc, #232]	; (800397c <HAL_ADC_ConfigChannel+0x7a8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d127      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800389c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d121      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a35      	ldr	r2, [pc, #212]	; (8003980 <HAL_ADC_ConfigChannel+0x7ac>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d157      	bne.n	800395e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038b6:	4619      	mov	r1, r3
 80038b8:	482f      	ldr	r0, [pc, #188]	; (8003978 <HAL_ADC_ConfigChannel+0x7a4>)
 80038ba:	f7ff f9ca 	bl	8002c52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_ADC_ConfigChannel+0x7b0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <HAL_ADC_ConfigChannel+0x7b4>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038d8:	e002      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3b01      	subs	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f9      	bne.n	80038da <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e6:	e03a      	b.n	800395e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <HAL_ADC_ConfigChannel+0x7b8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d113      	bne.n	800391a <HAL_ADC_ConfigChannel+0x746>
 80038f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10d      	bne.n	800391a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <HAL_ADC_ConfigChannel+0x7ac>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d12a      	bne.n	800395e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800390c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003910:	4619      	mov	r1, r3
 8003912:	4819      	ldr	r0, [pc, #100]	; (8003978 <HAL_ADC_ConfigChannel+0x7a4>)
 8003914:	f7ff f99d 	bl	8002c52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003918:	e021      	b.n	800395e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <HAL_ADC_ConfigChannel+0x7bc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d11c      	bne.n	800395e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d116      	bne.n	800395e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a12      	ldr	r2, [pc, #72]	; (8003980 <HAL_ADC_ConfigChannel+0x7ac>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d111      	bne.n	800395e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800393a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800393e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003942:	4619      	mov	r1, r3
 8003944:	480c      	ldr	r0, [pc, #48]	; (8003978 <HAL_ADC_ConfigChannel+0x7a4>)
 8003946:	f7ff f984 	bl	8002c52 <LL_ADC_SetCommonPathInternalCh>
 800394a:	e008      	b.n	800395e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003966:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800396a:	4618      	mov	r0, r3
 800396c:	37d8      	adds	r7, #216	; 0xd8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	80080000 	.word	0x80080000
 8003978:	50040300 	.word	0x50040300
 800397c:	c7520000 	.word	0xc7520000
 8003980:	50040000 	.word	0x50040000
 8003984:	20000000 	.word	0x20000000
 8003988:	053e2d63 	.word	0x053e2d63
 800398c:	cb840000 	.word	0xcb840000
 8003990:	80000001 	.word	0x80000001

08003994 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0ed      	b.n	8003b82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe fd68 	bl	8002488 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0202 	bic.w	r2, r2, #2
 80039c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c8:	f7ff f924 	bl	8002c14 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039ce:	e012      	b.n	80039f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039d0:	f7ff f920 	bl	8002c14 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b0a      	cmp	r3, #10
 80039dc:	d90b      	bls.n	80039f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2205      	movs	r2, #5
 80039ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0c5      	b.n	8003b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e5      	bne.n	80039d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a14:	f7ff f8fe 	bl	8002c14 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a1a:	e012      	b.n	8003a42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a1c:	f7ff f8fa 	bl	8002c14 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b0a      	cmp	r3, #10
 8003a28:	d90b      	bls.n	8003a42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2205      	movs	r2, #5
 8003a3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e09f      	b.n	8003b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0e5      	beq.n	8003a1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7e1b      	ldrb	r3, [r3, #24]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d108      	bne.n	8003a6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e007      	b.n	8003a7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7e5b      	ldrb	r3, [r3, #25]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d108      	bne.n	8003a94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e007      	b.n	8003aa4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7e9b      	ldrb	r3, [r3, #26]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d108      	bne.n	8003abe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0220 	orr.w	r2, r2, #32
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e007      	b.n	8003ace <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0220 	bic.w	r2, r2, #32
 8003acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	7edb      	ldrb	r3, [r3, #27]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d108      	bne.n	8003ae8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0210 	bic.w	r2, r2, #16
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e007      	b.n	8003af8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0210 	orr.w	r2, r2, #16
 8003af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7f1b      	ldrb	r3, [r3, #28]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d108      	bne.n	8003b12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0208 	orr.w	r2, r2, #8
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e007      	b.n	8003b22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0208 	bic.w	r2, r2, #8
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	7f5b      	ldrb	r3, [r3, #29]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d108      	bne.n	8003b3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0204 	orr.w	r2, r2, #4
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e007      	b.n	8003b4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0204 	bic.w	r2, r2, #4
 8003b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	ea42 0103 	orr.w	r1, r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	1e5a      	subs	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b08a      	sub	sp, #40	; 0x28
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d07c      	beq.n	8003cca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d023      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2201      	movs	r2, #1
 8003be0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f983 	bl	8003ef8 <HAL_CAN_TxMailbox0CompleteCallback>
 8003bf2:	e016      	b.n	8003c22 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	e00c      	b.n	8003c22 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	e002      	b.n	8003c22 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f989 	bl	8003f34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d024      	beq.n	8003c76 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f963 	bl	8003f0c <HAL_CAN_TxMailbox1CompleteCallback>
 8003c46:	e016      	b.n	8003c76 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	e00c      	b.n	8003c76 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	e002      	b.n	8003c76 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f969 	bl	8003f48 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d024      	beq.n	8003cca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f943 	bl	8003f20 <HAL_CAN_TxMailbox2CompleteCallback>
 8003c9a:	e016      	b.n	8003cca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e00c      	b.n	8003cca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	e002      	b.n	8003cca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f949 	bl	8003f5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00c      	beq.n	8003cee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2210      	movs	r2, #16
 8003cec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2208      	movs	r2, #8
 8003d08:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f93a 	bl	8003f84 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f921 	bl	8003f70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00c      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f91c 	bl	8003fac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f903 	bl	8003f98 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d006      	beq.n	8003db4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2210      	movs	r2, #16
 8003dac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f906 	bl	8003fc0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d006      	beq.n	8003dd6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f8ff 	bl	8003fd4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d07b      	beq.n	8003ed8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d072      	beq.n	8003ed0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d043      	beq.n	8003ed0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d03e      	beq.n	8003ed0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d02b      	beq.n	8003eb4 <HAL_CAN_IRQHandler+0x32a>
 8003e5c:	2b60      	cmp	r3, #96	; 0x60
 8003e5e:	d82e      	bhi.n	8003ebe <HAL_CAN_IRQHandler+0x334>
 8003e60:	2b50      	cmp	r3, #80	; 0x50
 8003e62:	d022      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x320>
 8003e64:	2b50      	cmp	r3, #80	; 0x50
 8003e66:	d82a      	bhi.n	8003ebe <HAL_CAN_IRQHandler+0x334>
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d019      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x316>
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d826      	bhi.n	8003ebe <HAL_CAN_IRQHandler+0x334>
 8003e70:	2b30      	cmp	r3, #48	; 0x30
 8003e72:	d010      	beq.n	8003e96 <HAL_CAN_IRQHandler+0x30c>
 8003e74:	2b30      	cmp	r3, #48	; 0x30
 8003e76:	d822      	bhi.n	8003ebe <HAL_CAN_IRQHandler+0x334>
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d002      	beq.n	8003e82 <HAL_CAN_IRQHandler+0x2f8>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d005      	beq.n	8003e8c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003e80:	e01d      	b.n	8003ebe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e8a:	e019      	b.n	8003ec0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f043 0310 	orr.w	r3, r3, #16
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e94:	e014      	b.n	8003ec0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	f043 0320 	orr.w	r3, r3, #32
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e9e:	e00f      	b.n	8003ec0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ea8:	e00a      	b.n	8003ec0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eb2:	e005      	b.n	8003ec0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ebe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ece:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f87c 	bl	8003fe8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	3728      	adds	r7, #40	; 0x28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004018:	4013      	ands	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402e:	4a04      	ldr	r2, [pc, #16]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60d3      	str	r3, [r2, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <__NVIC_GetPriorityGrouping+0x18>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 0307 	and.w	r3, r3, #7
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	db0b      	blt.n	800408a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4907      	ldr	r1, [pc, #28]	; (8004098 <__NVIC_EnableIRQ+0x38>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2001      	movs	r0, #1
 8004082:	fa00 f202 	lsl.w	r2, r0, r2
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	e000e100 	.word	0xe000e100

0800409c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	db0a      	blt.n	80040c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	490c      	ldr	r1, [pc, #48]	; (80040e8 <__NVIC_SetPriority+0x4c>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	0112      	lsls	r2, r2, #4
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	440b      	add	r3, r1
 80040c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c4:	e00a      	b.n	80040dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4908      	ldr	r1, [pc, #32]	; (80040ec <__NVIC_SetPriority+0x50>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	3b04      	subs	r3, #4
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	440b      	add	r3, r1
 80040da:	761a      	strb	r2, [r3, #24]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000e100 	.word	0xe000e100
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f1c3 0307 	rsb	r3, r3, #7
 800410a:	2b04      	cmp	r3, #4
 800410c:	bf28      	it	cs
 800410e:	2304      	movcs	r3, #4
 8004110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3304      	adds	r3, #4
 8004116:	2b06      	cmp	r3, #6
 8004118:	d902      	bls.n	8004120 <NVIC_EncodePriority+0x30>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3b03      	subs	r3, #3
 800411e:	e000      	b.n	8004122 <NVIC_EncodePriority+0x32>
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004124:	f04f 32ff 	mov.w	r2, #4294967295
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	401a      	ands	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004138:	f04f 31ff 	mov.w	r1, #4294967295
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	43d9      	mvns	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004148:	4313      	orrs	r3, r2
         );
}
 800414a:	4618      	mov	r0, r3
 800414c:	3724      	adds	r7, #36	; 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ff4c 	bl	8003ffc <__NVIC_SetPriorityGrouping>
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800417e:	f7ff ff61 	bl	8004044 <__NVIC_GetPriorityGrouping>
 8004182:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	6978      	ldr	r0, [r7, #20]
 800418a:	f7ff ffb1 	bl	80040f0 <NVIC_EncodePriority>
 800418e:	4602      	mov	r2, r0
 8004190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff ff80 	bl	800409c <__NVIC_SetPriority>
}
 800419c:	bf00      	nop
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ff54 	bl	8004060 <__NVIC_EnableIRQ>
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e098      	b.n	8004304 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b4d      	ldr	r3, [pc, #308]	; (8004310 <HAL_DMA_Init+0x150>)
 80041da:	429a      	cmp	r2, r3
 80041dc:	d80f      	bhi.n	80041fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b4b      	ldr	r3, [pc, #300]	; (8004314 <HAL_DMA_Init+0x154>)
 80041e6:	4413      	add	r3, r2
 80041e8:	4a4b      	ldr	r2, [pc, #300]	; (8004318 <HAL_DMA_Init+0x158>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	009a      	lsls	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a48      	ldr	r2, [pc, #288]	; (800431c <HAL_DMA_Init+0x15c>)
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
 80041fc:	e00e      	b.n	800421c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	4b46      	ldr	r3, [pc, #280]	; (8004320 <HAL_DMA_Init+0x160>)
 8004206:	4413      	add	r3, r2
 8004208:	4a43      	ldr	r2, [pc, #268]	; (8004318 <HAL_DMA_Init+0x158>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	009a      	lsls	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a42      	ldr	r2, [pc, #264]	; (8004324 <HAL_DMA_Init+0x164>)
 800421a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004276:	d039      	beq.n	80042ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	4a27      	ldr	r2, [pc, #156]	; (800431c <HAL_DMA_Init+0x15c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d11a      	bne.n	80042b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004282:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_DMA_Init+0x168>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f003 031c 	and.w	r3, r3, #28
 800428e:	210f      	movs	r1, #15
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	4924      	ldr	r1, [pc, #144]	; (8004328 <HAL_DMA_Init+0x168>)
 8004298:	4013      	ands	r3, r2
 800429a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800429c:	4b22      	ldr	r3, [pc, #136]	; (8004328 <HAL_DMA_Init+0x168>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6859      	ldr	r1, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	f003 031c 	and.w	r3, r3, #28
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	491d      	ldr	r1, [pc, #116]	; (8004328 <HAL_DMA_Init+0x168>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]
 80042b6:	e019      	b.n	80042ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042b8:	4b1c      	ldr	r3, [pc, #112]	; (800432c <HAL_DMA_Init+0x16c>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	f003 031c 	and.w	r3, r3, #28
 80042c4:	210f      	movs	r1, #15
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	4917      	ldr	r1, [pc, #92]	; (800432c <HAL_DMA_Init+0x16c>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <HAL_DMA_Init+0x16c>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f003 031c 	and.w	r3, r3, #28
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	4911      	ldr	r1, [pc, #68]	; (800432c <HAL_DMA_Init+0x16c>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40020407 	.word	0x40020407
 8004314:	bffdfff8 	.word	0xbffdfff8
 8004318:	cccccccd 	.word	0xcccccccd
 800431c:	40020000 	.word	0x40020000
 8004320:	bffdfbf8 	.word	0xbffdfbf8
 8004324:	40020400 	.word	0x40020400
 8004328:	400200a8 	.word	0x400200a8
 800432c:	400204a8 	.word	0x400204a8

08004330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	f003 031c 	and.w	r3, r3, #28
 8004350:	2204      	movs	r2, #4
 8004352:	409a      	lsls	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d026      	beq.n	80043aa <HAL_DMA_IRQHandler+0x7a>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d021      	beq.n	80043aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d107      	bne.n	8004384 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0204 	bic.w	r2, r2, #4
 8004382:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	f003 021c 	and.w	r2, r3, #28
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2104      	movs	r1, #4
 8004392:	fa01 f202 	lsl.w	r2, r1, r2
 8004396:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	2b00      	cmp	r3, #0
 800439e:	d071      	beq.n	8004484 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80043a8:	e06c      	b.n	8004484 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f003 031c 	and.w	r3, r3, #28
 80043b2:	2202      	movs	r2, #2
 80043b4:	409a      	lsls	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02e      	beq.n	800441c <HAL_DMA_IRQHandler+0xec>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d029      	beq.n	800441c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 020a 	bic.w	r2, r2, #10
 80043e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f003 021c 	and.w	r2, r3, #28
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2102      	movs	r1, #2
 80043fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004400:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d038      	beq.n	8004484 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800441a:	e033      	b.n	8004484 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	f003 031c 	and.w	r3, r3, #28
 8004424:	2208      	movs	r2, #8
 8004426:	409a      	lsls	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d02a      	beq.n	8004486 <HAL_DMA_IRQHandler+0x156>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d025      	beq.n	8004486 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 020e 	bic.w	r2, r2, #14
 8004448:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	f003 021c 	and.w	r2, r3, #28
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2101      	movs	r1, #1
 8004458:	fa01 f202 	lsl.w	r2, r1, r2
 800445c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	2b00      	cmp	r3, #0
 800447a:	d004      	beq.n	8004486 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004484:	bf00      	nop
 8004486:	bf00      	nop
}
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800449e:	e148      	b.n	8004732 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	4013      	ands	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 813a 	beq.w	800472c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d00b      	beq.n	80044d8 <HAL_GPIO_Init+0x48>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d007      	beq.n	80044d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044cc:	2b11      	cmp	r3, #17
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b12      	cmp	r3, #18
 80044d6:	d130      	bne.n	800453a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	2203      	movs	r2, #3
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800450e:	2201      	movs	r2, #1
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 0201 	and.w	r2, r3, #1
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	2203      	movs	r2, #3
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0xea>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b12      	cmp	r3, #18
 8004578:	d123      	bne.n	80045c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	08da      	lsrs	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3208      	adds	r2, #8
 8004582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	220f      	movs	r2, #15
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4013      	ands	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	08da      	lsrs	r2, r3, #3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3208      	adds	r2, #8
 80045bc:	6939      	ldr	r1, [r7, #16]
 80045be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	2203      	movs	r2, #3
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4013      	ands	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 0203 	and.w	r2, r3, #3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8094 	beq.w	800472c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004604:	4b52      	ldr	r3, [pc, #328]	; (8004750 <HAL_GPIO_Init+0x2c0>)
 8004606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004608:	4a51      	ldr	r2, [pc, #324]	; (8004750 <HAL_GPIO_Init+0x2c0>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6613      	str	r3, [r2, #96]	; 0x60
 8004610:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <HAL_GPIO_Init+0x2c0>)
 8004612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800461c:	4a4d      	ldr	r2, [pc, #308]	; (8004754 <HAL_GPIO_Init+0x2c4>)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	3302      	adds	r3, #2
 8004624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	220f      	movs	r2, #15
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4013      	ands	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004646:	d00d      	beq.n	8004664 <HAL_GPIO_Init+0x1d4>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a43      	ldr	r2, [pc, #268]	; (8004758 <HAL_GPIO_Init+0x2c8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <HAL_GPIO_Init+0x1d0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a42      	ldr	r2, [pc, #264]	; (800475c <HAL_GPIO_Init+0x2cc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_GPIO_Init+0x1cc>
 8004658:	2302      	movs	r3, #2
 800465a:	e004      	b.n	8004666 <HAL_GPIO_Init+0x1d6>
 800465c:	2307      	movs	r3, #7
 800465e:	e002      	b.n	8004666 <HAL_GPIO_Init+0x1d6>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_GPIO_Init+0x1d6>
 8004664:	2300      	movs	r3, #0
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	f002 0203 	and.w	r2, r2, #3
 800466c:	0092      	lsls	r2, r2, #2
 800466e:	4093      	lsls	r3, r2
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004676:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_GPIO_Init+0x2c4>)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	089b      	lsrs	r3, r3, #2
 800467c:	3302      	adds	r3, #2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004684:	4b36      	ldr	r3, [pc, #216]	; (8004760 <HAL_GPIO_Init+0x2d0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	43db      	mvns	r3, r3
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4013      	ands	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046a8:	4a2d      	ldr	r2, [pc, #180]	; (8004760 <HAL_GPIO_Init+0x2d0>)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80046ae:	4b2c      	ldr	r3, [pc, #176]	; (8004760 <HAL_GPIO_Init+0x2d0>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	43db      	mvns	r3, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d2:	4a23      	ldr	r2, [pc, #140]	; (8004760 <HAL_GPIO_Init+0x2d0>)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046d8:	4b21      	ldr	r3, [pc, #132]	; (8004760 <HAL_GPIO_Init+0x2d0>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	43db      	mvns	r3, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046fc:	4a18      	ldr	r2, [pc, #96]	; (8004760 <HAL_GPIO_Init+0x2d0>)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <HAL_GPIO_Init+0x2d0>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	43db      	mvns	r3, r3
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4013      	ands	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004726:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <HAL_GPIO_Init+0x2d0>)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	3301      	adds	r3, #1
 8004730:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	f47f aeaf 	bne.w	80044a0 <HAL_GPIO_Init+0x10>
  }
}
 8004742:	bf00      	nop
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	40021000 	.word	0x40021000
 8004754:	40010000 	.word	0x40010000
 8004758:	48000400 	.word	0x48000400
 800475c:	48000800 	.word	0x48000800
 8004760:	40010400 	.word	0x40010400

08004764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e081      	b.n	800487a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd fed0 	bl	8002530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2224      	movs	r2, #36	; 0x24
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d107      	bne.n	80047de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	e006      	b.n	80047ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d104      	bne.n	80047fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800480c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	ea42 0103 	orr.w	r1, r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	021a      	lsls	r2, r3, #8
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69d9      	ldr	r1, [r3, #28]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	461a      	mov	r2, r3
 8004890:	460b      	mov	r3, r1
 8004892:	817b      	strh	r3, [r7, #10]
 8004894:	4613      	mov	r3, r2
 8004896:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	f040 80da 	bne.w	8004a5a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_I2C_Master_Transmit+0x30>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e0d3      	b.n	8004a5c <HAL_I2C_Master_Transmit+0x1d8>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048bc:	f7fe f9aa 	bl	8002c14 <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2319      	movs	r3, #25
 80048c8:	2201      	movs	r2, #1
 80048ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 faed 	bl	8004eae <I2C_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0be      	b.n	8004a5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2221      	movs	r2, #33	; 0x21
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2210      	movs	r2, #16
 80048ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	893a      	ldrh	r2, [r7, #8]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	2bff      	cmp	r3, #255	; 0xff
 800490e:	d90e      	bls.n	800492e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	22ff      	movs	r2, #255	; 0xff
 8004914:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	b2da      	uxtb	r2, r3
 800491c:	8979      	ldrh	r1, [r7, #10]
 800491e:	4b51      	ldr	r3, [pc, #324]	; (8004a64 <HAL_I2C_Master_Transmit+0x1e0>)
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fc50 	bl	80051cc <I2C_TransferConfig>
 800492c:	e06c      	b.n	8004a08 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	b2da      	uxtb	r2, r3
 800493e:	8979      	ldrh	r1, [r7, #10]
 8004940:	4b48      	ldr	r3, [pc, #288]	; (8004a64 <HAL_I2C_Master_Transmit+0x1e0>)
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fc3f 	bl	80051cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800494e:	e05b      	b.n	8004a08 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	6a39      	ldr	r1, [r7, #32]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 faea 	bl	8004f2e <I2C_WaitOnTXISFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e07b      	b.n	8004a5c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d034      	beq.n	8004a08 <HAL_I2C_Master_Transmit+0x184>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d130      	bne.n	8004a08 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fa7c 	bl	8004eae <I2C_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e04d      	b.n	8004a5c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2bff      	cmp	r3, #255	; 0xff
 80049c8:	d90e      	bls.n	80049e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	22ff      	movs	r2, #255	; 0xff
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	8979      	ldrh	r1, [r7, #10]
 80049d8:	2300      	movs	r3, #0
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fbf3 	bl	80051cc <I2C_TransferConfig>
 80049e6:	e00f      	b.n	8004a08 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	8979      	ldrh	r1, [r7, #10]
 80049fa:	2300      	movs	r3, #0
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fbe2 	bl	80051cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d19e      	bne.n	8004950 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	6a39      	ldr	r1, [r7, #32]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fac9 	bl	8004fae <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e01a      	b.n	8004a5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_I2C_Master_Transmit+0x1e4>)
 8004a3a:	400b      	ands	r3, r1
 8004a3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	80002000 	.word	0x80002000
 8004a68:	fe00e800 	.word	0xfe00e800

08004a6c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	461a      	mov	r2, r3
 8004a78:	460b      	mov	r3, r1
 8004a7a:	817b      	strh	r3, [r7, #10]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	f040 80db 	bne.w	8004c44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_I2C_Master_Receive+0x30>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e0d4      	b.n	8004c46 <HAL_I2C_Master_Receive+0x1da>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aa4:	f7fe f8b6 	bl	8002c14 <HAL_GetTick>
 8004aa8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2319      	movs	r3, #25
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f9f9 	bl	8004eae <I2C_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0bf      	b.n	8004c46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2222      	movs	r2, #34	; 0x22
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	893a      	ldrh	r2, [r7, #8]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2bff      	cmp	r3, #255	; 0xff
 8004af6:	d90e      	bls.n	8004b16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	22ff      	movs	r2, #255	; 0xff
 8004afc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	8979      	ldrh	r1, [r7, #10]
 8004b06:	4b52      	ldr	r3, [pc, #328]	; (8004c50 <HAL_I2C_Master_Receive+0x1e4>)
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fb5c 	bl	80051cc <I2C_TransferConfig>
 8004b14:	e06d      	b.n	8004bf2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	8979      	ldrh	r1, [r7, #10]
 8004b28:	4b49      	ldr	r3, [pc, #292]	; (8004c50 <HAL_I2C_Master_Receive+0x1e4>)
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fb4b 	bl	80051cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004b36:	e05c      	b.n	8004bf2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	6a39      	ldr	r1, [r7, #32]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fa73 	bl	8005028 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e07c      	b.n	8004c46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d034      	beq.n	8004bf2 <HAL_I2C_Master_Receive+0x186>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d130      	bne.n	8004bf2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2200      	movs	r2, #0
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f987 	bl	8004eae <I2C_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e04d      	b.n	8004c46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2bff      	cmp	r3, #255	; 0xff
 8004bb2:	d90e      	bls.n	8004bd2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	22ff      	movs	r2, #255	; 0xff
 8004bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	8979      	ldrh	r1, [r7, #10]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fafe 	bl	80051cc <I2C_TransferConfig>
 8004bd0:	e00f      	b.n	8004bf2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	8979      	ldrh	r1, [r7, #10]
 8004be4:	2300      	movs	r3, #0
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 faed 	bl	80051cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d19d      	bne.n	8004b38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	6a39      	ldr	r1, [r7, #32]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f9d4 	bl	8004fae <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e01a      	b.n	8004c46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2220      	movs	r2, #32
 8004c16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6859      	ldr	r1, [r3, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <HAL_I2C_Master_Receive+0x1e8>)
 8004c24:	400b      	ands	r3, r1
 8004c26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	80002400 	.word	0x80002400
 8004c54:	fe00e800 	.word	0xfe00e800

08004c58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	; 0x28
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	460b      	mov	r3, r1
 8004c66:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	f040 80f1 	bne.w	8004e5c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c88:	d101      	bne.n	8004c8e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0e7      	b.n	8004e5e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_I2C_IsDeviceReady+0x44>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e0e0      	b.n	8004e5e <HAL_I2C_IsDeviceReady+0x206>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2224      	movs	r2, #36	; 0x24
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d107      	bne.n	8004cca <HAL_I2C_IsDeviceReady+0x72>
 8004cba:	897b      	ldrh	r3, [r7, #10]
 8004cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cc8:	e004      	b.n	8004cd4 <HAL_I2C_IsDeviceReady+0x7c>
 8004cca:	897b      	ldrh	r3, [r7, #10]
 8004ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004cda:	f7fd ff9b 	bl	8002c14 <HAL_GetTick>
 8004cde:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d0c:	e034      	b.n	8004d78 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d01a      	beq.n	8004d4c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d16:	f7fd ff7d 	bl	8002c14 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d302      	bcc.n	8004d2c <HAL_I2C_IsDeviceReady+0xd4>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10f      	bne.n	8004d4c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e088      	b.n	8004e5e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <HAL_I2C_IsDeviceReady+0x12c>
 8004d7e:	7fbb      	ldrb	r3, [r7, #30]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0c4      	beq.n	8004d0e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b10      	cmp	r3, #16
 8004d90:	d01a      	beq.n	8004dc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2120      	movs	r1, #32
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f886 	bl	8004eae <I2C_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e058      	b.n	8004e5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2220      	movs	r2, #32
 8004db2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e04a      	b.n	8004e5e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2120      	movs	r1, #32
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f86b 	bl	8004eae <I2C_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e03d      	b.n	8004e5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2210      	movs	r2, #16
 8004de8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2220      	movs	r2, #32
 8004df0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d118      	bne.n	8004e2c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e08:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2120      	movs	r1, #32
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f84a 	bl	8004eae <I2C_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e01c      	b.n	8004e5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	f63f af3b 	bhi.w	8004cb2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e48:	f043 0220 	orr.w	r2, r3, #32
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
  }
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d103      	bne.n	8004e84 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2200      	movs	r2, #0
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d007      	beq.n	8004ea2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	619a      	str	r2, [r3, #24]
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ebe:	e022      	b.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d01e      	beq.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec8:	f7fd fea4 	bl	8002c14 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d113      	bne.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e00f      	b.n	8004f26 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	bf0c      	ite	eq
 8004f16:	2301      	moveq	r3, #1
 8004f18:	2300      	movne	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d0cd      	beq.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f3a:	e02c      	b.n	8004f96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f8dd 	bl	8005100 <I2C_IsAcknowledgeFailed>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e02a      	b.n	8004fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	d01e      	beq.n	8004f96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f58:	f7fd fe5c 	bl	8002c14 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d302      	bcc.n	8004f6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d113      	bne.n	8004f96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e007      	b.n	8004fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d1cb      	bne.n	8004f3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fba:	e028      	b.n	800500e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f89d 	bl	8005100 <I2C_IsAcknowledgeFailed>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e026      	b.n	800501e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd0:	f7fd fe20 	bl	8002c14 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d113      	bne.n	800500e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f043 0220 	orr.w	r2, r3, #32
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e007      	b.n	800501e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b20      	cmp	r3, #32
 800501a:	d1cf      	bne.n	8004fbc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005034:	e055      	b.n	80050e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f860 	bl	8005100 <I2C_IsAcknowledgeFailed>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e053      	b.n	80050f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b20      	cmp	r3, #32
 8005056:	d129      	bne.n	80050ac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d105      	bne.n	8005072 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e03f      	b.n	80050f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2220      	movs	r2, #32
 8005078:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005086:	400b      	ands	r3, r1
 8005088:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e022      	b.n	80050f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ac:	f7fd fdb2 	bl	8002c14 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d302      	bcc.n	80050c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10f      	bne.n	80050e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	f043 0220 	orr.w	r2, r3, #32
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e007      	b.n	80050f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d1a2      	bne.n	8005036 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	fe00e800 	.word	0xfe00e800

08005100 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d151      	bne.n	80051be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800511a:	e022      	b.n	8005162 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d01e      	beq.n	8005162 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005124:	f7fd fd76 	bl	8002c14 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <I2C_IsAcknowledgeFailed+0x3a>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d113      	bne.n	8005162 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e02e      	b.n	80051c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b20      	cmp	r3, #32
 800516e:	d1d5      	bne.n	800511c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2210      	movs	r2, #16
 8005176:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2220      	movs	r2, #32
 800517e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fe70 	bl	8004e66 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8005192:	400b      	ands	r3, r1
 8005194:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	f043 0204 	orr.w	r2, r3, #4
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	fe00e800 	.word	0xfe00e800

080051cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	817b      	strh	r3, [r7, #10]
 80051da:	4613      	mov	r3, r2
 80051dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	0d5b      	lsrs	r3, r3, #21
 80051e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <I2C_TransferConfig+0x58>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	43db      	mvns	r3, r3
 80051f2:	ea02 0103 	and.w	r1, r2, r3
 80051f6:	897b      	ldrh	r3, [r7, #10]
 80051f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051fc:	7a7b      	ldrb	r3, [r7, #9]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	431a      	orrs	r2, r3
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	431a      	orrs	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	03ff63ff 	.word	0x03ff63ff

08005228 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b20      	cmp	r3, #32
 800523c:	d138      	bne.n	80052b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005248:	2302      	movs	r3, #2
 800524a:	e032      	b.n	80052b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2224      	movs	r2, #36	; 0x24
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800527a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6819      	ldr	r1, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d139      	bne.n	8005348 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052de:	2302      	movs	r3, #2
 80052e0:	e033      	b.n	800534a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2224      	movs	r2, #36	; 0x24
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0201 	bic.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005310:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a04      	ldr	r2, [pc, #16]	; (8005374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005366:	6013      	str	r3, [r2, #0]
}
 8005368:	bf00      	nop
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40007000 	.word	0x40007000

08005378 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <HAL_PWREx_GetVoltageRange+0x18>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005384:	4618      	mov	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40007000 	.word	0x40007000

08005394 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a2:	d130      	bne.n	8005406 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053a4:	4b23      	ldr	r3, [pc, #140]	; (8005434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b0:	d038      	beq.n	8005424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053b2:	4b20      	ldr	r3, [pc, #128]	; (8005434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053ba:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2232      	movs	r2, #50	; 0x32
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	0c9b      	lsrs	r3, r3, #18
 80053d4:	3301      	adds	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053d8:	e002      	b.n	80053e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3b01      	subs	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053e0:	4b14      	ldr	r3, [pc, #80]	; (8005434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ec:	d102      	bne.n	80053f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f2      	bne.n	80053da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053f4:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005400:	d110      	bne.n	8005424 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e00f      	b.n	8005426 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800540e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005412:	d007      	beq.n	8005424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005414:	4b07      	ldr	r3, [pc, #28]	; (8005434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800541c:	4a05      	ldr	r2, [pc, #20]	; (8005434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005422:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40007000 	.word	0x40007000
 8005438:	20000000 	.word	0x20000000
 800543c:	431bde83 	.word	0x431bde83

08005440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f000 bc11 	b.w	8005c76 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005454:	4ba0      	ldr	r3, [pc, #640]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 030c 	and.w	r3, r3, #12
 800545c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800545e:	4b9e      	ldr	r3, [pc, #632]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80e4 	beq.w	800563e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <HAL_RCC_OscConfig+0x4c>
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	f040 808b 	bne.w	800559a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b01      	cmp	r3, #1
 8005488:	f040 8087 	bne.w	800559a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800548c:	4b92      	ldr	r3, [pc, #584]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_RCC_OscConfig+0x64>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e3e8      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	4b8b      	ldr	r3, [pc, #556]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <HAL_RCC_OscConfig+0x7e>
 80054b4:	4b88      	ldr	r3, [pc, #544]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054bc:	e005      	b.n	80054ca <HAL_RCC_OscConfig+0x8a>
 80054be:	4b86      	ldr	r3, [pc, #536]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80054c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d223      	bcs.n	8005516 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fdaa 	bl	800602c <RCC_SetFlashLatencyFromMSIRange>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e3c9      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054e2:	4b7d      	ldr	r3, [pc, #500]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a7c      	ldr	r2, [pc, #496]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80054e8:	f043 0308 	orr.w	r3, r3, #8
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	4b7a      	ldr	r3, [pc, #488]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	4977      	ldr	r1, [pc, #476]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005500:	4b75      	ldr	r3, [pc, #468]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	4972      	ldr	r1, [pc, #456]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]
 8005514:	e025      	b.n	8005562 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005516:	4b70      	ldr	r3, [pc, #448]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6f      	ldr	r2, [pc, #444]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 800551c:	f043 0308 	orr.w	r3, r3, #8
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	4b6d      	ldr	r3, [pc, #436]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	496a      	ldr	r1, [pc, #424]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005530:	4313      	orrs	r3, r2
 8005532:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005534:	4b68      	ldr	r3, [pc, #416]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	4965      	ldr	r1, [pc, #404]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005544:	4313      	orrs	r3, r2
 8005546:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fd6a 	bl	800602c <RCC_SetFlashLatencyFromMSIRange>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e389      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005562:	f000 fc6f 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005566:	4602      	mov	r2, r0
 8005568:	4b5b      	ldr	r3, [pc, #364]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	495a      	ldr	r1, [pc, #360]	; (80056dc <HAL_RCC_OscConfig+0x29c>)
 8005574:	5ccb      	ldrb	r3, [r1, r3]
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	fa22 f303 	lsr.w	r3, r2, r3
 800557e:	4a58      	ldr	r2, [pc, #352]	; (80056e0 <HAL_RCC_OscConfig+0x2a0>)
 8005580:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005582:	4b58      	ldr	r3, [pc, #352]	; (80056e4 <HAL_RCC_OscConfig+0x2a4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fd f956 	bl	8002838 <HAL_InitTick>
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d052      	beq.n	800563c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	e36d      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d032      	beq.n	8005608 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055a2:	4b4d      	ldr	r3, [pc, #308]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a4c      	ldr	r2, [pc, #304]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055ae:	f7fd fb31 	bl	8002c14 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055b6:	f7fd fb2d 	bl	8002c14 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e356      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055c8:	4b43      	ldr	r3, [pc, #268]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055d4:	4b40      	ldr	r3, [pc, #256]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a3f      	ldr	r2, [pc, #252]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80055da:	f043 0308 	orr.w	r3, r3, #8
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	4b3d      	ldr	r3, [pc, #244]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	493a      	ldr	r1, [pc, #232]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055f2:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	4935      	ldr	r1, [pc, #212]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005602:	4313      	orrs	r3, r2
 8005604:	604b      	str	r3, [r1, #4]
 8005606:	e01a      	b.n	800563e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005608:	4b33      	ldr	r3, [pc, #204]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a32      	ldr	r2, [pc, #200]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005614:	f7fd fafe 	bl	8002c14 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800561c:	f7fd fafa 	bl	8002c14 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e323      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800562e:	4b2a      	ldr	r3, [pc, #168]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x1dc>
 800563a:	e000      	b.n	800563e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800563c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d073      	beq.n	8005732 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b08      	cmp	r3, #8
 800564e:	d005      	beq.n	800565c <HAL_RCC_OscConfig+0x21c>
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b0c      	cmp	r3, #12
 8005654:	d10e      	bne.n	8005674 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b03      	cmp	r3, #3
 800565a:	d10b      	bne.n	8005674 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565c:	4b1e      	ldr	r3, [pc, #120]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d063      	beq.n	8005730 <HAL_RCC_OscConfig+0x2f0>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d15f      	bne.n	8005730 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e300      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567c:	d106      	bne.n	800568c <HAL_RCC_OscConfig+0x24c>
 800567e:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	e01d      	b.n	80056c8 <HAL_RCC_OscConfig+0x288>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x270>
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a0f      	ldr	r2, [pc, #60]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 800569c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a0c      	ldr	r2, [pc, #48]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0x288>
 80056b0:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80056b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a05      	ldr	r2, [pc, #20]	; (80056d8 <HAL_RCC_OscConfig+0x298>)
 80056c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fd faa0 	bl	8002c14 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056d6:	e010      	b.n	80056fa <HAL_RCC_OscConfig+0x2ba>
 80056d8:	40021000 	.word	0x40021000
 80056dc:	0800d638 	.word	0x0800d638
 80056e0:	20000000 	.word	0x20000000
 80056e4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e8:	f7fd fa94 	bl	8002c14 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	; 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e2bd      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056fa:	4baf      	ldr	r3, [pc, #700]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x2a8>
 8005706:	e014      	b.n	8005732 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005708:	f7fd fa84 	bl	8002c14 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005710:	f7fd fa80 	bl	8002c14 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b64      	cmp	r3, #100	; 0x64
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e2a9      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005722:	4ba5      	ldr	r3, [pc, #660]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_OscConfig+0x2d0>
 800572e:	e000      	b.n	8005732 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d060      	beq.n	8005800 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b04      	cmp	r3, #4
 8005742:	d005      	beq.n	8005750 <HAL_RCC_OscConfig+0x310>
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b0c      	cmp	r3, #12
 8005748:	d119      	bne.n	800577e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d116      	bne.n	800577e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005750:	4b99      	ldr	r3, [pc, #612]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_OscConfig+0x328>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e286      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005768:	4b93      	ldr	r3, [pc, #588]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	061b      	lsls	r3, r3, #24
 8005776:	4990      	ldr	r1, [pc, #576]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005778:	4313      	orrs	r3, r2
 800577a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800577c:	e040      	b.n	8005800 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d023      	beq.n	80057ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005786:	4b8c      	ldr	r3, [pc, #560]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a8b      	ldr	r2, [pc, #556]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 800578c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005792:	f7fd fa3f 	bl	8002c14 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800579a:	f7fd fa3b 	bl	8002c14 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e264      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057ac:	4b82      	ldr	r3, [pc, #520]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b8:	4b7f      	ldr	r3, [pc, #508]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	061b      	lsls	r3, r3, #24
 80057c6:	497c      	ldr	r1, [pc, #496]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	604b      	str	r3, [r1, #4]
 80057cc:	e018      	b.n	8005800 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ce:	4b7a      	ldr	r3, [pc, #488]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a79      	ldr	r2, [pc, #484]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80057d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fd fa1b 	bl	8002c14 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e2:	f7fd fa17 	bl	8002c14 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e240      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057f4:	4b70      	ldr	r3, [pc, #448]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d03c      	beq.n	8005886 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01c      	beq.n	800584e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005814:	4b68      	ldr	r3, [pc, #416]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581a:	4a67      	ldr	r2, [pc, #412]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fd f9f6 	bl	8002c14 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582c:	f7fd f9f2 	bl	8002c14 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e21b      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800583e:	4b5e      	ldr	r3, [pc, #376]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0ef      	beq.n	800582c <HAL_RCC_OscConfig+0x3ec>
 800584c:	e01b      	b.n	8005886 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800584e:	4b5a      	ldr	r3, [pc, #360]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005854:	4a58      	ldr	r2, [pc, #352]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005856:	f023 0301 	bic.w	r3, r3, #1
 800585a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585e:	f7fd f9d9 	bl	8002c14 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005866:	f7fd f9d5 	bl	8002c14 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e1fe      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005878:	4b4f      	ldr	r3, [pc, #316]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 800587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1ef      	bne.n	8005866 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80a6 	beq.w	80059e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005894:	2300      	movs	r3, #0
 8005896:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005898:	4b47      	ldr	r3, [pc, #284]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 800589a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10d      	bne.n	80058c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a4:	4b44      	ldr	r3, [pc, #272]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	4a43      	ldr	r2, [pc, #268]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80058aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ae:	6593      	str	r3, [r2, #88]	; 0x58
 80058b0:	4b41      	ldr	r3, [pc, #260]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058bc:	2301      	movs	r3, #1
 80058be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c0:	4b3e      	ldr	r3, [pc, #248]	; (80059bc <HAL_RCC_OscConfig+0x57c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d118      	bne.n	80058fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058cc:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <HAL_RCC_OscConfig+0x57c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a3a      	ldr	r2, [pc, #232]	; (80059bc <HAL_RCC_OscConfig+0x57c>)
 80058d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d8:	f7fd f99c 	bl	8002c14 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e0:	f7fd f998 	bl	8002c14 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e1c1      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f2:	4b32      	ldr	r3, [pc, #200]	; (80059bc <HAL_RCC_OscConfig+0x57c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d108      	bne.n	8005918 <HAL_RCC_OscConfig+0x4d8>
 8005906:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590c:	4a2a      	ldr	r2, [pc, #168]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005916:	e024      	b.n	8005962 <HAL_RCC_OscConfig+0x522>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b05      	cmp	r3, #5
 800591e:	d110      	bne.n	8005942 <HAL_RCC_OscConfig+0x502>
 8005920:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	4a24      	ldr	r2, [pc, #144]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005928:	f043 0304 	orr.w	r3, r3, #4
 800592c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005930:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	4a20      	ldr	r2, [pc, #128]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005940:	e00f      	b.n	8005962 <HAL_RCC_OscConfig+0x522>
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	4a1b      	ldr	r2, [pc, #108]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005952:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596a:	f7fd f953 	bl	8002c14 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005970:	e00a      	b.n	8005988 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005972:	f7fd f94f 	bl	8002c14 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e176      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <HAL_RCC_OscConfig+0x578>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0ed      	beq.n	8005972 <HAL_RCC_OscConfig+0x532>
 8005996:	e01a      	b.n	80059ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005998:	f7fd f93c 	bl	8002c14 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800599e:	e00f      	b.n	80059c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a0:	f7fd f938 	bl	8002c14 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d906      	bls.n	80059c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e15f      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059c0:	4baa      	ldr	r3, [pc, #680]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e8      	bne.n	80059a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059ce:	7ffb      	ldrb	r3, [r7, #31]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d105      	bne.n	80059e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d4:	4ba5      	ldr	r3, [pc, #660]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	4aa4      	ldr	r2, [pc, #656]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 80059da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d03c      	beq.n	8005a66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01c      	beq.n	8005a2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059f4:	4b9d      	ldr	r3, [pc, #628]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 80059f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059fa:	4a9c      	ldr	r2, [pc, #624]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fd f906 	bl	8002c14 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a0c:	f7fd f902 	bl	8002c14 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e12b      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a1e:	4b93      	ldr	r3, [pc, #588]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0ef      	beq.n	8005a0c <HAL_RCC_OscConfig+0x5cc>
 8005a2c:	e01b      	b.n	8005a66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a2e:	4b8f      	ldr	r3, [pc, #572]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a34:	4a8d      	ldr	r2, [pc, #564]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3e:	f7fd f8e9 	bl	8002c14 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a46:	f7fd f8e5 	bl	8002c14 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e10e      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a58:	4b84      	ldr	r3, [pc, #528]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1ef      	bne.n	8005a46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 8102 	beq.w	8005c74 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	f040 80c5 	bne.w	8005c04 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a7a:	4b7c      	ldr	r3, [pc, #496]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f003 0203 	and.w	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d12c      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d123      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d11b      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d113      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	3b01      	subs	r3, #1
 8005ace:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d109      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d067      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b0c      	cmp	r3, #12
 8005aec:	d062      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005aee:	4b5f      	ldr	r3, [pc, #380]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e0bb      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005afe:	4b5b      	ldr	r3, [pc, #364]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a5a      	ldr	r2, [pc, #360]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b0a:	f7fd f883 	bl	8002c14 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b12:	f7fd f87f 	bl	8002c14 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e0a8      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b24:	4b51      	ldr	r3, [pc, #324]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f0      	bne.n	8005b12 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b30:	4b4e      	ldr	r3, [pc, #312]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	4b4e      	ldr	r3, [pc, #312]	; (8005c70 <HAL_RCC_OscConfig+0x830>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b40:	3a01      	subs	r2, #1
 8005b42:	0112      	lsls	r2, r2, #4
 8005b44:	4311      	orrs	r1, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b4a:	0212      	lsls	r2, r2, #8
 8005b4c:	4311      	orrs	r1, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b52:	0852      	lsrs	r2, r2, #1
 8005b54:	3a01      	subs	r2, #1
 8005b56:	0552      	lsls	r2, r2, #21
 8005b58:	4311      	orrs	r1, r2
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b5e:	0852      	lsrs	r2, r2, #1
 8005b60:	3a01      	subs	r2, #1
 8005b62:	0652      	lsls	r2, r2, #25
 8005b64:	4311      	orrs	r1, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b6a:	06d2      	lsls	r2, r2, #27
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	493f      	ldr	r1, [pc, #252]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b74:	4b3d      	ldr	r3, [pc, #244]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a3c      	ldr	r2, [pc, #240]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b80:	4b3a      	ldr	r3, [pc, #232]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a39      	ldr	r2, [pc, #228]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b8c:	f7fd f842 	bl	8002c14 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b94:	f7fd f83e 	bl	8002c14 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e067      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ba6:	4b31      	ldr	r3, [pc, #196]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bb2:	e05f      	b.n	8005c74 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e05e      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb8:	4b2c      	ldr	r3, [pc, #176]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d157      	bne.n	8005c74 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bc4:	4b29      	ldr	r3, [pc, #164]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a28      	ldr	r2, [pc, #160]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bd0:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bdc:	f7fd f81a 	bl	8002c14 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be4:	f7fd f816 	bl	8002c14 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e03f      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0x7a4>
 8005c02:	e037      	b.n	8005c74 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b0c      	cmp	r3, #12
 8005c08:	d02d      	beq.n	8005c66 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0a:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c14:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c16:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d105      	bne.n	8005c2e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005c28:	f023 0303 	bic.w	r3, r3, #3
 8005c2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	4a0e      	ldr	r2, [pc, #56]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005c34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3e:	f7fc ffe9 	bl	8002c14 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c46:	f7fc ffe5 	bl	8002c14 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e00e      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c58:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <HAL_RCC_OscConfig+0x82c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f0      	bne.n	8005c46 <HAL_RCC_OscConfig+0x806>
 8005c64:	e006      	b.n	8005c74 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e005      	b.n	8005c76 <HAL_RCC_OscConfig+0x836>
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop

08005c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0c8      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c94:	4b66      	ldr	r3, [pc, #408]	; (8005e30 <HAL_RCC_ClockConfig+0x1b0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d910      	bls.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca2:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <HAL_RCC_ClockConfig+0x1b0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f023 0207 	bic.w	r2, r3, #7
 8005caa:	4961      	ldr	r1, [pc, #388]	; (8005e30 <HAL_RCC_ClockConfig+0x1b0>)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b5f      	ldr	r3, [pc, #380]	; (8005e30 <HAL_RCC_ClockConfig+0x1b0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0b0      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d04c      	beq.n	8005d6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d107      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cd8:	4b56      	ldr	r3, [pc, #344]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d121      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e09e      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d107      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cf0:	4b50      	ldr	r3, [pc, #320]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d115      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e092      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d107      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d08:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e086      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d18:	4b46      	ldr	r3, [pc, #280]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e07e      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d28:	4b42      	ldr	r3, [pc, #264]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f023 0203 	bic.w	r2, r3, #3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	493f      	ldr	r1, [pc, #252]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3a:	f7fc ff6b 	bl	8002c14 <HAL_GetTick>
 8005d3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d40:	e00a      	b.n	8005d58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d42:	f7fc ff67 	bl	8002c14 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e066      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d58:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 020c 	and.w	r2, r3, #12
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d1eb      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d76:	4b2f      	ldr	r3, [pc, #188]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	492c      	ldr	r1, [pc, #176]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4b29      	ldr	r3, [pc, #164]	; (8005e30 <HAL_RCC_ClockConfig+0x1b0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d210      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <HAL_RCC_ClockConfig+0x1b0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 0207 	bic.w	r2, r3, #7
 8005d9e:	4924      	ldr	r1, [pc, #144]	; (8005e30 <HAL_RCC_ClockConfig+0x1b0>)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b22      	ldr	r3, [pc, #136]	; (8005e30 <HAL_RCC_ClockConfig+0x1b0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e036      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc4:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4918      	ldr	r1, [pc, #96]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de2:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	4910      	ldr	r1, [pc, #64]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005df6:	f000 f825 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <HAL_RCC_ClockConfig+0x1b4>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	490c      	ldr	r1, [pc, #48]	; (8005e38 <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <HAL_RCC_ClockConfig+0x1c0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fc fd0c 	bl	8002838 <HAL_InitTick>
 8005e20:	4603      	mov	r3, r0
 8005e22:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e24:	7afb      	ldrb	r3, [r7, #11]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40022000 	.word	0x40022000
 8005e34:	40021000 	.word	0x40021000
 8005e38:	0800d638 	.word	0x0800d638
 8005e3c:	20000000 	.word	0x20000000
 8005e40:	20000004 	.word	0x20000004

08005e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	; 0x24
 8005e48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e52:	4b3e      	ldr	r3, [pc, #248]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
 8005e5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e5c:	4b3b      	ldr	r3, [pc, #236]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_RCC_GetSysClockFreq+0x34>
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d121      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d11e      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e78:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d107      	bne.n	8005e94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e84:	4b31      	ldr	r3, [pc, #196]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	61fb      	str	r3, [r7, #28]
 8005e92:	e005      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e94:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	091b      	lsrs	r3, r3, #4
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ea0:	4a2b      	ldr	r2, [pc, #172]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10d      	bne.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eb4:	e00a      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d102      	bne.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ebc:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ebe:	61bb      	str	r3, [r7, #24]
 8005ec0:	e004      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d101      	bne.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ec8:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b0c      	cmp	r3, #12
 8005ed0:	d134      	bne.n	8005f3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ed2:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d003      	beq.n	8005eea <HAL_RCC_GetSysClockFreq+0xa6>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0xac>
 8005ee8:	e005      	b.n	8005ef6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005eea:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eec:	617b      	str	r3, [r7, #20]
      break;
 8005eee:	e005      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ef0:	4b18      	ldr	r3, [pc, #96]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ef2:	617b      	str	r3, [r7, #20]
      break;
 8005ef4:	e002      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	617b      	str	r3, [r7, #20]
      break;
 8005efa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005efc:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	091b      	lsrs	r3, r3, #4
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	3301      	adds	r3, #1
 8005f08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f0a:	4b10      	ldr	r3, [pc, #64]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	fb02 f203 	mul.w	r2, r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	0e5b      	lsrs	r3, r3, #25
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3724      	adds	r7, #36	; 0x24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	0800d650 	.word	0x0800d650
 8005f54:	00f42400 	.word	0x00f42400

08005f58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f5c:	4b03      	ldr	r3, [pc, #12]	; (8005f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	20000000 	.word	0x20000000

08005f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f74:	f7ff fff0 	bl	8005f58 <HAL_RCC_GetHCLKFreq>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	4904      	ldr	r1, [pc, #16]	; (8005f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f86:	5ccb      	ldrb	r3, [r1, r3]
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40021000 	.word	0x40021000
 8005f98:	0800d648 	.word	0x0800d648

08005f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fa0:	f7ff ffda 	bl	8005f58 <HAL_RCC_GetHCLKFreq>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	0adb      	lsrs	r3, r3, #11
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	4904      	ldr	r1, [pc, #16]	; (8005fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fb2:	5ccb      	ldrb	r3, [r1, r3]
 8005fb4:	f003 031f 	and.w	r3, r3, #31
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	0800d648 	.word	0x0800d648

08005fc8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	220f      	movs	r2, #15
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005fd8:	4b12      	ldr	r3, [pc, #72]	; (8006024 <HAL_RCC_GetClockConfig+0x5c>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 0203 	and.w	r2, r3, #3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <HAL_RCC_GetClockConfig+0x5c>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <HAL_RCC_GetClockConfig+0x5c>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ffc:	4b09      	ldr	r3, [pc, #36]	; (8006024 <HAL_RCC_GetClockConfig+0x5c>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	08db      	lsrs	r3, r3, #3
 8006002:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800600a:	4b07      	ldr	r3, [pc, #28]	; (8006028 <HAL_RCC_GetClockConfig+0x60>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0207 	and.w	r2, r3, #7
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	601a      	str	r2, [r3, #0]
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40021000 	.word	0x40021000
 8006028:	40022000 	.word	0x40022000

0800602c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006038:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800603a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006044:	f7ff f998 	bl	8005378 <HAL_PWREx_GetVoltageRange>
 8006048:	6178      	str	r0, [r7, #20]
 800604a:	e014      	b.n	8006076 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800604c:	4b25      	ldr	r3, [pc, #148]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800604e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006050:	4a24      	ldr	r2, [pc, #144]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006056:	6593      	str	r3, [r2, #88]	; 0x58
 8006058:	4b22      	ldr	r3, [pc, #136]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800605a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006064:	f7ff f988 	bl	8005378 <HAL_PWREx_GetVoltageRange>
 8006068:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800606a:	4b1e      	ldr	r3, [pc, #120]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006074:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607c:	d10b      	bne.n	8006096 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b80      	cmp	r3, #128	; 0x80
 8006082:	d919      	bls.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2ba0      	cmp	r3, #160	; 0xa0
 8006088:	d902      	bls.n	8006090 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800608a:	2302      	movs	r3, #2
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	e013      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006090:	2301      	movs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	e010      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b80      	cmp	r3, #128	; 0x80
 800609a:	d902      	bls.n	80060a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800609c:	2303      	movs	r3, #3
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	e00a      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b80      	cmp	r3, #128	; 0x80
 80060a6:	d102      	bne.n	80060ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060a8:	2302      	movs	r3, #2
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	e004      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b70      	cmp	r3, #112	; 0x70
 80060b2:	d101      	bne.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060b4:	2301      	movs	r3, #1
 80060b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f023 0207 	bic.w	r2, r3, #7
 80060c0:	4909      	ldr	r1, [pc, #36]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060c8:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d001      	beq.n	80060da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40022000 	.word	0x40022000

080060ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060f4:	2300      	movs	r3, #0
 80060f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060f8:	2300      	movs	r3, #0
 80060fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006104:	2b00      	cmp	r3, #0
 8006106:	d031      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006110:	d01a      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006112:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006116:	d814      	bhi.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d009      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800611c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006120:	d10f      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006122:	4bac      	ldr	r3, [pc, #688]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	4aab      	ldr	r2, [pc, #684]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612e:	e00c      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	2100      	movs	r1, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f9dc 	bl	80064f4 <RCCEx_PLLSAI1_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006140:	e003      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	74fb      	strb	r3, [r7, #19]
      break;
 8006146:	e000      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006150:	4ba0      	ldr	r3, [pc, #640]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006156:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	499d      	ldr	r1, [pc, #628]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006166:	e001      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8099 	beq.w	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800617a:	2300      	movs	r3, #0
 800617c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800617e:	4b95      	ldr	r3, [pc, #596]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006194:	4b8f      	ldr	r3, [pc, #572]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006198:	4a8e      	ldr	r2, [pc, #568]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800619a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619e:	6593      	str	r3, [r2, #88]	; 0x58
 80061a0:	4b8c      	ldr	r3, [pc, #560]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ac:	2301      	movs	r3, #1
 80061ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061b0:	4b89      	ldr	r3, [pc, #548]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a88      	ldr	r2, [pc, #544]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80061b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061bc:	f7fc fd2a 	bl	8002c14 <HAL_GetTick>
 80061c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061c2:	e009      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c4:	f7fc fd26 	bl	8002c14 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d902      	bls.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	74fb      	strb	r3, [r7, #19]
        break;
 80061d6:	e005      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061d8:	4b7f      	ldr	r3, [pc, #508]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0ef      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80061e4:	7cfb      	ldrb	r3, [r7, #19]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d155      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061ea:	4b7a      	ldr	r3, [pc, #488]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01e      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	429a      	cmp	r2, r3
 8006204:	d019      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006206:	4b73      	ldr	r3, [pc, #460]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006210:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006212:	4b70      	ldr	r3, [pc, #448]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006218:	4a6e      	ldr	r2, [pc, #440]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800621a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006222:	4b6c      	ldr	r3, [pc, #432]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006228:	4a6a      	ldr	r2, [pc, #424]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800622a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800622e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006232:	4a68      	ldr	r2, [pc, #416]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d016      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006244:	f7fc fce6 	bl	8002c14 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800624a:	e00b      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624c:	f7fc fce2 	bl	8002c14 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d902      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	74fb      	strb	r3, [r7, #19]
            break;
 8006262:	e006      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006264:	4b5b      	ldr	r3, [pc, #364]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0ec      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006272:	7cfb      	ldrb	r3, [r7, #19]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10b      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006278:	4b56      	ldr	r3, [pc, #344]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006286:	4953      	ldr	r1, [pc, #332]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800628e:	e004      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	74bb      	strb	r3, [r7, #18]
 8006294:	e001      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006296:	7cfb      	ldrb	r3, [r7, #19]
 8006298:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800629a:	7c7b      	ldrb	r3, [r7, #17]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d105      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062a0:	4b4c      	ldr	r3, [pc, #304]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a4:	4a4b      	ldr	r2, [pc, #300]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062b8:	4b46      	ldr	r3, [pc, #280]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	f023 0203 	bic.w	r2, r3, #3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	4943      	ldr	r1, [pc, #268]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062da:	4b3e      	ldr	r3, [pc, #248]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e0:	f023 020c 	bic.w	r2, r3, #12
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	493a      	ldr	r1, [pc, #232]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062fc:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006302:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	4932      	ldr	r1, [pc, #200]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800631e:	4b2d      	ldr	r3, [pc, #180]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	4929      	ldr	r1, [pc, #164]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006340:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	4921      	ldr	r1, [pc, #132]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006362:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006368:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	4918      	ldr	r1, [pc, #96]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006384:	4b13      	ldr	r3, [pc, #76]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	4910      	ldr	r1, [pc, #64]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d02c      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063a6:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	4907      	ldr	r1, [pc, #28]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063c4:	d10a      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063c6:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	4a02      	ldr	r2, [pc, #8]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063d0:	60d3      	str	r3, [r2, #12]
 80063d2:	e015      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e4:	d10c      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3304      	adds	r3, #4
 80063ea:	2101      	movs	r1, #1
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 f881 	bl	80064f4 <RCCEx_PLLSAI1_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d028      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800640c:	4b30      	ldr	r3, [pc, #192]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	492d      	ldr	r1, [pc, #180]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642a:	d106      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642c:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006436:	60d3      	str	r3, [r2, #12]
 8006438:	e011      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006442:	d10c      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f852 	bl	80064f4 <RCCEx_PLLSAI1_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006454:	7cfb      	ldrb	r3, [r7, #19]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01c      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800646a:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006470:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006478:	4915      	ldr	r1, [pc, #84]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006488:	d10c      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	2102      	movs	r1, #2
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f82f 	bl	80064f4 <RCCEx_PLLSAI1_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800649a:	7cfb      	ldrb	r3, [r7, #19]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80064a0:	7cfb      	ldrb	r3, [r7, #19]
 80064a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064be:	4904      	ldr	r1, [pc, #16]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40021000 	.word	0x40021000

080064d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80064de:	f043 0304 	orr.w	r3, r3, #4
 80064e2:	6013      	str	r3, [r2, #0]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40021000 	.word	0x40021000

080064f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006502:	4b74      	ldr	r3, [pc, #464]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d018      	beq.n	8006540 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800650e:	4b71      	ldr	r3, [pc, #452]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f003 0203 	and.w	r2, r3, #3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d10d      	bne.n	800653a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
       ||
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006526:	4b6b      	ldr	r3, [pc, #428]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	091b      	lsrs	r3, r3, #4
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
       ||
 8006536:	429a      	cmp	r2, r3
 8006538:	d047      	beq.n	80065ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	73fb      	strb	r3, [r7, #15]
 800653e:	e044      	b.n	80065ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d018      	beq.n	800657a <RCCEx_PLLSAI1_Config+0x86>
 8006548:	2b03      	cmp	r3, #3
 800654a:	d825      	bhi.n	8006598 <RCCEx_PLLSAI1_Config+0xa4>
 800654c:	2b01      	cmp	r3, #1
 800654e:	d002      	beq.n	8006556 <RCCEx_PLLSAI1_Config+0x62>
 8006550:	2b02      	cmp	r3, #2
 8006552:	d009      	beq.n	8006568 <RCCEx_PLLSAI1_Config+0x74>
 8006554:	e020      	b.n	8006598 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006556:	4b5f      	ldr	r3, [pc, #380]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d11d      	bne.n	800659e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006566:	e01a      	b.n	800659e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006568:	4b5a      	ldr	r3, [pc, #360]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006570:	2b00      	cmp	r3, #0
 8006572:	d116      	bne.n	80065a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006578:	e013      	b.n	80065a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800657a:	4b56      	ldr	r3, [pc, #344]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10f      	bne.n	80065a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006586:	4b53      	ldr	r3, [pc, #332]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006596:	e006      	b.n	80065a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
      break;
 800659c:	e004      	b.n	80065a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800659e:	bf00      	nop
 80065a0:	e002      	b.n	80065a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10d      	bne.n	80065ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065ae:	4b49      	ldr	r3, [pc, #292]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	3b01      	subs	r3, #1
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	430b      	orrs	r3, r1
 80065c4:	4943      	ldr	r1, [pc, #268]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d17c      	bne.n	80066ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065d0:	4b40      	ldr	r3, [pc, #256]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a3f      	ldr	r2, [pc, #252]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065dc:	f7fc fb1a 	bl	8002c14 <HAL_GetTick>
 80065e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065e2:	e009      	b.n	80065f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065e4:	f7fc fb16 	bl	8002c14 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d902      	bls.n	80065f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	73fb      	strb	r3, [r7, #15]
        break;
 80065f6:	e005      	b.n	8006604 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065f8:	4b36      	ldr	r3, [pc, #216]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1ef      	bne.n	80065e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d15f      	bne.n	80066ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d110      	bne.n	8006632 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006610:	4b30      	ldr	r3, [pc, #192]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6892      	ldr	r2, [r2, #8]
 8006620:	0211      	lsls	r1, r2, #8
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	68d2      	ldr	r2, [r2, #12]
 8006626:	06d2      	lsls	r2, r2, #27
 8006628:	430a      	orrs	r2, r1
 800662a:	492a      	ldr	r1, [pc, #168]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800662c:	4313      	orrs	r3, r2
 800662e:	610b      	str	r3, [r1, #16]
 8006630:	e027      	b.n	8006682 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d112      	bne.n	800665e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006638:	4b26      	ldr	r3, [pc, #152]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6892      	ldr	r2, [r2, #8]
 8006648:	0211      	lsls	r1, r2, #8
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6912      	ldr	r2, [r2, #16]
 800664e:	0852      	lsrs	r2, r2, #1
 8006650:	3a01      	subs	r2, #1
 8006652:	0552      	lsls	r2, r2, #21
 8006654:	430a      	orrs	r2, r1
 8006656:	491f      	ldr	r1, [pc, #124]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006658:	4313      	orrs	r3, r2
 800665a:	610b      	str	r3, [r1, #16]
 800665c:	e011      	b.n	8006682 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6892      	ldr	r2, [r2, #8]
 800666e:	0211      	lsls	r1, r2, #8
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6952      	ldr	r2, [r2, #20]
 8006674:	0852      	lsrs	r2, r2, #1
 8006676:	3a01      	subs	r2, #1
 8006678:	0652      	lsls	r2, r2, #25
 800667a:	430a      	orrs	r2, r1
 800667c:	4915      	ldr	r1, [pc, #84]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800667e:	4313      	orrs	r3, r2
 8006680:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006682:	4b14      	ldr	r3, [pc, #80]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a13      	ldr	r2, [pc, #76]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800668c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668e:	f7fc fac1 	bl	8002c14 <HAL_GetTick>
 8006692:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006694:	e009      	b.n	80066aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006696:	f7fc fabd 	bl	8002c14 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d902      	bls.n	80066aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	73fb      	strb	r3, [r7, #15]
          break;
 80066a8:	e005      	b.n	80066b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0ef      	beq.n	8006696 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066bc:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	4903      	ldr	r1, [pc, #12]	; (80066d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40021000 	.word	0x40021000

080066d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e049      	b.n	800677e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f841 	bl	8006786 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f000 fb42 	bl	8006da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d001      	beq.n	80067b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e03b      	b.n	800682c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a19      	ldr	r2, [pc, #100]	; (8006838 <HAL_TIM_Base_Start_IT+0x9c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d009      	beq.n	80067ea <HAL_TIM_Base_Start_IT+0x4e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067de:	d004      	beq.n	80067ea <HAL_TIM_Base_Start_IT+0x4e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a15      	ldr	r2, [pc, #84]	; (800683c <HAL_TIM_Base_Start_IT+0xa0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d115      	bne.n	8006816 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	4b13      	ldr	r3, [pc, #76]	; (8006840 <HAL_TIM_Base_Start_IT+0xa4>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b06      	cmp	r3, #6
 80067fa:	d015      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x8c>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006802:	d011      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006814:	e008      	b.n	8006828 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e000      	b.n	800682a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006828:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	40012c00 	.word	0x40012c00
 800683c:	40014000 	.word	0x40014000
 8006840:	00010007 	.word	0x00010007

08006844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e049      	b.n	80068ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fb fea4 	bl	80025b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3304      	adds	r3, #4
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f000 fa8c 	bl	8006da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b02      	cmp	r3, #2
 8006906:	d122      	bne.n	800694e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b02      	cmp	r3, #2
 8006914:	d11b      	bne.n	800694e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f06f 0202 	mvn.w	r2, #2
 800691e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f003 0303 	and.w	r3, r3, #3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fa15 	bl	8006d64 <HAL_TIM_IC_CaptureCallback>
 800693a:	e005      	b.n	8006948 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa07 	bl	8006d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa18 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b04      	cmp	r3, #4
 800695a:	d122      	bne.n	80069a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b04      	cmp	r3, #4
 8006968:	d11b      	bne.n	80069a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f06f 0204 	mvn.w	r2, #4
 8006972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f9eb 	bl	8006d64 <HAL_TIM_IC_CaptureCallback>
 800698e:	e005      	b.n	800699c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f9dd 	bl	8006d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f9ee 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d122      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d11b      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f06f 0208 	mvn.w	r2, #8
 80069c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2204      	movs	r2, #4
 80069cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f9c1 	bl	8006d64 <HAL_TIM_IC_CaptureCallback>
 80069e2:	e005      	b.n	80069f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9b3 	bl	8006d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f9c4 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d122      	bne.n	8006a4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d11b      	bne.n	8006a4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0210 	mvn.w	r2, #16
 8006a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2208      	movs	r2, #8
 8006a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f997 	bl	8006d64 <HAL_TIM_IC_CaptureCallback>
 8006a36:	e005      	b.n	8006a44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f989 	bl	8006d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f99a 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d10e      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d107      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f06f 0201 	mvn.w	r2, #1
 8006a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fb fc8b 	bl	800238c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d10e      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d107      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fd49 	bl	8007534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab0:	d10e      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b80      	cmp	r3, #128	; 0x80
 8006abe:	d107      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fd3c 	bl	8007548 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ada:	2b40      	cmp	r3, #64	; 0x40
 8006adc:	d10e      	bne.n	8006afc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	2b40      	cmp	r3, #64	; 0x40
 8006aea:	d107      	bne.n	8006afc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f948 	bl	8006d8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d10e      	bne.n	8006b28 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d107      	bne.n	8006b28 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0220 	mvn.w	r2, #32
 8006b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fcfc 	bl	8007520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e0fd      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b14      	cmp	r3, #20
 8006b56:	f200 80f0 	bhi.w	8006d3a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006b5a:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006bb5 	.word	0x08006bb5
 8006b64:	08006d3b 	.word	0x08006d3b
 8006b68:	08006d3b 	.word	0x08006d3b
 8006b6c:	08006d3b 	.word	0x08006d3b
 8006b70:	08006bf5 	.word	0x08006bf5
 8006b74:	08006d3b 	.word	0x08006d3b
 8006b78:	08006d3b 	.word	0x08006d3b
 8006b7c:	08006d3b 	.word	0x08006d3b
 8006b80:	08006c37 	.word	0x08006c37
 8006b84:	08006d3b 	.word	0x08006d3b
 8006b88:	08006d3b 	.word	0x08006d3b
 8006b8c:	08006d3b 	.word	0x08006d3b
 8006b90:	08006c77 	.word	0x08006c77
 8006b94:	08006d3b 	.word	0x08006d3b
 8006b98:	08006d3b 	.word	0x08006d3b
 8006b9c:	08006d3b 	.word	0x08006d3b
 8006ba0:	08006cb9 	.word	0x08006cb9
 8006ba4:	08006d3b 	.word	0x08006d3b
 8006ba8:	08006d3b 	.word	0x08006d3b
 8006bac:	08006d3b 	.word	0x08006d3b
 8006bb0:	08006cf9 	.word	0x08006cf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f954 	bl	8006e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0208 	orr.w	r2, r2, #8
 8006bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0204 	bic.w	r2, r2, #4
 8006bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6999      	ldr	r1, [r3, #24]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	619a      	str	r2, [r3, #24]
      break;
 8006bf2:	e0a3      	b.n	8006d3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 f9b0 	bl	8006f60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6999      	ldr	r1, [r3, #24]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	021a      	lsls	r2, r3, #8
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	619a      	str	r2, [r3, #24]
      break;
 8006c34:	e082      	b.n	8006d3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fa09 	bl	8007054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0208 	orr.w	r2, r2, #8
 8006c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0204 	bic.w	r2, r2, #4
 8006c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69d9      	ldr	r1, [r3, #28]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	61da      	str	r2, [r3, #28]
      break;
 8006c74:	e062      	b.n	8006d3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fa61 	bl	8007144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69d9      	ldr	r1, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	021a      	lsls	r2, r3, #8
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	61da      	str	r2, [r3, #28]
      break;
 8006cb6:	e041      	b.n	8006d3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fa9e 	bl	8007200 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0208 	orr.w	r2, r2, #8
 8006cd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0204 	bic.w	r2, r2, #4
 8006ce2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cf6:	e021      	b.n	8006d3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fad6 	bl	80072b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	021a      	lsls	r2, r3, #8
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d38:	e000      	b.n	8006d3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006d3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop

08006d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a2a      	ldr	r2, [pc, #168]	; (8006e5c <TIM_Base_SetConfig+0xbc>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d003      	beq.n	8006dc0 <TIM_Base_SetConfig+0x20>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbe:	d108      	bne.n	8006dd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <TIM_Base_SetConfig+0xbc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00b      	beq.n	8006df2 <TIM_Base_SetConfig+0x52>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de0:	d007      	beq.n	8006df2 <TIM_Base_SetConfig+0x52>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1e      	ldr	r2, [pc, #120]	; (8006e60 <TIM_Base_SetConfig+0xc0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d003      	beq.n	8006df2 <TIM_Base_SetConfig+0x52>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <TIM_Base_SetConfig+0xc4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d108      	bne.n	8006e04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <TIM_Base_SetConfig+0xbc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <TIM_Base_SetConfig+0xa0>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a0b      	ldr	r2, [pc, #44]	; (8006e60 <TIM_Base_SetConfig+0xc0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_Base_SetConfig+0xa0>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a0a      	ldr	r2, [pc, #40]	; (8006e64 <TIM_Base_SetConfig+0xc4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d103      	bne.n	8006e48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	615a      	str	r2, [r3, #20]
}
 8006e4e:	bf00      	nop
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40012c00 	.word	0x40012c00
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40014400 	.word	0x40014400

08006e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f023 0201 	bic.w	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f023 0302 	bic.w	r3, r3, #2
 8006eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a24      	ldr	r2, [pc, #144]	; (8006f54 <TIM_OC1_SetConfig+0xec>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_OC1_SetConfig+0x70>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a23      	ldr	r2, [pc, #140]	; (8006f58 <TIM_OC1_SetConfig+0xf0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC1_SetConfig+0x70>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a22      	ldr	r2, [pc, #136]	; (8006f5c <TIM_OC1_SetConfig+0xf4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d10c      	bne.n	8006ef2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f023 0308 	bic.w	r3, r3, #8
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f023 0304 	bic.w	r3, r3, #4
 8006ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <TIM_OC1_SetConfig+0xec>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <TIM_OC1_SetConfig+0xa2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <TIM_OC1_SetConfig+0xf0>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_OC1_SetConfig+0xa2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <TIM_OC1_SetConfig+0xf4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d111      	bne.n	8006f2e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40014400 	.word	0x40014400

08006f60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f023 0210 	bic.w	r2, r3, #16
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f023 0320 	bic.w	r3, r3, #32
 8006fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a22      	ldr	r2, [pc, #136]	; (8007048 <TIM_OC2_SetConfig+0xe8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d10d      	bne.n	8006fe0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a19      	ldr	r2, [pc, #100]	; (8007048 <TIM_OC2_SetConfig+0xe8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d007      	beq.n	8006ff8 <TIM_OC2_SetConfig+0x98>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <TIM_OC2_SetConfig+0xec>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d003      	beq.n	8006ff8 <TIM_OC2_SetConfig+0x98>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a17      	ldr	r2, [pc, #92]	; (8007050 <TIM_OC2_SetConfig+0xf0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d113      	bne.n	8007020 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40012c00 	.word	0x40012c00
 800704c:	40014000 	.word	0x40014000
 8007050:	40014400 	.word	0x40014400

08007054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a21      	ldr	r2, [pc, #132]	; (8007138 <TIM_OC3_SetConfig+0xe4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d10d      	bne.n	80070d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a18      	ldr	r2, [pc, #96]	; (8007138 <TIM_OC3_SetConfig+0xe4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <TIM_OC3_SetConfig+0x96>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a17      	ldr	r2, [pc, #92]	; (800713c <TIM_OC3_SetConfig+0xe8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_OC3_SetConfig+0x96>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a16      	ldr	r2, [pc, #88]	; (8007140 <TIM_OC3_SetConfig+0xec>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d113      	bne.n	8007112 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	621a      	str	r2, [r3, #32]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40014000 	.word	0x40014000
 8007140:	40014400 	.word	0x40014400

08007144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	031b      	lsls	r3, r3, #12
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a14      	ldr	r2, [pc, #80]	; (80071f4 <TIM_OC4_SetConfig+0xb0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d007      	beq.n	80071b8 <TIM_OC4_SetConfig+0x74>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <TIM_OC4_SetConfig+0xb4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_OC4_SetConfig+0x74>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a12      	ldr	r2, [pc, #72]	; (80071fc <TIM_OC4_SetConfig+0xb8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d109      	bne.n	80071cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	019b      	lsls	r3, r3, #6
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	621a      	str	r2, [r3, #32]
}
 80071e6:	bf00      	nop
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40012c00 	.word	0x40012c00
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400

08007200 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007244:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	041b      	lsls	r3, r3, #16
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a13      	ldr	r2, [pc, #76]	; (80072a4 <TIM_OC5_SetConfig+0xa4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d007      	beq.n	800726a <TIM_OC5_SetConfig+0x6a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a12      	ldr	r2, [pc, #72]	; (80072a8 <TIM_OC5_SetConfig+0xa8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d003      	beq.n	800726a <TIM_OC5_SetConfig+0x6a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a11      	ldr	r2, [pc, #68]	; (80072ac <TIM_OC5_SetConfig+0xac>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d109      	bne.n	800727e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007270:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	021b      	lsls	r3, r3, #8
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	621a      	str	r2, [r3, #32]
}
 8007298:	bf00      	nop
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40014400 	.word	0x40014400

080072b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	051b      	lsls	r3, r3, #20
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a14      	ldr	r2, [pc, #80]	; (8007358 <TIM_OC6_SetConfig+0xa8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d007      	beq.n	800731c <TIM_OC6_SetConfig+0x6c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a13      	ldr	r2, [pc, #76]	; (800735c <TIM_OC6_SetConfig+0xac>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_OC6_SetConfig+0x6c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a12      	ldr	r2, [pc, #72]	; (8007360 <TIM_OC6_SetConfig+0xb0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d109      	bne.n	8007330 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007322:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	029b      	lsls	r3, r3, #10
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	621a      	str	r2, [r3, #32]
}
 800734a:	bf00      	nop
 800734c:	371c      	adds	r7, #28
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40012c00 	.word	0x40012c00
 800735c:	40014000 	.word	0x40014000
 8007360:	40014400 	.word	0x40014400

08007364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007378:	2302      	movs	r3, #2
 800737a:	e04f      	b.n	800741c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a21      	ldr	r2, [pc, #132]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d108      	bne.n	80073b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a14      	ldr	r2, [pc, #80]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d009      	beq.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e4:	d004      	beq.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a10      	ldr	r2, [pc, #64]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d10c      	bne.n	800740a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	40012c00 	.word	0x40012c00
 800742c:	40014000 	.word	0x40014000

08007430 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007448:	2302      	movs	r3, #2
 800744a:	e060      	b.n	800750e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	041b      	lsls	r3, r3, #16
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a14      	ldr	r2, [pc, #80]	; (800751c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d115      	bne.n	80074fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	051b      	lsls	r3, r3, #20
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40012c00 	.word	0x40012c00

08007520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e040      	b.n	80075f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fb f8aa 	bl	80026d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2224      	movs	r2, #36	; 0x24
 8007588:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0201 	bic.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f8c0 	bl	8007720 <UART_SetConfig>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d101      	bne.n	80075aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e022      	b.n	80075f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fac0 	bl	8007b38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fb47 	bl	8007c7c <UART_CheckIdleState>
 80075ee:	4603      	mov	r3, r0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	; 0x28
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	4613      	mov	r3, r2
 8007606:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800760c:	2b20      	cmp	r3, #32
 800760e:	f040 8082 	bne.w	8007716 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_UART_Transmit+0x26>
 8007618:	88fb      	ldrh	r3, [r7, #6]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e07a      	b.n	8007718 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_UART_Transmit+0x38>
 800762c:	2302      	movs	r3, #2
 800762e:	e073      	b.n	8007718 <HAL_UART_Transmit+0x120>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2221      	movs	r2, #33	; 0x21
 8007644:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007646:	f7fb fae5 	bl	8002c14 <HAL_GetTick>
 800764a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	88fa      	ldrh	r2, [r7, #6]
 8007650:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007664:	d108      	bne.n	8007678 <HAL_UART_Transmit+0x80>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d104      	bne.n	8007678 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	e003      	b.n	8007680 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800767c:	2300      	movs	r3, #0
 800767e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007688:	e02d      	b.n	80076e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	2180      	movs	r1, #128	; 0x80
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fb3a 	bl	8007d0e <UART_WaitOnFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e039      	b.n	8007718 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10b      	bne.n	80076c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	881a      	ldrh	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076b6:	b292      	uxth	r2, r2
 80076b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	3302      	adds	r3, #2
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	e008      	b.n	80076d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	b292      	uxth	r2, r2
 80076cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	3301      	adds	r3, #1
 80076d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1cb      	bne.n	800768a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2140      	movs	r1, #64	; 0x40
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fb06 	bl	8007d0e <UART_WaitOnFlagUntilTimeout>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e005      	b.n	8007718 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	e000      	b.n	8007718 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007716:	2302      	movs	r3, #2
  }
}
 8007718:	4618      	mov	r0, r3
 800771a:	3720      	adds	r7, #32
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007720:	b5b0      	push	{r4, r5, r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	4313      	orrs	r3, r2
 8007742:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4baf      	ldr	r3, [pc, #700]	; (8007a08 <UART_SetConfig+0x2e8>)
 800774c:	4013      	ands	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	69f9      	ldr	r1, [r7, #28]
 8007754:	430b      	orrs	r3, r1
 8007756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4aa4      	ldr	r2, [pc, #656]	; (8007a0c <UART_SetConfig+0x2ec>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	4313      	orrs	r3, r2
 8007786:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	430a      	orrs	r2, r1
 800779a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a9b      	ldr	r2, [pc, #620]	; (8007a10 <UART_SetConfig+0x2f0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d121      	bne.n	80077ea <UART_SetConfig+0xca>
 80077a6:	4b9b      	ldr	r3, [pc, #620]	; (8007a14 <UART_SetConfig+0x2f4>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d817      	bhi.n	80077e4 <UART_SetConfig+0xc4>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <UART_SetConfig+0x9c>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077d9 	.word	0x080077d9
 80077c4:	080077d3 	.word	0x080077d3
 80077c8:	080077df 	.word	0x080077df
 80077cc:	2301      	movs	r3, #1
 80077ce:	76fb      	strb	r3, [r7, #27]
 80077d0:	e070      	b.n	80078b4 <UART_SetConfig+0x194>
 80077d2:	2302      	movs	r3, #2
 80077d4:	76fb      	strb	r3, [r7, #27]
 80077d6:	e06d      	b.n	80078b4 <UART_SetConfig+0x194>
 80077d8:	2304      	movs	r3, #4
 80077da:	76fb      	strb	r3, [r7, #27]
 80077dc:	e06a      	b.n	80078b4 <UART_SetConfig+0x194>
 80077de:	2308      	movs	r3, #8
 80077e0:	76fb      	strb	r3, [r7, #27]
 80077e2:	e067      	b.n	80078b4 <UART_SetConfig+0x194>
 80077e4:	2310      	movs	r3, #16
 80077e6:	76fb      	strb	r3, [r7, #27]
 80077e8:	e064      	b.n	80078b4 <UART_SetConfig+0x194>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a8a      	ldr	r2, [pc, #552]	; (8007a18 <UART_SetConfig+0x2f8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d132      	bne.n	800785a <UART_SetConfig+0x13a>
 80077f4:	4b87      	ldr	r3, [pc, #540]	; (8007a14 <UART_SetConfig+0x2f4>)
 80077f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fa:	f003 030c 	and.w	r3, r3, #12
 80077fe:	2b0c      	cmp	r3, #12
 8007800:	d828      	bhi.n	8007854 <UART_SetConfig+0x134>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <UART_SetConfig+0xe8>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	0800783d 	.word	0x0800783d
 800780c:	08007855 	.word	0x08007855
 8007810:	08007855 	.word	0x08007855
 8007814:	08007855 	.word	0x08007855
 8007818:	08007849 	.word	0x08007849
 800781c:	08007855 	.word	0x08007855
 8007820:	08007855 	.word	0x08007855
 8007824:	08007855 	.word	0x08007855
 8007828:	08007843 	.word	0x08007843
 800782c:	08007855 	.word	0x08007855
 8007830:	08007855 	.word	0x08007855
 8007834:	08007855 	.word	0x08007855
 8007838:	0800784f 	.word	0x0800784f
 800783c:	2300      	movs	r3, #0
 800783e:	76fb      	strb	r3, [r7, #27]
 8007840:	e038      	b.n	80078b4 <UART_SetConfig+0x194>
 8007842:	2302      	movs	r3, #2
 8007844:	76fb      	strb	r3, [r7, #27]
 8007846:	e035      	b.n	80078b4 <UART_SetConfig+0x194>
 8007848:	2304      	movs	r3, #4
 800784a:	76fb      	strb	r3, [r7, #27]
 800784c:	e032      	b.n	80078b4 <UART_SetConfig+0x194>
 800784e:	2308      	movs	r3, #8
 8007850:	76fb      	strb	r3, [r7, #27]
 8007852:	e02f      	b.n	80078b4 <UART_SetConfig+0x194>
 8007854:	2310      	movs	r3, #16
 8007856:	76fb      	strb	r3, [r7, #27]
 8007858:	e02c      	b.n	80078b4 <UART_SetConfig+0x194>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a6b      	ldr	r2, [pc, #428]	; (8007a0c <UART_SetConfig+0x2ec>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d125      	bne.n	80078b0 <UART_SetConfig+0x190>
 8007864:	4b6b      	ldr	r3, [pc, #428]	; (8007a14 <UART_SetConfig+0x2f4>)
 8007866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800786e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007872:	d017      	beq.n	80078a4 <UART_SetConfig+0x184>
 8007874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007878:	d817      	bhi.n	80078aa <UART_SetConfig+0x18a>
 800787a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800787e:	d00b      	beq.n	8007898 <UART_SetConfig+0x178>
 8007880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007884:	d811      	bhi.n	80078aa <UART_SetConfig+0x18a>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <UART_SetConfig+0x172>
 800788a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788e:	d006      	beq.n	800789e <UART_SetConfig+0x17e>
 8007890:	e00b      	b.n	80078aa <UART_SetConfig+0x18a>
 8007892:	2300      	movs	r3, #0
 8007894:	76fb      	strb	r3, [r7, #27]
 8007896:	e00d      	b.n	80078b4 <UART_SetConfig+0x194>
 8007898:	2302      	movs	r3, #2
 800789a:	76fb      	strb	r3, [r7, #27]
 800789c:	e00a      	b.n	80078b4 <UART_SetConfig+0x194>
 800789e:	2304      	movs	r3, #4
 80078a0:	76fb      	strb	r3, [r7, #27]
 80078a2:	e007      	b.n	80078b4 <UART_SetConfig+0x194>
 80078a4:	2308      	movs	r3, #8
 80078a6:	76fb      	strb	r3, [r7, #27]
 80078a8:	e004      	b.n	80078b4 <UART_SetConfig+0x194>
 80078aa:	2310      	movs	r3, #16
 80078ac:	76fb      	strb	r3, [r7, #27]
 80078ae:	e001      	b.n	80078b4 <UART_SetConfig+0x194>
 80078b0:	2310      	movs	r3, #16
 80078b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a54      	ldr	r2, [pc, #336]	; (8007a0c <UART_SetConfig+0x2ec>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d173      	bne.n	80079a6 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078be:	7efb      	ldrb	r3, [r7, #27]
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d824      	bhi.n	800790e <UART_SetConfig+0x1ee>
 80078c4:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0x1ac>)
 80078c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ca:	bf00      	nop
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	0800790f 	.word	0x0800790f
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	0800790f 	.word	0x0800790f
 80078dc:	080078ff 	.word	0x080078ff
 80078e0:	0800790f 	.word	0x0800790f
 80078e4:	0800790f 	.word	0x0800790f
 80078e8:	0800790f 	.word	0x0800790f
 80078ec:	08007907 	.word	0x08007907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f0:	f7fe fb3e 	bl	8005f70 <HAL_RCC_GetPCLK1Freq>
 80078f4:	6178      	str	r0, [r7, #20]
        break;
 80078f6:	e00f      	b.n	8007918 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f8:	4b48      	ldr	r3, [pc, #288]	; (8007a1c <UART_SetConfig+0x2fc>)
 80078fa:	617b      	str	r3, [r7, #20]
        break;
 80078fc:	e00c      	b.n	8007918 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fe:	f7fe faa1 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8007902:	6178      	str	r0, [r7, #20]
        break;
 8007904:	e008      	b.n	8007918 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800790a:	617b      	str	r3, [r7, #20]
        break;
 800790c:	e004      	b.n	8007918 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	76bb      	strb	r3, [r7, #26]
        break;
 8007916:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 80fe 	beq.w	8007b1c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	4613      	mov	r3, r2
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	4413      	add	r3, r2
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	429a      	cmp	r2, r3
 800792e:	d305      	bcc.n	800793c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	429a      	cmp	r2, r3
 800793a:	d902      	bls.n	8007942 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	76bb      	strb	r3, [r7, #26]
 8007940:	e0ec      	b.n	8007b1c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	4618      	mov	r0, r3
 8007946:	f04f 0100 	mov.w	r1, #0
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	020b      	lsls	r3, r1, #8
 8007954:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007958:	0202      	lsls	r2, r0, #8
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	6849      	ldr	r1, [r1, #4]
 800795e:	0849      	lsrs	r1, r1, #1
 8007960:	4608      	mov	r0, r1
 8007962:	f04f 0100 	mov.w	r1, #0
 8007966:	1814      	adds	r4, r2, r0
 8007968:	eb43 0501 	adc.w	r5, r3, r1
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	461a      	mov	r2, r3
 8007972:	f04f 0300 	mov.w	r3, #0
 8007976:	4620      	mov	r0, r4
 8007978:	4629      	mov	r1, r5
 800797a:	f7f9 f915 	bl	8000ba8 <__aeabi_uldivmod>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4613      	mov	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800798c:	d308      	bcc.n	80079a0 <UART_SetConfig+0x280>
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007994:	d204      	bcs.n	80079a0 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	e0bd      	b.n	8007b1c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	76bb      	strb	r3, [r7, #26]
 80079a4:	e0ba      	b.n	8007b1c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ae:	d168      	bne.n	8007a82 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80079b0:	7efb      	ldrb	r3, [r7, #27]
 80079b2:	2b08      	cmp	r3, #8
 80079b4:	d834      	bhi.n	8007a20 <UART_SetConfig+0x300>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <UART_SetConfig+0x29c>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	080079e9 	.word	0x080079e9
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	08007a21 	.word	0x08007a21
 80079cc:	080079f7 	.word	0x080079f7
 80079d0:	08007a21 	.word	0x08007a21
 80079d4:	08007a21 	.word	0x08007a21
 80079d8:	08007a21 	.word	0x08007a21
 80079dc:	080079ff 	.word	0x080079ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e0:	f7fe fac6 	bl	8005f70 <HAL_RCC_GetPCLK1Freq>
 80079e4:	6178      	str	r0, [r7, #20]
        break;
 80079e6:	e020      	b.n	8007a2a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e8:	f7fe fad8 	bl	8005f9c <HAL_RCC_GetPCLK2Freq>
 80079ec:	6178      	str	r0, [r7, #20]
        break;
 80079ee:	e01c      	b.n	8007a2a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <UART_SetConfig+0x2fc>)
 80079f2:	617b      	str	r3, [r7, #20]
        break;
 80079f4:	e019      	b.n	8007a2a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079f6:	f7fe fa25 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 80079fa:	6178      	str	r0, [r7, #20]
        break;
 80079fc:	e015      	b.n	8007a2a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a02:	617b      	str	r3, [r7, #20]
        break;
 8007a04:	e011      	b.n	8007a2a <UART_SetConfig+0x30a>
 8007a06:	bf00      	nop
 8007a08:	efff69f3 	.word	0xefff69f3
 8007a0c:	40008000 	.word	0x40008000
 8007a10:	40013800 	.word	0x40013800
 8007a14:	40021000 	.word	0x40021000
 8007a18:	40004400 	.word	0x40004400
 8007a1c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	76bb      	strb	r3, [r7, #26]
        break;
 8007a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d075      	beq.n	8007b1c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	005a      	lsls	r2, r3, #1
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	085b      	lsrs	r3, r3, #1
 8007a3a:	441a      	add	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2b0f      	cmp	r3, #15
 8007a4c:	d916      	bls.n	8007a7c <UART_SetConfig+0x35c>
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a54:	d212      	bcs.n	8007a7c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	f023 030f 	bic.w	r3, r3, #15
 8007a5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	085b      	lsrs	r3, r3, #1
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	89fb      	ldrh	r3, [r7, #14]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	89fa      	ldrh	r2, [r7, #14]
 8007a78:	60da      	str	r2, [r3, #12]
 8007a7a:	e04f      	b.n	8007b1c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	76bb      	strb	r3, [r7, #26]
 8007a80:	e04c      	b.n	8007b1c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a82:	7efb      	ldrb	r3, [r7, #27]
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d828      	bhi.n	8007ada <UART_SetConfig+0x3ba>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <UART_SetConfig+0x370>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007abd 	.word	0x08007abd
 8007a98:	08007ac5 	.word	0x08007ac5
 8007a9c:	08007adb 	.word	0x08007adb
 8007aa0:	08007acb 	.word	0x08007acb
 8007aa4:	08007adb 	.word	0x08007adb
 8007aa8:	08007adb 	.word	0x08007adb
 8007aac:	08007adb 	.word	0x08007adb
 8007ab0:	08007ad3 	.word	0x08007ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab4:	f7fe fa5c 	bl	8005f70 <HAL_RCC_GetPCLK1Freq>
 8007ab8:	6178      	str	r0, [r7, #20]
        break;
 8007aba:	e013      	b.n	8007ae4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007abc:	f7fe fa6e 	bl	8005f9c <HAL_RCC_GetPCLK2Freq>
 8007ac0:	6178      	str	r0, [r7, #20]
        break;
 8007ac2:	e00f      	b.n	8007ae4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ac4:	4b1b      	ldr	r3, [pc, #108]	; (8007b34 <UART_SetConfig+0x414>)
 8007ac6:	617b      	str	r3, [r7, #20]
        break;
 8007ac8:	e00c      	b.n	8007ae4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aca:	f7fe f9bb 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8007ace:	6178      	str	r0, [r7, #20]
        break;
 8007ad0:	e008      	b.n	8007ae4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad6:	617b      	str	r3, [r7, #20]
        break;
 8007ad8:	e004      	b.n	8007ae4 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	76bb      	strb	r3, [r7, #26]
        break;
 8007ae2:	bf00      	nop
    }

    if (pclk != 0U)
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d018      	beq.n	8007b1c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	085a      	lsrs	r2, r3, #1
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	441a      	add	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2b0f      	cmp	r3, #15
 8007b04:	d908      	bls.n	8007b18 <UART_SetConfig+0x3f8>
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0c:	d204      	bcs.n	8007b18 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	60da      	str	r2, [r3, #12]
 8007b16:	e001      	b.n	8007b1c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b28:	7ebb      	ldrb	r3, [r7, #26]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3720      	adds	r7, #32
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bdb0      	pop	{r4, r5, r7, pc}
 8007b32:	bf00      	nop
 8007b34:	00f42400 	.word	0x00f42400

08007b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	f003 0308 	and.w	r3, r3, #8
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01a      	beq.n	8007c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c36:	d10a      	bne.n	8007c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c8c:	f7fa ffc2 	bl	8002c14 <HAL_GetTick>
 8007c90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d10e      	bne.n	8007cbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f82d 	bl	8007d0e <UART_WaitOnFlagUntilTimeout>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e023      	b.n	8007d06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d10e      	bne.n	8007cea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f817 	bl	8007d0e <UART_WaitOnFlagUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e00d      	b.n	8007d06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2220      	movs	r2, #32
 8007cee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d1e:	e05e      	b.n	8007dde <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d26:	d05a      	beq.n	8007dde <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d28:	f7fa ff74 	bl	8002c14 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d302      	bcc.n	8007d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d11b      	bne.n	8007d76 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0201 	bic.w	r2, r2, #1
 8007d5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2220      	movs	r2, #32
 8007d62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2220      	movs	r2, #32
 8007d68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e043      	b.n	8007dfe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d02c      	beq.n	8007dde <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d92:	d124      	bne.n	8007dde <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d9c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0201 	bic.w	r2, r2, #1
 8007dbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e00f      	b.n	8007dfe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69da      	ldr	r2, [r3, #28]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4013      	ands	r3, r2
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	bf0c      	ite	eq
 8007dee:	2301      	moveq	r3, #1
 8007df0:	2300      	movne	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d091      	beq.n	8007d20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <__NVIC_SetPriority>:
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	6039      	str	r1, [r7, #0]
 8007e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	db0a      	blt.n	8007e32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	490c      	ldr	r1, [pc, #48]	; (8007e54 <__NVIC_SetPriority+0x4c>)
 8007e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e26:	0112      	lsls	r2, r2, #4
 8007e28:	b2d2      	uxtb	r2, r2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e30:	e00a      	b.n	8007e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	4908      	ldr	r1, [pc, #32]	; (8007e58 <__NVIC_SetPriority+0x50>)
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	3b04      	subs	r3, #4
 8007e40:	0112      	lsls	r2, r2, #4
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	440b      	add	r3, r1
 8007e46:	761a      	strb	r2, [r3, #24]
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	e000e100 	.word	0xe000e100
 8007e58:	e000ed00 	.word	0xe000ed00

08007e5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <SysTick_Handler+0x1c>)
 8007e62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e64:	f001 fcfe 	bl	8009864 <xTaskGetSchedulerState>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d001      	beq.n	8007e72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007e6e:	f002 fae3 	bl	800a438 <xPortSysTickHandler>
  }
}
 8007e72:	bf00      	nop
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	e000e010 	.word	0xe000e010

08007e7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e80:	2100      	movs	r1, #0
 8007e82:	f06f 0004 	mvn.w	r0, #4
 8007e86:	f7ff ffbf 	bl	8007e08 <__NVIC_SetPriority>
#endif
}
 8007e8a:	bf00      	nop
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e96:	f3ef 8305 	mrs	r3, IPSR
 8007e9a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ea2:	f06f 0305 	mvn.w	r3, #5
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	e00c      	b.n	8007ec4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007eaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <osKernelInitialize+0x44>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007eb2:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <osKernelInitialize+0x44>)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	607b      	str	r3, [r7, #4]
 8007ebc:	e002      	b.n	8007ec4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ec4:	687b      	ldr	r3, [r7, #4]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000204 	.word	0x20000204

08007ed8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ede:	f3ef 8305 	mrs	r3, IPSR
 8007ee2:	603b      	str	r3, [r7, #0]
  return(result);
 8007ee4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007eea:	f06f 0305 	mvn.w	r3, #5
 8007eee:	607b      	str	r3, [r7, #4]
 8007ef0:	e010      	b.n	8007f14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <osKernelStart+0x48>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d109      	bne.n	8007f0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007efa:	f7ff ffbf 	bl	8007e7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007efe:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <osKernelStart+0x48>)
 8007f00:	2202      	movs	r2, #2
 8007f02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f04:	f001 f866 	bl	8008fd4 <vTaskStartScheduler>
      stat = osOK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	607b      	str	r3, [r7, #4]
 8007f0c:	e002      	b.n	8007f14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f14:	687b      	ldr	r3, [r7, #4]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000204 	.word	0x20000204

08007f24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08e      	sub	sp, #56	; 0x38
 8007f28:	af04      	add	r7, sp, #16
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f34:	f3ef 8305 	mrs	r3, IPSR
 8007f38:	617b      	str	r3, [r7, #20]
  return(result);
 8007f3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d17e      	bne.n	800803e <osThreadNew+0x11a>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d07b      	beq.n	800803e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f46:	2380      	movs	r3, #128	; 0x80
 8007f48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f4a:	2318      	movs	r3, #24
 8007f4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007f52:	f04f 33ff 	mov.w	r3, #4294967295
 8007f56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d045      	beq.n	8007fea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <osThreadNew+0x48>
        name = attr->name;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <osThreadNew+0x6e>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	2b38      	cmp	r3, #56	; 0x38
 8007f84:	d805      	bhi.n	8007f92 <osThreadNew+0x6e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <osThreadNew+0x72>
        return (NULL);
 8007f92:	2300      	movs	r3, #0
 8007f94:	e054      	b.n	8008040 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	089b      	lsrs	r3, r3, #2
 8007fa4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00e      	beq.n	8007fcc <osThreadNew+0xa8>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2b5b      	cmp	r3, #91	; 0x5b
 8007fb4:	d90a      	bls.n	8007fcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d006      	beq.n	8007fcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <osThreadNew+0xa8>
        mem = 1;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	e010      	b.n	8007fee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10c      	bne.n	8007fee <osThreadNew+0xca>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d108      	bne.n	8007fee <osThreadNew+0xca>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <osThreadNew+0xca>
          mem = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61bb      	str	r3, [r7, #24]
 8007fe8:	e001      	b.n	8007fee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d110      	bne.n	8008016 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ffc:	9202      	str	r2, [sp, #8]
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	6a3a      	ldr	r2, [r7, #32]
 8008008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fe0c 	bl	8008c28 <xTaskCreateStatic>
 8008010:	4603      	mov	r3, r0
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	e013      	b.n	800803e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d110      	bne.n	800803e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	b29a      	uxth	r2, r3
 8008020:	f107 0310 	add.w	r3, r7, #16
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 fe57 	bl	8008ce2 <xTaskCreate>
 8008034:	4603      	mov	r3, r0
 8008036:	2b01      	cmp	r3, #1
 8008038:	d001      	beq.n	800803e <osThreadNew+0x11a>
            hTask = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800803e:	693b      	ldr	r3, [r7, #16]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3728      	adds	r7, #40	; 0x28
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008050:	f3ef 8305 	mrs	r3, IPSR
 8008054:	60bb      	str	r3, [r7, #8]
  return(result);
 8008056:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <osDelay+0x1c>
    stat = osErrorISR;
 800805c:	f06f 0305 	mvn.w	r3, #5
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e007      	b.n	8008074 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <osDelay+0x2c>
      vTaskDelay(ticks);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 ff7c 	bl	8008f6c <vTaskDelay>
    }
  }

  return (stat);
 8008074:	68fb      	ldr	r3, [r7, #12]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a07      	ldr	r2, [pc, #28]	; (80080ac <vApplicationGetIdleTaskMemory+0x2c>)
 8008090:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4a06      	ldr	r2, [pc, #24]	; (80080b0 <vApplicationGetIdleTaskMemory+0x30>)
 8008096:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2280      	movs	r2, #128	; 0x80
 800809c:	601a      	str	r2, [r3, #0]
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	20000208 	.word	0x20000208
 80080b0:	20000264 	.word	0x20000264

080080b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a07      	ldr	r2, [pc, #28]	; (80080e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80080c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4a06      	ldr	r2, [pc, #24]	; (80080e4 <vApplicationGetTimerTaskMemory+0x30>)
 80080ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080d2:	601a      	str	r2, [r3, #0]
}
 80080d4:	bf00      	nop
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	20000464 	.word	0x20000464
 80080e4:	200004c0 	.word	0x200004c0

080080e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f103 0208 	add.w	r2, r3, #8
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f103 0208 	add.w	r2, r3, #8
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f103 0208 	add.w	r2, r3, #8
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d103      	bne.n	80081aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	e00c      	b.n	80081c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3308      	adds	r3, #8
 80081ae:	60fb      	str	r3, [r7, #12]
 80081b0:	e002      	b.n	80081b8 <vListInsert+0x2e>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d2f6      	bcs.n	80081b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	601a      	str	r2, [r3, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6892      	ldr	r2, [r2, #8]
 8008212:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6852      	ldr	r2, [r2, #4]
 800821c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d103      	bne.n	8008230 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800827a:	f002 f84b 	bl	800a314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800828a:	fb01 f303 	mul.w	r3, r1, r3
 800828e:	441a      	add	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082aa:	3b01      	subs	r3, #1
 80082ac:	68f9      	ldr	r1, [r7, #12]
 80082ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082b0:	fb01 f303 	mul.w	r3, r1, r3
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	22ff      	movs	r2, #255	; 0xff
 80082be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	22ff      	movs	r2, #255	; 0xff
 80082c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d114      	bne.n	80082fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01a      	beq.n	800830e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3310      	adds	r3, #16
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 f903 	bl	80094e8 <xTaskRemoveFromEventList>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d012      	beq.n	800830e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082e8:	4b0c      	ldr	r3, [pc, #48]	; (800831c <xQueueGenericReset+0xcc>)
 80082ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	e009      	b.n	800830e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3310      	adds	r3, #16
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff fef2 	bl	80080e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3324      	adds	r3, #36	; 0x24
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff feed 	bl	80080e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800830e:	f002 f831 	bl	800a374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008312:	2301      	movs	r3, #1
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	e000ed04 	.word	0xe000ed04

08008320 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08e      	sub	sp, #56	; 0x38
 8008324:	af02      	add	r7, sp, #8
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <xQueueGenericCreateStatic+0x52>
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <xQueueGenericCreateStatic+0x56>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <xQueueGenericCreateStatic+0x58>
 8008376:	2300      	movs	r3, #0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	623b      	str	r3, [r7, #32]
}
 800838e:	bf00      	nop
 8008390:	e7fe      	b.n	8008390 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <xQueueGenericCreateStatic+0x7e>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <xQueueGenericCreateStatic+0x82>
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <xQueueGenericCreateStatic+0x84>
 80083a2:	2300      	movs	r3, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	61fb      	str	r3, [r7, #28]
}
 80083ba:	bf00      	nop
 80083bc:	e7fe      	b.n	80083bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80083be:	2350      	movs	r3, #80	; 0x50
 80083c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b50      	cmp	r3, #80	; 0x50
 80083c6:	d00a      	beq.n	80083de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	61bb      	str	r3, [r7, #24]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00d      	beq.n	8008406 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	4613      	mov	r3, r2
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f805 	bl	8008410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008408:	4618      	mov	r0, r3
 800840a:	3730      	adds	r7, #48	; 0x30
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d103      	bne.n	800842c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	e002      	b.n	8008432 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800843e:	2101      	movs	r1, #1
 8008440:	69b8      	ldr	r0, [r7, #24]
 8008442:	f7ff ff05 	bl	8008250 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800844e:	bf00      	nop
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08e      	sub	sp, #56	; 0x38
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008466:	2300      	movs	r3, #0
 8008468:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <xQueueGenericSend+0x32>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d103      	bne.n	8008498 <xQueueGenericSend+0x40>
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <xQueueGenericSend+0x44>
 8008498:	2301      	movs	r3, #1
 800849a:	e000      	b.n	800849e <xQueueGenericSend+0x46>
 800849c:	2300      	movs	r3, #0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <xQueueGenericSend+0x60>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d103      	bne.n	80084c6 <xQueueGenericSend+0x6e>
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <xQueueGenericSend+0x72>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e000      	b.n	80084cc <xQueueGenericSend+0x74>
 80084ca:	2300      	movs	r3, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	623b      	str	r3, [r7, #32]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084e6:	f001 f9bd 	bl	8009864 <xTaskGetSchedulerState>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <xQueueGenericSend+0x9e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <xQueueGenericSend+0xa2>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e000      	b.n	80084fc <xQueueGenericSend+0xa4>
 80084fa:	2300      	movs	r3, #0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <xQueueGenericSend+0xbe>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	61fb      	str	r3, [r7, #28]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008516:	f001 fefd 	bl	800a314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	429a      	cmp	r2, r3
 8008524:	d302      	bcc.n	800852c <xQueueGenericSend+0xd4>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d129      	bne.n	8008580 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008532:	f000 fa0b 	bl	800894c <prvCopyDataToQueue>
 8008536:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d010      	beq.n	8008562 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	3324      	adds	r3, #36	; 0x24
 8008544:	4618      	mov	r0, r3
 8008546:	f000 ffcf 	bl	80094e8 <xTaskRemoveFromEventList>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d013      	beq.n	8008578 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008550:	4b3f      	ldr	r3, [pc, #252]	; (8008650 <xQueueGenericSend+0x1f8>)
 8008552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	e00a      	b.n	8008578 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008568:	4b39      	ldr	r3, [pc, #228]	; (8008650 <xQueueGenericSend+0x1f8>)
 800856a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008578:	f001 fefc 	bl	800a374 <vPortExitCritical>
				return pdPASS;
 800857c:	2301      	movs	r3, #1
 800857e:	e063      	b.n	8008648 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d103      	bne.n	800858e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008586:	f001 fef5 	bl	800a374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800858a:	2300      	movs	r3, #0
 800858c:	e05c      	b.n	8008648 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800858e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008590:	2b00      	cmp	r3, #0
 8008592:	d106      	bne.n	80085a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008594:	f107 0314 	add.w	r3, r7, #20
 8008598:	4618      	mov	r0, r3
 800859a:	f001 f809 	bl	80095b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800859e:	2301      	movs	r3, #1
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085a2:	f001 fee7 	bl	800a374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085a6:	f000 fd7b 	bl	80090a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085aa:	f001 feb3 	bl	800a314 <vPortEnterCritical>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085b4:	b25b      	sxtb	r3, r3
 80085b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ba:	d103      	bne.n	80085c4 <xQueueGenericSend+0x16c>
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ca:	b25b      	sxtb	r3, r3
 80085cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d0:	d103      	bne.n	80085da <xQueueGenericSend+0x182>
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085da:	f001 fecb 	bl	800a374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085de:	1d3a      	adds	r2, r7, #4
 80085e0:	f107 0314 	add.w	r3, r7, #20
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fff8 	bl	80095dc <xTaskCheckForTimeOut>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d124      	bne.n	800863c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085f4:	f000 faa2 	bl	8008b3c <prvIsQueueFull>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d018      	beq.n	8008630 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	3310      	adds	r3, #16
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	4611      	mov	r1, r2
 8008606:	4618      	mov	r0, r3
 8008608:	f000 ff1e 	bl	8009448 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800860c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800860e:	f000 fa2d 	bl	8008a6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008612:	f000 fd53 	bl	80090bc <xTaskResumeAll>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	f47f af7c 	bne.w	8008516 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800861e:	4b0c      	ldr	r3, [pc, #48]	; (8008650 <xQueueGenericSend+0x1f8>)
 8008620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	e772      	b.n	8008516 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008632:	f000 fa1b 	bl	8008a6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008636:	f000 fd41 	bl	80090bc <xTaskResumeAll>
 800863a:	e76c      	b.n	8008516 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800863c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800863e:	f000 fa15 	bl	8008a6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008642:	f000 fd3b 	bl	80090bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008646:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008648:	4618      	mov	r0, r3
 800864a:	3738      	adds	r7, #56	; 0x38
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	e000ed04 	.word	0xe000ed04

08008654 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b090      	sub	sp, #64	; 0x40
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <xQueueGenericSendFromISR+0x3c>
 8008688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <xQueueGenericSendFromISR+0x40>
 8008690:	2301      	movs	r3, #1
 8008692:	e000      	b.n	8008696 <xQueueGenericSendFromISR+0x42>
 8008694:	2300      	movs	r3, #0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d103      	bne.n	80086be <xQueueGenericSendFromISR+0x6a>
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d101      	bne.n	80086c2 <xQueueGenericSendFromISR+0x6e>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <xQueueGenericSendFromISR+0x70>
 80086c2:	2300      	movs	r3, #0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	623b      	str	r3, [r7, #32]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086de:	f001 fefb 	bl	800a4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086e2:	f3ef 8211 	mrs	r2, BASEPRI
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	61fa      	str	r2, [r7, #28]
 80086f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80086fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008706:	429a      	cmp	r2, r3
 8008708:	d302      	bcc.n	8008710 <xQueueGenericSendFromISR+0xbc>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d12f      	bne.n	8008770 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008726:	f000 f911 	bl	800894c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800872a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800872e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008732:	d112      	bne.n	800875a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	2b00      	cmp	r3, #0
 800873a:	d016      	beq.n	800876a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	3324      	adds	r3, #36	; 0x24
 8008740:	4618      	mov	r0, r3
 8008742:	f000 fed1 	bl	80094e8 <xTaskRemoveFromEventList>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00e      	beq.n	800876a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00b      	beq.n	800876a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	e007      	b.n	800876a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800875a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800875e:	3301      	adds	r3, #1
 8008760:	b2db      	uxtb	r3, r3
 8008762:	b25a      	sxtb	r2, r3
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800876a:	2301      	movs	r3, #1
 800876c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800876e:	e001      	b.n	8008774 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008770:	2300      	movs	r3, #0
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008776:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800877e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008782:	4618      	mov	r0, r3
 8008784:	3740      	adds	r7, #64	; 0x40
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08c      	sub	sp, #48	; 0x30
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008798:	2300      	movs	r3, #0
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10a      	bne.n	80087bc <xQueueReceive+0x30>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	623b      	str	r3, [r7, #32]
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d103      	bne.n	80087ca <xQueueReceive+0x3e>
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <xQueueReceive+0x42>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e000      	b.n	80087d0 <xQueueReceive+0x44>
 80087ce:	2300      	movs	r3, #0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <xQueueReceive+0x5e>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	61fb      	str	r3, [r7, #28]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087ea:	f001 f83b 	bl	8009864 <xTaskGetSchedulerState>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <xQueueReceive+0x6e>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <xQueueReceive+0x72>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e000      	b.n	8008800 <xQueueReceive+0x74>
 80087fe:	2300      	movs	r3, #0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10a      	bne.n	800881a <xQueueReceive+0x8e>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	61bb      	str	r3, [r7, #24]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800881a:	f001 fd7b 	bl	800a314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	2b00      	cmp	r3, #0
 8008828:	d01f      	beq.n	800886a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800882e:	f000 f8f7 	bl	8008a20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	1e5a      	subs	r2, r3, #1
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00f      	beq.n	8008862 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	3310      	adds	r3, #16
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fe4e 	bl	80094e8 <xTaskRemoveFromEventList>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d007      	beq.n	8008862 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008852:	4b3d      	ldr	r3, [pc, #244]	; (8008948 <xQueueReceive+0x1bc>)
 8008854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008862:	f001 fd87 	bl	800a374 <vPortExitCritical>
				return pdPASS;
 8008866:	2301      	movs	r3, #1
 8008868:	e069      	b.n	800893e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d103      	bne.n	8008878 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008870:	f001 fd80 	bl	800a374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008874:	2300      	movs	r3, #0
 8008876:	e062      	b.n	800893e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d106      	bne.n	800888c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800887e:	f107 0310 	add.w	r3, r7, #16
 8008882:	4618      	mov	r0, r3
 8008884:	f000 fe94 	bl	80095b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008888:	2301      	movs	r3, #1
 800888a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800888c:	f001 fd72 	bl	800a374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008890:	f000 fc06 	bl	80090a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008894:	f001 fd3e 	bl	800a314 <vPortEnterCritical>
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800889e:	b25b      	sxtb	r3, r3
 80088a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a4:	d103      	bne.n	80088ae <xQueueReceive+0x122>
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088b4:	b25b      	sxtb	r3, r3
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ba:	d103      	bne.n	80088c4 <xQueueReceive+0x138>
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088c4:	f001 fd56 	bl	800a374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088c8:	1d3a      	adds	r2, r7, #4
 80088ca:	f107 0310 	add.w	r3, r7, #16
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 fe83 	bl	80095dc <xTaskCheckForTimeOut>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d123      	bne.n	8008924 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088de:	f000 f917 	bl	8008b10 <prvIsQueueEmpty>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d017      	beq.n	8008918 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	3324      	adds	r3, #36	; 0x24
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fda9 	bl	8009448 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f8:	f000 f8b8 	bl	8008a6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088fc:	f000 fbde 	bl	80090bc <xTaskResumeAll>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d189      	bne.n	800881a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008906:	4b10      	ldr	r3, [pc, #64]	; (8008948 <xQueueReceive+0x1bc>)
 8008908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	e780      	b.n	800881a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800891a:	f000 f8a7 	bl	8008a6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800891e:	f000 fbcd 	bl	80090bc <xTaskResumeAll>
 8008922:	e77a      	b.n	800881a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008926:	f000 f8a1 	bl	8008a6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800892a:	f000 fbc7 	bl	80090bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800892e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008930:	f000 f8ee 	bl	8008b10 <prvIsQueueEmpty>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	f43f af6f 	beq.w	800881a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800893c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800893e:	4618      	mov	r0, r3
 8008940:	3730      	adds	r7, #48	; 0x30
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008960:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10d      	bne.n	8008986 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d14d      	bne.n	8008a0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 ff92 	bl	80098a0 <xTaskPriorityDisinherit>
 800897c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	609a      	str	r2, [r3, #8]
 8008984:	e043      	b.n	8008a0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d119      	bne.n	80089c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6858      	ldr	r0, [r3, #4]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	461a      	mov	r2, r3
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	f001 fefa 	bl	800a790 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	441a      	add	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d32b      	bcc.n	8008a0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	605a      	str	r2, [r3, #4]
 80089be:	e026      	b.n	8008a0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	68d8      	ldr	r0, [r3, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c8:	461a      	mov	r2, r3
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	f001 fee0 	bl	800a790 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d8:	425b      	negs	r3, r3
 80089da:	441a      	add	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d207      	bcs.n	80089fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f4:	425b      	negs	r3, r3
 80089f6:	441a      	add	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d105      	bne.n	8008a0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a16:	697b      	ldr	r3, [r7, #20]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d018      	beq.n	8008a64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	441a      	add	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d303      	bcc.n	8008a54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68d9      	ldr	r1, [r3, #12]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6838      	ldr	r0, [r7, #0]
 8008a60:	f001 fe96 	bl	800a790 <memcpy>
	}
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a74:	f001 fc4e 	bl	800a314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a80:	e011      	b.n	8008aa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d012      	beq.n	8008ab0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3324      	adds	r3, #36	; 0x24
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fd2a 	bl	80094e8 <xTaskRemoveFromEventList>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a9a:	f000 fe01 	bl	80096a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dce9      	bgt.n	8008a82 <prvUnlockQueue+0x16>
 8008aae:	e000      	b.n	8008ab2 <prvUnlockQueue+0x46>
					break;
 8008ab0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	22ff      	movs	r2, #255	; 0xff
 8008ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008aba:	f001 fc5b 	bl	800a374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008abe:	f001 fc29 	bl	800a314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ac8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008aca:	e011      	b.n	8008af0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d012      	beq.n	8008afa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3310      	adds	r3, #16
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fd05 	bl	80094e8 <xTaskRemoveFromEventList>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ae4:	f000 fddc 	bl	80096a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dce9      	bgt.n	8008acc <prvUnlockQueue+0x60>
 8008af8:	e000      	b.n	8008afc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008afa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	22ff      	movs	r2, #255	; 0xff
 8008b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b04:	f001 fc36 	bl	800a374 <vPortExitCritical>
}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b18:	f001 fbfc 	bl	800a314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d102      	bne.n	8008b2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	e001      	b.n	8008b2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b2e:	f001 fc21 	bl	800a374 <vPortExitCritical>

	return xReturn;
 8008b32:	68fb      	ldr	r3, [r7, #12]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b44:	f001 fbe6 	bl	800a314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d102      	bne.n	8008b5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	e001      	b.n	8008b5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b5e:	f001 fc09 	bl	800a374 <vPortExitCritical>

	return xReturn;
 8008b62:	68fb      	ldr	r3, [r7, #12]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	e014      	b.n	8008ba6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b7c:	4a0f      	ldr	r2, [pc, #60]	; (8008bbc <vQueueAddToRegistry+0x50>)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10b      	bne.n	8008ba0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b88:	490c      	ldr	r1, [pc, #48]	; (8008bbc <vQueueAddToRegistry+0x50>)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b92:	4a0a      	ldr	r2, [pc, #40]	; (8008bbc <vQueueAddToRegistry+0x50>)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	4413      	add	r3, r2
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b9e:	e006      	b.n	8008bae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b07      	cmp	r3, #7
 8008baa:	d9e7      	bls.n	8008b7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	2000873c 	.word	0x2000873c

08008bc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008bd0:	f001 fba0 	bl	800a314 <vPortEnterCritical>
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bda:	b25b      	sxtb	r3, r3
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be0:	d103      	bne.n	8008bea <vQueueWaitForMessageRestricted+0x2a>
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bf0:	b25b      	sxtb	r3, r3
 8008bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf6:	d103      	bne.n	8008c00 <vQueueWaitForMessageRestricted+0x40>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c00:	f001 fbb8 	bl	800a374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	3324      	adds	r3, #36	; 0x24
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fc3b 	bl	8009490 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c1a:	6978      	ldr	r0, [r7, #20]
 8008c1c:	f7ff ff26 	bl	8008a6c <prvUnlockQueue>
	}
 8008c20:	bf00      	nop
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08e      	sub	sp, #56	; 0x38
 8008c2c:	af04      	add	r7, sp, #16
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10a      	bne.n	8008c52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	623b      	str	r3, [r7, #32]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10a      	bne.n	8008c6e <xTaskCreateStatic+0x46>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	61fb      	str	r3, [r7, #28]
}
 8008c6a:	bf00      	nop
 8008c6c:	e7fe      	b.n	8008c6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c6e:	235c      	movs	r3, #92	; 0x5c
 8008c70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b5c      	cmp	r3, #92	; 0x5c
 8008c76:	d00a      	beq.n	8008c8e <xTaskCreateStatic+0x66>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	61bb      	str	r3, [r7, #24]
}
 8008c8a:	bf00      	nop
 8008c8c:	e7fe      	b.n	8008c8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01e      	beq.n	8008cd4 <xTaskCreateStatic+0xac>
 8008c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d01b      	beq.n	8008cd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ca4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	2202      	movs	r2, #2
 8008caa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cae:	2300      	movs	r3, #0
 8008cb0:	9303      	str	r3, [sp, #12]
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	f107 0314 	add.w	r3, r7, #20
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f850 	bl	8008d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cce:	f000 f8dd 	bl	8008e8c <prvAddNewTaskToReadyList>
 8008cd2:	e001      	b.n	8008cd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cd8:	697b      	ldr	r3, [r7, #20]
	}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3728      	adds	r7, #40	; 0x28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b08c      	sub	sp, #48	; 0x30
 8008ce6:	af04      	add	r7, sp, #16
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	603b      	str	r3, [r7, #0]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cf2:	88fb      	ldrh	r3, [r7, #6]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 fc2e 	bl	800a558 <pvPortMalloc>
 8008cfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00e      	beq.n	8008d22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d04:	205c      	movs	r0, #92	; 0x5c
 8008d06:	f001 fc27 	bl	800a558 <pvPortMalloc>
 8008d0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	631a      	str	r2, [r3, #48]	; 0x30
 8008d18:	e005      	b.n	8008d26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d1a:	6978      	ldr	r0, [r7, #20]
 8008d1c:	f001 fcaa 	bl	800a674 <vPortFree>
 8008d20:	e001      	b.n	8008d26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d017      	beq.n	8008d5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d34:	88fa      	ldrh	r2, [r7, #6]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9303      	str	r3, [sp, #12]
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	9302      	str	r3, [sp, #8]
 8008d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 f80e 	bl	8008d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d50:	69f8      	ldr	r0, [r7, #28]
 8008d52:	f000 f89b 	bl	8008e8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d56:	2301      	movs	r3, #1
 8008d58:	61bb      	str	r3, [r7, #24]
 8008d5a:	e002      	b.n	8008d62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d62:	69bb      	ldr	r3, [r7, #24]
	}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	461a      	mov	r2, r3
 8008d84:	21a5      	movs	r1, #165	; 0xa5
 8008d86:	f001 fd11 	bl	800a7ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d94:	3b01      	subs	r3, #1
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f023 0307 	bic.w	r3, r3, #7
 8008da2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	617b      	str	r3, [r7, #20]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01f      	beq.n	8008e0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	e012      	b.n	8008df6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	7819      	ldrb	r1, [r3, #0]
 8008dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	3334      	adds	r3, #52	; 0x34
 8008de0:	460a      	mov	r2, r1
 8008de2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d006      	beq.n	8008dfe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	3301      	adds	r3, #1
 8008df4:	61fb      	str	r3, [r7, #28]
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	2b0f      	cmp	r3, #15
 8008dfa:	d9e9      	bls.n	8008dd0 <prvInitialiseNewTask+0x64>
 8008dfc:	e000      	b.n	8008e00 <prvInitialiseNewTask+0x94>
			{
				break;
 8008dfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e08:	e003      	b.n	8008e12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	2b37      	cmp	r3, #55	; 0x37
 8008e16:	d901      	bls.n	8008e1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e18:	2337      	movs	r3, #55	; 0x37
 8008e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	3304      	adds	r3, #4
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff f978 	bl	8008128 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	3318      	adds	r3, #24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff f973 	bl	8008128 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	68f9      	ldr	r1, [r7, #12]
 8008e6a:	69b8      	ldr	r0, [r7, #24]
 8008e6c:	f001 f928 	bl	800a0c0 <pxPortInitialiseStack>
 8008e70:	4602      	mov	r2, r0
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e82:	bf00      	nop
 8008e84:	3720      	adds	r7, #32
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e94:	f001 fa3e 	bl	800a314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e98:	4b2d      	ldr	r3, [pc, #180]	; (8008f50 <prvAddNewTaskToReadyList+0xc4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	4a2c      	ldr	r2, [pc, #176]	; (8008f50 <prvAddNewTaskToReadyList+0xc4>)
 8008ea0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ea2:	4b2c      	ldr	r3, [pc, #176]	; (8008f54 <prvAddNewTaskToReadyList+0xc8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008eaa:	4a2a      	ldr	r2, [pc, #168]	; (8008f54 <prvAddNewTaskToReadyList+0xc8>)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008eb0:	4b27      	ldr	r3, [pc, #156]	; (8008f50 <prvAddNewTaskToReadyList+0xc4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d110      	bne.n	8008eda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008eb8:	f000 fc16 	bl	80096e8 <prvInitialiseTaskLists>
 8008ebc:	e00d      	b.n	8008eda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ebe:	4b26      	ldr	r3, [pc, #152]	; (8008f58 <prvAddNewTaskToReadyList+0xcc>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d109      	bne.n	8008eda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ec6:	4b23      	ldr	r3, [pc, #140]	; (8008f54 <prvAddNewTaskToReadyList+0xc8>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d802      	bhi.n	8008eda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ed4:	4a1f      	ldr	r2, [pc, #124]	; (8008f54 <prvAddNewTaskToReadyList+0xc8>)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eda:	4b20      	ldr	r3, [pc, #128]	; (8008f5c <prvAddNewTaskToReadyList+0xd0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	4a1e      	ldr	r2, [pc, #120]	; (8008f5c <prvAddNewTaskToReadyList+0xd0>)
 8008ee2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ee4:	4b1d      	ldr	r3, [pc, #116]	; (8008f5c <prvAddNewTaskToReadyList+0xd0>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef0:	4b1b      	ldr	r3, [pc, #108]	; (8008f60 <prvAddNewTaskToReadyList+0xd4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d903      	bls.n	8008f00 <prvAddNewTaskToReadyList+0x74>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	4a18      	ldr	r2, [pc, #96]	; (8008f60 <prvAddNewTaskToReadyList+0xd4>)
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4a15      	ldr	r2, [pc, #84]	; (8008f64 <prvAddNewTaskToReadyList+0xd8>)
 8008f0e:	441a      	add	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f7ff f913 	bl	8008142 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f1c:	f001 fa2a 	bl	800a374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f20:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <prvAddNewTaskToReadyList+0xcc>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00e      	beq.n	8008f46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f28:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <prvAddNewTaskToReadyList+0xc8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d207      	bcs.n	8008f46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f36:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <prvAddNewTaskToReadyList+0xdc>)
 8008f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000d94 	.word	0x20000d94
 8008f54:	200008c0 	.word	0x200008c0
 8008f58:	20000da0 	.word	0x20000da0
 8008f5c:	20000db0 	.word	0x20000db0
 8008f60:	20000d9c 	.word	0x20000d9c
 8008f64:	200008c4 	.word	0x200008c4
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d017      	beq.n	8008fae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f7e:	4b13      	ldr	r3, [pc, #76]	; (8008fcc <vTaskDelay+0x60>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <vTaskDelay+0x30>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	60bb      	str	r3, [r7, #8]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f9c:	f000 f880 	bl	80090a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fcea 	bl	800997c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fa8:	f000 f888 	bl	80090bc <xTaskResumeAll>
 8008fac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d107      	bne.n	8008fc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008fb4:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <vTaskDelay+0x64>)
 8008fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fc4:	bf00      	nop
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000dbc 	.word	0x20000dbc
 8008fd0:	e000ed04 	.word	0xe000ed04

08008fd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b08a      	sub	sp, #40	; 0x28
 8008fd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	1d39      	adds	r1, r7, #4
 8008fe6:	f107 0308 	add.w	r3, r7, #8
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff f848 	bl	8008080 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	9202      	str	r2, [sp, #8]
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	2300      	movs	r3, #0
 8009000:	460a      	mov	r2, r1
 8009002:	4921      	ldr	r1, [pc, #132]	; (8009088 <vTaskStartScheduler+0xb4>)
 8009004:	4821      	ldr	r0, [pc, #132]	; (800908c <vTaskStartScheduler+0xb8>)
 8009006:	f7ff fe0f 	bl	8008c28 <xTaskCreateStatic>
 800900a:	4603      	mov	r3, r0
 800900c:	4a20      	ldr	r2, [pc, #128]	; (8009090 <vTaskStartScheduler+0xbc>)
 800900e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009010:	4b1f      	ldr	r3, [pc, #124]	; (8009090 <vTaskStartScheduler+0xbc>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009018:	2301      	movs	r3, #1
 800901a:	617b      	str	r3, [r7, #20]
 800901c:	e001      	b.n	8009022 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800901e:	2300      	movs	r3, #0
 8009020:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d102      	bne.n	800902e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009028:	f000 fcfc 	bl	8009a24 <xTimerCreateTimerTask>
 800902c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d116      	bne.n	8009062 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	613b      	str	r3, [r7, #16]
}
 8009046:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009048:	4b12      	ldr	r3, [pc, #72]	; (8009094 <vTaskStartScheduler+0xc0>)
 800904a:	f04f 32ff 	mov.w	r2, #4294967295
 800904e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009050:	4b11      	ldr	r3, [pc, #68]	; (8009098 <vTaskStartScheduler+0xc4>)
 8009052:	2201      	movs	r2, #1
 8009054:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009056:	4b11      	ldr	r3, [pc, #68]	; (800909c <vTaskStartScheduler+0xc8>)
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800905c:	f001 f8b8 	bl	800a1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009060:	e00e      	b.n	8009080 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009068:	d10a      	bne.n	8009080 <vTaskStartScheduler+0xac>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	60fb      	str	r3, [r7, #12]
}
 800907c:	bf00      	nop
 800907e:	e7fe      	b.n	800907e <vTaskStartScheduler+0xaa>
}
 8009080:	bf00      	nop
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	0800d5b4 	.word	0x0800d5b4
 800908c:	080096b9 	.word	0x080096b9
 8009090:	20000db8 	.word	0x20000db8
 8009094:	20000db4 	.word	0x20000db4
 8009098:	20000da0 	.word	0x20000da0
 800909c:	20000d98 	.word	0x20000d98

080090a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090a4:	4b04      	ldr	r3, [pc, #16]	; (80090b8 <vTaskSuspendAll+0x18>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3301      	adds	r3, #1
 80090aa:	4a03      	ldr	r2, [pc, #12]	; (80090b8 <vTaskSuspendAll+0x18>)
 80090ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090ae:	bf00      	nop
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	20000dbc 	.word	0x20000dbc

080090bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090ca:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <xTaskResumeAll+0x118>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	603b      	str	r3, [r7, #0]
}
 80090e4:	bf00      	nop
 80090e6:	e7fe      	b.n	80090e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090e8:	f001 f914 	bl	800a314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090ec:	4b39      	ldr	r3, [pc, #228]	; (80091d4 <xTaskResumeAll+0x118>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	4a38      	ldr	r2, [pc, #224]	; (80091d4 <xTaskResumeAll+0x118>)
 80090f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090f6:	4b37      	ldr	r3, [pc, #220]	; (80091d4 <xTaskResumeAll+0x118>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d162      	bne.n	80091c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090fe:	4b36      	ldr	r3, [pc, #216]	; (80091d8 <xTaskResumeAll+0x11c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d05e      	beq.n	80091c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009106:	e02f      	b.n	8009168 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009108:	4b34      	ldr	r3, [pc, #208]	; (80091dc <xTaskResumeAll+0x120>)
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3318      	adds	r3, #24
 8009114:	4618      	mov	r0, r3
 8009116:	f7ff f871 	bl	80081fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3304      	adds	r3, #4
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff f86c 	bl	80081fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009128:	4b2d      	ldr	r3, [pc, #180]	; (80091e0 <xTaskResumeAll+0x124>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d903      	bls.n	8009138 <xTaskResumeAll+0x7c>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	4a2a      	ldr	r2, [pc, #168]	; (80091e0 <xTaskResumeAll+0x124>)
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4a27      	ldr	r2, [pc, #156]	; (80091e4 <xTaskResumeAll+0x128>)
 8009146:	441a      	add	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3304      	adds	r3, #4
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7fe fff7 	bl	8008142 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009158:	4b23      	ldr	r3, [pc, #140]	; (80091e8 <xTaskResumeAll+0x12c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	429a      	cmp	r2, r3
 8009160:	d302      	bcc.n	8009168 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009162:	4b22      	ldr	r3, [pc, #136]	; (80091ec <xTaskResumeAll+0x130>)
 8009164:	2201      	movs	r2, #1
 8009166:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009168:	4b1c      	ldr	r3, [pc, #112]	; (80091dc <xTaskResumeAll+0x120>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1cb      	bne.n	8009108 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009176:	f000 fb55 	bl	8009824 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800917a:	4b1d      	ldr	r3, [pc, #116]	; (80091f0 <xTaskResumeAll+0x134>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d010      	beq.n	80091a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009186:	f000 f847 	bl	8009218 <xTaskIncrementTick>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009190:	4b16      	ldr	r3, [pc, #88]	; (80091ec <xTaskResumeAll+0x130>)
 8009192:	2201      	movs	r2, #1
 8009194:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3b01      	subs	r3, #1
 800919a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f1      	bne.n	8009186 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80091a2:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <xTaskResumeAll+0x134>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091a8:	4b10      	ldr	r3, [pc, #64]	; (80091ec <xTaskResumeAll+0x130>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d009      	beq.n	80091c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091b0:	2301      	movs	r3, #1
 80091b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091b4:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <xTaskResumeAll+0x138>)
 80091b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091c4:	f001 f8d6 	bl	800a374 <vPortExitCritical>

	return xAlreadyYielded;
 80091c8:	68bb      	ldr	r3, [r7, #8]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20000dbc 	.word	0x20000dbc
 80091d8:	20000d94 	.word	0x20000d94
 80091dc:	20000d54 	.word	0x20000d54
 80091e0:	20000d9c 	.word	0x20000d9c
 80091e4:	200008c4 	.word	0x200008c4
 80091e8:	200008c0 	.word	0x200008c0
 80091ec:	20000da8 	.word	0x20000da8
 80091f0:	20000da4 	.word	0x20000da4
 80091f4:	e000ed04 	.word	0xe000ed04

080091f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091fe:	4b05      	ldr	r3, [pc, #20]	; (8009214 <xTaskGetTickCount+0x1c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009204:	687b      	ldr	r3, [r7, #4]
}
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20000d98 	.word	0x20000d98

08009218 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800921e:	2300      	movs	r3, #0
 8009220:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009222:	4b4f      	ldr	r3, [pc, #316]	; (8009360 <xTaskIncrementTick+0x148>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f040 808f 	bne.w	800934a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800922c:	4b4d      	ldr	r3, [pc, #308]	; (8009364 <xTaskIncrementTick+0x14c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009234:	4a4b      	ldr	r2, [pc, #300]	; (8009364 <xTaskIncrementTick+0x14c>)
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d120      	bne.n	8009282 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009240:	4b49      	ldr	r3, [pc, #292]	; (8009368 <xTaskIncrementTick+0x150>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <xTaskIncrementTick+0x48>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	603b      	str	r3, [r7, #0]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <xTaskIncrementTick+0x46>
 8009260:	4b41      	ldr	r3, [pc, #260]	; (8009368 <xTaskIncrementTick+0x150>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	4b41      	ldr	r3, [pc, #260]	; (800936c <xTaskIncrementTick+0x154>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a3f      	ldr	r2, [pc, #252]	; (8009368 <xTaskIncrementTick+0x150>)
 800926c:	6013      	str	r3, [r2, #0]
 800926e:	4a3f      	ldr	r2, [pc, #252]	; (800936c <xTaskIncrementTick+0x154>)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	4b3e      	ldr	r3, [pc, #248]	; (8009370 <xTaskIncrementTick+0x158>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3301      	adds	r3, #1
 800927a:	4a3d      	ldr	r2, [pc, #244]	; (8009370 <xTaskIncrementTick+0x158>)
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	f000 fad1 	bl	8009824 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009282:	4b3c      	ldr	r3, [pc, #240]	; (8009374 <xTaskIncrementTick+0x15c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	429a      	cmp	r2, r3
 800928a:	d349      	bcc.n	8009320 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800928c:	4b36      	ldr	r3, [pc, #216]	; (8009368 <xTaskIncrementTick+0x150>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d104      	bne.n	80092a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009296:	4b37      	ldr	r3, [pc, #220]	; (8009374 <xTaskIncrementTick+0x15c>)
 8009298:	f04f 32ff 	mov.w	r2, #4294967295
 800929c:	601a      	str	r2, [r3, #0]
					break;
 800929e:	e03f      	b.n	8009320 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a0:	4b31      	ldr	r3, [pc, #196]	; (8009368 <xTaskIncrementTick+0x150>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d203      	bcs.n	80092c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092b8:	4a2e      	ldr	r2, [pc, #184]	; (8009374 <xTaskIncrementTick+0x15c>)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092be:	e02f      	b.n	8009320 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe ff99 	bl	80081fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d004      	beq.n	80092dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	3318      	adds	r3, #24
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe ff90 	bl	80081fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e0:	4b25      	ldr	r3, [pc, #148]	; (8009378 <xTaskIncrementTick+0x160>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d903      	bls.n	80092f0 <xTaskIncrementTick+0xd8>
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	4a22      	ldr	r2, [pc, #136]	; (8009378 <xTaskIncrementTick+0x160>)
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4a1f      	ldr	r2, [pc, #124]	; (800937c <xTaskIncrementTick+0x164>)
 80092fe:	441a      	add	r2, r3
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	3304      	adds	r3, #4
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f7fe ff1b 	bl	8008142 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009310:	4b1b      	ldr	r3, [pc, #108]	; (8009380 <xTaskIncrementTick+0x168>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009316:	429a      	cmp	r2, r3
 8009318:	d3b8      	bcc.n	800928c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800931a:	2301      	movs	r3, #1
 800931c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800931e:	e7b5      	b.n	800928c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009320:	4b17      	ldr	r3, [pc, #92]	; (8009380 <xTaskIncrementTick+0x168>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009326:	4915      	ldr	r1, [pc, #84]	; (800937c <xTaskIncrementTick+0x164>)
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d901      	bls.n	800933c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009338:	2301      	movs	r3, #1
 800933a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800933c:	4b11      	ldr	r3, [pc, #68]	; (8009384 <xTaskIncrementTick+0x16c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009344:	2301      	movs	r3, #1
 8009346:	617b      	str	r3, [r7, #20]
 8009348:	e004      	b.n	8009354 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800934a:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <xTaskIncrementTick+0x170>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3301      	adds	r3, #1
 8009350:	4a0d      	ldr	r2, [pc, #52]	; (8009388 <xTaskIncrementTick+0x170>)
 8009352:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009354:	697b      	ldr	r3, [r7, #20]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20000dbc 	.word	0x20000dbc
 8009364:	20000d98 	.word	0x20000d98
 8009368:	20000d4c 	.word	0x20000d4c
 800936c:	20000d50 	.word	0x20000d50
 8009370:	20000dac 	.word	0x20000dac
 8009374:	20000db4 	.word	0x20000db4
 8009378:	20000d9c 	.word	0x20000d9c
 800937c:	200008c4 	.word	0x200008c4
 8009380:	200008c0 	.word	0x200008c0
 8009384:	20000da8 	.word	0x20000da8
 8009388:	20000da4 	.word	0x20000da4

0800938c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009392:	4b28      	ldr	r3, [pc, #160]	; (8009434 <vTaskSwitchContext+0xa8>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800939a:	4b27      	ldr	r3, [pc, #156]	; (8009438 <vTaskSwitchContext+0xac>)
 800939c:	2201      	movs	r2, #1
 800939e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093a0:	e041      	b.n	8009426 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80093a2:	4b25      	ldr	r3, [pc, #148]	; (8009438 <vTaskSwitchContext+0xac>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a8:	4b24      	ldr	r3, [pc, #144]	; (800943c <vTaskSwitchContext+0xb0>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	60fb      	str	r3, [r7, #12]
 80093ae:	e010      	b.n	80093d2 <vTaskSwitchContext+0x46>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <vTaskSwitchContext+0x40>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	607b      	str	r3, [r7, #4]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <vTaskSwitchContext+0x3e>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	60fb      	str	r3, [r7, #12]
 80093d2:	491b      	ldr	r1, [pc, #108]	; (8009440 <vTaskSwitchContext+0xb4>)
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0e4      	beq.n	80093b0 <vTaskSwitchContext+0x24>
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4613      	mov	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4a13      	ldr	r2, [pc, #76]	; (8009440 <vTaskSwitchContext+0xb4>)
 80093f2:	4413      	add	r3, r2
 80093f4:	60bb      	str	r3, [r7, #8]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	605a      	str	r2, [r3, #4]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	3308      	adds	r3, #8
 8009408:	429a      	cmp	r2, r3
 800940a:	d104      	bne.n	8009416 <vTaskSwitchContext+0x8a>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	605a      	str	r2, [r3, #4]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	4a09      	ldr	r2, [pc, #36]	; (8009444 <vTaskSwitchContext+0xb8>)
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	4a06      	ldr	r2, [pc, #24]	; (800943c <vTaskSwitchContext+0xb0>)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6013      	str	r3, [r2, #0]
}
 8009426:	bf00      	nop
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000dbc 	.word	0x20000dbc
 8009438:	20000da8 	.word	0x20000da8
 800943c:	20000d9c 	.word	0x20000d9c
 8009440:	200008c4 	.word	0x200008c4
 8009444:	200008c0 	.word	0x200008c0

08009448 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10a      	bne.n	800946e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60fb      	str	r3, [r7, #12]
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800946e:	4b07      	ldr	r3, [pc, #28]	; (800948c <vTaskPlaceOnEventList+0x44>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3318      	adds	r3, #24
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7fe fe87 	bl	800818a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800947c:	2101      	movs	r1, #1
 800947e:	6838      	ldr	r0, [r7, #0]
 8009480:	f000 fa7c 	bl	800997c <prvAddCurrentTaskToDelayedList>
}
 8009484:	bf00      	nop
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	200008c0 	.word	0x200008c0

08009490 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	617b      	str	r3, [r7, #20]
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094b8:	4b0a      	ldr	r3, [pc, #40]	; (80094e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3318      	adds	r3, #24
 80094be:	4619      	mov	r1, r3
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f7fe fe3e 	bl	8008142 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80094cc:	f04f 33ff 	mov.w	r3, #4294967295
 80094d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	68b8      	ldr	r0, [r7, #8]
 80094d6:	f000 fa51 	bl	800997c <prvAddCurrentTaskToDelayedList>
	}
 80094da:	bf00      	nop
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	200008c0 	.word	0x200008c0

080094e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	60fb      	str	r3, [r7, #12]
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	3318      	adds	r3, #24
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe fe6f 	bl	80081fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800951e:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <xTaskRemoveFromEventList+0xb0>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d11d      	bne.n	8009562 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	3304      	adds	r3, #4
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fe66 	bl	80081fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009534:	4b19      	ldr	r3, [pc, #100]	; (800959c <xTaskRemoveFromEventList+0xb4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d903      	bls.n	8009544 <xTaskRemoveFromEventList+0x5c>
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	4a16      	ldr	r2, [pc, #88]	; (800959c <xTaskRemoveFromEventList+0xb4>)
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4a13      	ldr	r2, [pc, #76]	; (80095a0 <xTaskRemoveFromEventList+0xb8>)
 8009552:	441a      	add	r2, r3
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	3304      	adds	r3, #4
 8009558:	4619      	mov	r1, r3
 800955a:	4610      	mov	r0, r2
 800955c:	f7fe fdf1 	bl	8008142 <vListInsertEnd>
 8009560:	e005      	b.n	800956e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	3318      	adds	r3, #24
 8009566:	4619      	mov	r1, r3
 8009568:	480e      	ldr	r0, [pc, #56]	; (80095a4 <xTaskRemoveFromEventList+0xbc>)
 800956a:	f7fe fdea 	bl	8008142 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009572:	4b0d      	ldr	r3, [pc, #52]	; (80095a8 <xTaskRemoveFromEventList+0xc0>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	429a      	cmp	r2, r3
 800957a:	d905      	bls.n	8009588 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800957c:	2301      	movs	r3, #1
 800957e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <xTaskRemoveFromEventList+0xc4>)
 8009582:	2201      	movs	r2, #1
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	e001      	b.n	800958c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009588:	2300      	movs	r3, #0
 800958a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800958c:	697b      	ldr	r3, [r7, #20]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20000dbc 	.word	0x20000dbc
 800959c:	20000d9c 	.word	0x20000d9c
 80095a0:	200008c4 	.word	0x200008c4
 80095a4:	20000d54 	.word	0x20000d54
 80095a8:	200008c0 	.word	0x200008c0
 80095ac:	20000da8 	.word	0x20000da8

080095b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095b8:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <vTaskInternalSetTimeOutState+0x24>)
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095c0:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <vTaskInternalSetTimeOutState+0x28>)
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	605a      	str	r2, [r3, #4]
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	20000dac 	.word	0x20000dac
 80095d8:	20000d98 	.word	0x20000d98

080095dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	613b      	str	r3, [r7, #16]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10a      	bne.n	800961e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	60fb      	str	r3, [r7, #12]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800961e:	f000 fe79 	bl	800a314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009622:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <xTaskCheckForTimeOut+0xbc>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	d102      	bne.n	8009642 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800963c:	2300      	movs	r3, #0
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	e023      	b.n	800968a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	4b15      	ldr	r3, [pc, #84]	; (800969c <xTaskCheckForTimeOut+0xc0>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d007      	beq.n	800965e <xTaskCheckForTimeOut+0x82>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	429a      	cmp	r2, r3
 8009656:	d302      	bcc.n	800965e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009658:	2301      	movs	r3, #1
 800965a:	61fb      	str	r3, [r7, #28]
 800965c:	e015      	b.n	800968a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	429a      	cmp	r2, r3
 8009666:	d20b      	bcs.n	8009680 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	1ad2      	subs	r2, r2, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff ff9b 	bl	80095b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800967a:	2300      	movs	r3, #0
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	e004      	b.n	800968a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009686:	2301      	movs	r3, #1
 8009688:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800968a:	f000 fe73 	bl	800a374 <vPortExitCritical>

	return xReturn;
 800968e:	69fb      	ldr	r3, [r7, #28]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3720      	adds	r7, #32
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000d98 	.word	0x20000d98
 800969c:	20000dac 	.word	0x20000dac

080096a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096a4:	4b03      	ldr	r3, [pc, #12]	; (80096b4 <vTaskMissedYield+0x14>)
 80096a6:	2201      	movs	r2, #1
 80096a8:	601a      	str	r2, [r3, #0]
}
 80096aa:	bf00      	nop
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	20000da8 	.word	0x20000da8

080096b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096c0:	f000 f852 	bl	8009768 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096c4:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <prvIdleTask+0x28>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d9f9      	bls.n	80096c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <prvIdleTask+0x2c>)
 80096ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096dc:	e7f0      	b.n	80096c0 <prvIdleTask+0x8>
 80096de:	bf00      	nop
 80096e0:	200008c4 	.word	0x200008c4
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096ee:	2300      	movs	r3, #0
 80096f0:	607b      	str	r3, [r7, #4]
 80096f2:	e00c      	b.n	800970e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4a12      	ldr	r2, [pc, #72]	; (8009748 <prvInitialiseTaskLists+0x60>)
 8009700:	4413      	add	r3, r2
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe fcf0 	bl	80080e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3301      	adds	r3, #1
 800970c:	607b      	str	r3, [r7, #4]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b37      	cmp	r3, #55	; 0x37
 8009712:	d9ef      	bls.n	80096f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009714:	480d      	ldr	r0, [pc, #52]	; (800974c <prvInitialiseTaskLists+0x64>)
 8009716:	f7fe fce7 	bl	80080e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800971a:	480d      	ldr	r0, [pc, #52]	; (8009750 <prvInitialiseTaskLists+0x68>)
 800971c:	f7fe fce4 	bl	80080e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009720:	480c      	ldr	r0, [pc, #48]	; (8009754 <prvInitialiseTaskLists+0x6c>)
 8009722:	f7fe fce1 	bl	80080e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009726:	480c      	ldr	r0, [pc, #48]	; (8009758 <prvInitialiseTaskLists+0x70>)
 8009728:	f7fe fcde 	bl	80080e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800972c:	480b      	ldr	r0, [pc, #44]	; (800975c <prvInitialiseTaskLists+0x74>)
 800972e:	f7fe fcdb 	bl	80080e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009732:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <prvInitialiseTaskLists+0x78>)
 8009734:	4a05      	ldr	r2, [pc, #20]	; (800974c <prvInitialiseTaskLists+0x64>)
 8009736:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009738:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <prvInitialiseTaskLists+0x7c>)
 800973a:	4a05      	ldr	r2, [pc, #20]	; (8009750 <prvInitialiseTaskLists+0x68>)
 800973c:	601a      	str	r2, [r3, #0]
}
 800973e:	bf00      	nop
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	200008c4 	.word	0x200008c4
 800974c:	20000d24 	.word	0x20000d24
 8009750:	20000d38 	.word	0x20000d38
 8009754:	20000d54 	.word	0x20000d54
 8009758:	20000d68 	.word	0x20000d68
 800975c:	20000d80 	.word	0x20000d80
 8009760:	20000d4c 	.word	0x20000d4c
 8009764:	20000d50 	.word	0x20000d50

08009768 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800976e:	e019      	b.n	80097a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009770:	f000 fdd0 	bl	800a314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009774:	4b10      	ldr	r3, [pc, #64]	; (80097b8 <prvCheckTasksWaitingTermination+0x50>)
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe fd3b 	bl	80081fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009786:	4b0d      	ldr	r3, [pc, #52]	; (80097bc <prvCheckTasksWaitingTermination+0x54>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3b01      	subs	r3, #1
 800978c:	4a0b      	ldr	r2, [pc, #44]	; (80097bc <prvCheckTasksWaitingTermination+0x54>)
 800978e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009790:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <prvCheckTasksWaitingTermination+0x58>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3b01      	subs	r3, #1
 8009796:	4a0a      	ldr	r2, [pc, #40]	; (80097c0 <prvCheckTasksWaitingTermination+0x58>)
 8009798:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800979a:	f000 fdeb 	bl	800a374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f810 	bl	80097c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097a4:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <prvCheckTasksWaitingTermination+0x58>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e1      	bne.n	8009770 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000d68 	.word	0x20000d68
 80097bc:	20000d94 	.word	0x20000d94
 80097c0:	20000d7c 	.word	0x20000d7c

080097c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d108      	bne.n	80097e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 ff4a 	bl	800a674 <vPortFree>
				vPortFree( pxTCB );
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 ff47 	bl	800a674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097e6:	e018      	b.n	800981a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d103      	bne.n	80097fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 ff3e 	bl	800a674 <vPortFree>
	}
 80097f8:	e00f      	b.n	800981a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009800:	2b02      	cmp	r3, #2
 8009802:	d00a      	beq.n	800981a <prvDeleteTCB+0x56>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	60fb      	str	r3, [r7, #12]
}
 8009816:	bf00      	nop
 8009818:	e7fe      	b.n	8009818 <prvDeleteTCB+0x54>
	}
 800981a:	bf00      	nop
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800982a:	4b0c      	ldr	r3, [pc, #48]	; (800985c <prvResetNextTaskUnblockTime+0x38>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009834:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <prvResetNextTaskUnblockTime+0x3c>)
 8009836:	f04f 32ff 	mov.w	r2, #4294967295
 800983a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800983c:	e008      	b.n	8009850 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983e:	4b07      	ldr	r3, [pc, #28]	; (800985c <prvResetNextTaskUnblockTime+0x38>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	4a04      	ldr	r2, [pc, #16]	; (8009860 <prvResetNextTaskUnblockTime+0x3c>)
 800984e:	6013      	str	r3, [r2, #0]
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	20000d4c 	.word	0x20000d4c
 8009860:	20000db4 	.word	0x20000db4

08009864 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800986a:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <xTaskGetSchedulerState+0x34>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d102      	bne.n	8009878 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009872:	2301      	movs	r3, #1
 8009874:	607b      	str	r3, [r7, #4]
 8009876:	e008      	b.n	800988a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009878:	4b08      	ldr	r3, [pc, #32]	; (800989c <xTaskGetSchedulerState+0x38>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009880:	2302      	movs	r3, #2
 8009882:	607b      	str	r3, [r7, #4]
 8009884:	e001      	b.n	800988a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009886:	2300      	movs	r3, #0
 8009888:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800988a:	687b      	ldr	r3, [r7, #4]
	}
 800988c:	4618      	mov	r0, r3
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	20000da0 	.word	0x20000da0
 800989c:	20000dbc 	.word	0x20000dbc

080098a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098ac:	2300      	movs	r3, #0
 80098ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d056      	beq.n	8009964 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098b6:	4b2e      	ldr	r3, [pc, #184]	; (8009970 <xTaskPriorityDisinherit+0xd0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d00a      	beq.n	80098d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	60fb      	str	r3, [r7, #12]
}
 80098d2:	bf00      	nop
 80098d4:	e7fe      	b.n	80098d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60bb      	str	r3, [r7, #8]
}
 80098f0:	bf00      	nop
 80098f2:	e7fe      	b.n	80098f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f8:	1e5a      	subs	r2, r3, #1
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009906:	429a      	cmp	r2, r3
 8009908:	d02c      	beq.n	8009964 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800990e:	2b00      	cmp	r3, #0
 8009910:	d128      	bne.n	8009964 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	3304      	adds	r3, #4
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fc70 	bl	80081fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <xTaskPriorityDisinherit+0xd4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d903      	bls.n	8009944 <xTaskPriorityDisinherit+0xa4>
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009940:	4a0c      	ldr	r2, [pc, #48]	; (8009974 <xTaskPriorityDisinherit+0xd4>)
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4a09      	ldr	r2, [pc, #36]	; (8009978 <xTaskPriorityDisinherit+0xd8>)
 8009952:	441a      	add	r2, r3
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3304      	adds	r3, #4
 8009958:	4619      	mov	r1, r3
 800995a:	4610      	mov	r0, r2
 800995c:	f7fe fbf1 	bl	8008142 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009960:	2301      	movs	r3, #1
 8009962:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009964:	697b      	ldr	r3, [r7, #20]
	}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	200008c0 	.word	0x200008c0
 8009974:	20000d9c 	.word	0x20000d9c
 8009978:	200008c4 	.word	0x200008c4

0800997c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009986:	4b21      	ldr	r3, [pc, #132]	; (8009a0c <prvAddCurrentTaskToDelayedList+0x90>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800998c:	4b20      	ldr	r3, [pc, #128]	; (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3304      	adds	r3, #4
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fc32 	bl	80081fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999e:	d10a      	bne.n	80099b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d007      	beq.n	80099b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099a6:	4b1a      	ldr	r3, [pc, #104]	; (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	4819      	ldr	r0, [pc, #100]	; (8009a14 <prvAddCurrentTaskToDelayedList+0x98>)
 80099b0:	f7fe fbc7 	bl	8008142 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099b4:	e026      	b.n	8009a04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4413      	add	r3, r2
 80099bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099be:	4b14      	ldr	r3, [pc, #80]	; (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d209      	bcs.n	80099e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4b0f      	ldr	r3, [pc, #60]	; (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4619      	mov	r1, r3
 80099da:	4610      	mov	r0, r2
 80099dc:	f7fe fbd5 	bl	800818a <vListInsert>
}
 80099e0:	e010      	b.n	8009a04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099e2:	4b0e      	ldr	r3, [pc, #56]	; (8009a1c <prvAddCurrentTaskToDelayedList+0xa0>)
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3304      	adds	r3, #4
 80099ec:	4619      	mov	r1, r3
 80099ee:	4610      	mov	r0, r2
 80099f0:	f7fe fbcb 	bl	800818a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099f4:	4b0a      	ldr	r3, [pc, #40]	; (8009a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d202      	bcs.n	8009a04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099fe:	4a08      	ldr	r2, [pc, #32]	; (8009a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	6013      	str	r3, [r2, #0]
}
 8009a04:	bf00      	nop
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000d98 	.word	0x20000d98
 8009a10:	200008c0 	.word	0x200008c0
 8009a14:	20000d80 	.word	0x20000d80
 8009a18:	20000d50 	.word	0x20000d50
 8009a1c:	20000d4c 	.word	0x20000d4c
 8009a20:	20000db4 	.word	0x20000db4

08009a24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08a      	sub	sp, #40	; 0x28
 8009a28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a2e:	f000 fb07 	bl	800a040 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a32:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <xTimerCreateTimerTask+0x80>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d021      	beq.n	8009a7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a42:	1d3a      	adds	r2, r7, #4
 8009a44:	f107 0108 	add.w	r1, r7, #8
 8009a48:	f107 030c 	add.w	r3, r7, #12
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe fb31 	bl	80080b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	9202      	str	r2, [sp, #8]
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	2300      	movs	r3, #0
 8009a62:	460a      	mov	r2, r1
 8009a64:	4910      	ldr	r1, [pc, #64]	; (8009aa8 <xTimerCreateTimerTask+0x84>)
 8009a66:	4811      	ldr	r0, [pc, #68]	; (8009aac <xTimerCreateTimerTask+0x88>)
 8009a68:	f7ff f8de 	bl	8008c28 <xTaskCreateStatic>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	4a10      	ldr	r2, [pc, #64]	; (8009ab0 <xTimerCreateTimerTask+0x8c>)
 8009a70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a72:	4b0f      	ldr	r3, [pc, #60]	; (8009ab0 <xTimerCreateTimerTask+0x8c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10a      	bne.n	8009a9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	613b      	str	r3, [r7, #16]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a9a:	697b      	ldr	r3, [r7, #20]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	20000df0 	.word	0x20000df0
 8009aa8:	0800d5bc 	.word	0x0800d5bc
 8009aac:	08009be9 	.word	0x08009be9
 8009ab0:	20000df4 	.word	0x20000df4

08009ab4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08a      	sub	sp, #40	; 0x28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	623b      	str	r3, [r7, #32]
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ae2:	4b1a      	ldr	r3, [pc, #104]	; (8009b4c <xTimerGenericCommand+0x98>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d02a      	beq.n	8009b40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2b05      	cmp	r3, #5
 8009afa:	dc18      	bgt.n	8009b2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009afc:	f7ff feb2 	bl	8009864 <xTaskGetSchedulerState>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d109      	bne.n	8009b1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b06:	4b11      	ldr	r3, [pc, #68]	; (8009b4c <xTimerGenericCommand+0x98>)
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	f107 0110 	add.w	r1, r7, #16
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b12:	f7fe fca1 	bl	8008458 <xQueueGenericSend>
 8009b16:	6278      	str	r0, [r7, #36]	; 0x24
 8009b18:	e012      	b.n	8009b40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b1a:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <xTimerGenericCommand+0x98>)
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	f107 0110 	add.w	r1, r7, #16
 8009b22:	2300      	movs	r3, #0
 8009b24:	2200      	movs	r2, #0
 8009b26:	f7fe fc97 	bl	8008458 <xQueueGenericSend>
 8009b2a:	6278      	str	r0, [r7, #36]	; 0x24
 8009b2c:	e008      	b.n	8009b40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b2e:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <xTimerGenericCommand+0x98>)
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	f107 0110 	add.w	r1, r7, #16
 8009b36:	2300      	movs	r3, #0
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	f7fe fd8b 	bl	8008654 <xQueueGenericSendFromISR>
 8009b3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3728      	adds	r7, #40	; 0x28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20000df0 	.word	0x20000df0

08009b50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af02      	add	r7, sp, #8
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b5a:	4b22      	ldr	r3, [pc, #136]	; (8009be4 <prvProcessExpiredTimer+0x94>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fb47 	bl	80081fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b74:	f003 0304 	and.w	r3, r3, #4
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d022      	beq.n	8009bc2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	699a      	ldr	r2, [r3, #24]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	18d1      	adds	r1, r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	6978      	ldr	r0, [r7, #20]
 8009b8a:	f000 f8d1 	bl	8009d30 <prvInsertTimerInActiveList>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d01f      	beq.n	8009bd4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b94:	2300      	movs	r3, #0
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	6978      	ldr	r0, [r7, #20]
 8009ba0:	f7ff ff88 	bl	8009ab4 <xTimerGenericCommand>
 8009ba4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d113      	bne.n	8009bd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	60fb      	str	r3, [r7, #12]
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bc8:	f023 0301 	bic.w	r3, r3, #1
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	6978      	ldr	r0, [r7, #20]
 8009bda:	4798      	blx	r3
}
 8009bdc:	bf00      	nop
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20000de8 	.word	0x20000de8

08009be8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bf0:	f107 0308 	add.w	r3, r7, #8
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 f857 	bl	8009ca8 <prvGetNextExpireTime>
 8009bfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f803 	bl	8009c0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c06:	f000 f8d5 	bl	8009db4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c0a:	e7f1      	b.n	8009bf0 <prvTimerTask+0x8>

08009c0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c16:	f7ff fa43 	bl	80090a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c1a:	f107 0308 	add.w	r3, r7, #8
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f866 	bl	8009cf0 <prvSampleTimeNow>
 8009c24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d130      	bne.n	8009c8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10a      	bne.n	8009c48 <prvProcessTimerOrBlockTask+0x3c>
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d806      	bhi.n	8009c48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c3a:	f7ff fa3f 	bl	80090bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff ff85 	bl	8009b50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c46:	e024      	b.n	8009c92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d008      	beq.n	8009c60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c4e:	4b13      	ldr	r3, [pc, #76]	; (8009c9c <prvProcessTimerOrBlockTask+0x90>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <prvProcessTimerOrBlockTask+0x50>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e000      	b.n	8009c5e <prvProcessTimerOrBlockTask+0x52>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c60:	4b0f      	ldr	r3, [pc, #60]	; (8009ca0 <prvProcessTimerOrBlockTask+0x94>)
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	f7fe ffa7 	bl	8008bc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c72:	f7ff fa23 	bl	80090bc <xTaskResumeAll>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c7c:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <prvProcessTimerOrBlockTask+0x98>)
 8009c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	f3bf 8f6f 	isb	sy
}
 8009c8c:	e001      	b.n	8009c92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c8e:	f7ff fa15 	bl	80090bc <xTaskResumeAll>
}
 8009c92:	bf00      	nop
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000dec 	.word	0x20000dec
 8009ca0:	20000df0 	.word	0x20000df0
 8009ca4:	e000ed04 	.word	0xe000ed04

08009ca8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009cb0:	4b0e      	ldr	r3, [pc, #56]	; (8009cec <prvGetNextExpireTime+0x44>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <prvGetNextExpireTime+0x16>
 8009cba:	2201      	movs	r2, #1
 8009cbc:	e000      	b.n	8009cc0 <prvGetNextExpireTime+0x18>
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d105      	bne.n	8009cd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ccc:	4b07      	ldr	r3, [pc, #28]	; (8009cec <prvGetNextExpireTime+0x44>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	e001      	b.n	8009cdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	20000de8 	.word	0x20000de8

08009cf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cf8:	f7ff fa7e 	bl	80091f8 <xTaskGetTickCount>
 8009cfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cfe:	4b0b      	ldr	r3, [pc, #44]	; (8009d2c <prvSampleTimeNow+0x3c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d205      	bcs.n	8009d14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d08:	f000 f936 	bl	8009f78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	e002      	b.n	8009d1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d1a:	4a04      	ldr	r2, [pc, #16]	; (8009d2c <prvSampleTimeNow+0x3c>)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d20:	68fb      	ldr	r3, [r7, #12]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20000df8 	.word	0x20000df8

08009d30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d812      	bhi.n	8009d7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	1ad2      	subs	r2, r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d302      	bcc.n	8009d6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d64:	2301      	movs	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	e01b      	b.n	8009da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d6a:	4b10      	ldr	r3, [pc, #64]	; (8009dac <prvInsertTimerInActiveList+0x7c>)
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3304      	adds	r3, #4
 8009d72:	4619      	mov	r1, r3
 8009d74:	4610      	mov	r0, r2
 8009d76:	f7fe fa08 	bl	800818a <vListInsert>
 8009d7a:	e012      	b.n	8009da2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d206      	bcs.n	8009d92 <prvInsertTimerInActiveList+0x62>
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d302      	bcc.n	8009d92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	617b      	str	r3, [r7, #20]
 8009d90:	e007      	b.n	8009da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d92:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <prvInsertTimerInActiveList+0x80>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	f7fe f9f4 	bl	800818a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009da2:	697b      	ldr	r3, [r7, #20]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20000dec 	.word	0x20000dec
 8009db0:	20000de8 	.word	0x20000de8

08009db4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08e      	sub	sp, #56	; 0x38
 8009db8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dba:	e0ca      	b.n	8009f52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	da18      	bge.n	8009df4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009dc2:	1d3b      	adds	r3, r7, #4
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	61fb      	str	r3, [r7, #28]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dea:	6850      	ldr	r0, [r2, #4]
 8009dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dee:	6892      	ldr	r2, [r2, #8]
 8009df0:	4611      	mov	r1, r2
 8009df2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f2c0 80aa 	blt.w	8009f50 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe f9f5 	bl	80081fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e12:	463b      	mov	r3, r7
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7ff ff6b 	bl	8009cf0 <prvSampleTimeNow>
 8009e1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b09      	cmp	r3, #9
 8009e20:	f200 8097 	bhi.w	8009f52 <prvProcessReceivedCommands+0x19e>
 8009e24:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <prvProcessReceivedCommands+0x78>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e55 	.word	0x08009e55
 8009e34:	08009e55 	.word	0x08009e55
 8009e38:	08009ec9 	.word	0x08009ec9
 8009e3c:	08009edd 	.word	0x08009edd
 8009e40:	08009f27 	.word	0x08009f27
 8009e44:	08009e55 	.word	0x08009e55
 8009e48:	08009e55 	.word	0x08009e55
 8009e4c:	08009ec9 	.word	0x08009ec9
 8009e50:	08009edd 	.word	0x08009edd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e5a:	f043 0301 	orr.w	r3, r3, #1
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	18d1      	adds	r1, r2, r3
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e74:	f7ff ff5c 	bl	8009d30 <prvInsertTimerInActiveList>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d069      	beq.n	8009f52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d05e      	beq.n	8009f52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	441a      	add	r2, r3
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ea6:	f7ff fe05 	bl	8009ab4 <xTimerGenericCommand>
 8009eaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d14f      	bne.n	8009f52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	61bb      	str	r3, [r7, #24]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ece:	f023 0301 	bic.w	r3, r3, #1
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009eda:	e03a      	b.n	8009f52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ee2:	f043 0301 	orr.w	r3, r3, #1
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10a      	bne.n	8009f12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	617b      	str	r3, [r7, #20]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	699a      	ldr	r2, [r3, #24]
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	18d1      	adds	r1, r2, r3
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f20:	f7ff ff06 	bl	8009d30 <prvInsertTimerInActiveList>
					break;
 8009f24:	e015      	b.n	8009f52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d103      	bne.n	8009f3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f36:	f000 fb9d 	bl	800a674 <vPortFree>
 8009f3a:	e00a      	b.n	8009f52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f42:	f023 0301 	bic.w	r3, r3, #1
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f4e:	e000      	b.n	8009f52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f52:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <prvProcessReceivedCommands+0x1c0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	1d39      	adds	r1, r7, #4
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe fc16 	bl	800878c <xQueueReceive>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f47f af2a 	bne.w	8009dbc <prvProcessReceivedCommands+0x8>
	}
}
 8009f68:	bf00      	nop
 8009f6a:	bf00      	nop
 8009f6c:	3730      	adds	r7, #48	; 0x30
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20000df0 	.word	0x20000df0

08009f78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f7e:	e048      	b.n	800a012 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f80:	4b2d      	ldr	r3, [pc, #180]	; (800a038 <prvSwitchTimerLists+0xc0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f8a:	4b2b      	ldr	r3, [pc, #172]	; (800a038 <prvSwitchTimerLists+0xc0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3304      	adds	r3, #4
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe f92f 	bl	80081fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02e      	beq.n	800a012 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4413      	add	r3, r2
 8009fbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d90e      	bls.n	8009fe4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fd2:	4b19      	ldr	r3, [pc, #100]	; (800a038 <prvSwitchTimerLists+0xc0>)
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4610      	mov	r0, r2
 8009fde:	f7fe f8d4 	bl	800818a <vListInsert>
 8009fe2:	e016      	b.n	800a012 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	2100      	movs	r1, #0
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f7ff fd60 	bl	8009ab4 <xTimerGenericCommand>
 8009ff4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10a      	bne.n	800a012 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	603b      	str	r3, [r7, #0]
}
 800a00e:	bf00      	nop
 800a010:	e7fe      	b.n	800a010 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a012:	4b09      	ldr	r3, [pc, #36]	; (800a038 <prvSwitchTimerLists+0xc0>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1b1      	bne.n	8009f80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a01c:	4b06      	ldr	r3, [pc, #24]	; (800a038 <prvSwitchTimerLists+0xc0>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a022:	4b06      	ldr	r3, [pc, #24]	; (800a03c <prvSwitchTimerLists+0xc4>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a04      	ldr	r2, [pc, #16]	; (800a038 <prvSwitchTimerLists+0xc0>)
 800a028:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a02a:	4a04      	ldr	r2, [pc, #16]	; (800a03c <prvSwitchTimerLists+0xc4>)
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	6013      	str	r3, [r2, #0]
}
 800a030:	bf00      	nop
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	20000de8 	.word	0x20000de8
 800a03c:	20000dec 	.word	0x20000dec

0800a040 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a046:	f000 f965 	bl	800a314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a04a:	4b15      	ldr	r3, [pc, #84]	; (800a0a0 <prvCheckForValidListAndQueue+0x60>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d120      	bne.n	800a094 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a052:	4814      	ldr	r0, [pc, #80]	; (800a0a4 <prvCheckForValidListAndQueue+0x64>)
 800a054:	f7fe f848 	bl	80080e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a058:	4813      	ldr	r0, [pc, #76]	; (800a0a8 <prvCheckForValidListAndQueue+0x68>)
 800a05a:	f7fe f845 	bl	80080e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a05e:	4b13      	ldr	r3, [pc, #76]	; (800a0ac <prvCheckForValidListAndQueue+0x6c>)
 800a060:	4a10      	ldr	r2, [pc, #64]	; (800a0a4 <prvCheckForValidListAndQueue+0x64>)
 800a062:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a064:	4b12      	ldr	r3, [pc, #72]	; (800a0b0 <prvCheckForValidListAndQueue+0x70>)
 800a066:	4a10      	ldr	r2, [pc, #64]	; (800a0a8 <prvCheckForValidListAndQueue+0x68>)
 800a068:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a06a:	2300      	movs	r3, #0
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	4b11      	ldr	r3, [pc, #68]	; (800a0b4 <prvCheckForValidListAndQueue+0x74>)
 800a070:	4a11      	ldr	r2, [pc, #68]	; (800a0b8 <prvCheckForValidListAndQueue+0x78>)
 800a072:	2110      	movs	r1, #16
 800a074:	200a      	movs	r0, #10
 800a076:	f7fe f953 	bl	8008320 <xQueueGenericCreateStatic>
 800a07a:	4603      	mov	r3, r0
 800a07c:	4a08      	ldr	r2, [pc, #32]	; (800a0a0 <prvCheckForValidListAndQueue+0x60>)
 800a07e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <prvCheckForValidListAndQueue+0x60>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d005      	beq.n	800a094 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a088:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <prvCheckForValidListAndQueue+0x60>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	490b      	ldr	r1, [pc, #44]	; (800a0bc <prvCheckForValidListAndQueue+0x7c>)
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe fd6c 	bl	8008b6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a094:	f000 f96e 	bl	800a374 <vPortExitCritical>
}
 800a098:	bf00      	nop
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000df0 	.word	0x20000df0
 800a0a4:	20000dc0 	.word	0x20000dc0
 800a0a8:	20000dd4 	.word	0x20000dd4
 800a0ac:	20000de8 	.word	0x20000de8
 800a0b0:	20000dec 	.word	0x20000dec
 800a0b4:	20000e9c 	.word	0x20000e9c
 800a0b8:	20000dfc 	.word	0x20000dfc
 800a0bc:	0800d5c4 	.word	0x0800d5c4

0800a0c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3b04      	subs	r3, #4
 800a0d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f023 0201 	bic.w	r2, r3, #1
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3b04      	subs	r3, #4
 800a0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0f0:	4a0c      	ldr	r2, [pc, #48]	; (800a124 <pxPortInitialiseStack+0x64>)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3b14      	subs	r3, #20
 800a0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	3b04      	subs	r3, #4
 800a106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f06f 0202 	mvn.w	r2, #2
 800a10e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	3b20      	subs	r3, #32
 800a114:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a116:	68fb      	ldr	r3, [r7, #12]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	0800a129 	.word	0x0800a129

0800a128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a132:	4b12      	ldr	r3, [pc, #72]	; (800a17c <prvTaskExitError+0x54>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13a:	d00a      	beq.n	800a152 <prvTaskExitError+0x2a>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	60fb      	str	r3, [r7, #12]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <prvTaskExitError+0x28>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	60bb      	str	r3, [r7, #8]
}
 800a164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a166:	bf00      	nop
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0fc      	beq.n	800a168 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a16e:	bf00      	nop
 800a170:	bf00      	nop
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	2000000c 	.word	0x2000000c

0800a180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a180:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <pxCurrentTCBConst2>)
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	6808      	ldr	r0, [r1, #0]
 800a186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	f380 8809 	msr	PSP, r0
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	4770      	bx	lr
 800a19c:	f3af 8000 	nop.w

0800a1a0 <pxCurrentTCBConst2>:
 800a1a0:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1a8:	4808      	ldr	r0, [pc, #32]	; (800a1cc <prvPortStartFirstTask+0x24>)
 800a1aa:	6800      	ldr	r0, [r0, #0]
 800a1ac:	6800      	ldr	r0, [r0, #0]
 800a1ae:	f380 8808 	msr	MSP, r0
 800a1b2:	f04f 0000 	mov.w	r0, #0
 800a1b6:	f380 8814 	msr	CONTROL, r0
 800a1ba:	b662      	cpsie	i
 800a1bc:	b661      	cpsie	f
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	df00      	svc	0
 800a1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ca:	bf00      	nop
 800a1cc:	e000ed08 	.word	0xe000ed08

0800a1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1d6:	4b46      	ldr	r3, [pc, #280]	; (800a2f0 <xPortStartScheduler+0x120>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a46      	ldr	r2, [pc, #280]	; (800a2f4 <xPortStartScheduler+0x124>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d10a      	bne.n	800a1f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	613b      	str	r3, [r7, #16]
}
 800a1f2:	bf00      	nop
 800a1f4:	e7fe      	b.n	800a1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1f6:	4b3e      	ldr	r3, [pc, #248]	; (800a2f0 <xPortStartScheduler+0x120>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a3f      	ldr	r2, [pc, #252]	; (800a2f8 <xPortStartScheduler+0x128>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d10a      	bne.n	800a216 <xPortStartScheduler+0x46>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	60fb      	str	r3, [r7, #12]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a216:	4b39      	ldr	r3, [pc, #228]	; (800a2fc <xPortStartScheduler+0x12c>)
 800a218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	22ff      	movs	r2, #255	; 0xff
 800a226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	b2db      	uxtb	r3, r3
 800a234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	4b31      	ldr	r3, [pc, #196]	; (800a300 <xPortStartScheduler+0x130>)
 800a23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a23e:	4b31      	ldr	r3, [pc, #196]	; (800a304 <xPortStartScheduler+0x134>)
 800a240:	2207      	movs	r2, #7
 800a242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a244:	e009      	b.n	800a25a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a246:	4b2f      	ldr	r3, [pc, #188]	; (800a304 <xPortStartScheduler+0x134>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	4a2d      	ldr	r2, [pc, #180]	; (800a304 <xPortStartScheduler+0x134>)
 800a24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	b2db      	uxtb	r3, r3
 800a258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a25a:	78fb      	ldrb	r3, [r7, #3]
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a262:	2b80      	cmp	r3, #128	; 0x80
 800a264:	d0ef      	beq.n	800a246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a266:	4b27      	ldr	r3, [pc, #156]	; (800a304 <xPortStartScheduler+0x134>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f1c3 0307 	rsb	r3, r3, #7
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d00a      	beq.n	800a288 <xPortStartScheduler+0xb8>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	60bb      	str	r3, [r7, #8]
}
 800a284:	bf00      	nop
 800a286:	e7fe      	b.n	800a286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a288:	4b1e      	ldr	r3, [pc, #120]	; (800a304 <xPortStartScheduler+0x134>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	4a1d      	ldr	r2, [pc, #116]	; (800a304 <xPortStartScheduler+0x134>)
 800a290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a292:	4b1c      	ldr	r3, [pc, #112]	; (800a304 <xPortStartScheduler+0x134>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a29a:	4a1a      	ldr	r2, [pc, #104]	; (800a304 <xPortStartScheduler+0x134>)
 800a29c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2a6:	4b18      	ldr	r3, [pc, #96]	; (800a308 <xPortStartScheduler+0x138>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a17      	ldr	r2, [pc, #92]	; (800a308 <xPortStartScheduler+0x138>)
 800a2ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2b2:	4b15      	ldr	r3, [pc, #84]	; (800a308 <xPortStartScheduler+0x138>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a14      	ldr	r2, [pc, #80]	; (800a308 <xPortStartScheduler+0x138>)
 800a2b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a2bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2be:	f000 f8dd 	bl	800a47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2c2:	4b12      	ldr	r3, [pc, #72]	; (800a30c <xPortStartScheduler+0x13c>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2c8:	f000 f8fc 	bl	800a4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2cc:	4b10      	ldr	r3, [pc, #64]	; (800a310 <xPortStartScheduler+0x140>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a0f      	ldr	r2, [pc, #60]	; (800a310 <xPortStartScheduler+0x140>)
 800a2d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a2d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2d8:	f7ff ff66 	bl	800a1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2dc:	f7ff f856 	bl	800938c <vTaskSwitchContext>
	prvTaskExitError();
 800a2e0:	f7ff ff22 	bl	800a128 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	e000ed00 	.word	0xe000ed00
 800a2f4:	410fc271 	.word	0x410fc271
 800a2f8:	410fc270 	.word	0x410fc270
 800a2fc:	e000e400 	.word	0xe000e400
 800a300:	20000eec 	.word	0x20000eec
 800a304:	20000ef0 	.word	0x20000ef0
 800a308:	e000ed20 	.word	0xe000ed20
 800a30c:	2000000c 	.word	0x2000000c
 800a310:	e000ef34 	.word	0xe000ef34

0800a314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	607b      	str	r3, [r7, #4]
}
 800a32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a32e:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <vPortEnterCritical+0x58>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3301      	adds	r3, #1
 800a334:	4a0d      	ldr	r2, [pc, #52]	; (800a36c <vPortEnterCritical+0x58>)
 800a336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a338:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <vPortEnterCritical+0x58>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d10f      	bne.n	800a360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a340:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <vPortEnterCritical+0x5c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00a      	beq.n	800a360 <vPortEnterCritical+0x4c>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	603b      	str	r3, [r7, #0]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <vPortEnterCritical+0x4a>
	}
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	2000000c 	.word	0x2000000c
 800a370:	e000ed04 	.word	0xe000ed04

0800a374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a37a:	4b12      	ldr	r3, [pc, #72]	; (800a3c4 <vPortExitCritical+0x50>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10a      	bne.n	800a398 <vPortExitCritical+0x24>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	607b      	str	r3, [r7, #4]
}
 800a394:	bf00      	nop
 800a396:	e7fe      	b.n	800a396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a398:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <vPortExitCritical+0x50>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	4a09      	ldr	r2, [pc, #36]	; (800a3c4 <vPortExitCritical+0x50>)
 800a3a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3a2:	4b08      	ldr	r3, [pc, #32]	; (800a3c4 <vPortExitCritical+0x50>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d105      	bne.n	800a3b6 <vPortExitCritical+0x42>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	f383 8811 	msr	BASEPRI, r3
}
 800a3b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3b6:	bf00      	nop
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	2000000c 	.word	0x2000000c
	...

0800a3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3d0:	f3ef 8009 	mrs	r0, PSP
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	4b15      	ldr	r3, [pc, #84]	; (800a430 <pxCurrentTCBConst>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	f01e 0f10 	tst.w	lr, #16
 800a3e0:	bf08      	it	eq
 800a3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ea:	6010      	str	r0, [r2, #0]
 800a3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a3f4:	f380 8811 	msr	BASEPRI, r0
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f7fe ffc4 	bl	800938c <vTaskSwitchContext>
 800a404:	f04f 0000 	mov.w	r0, #0
 800a408:	f380 8811 	msr	BASEPRI, r0
 800a40c:	bc09      	pop	{r0, r3}
 800a40e:	6819      	ldr	r1, [r3, #0]
 800a410:	6808      	ldr	r0, [r1, #0]
 800a412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a416:	f01e 0f10 	tst.w	lr, #16
 800a41a:	bf08      	it	eq
 800a41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a420:	f380 8809 	msr	PSP, r0
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	f3af 8000 	nop.w

0800a430 <pxCurrentTCBConst>:
 800a430:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop

0800a438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	607b      	str	r3, [r7, #4]
}
 800a450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a452:	f7fe fee1 	bl	8009218 <xTaskIncrementTick>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a45c:	4b06      	ldr	r3, [pc, #24]	; (800a478 <xPortSysTickHandler+0x40>)
 800a45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	2300      	movs	r3, #0
 800a466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	f383 8811 	msr	BASEPRI, r3
}
 800a46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	e000ed04 	.word	0xe000ed04

0800a47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a480:	4b0b      	ldr	r3, [pc, #44]	; (800a4b0 <vPortSetupTimerInterrupt+0x34>)
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a486:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <vPortSetupTimerInterrupt+0x38>)
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a48c:	4b0a      	ldr	r3, [pc, #40]	; (800a4b8 <vPortSetupTimerInterrupt+0x3c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a0a      	ldr	r2, [pc, #40]	; (800a4bc <vPortSetupTimerInterrupt+0x40>)
 800a492:	fba2 2303 	umull	r2, r3, r2, r3
 800a496:	099b      	lsrs	r3, r3, #6
 800a498:	4a09      	ldr	r2, [pc, #36]	; (800a4c0 <vPortSetupTimerInterrupt+0x44>)
 800a49a:	3b01      	subs	r3, #1
 800a49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a49e:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <vPortSetupTimerInterrupt+0x34>)
 800a4a0:	2207      	movs	r2, #7
 800a4a2:	601a      	str	r2, [r3, #0]
}
 800a4a4:	bf00      	nop
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	e000e010 	.word	0xe000e010
 800a4b4:	e000e018 	.word	0xe000e018
 800a4b8:	20000000 	.word	0x20000000
 800a4bc:	10624dd3 	.word	0x10624dd3
 800a4c0:	e000e014 	.word	0xe000e014

0800a4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a4d4 <vPortEnableVFP+0x10>
 800a4c8:	6801      	ldr	r1, [r0, #0]
 800a4ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4ce:	6001      	str	r1, [r0, #0]
 800a4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4d2:	bf00      	nop
 800a4d4:	e000ed88 	.word	0xe000ed88

0800a4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4de:	f3ef 8305 	mrs	r3, IPSR
 800a4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b0f      	cmp	r3, #15
 800a4e8:	d914      	bls.n	800a514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4ea:	4a17      	ldr	r2, [pc, #92]	; (800a548 <vPortValidateInterruptPriority+0x70>)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4f4:	4b15      	ldr	r3, [pc, #84]	; (800a54c <vPortValidateInterruptPriority+0x74>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	7afa      	ldrb	r2, [r7, #11]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d20a      	bcs.n	800a514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	607b      	str	r3, [r7, #4]
}
 800a510:	bf00      	nop
 800a512:	e7fe      	b.n	800a512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a514:	4b0e      	ldr	r3, [pc, #56]	; (800a550 <vPortValidateInterruptPriority+0x78>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a51c:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <vPortValidateInterruptPriority+0x7c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	429a      	cmp	r2, r3
 800a522:	d90a      	bls.n	800a53a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	603b      	str	r3, [r7, #0]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <vPortValidateInterruptPriority+0x60>
	}
 800a53a:	bf00      	nop
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	e000e3f0 	.word	0xe000e3f0
 800a54c:	20000eec 	.word	0x20000eec
 800a550:	e000ed0c 	.word	0xe000ed0c
 800a554:	20000ef0 	.word	0x20000ef0

0800a558 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800a560:	2300      	movs	r3, #0
 800a562:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800a564:	f7fe fd9c 	bl	80090a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800a568:	4b3e      	ldr	r3, [pc, #248]	; (800a664 <pvPortMalloc+0x10c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d104      	bne.n	800a57a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 800a570:	f000 f8ba 	bl	800a6e8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800a574:	4b3b      	ldr	r3, [pc, #236]	; (800a664 <pvPortMalloc+0x10c>)
 800a576:	2201      	movs	r2, #1
 800a578:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00e      	beq.n	800a59e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 800a580:	2308      	movs	r3, #8
 800a582:	461a      	mov	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4413      	add	r3, r2
 800a588:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f003 0307 	and.w	r3, r3, #7
 800a590:	2b00      	cmp	r3, #0
 800a592:	d004      	beq.n	800a59e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f023 0307 	bic.w	r3, r3, #7
 800a59a:	3308      	adds	r3, #8
 800a59c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d057      	beq.n	800a654 <pvPortMalloc+0xfc>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f247 5227 	movw	r2, #29991	; 0x7527
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d852      	bhi.n	800a654 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800a5ae:	4b2e      	ldr	r3, [pc, #184]	; (800a668 <pvPortMalloc+0x110>)
 800a5b0:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800a5b2:	4b2d      	ldr	r3, [pc, #180]	; (800a668 <pvPortMalloc+0x110>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5b8:	e004      	b.n	800a5c4 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d903      	bls.n	800a5d6 <pvPortMalloc+0x7e>
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1f1      	bne.n	800a5ba <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4a24      	ldr	r2, [pc, #144]	; (800a66c <pvPortMalloc+0x114>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d03a      	beq.n	800a654 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2208      	movs	r2, #8
 800a5e4:	4413      	add	r3, r2
 800a5e6:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2208      	movs	r2, #8
 800a5fa:	0052      	lsls	r2, r2, #1
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d922      	bls.n	800a646 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a600:	69fa      	ldr	r2, [r7, #28]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4413      	add	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	1ad2      	subs	r2, r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	60bb      	str	r3, [r7, #8]
 800a620:	4b11      	ldr	r3, [pc, #68]	; (800a668 <pvPortMalloc+0x110>)
 800a622:	613b      	str	r3, [r7, #16]
 800a624:	e002      	b.n	800a62c <pvPortMalloc+0xd4>
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	613b      	str	r3, [r7, #16]
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	429a      	cmp	r2, r3
 800a636:	d8f6      	bhi.n	800a626 <pvPortMalloc+0xce>
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a646:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <pvPortMalloc+0x118>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	4a07      	ldr	r2, [pc, #28]	; (800a670 <pvPortMalloc+0x118>)
 800a652:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a654:	f7fe fd32 	bl	80090bc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800a658:	697b      	ldr	r3, [r7, #20]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3720      	adds	r7, #32
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20008434 	.word	0x20008434
 800a668:	20008424 	.word	0x20008424
 800a66c:	2000842c 	.word	0x2000842c
 800a670:	20000010 	.word	0x20000010

0800a674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d027      	beq.n	800a6d6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800a686:	2308      	movs	r3, #8
 800a688:	425b      	negs	r3, r3
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	4413      	add	r3, r2
 800a68e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800a694:	f7fe fd04 	bl	80090a0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	60bb      	str	r3, [r7, #8]
 800a69e:	4b10      	ldr	r3, [pc, #64]	; (800a6e0 <vPortFree+0x6c>)
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	e002      	b.n	800a6aa <vPortFree+0x36>
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d8f6      	bhi.n	800a6a4 <vPortFree+0x30>
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <vPortFree+0x70>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	4a05      	ldr	r2, [pc, #20]	; (800a6e4 <vPortFree+0x70>)
 800a6d0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800a6d2:	f7fe fcf3 	bl	80090bc <xTaskResumeAll>
	}
}
 800a6d6:	bf00      	nop
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20008424 	.word	0x20008424
 800a6e4:	20000010 	.word	0x20000010

0800a6e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800a6ee:	4b10      	ldr	r3, [pc, #64]	; (800a730 <prvHeapInit+0x48>)
 800a6f0:	f023 0307 	bic.w	r3, r3, #7
 800a6f4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6f6:	4a0f      	ldr	r2, [pc, #60]	; (800a734 <prvHeapInit+0x4c>)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6fc:	4b0d      	ldr	r3, [pc, #52]	; (800a734 <prvHeapInit+0x4c>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800a702:	4b0d      	ldr	r3, [pc, #52]	; (800a738 <prvHeapInit+0x50>)
 800a704:	f247 5228 	movw	r2, #29992	; 0x7528
 800a708:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800a70a:	4b0b      	ldr	r3, [pc, #44]	; (800a738 <prvHeapInit+0x50>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	f247 5228 	movw	r2, #29992	; 0x7528
 800a71a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	4a06      	ldr	r2, [pc, #24]	; (800a738 <prvHeapInit+0x50>)
 800a720:	601a      	str	r2, [r3, #0]
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	20000efc 	.word	0x20000efc
 800a734:	20008424 	.word	0x20008424
 800a738:	2000842c 	.word	0x2000842c

0800a73c <__errno>:
 800a73c:	4b01      	ldr	r3, [pc, #4]	; (800a744 <__errno+0x8>)
 800a73e:	6818      	ldr	r0, [r3, #0]
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	20000014 	.word	0x20000014

0800a748 <__libc_init_array>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	4d0d      	ldr	r5, [pc, #52]	; (800a780 <__libc_init_array+0x38>)
 800a74c:	4c0d      	ldr	r4, [pc, #52]	; (800a784 <__libc_init_array+0x3c>)
 800a74e:	1b64      	subs	r4, r4, r5
 800a750:	10a4      	asrs	r4, r4, #2
 800a752:	2600      	movs	r6, #0
 800a754:	42a6      	cmp	r6, r4
 800a756:	d109      	bne.n	800a76c <__libc_init_array+0x24>
 800a758:	4d0b      	ldr	r5, [pc, #44]	; (800a788 <__libc_init_array+0x40>)
 800a75a:	4c0c      	ldr	r4, [pc, #48]	; (800a78c <__libc_init_array+0x44>)
 800a75c:	f002 feb4 	bl	800d4c8 <_init>
 800a760:	1b64      	subs	r4, r4, r5
 800a762:	10a4      	asrs	r4, r4, #2
 800a764:	2600      	movs	r6, #0
 800a766:	42a6      	cmp	r6, r4
 800a768:	d105      	bne.n	800a776 <__libc_init_array+0x2e>
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
 800a76c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a770:	4798      	blx	r3
 800a772:	3601      	adds	r6, #1
 800a774:	e7ee      	b.n	800a754 <__libc_init_array+0xc>
 800a776:	f855 3b04 	ldr.w	r3, [r5], #4
 800a77a:	4798      	blx	r3
 800a77c:	3601      	adds	r6, #1
 800a77e:	e7f2      	b.n	800a766 <__libc_init_array+0x1e>
 800a780:	0800da6c 	.word	0x0800da6c
 800a784:	0800da6c 	.word	0x0800da6c
 800a788:	0800da6c 	.word	0x0800da6c
 800a78c:	0800da70 	.word	0x0800da70

0800a790 <memcpy>:
 800a790:	440a      	add	r2, r1
 800a792:	4291      	cmp	r1, r2
 800a794:	f100 33ff 	add.w	r3, r0, #4294967295
 800a798:	d100      	bne.n	800a79c <memcpy+0xc>
 800a79a:	4770      	bx	lr
 800a79c:	b510      	push	{r4, lr}
 800a79e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7a6:	4291      	cmp	r1, r2
 800a7a8:	d1f9      	bne.n	800a79e <memcpy+0xe>
 800a7aa:	bd10      	pop	{r4, pc}

0800a7ac <memset>:
 800a7ac:	4402      	add	r2, r0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d100      	bne.n	800a7b6 <memset+0xa>
 800a7b4:	4770      	bx	lr
 800a7b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ba:	e7f9      	b.n	800a7b0 <memset+0x4>

0800a7bc <__cvt>:
 800a7bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c0:	ec55 4b10 	vmov	r4, r5, d0
 800a7c4:	2d00      	cmp	r5, #0
 800a7c6:	460e      	mov	r6, r1
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	462b      	mov	r3, r5
 800a7cc:	bfbb      	ittet	lt
 800a7ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a7d2:	461d      	movlt	r5, r3
 800a7d4:	2300      	movge	r3, #0
 800a7d6:	232d      	movlt	r3, #45	; 0x2d
 800a7d8:	700b      	strb	r3, [r1, #0]
 800a7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a7e0:	4691      	mov	r9, r2
 800a7e2:	f023 0820 	bic.w	r8, r3, #32
 800a7e6:	bfbc      	itt	lt
 800a7e8:	4622      	movlt	r2, r4
 800a7ea:	4614      	movlt	r4, r2
 800a7ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a7f0:	d005      	beq.n	800a7fe <__cvt+0x42>
 800a7f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a7f6:	d100      	bne.n	800a7fa <__cvt+0x3e>
 800a7f8:	3601      	adds	r6, #1
 800a7fa:	2102      	movs	r1, #2
 800a7fc:	e000      	b.n	800a800 <__cvt+0x44>
 800a7fe:	2103      	movs	r1, #3
 800a800:	ab03      	add	r3, sp, #12
 800a802:	9301      	str	r3, [sp, #4]
 800a804:	ab02      	add	r3, sp, #8
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	ec45 4b10 	vmov	d0, r4, r5
 800a80c:	4653      	mov	r3, sl
 800a80e:	4632      	mov	r2, r6
 800a810:	f000 fcea 	bl	800b1e8 <_dtoa_r>
 800a814:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a818:	4607      	mov	r7, r0
 800a81a:	d102      	bne.n	800a822 <__cvt+0x66>
 800a81c:	f019 0f01 	tst.w	r9, #1
 800a820:	d022      	beq.n	800a868 <__cvt+0xac>
 800a822:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a826:	eb07 0906 	add.w	r9, r7, r6
 800a82a:	d110      	bne.n	800a84e <__cvt+0x92>
 800a82c:	783b      	ldrb	r3, [r7, #0]
 800a82e:	2b30      	cmp	r3, #48	; 0x30
 800a830:	d10a      	bne.n	800a848 <__cvt+0x8c>
 800a832:	2200      	movs	r2, #0
 800a834:	2300      	movs	r3, #0
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f6 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800a83e:	b918      	cbnz	r0, 800a848 <__cvt+0x8c>
 800a840:	f1c6 0601 	rsb	r6, r6, #1
 800a844:	f8ca 6000 	str.w	r6, [sl]
 800a848:	f8da 3000 	ldr.w	r3, [sl]
 800a84c:	4499      	add	r9, r3
 800a84e:	2200      	movs	r2, #0
 800a850:	2300      	movs	r3, #0
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	f7f6 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800a85a:	b108      	cbz	r0, 800a860 <__cvt+0xa4>
 800a85c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a860:	2230      	movs	r2, #48	; 0x30
 800a862:	9b03      	ldr	r3, [sp, #12]
 800a864:	454b      	cmp	r3, r9
 800a866:	d307      	bcc.n	800a878 <__cvt+0xbc>
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a86c:	1bdb      	subs	r3, r3, r7
 800a86e:	4638      	mov	r0, r7
 800a870:	6013      	str	r3, [r2, #0]
 800a872:	b004      	add	sp, #16
 800a874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a878:	1c59      	adds	r1, r3, #1
 800a87a:	9103      	str	r1, [sp, #12]
 800a87c:	701a      	strb	r2, [r3, #0]
 800a87e:	e7f0      	b.n	800a862 <__cvt+0xa6>

0800a880 <__exponent>:
 800a880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a882:	4603      	mov	r3, r0
 800a884:	2900      	cmp	r1, #0
 800a886:	bfb8      	it	lt
 800a888:	4249      	neglt	r1, r1
 800a88a:	f803 2b02 	strb.w	r2, [r3], #2
 800a88e:	bfb4      	ite	lt
 800a890:	222d      	movlt	r2, #45	; 0x2d
 800a892:	222b      	movge	r2, #43	; 0x2b
 800a894:	2909      	cmp	r1, #9
 800a896:	7042      	strb	r2, [r0, #1]
 800a898:	dd2a      	ble.n	800a8f0 <__exponent+0x70>
 800a89a:	f10d 0407 	add.w	r4, sp, #7
 800a89e:	46a4      	mov	ip, r4
 800a8a0:	270a      	movs	r7, #10
 800a8a2:	46a6      	mov	lr, r4
 800a8a4:	460a      	mov	r2, r1
 800a8a6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a8aa:	fb07 1516 	mls	r5, r7, r6, r1
 800a8ae:	3530      	adds	r5, #48	; 0x30
 800a8b0:	2a63      	cmp	r2, #99	; 0x63
 800a8b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a8b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	dcf1      	bgt.n	800a8a2 <__exponent+0x22>
 800a8be:	3130      	adds	r1, #48	; 0x30
 800a8c0:	f1ae 0502 	sub.w	r5, lr, #2
 800a8c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a8c8:	1c44      	adds	r4, r0, #1
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	4561      	cmp	r1, ip
 800a8ce:	d30a      	bcc.n	800a8e6 <__exponent+0x66>
 800a8d0:	f10d 0209 	add.w	r2, sp, #9
 800a8d4:	eba2 020e 	sub.w	r2, r2, lr
 800a8d8:	4565      	cmp	r5, ip
 800a8da:	bf88      	it	hi
 800a8dc:	2200      	movhi	r2, #0
 800a8de:	4413      	add	r3, r2
 800a8e0:	1a18      	subs	r0, r3, r0
 800a8e2:	b003      	add	sp, #12
 800a8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a8ee:	e7ed      	b.n	800a8cc <__exponent+0x4c>
 800a8f0:	2330      	movs	r3, #48	; 0x30
 800a8f2:	3130      	adds	r1, #48	; 0x30
 800a8f4:	7083      	strb	r3, [r0, #2]
 800a8f6:	70c1      	strb	r1, [r0, #3]
 800a8f8:	1d03      	adds	r3, r0, #4
 800a8fa:	e7f1      	b.n	800a8e0 <__exponent+0x60>

0800a8fc <_printf_float>:
 800a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	ed2d 8b02 	vpush	{d8}
 800a904:	b08d      	sub	sp, #52	; 0x34
 800a906:	460c      	mov	r4, r1
 800a908:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a90c:	4616      	mov	r6, r2
 800a90e:	461f      	mov	r7, r3
 800a910:	4605      	mov	r5, r0
 800a912:	f001 fa55 	bl	800bdc0 <_localeconv_r>
 800a916:	f8d0 a000 	ldr.w	sl, [r0]
 800a91a:	4650      	mov	r0, sl
 800a91c:	f7f5 fc58 	bl	80001d0 <strlen>
 800a920:	2300      	movs	r3, #0
 800a922:	930a      	str	r3, [sp, #40]	; 0x28
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	9305      	str	r3, [sp, #20]
 800a928:	f8d8 3000 	ldr.w	r3, [r8]
 800a92c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a930:	3307      	adds	r3, #7
 800a932:	f023 0307 	bic.w	r3, r3, #7
 800a936:	f103 0208 	add.w	r2, r3, #8
 800a93a:	f8c8 2000 	str.w	r2, [r8]
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a946:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a94a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a94e:	9307      	str	r3, [sp, #28]
 800a950:	f8cd 8018 	str.w	r8, [sp, #24]
 800a954:	ee08 0a10 	vmov	s16, r0
 800a958:	4b9f      	ldr	r3, [pc, #636]	; (800abd8 <_printf_float+0x2dc>)
 800a95a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a95e:	f04f 32ff 	mov.w	r2, #4294967295
 800a962:	f7f6 f8e3 	bl	8000b2c <__aeabi_dcmpun>
 800a966:	bb88      	cbnz	r0, 800a9cc <_printf_float+0xd0>
 800a968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a96c:	4b9a      	ldr	r3, [pc, #616]	; (800abd8 <_printf_float+0x2dc>)
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295
 800a972:	f7f6 f8bd 	bl	8000af0 <__aeabi_dcmple>
 800a976:	bb48      	cbnz	r0, 800a9cc <_printf_float+0xd0>
 800a978:	2200      	movs	r2, #0
 800a97a:	2300      	movs	r3, #0
 800a97c:	4640      	mov	r0, r8
 800a97e:	4649      	mov	r1, r9
 800a980:	f7f6 f8ac 	bl	8000adc <__aeabi_dcmplt>
 800a984:	b110      	cbz	r0, 800a98c <_printf_float+0x90>
 800a986:	232d      	movs	r3, #45	; 0x2d
 800a988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a98c:	4b93      	ldr	r3, [pc, #588]	; (800abdc <_printf_float+0x2e0>)
 800a98e:	4894      	ldr	r0, [pc, #592]	; (800abe0 <_printf_float+0x2e4>)
 800a990:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a994:	bf94      	ite	ls
 800a996:	4698      	movls	r8, r3
 800a998:	4680      	movhi	r8, r0
 800a99a:	2303      	movs	r3, #3
 800a99c:	6123      	str	r3, [r4, #16]
 800a99e:	9b05      	ldr	r3, [sp, #20]
 800a9a0:	f023 0204 	bic.w	r2, r3, #4
 800a9a4:	6022      	str	r2, [r4, #0]
 800a9a6:	f04f 0900 	mov.w	r9, #0
 800a9aa:	9700      	str	r7, [sp, #0]
 800a9ac:	4633      	mov	r3, r6
 800a9ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f000 f9d8 	bl	800ad68 <_printf_common>
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	f040 8090 	bne.w	800aade <_printf_float+0x1e2>
 800a9be:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c2:	b00d      	add	sp, #52	; 0x34
 800a9c4:	ecbd 8b02 	vpop	{d8}
 800a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9cc:	4642      	mov	r2, r8
 800a9ce:	464b      	mov	r3, r9
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	f7f6 f8aa 	bl	8000b2c <__aeabi_dcmpun>
 800a9d8:	b140      	cbz	r0, 800a9ec <_printf_float+0xf0>
 800a9da:	464b      	mov	r3, r9
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	bfbc      	itt	lt
 800a9e0:	232d      	movlt	r3, #45	; 0x2d
 800a9e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a9e6:	487f      	ldr	r0, [pc, #508]	; (800abe4 <_printf_float+0x2e8>)
 800a9e8:	4b7f      	ldr	r3, [pc, #508]	; (800abe8 <_printf_float+0x2ec>)
 800a9ea:	e7d1      	b.n	800a990 <_printf_float+0x94>
 800a9ec:	6863      	ldr	r3, [r4, #4]
 800a9ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a9f2:	9206      	str	r2, [sp, #24]
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	d13f      	bne.n	800aa78 <_printf_float+0x17c>
 800a9f8:	2306      	movs	r3, #6
 800a9fa:	6063      	str	r3, [r4, #4]
 800a9fc:	9b05      	ldr	r3, [sp, #20]
 800a9fe:	6861      	ldr	r1, [r4, #4]
 800aa00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa04:	2300      	movs	r3, #0
 800aa06:	9303      	str	r3, [sp, #12]
 800aa08:	ab0a      	add	r3, sp, #40	; 0x28
 800aa0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa0e:	ab09      	add	r3, sp, #36	; 0x24
 800aa10:	ec49 8b10 	vmov	d0, r8, r9
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	6022      	str	r2, [r4, #0]
 800aa18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f7ff fecd 	bl	800a7bc <__cvt>
 800aa22:	9b06      	ldr	r3, [sp, #24]
 800aa24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa26:	2b47      	cmp	r3, #71	; 0x47
 800aa28:	4680      	mov	r8, r0
 800aa2a:	d108      	bne.n	800aa3e <_printf_float+0x142>
 800aa2c:	1cc8      	adds	r0, r1, #3
 800aa2e:	db02      	blt.n	800aa36 <_printf_float+0x13a>
 800aa30:	6863      	ldr	r3, [r4, #4]
 800aa32:	4299      	cmp	r1, r3
 800aa34:	dd41      	ble.n	800aaba <_printf_float+0x1be>
 800aa36:	f1ab 0b02 	sub.w	fp, fp, #2
 800aa3a:	fa5f fb8b 	uxtb.w	fp, fp
 800aa3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa42:	d820      	bhi.n	800aa86 <_printf_float+0x18a>
 800aa44:	3901      	subs	r1, #1
 800aa46:	465a      	mov	r2, fp
 800aa48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa4c:	9109      	str	r1, [sp, #36]	; 0x24
 800aa4e:	f7ff ff17 	bl	800a880 <__exponent>
 800aa52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa54:	1813      	adds	r3, r2, r0
 800aa56:	2a01      	cmp	r2, #1
 800aa58:	4681      	mov	r9, r0
 800aa5a:	6123      	str	r3, [r4, #16]
 800aa5c:	dc02      	bgt.n	800aa64 <_printf_float+0x168>
 800aa5e:	6822      	ldr	r2, [r4, #0]
 800aa60:	07d2      	lsls	r2, r2, #31
 800aa62:	d501      	bpl.n	800aa68 <_printf_float+0x16c>
 800aa64:	3301      	adds	r3, #1
 800aa66:	6123      	str	r3, [r4, #16]
 800aa68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d09c      	beq.n	800a9aa <_printf_float+0xae>
 800aa70:	232d      	movs	r3, #45	; 0x2d
 800aa72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa76:	e798      	b.n	800a9aa <_printf_float+0xae>
 800aa78:	9a06      	ldr	r2, [sp, #24]
 800aa7a:	2a47      	cmp	r2, #71	; 0x47
 800aa7c:	d1be      	bne.n	800a9fc <_printf_float+0x100>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1bc      	bne.n	800a9fc <_printf_float+0x100>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e7b9      	b.n	800a9fa <_printf_float+0xfe>
 800aa86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aa8a:	d118      	bne.n	800aabe <_printf_float+0x1c2>
 800aa8c:	2900      	cmp	r1, #0
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	dd0b      	ble.n	800aaaa <_printf_float+0x1ae>
 800aa92:	6121      	str	r1, [r4, #16]
 800aa94:	b913      	cbnz	r3, 800aa9c <_printf_float+0x1a0>
 800aa96:	6822      	ldr	r2, [r4, #0]
 800aa98:	07d0      	lsls	r0, r2, #31
 800aa9a:	d502      	bpl.n	800aaa2 <_printf_float+0x1a6>
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	440b      	add	r3, r1
 800aaa0:	6123      	str	r3, [r4, #16]
 800aaa2:	65a1      	str	r1, [r4, #88]	; 0x58
 800aaa4:	f04f 0900 	mov.w	r9, #0
 800aaa8:	e7de      	b.n	800aa68 <_printf_float+0x16c>
 800aaaa:	b913      	cbnz	r3, 800aab2 <_printf_float+0x1b6>
 800aaac:	6822      	ldr	r2, [r4, #0]
 800aaae:	07d2      	lsls	r2, r2, #31
 800aab0:	d501      	bpl.n	800aab6 <_printf_float+0x1ba>
 800aab2:	3302      	adds	r3, #2
 800aab4:	e7f4      	b.n	800aaa0 <_printf_float+0x1a4>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e7f2      	b.n	800aaa0 <_printf_float+0x1a4>
 800aaba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac0:	4299      	cmp	r1, r3
 800aac2:	db05      	blt.n	800aad0 <_printf_float+0x1d4>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	6121      	str	r1, [r4, #16]
 800aac8:	07d8      	lsls	r0, r3, #31
 800aaca:	d5ea      	bpl.n	800aaa2 <_printf_float+0x1a6>
 800aacc:	1c4b      	adds	r3, r1, #1
 800aace:	e7e7      	b.n	800aaa0 <_printf_float+0x1a4>
 800aad0:	2900      	cmp	r1, #0
 800aad2:	bfd4      	ite	le
 800aad4:	f1c1 0202 	rsble	r2, r1, #2
 800aad8:	2201      	movgt	r2, #1
 800aada:	4413      	add	r3, r2
 800aadc:	e7e0      	b.n	800aaa0 <_printf_float+0x1a4>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	055a      	lsls	r2, r3, #21
 800aae2:	d407      	bmi.n	800aaf4 <_printf_float+0x1f8>
 800aae4:	6923      	ldr	r3, [r4, #16]
 800aae6:	4642      	mov	r2, r8
 800aae8:	4631      	mov	r1, r6
 800aaea:	4628      	mov	r0, r5
 800aaec:	47b8      	blx	r7
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d12c      	bne.n	800ab4c <_printf_float+0x250>
 800aaf2:	e764      	b.n	800a9be <_printf_float+0xc2>
 800aaf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aaf8:	f240 80e0 	bls.w	800acbc <_printf_float+0x3c0>
 800aafc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab00:	2200      	movs	r2, #0
 800ab02:	2300      	movs	r3, #0
 800ab04:	f7f5 ffe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d034      	beq.n	800ab76 <_printf_float+0x27a>
 800ab0c:	4a37      	ldr	r2, [pc, #220]	; (800abec <_printf_float+0x2f0>)
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4631      	mov	r1, r6
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b8      	blx	r7
 800ab16:	3001      	adds	r0, #1
 800ab18:	f43f af51 	beq.w	800a9be <_printf_float+0xc2>
 800ab1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab20:	429a      	cmp	r2, r3
 800ab22:	db02      	blt.n	800ab2a <_printf_float+0x22e>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	07d8      	lsls	r0, r3, #31
 800ab28:	d510      	bpl.n	800ab4c <_printf_float+0x250>
 800ab2a:	ee18 3a10 	vmov	r3, s16
 800ab2e:	4652      	mov	r2, sl
 800ab30:	4631      	mov	r1, r6
 800ab32:	4628      	mov	r0, r5
 800ab34:	47b8      	blx	r7
 800ab36:	3001      	adds	r0, #1
 800ab38:	f43f af41 	beq.w	800a9be <_printf_float+0xc2>
 800ab3c:	f04f 0800 	mov.w	r8, #0
 800ab40:	f104 091a 	add.w	r9, r4, #26
 800ab44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab46:	3b01      	subs	r3, #1
 800ab48:	4543      	cmp	r3, r8
 800ab4a:	dc09      	bgt.n	800ab60 <_printf_float+0x264>
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	079b      	lsls	r3, r3, #30
 800ab50:	f100 8105 	bmi.w	800ad5e <_printf_float+0x462>
 800ab54:	68e0      	ldr	r0, [r4, #12]
 800ab56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab58:	4298      	cmp	r0, r3
 800ab5a:	bfb8      	it	lt
 800ab5c:	4618      	movlt	r0, r3
 800ab5e:	e730      	b.n	800a9c2 <_printf_float+0xc6>
 800ab60:	2301      	movs	r3, #1
 800ab62:	464a      	mov	r2, r9
 800ab64:	4631      	mov	r1, r6
 800ab66:	4628      	mov	r0, r5
 800ab68:	47b8      	blx	r7
 800ab6a:	3001      	adds	r0, #1
 800ab6c:	f43f af27 	beq.w	800a9be <_printf_float+0xc2>
 800ab70:	f108 0801 	add.w	r8, r8, #1
 800ab74:	e7e6      	b.n	800ab44 <_printf_float+0x248>
 800ab76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dc39      	bgt.n	800abf0 <_printf_float+0x2f4>
 800ab7c:	4a1b      	ldr	r2, [pc, #108]	; (800abec <_printf_float+0x2f0>)
 800ab7e:	2301      	movs	r3, #1
 800ab80:	4631      	mov	r1, r6
 800ab82:	4628      	mov	r0, r5
 800ab84:	47b8      	blx	r7
 800ab86:	3001      	adds	r0, #1
 800ab88:	f43f af19 	beq.w	800a9be <_printf_float+0xc2>
 800ab8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab90:	4313      	orrs	r3, r2
 800ab92:	d102      	bne.n	800ab9a <_printf_float+0x29e>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	07d9      	lsls	r1, r3, #31
 800ab98:	d5d8      	bpl.n	800ab4c <_printf_float+0x250>
 800ab9a:	ee18 3a10 	vmov	r3, s16
 800ab9e:	4652      	mov	r2, sl
 800aba0:	4631      	mov	r1, r6
 800aba2:	4628      	mov	r0, r5
 800aba4:	47b8      	blx	r7
 800aba6:	3001      	adds	r0, #1
 800aba8:	f43f af09 	beq.w	800a9be <_printf_float+0xc2>
 800abac:	f04f 0900 	mov.w	r9, #0
 800abb0:	f104 0a1a 	add.w	sl, r4, #26
 800abb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb6:	425b      	negs	r3, r3
 800abb8:	454b      	cmp	r3, r9
 800abba:	dc01      	bgt.n	800abc0 <_printf_float+0x2c4>
 800abbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abbe:	e792      	b.n	800aae6 <_printf_float+0x1ea>
 800abc0:	2301      	movs	r3, #1
 800abc2:	4652      	mov	r2, sl
 800abc4:	4631      	mov	r1, r6
 800abc6:	4628      	mov	r0, r5
 800abc8:	47b8      	blx	r7
 800abca:	3001      	adds	r0, #1
 800abcc:	f43f aef7 	beq.w	800a9be <_printf_float+0xc2>
 800abd0:	f109 0901 	add.w	r9, r9, #1
 800abd4:	e7ee      	b.n	800abb4 <_printf_float+0x2b8>
 800abd6:	bf00      	nop
 800abd8:	7fefffff 	.word	0x7fefffff
 800abdc:	0800d684 	.word	0x0800d684
 800abe0:	0800d688 	.word	0x0800d688
 800abe4:	0800d690 	.word	0x0800d690
 800abe8:	0800d68c 	.word	0x0800d68c
 800abec:	0800d694 	.word	0x0800d694
 800abf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abf4:	429a      	cmp	r2, r3
 800abf6:	bfa8      	it	ge
 800abf8:	461a      	movge	r2, r3
 800abfa:	2a00      	cmp	r2, #0
 800abfc:	4691      	mov	r9, r2
 800abfe:	dc37      	bgt.n	800ac70 <_printf_float+0x374>
 800ac00:	f04f 0b00 	mov.w	fp, #0
 800ac04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac08:	f104 021a 	add.w	r2, r4, #26
 800ac0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac0e:	9305      	str	r3, [sp, #20]
 800ac10:	eba3 0309 	sub.w	r3, r3, r9
 800ac14:	455b      	cmp	r3, fp
 800ac16:	dc33      	bgt.n	800ac80 <_printf_float+0x384>
 800ac18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	db3b      	blt.n	800ac98 <_printf_float+0x39c>
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	07da      	lsls	r2, r3, #31
 800ac24:	d438      	bmi.n	800ac98 <_printf_float+0x39c>
 800ac26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac28:	9b05      	ldr	r3, [sp, #20]
 800ac2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	eba2 0901 	sub.w	r9, r2, r1
 800ac32:	4599      	cmp	r9, r3
 800ac34:	bfa8      	it	ge
 800ac36:	4699      	movge	r9, r3
 800ac38:	f1b9 0f00 	cmp.w	r9, #0
 800ac3c:	dc35      	bgt.n	800acaa <_printf_float+0x3ae>
 800ac3e:	f04f 0800 	mov.w	r8, #0
 800ac42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac46:	f104 0a1a 	add.w	sl, r4, #26
 800ac4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac4e:	1a9b      	subs	r3, r3, r2
 800ac50:	eba3 0309 	sub.w	r3, r3, r9
 800ac54:	4543      	cmp	r3, r8
 800ac56:	f77f af79 	ble.w	800ab4c <_printf_float+0x250>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4652      	mov	r2, sl
 800ac5e:	4631      	mov	r1, r6
 800ac60:	4628      	mov	r0, r5
 800ac62:	47b8      	blx	r7
 800ac64:	3001      	adds	r0, #1
 800ac66:	f43f aeaa 	beq.w	800a9be <_printf_float+0xc2>
 800ac6a:	f108 0801 	add.w	r8, r8, #1
 800ac6e:	e7ec      	b.n	800ac4a <_printf_float+0x34e>
 800ac70:	4613      	mov	r3, r2
 800ac72:	4631      	mov	r1, r6
 800ac74:	4642      	mov	r2, r8
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b8      	blx	r7
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	d1c0      	bne.n	800ac00 <_printf_float+0x304>
 800ac7e:	e69e      	b.n	800a9be <_printf_float+0xc2>
 800ac80:	2301      	movs	r3, #1
 800ac82:	4631      	mov	r1, r6
 800ac84:	4628      	mov	r0, r5
 800ac86:	9205      	str	r2, [sp, #20]
 800ac88:	47b8      	blx	r7
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	f43f ae97 	beq.w	800a9be <_printf_float+0xc2>
 800ac90:	9a05      	ldr	r2, [sp, #20]
 800ac92:	f10b 0b01 	add.w	fp, fp, #1
 800ac96:	e7b9      	b.n	800ac0c <_printf_float+0x310>
 800ac98:	ee18 3a10 	vmov	r3, s16
 800ac9c:	4652      	mov	r2, sl
 800ac9e:	4631      	mov	r1, r6
 800aca0:	4628      	mov	r0, r5
 800aca2:	47b8      	blx	r7
 800aca4:	3001      	adds	r0, #1
 800aca6:	d1be      	bne.n	800ac26 <_printf_float+0x32a>
 800aca8:	e689      	b.n	800a9be <_printf_float+0xc2>
 800acaa:	9a05      	ldr	r2, [sp, #20]
 800acac:	464b      	mov	r3, r9
 800acae:	4442      	add	r2, r8
 800acb0:	4631      	mov	r1, r6
 800acb2:	4628      	mov	r0, r5
 800acb4:	47b8      	blx	r7
 800acb6:	3001      	adds	r0, #1
 800acb8:	d1c1      	bne.n	800ac3e <_printf_float+0x342>
 800acba:	e680      	b.n	800a9be <_printf_float+0xc2>
 800acbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acbe:	2a01      	cmp	r2, #1
 800acc0:	dc01      	bgt.n	800acc6 <_printf_float+0x3ca>
 800acc2:	07db      	lsls	r3, r3, #31
 800acc4:	d538      	bpl.n	800ad38 <_printf_float+0x43c>
 800acc6:	2301      	movs	r3, #1
 800acc8:	4642      	mov	r2, r8
 800acca:	4631      	mov	r1, r6
 800accc:	4628      	mov	r0, r5
 800acce:	47b8      	blx	r7
 800acd0:	3001      	adds	r0, #1
 800acd2:	f43f ae74 	beq.w	800a9be <_printf_float+0xc2>
 800acd6:	ee18 3a10 	vmov	r3, s16
 800acda:	4652      	mov	r2, sl
 800acdc:	4631      	mov	r1, r6
 800acde:	4628      	mov	r0, r5
 800ace0:	47b8      	blx	r7
 800ace2:	3001      	adds	r0, #1
 800ace4:	f43f ae6b 	beq.w	800a9be <_printf_float+0xc2>
 800ace8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acec:	2200      	movs	r2, #0
 800acee:	2300      	movs	r3, #0
 800acf0:	f7f5 feea 	bl	8000ac8 <__aeabi_dcmpeq>
 800acf4:	b9d8      	cbnz	r0, 800ad2e <_printf_float+0x432>
 800acf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf8:	f108 0201 	add.w	r2, r8, #1
 800acfc:	3b01      	subs	r3, #1
 800acfe:	4631      	mov	r1, r6
 800ad00:	4628      	mov	r0, r5
 800ad02:	47b8      	blx	r7
 800ad04:	3001      	adds	r0, #1
 800ad06:	d10e      	bne.n	800ad26 <_printf_float+0x42a>
 800ad08:	e659      	b.n	800a9be <_printf_float+0xc2>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4628      	mov	r0, r5
 800ad12:	47b8      	blx	r7
 800ad14:	3001      	adds	r0, #1
 800ad16:	f43f ae52 	beq.w	800a9be <_printf_float+0xc2>
 800ad1a:	f108 0801 	add.w	r8, r8, #1
 800ad1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad20:	3b01      	subs	r3, #1
 800ad22:	4543      	cmp	r3, r8
 800ad24:	dcf1      	bgt.n	800ad0a <_printf_float+0x40e>
 800ad26:	464b      	mov	r3, r9
 800ad28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad2c:	e6dc      	b.n	800aae8 <_printf_float+0x1ec>
 800ad2e:	f04f 0800 	mov.w	r8, #0
 800ad32:	f104 0a1a 	add.w	sl, r4, #26
 800ad36:	e7f2      	b.n	800ad1e <_printf_float+0x422>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	4642      	mov	r2, r8
 800ad3c:	e7df      	b.n	800acfe <_printf_float+0x402>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	464a      	mov	r2, r9
 800ad42:	4631      	mov	r1, r6
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b8      	blx	r7
 800ad48:	3001      	adds	r0, #1
 800ad4a:	f43f ae38 	beq.w	800a9be <_printf_float+0xc2>
 800ad4e:	f108 0801 	add.w	r8, r8, #1
 800ad52:	68e3      	ldr	r3, [r4, #12]
 800ad54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad56:	1a5b      	subs	r3, r3, r1
 800ad58:	4543      	cmp	r3, r8
 800ad5a:	dcf0      	bgt.n	800ad3e <_printf_float+0x442>
 800ad5c:	e6fa      	b.n	800ab54 <_printf_float+0x258>
 800ad5e:	f04f 0800 	mov.w	r8, #0
 800ad62:	f104 0919 	add.w	r9, r4, #25
 800ad66:	e7f4      	b.n	800ad52 <_printf_float+0x456>

0800ad68 <_printf_common>:
 800ad68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad6c:	4616      	mov	r6, r2
 800ad6e:	4699      	mov	r9, r3
 800ad70:	688a      	ldr	r2, [r1, #8]
 800ad72:	690b      	ldr	r3, [r1, #16]
 800ad74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	bfb8      	it	lt
 800ad7c:	4613      	movlt	r3, r2
 800ad7e:	6033      	str	r3, [r6, #0]
 800ad80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad84:	4607      	mov	r7, r0
 800ad86:	460c      	mov	r4, r1
 800ad88:	b10a      	cbz	r2, 800ad8e <_printf_common+0x26>
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	6033      	str	r3, [r6, #0]
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	0699      	lsls	r1, r3, #26
 800ad92:	bf42      	ittt	mi
 800ad94:	6833      	ldrmi	r3, [r6, #0]
 800ad96:	3302      	addmi	r3, #2
 800ad98:	6033      	strmi	r3, [r6, #0]
 800ad9a:	6825      	ldr	r5, [r4, #0]
 800ad9c:	f015 0506 	ands.w	r5, r5, #6
 800ada0:	d106      	bne.n	800adb0 <_printf_common+0x48>
 800ada2:	f104 0a19 	add.w	sl, r4, #25
 800ada6:	68e3      	ldr	r3, [r4, #12]
 800ada8:	6832      	ldr	r2, [r6, #0]
 800adaa:	1a9b      	subs	r3, r3, r2
 800adac:	42ab      	cmp	r3, r5
 800adae:	dc26      	bgt.n	800adfe <_printf_common+0x96>
 800adb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800adb4:	1e13      	subs	r3, r2, #0
 800adb6:	6822      	ldr	r2, [r4, #0]
 800adb8:	bf18      	it	ne
 800adba:	2301      	movne	r3, #1
 800adbc:	0692      	lsls	r2, r2, #26
 800adbe:	d42b      	bmi.n	800ae18 <_printf_common+0xb0>
 800adc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800adc4:	4649      	mov	r1, r9
 800adc6:	4638      	mov	r0, r7
 800adc8:	47c0      	blx	r8
 800adca:	3001      	adds	r0, #1
 800adcc:	d01e      	beq.n	800ae0c <_printf_common+0xa4>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	68e5      	ldr	r5, [r4, #12]
 800add2:	6832      	ldr	r2, [r6, #0]
 800add4:	f003 0306 	and.w	r3, r3, #6
 800add8:	2b04      	cmp	r3, #4
 800adda:	bf08      	it	eq
 800addc:	1aad      	subeq	r5, r5, r2
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	6922      	ldr	r2, [r4, #16]
 800ade2:	bf0c      	ite	eq
 800ade4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ade8:	2500      	movne	r5, #0
 800adea:	4293      	cmp	r3, r2
 800adec:	bfc4      	itt	gt
 800adee:	1a9b      	subgt	r3, r3, r2
 800adf0:	18ed      	addgt	r5, r5, r3
 800adf2:	2600      	movs	r6, #0
 800adf4:	341a      	adds	r4, #26
 800adf6:	42b5      	cmp	r5, r6
 800adf8:	d11a      	bne.n	800ae30 <_printf_common+0xc8>
 800adfa:	2000      	movs	r0, #0
 800adfc:	e008      	b.n	800ae10 <_printf_common+0xa8>
 800adfe:	2301      	movs	r3, #1
 800ae00:	4652      	mov	r2, sl
 800ae02:	4649      	mov	r1, r9
 800ae04:	4638      	mov	r0, r7
 800ae06:	47c0      	blx	r8
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d103      	bne.n	800ae14 <_printf_common+0xac>
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae14:	3501      	adds	r5, #1
 800ae16:	e7c6      	b.n	800ada6 <_printf_common+0x3e>
 800ae18:	18e1      	adds	r1, r4, r3
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	2030      	movs	r0, #48	; 0x30
 800ae1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae22:	4422      	add	r2, r4
 800ae24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae2c:	3302      	adds	r3, #2
 800ae2e:	e7c7      	b.n	800adc0 <_printf_common+0x58>
 800ae30:	2301      	movs	r3, #1
 800ae32:	4622      	mov	r2, r4
 800ae34:	4649      	mov	r1, r9
 800ae36:	4638      	mov	r0, r7
 800ae38:	47c0      	blx	r8
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	d0e6      	beq.n	800ae0c <_printf_common+0xa4>
 800ae3e:	3601      	adds	r6, #1
 800ae40:	e7d9      	b.n	800adf6 <_printf_common+0x8e>
	...

0800ae44 <_printf_i>:
 800ae44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae48:	460c      	mov	r4, r1
 800ae4a:	4691      	mov	r9, r2
 800ae4c:	7e27      	ldrb	r7, [r4, #24]
 800ae4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae50:	2f78      	cmp	r7, #120	; 0x78
 800ae52:	4680      	mov	r8, r0
 800ae54:	469a      	mov	sl, r3
 800ae56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae5a:	d807      	bhi.n	800ae6c <_printf_i+0x28>
 800ae5c:	2f62      	cmp	r7, #98	; 0x62
 800ae5e:	d80a      	bhi.n	800ae76 <_printf_i+0x32>
 800ae60:	2f00      	cmp	r7, #0
 800ae62:	f000 80d8 	beq.w	800b016 <_printf_i+0x1d2>
 800ae66:	2f58      	cmp	r7, #88	; 0x58
 800ae68:	f000 80a3 	beq.w	800afb2 <_printf_i+0x16e>
 800ae6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ae70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae74:	e03a      	b.n	800aeec <_printf_i+0xa8>
 800ae76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae7a:	2b15      	cmp	r3, #21
 800ae7c:	d8f6      	bhi.n	800ae6c <_printf_i+0x28>
 800ae7e:	a001      	add	r0, pc, #4	; (adr r0, 800ae84 <_printf_i+0x40>)
 800ae80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ae84:	0800aedd 	.word	0x0800aedd
 800ae88:	0800aef1 	.word	0x0800aef1
 800ae8c:	0800ae6d 	.word	0x0800ae6d
 800ae90:	0800ae6d 	.word	0x0800ae6d
 800ae94:	0800ae6d 	.word	0x0800ae6d
 800ae98:	0800ae6d 	.word	0x0800ae6d
 800ae9c:	0800aef1 	.word	0x0800aef1
 800aea0:	0800ae6d 	.word	0x0800ae6d
 800aea4:	0800ae6d 	.word	0x0800ae6d
 800aea8:	0800ae6d 	.word	0x0800ae6d
 800aeac:	0800ae6d 	.word	0x0800ae6d
 800aeb0:	0800affd 	.word	0x0800affd
 800aeb4:	0800af21 	.word	0x0800af21
 800aeb8:	0800afdf 	.word	0x0800afdf
 800aebc:	0800ae6d 	.word	0x0800ae6d
 800aec0:	0800ae6d 	.word	0x0800ae6d
 800aec4:	0800b01f 	.word	0x0800b01f
 800aec8:	0800ae6d 	.word	0x0800ae6d
 800aecc:	0800af21 	.word	0x0800af21
 800aed0:	0800ae6d 	.word	0x0800ae6d
 800aed4:	0800ae6d 	.word	0x0800ae6d
 800aed8:	0800afe7 	.word	0x0800afe7
 800aedc:	680b      	ldr	r3, [r1, #0]
 800aede:	1d1a      	adds	r2, r3, #4
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	600a      	str	r2, [r1, #0]
 800aee4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aeec:	2301      	movs	r3, #1
 800aeee:	e0a3      	b.n	800b038 <_printf_i+0x1f4>
 800aef0:	6825      	ldr	r5, [r4, #0]
 800aef2:	6808      	ldr	r0, [r1, #0]
 800aef4:	062e      	lsls	r6, r5, #24
 800aef6:	f100 0304 	add.w	r3, r0, #4
 800aefa:	d50a      	bpl.n	800af12 <_printf_i+0xce>
 800aefc:	6805      	ldr	r5, [r0, #0]
 800aefe:	600b      	str	r3, [r1, #0]
 800af00:	2d00      	cmp	r5, #0
 800af02:	da03      	bge.n	800af0c <_printf_i+0xc8>
 800af04:	232d      	movs	r3, #45	; 0x2d
 800af06:	426d      	negs	r5, r5
 800af08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af0c:	485e      	ldr	r0, [pc, #376]	; (800b088 <_printf_i+0x244>)
 800af0e:	230a      	movs	r3, #10
 800af10:	e019      	b.n	800af46 <_printf_i+0x102>
 800af12:	f015 0f40 	tst.w	r5, #64	; 0x40
 800af16:	6805      	ldr	r5, [r0, #0]
 800af18:	600b      	str	r3, [r1, #0]
 800af1a:	bf18      	it	ne
 800af1c:	b22d      	sxthne	r5, r5
 800af1e:	e7ef      	b.n	800af00 <_printf_i+0xbc>
 800af20:	680b      	ldr	r3, [r1, #0]
 800af22:	6825      	ldr	r5, [r4, #0]
 800af24:	1d18      	adds	r0, r3, #4
 800af26:	6008      	str	r0, [r1, #0]
 800af28:	0628      	lsls	r0, r5, #24
 800af2a:	d501      	bpl.n	800af30 <_printf_i+0xec>
 800af2c:	681d      	ldr	r5, [r3, #0]
 800af2e:	e002      	b.n	800af36 <_printf_i+0xf2>
 800af30:	0669      	lsls	r1, r5, #25
 800af32:	d5fb      	bpl.n	800af2c <_printf_i+0xe8>
 800af34:	881d      	ldrh	r5, [r3, #0]
 800af36:	4854      	ldr	r0, [pc, #336]	; (800b088 <_printf_i+0x244>)
 800af38:	2f6f      	cmp	r7, #111	; 0x6f
 800af3a:	bf0c      	ite	eq
 800af3c:	2308      	moveq	r3, #8
 800af3e:	230a      	movne	r3, #10
 800af40:	2100      	movs	r1, #0
 800af42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af46:	6866      	ldr	r6, [r4, #4]
 800af48:	60a6      	str	r6, [r4, #8]
 800af4a:	2e00      	cmp	r6, #0
 800af4c:	bfa2      	ittt	ge
 800af4e:	6821      	ldrge	r1, [r4, #0]
 800af50:	f021 0104 	bicge.w	r1, r1, #4
 800af54:	6021      	strge	r1, [r4, #0]
 800af56:	b90d      	cbnz	r5, 800af5c <_printf_i+0x118>
 800af58:	2e00      	cmp	r6, #0
 800af5a:	d04d      	beq.n	800aff8 <_printf_i+0x1b4>
 800af5c:	4616      	mov	r6, r2
 800af5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800af62:	fb03 5711 	mls	r7, r3, r1, r5
 800af66:	5dc7      	ldrb	r7, [r0, r7]
 800af68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af6c:	462f      	mov	r7, r5
 800af6e:	42bb      	cmp	r3, r7
 800af70:	460d      	mov	r5, r1
 800af72:	d9f4      	bls.n	800af5e <_printf_i+0x11a>
 800af74:	2b08      	cmp	r3, #8
 800af76:	d10b      	bne.n	800af90 <_printf_i+0x14c>
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	07df      	lsls	r7, r3, #31
 800af7c:	d508      	bpl.n	800af90 <_printf_i+0x14c>
 800af7e:	6923      	ldr	r3, [r4, #16]
 800af80:	6861      	ldr	r1, [r4, #4]
 800af82:	4299      	cmp	r1, r3
 800af84:	bfde      	ittt	le
 800af86:	2330      	movle	r3, #48	; 0x30
 800af88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af90:	1b92      	subs	r2, r2, r6
 800af92:	6122      	str	r2, [r4, #16]
 800af94:	f8cd a000 	str.w	sl, [sp]
 800af98:	464b      	mov	r3, r9
 800af9a:	aa03      	add	r2, sp, #12
 800af9c:	4621      	mov	r1, r4
 800af9e:	4640      	mov	r0, r8
 800afa0:	f7ff fee2 	bl	800ad68 <_printf_common>
 800afa4:	3001      	adds	r0, #1
 800afa6:	d14c      	bne.n	800b042 <_printf_i+0x1fe>
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295
 800afac:	b004      	add	sp, #16
 800afae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb2:	4835      	ldr	r0, [pc, #212]	; (800b088 <_printf_i+0x244>)
 800afb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afb8:	6823      	ldr	r3, [r4, #0]
 800afba:	680e      	ldr	r6, [r1, #0]
 800afbc:	061f      	lsls	r7, r3, #24
 800afbe:	f856 5b04 	ldr.w	r5, [r6], #4
 800afc2:	600e      	str	r6, [r1, #0]
 800afc4:	d514      	bpl.n	800aff0 <_printf_i+0x1ac>
 800afc6:	07d9      	lsls	r1, r3, #31
 800afc8:	bf44      	itt	mi
 800afca:	f043 0320 	orrmi.w	r3, r3, #32
 800afce:	6023      	strmi	r3, [r4, #0]
 800afd0:	b91d      	cbnz	r5, 800afda <_printf_i+0x196>
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	f023 0320 	bic.w	r3, r3, #32
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	2310      	movs	r3, #16
 800afdc:	e7b0      	b.n	800af40 <_printf_i+0xfc>
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	f043 0320 	orr.w	r3, r3, #32
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	2378      	movs	r3, #120	; 0x78
 800afe8:	4828      	ldr	r0, [pc, #160]	; (800b08c <_printf_i+0x248>)
 800afea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800afee:	e7e3      	b.n	800afb8 <_printf_i+0x174>
 800aff0:	065e      	lsls	r6, r3, #25
 800aff2:	bf48      	it	mi
 800aff4:	b2ad      	uxthmi	r5, r5
 800aff6:	e7e6      	b.n	800afc6 <_printf_i+0x182>
 800aff8:	4616      	mov	r6, r2
 800affa:	e7bb      	b.n	800af74 <_printf_i+0x130>
 800affc:	680b      	ldr	r3, [r1, #0]
 800affe:	6826      	ldr	r6, [r4, #0]
 800b000:	6960      	ldr	r0, [r4, #20]
 800b002:	1d1d      	adds	r5, r3, #4
 800b004:	600d      	str	r5, [r1, #0]
 800b006:	0635      	lsls	r5, r6, #24
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	d501      	bpl.n	800b010 <_printf_i+0x1cc>
 800b00c:	6018      	str	r0, [r3, #0]
 800b00e:	e002      	b.n	800b016 <_printf_i+0x1d2>
 800b010:	0671      	lsls	r1, r6, #25
 800b012:	d5fb      	bpl.n	800b00c <_printf_i+0x1c8>
 800b014:	8018      	strh	r0, [r3, #0]
 800b016:	2300      	movs	r3, #0
 800b018:	6123      	str	r3, [r4, #16]
 800b01a:	4616      	mov	r6, r2
 800b01c:	e7ba      	b.n	800af94 <_printf_i+0x150>
 800b01e:	680b      	ldr	r3, [r1, #0]
 800b020:	1d1a      	adds	r2, r3, #4
 800b022:	600a      	str	r2, [r1, #0]
 800b024:	681e      	ldr	r6, [r3, #0]
 800b026:	6862      	ldr	r2, [r4, #4]
 800b028:	2100      	movs	r1, #0
 800b02a:	4630      	mov	r0, r6
 800b02c:	f7f5 f8d8 	bl	80001e0 <memchr>
 800b030:	b108      	cbz	r0, 800b036 <_printf_i+0x1f2>
 800b032:	1b80      	subs	r0, r0, r6
 800b034:	6060      	str	r0, [r4, #4]
 800b036:	6863      	ldr	r3, [r4, #4]
 800b038:	6123      	str	r3, [r4, #16]
 800b03a:	2300      	movs	r3, #0
 800b03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b040:	e7a8      	b.n	800af94 <_printf_i+0x150>
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	4632      	mov	r2, r6
 800b046:	4649      	mov	r1, r9
 800b048:	4640      	mov	r0, r8
 800b04a:	47d0      	blx	sl
 800b04c:	3001      	adds	r0, #1
 800b04e:	d0ab      	beq.n	800afa8 <_printf_i+0x164>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	079b      	lsls	r3, r3, #30
 800b054:	d413      	bmi.n	800b07e <_printf_i+0x23a>
 800b056:	68e0      	ldr	r0, [r4, #12]
 800b058:	9b03      	ldr	r3, [sp, #12]
 800b05a:	4298      	cmp	r0, r3
 800b05c:	bfb8      	it	lt
 800b05e:	4618      	movlt	r0, r3
 800b060:	e7a4      	b.n	800afac <_printf_i+0x168>
 800b062:	2301      	movs	r3, #1
 800b064:	4632      	mov	r2, r6
 800b066:	4649      	mov	r1, r9
 800b068:	4640      	mov	r0, r8
 800b06a:	47d0      	blx	sl
 800b06c:	3001      	adds	r0, #1
 800b06e:	d09b      	beq.n	800afa8 <_printf_i+0x164>
 800b070:	3501      	adds	r5, #1
 800b072:	68e3      	ldr	r3, [r4, #12]
 800b074:	9903      	ldr	r1, [sp, #12]
 800b076:	1a5b      	subs	r3, r3, r1
 800b078:	42ab      	cmp	r3, r5
 800b07a:	dcf2      	bgt.n	800b062 <_printf_i+0x21e>
 800b07c:	e7eb      	b.n	800b056 <_printf_i+0x212>
 800b07e:	2500      	movs	r5, #0
 800b080:	f104 0619 	add.w	r6, r4, #25
 800b084:	e7f5      	b.n	800b072 <_printf_i+0x22e>
 800b086:	bf00      	nop
 800b088:	0800d696 	.word	0x0800d696
 800b08c:	0800d6a7 	.word	0x0800d6a7

0800b090 <siprintf>:
 800b090:	b40e      	push	{r1, r2, r3}
 800b092:	b500      	push	{lr}
 800b094:	b09c      	sub	sp, #112	; 0x70
 800b096:	ab1d      	add	r3, sp, #116	; 0x74
 800b098:	9002      	str	r0, [sp, #8]
 800b09a:	9006      	str	r0, [sp, #24]
 800b09c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0a0:	4809      	ldr	r0, [pc, #36]	; (800b0c8 <siprintf+0x38>)
 800b0a2:	9107      	str	r1, [sp, #28]
 800b0a4:	9104      	str	r1, [sp, #16]
 800b0a6:	4909      	ldr	r1, [pc, #36]	; (800b0cc <siprintf+0x3c>)
 800b0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ac:	9105      	str	r1, [sp, #20]
 800b0ae:	6800      	ldr	r0, [r0, #0]
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	a902      	add	r1, sp, #8
 800b0b4:	f001 fb24 	bl	800c700 <_svfiprintf_r>
 800b0b8:	9b02      	ldr	r3, [sp, #8]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
 800b0be:	b01c      	add	sp, #112	; 0x70
 800b0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0c4:	b003      	add	sp, #12
 800b0c6:	4770      	bx	lr
 800b0c8:	20000014 	.word	0x20000014
 800b0cc:	ffff0208 	.word	0xffff0208

0800b0d0 <quorem>:
 800b0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	6903      	ldr	r3, [r0, #16]
 800b0d6:	690c      	ldr	r4, [r1, #16]
 800b0d8:	42a3      	cmp	r3, r4
 800b0da:	4607      	mov	r7, r0
 800b0dc:	f2c0 8081 	blt.w	800b1e2 <quorem+0x112>
 800b0e0:	3c01      	subs	r4, #1
 800b0e2:	f101 0814 	add.w	r8, r1, #20
 800b0e6:	f100 0514 	add.w	r5, r0, #20
 800b0ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b100:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b104:	fbb2 f6f3 	udiv	r6, r2, r3
 800b108:	d331      	bcc.n	800b16e <quorem+0x9e>
 800b10a:	f04f 0e00 	mov.w	lr, #0
 800b10e:	4640      	mov	r0, r8
 800b110:	46ac      	mov	ip, r5
 800b112:	46f2      	mov	sl, lr
 800b114:	f850 2b04 	ldr.w	r2, [r0], #4
 800b118:	b293      	uxth	r3, r2
 800b11a:	fb06 e303 	mla	r3, r6, r3, lr
 800b11e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b122:	b29b      	uxth	r3, r3
 800b124:	ebaa 0303 	sub.w	r3, sl, r3
 800b128:	0c12      	lsrs	r2, r2, #16
 800b12a:	f8dc a000 	ldr.w	sl, [ip]
 800b12e:	fb06 e202 	mla	r2, r6, r2, lr
 800b132:	fa13 f38a 	uxtah	r3, r3, sl
 800b136:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b13a:	fa1f fa82 	uxth.w	sl, r2
 800b13e:	f8dc 2000 	ldr.w	r2, [ip]
 800b142:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b146:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b150:	4581      	cmp	r9, r0
 800b152:	f84c 3b04 	str.w	r3, [ip], #4
 800b156:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b15a:	d2db      	bcs.n	800b114 <quorem+0x44>
 800b15c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b160:	b92b      	cbnz	r3, 800b16e <quorem+0x9e>
 800b162:	9b01      	ldr	r3, [sp, #4]
 800b164:	3b04      	subs	r3, #4
 800b166:	429d      	cmp	r5, r3
 800b168:	461a      	mov	r2, r3
 800b16a:	d32e      	bcc.n	800b1ca <quorem+0xfa>
 800b16c:	613c      	str	r4, [r7, #16]
 800b16e:	4638      	mov	r0, r7
 800b170:	f001 f8b0 	bl	800c2d4 <__mcmp>
 800b174:	2800      	cmp	r0, #0
 800b176:	db24      	blt.n	800b1c2 <quorem+0xf2>
 800b178:	3601      	adds	r6, #1
 800b17a:	4628      	mov	r0, r5
 800b17c:	f04f 0c00 	mov.w	ip, #0
 800b180:	f858 2b04 	ldr.w	r2, [r8], #4
 800b184:	f8d0 e000 	ldr.w	lr, [r0]
 800b188:	b293      	uxth	r3, r2
 800b18a:	ebac 0303 	sub.w	r3, ip, r3
 800b18e:	0c12      	lsrs	r2, r2, #16
 800b190:	fa13 f38e 	uxtah	r3, r3, lr
 800b194:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1a2:	45c1      	cmp	r9, r8
 800b1a4:	f840 3b04 	str.w	r3, [r0], #4
 800b1a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1ac:	d2e8      	bcs.n	800b180 <quorem+0xb0>
 800b1ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1b6:	b922      	cbnz	r2, 800b1c2 <quorem+0xf2>
 800b1b8:	3b04      	subs	r3, #4
 800b1ba:	429d      	cmp	r5, r3
 800b1bc:	461a      	mov	r2, r3
 800b1be:	d30a      	bcc.n	800b1d6 <quorem+0x106>
 800b1c0:	613c      	str	r4, [r7, #16]
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	b003      	add	sp, #12
 800b1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	3b04      	subs	r3, #4
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	d1cc      	bne.n	800b16c <quorem+0x9c>
 800b1d2:	3c01      	subs	r4, #1
 800b1d4:	e7c7      	b.n	800b166 <quorem+0x96>
 800b1d6:	6812      	ldr	r2, [r2, #0]
 800b1d8:	3b04      	subs	r3, #4
 800b1da:	2a00      	cmp	r2, #0
 800b1dc:	d1f0      	bne.n	800b1c0 <quorem+0xf0>
 800b1de:	3c01      	subs	r4, #1
 800b1e0:	e7eb      	b.n	800b1ba <quorem+0xea>
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	e7ee      	b.n	800b1c4 <quorem+0xf4>
	...

0800b1e8 <_dtoa_r>:
 800b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ec:	ed2d 8b02 	vpush	{d8}
 800b1f0:	ec57 6b10 	vmov	r6, r7, d0
 800b1f4:	b095      	sub	sp, #84	; 0x54
 800b1f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b1fc:	9105      	str	r1, [sp, #20]
 800b1fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b202:	4604      	mov	r4, r0
 800b204:	9209      	str	r2, [sp, #36]	; 0x24
 800b206:	930f      	str	r3, [sp, #60]	; 0x3c
 800b208:	b975      	cbnz	r5, 800b228 <_dtoa_r+0x40>
 800b20a:	2010      	movs	r0, #16
 800b20c:	f000 fddc 	bl	800bdc8 <malloc>
 800b210:	4602      	mov	r2, r0
 800b212:	6260      	str	r0, [r4, #36]	; 0x24
 800b214:	b920      	cbnz	r0, 800b220 <_dtoa_r+0x38>
 800b216:	4bb2      	ldr	r3, [pc, #712]	; (800b4e0 <_dtoa_r+0x2f8>)
 800b218:	21ea      	movs	r1, #234	; 0xea
 800b21a:	48b2      	ldr	r0, [pc, #712]	; (800b4e4 <_dtoa_r+0x2fc>)
 800b21c:	f001 fb80 	bl	800c920 <__assert_func>
 800b220:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b224:	6005      	str	r5, [r0, #0]
 800b226:	60c5      	str	r5, [r0, #12]
 800b228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b22a:	6819      	ldr	r1, [r3, #0]
 800b22c:	b151      	cbz	r1, 800b244 <_dtoa_r+0x5c>
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	604a      	str	r2, [r1, #4]
 800b232:	2301      	movs	r3, #1
 800b234:	4093      	lsls	r3, r2
 800b236:	608b      	str	r3, [r1, #8]
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 fe0d 	bl	800be58 <_Bfree>
 800b23e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b240:	2200      	movs	r2, #0
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	1e3b      	subs	r3, r7, #0
 800b246:	bfb9      	ittee	lt
 800b248:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b24c:	9303      	strlt	r3, [sp, #12]
 800b24e:	2300      	movge	r3, #0
 800b250:	f8c8 3000 	strge.w	r3, [r8]
 800b254:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b258:	4ba3      	ldr	r3, [pc, #652]	; (800b4e8 <_dtoa_r+0x300>)
 800b25a:	bfbc      	itt	lt
 800b25c:	2201      	movlt	r2, #1
 800b25e:	f8c8 2000 	strlt.w	r2, [r8]
 800b262:	ea33 0309 	bics.w	r3, r3, r9
 800b266:	d11b      	bne.n	800b2a0 <_dtoa_r+0xb8>
 800b268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b26a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b274:	4333      	orrs	r3, r6
 800b276:	f000 857a 	beq.w	800bd6e <_dtoa_r+0xb86>
 800b27a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b27c:	b963      	cbnz	r3, 800b298 <_dtoa_r+0xb0>
 800b27e:	4b9b      	ldr	r3, [pc, #620]	; (800b4ec <_dtoa_r+0x304>)
 800b280:	e024      	b.n	800b2cc <_dtoa_r+0xe4>
 800b282:	4b9b      	ldr	r3, [pc, #620]	; (800b4f0 <_dtoa_r+0x308>)
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	3308      	adds	r3, #8
 800b288:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	9800      	ldr	r0, [sp, #0]
 800b28e:	b015      	add	sp, #84	; 0x54
 800b290:	ecbd 8b02 	vpop	{d8}
 800b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b298:	4b94      	ldr	r3, [pc, #592]	; (800b4ec <_dtoa_r+0x304>)
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	3303      	adds	r3, #3
 800b29e:	e7f3      	b.n	800b288 <_dtoa_r+0xa0>
 800b2a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	ec51 0b17 	vmov	r0, r1, d7
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b2b0:	f7f5 fc0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	b158      	cbz	r0, 800b2d0 <_dtoa_r+0xe8>
 800b2b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 8551 	beq.w	800bd68 <_dtoa_r+0xb80>
 800b2c6:	488b      	ldr	r0, [pc, #556]	; (800b4f4 <_dtoa_r+0x30c>)
 800b2c8:	6018      	str	r0, [r3, #0]
 800b2ca:	1e43      	subs	r3, r0, #1
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	e7dd      	b.n	800b28c <_dtoa_r+0xa4>
 800b2d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b2d4:	aa12      	add	r2, sp, #72	; 0x48
 800b2d6:	a913      	add	r1, sp, #76	; 0x4c
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f001 f89f 	bl	800c41c <__d2b>
 800b2de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2e2:	4683      	mov	fp, r0
 800b2e4:	2d00      	cmp	r5, #0
 800b2e6:	d07c      	beq.n	800b3e2 <_dtoa_r+0x1fa>
 800b2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b2ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b2f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b2fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b2fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b302:	4b7d      	ldr	r3, [pc, #500]	; (800b4f8 <_dtoa_r+0x310>)
 800b304:	2200      	movs	r2, #0
 800b306:	4630      	mov	r0, r6
 800b308:	4639      	mov	r1, r7
 800b30a:	f7f4 ffbd 	bl	8000288 <__aeabi_dsub>
 800b30e:	a36e      	add	r3, pc, #440	; (adr r3, 800b4c8 <_dtoa_r+0x2e0>)
 800b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b314:	f7f5 f970 	bl	80005f8 <__aeabi_dmul>
 800b318:	a36d      	add	r3, pc, #436	; (adr r3, 800b4d0 <_dtoa_r+0x2e8>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f4 ffb5 	bl	800028c <__adddf3>
 800b322:	4606      	mov	r6, r0
 800b324:	4628      	mov	r0, r5
 800b326:	460f      	mov	r7, r1
 800b328:	f7f5 f8fc 	bl	8000524 <__aeabi_i2d>
 800b32c:	a36a      	add	r3, pc, #424	; (adr r3, 800b4d8 <_dtoa_r+0x2f0>)
 800b32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b332:	f7f5 f961 	bl	80005f8 <__aeabi_dmul>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4630      	mov	r0, r6
 800b33c:	4639      	mov	r1, r7
 800b33e:	f7f4 ffa5 	bl	800028c <__adddf3>
 800b342:	4606      	mov	r6, r0
 800b344:	460f      	mov	r7, r1
 800b346:	f7f5 fc07 	bl	8000b58 <__aeabi_d2iz>
 800b34a:	2200      	movs	r2, #0
 800b34c:	4682      	mov	sl, r0
 800b34e:	2300      	movs	r3, #0
 800b350:	4630      	mov	r0, r6
 800b352:	4639      	mov	r1, r7
 800b354:	f7f5 fbc2 	bl	8000adc <__aeabi_dcmplt>
 800b358:	b148      	cbz	r0, 800b36e <_dtoa_r+0x186>
 800b35a:	4650      	mov	r0, sl
 800b35c:	f7f5 f8e2 	bl	8000524 <__aeabi_i2d>
 800b360:	4632      	mov	r2, r6
 800b362:	463b      	mov	r3, r7
 800b364:	f7f5 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b368:	b908      	cbnz	r0, 800b36e <_dtoa_r+0x186>
 800b36a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b36e:	f1ba 0f16 	cmp.w	sl, #22
 800b372:	d854      	bhi.n	800b41e <_dtoa_r+0x236>
 800b374:	4b61      	ldr	r3, [pc, #388]	; (800b4fc <_dtoa_r+0x314>)
 800b376:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b382:	f7f5 fbab 	bl	8000adc <__aeabi_dcmplt>
 800b386:	2800      	cmp	r0, #0
 800b388:	d04b      	beq.n	800b422 <_dtoa_r+0x23a>
 800b38a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b38e:	2300      	movs	r3, #0
 800b390:	930e      	str	r3, [sp, #56]	; 0x38
 800b392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b394:	1b5d      	subs	r5, r3, r5
 800b396:	1e6b      	subs	r3, r5, #1
 800b398:	9304      	str	r3, [sp, #16]
 800b39a:	bf43      	ittte	mi
 800b39c:	2300      	movmi	r3, #0
 800b39e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b3a2:	9304      	strmi	r3, [sp, #16]
 800b3a4:	f04f 0800 	movpl.w	r8, #0
 800b3a8:	f1ba 0f00 	cmp.w	sl, #0
 800b3ac:	db3b      	blt.n	800b426 <_dtoa_r+0x23e>
 800b3ae:	9b04      	ldr	r3, [sp, #16]
 800b3b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b3b4:	4453      	add	r3, sl
 800b3b6:	9304      	str	r3, [sp, #16]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9306      	str	r3, [sp, #24]
 800b3bc:	9b05      	ldr	r3, [sp, #20]
 800b3be:	2b09      	cmp	r3, #9
 800b3c0:	d869      	bhi.n	800b496 <_dtoa_r+0x2ae>
 800b3c2:	2b05      	cmp	r3, #5
 800b3c4:	bfc4      	itt	gt
 800b3c6:	3b04      	subgt	r3, #4
 800b3c8:	9305      	strgt	r3, [sp, #20]
 800b3ca:	9b05      	ldr	r3, [sp, #20]
 800b3cc:	f1a3 0302 	sub.w	r3, r3, #2
 800b3d0:	bfcc      	ite	gt
 800b3d2:	2500      	movgt	r5, #0
 800b3d4:	2501      	movle	r5, #1
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d869      	bhi.n	800b4ae <_dtoa_r+0x2c6>
 800b3da:	e8df f003 	tbb	[pc, r3]
 800b3de:	4e2c      	.short	0x4e2c
 800b3e0:	5a4c      	.short	0x5a4c
 800b3e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b3e6:	441d      	add	r5, r3
 800b3e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b3ec:	2b20      	cmp	r3, #32
 800b3ee:	bfc1      	itttt	gt
 800b3f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b3f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b3f8:	fa09 f303 	lslgt.w	r3, r9, r3
 800b3fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b400:	bfda      	itte	le
 800b402:	f1c3 0320 	rsble	r3, r3, #32
 800b406:	fa06 f003 	lslle.w	r0, r6, r3
 800b40a:	4318      	orrgt	r0, r3
 800b40c:	f7f5 f87a 	bl	8000504 <__aeabi_ui2d>
 800b410:	2301      	movs	r3, #1
 800b412:	4606      	mov	r6, r0
 800b414:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b418:	3d01      	subs	r5, #1
 800b41a:	9310      	str	r3, [sp, #64]	; 0x40
 800b41c:	e771      	b.n	800b302 <_dtoa_r+0x11a>
 800b41e:	2301      	movs	r3, #1
 800b420:	e7b6      	b.n	800b390 <_dtoa_r+0x1a8>
 800b422:	900e      	str	r0, [sp, #56]	; 0x38
 800b424:	e7b5      	b.n	800b392 <_dtoa_r+0x1aa>
 800b426:	f1ca 0300 	rsb	r3, sl, #0
 800b42a:	9306      	str	r3, [sp, #24]
 800b42c:	2300      	movs	r3, #0
 800b42e:	eba8 080a 	sub.w	r8, r8, sl
 800b432:	930d      	str	r3, [sp, #52]	; 0x34
 800b434:	e7c2      	b.n	800b3bc <_dtoa_r+0x1d4>
 800b436:	2300      	movs	r3, #0
 800b438:	9308      	str	r3, [sp, #32]
 800b43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	dc39      	bgt.n	800b4b4 <_dtoa_r+0x2cc>
 800b440:	f04f 0901 	mov.w	r9, #1
 800b444:	f8cd 9004 	str.w	r9, [sp, #4]
 800b448:	464b      	mov	r3, r9
 800b44a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b44e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b450:	2200      	movs	r2, #0
 800b452:	6042      	str	r2, [r0, #4]
 800b454:	2204      	movs	r2, #4
 800b456:	f102 0614 	add.w	r6, r2, #20
 800b45a:	429e      	cmp	r6, r3
 800b45c:	6841      	ldr	r1, [r0, #4]
 800b45e:	d92f      	bls.n	800b4c0 <_dtoa_r+0x2d8>
 800b460:	4620      	mov	r0, r4
 800b462:	f000 fcb9 	bl	800bdd8 <_Balloc>
 800b466:	9000      	str	r0, [sp, #0]
 800b468:	2800      	cmp	r0, #0
 800b46a:	d14b      	bne.n	800b504 <_dtoa_r+0x31c>
 800b46c:	4b24      	ldr	r3, [pc, #144]	; (800b500 <_dtoa_r+0x318>)
 800b46e:	4602      	mov	r2, r0
 800b470:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b474:	e6d1      	b.n	800b21a <_dtoa_r+0x32>
 800b476:	2301      	movs	r3, #1
 800b478:	e7de      	b.n	800b438 <_dtoa_r+0x250>
 800b47a:	2300      	movs	r3, #0
 800b47c:	9308      	str	r3, [sp, #32]
 800b47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b480:	eb0a 0903 	add.w	r9, sl, r3
 800b484:	f109 0301 	add.w	r3, r9, #1
 800b488:	2b01      	cmp	r3, #1
 800b48a:	9301      	str	r3, [sp, #4]
 800b48c:	bfb8      	it	lt
 800b48e:	2301      	movlt	r3, #1
 800b490:	e7dd      	b.n	800b44e <_dtoa_r+0x266>
 800b492:	2301      	movs	r3, #1
 800b494:	e7f2      	b.n	800b47c <_dtoa_r+0x294>
 800b496:	2501      	movs	r5, #1
 800b498:	2300      	movs	r3, #0
 800b49a:	9305      	str	r3, [sp, #20]
 800b49c:	9508      	str	r5, [sp, #32]
 800b49e:	f04f 39ff 	mov.w	r9, #4294967295
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4a8:	2312      	movs	r3, #18
 800b4aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b4ac:	e7cf      	b.n	800b44e <_dtoa_r+0x266>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	9308      	str	r3, [sp, #32]
 800b4b2:	e7f4      	b.n	800b49e <_dtoa_r+0x2b6>
 800b4b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b4b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4bc:	464b      	mov	r3, r9
 800b4be:	e7c6      	b.n	800b44e <_dtoa_r+0x266>
 800b4c0:	3101      	adds	r1, #1
 800b4c2:	6041      	str	r1, [r0, #4]
 800b4c4:	0052      	lsls	r2, r2, #1
 800b4c6:	e7c6      	b.n	800b456 <_dtoa_r+0x26e>
 800b4c8:	636f4361 	.word	0x636f4361
 800b4cc:	3fd287a7 	.word	0x3fd287a7
 800b4d0:	8b60c8b3 	.word	0x8b60c8b3
 800b4d4:	3fc68a28 	.word	0x3fc68a28
 800b4d8:	509f79fb 	.word	0x509f79fb
 800b4dc:	3fd34413 	.word	0x3fd34413
 800b4e0:	0800d6c5 	.word	0x0800d6c5
 800b4e4:	0800d6dc 	.word	0x0800d6dc
 800b4e8:	7ff00000 	.word	0x7ff00000
 800b4ec:	0800d6c1 	.word	0x0800d6c1
 800b4f0:	0800d6b8 	.word	0x0800d6b8
 800b4f4:	0800d695 	.word	0x0800d695
 800b4f8:	3ff80000 	.word	0x3ff80000
 800b4fc:	0800d7d8 	.word	0x0800d7d8
 800b500:	0800d73b 	.word	0x0800d73b
 800b504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b506:	9a00      	ldr	r2, [sp, #0]
 800b508:	601a      	str	r2, [r3, #0]
 800b50a:	9b01      	ldr	r3, [sp, #4]
 800b50c:	2b0e      	cmp	r3, #14
 800b50e:	f200 80ad 	bhi.w	800b66c <_dtoa_r+0x484>
 800b512:	2d00      	cmp	r5, #0
 800b514:	f000 80aa 	beq.w	800b66c <_dtoa_r+0x484>
 800b518:	f1ba 0f00 	cmp.w	sl, #0
 800b51c:	dd36      	ble.n	800b58c <_dtoa_r+0x3a4>
 800b51e:	4ac3      	ldr	r2, [pc, #780]	; (800b82c <_dtoa_r+0x644>)
 800b520:	f00a 030f 	and.w	r3, sl, #15
 800b524:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b528:	ed93 7b00 	vldr	d7, [r3]
 800b52c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b530:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b534:	eeb0 8a47 	vmov.f32	s16, s14
 800b538:	eef0 8a67 	vmov.f32	s17, s15
 800b53c:	d016      	beq.n	800b56c <_dtoa_r+0x384>
 800b53e:	4bbc      	ldr	r3, [pc, #752]	; (800b830 <_dtoa_r+0x648>)
 800b540:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b548:	f7f5 f980 	bl	800084c <__aeabi_ddiv>
 800b54c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b550:	f007 070f 	and.w	r7, r7, #15
 800b554:	2503      	movs	r5, #3
 800b556:	4eb6      	ldr	r6, [pc, #728]	; (800b830 <_dtoa_r+0x648>)
 800b558:	b957      	cbnz	r7, 800b570 <_dtoa_r+0x388>
 800b55a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b55e:	ec53 2b18 	vmov	r2, r3, d8
 800b562:	f7f5 f973 	bl	800084c <__aeabi_ddiv>
 800b566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b56a:	e029      	b.n	800b5c0 <_dtoa_r+0x3d8>
 800b56c:	2502      	movs	r5, #2
 800b56e:	e7f2      	b.n	800b556 <_dtoa_r+0x36e>
 800b570:	07f9      	lsls	r1, r7, #31
 800b572:	d508      	bpl.n	800b586 <_dtoa_r+0x39e>
 800b574:	ec51 0b18 	vmov	r0, r1, d8
 800b578:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b57c:	f7f5 f83c 	bl	80005f8 <__aeabi_dmul>
 800b580:	ec41 0b18 	vmov	d8, r0, r1
 800b584:	3501      	adds	r5, #1
 800b586:	107f      	asrs	r7, r7, #1
 800b588:	3608      	adds	r6, #8
 800b58a:	e7e5      	b.n	800b558 <_dtoa_r+0x370>
 800b58c:	f000 80a6 	beq.w	800b6dc <_dtoa_r+0x4f4>
 800b590:	f1ca 0600 	rsb	r6, sl, #0
 800b594:	4ba5      	ldr	r3, [pc, #660]	; (800b82c <_dtoa_r+0x644>)
 800b596:	4fa6      	ldr	r7, [pc, #664]	; (800b830 <_dtoa_r+0x648>)
 800b598:	f006 020f 	and.w	r2, r6, #15
 800b59c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b5a8:	f7f5 f826 	bl	80005f8 <__aeabi_dmul>
 800b5ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5b0:	1136      	asrs	r6, r6, #4
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	2502      	movs	r5, #2
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	f040 8085 	bne.w	800b6c6 <_dtoa_r+0x4de>
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1d2      	bne.n	800b566 <_dtoa_r+0x37e>
 800b5c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 808c 	beq.w	800b6e0 <_dtoa_r+0x4f8>
 800b5c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5cc:	4b99      	ldr	r3, [pc, #612]	; (800b834 <_dtoa_r+0x64c>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	f7f5 fa82 	bl	8000adc <__aeabi_dcmplt>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	f000 8081 	beq.w	800b6e0 <_dtoa_r+0x4f8>
 800b5de:	9b01      	ldr	r3, [sp, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d07d      	beq.n	800b6e0 <_dtoa_r+0x4f8>
 800b5e4:	f1b9 0f00 	cmp.w	r9, #0
 800b5e8:	dd3c      	ble.n	800b664 <_dtoa_r+0x47c>
 800b5ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b5ee:	9307      	str	r3, [sp, #28]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	4b91      	ldr	r3, [pc, #580]	; (800b838 <_dtoa_r+0x650>)
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	4639      	mov	r1, r7
 800b5f8:	f7f4 fffe 	bl	80005f8 <__aeabi_dmul>
 800b5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b600:	3501      	adds	r5, #1
 800b602:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b606:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b60a:	4628      	mov	r0, r5
 800b60c:	f7f4 ff8a 	bl	8000524 <__aeabi_i2d>
 800b610:	4632      	mov	r2, r6
 800b612:	463b      	mov	r3, r7
 800b614:	f7f4 fff0 	bl	80005f8 <__aeabi_dmul>
 800b618:	4b88      	ldr	r3, [pc, #544]	; (800b83c <_dtoa_r+0x654>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	f7f4 fe36 	bl	800028c <__adddf3>
 800b620:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b628:	9303      	str	r3, [sp, #12]
 800b62a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d15c      	bne.n	800b6ea <_dtoa_r+0x502>
 800b630:	4b83      	ldr	r3, [pc, #524]	; (800b840 <_dtoa_r+0x658>)
 800b632:	2200      	movs	r2, #0
 800b634:	4630      	mov	r0, r6
 800b636:	4639      	mov	r1, r7
 800b638:	f7f4 fe26 	bl	8000288 <__aeabi_dsub>
 800b63c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b640:	4606      	mov	r6, r0
 800b642:	460f      	mov	r7, r1
 800b644:	f7f5 fa68 	bl	8000b18 <__aeabi_dcmpgt>
 800b648:	2800      	cmp	r0, #0
 800b64a:	f040 8296 	bne.w	800bb7a <_dtoa_r+0x992>
 800b64e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b652:	4630      	mov	r0, r6
 800b654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b658:	4639      	mov	r1, r7
 800b65a:	f7f5 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800b65e:	2800      	cmp	r0, #0
 800b660:	f040 8288 	bne.w	800bb74 <_dtoa_r+0x98c>
 800b664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b668:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b66c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f2c0 8158 	blt.w	800b924 <_dtoa_r+0x73c>
 800b674:	f1ba 0f0e 	cmp.w	sl, #14
 800b678:	f300 8154 	bgt.w	800b924 <_dtoa_r+0x73c>
 800b67c:	4b6b      	ldr	r3, [pc, #428]	; (800b82c <_dtoa_r+0x644>)
 800b67e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b682:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f280 80e3 	bge.w	800b854 <_dtoa_r+0x66c>
 800b68e:	9b01      	ldr	r3, [sp, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	f300 80df 	bgt.w	800b854 <_dtoa_r+0x66c>
 800b696:	f040 826d 	bne.w	800bb74 <_dtoa_r+0x98c>
 800b69a:	4b69      	ldr	r3, [pc, #420]	; (800b840 <_dtoa_r+0x658>)
 800b69c:	2200      	movs	r2, #0
 800b69e:	4640      	mov	r0, r8
 800b6a0:	4649      	mov	r1, r9
 800b6a2:	f7f4 ffa9 	bl	80005f8 <__aeabi_dmul>
 800b6a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6aa:	f7f5 fa2b 	bl	8000b04 <__aeabi_dcmpge>
 800b6ae:	9e01      	ldr	r6, [sp, #4]
 800b6b0:	4637      	mov	r7, r6
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	f040 8243 	bne.w	800bb3e <_dtoa_r+0x956>
 800b6b8:	9d00      	ldr	r5, [sp, #0]
 800b6ba:	2331      	movs	r3, #49	; 0x31
 800b6bc:	f805 3b01 	strb.w	r3, [r5], #1
 800b6c0:	f10a 0a01 	add.w	sl, sl, #1
 800b6c4:	e23f      	b.n	800bb46 <_dtoa_r+0x95e>
 800b6c6:	07f2      	lsls	r2, r6, #31
 800b6c8:	d505      	bpl.n	800b6d6 <_dtoa_r+0x4ee>
 800b6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ce:	f7f4 ff93 	bl	80005f8 <__aeabi_dmul>
 800b6d2:	3501      	adds	r5, #1
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	1076      	asrs	r6, r6, #1
 800b6d8:	3708      	adds	r7, #8
 800b6da:	e76c      	b.n	800b5b6 <_dtoa_r+0x3ce>
 800b6dc:	2502      	movs	r5, #2
 800b6de:	e76f      	b.n	800b5c0 <_dtoa_r+0x3d8>
 800b6e0:	9b01      	ldr	r3, [sp, #4]
 800b6e2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b6e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b6e8:	e78d      	b.n	800b606 <_dtoa_r+0x41e>
 800b6ea:	9900      	ldr	r1, [sp, #0]
 800b6ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b6ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6f0:	4b4e      	ldr	r3, [pc, #312]	; (800b82c <_dtoa_r+0x644>)
 800b6f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6f6:	4401      	add	r1, r0
 800b6f8:	9102      	str	r1, [sp, #8]
 800b6fa:	9908      	ldr	r1, [sp, #32]
 800b6fc:	eeb0 8a47 	vmov.f32	s16, s14
 800b700:	eef0 8a67 	vmov.f32	s17, s15
 800b704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b708:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b70c:	2900      	cmp	r1, #0
 800b70e:	d045      	beq.n	800b79c <_dtoa_r+0x5b4>
 800b710:	494c      	ldr	r1, [pc, #304]	; (800b844 <_dtoa_r+0x65c>)
 800b712:	2000      	movs	r0, #0
 800b714:	f7f5 f89a 	bl	800084c <__aeabi_ddiv>
 800b718:	ec53 2b18 	vmov	r2, r3, d8
 800b71c:	f7f4 fdb4 	bl	8000288 <__aeabi_dsub>
 800b720:	9d00      	ldr	r5, [sp, #0]
 800b722:	ec41 0b18 	vmov	d8, r0, r1
 800b726:	4639      	mov	r1, r7
 800b728:	4630      	mov	r0, r6
 800b72a:	f7f5 fa15 	bl	8000b58 <__aeabi_d2iz>
 800b72e:	900c      	str	r0, [sp, #48]	; 0x30
 800b730:	f7f4 fef8 	bl	8000524 <__aeabi_i2d>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4630      	mov	r0, r6
 800b73a:	4639      	mov	r1, r7
 800b73c:	f7f4 fda4 	bl	8000288 <__aeabi_dsub>
 800b740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b742:	3330      	adds	r3, #48	; 0x30
 800b744:	f805 3b01 	strb.w	r3, [r5], #1
 800b748:	ec53 2b18 	vmov	r2, r3, d8
 800b74c:	4606      	mov	r6, r0
 800b74e:	460f      	mov	r7, r1
 800b750:	f7f5 f9c4 	bl	8000adc <__aeabi_dcmplt>
 800b754:	2800      	cmp	r0, #0
 800b756:	d165      	bne.n	800b824 <_dtoa_r+0x63c>
 800b758:	4632      	mov	r2, r6
 800b75a:	463b      	mov	r3, r7
 800b75c:	4935      	ldr	r1, [pc, #212]	; (800b834 <_dtoa_r+0x64c>)
 800b75e:	2000      	movs	r0, #0
 800b760:	f7f4 fd92 	bl	8000288 <__aeabi_dsub>
 800b764:	ec53 2b18 	vmov	r2, r3, d8
 800b768:	f7f5 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	f040 80b9 	bne.w	800b8e4 <_dtoa_r+0x6fc>
 800b772:	9b02      	ldr	r3, [sp, #8]
 800b774:	429d      	cmp	r5, r3
 800b776:	f43f af75 	beq.w	800b664 <_dtoa_r+0x47c>
 800b77a:	4b2f      	ldr	r3, [pc, #188]	; (800b838 <_dtoa_r+0x650>)
 800b77c:	ec51 0b18 	vmov	r0, r1, d8
 800b780:	2200      	movs	r2, #0
 800b782:	f7f4 ff39 	bl	80005f8 <__aeabi_dmul>
 800b786:	4b2c      	ldr	r3, [pc, #176]	; (800b838 <_dtoa_r+0x650>)
 800b788:	ec41 0b18 	vmov	d8, r0, r1
 800b78c:	2200      	movs	r2, #0
 800b78e:	4630      	mov	r0, r6
 800b790:	4639      	mov	r1, r7
 800b792:	f7f4 ff31 	bl	80005f8 <__aeabi_dmul>
 800b796:	4606      	mov	r6, r0
 800b798:	460f      	mov	r7, r1
 800b79a:	e7c4      	b.n	800b726 <_dtoa_r+0x53e>
 800b79c:	ec51 0b17 	vmov	r0, r1, d7
 800b7a0:	f7f4 ff2a 	bl	80005f8 <__aeabi_dmul>
 800b7a4:	9b02      	ldr	r3, [sp, #8]
 800b7a6:	9d00      	ldr	r5, [sp, #0]
 800b7a8:	930c      	str	r3, [sp, #48]	; 0x30
 800b7aa:	ec41 0b18 	vmov	d8, r0, r1
 800b7ae:	4639      	mov	r1, r7
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f7f5 f9d1 	bl	8000b58 <__aeabi_d2iz>
 800b7b6:	9011      	str	r0, [sp, #68]	; 0x44
 800b7b8:	f7f4 feb4 	bl	8000524 <__aeabi_i2d>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	f7f4 fd60 	bl	8000288 <__aeabi_dsub>
 800b7c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7ca:	3330      	adds	r3, #48	; 0x30
 800b7cc:	f805 3b01 	strb.w	r3, [r5], #1
 800b7d0:	9b02      	ldr	r3, [sp, #8]
 800b7d2:	429d      	cmp	r5, r3
 800b7d4:	4606      	mov	r6, r0
 800b7d6:	460f      	mov	r7, r1
 800b7d8:	f04f 0200 	mov.w	r2, #0
 800b7dc:	d134      	bne.n	800b848 <_dtoa_r+0x660>
 800b7de:	4b19      	ldr	r3, [pc, #100]	; (800b844 <_dtoa_r+0x65c>)
 800b7e0:	ec51 0b18 	vmov	r0, r1, d8
 800b7e4:	f7f4 fd52 	bl	800028c <__adddf3>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	4639      	mov	r1, r7
 800b7f0:	f7f5 f992 	bl	8000b18 <__aeabi_dcmpgt>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d175      	bne.n	800b8e4 <_dtoa_r+0x6fc>
 800b7f8:	ec53 2b18 	vmov	r2, r3, d8
 800b7fc:	4911      	ldr	r1, [pc, #68]	; (800b844 <_dtoa_r+0x65c>)
 800b7fe:	2000      	movs	r0, #0
 800b800:	f7f4 fd42 	bl	8000288 <__aeabi_dsub>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4630      	mov	r0, r6
 800b80a:	4639      	mov	r1, r7
 800b80c:	f7f5 f966 	bl	8000adc <__aeabi_dcmplt>
 800b810:	2800      	cmp	r0, #0
 800b812:	f43f af27 	beq.w	800b664 <_dtoa_r+0x47c>
 800b816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b818:	1e6b      	subs	r3, r5, #1
 800b81a:	930c      	str	r3, [sp, #48]	; 0x30
 800b81c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b820:	2b30      	cmp	r3, #48	; 0x30
 800b822:	d0f8      	beq.n	800b816 <_dtoa_r+0x62e>
 800b824:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b828:	e04a      	b.n	800b8c0 <_dtoa_r+0x6d8>
 800b82a:	bf00      	nop
 800b82c:	0800d7d8 	.word	0x0800d7d8
 800b830:	0800d7b0 	.word	0x0800d7b0
 800b834:	3ff00000 	.word	0x3ff00000
 800b838:	40240000 	.word	0x40240000
 800b83c:	401c0000 	.word	0x401c0000
 800b840:	40140000 	.word	0x40140000
 800b844:	3fe00000 	.word	0x3fe00000
 800b848:	4baf      	ldr	r3, [pc, #700]	; (800bb08 <_dtoa_r+0x920>)
 800b84a:	f7f4 fed5 	bl	80005f8 <__aeabi_dmul>
 800b84e:	4606      	mov	r6, r0
 800b850:	460f      	mov	r7, r1
 800b852:	e7ac      	b.n	800b7ae <_dtoa_r+0x5c6>
 800b854:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b858:	9d00      	ldr	r5, [sp, #0]
 800b85a:	4642      	mov	r2, r8
 800b85c:	464b      	mov	r3, r9
 800b85e:	4630      	mov	r0, r6
 800b860:	4639      	mov	r1, r7
 800b862:	f7f4 fff3 	bl	800084c <__aeabi_ddiv>
 800b866:	f7f5 f977 	bl	8000b58 <__aeabi_d2iz>
 800b86a:	9002      	str	r0, [sp, #8]
 800b86c:	f7f4 fe5a 	bl	8000524 <__aeabi_i2d>
 800b870:	4642      	mov	r2, r8
 800b872:	464b      	mov	r3, r9
 800b874:	f7f4 fec0 	bl	80005f8 <__aeabi_dmul>
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
 800b87c:	4630      	mov	r0, r6
 800b87e:	4639      	mov	r1, r7
 800b880:	f7f4 fd02 	bl	8000288 <__aeabi_dsub>
 800b884:	9e02      	ldr	r6, [sp, #8]
 800b886:	9f01      	ldr	r7, [sp, #4]
 800b888:	3630      	adds	r6, #48	; 0x30
 800b88a:	f805 6b01 	strb.w	r6, [r5], #1
 800b88e:	9e00      	ldr	r6, [sp, #0]
 800b890:	1bae      	subs	r6, r5, r6
 800b892:	42b7      	cmp	r7, r6
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	d137      	bne.n	800b90a <_dtoa_r+0x722>
 800b89a:	f7f4 fcf7 	bl	800028c <__adddf3>
 800b89e:	4642      	mov	r2, r8
 800b8a0:	464b      	mov	r3, r9
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	f7f5 f937 	bl	8000b18 <__aeabi_dcmpgt>
 800b8aa:	b9c8      	cbnz	r0, 800b8e0 <_dtoa_r+0x6f8>
 800b8ac:	4642      	mov	r2, r8
 800b8ae:	464b      	mov	r3, r9
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f5 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8b8:	b110      	cbz	r0, 800b8c0 <_dtoa_r+0x6d8>
 800b8ba:	9b02      	ldr	r3, [sp, #8]
 800b8bc:	07d9      	lsls	r1, r3, #31
 800b8be:	d40f      	bmi.n	800b8e0 <_dtoa_r+0x6f8>
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	4659      	mov	r1, fp
 800b8c4:	f000 fac8 	bl	800be58 <_Bfree>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	702b      	strb	r3, [r5, #0]
 800b8cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8ce:	f10a 0001 	add.w	r0, sl, #1
 800b8d2:	6018      	str	r0, [r3, #0]
 800b8d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f43f acd8 	beq.w	800b28c <_dtoa_r+0xa4>
 800b8dc:	601d      	str	r5, [r3, #0]
 800b8de:	e4d5      	b.n	800b28c <_dtoa_r+0xa4>
 800b8e0:	f8cd a01c 	str.w	sl, [sp, #28]
 800b8e4:	462b      	mov	r3, r5
 800b8e6:	461d      	mov	r5, r3
 800b8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8ec:	2a39      	cmp	r2, #57	; 0x39
 800b8ee:	d108      	bne.n	800b902 <_dtoa_r+0x71a>
 800b8f0:	9a00      	ldr	r2, [sp, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d1f7      	bne.n	800b8e6 <_dtoa_r+0x6fe>
 800b8f6:	9a07      	ldr	r2, [sp, #28]
 800b8f8:	9900      	ldr	r1, [sp, #0]
 800b8fa:	3201      	adds	r2, #1
 800b8fc:	9207      	str	r2, [sp, #28]
 800b8fe:	2230      	movs	r2, #48	; 0x30
 800b900:	700a      	strb	r2, [r1, #0]
 800b902:	781a      	ldrb	r2, [r3, #0]
 800b904:	3201      	adds	r2, #1
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	e78c      	b.n	800b824 <_dtoa_r+0x63c>
 800b90a:	4b7f      	ldr	r3, [pc, #508]	; (800bb08 <_dtoa_r+0x920>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	f7f4 fe73 	bl	80005f8 <__aeabi_dmul>
 800b912:	2200      	movs	r2, #0
 800b914:	2300      	movs	r3, #0
 800b916:	4606      	mov	r6, r0
 800b918:	460f      	mov	r7, r1
 800b91a:	f7f5 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d09b      	beq.n	800b85a <_dtoa_r+0x672>
 800b922:	e7cd      	b.n	800b8c0 <_dtoa_r+0x6d8>
 800b924:	9a08      	ldr	r2, [sp, #32]
 800b926:	2a00      	cmp	r2, #0
 800b928:	f000 80c4 	beq.w	800bab4 <_dtoa_r+0x8cc>
 800b92c:	9a05      	ldr	r2, [sp, #20]
 800b92e:	2a01      	cmp	r2, #1
 800b930:	f300 80a8 	bgt.w	800ba84 <_dtoa_r+0x89c>
 800b934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b936:	2a00      	cmp	r2, #0
 800b938:	f000 80a0 	beq.w	800ba7c <_dtoa_r+0x894>
 800b93c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b940:	9e06      	ldr	r6, [sp, #24]
 800b942:	4645      	mov	r5, r8
 800b944:	9a04      	ldr	r2, [sp, #16]
 800b946:	2101      	movs	r1, #1
 800b948:	441a      	add	r2, r3
 800b94a:	4620      	mov	r0, r4
 800b94c:	4498      	add	r8, r3
 800b94e:	9204      	str	r2, [sp, #16]
 800b950:	f000 fb3e 	bl	800bfd0 <__i2b>
 800b954:	4607      	mov	r7, r0
 800b956:	2d00      	cmp	r5, #0
 800b958:	dd0b      	ble.n	800b972 <_dtoa_r+0x78a>
 800b95a:	9b04      	ldr	r3, [sp, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	dd08      	ble.n	800b972 <_dtoa_r+0x78a>
 800b960:	42ab      	cmp	r3, r5
 800b962:	9a04      	ldr	r2, [sp, #16]
 800b964:	bfa8      	it	ge
 800b966:	462b      	movge	r3, r5
 800b968:	eba8 0803 	sub.w	r8, r8, r3
 800b96c:	1aed      	subs	r5, r5, r3
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	9304      	str	r3, [sp, #16]
 800b972:	9b06      	ldr	r3, [sp, #24]
 800b974:	b1fb      	cbz	r3, 800b9b6 <_dtoa_r+0x7ce>
 800b976:	9b08      	ldr	r3, [sp, #32]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 809f 	beq.w	800babc <_dtoa_r+0x8d4>
 800b97e:	2e00      	cmp	r6, #0
 800b980:	dd11      	ble.n	800b9a6 <_dtoa_r+0x7be>
 800b982:	4639      	mov	r1, r7
 800b984:	4632      	mov	r2, r6
 800b986:	4620      	mov	r0, r4
 800b988:	f000 fbde 	bl	800c148 <__pow5mult>
 800b98c:	465a      	mov	r2, fp
 800b98e:	4601      	mov	r1, r0
 800b990:	4607      	mov	r7, r0
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fb32 	bl	800bffc <__multiply>
 800b998:	4659      	mov	r1, fp
 800b99a:	9007      	str	r0, [sp, #28]
 800b99c:	4620      	mov	r0, r4
 800b99e:	f000 fa5b 	bl	800be58 <_Bfree>
 800b9a2:	9b07      	ldr	r3, [sp, #28]
 800b9a4:	469b      	mov	fp, r3
 800b9a6:	9b06      	ldr	r3, [sp, #24]
 800b9a8:	1b9a      	subs	r2, r3, r6
 800b9aa:	d004      	beq.n	800b9b6 <_dtoa_r+0x7ce>
 800b9ac:	4659      	mov	r1, fp
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 fbca 	bl	800c148 <__pow5mult>
 800b9b4:	4683      	mov	fp, r0
 800b9b6:	2101      	movs	r1, #1
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fb09 	bl	800bfd0 <__i2b>
 800b9be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	4606      	mov	r6, r0
 800b9c4:	dd7c      	ble.n	800bac0 <_dtoa_r+0x8d8>
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4601      	mov	r1, r0
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f000 fbbc 	bl	800c148 <__pow5mult>
 800b9d0:	9b05      	ldr	r3, [sp, #20]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	dd76      	ble.n	800bac6 <_dtoa_r+0x8de>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	9306      	str	r3, [sp, #24]
 800b9dc:	6933      	ldr	r3, [r6, #16]
 800b9de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b9e2:	6918      	ldr	r0, [r3, #16]
 800b9e4:	f000 faa4 	bl	800bf30 <__hi0bits>
 800b9e8:	f1c0 0020 	rsb	r0, r0, #32
 800b9ec:	9b04      	ldr	r3, [sp, #16]
 800b9ee:	4418      	add	r0, r3
 800b9f0:	f010 001f 	ands.w	r0, r0, #31
 800b9f4:	f000 8086 	beq.w	800bb04 <_dtoa_r+0x91c>
 800b9f8:	f1c0 0320 	rsb	r3, r0, #32
 800b9fc:	2b04      	cmp	r3, #4
 800b9fe:	dd7f      	ble.n	800bb00 <_dtoa_r+0x918>
 800ba00:	f1c0 001c 	rsb	r0, r0, #28
 800ba04:	9b04      	ldr	r3, [sp, #16]
 800ba06:	4403      	add	r3, r0
 800ba08:	4480      	add	r8, r0
 800ba0a:	4405      	add	r5, r0
 800ba0c:	9304      	str	r3, [sp, #16]
 800ba0e:	f1b8 0f00 	cmp.w	r8, #0
 800ba12:	dd05      	ble.n	800ba20 <_dtoa_r+0x838>
 800ba14:	4659      	mov	r1, fp
 800ba16:	4642      	mov	r2, r8
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 fbef 	bl	800c1fc <__lshift>
 800ba1e:	4683      	mov	fp, r0
 800ba20:	9b04      	ldr	r3, [sp, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dd05      	ble.n	800ba32 <_dtoa_r+0x84a>
 800ba26:	4631      	mov	r1, r6
 800ba28:	461a      	mov	r2, r3
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 fbe6 	bl	800c1fc <__lshift>
 800ba30:	4606      	mov	r6, r0
 800ba32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d069      	beq.n	800bb0c <_dtoa_r+0x924>
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4658      	mov	r0, fp
 800ba3c:	f000 fc4a 	bl	800c2d4 <__mcmp>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	da63      	bge.n	800bb0c <_dtoa_r+0x924>
 800ba44:	2300      	movs	r3, #0
 800ba46:	4659      	mov	r1, fp
 800ba48:	220a      	movs	r2, #10
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 fa26 	bl	800be9c <__multadd>
 800ba50:	9b08      	ldr	r3, [sp, #32]
 800ba52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba56:	4683      	mov	fp, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f000 818f 	beq.w	800bd7c <_dtoa_r+0xb94>
 800ba5e:	4639      	mov	r1, r7
 800ba60:	2300      	movs	r3, #0
 800ba62:	220a      	movs	r2, #10
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fa19 	bl	800be9c <__multadd>
 800ba6a:	f1b9 0f00 	cmp.w	r9, #0
 800ba6e:	4607      	mov	r7, r0
 800ba70:	f300 808e 	bgt.w	800bb90 <_dtoa_r+0x9a8>
 800ba74:	9b05      	ldr	r3, [sp, #20]
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	dc50      	bgt.n	800bb1c <_dtoa_r+0x934>
 800ba7a:	e089      	b.n	800bb90 <_dtoa_r+0x9a8>
 800ba7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba82:	e75d      	b.n	800b940 <_dtoa_r+0x758>
 800ba84:	9b01      	ldr	r3, [sp, #4]
 800ba86:	1e5e      	subs	r6, r3, #1
 800ba88:	9b06      	ldr	r3, [sp, #24]
 800ba8a:	42b3      	cmp	r3, r6
 800ba8c:	bfbf      	itttt	lt
 800ba8e:	9b06      	ldrlt	r3, [sp, #24]
 800ba90:	9606      	strlt	r6, [sp, #24]
 800ba92:	1af2      	sublt	r2, r6, r3
 800ba94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ba96:	bfb6      	itet	lt
 800ba98:	189b      	addlt	r3, r3, r2
 800ba9a:	1b9e      	subge	r6, r3, r6
 800ba9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ba9e:	9b01      	ldr	r3, [sp, #4]
 800baa0:	bfb8      	it	lt
 800baa2:	2600      	movlt	r6, #0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	bfb5      	itete	lt
 800baa8:	eba8 0503 	sublt.w	r5, r8, r3
 800baac:	9b01      	ldrge	r3, [sp, #4]
 800baae:	2300      	movlt	r3, #0
 800bab0:	4645      	movge	r5, r8
 800bab2:	e747      	b.n	800b944 <_dtoa_r+0x75c>
 800bab4:	9e06      	ldr	r6, [sp, #24]
 800bab6:	9f08      	ldr	r7, [sp, #32]
 800bab8:	4645      	mov	r5, r8
 800baba:	e74c      	b.n	800b956 <_dtoa_r+0x76e>
 800babc:	9a06      	ldr	r2, [sp, #24]
 800babe:	e775      	b.n	800b9ac <_dtoa_r+0x7c4>
 800bac0:	9b05      	ldr	r3, [sp, #20]
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	dc18      	bgt.n	800baf8 <_dtoa_r+0x910>
 800bac6:	9b02      	ldr	r3, [sp, #8]
 800bac8:	b9b3      	cbnz	r3, 800baf8 <_dtoa_r+0x910>
 800baca:	9b03      	ldr	r3, [sp, #12]
 800bacc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bad0:	b9a3      	cbnz	r3, 800bafc <_dtoa_r+0x914>
 800bad2:	9b03      	ldr	r3, [sp, #12]
 800bad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bad8:	0d1b      	lsrs	r3, r3, #20
 800bada:	051b      	lsls	r3, r3, #20
 800badc:	b12b      	cbz	r3, 800baea <_dtoa_r+0x902>
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	3301      	adds	r3, #1
 800bae2:	9304      	str	r3, [sp, #16]
 800bae4:	f108 0801 	add.w	r8, r8, #1
 800bae8:	2301      	movs	r3, #1
 800baea:	9306      	str	r3, [sp, #24]
 800baec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f47f af74 	bne.w	800b9dc <_dtoa_r+0x7f4>
 800baf4:	2001      	movs	r0, #1
 800baf6:	e779      	b.n	800b9ec <_dtoa_r+0x804>
 800baf8:	2300      	movs	r3, #0
 800bafa:	e7f6      	b.n	800baea <_dtoa_r+0x902>
 800bafc:	9b02      	ldr	r3, [sp, #8]
 800bafe:	e7f4      	b.n	800baea <_dtoa_r+0x902>
 800bb00:	d085      	beq.n	800ba0e <_dtoa_r+0x826>
 800bb02:	4618      	mov	r0, r3
 800bb04:	301c      	adds	r0, #28
 800bb06:	e77d      	b.n	800ba04 <_dtoa_r+0x81c>
 800bb08:	40240000 	.word	0x40240000
 800bb0c:	9b01      	ldr	r3, [sp, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	dc38      	bgt.n	800bb84 <_dtoa_r+0x99c>
 800bb12:	9b05      	ldr	r3, [sp, #20]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	dd35      	ble.n	800bb84 <_dtoa_r+0x99c>
 800bb18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bb1c:	f1b9 0f00 	cmp.w	r9, #0
 800bb20:	d10d      	bne.n	800bb3e <_dtoa_r+0x956>
 800bb22:	4631      	mov	r1, r6
 800bb24:	464b      	mov	r3, r9
 800bb26:	2205      	movs	r2, #5
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f000 f9b7 	bl	800be9c <__multadd>
 800bb2e:	4601      	mov	r1, r0
 800bb30:	4606      	mov	r6, r0
 800bb32:	4658      	mov	r0, fp
 800bb34:	f000 fbce 	bl	800c2d4 <__mcmp>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	f73f adbd 	bgt.w	800b6b8 <_dtoa_r+0x4d0>
 800bb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb40:	9d00      	ldr	r5, [sp, #0]
 800bb42:	ea6f 0a03 	mvn.w	sl, r3
 800bb46:	f04f 0800 	mov.w	r8, #0
 800bb4a:	4631      	mov	r1, r6
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f000 f983 	bl	800be58 <_Bfree>
 800bb52:	2f00      	cmp	r7, #0
 800bb54:	f43f aeb4 	beq.w	800b8c0 <_dtoa_r+0x6d8>
 800bb58:	f1b8 0f00 	cmp.w	r8, #0
 800bb5c:	d005      	beq.n	800bb6a <_dtoa_r+0x982>
 800bb5e:	45b8      	cmp	r8, r7
 800bb60:	d003      	beq.n	800bb6a <_dtoa_r+0x982>
 800bb62:	4641      	mov	r1, r8
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 f977 	bl	800be58 <_Bfree>
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f000 f973 	bl	800be58 <_Bfree>
 800bb72:	e6a5      	b.n	800b8c0 <_dtoa_r+0x6d8>
 800bb74:	2600      	movs	r6, #0
 800bb76:	4637      	mov	r7, r6
 800bb78:	e7e1      	b.n	800bb3e <_dtoa_r+0x956>
 800bb7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bb7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bb80:	4637      	mov	r7, r6
 800bb82:	e599      	b.n	800b6b8 <_dtoa_r+0x4d0>
 800bb84:	9b08      	ldr	r3, [sp, #32]
 800bb86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 80fd 	beq.w	800bd8a <_dtoa_r+0xba2>
 800bb90:	2d00      	cmp	r5, #0
 800bb92:	dd05      	ble.n	800bba0 <_dtoa_r+0x9b8>
 800bb94:	4639      	mov	r1, r7
 800bb96:	462a      	mov	r2, r5
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f000 fb2f 	bl	800c1fc <__lshift>
 800bb9e:	4607      	mov	r7, r0
 800bba0:	9b06      	ldr	r3, [sp, #24]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d05c      	beq.n	800bc60 <_dtoa_r+0xa78>
 800bba6:	6879      	ldr	r1, [r7, #4]
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f000 f915 	bl	800bdd8 <_Balloc>
 800bbae:	4605      	mov	r5, r0
 800bbb0:	b928      	cbnz	r0, 800bbbe <_dtoa_r+0x9d6>
 800bbb2:	4b80      	ldr	r3, [pc, #512]	; (800bdb4 <_dtoa_r+0xbcc>)
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bbba:	f7ff bb2e 	b.w	800b21a <_dtoa_r+0x32>
 800bbbe:	693a      	ldr	r2, [r7, #16]
 800bbc0:	3202      	adds	r2, #2
 800bbc2:	0092      	lsls	r2, r2, #2
 800bbc4:	f107 010c 	add.w	r1, r7, #12
 800bbc8:	300c      	adds	r0, #12
 800bbca:	f7fe fde1 	bl	800a790 <memcpy>
 800bbce:	2201      	movs	r2, #1
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fb12 	bl	800c1fc <__lshift>
 800bbd8:	9b00      	ldr	r3, [sp, #0]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	9b00      	ldr	r3, [sp, #0]
 800bbe0:	444b      	add	r3, r9
 800bbe2:	9307      	str	r3, [sp, #28]
 800bbe4:	9b02      	ldr	r3, [sp, #8]
 800bbe6:	f003 0301 	and.w	r3, r3, #1
 800bbea:	46b8      	mov	r8, r7
 800bbec:	9306      	str	r3, [sp, #24]
 800bbee:	4607      	mov	r7, r0
 800bbf0:	9b01      	ldr	r3, [sp, #4]
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	4658      	mov	r0, fp
 800bbf8:	9302      	str	r3, [sp, #8]
 800bbfa:	f7ff fa69 	bl	800b0d0 <quorem>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	3330      	adds	r3, #48	; 0x30
 800bc02:	9004      	str	r0, [sp, #16]
 800bc04:	4641      	mov	r1, r8
 800bc06:	4658      	mov	r0, fp
 800bc08:	9308      	str	r3, [sp, #32]
 800bc0a:	f000 fb63 	bl	800c2d4 <__mcmp>
 800bc0e:	463a      	mov	r2, r7
 800bc10:	4681      	mov	r9, r0
 800bc12:	4631      	mov	r1, r6
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 fb79 	bl	800c30c <__mdiff>
 800bc1a:	68c2      	ldr	r2, [r0, #12]
 800bc1c:	9b08      	ldr	r3, [sp, #32]
 800bc1e:	4605      	mov	r5, r0
 800bc20:	bb02      	cbnz	r2, 800bc64 <_dtoa_r+0xa7c>
 800bc22:	4601      	mov	r1, r0
 800bc24:	4658      	mov	r0, fp
 800bc26:	f000 fb55 	bl	800c2d4 <__mcmp>
 800bc2a:	9b08      	ldr	r3, [sp, #32]
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	4629      	mov	r1, r5
 800bc30:	4620      	mov	r0, r4
 800bc32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bc36:	f000 f90f 	bl	800be58 <_Bfree>
 800bc3a:	9b05      	ldr	r3, [sp, #20]
 800bc3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc3e:	9d01      	ldr	r5, [sp, #4]
 800bc40:	ea43 0102 	orr.w	r1, r3, r2
 800bc44:	9b06      	ldr	r3, [sp, #24]
 800bc46:	430b      	orrs	r3, r1
 800bc48:	9b08      	ldr	r3, [sp, #32]
 800bc4a:	d10d      	bne.n	800bc68 <_dtoa_r+0xa80>
 800bc4c:	2b39      	cmp	r3, #57	; 0x39
 800bc4e:	d029      	beq.n	800bca4 <_dtoa_r+0xabc>
 800bc50:	f1b9 0f00 	cmp.w	r9, #0
 800bc54:	dd01      	ble.n	800bc5a <_dtoa_r+0xa72>
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	3331      	adds	r3, #49	; 0x31
 800bc5a:	9a02      	ldr	r2, [sp, #8]
 800bc5c:	7013      	strb	r3, [r2, #0]
 800bc5e:	e774      	b.n	800bb4a <_dtoa_r+0x962>
 800bc60:	4638      	mov	r0, r7
 800bc62:	e7b9      	b.n	800bbd8 <_dtoa_r+0x9f0>
 800bc64:	2201      	movs	r2, #1
 800bc66:	e7e2      	b.n	800bc2e <_dtoa_r+0xa46>
 800bc68:	f1b9 0f00 	cmp.w	r9, #0
 800bc6c:	db06      	blt.n	800bc7c <_dtoa_r+0xa94>
 800bc6e:	9905      	ldr	r1, [sp, #20]
 800bc70:	ea41 0909 	orr.w	r9, r1, r9
 800bc74:	9906      	ldr	r1, [sp, #24]
 800bc76:	ea59 0101 	orrs.w	r1, r9, r1
 800bc7a:	d120      	bne.n	800bcbe <_dtoa_r+0xad6>
 800bc7c:	2a00      	cmp	r2, #0
 800bc7e:	ddec      	ble.n	800bc5a <_dtoa_r+0xa72>
 800bc80:	4659      	mov	r1, fp
 800bc82:	2201      	movs	r2, #1
 800bc84:	4620      	mov	r0, r4
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	f000 fab8 	bl	800c1fc <__lshift>
 800bc8c:	4631      	mov	r1, r6
 800bc8e:	4683      	mov	fp, r0
 800bc90:	f000 fb20 	bl	800c2d4 <__mcmp>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	9b01      	ldr	r3, [sp, #4]
 800bc98:	dc02      	bgt.n	800bca0 <_dtoa_r+0xab8>
 800bc9a:	d1de      	bne.n	800bc5a <_dtoa_r+0xa72>
 800bc9c:	07da      	lsls	r2, r3, #31
 800bc9e:	d5dc      	bpl.n	800bc5a <_dtoa_r+0xa72>
 800bca0:	2b39      	cmp	r3, #57	; 0x39
 800bca2:	d1d8      	bne.n	800bc56 <_dtoa_r+0xa6e>
 800bca4:	9a02      	ldr	r2, [sp, #8]
 800bca6:	2339      	movs	r3, #57	; 0x39
 800bca8:	7013      	strb	r3, [r2, #0]
 800bcaa:	462b      	mov	r3, r5
 800bcac:	461d      	mov	r5, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcb4:	2a39      	cmp	r2, #57	; 0x39
 800bcb6:	d050      	beq.n	800bd5a <_dtoa_r+0xb72>
 800bcb8:	3201      	adds	r2, #1
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	e745      	b.n	800bb4a <_dtoa_r+0x962>
 800bcbe:	2a00      	cmp	r2, #0
 800bcc0:	dd03      	ble.n	800bcca <_dtoa_r+0xae2>
 800bcc2:	2b39      	cmp	r3, #57	; 0x39
 800bcc4:	d0ee      	beq.n	800bca4 <_dtoa_r+0xabc>
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	e7c7      	b.n	800bc5a <_dtoa_r+0xa72>
 800bcca:	9a01      	ldr	r2, [sp, #4]
 800bccc:	9907      	ldr	r1, [sp, #28]
 800bcce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bcd2:	428a      	cmp	r2, r1
 800bcd4:	d02a      	beq.n	800bd2c <_dtoa_r+0xb44>
 800bcd6:	4659      	mov	r1, fp
 800bcd8:	2300      	movs	r3, #0
 800bcda:	220a      	movs	r2, #10
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f000 f8dd 	bl	800be9c <__multadd>
 800bce2:	45b8      	cmp	r8, r7
 800bce4:	4683      	mov	fp, r0
 800bce6:	f04f 0300 	mov.w	r3, #0
 800bcea:	f04f 020a 	mov.w	r2, #10
 800bcee:	4641      	mov	r1, r8
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	d107      	bne.n	800bd04 <_dtoa_r+0xb1c>
 800bcf4:	f000 f8d2 	bl	800be9c <__multadd>
 800bcf8:	4680      	mov	r8, r0
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	e775      	b.n	800bbf0 <_dtoa_r+0xa08>
 800bd04:	f000 f8ca 	bl	800be9c <__multadd>
 800bd08:	4639      	mov	r1, r7
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	220a      	movs	r2, #10
 800bd10:	4620      	mov	r0, r4
 800bd12:	f000 f8c3 	bl	800be9c <__multadd>
 800bd16:	4607      	mov	r7, r0
 800bd18:	e7f0      	b.n	800bcfc <_dtoa_r+0xb14>
 800bd1a:	f1b9 0f00 	cmp.w	r9, #0
 800bd1e:	9a00      	ldr	r2, [sp, #0]
 800bd20:	bfcc      	ite	gt
 800bd22:	464d      	movgt	r5, r9
 800bd24:	2501      	movle	r5, #1
 800bd26:	4415      	add	r5, r2
 800bd28:	f04f 0800 	mov.w	r8, #0
 800bd2c:	4659      	mov	r1, fp
 800bd2e:	2201      	movs	r2, #1
 800bd30:	4620      	mov	r0, r4
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	f000 fa62 	bl	800c1fc <__lshift>
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4683      	mov	fp, r0
 800bd3c:	f000 faca 	bl	800c2d4 <__mcmp>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	dcb2      	bgt.n	800bcaa <_dtoa_r+0xac2>
 800bd44:	d102      	bne.n	800bd4c <_dtoa_r+0xb64>
 800bd46:	9b01      	ldr	r3, [sp, #4]
 800bd48:	07db      	lsls	r3, r3, #31
 800bd4a:	d4ae      	bmi.n	800bcaa <_dtoa_r+0xac2>
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	461d      	mov	r5, r3
 800bd50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd54:	2a30      	cmp	r2, #48	; 0x30
 800bd56:	d0fa      	beq.n	800bd4e <_dtoa_r+0xb66>
 800bd58:	e6f7      	b.n	800bb4a <_dtoa_r+0x962>
 800bd5a:	9a00      	ldr	r2, [sp, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d1a5      	bne.n	800bcac <_dtoa_r+0xac4>
 800bd60:	f10a 0a01 	add.w	sl, sl, #1
 800bd64:	2331      	movs	r3, #49	; 0x31
 800bd66:	e779      	b.n	800bc5c <_dtoa_r+0xa74>
 800bd68:	4b13      	ldr	r3, [pc, #76]	; (800bdb8 <_dtoa_r+0xbd0>)
 800bd6a:	f7ff baaf 	b.w	800b2cc <_dtoa_r+0xe4>
 800bd6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f47f aa86 	bne.w	800b282 <_dtoa_r+0x9a>
 800bd76:	4b11      	ldr	r3, [pc, #68]	; (800bdbc <_dtoa_r+0xbd4>)
 800bd78:	f7ff baa8 	b.w	800b2cc <_dtoa_r+0xe4>
 800bd7c:	f1b9 0f00 	cmp.w	r9, #0
 800bd80:	dc03      	bgt.n	800bd8a <_dtoa_r+0xba2>
 800bd82:	9b05      	ldr	r3, [sp, #20]
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	f73f aec9 	bgt.w	800bb1c <_dtoa_r+0x934>
 800bd8a:	9d00      	ldr	r5, [sp, #0]
 800bd8c:	4631      	mov	r1, r6
 800bd8e:	4658      	mov	r0, fp
 800bd90:	f7ff f99e 	bl	800b0d0 <quorem>
 800bd94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bd98:	f805 3b01 	strb.w	r3, [r5], #1
 800bd9c:	9a00      	ldr	r2, [sp, #0]
 800bd9e:	1aaa      	subs	r2, r5, r2
 800bda0:	4591      	cmp	r9, r2
 800bda2:	ddba      	ble.n	800bd1a <_dtoa_r+0xb32>
 800bda4:	4659      	mov	r1, fp
 800bda6:	2300      	movs	r3, #0
 800bda8:	220a      	movs	r2, #10
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 f876 	bl	800be9c <__multadd>
 800bdb0:	4683      	mov	fp, r0
 800bdb2:	e7eb      	b.n	800bd8c <_dtoa_r+0xba4>
 800bdb4:	0800d73b 	.word	0x0800d73b
 800bdb8:	0800d694 	.word	0x0800d694
 800bdbc:	0800d6b8 	.word	0x0800d6b8

0800bdc0 <_localeconv_r>:
 800bdc0:	4800      	ldr	r0, [pc, #0]	; (800bdc4 <_localeconv_r+0x4>)
 800bdc2:	4770      	bx	lr
 800bdc4:	20000168 	.word	0x20000168

0800bdc8 <malloc>:
 800bdc8:	4b02      	ldr	r3, [pc, #8]	; (800bdd4 <malloc+0xc>)
 800bdca:	4601      	mov	r1, r0
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	f000 bbe1 	b.w	800c594 <_malloc_r>
 800bdd2:	bf00      	nop
 800bdd4:	20000014 	.word	0x20000014

0800bdd8 <_Balloc>:
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bddc:	4604      	mov	r4, r0
 800bdde:	460d      	mov	r5, r1
 800bde0:	b976      	cbnz	r6, 800be00 <_Balloc+0x28>
 800bde2:	2010      	movs	r0, #16
 800bde4:	f7ff fff0 	bl	800bdc8 <malloc>
 800bde8:	4602      	mov	r2, r0
 800bdea:	6260      	str	r0, [r4, #36]	; 0x24
 800bdec:	b920      	cbnz	r0, 800bdf8 <_Balloc+0x20>
 800bdee:	4b18      	ldr	r3, [pc, #96]	; (800be50 <_Balloc+0x78>)
 800bdf0:	4818      	ldr	r0, [pc, #96]	; (800be54 <_Balloc+0x7c>)
 800bdf2:	2166      	movs	r1, #102	; 0x66
 800bdf4:	f000 fd94 	bl	800c920 <__assert_func>
 800bdf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdfc:	6006      	str	r6, [r0, #0]
 800bdfe:	60c6      	str	r6, [r0, #12]
 800be00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be02:	68f3      	ldr	r3, [r6, #12]
 800be04:	b183      	cbz	r3, 800be28 <_Balloc+0x50>
 800be06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be0e:	b9b8      	cbnz	r0, 800be40 <_Balloc+0x68>
 800be10:	2101      	movs	r1, #1
 800be12:	fa01 f605 	lsl.w	r6, r1, r5
 800be16:	1d72      	adds	r2, r6, #5
 800be18:	0092      	lsls	r2, r2, #2
 800be1a:	4620      	mov	r0, r4
 800be1c:	f000 fb5a 	bl	800c4d4 <_calloc_r>
 800be20:	b160      	cbz	r0, 800be3c <_Balloc+0x64>
 800be22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be26:	e00e      	b.n	800be46 <_Balloc+0x6e>
 800be28:	2221      	movs	r2, #33	; 0x21
 800be2a:	2104      	movs	r1, #4
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 fb51 	bl	800c4d4 <_calloc_r>
 800be32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be34:	60f0      	str	r0, [r6, #12]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1e4      	bne.n	800be06 <_Balloc+0x2e>
 800be3c:	2000      	movs	r0, #0
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	6802      	ldr	r2, [r0, #0]
 800be42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be46:	2300      	movs	r3, #0
 800be48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be4c:	e7f7      	b.n	800be3e <_Balloc+0x66>
 800be4e:	bf00      	nop
 800be50:	0800d6c5 	.word	0x0800d6c5
 800be54:	0800d74c 	.word	0x0800d74c

0800be58 <_Bfree>:
 800be58:	b570      	push	{r4, r5, r6, lr}
 800be5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be5c:	4605      	mov	r5, r0
 800be5e:	460c      	mov	r4, r1
 800be60:	b976      	cbnz	r6, 800be80 <_Bfree+0x28>
 800be62:	2010      	movs	r0, #16
 800be64:	f7ff ffb0 	bl	800bdc8 <malloc>
 800be68:	4602      	mov	r2, r0
 800be6a:	6268      	str	r0, [r5, #36]	; 0x24
 800be6c:	b920      	cbnz	r0, 800be78 <_Bfree+0x20>
 800be6e:	4b09      	ldr	r3, [pc, #36]	; (800be94 <_Bfree+0x3c>)
 800be70:	4809      	ldr	r0, [pc, #36]	; (800be98 <_Bfree+0x40>)
 800be72:	218a      	movs	r1, #138	; 0x8a
 800be74:	f000 fd54 	bl	800c920 <__assert_func>
 800be78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be7c:	6006      	str	r6, [r0, #0]
 800be7e:	60c6      	str	r6, [r0, #12]
 800be80:	b13c      	cbz	r4, 800be92 <_Bfree+0x3a>
 800be82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be84:	6862      	ldr	r2, [r4, #4]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be8c:	6021      	str	r1, [r4, #0]
 800be8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	0800d6c5 	.word	0x0800d6c5
 800be98:	0800d74c 	.word	0x0800d74c

0800be9c <__multadd>:
 800be9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea0:	690e      	ldr	r6, [r1, #16]
 800bea2:	4607      	mov	r7, r0
 800bea4:	4698      	mov	r8, r3
 800bea6:	460c      	mov	r4, r1
 800bea8:	f101 0014 	add.w	r0, r1, #20
 800beac:	2300      	movs	r3, #0
 800beae:	6805      	ldr	r5, [r0, #0]
 800beb0:	b2a9      	uxth	r1, r5
 800beb2:	fb02 8101 	mla	r1, r2, r1, r8
 800beb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800beba:	0c2d      	lsrs	r5, r5, #16
 800bebc:	fb02 c505 	mla	r5, r2, r5, ip
 800bec0:	b289      	uxth	r1, r1
 800bec2:	3301      	adds	r3, #1
 800bec4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bec8:	429e      	cmp	r6, r3
 800beca:	f840 1b04 	str.w	r1, [r0], #4
 800bece:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bed2:	dcec      	bgt.n	800beae <__multadd+0x12>
 800bed4:	f1b8 0f00 	cmp.w	r8, #0
 800bed8:	d022      	beq.n	800bf20 <__multadd+0x84>
 800beda:	68a3      	ldr	r3, [r4, #8]
 800bedc:	42b3      	cmp	r3, r6
 800bede:	dc19      	bgt.n	800bf14 <__multadd+0x78>
 800bee0:	6861      	ldr	r1, [r4, #4]
 800bee2:	4638      	mov	r0, r7
 800bee4:	3101      	adds	r1, #1
 800bee6:	f7ff ff77 	bl	800bdd8 <_Balloc>
 800beea:	4605      	mov	r5, r0
 800beec:	b928      	cbnz	r0, 800befa <__multadd+0x5e>
 800beee:	4602      	mov	r2, r0
 800bef0:	4b0d      	ldr	r3, [pc, #52]	; (800bf28 <__multadd+0x8c>)
 800bef2:	480e      	ldr	r0, [pc, #56]	; (800bf2c <__multadd+0x90>)
 800bef4:	21b5      	movs	r1, #181	; 0xb5
 800bef6:	f000 fd13 	bl	800c920 <__assert_func>
 800befa:	6922      	ldr	r2, [r4, #16]
 800befc:	3202      	adds	r2, #2
 800befe:	f104 010c 	add.w	r1, r4, #12
 800bf02:	0092      	lsls	r2, r2, #2
 800bf04:	300c      	adds	r0, #12
 800bf06:	f7fe fc43 	bl	800a790 <memcpy>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	f7ff ffa3 	bl	800be58 <_Bfree>
 800bf12:	462c      	mov	r4, r5
 800bf14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bf18:	3601      	adds	r6, #1
 800bf1a:	f8c3 8014 	str.w	r8, [r3, #20]
 800bf1e:	6126      	str	r6, [r4, #16]
 800bf20:	4620      	mov	r0, r4
 800bf22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf26:	bf00      	nop
 800bf28:	0800d73b 	.word	0x0800d73b
 800bf2c:	0800d74c 	.word	0x0800d74c

0800bf30 <__hi0bits>:
 800bf30:	0c03      	lsrs	r3, r0, #16
 800bf32:	041b      	lsls	r3, r3, #16
 800bf34:	b9d3      	cbnz	r3, 800bf6c <__hi0bits+0x3c>
 800bf36:	0400      	lsls	r0, r0, #16
 800bf38:	2310      	movs	r3, #16
 800bf3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf3e:	bf04      	itt	eq
 800bf40:	0200      	lsleq	r0, r0, #8
 800bf42:	3308      	addeq	r3, #8
 800bf44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf48:	bf04      	itt	eq
 800bf4a:	0100      	lsleq	r0, r0, #4
 800bf4c:	3304      	addeq	r3, #4
 800bf4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf52:	bf04      	itt	eq
 800bf54:	0080      	lsleq	r0, r0, #2
 800bf56:	3302      	addeq	r3, #2
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	db05      	blt.n	800bf68 <__hi0bits+0x38>
 800bf5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf60:	f103 0301 	add.w	r3, r3, #1
 800bf64:	bf08      	it	eq
 800bf66:	2320      	moveq	r3, #32
 800bf68:	4618      	mov	r0, r3
 800bf6a:	4770      	bx	lr
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	e7e4      	b.n	800bf3a <__hi0bits+0xa>

0800bf70 <__lo0bits>:
 800bf70:	6803      	ldr	r3, [r0, #0]
 800bf72:	f013 0207 	ands.w	r2, r3, #7
 800bf76:	4601      	mov	r1, r0
 800bf78:	d00b      	beq.n	800bf92 <__lo0bits+0x22>
 800bf7a:	07da      	lsls	r2, r3, #31
 800bf7c:	d424      	bmi.n	800bfc8 <__lo0bits+0x58>
 800bf7e:	0798      	lsls	r0, r3, #30
 800bf80:	bf49      	itett	mi
 800bf82:	085b      	lsrmi	r3, r3, #1
 800bf84:	089b      	lsrpl	r3, r3, #2
 800bf86:	2001      	movmi	r0, #1
 800bf88:	600b      	strmi	r3, [r1, #0]
 800bf8a:	bf5c      	itt	pl
 800bf8c:	600b      	strpl	r3, [r1, #0]
 800bf8e:	2002      	movpl	r0, #2
 800bf90:	4770      	bx	lr
 800bf92:	b298      	uxth	r0, r3
 800bf94:	b9b0      	cbnz	r0, 800bfc4 <__lo0bits+0x54>
 800bf96:	0c1b      	lsrs	r3, r3, #16
 800bf98:	2010      	movs	r0, #16
 800bf9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bf9e:	bf04      	itt	eq
 800bfa0:	0a1b      	lsreq	r3, r3, #8
 800bfa2:	3008      	addeq	r0, #8
 800bfa4:	071a      	lsls	r2, r3, #28
 800bfa6:	bf04      	itt	eq
 800bfa8:	091b      	lsreq	r3, r3, #4
 800bfaa:	3004      	addeq	r0, #4
 800bfac:	079a      	lsls	r2, r3, #30
 800bfae:	bf04      	itt	eq
 800bfb0:	089b      	lsreq	r3, r3, #2
 800bfb2:	3002      	addeq	r0, #2
 800bfb4:	07da      	lsls	r2, r3, #31
 800bfb6:	d403      	bmi.n	800bfc0 <__lo0bits+0x50>
 800bfb8:	085b      	lsrs	r3, r3, #1
 800bfba:	f100 0001 	add.w	r0, r0, #1
 800bfbe:	d005      	beq.n	800bfcc <__lo0bits+0x5c>
 800bfc0:	600b      	str	r3, [r1, #0]
 800bfc2:	4770      	bx	lr
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	e7e8      	b.n	800bf9a <__lo0bits+0x2a>
 800bfc8:	2000      	movs	r0, #0
 800bfca:	4770      	bx	lr
 800bfcc:	2020      	movs	r0, #32
 800bfce:	4770      	bx	lr

0800bfd0 <__i2b>:
 800bfd0:	b510      	push	{r4, lr}
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	f7ff feff 	bl	800bdd8 <_Balloc>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	b928      	cbnz	r0, 800bfea <__i2b+0x1a>
 800bfde:	4b05      	ldr	r3, [pc, #20]	; (800bff4 <__i2b+0x24>)
 800bfe0:	4805      	ldr	r0, [pc, #20]	; (800bff8 <__i2b+0x28>)
 800bfe2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bfe6:	f000 fc9b 	bl	800c920 <__assert_func>
 800bfea:	2301      	movs	r3, #1
 800bfec:	6144      	str	r4, [r0, #20]
 800bfee:	6103      	str	r3, [r0, #16]
 800bff0:	bd10      	pop	{r4, pc}
 800bff2:	bf00      	nop
 800bff4:	0800d73b 	.word	0x0800d73b
 800bff8:	0800d74c 	.word	0x0800d74c

0800bffc <__multiply>:
 800bffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c000:	4614      	mov	r4, r2
 800c002:	690a      	ldr	r2, [r1, #16]
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	429a      	cmp	r2, r3
 800c008:	bfb8      	it	lt
 800c00a:	460b      	movlt	r3, r1
 800c00c:	460d      	mov	r5, r1
 800c00e:	bfbc      	itt	lt
 800c010:	4625      	movlt	r5, r4
 800c012:	461c      	movlt	r4, r3
 800c014:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c018:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c01c:	68ab      	ldr	r3, [r5, #8]
 800c01e:	6869      	ldr	r1, [r5, #4]
 800c020:	eb0a 0709 	add.w	r7, sl, r9
 800c024:	42bb      	cmp	r3, r7
 800c026:	b085      	sub	sp, #20
 800c028:	bfb8      	it	lt
 800c02a:	3101      	addlt	r1, #1
 800c02c:	f7ff fed4 	bl	800bdd8 <_Balloc>
 800c030:	b930      	cbnz	r0, 800c040 <__multiply+0x44>
 800c032:	4602      	mov	r2, r0
 800c034:	4b42      	ldr	r3, [pc, #264]	; (800c140 <__multiply+0x144>)
 800c036:	4843      	ldr	r0, [pc, #268]	; (800c144 <__multiply+0x148>)
 800c038:	f240 115d 	movw	r1, #349	; 0x15d
 800c03c:	f000 fc70 	bl	800c920 <__assert_func>
 800c040:	f100 0614 	add.w	r6, r0, #20
 800c044:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c048:	4633      	mov	r3, r6
 800c04a:	2200      	movs	r2, #0
 800c04c:	4543      	cmp	r3, r8
 800c04e:	d31e      	bcc.n	800c08e <__multiply+0x92>
 800c050:	f105 0c14 	add.w	ip, r5, #20
 800c054:	f104 0314 	add.w	r3, r4, #20
 800c058:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c05c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c060:	9202      	str	r2, [sp, #8]
 800c062:	ebac 0205 	sub.w	r2, ip, r5
 800c066:	3a15      	subs	r2, #21
 800c068:	f022 0203 	bic.w	r2, r2, #3
 800c06c:	3204      	adds	r2, #4
 800c06e:	f105 0115 	add.w	r1, r5, #21
 800c072:	458c      	cmp	ip, r1
 800c074:	bf38      	it	cc
 800c076:	2204      	movcc	r2, #4
 800c078:	9201      	str	r2, [sp, #4]
 800c07a:	9a02      	ldr	r2, [sp, #8]
 800c07c:	9303      	str	r3, [sp, #12]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d808      	bhi.n	800c094 <__multiply+0x98>
 800c082:	2f00      	cmp	r7, #0
 800c084:	dc55      	bgt.n	800c132 <__multiply+0x136>
 800c086:	6107      	str	r7, [r0, #16]
 800c088:	b005      	add	sp, #20
 800c08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08e:	f843 2b04 	str.w	r2, [r3], #4
 800c092:	e7db      	b.n	800c04c <__multiply+0x50>
 800c094:	f8b3 a000 	ldrh.w	sl, [r3]
 800c098:	f1ba 0f00 	cmp.w	sl, #0
 800c09c:	d020      	beq.n	800c0e0 <__multiply+0xe4>
 800c09e:	f105 0e14 	add.w	lr, r5, #20
 800c0a2:	46b1      	mov	r9, r6
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c0aa:	f8d9 b000 	ldr.w	fp, [r9]
 800c0ae:	b2a1      	uxth	r1, r4
 800c0b0:	fa1f fb8b 	uxth.w	fp, fp
 800c0b4:	fb0a b101 	mla	r1, sl, r1, fp
 800c0b8:	4411      	add	r1, r2
 800c0ba:	f8d9 2000 	ldr.w	r2, [r9]
 800c0be:	0c24      	lsrs	r4, r4, #16
 800c0c0:	0c12      	lsrs	r2, r2, #16
 800c0c2:	fb0a 2404 	mla	r4, sl, r4, r2
 800c0c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c0ca:	b289      	uxth	r1, r1
 800c0cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c0d0:	45f4      	cmp	ip, lr
 800c0d2:	f849 1b04 	str.w	r1, [r9], #4
 800c0d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c0da:	d8e4      	bhi.n	800c0a6 <__multiply+0xaa>
 800c0dc:	9901      	ldr	r1, [sp, #4]
 800c0de:	5072      	str	r2, [r6, r1]
 800c0e0:	9a03      	ldr	r2, [sp, #12]
 800c0e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	f1b9 0f00 	cmp.w	r9, #0
 800c0ec:	d01f      	beq.n	800c12e <__multiply+0x132>
 800c0ee:	6834      	ldr	r4, [r6, #0]
 800c0f0:	f105 0114 	add.w	r1, r5, #20
 800c0f4:	46b6      	mov	lr, r6
 800c0f6:	f04f 0a00 	mov.w	sl, #0
 800c0fa:	880a      	ldrh	r2, [r1, #0]
 800c0fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c100:	fb09 b202 	mla	r2, r9, r2, fp
 800c104:	4492      	add	sl, r2
 800c106:	b2a4      	uxth	r4, r4
 800c108:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c10c:	f84e 4b04 	str.w	r4, [lr], #4
 800c110:	f851 4b04 	ldr.w	r4, [r1], #4
 800c114:	f8be 2000 	ldrh.w	r2, [lr]
 800c118:	0c24      	lsrs	r4, r4, #16
 800c11a:	fb09 2404 	mla	r4, r9, r4, r2
 800c11e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c122:	458c      	cmp	ip, r1
 800c124:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c128:	d8e7      	bhi.n	800c0fa <__multiply+0xfe>
 800c12a:	9a01      	ldr	r2, [sp, #4]
 800c12c:	50b4      	str	r4, [r6, r2]
 800c12e:	3604      	adds	r6, #4
 800c130:	e7a3      	b.n	800c07a <__multiply+0x7e>
 800c132:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1a5      	bne.n	800c086 <__multiply+0x8a>
 800c13a:	3f01      	subs	r7, #1
 800c13c:	e7a1      	b.n	800c082 <__multiply+0x86>
 800c13e:	bf00      	nop
 800c140:	0800d73b 	.word	0x0800d73b
 800c144:	0800d74c 	.word	0x0800d74c

0800c148 <__pow5mult>:
 800c148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c14c:	4615      	mov	r5, r2
 800c14e:	f012 0203 	ands.w	r2, r2, #3
 800c152:	4606      	mov	r6, r0
 800c154:	460f      	mov	r7, r1
 800c156:	d007      	beq.n	800c168 <__pow5mult+0x20>
 800c158:	4c25      	ldr	r4, [pc, #148]	; (800c1f0 <__pow5mult+0xa8>)
 800c15a:	3a01      	subs	r2, #1
 800c15c:	2300      	movs	r3, #0
 800c15e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c162:	f7ff fe9b 	bl	800be9c <__multadd>
 800c166:	4607      	mov	r7, r0
 800c168:	10ad      	asrs	r5, r5, #2
 800c16a:	d03d      	beq.n	800c1e8 <__pow5mult+0xa0>
 800c16c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c16e:	b97c      	cbnz	r4, 800c190 <__pow5mult+0x48>
 800c170:	2010      	movs	r0, #16
 800c172:	f7ff fe29 	bl	800bdc8 <malloc>
 800c176:	4602      	mov	r2, r0
 800c178:	6270      	str	r0, [r6, #36]	; 0x24
 800c17a:	b928      	cbnz	r0, 800c188 <__pow5mult+0x40>
 800c17c:	4b1d      	ldr	r3, [pc, #116]	; (800c1f4 <__pow5mult+0xac>)
 800c17e:	481e      	ldr	r0, [pc, #120]	; (800c1f8 <__pow5mult+0xb0>)
 800c180:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c184:	f000 fbcc 	bl	800c920 <__assert_func>
 800c188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c18c:	6004      	str	r4, [r0, #0]
 800c18e:	60c4      	str	r4, [r0, #12]
 800c190:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c198:	b94c      	cbnz	r4, 800c1ae <__pow5mult+0x66>
 800c19a:	f240 2171 	movw	r1, #625	; 0x271
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7ff ff16 	bl	800bfd0 <__i2b>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	6003      	str	r3, [r0, #0]
 800c1ae:	f04f 0900 	mov.w	r9, #0
 800c1b2:	07eb      	lsls	r3, r5, #31
 800c1b4:	d50a      	bpl.n	800c1cc <__pow5mult+0x84>
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f7ff ff1e 	bl	800bffc <__multiply>
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	4680      	mov	r8, r0
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f7ff fe47 	bl	800be58 <_Bfree>
 800c1ca:	4647      	mov	r7, r8
 800c1cc:	106d      	asrs	r5, r5, #1
 800c1ce:	d00b      	beq.n	800c1e8 <__pow5mult+0xa0>
 800c1d0:	6820      	ldr	r0, [r4, #0]
 800c1d2:	b938      	cbnz	r0, 800c1e4 <__pow5mult+0x9c>
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	4630      	mov	r0, r6
 800c1da:	f7ff ff0f 	bl	800bffc <__multiply>
 800c1de:	6020      	str	r0, [r4, #0]
 800c1e0:	f8c0 9000 	str.w	r9, [r0]
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	e7e4      	b.n	800c1b2 <__pow5mult+0x6a>
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ee:	bf00      	nop
 800c1f0:	0800d8a0 	.word	0x0800d8a0
 800c1f4:	0800d6c5 	.word	0x0800d6c5
 800c1f8:	0800d74c 	.word	0x0800d74c

0800c1fc <__lshift>:
 800c1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c200:	460c      	mov	r4, r1
 800c202:	6849      	ldr	r1, [r1, #4]
 800c204:	6923      	ldr	r3, [r4, #16]
 800c206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	4607      	mov	r7, r0
 800c20e:	4691      	mov	r9, r2
 800c210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c214:	f108 0601 	add.w	r6, r8, #1
 800c218:	42b3      	cmp	r3, r6
 800c21a:	db0b      	blt.n	800c234 <__lshift+0x38>
 800c21c:	4638      	mov	r0, r7
 800c21e:	f7ff fddb 	bl	800bdd8 <_Balloc>
 800c222:	4605      	mov	r5, r0
 800c224:	b948      	cbnz	r0, 800c23a <__lshift+0x3e>
 800c226:	4602      	mov	r2, r0
 800c228:	4b28      	ldr	r3, [pc, #160]	; (800c2cc <__lshift+0xd0>)
 800c22a:	4829      	ldr	r0, [pc, #164]	; (800c2d0 <__lshift+0xd4>)
 800c22c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c230:	f000 fb76 	bl	800c920 <__assert_func>
 800c234:	3101      	adds	r1, #1
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	e7ee      	b.n	800c218 <__lshift+0x1c>
 800c23a:	2300      	movs	r3, #0
 800c23c:	f100 0114 	add.w	r1, r0, #20
 800c240:	f100 0210 	add.w	r2, r0, #16
 800c244:	4618      	mov	r0, r3
 800c246:	4553      	cmp	r3, sl
 800c248:	db33      	blt.n	800c2b2 <__lshift+0xb6>
 800c24a:	6920      	ldr	r0, [r4, #16]
 800c24c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c250:	f104 0314 	add.w	r3, r4, #20
 800c254:	f019 091f 	ands.w	r9, r9, #31
 800c258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c25c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c260:	d02b      	beq.n	800c2ba <__lshift+0xbe>
 800c262:	f1c9 0e20 	rsb	lr, r9, #32
 800c266:	468a      	mov	sl, r1
 800c268:	2200      	movs	r2, #0
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	fa00 f009 	lsl.w	r0, r0, r9
 800c270:	4302      	orrs	r2, r0
 800c272:	f84a 2b04 	str.w	r2, [sl], #4
 800c276:	f853 2b04 	ldr.w	r2, [r3], #4
 800c27a:	459c      	cmp	ip, r3
 800c27c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c280:	d8f3      	bhi.n	800c26a <__lshift+0x6e>
 800c282:	ebac 0304 	sub.w	r3, ip, r4
 800c286:	3b15      	subs	r3, #21
 800c288:	f023 0303 	bic.w	r3, r3, #3
 800c28c:	3304      	adds	r3, #4
 800c28e:	f104 0015 	add.w	r0, r4, #21
 800c292:	4584      	cmp	ip, r0
 800c294:	bf38      	it	cc
 800c296:	2304      	movcc	r3, #4
 800c298:	50ca      	str	r2, [r1, r3]
 800c29a:	b10a      	cbz	r2, 800c2a0 <__lshift+0xa4>
 800c29c:	f108 0602 	add.w	r6, r8, #2
 800c2a0:	3e01      	subs	r6, #1
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	612e      	str	r6, [r5, #16]
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	f7ff fdd6 	bl	800be58 <_Bfree>
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	e7c5      	b.n	800c246 <__lshift+0x4a>
 800c2ba:	3904      	subs	r1, #4
 800c2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2c4:	459c      	cmp	ip, r3
 800c2c6:	d8f9      	bhi.n	800c2bc <__lshift+0xc0>
 800c2c8:	e7ea      	b.n	800c2a0 <__lshift+0xa4>
 800c2ca:	bf00      	nop
 800c2cc:	0800d73b 	.word	0x0800d73b
 800c2d0:	0800d74c 	.word	0x0800d74c

0800c2d4 <__mcmp>:
 800c2d4:	b530      	push	{r4, r5, lr}
 800c2d6:	6902      	ldr	r2, [r0, #16]
 800c2d8:	690c      	ldr	r4, [r1, #16]
 800c2da:	1b12      	subs	r2, r2, r4
 800c2dc:	d10e      	bne.n	800c2fc <__mcmp+0x28>
 800c2de:	f100 0314 	add.w	r3, r0, #20
 800c2e2:	3114      	adds	r1, #20
 800c2e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c2e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c2ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c2f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c2f4:	42a5      	cmp	r5, r4
 800c2f6:	d003      	beq.n	800c300 <__mcmp+0x2c>
 800c2f8:	d305      	bcc.n	800c306 <__mcmp+0x32>
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	bd30      	pop	{r4, r5, pc}
 800c300:	4283      	cmp	r3, r0
 800c302:	d3f3      	bcc.n	800c2ec <__mcmp+0x18>
 800c304:	e7fa      	b.n	800c2fc <__mcmp+0x28>
 800c306:	f04f 32ff 	mov.w	r2, #4294967295
 800c30a:	e7f7      	b.n	800c2fc <__mcmp+0x28>

0800c30c <__mdiff>:
 800c30c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	460c      	mov	r4, r1
 800c312:	4606      	mov	r6, r0
 800c314:	4611      	mov	r1, r2
 800c316:	4620      	mov	r0, r4
 800c318:	4617      	mov	r7, r2
 800c31a:	f7ff ffdb 	bl	800c2d4 <__mcmp>
 800c31e:	1e05      	subs	r5, r0, #0
 800c320:	d110      	bne.n	800c344 <__mdiff+0x38>
 800c322:	4629      	mov	r1, r5
 800c324:	4630      	mov	r0, r6
 800c326:	f7ff fd57 	bl	800bdd8 <_Balloc>
 800c32a:	b930      	cbnz	r0, 800c33a <__mdiff+0x2e>
 800c32c:	4b39      	ldr	r3, [pc, #228]	; (800c414 <__mdiff+0x108>)
 800c32e:	4602      	mov	r2, r0
 800c330:	f240 2132 	movw	r1, #562	; 0x232
 800c334:	4838      	ldr	r0, [pc, #224]	; (800c418 <__mdiff+0x10c>)
 800c336:	f000 faf3 	bl	800c920 <__assert_func>
 800c33a:	2301      	movs	r3, #1
 800c33c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c344:	bfa4      	itt	ge
 800c346:	463b      	movge	r3, r7
 800c348:	4627      	movge	r7, r4
 800c34a:	4630      	mov	r0, r6
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	bfa6      	itte	ge
 800c350:	461c      	movge	r4, r3
 800c352:	2500      	movge	r5, #0
 800c354:	2501      	movlt	r5, #1
 800c356:	f7ff fd3f 	bl	800bdd8 <_Balloc>
 800c35a:	b920      	cbnz	r0, 800c366 <__mdiff+0x5a>
 800c35c:	4b2d      	ldr	r3, [pc, #180]	; (800c414 <__mdiff+0x108>)
 800c35e:	4602      	mov	r2, r0
 800c360:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c364:	e7e6      	b.n	800c334 <__mdiff+0x28>
 800c366:	693e      	ldr	r6, [r7, #16]
 800c368:	60c5      	str	r5, [r0, #12]
 800c36a:	6925      	ldr	r5, [r4, #16]
 800c36c:	f107 0114 	add.w	r1, r7, #20
 800c370:	f104 0914 	add.w	r9, r4, #20
 800c374:	f100 0e14 	add.w	lr, r0, #20
 800c378:	f107 0210 	add.w	r2, r7, #16
 800c37c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c380:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c384:	46f2      	mov	sl, lr
 800c386:	2700      	movs	r7, #0
 800c388:	f859 3b04 	ldr.w	r3, [r9], #4
 800c38c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c390:	fa1f f883 	uxth.w	r8, r3
 800c394:	fa17 f78b 	uxtah	r7, r7, fp
 800c398:	0c1b      	lsrs	r3, r3, #16
 800c39a:	eba7 0808 	sub.w	r8, r7, r8
 800c39e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3a6:	fa1f f888 	uxth.w	r8, r8
 800c3aa:	141f      	asrs	r7, r3, #16
 800c3ac:	454d      	cmp	r5, r9
 800c3ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c3b2:	f84a 3b04 	str.w	r3, [sl], #4
 800c3b6:	d8e7      	bhi.n	800c388 <__mdiff+0x7c>
 800c3b8:	1b2b      	subs	r3, r5, r4
 800c3ba:	3b15      	subs	r3, #21
 800c3bc:	f023 0303 	bic.w	r3, r3, #3
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	3415      	adds	r4, #21
 800c3c4:	42a5      	cmp	r5, r4
 800c3c6:	bf38      	it	cc
 800c3c8:	2304      	movcc	r3, #4
 800c3ca:	4419      	add	r1, r3
 800c3cc:	4473      	add	r3, lr
 800c3ce:	469e      	mov	lr, r3
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	4565      	cmp	r5, ip
 800c3d4:	d30e      	bcc.n	800c3f4 <__mdiff+0xe8>
 800c3d6:	f10c 0203 	add.w	r2, ip, #3
 800c3da:	1a52      	subs	r2, r2, r1
 800c3dc:	f022 0203 	bic.w	r2, r2, #3
 800c3e0:	3903      	subs	r1, #3
 800c3e2:	458c      	cmp	ip, r1
 800c3e4:	bf38      	it	cc
 800c3e6:	2200      	movcc	r2, #0
 800c3e8:	441a      	add	r2, r3
 800c3ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c3ee:	b17b      	cbz	r3, 800c410 <__mdiff+0x104>
 800c3f0:	6106      	str	r6, [r0, #16]
 800c3f2:	e7a5      	b.n	800c340 <__mdiff+0x34>
 800c3f4:	f855 8b04 	ldr.w	r8, [r5], #4
 800c3f8:	fa17 f488 	uxtah	r4, r7, r8
 800c3fc:	1422      	asrs	r2, r4, #16
 800c3fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c402:	b2a4      	uxth	r4, r4
 800c404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c408:	f84e 4b04 	str.w	r4, [lr], #4
 800c40c:	1417      	asrs	r7, r2, #16
 800c40e:	e7e0      	b.n	800c3d2 <__mdiff+0xc6>
 800c410:	3e01      	subs	r6, #1
 800c412:	e7ea      	b.n	800c3ea <__mdiff+0xde>
 800c414:	0800d73b 	.word	0x0800d73b
 800c418:	0800d74c 	.word	0x0800d74c

0800c41c <__d2b>:
 800c41c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c420:	4689      	mov	r9, r1
 800c422:	2101      	movs	r1, #1
 800c424:	ec57 6b10 	vmov	r6, r7, d0
 800c428:	4690      	mov	r8, r2
 800c42a:	f7ff fcd5 	bl	800bdd8 <_Balloc>
 800c42e:	4604      	mov	r4, r0
 800c430:	b930      	cbnz	r0, 800c440 <__d2b+0x24>
 800c432:	4602      	mov	r2, r0
 800c434:	4b25      	ldr	r3, [pc, #148]	; (800c4cc <__d2b+0xb0>)
 800c436:	4826      	ldr	r0, [pc, #152]	; (800c4d0 <__d2b+0xb4>)
 800c438:	f240 310a 	movw	r1, #778	; 0x30a
 800c43c:	f000 fa70 	bl	800c920 <__assert_func>
 800c440:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c444:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c448:	bb35      	cbnz	r5, 800c498 <__d2b+0x7c>
 800c44a:	2e00      	cmp	r6, #0
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	d028      	beq.n	800c4a2 <__d2b+0x86>
 800c450:	4668      	mov	r0, sp
 800c452:	9600      	str	r6, [sp, #0]
 800c454:	f7ff fd8c 	bl	800bf70 <__lo0bits>
 800c458:	9900      	ldr	r1, [sp, #0]
 800c45a:	b300      	cbz	r0, 800c49e <__d2b+0x82>
 800c45c:	9a01      	ldr	r2, [sp, #4]
 800c45e:	f1c0 0320 	rsb	r3, r0, #32
 800c462:	fa02 f303 	lsl.w	r3, r2, r3
 800c466:	430b      	orrs	r3, r1
 800c468:	40c2      	lsrs	r2, r0
 800c46a:	6163      	str	r3, [r4, #20]
 800c46c:	9201      	str	r2, [sp, #4]
 800c46e:	9b01      	ldr	r3, [sp, #4]
 800c470:	61a3      	str	r3, [r4, #24]
 800c472:	2b00      	cmp	r3, #0
 800c474:	bf14      	ite	ne
 800c476:	2202      	movne	r2, #2
 800c478:	2201      	moveq	r2, #1
 800c47a:	6122      	str	r2, [r4, #16]
 800c47c:	b1d5      	cbz	r5, 800c4b4 <__d2b+0x98>
 800c47e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c482:	4405      	add	r5, r0
 800c484:	f8c9 5000 	str.w	r5, [r9]
 800c488:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c48c:	f8c8 0000 	str.w	r0, [r8]
 800c490:	4620      	mov	r0, r4
 800c492:	b003      	add	sp, #12
 800c494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c49c:	e7d5      	b.n	800c44a <__d2b+0x2e>
 800c49e:	6161      	str	r1, [r4, #20]
 800c4a0:	e7e5      	b.n	800c46e <__d2b+0x52>
 800c4a2:	a801      	add	r0, sp, #4
 800c4a4:	f7ff fd64 	bl	800bf70 <__lo0bits>
 800c4a8:	9b01      	ldr	r3, [sp, #4]
 800c4aa:	6163      	str	r3, [r4, #20]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	6122      	str	r2, [r4, #16]
 800c4b0:	3020      	adds	r0, #32
 800c4b2:	e7e3      	b.n	800c47c <__d2b+0x60>
 800c4b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4bc:	f8c9 0000 	str.w	r0, [r9]
 800c4c0:	6918      	ldr	r0, [r3, #16]
 800c4c2:	f7ff fd35 	bl	800bf30 <__hi0bits>
 800c4c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4ca:	e7df      	b.n	800c48c <__d2b+0x70>
 800c4cc:	0800d73b 	.word	0x0800d73b
 800c4d0:	0800d74c 	.word	0x0800d74c

0800c4d4 <_calloc_r>:
 800c4d4:	b513      	push	{r0, r1, r4, lr}
 800c4d6:	434a      	muls	r2, r1
 800c4d8:	4611      	mov	r1, r2
 800c4da:	9201      	str	r2, [sp, #4]
 800c4dc:	f000 f85a 	bl	800c594 <_malloc_r>
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	b118      	cbz	r0, 800c4ec <_calloc_r+0x18>
 800c4e4:	9a01      	ldr	r2, [sp, #4]
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	f7fe f960 	bl	800a7ac <memset>
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	b002      	add	sp, #8
 800c4f0:	bd10      	pop	{r4, pc}
	...

0800c4f4 <_free_r>:
 800c4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4f6:	2900      	cmp	r1, #0
 800c4f8:	d048      	beq.n	800c58c <_free_r+0x98>
 800c4fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4fe:	9001      	str	r0, [sp, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	f1a1 0404 	sub.w	r4, r1, #4
 800c506:	bfb8      	it	lt
 800c508:	18e4      	addlt	r4, r4, r3
 800c50a:	f000 fa65 	bl	800c9d8 <__malloc_lock>
 800c50e:	4a20      	ldr	r2, [pc, #128]	; (800c590 <_free_r+0x9c>)
 800c510:	9801      	ldr	r0, [sp, #4]
 800c512:	6813      	ldr	r3, [r2, #0]
 800c514:	4615      	mov	r5, r2
 800c516:	b933      	cbnz	r3, 800c526 <_free_r+0x32>
 800c518:	6063      	str	r3, [r4, #4]
 800c51a:	6014      	str	r4, [r2, #0]
 800c51c:	b003      	add	sp, #12
 800c51e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c522:	f000 ba5f 	b.w	800c9e4 <__malloc_unlock>
 800c526:	42a3      	cmp	r3, r4
 800c528:	d90b      	bls.n	800c542 <_free_r+0x4e>
 800c52a:	6821      	ldr	r1, [r4, #0]
 800c52c:	1862      	adds	r2, r4, r1
 800c52e:	4293      	cmp	r3, r2
 800c530:	bf04      	itt	eq
 800c532:	681a      	ldreq	r2, [r3, #0]
 800c534:	685b      	ldreq	r3, [r3, #4]
 800c536:	6063      	str	r3, [r4, #4]
 800c538:	bf04      	itt	eq
 800c53a:	1852      	addeq	r2, r2, r1
 800c53c:	6022      	streq	r2, [r4, #0]
 800c53e:	602c      	str	r4, [r5, #0]
 800c540:	e7ec      	b.n	800c51c <_free_r+0x28>
 800c542:	461a      	mov	r2, r3
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	b10b      	cbz	r3, 800c54c <_free_r+0x58>
 800c548:	42a3      	cmp	r3, r4
 800c54a:	d9fa      	bls.n	800c542 <_free_r+0x4e>
 800c54c:	6811      	ldr	r1, [r2, #0]
 800c54e:	1855      	adds	r5, r2, r1
 800c550:	42a5      	cmp	r5, r4
 800c552:	d10b      	bne.n	800c56c <_free_r+0x78>
 800c554:	6824      	ldr	r4, [r4, #0]
 800c556:	4421      	add	r1, r4
 800c558:	1854      	adds	r4, r2, r1
 800c55a:	42a3      	cmp	r3, r4
 800c55c:	6011      	str	r1, [r2, #0]
 800c55e:	d1dd      	bne.n	800c51c <_free_r+0x28>
 800c560:	681c      	ldr	r4, [r3, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	6053      	str	r3, [r2, #4]
 800c566:	4421      	add	r1, r4
 800c568:	6011      	str	r1, [r2, #0]
 800c56a:	e7d7      	b.n	800c51c <_free_r+0x28>
 800c56c:	d902      	bls.n	800c574 <_free_r+0x80>
 800c56e:	230c      	movs	r3, #12
 800c570:	6003      	str	r3, [r0, #0]
 800c572:	e7d3      	b.n	800c51c <_free_r+0x28>
 800c574:	6825      	ldr	r5, [r4, #0]
 800c576:	1961      	adds	r1, r4, r5
 800c578:	428b      	cmp	r3, r1
 800c57a:	bf04      	itt	eq
 800c57c:	6819      	ldreq	r1, [r3, #0]
 800c57e:	685b      	ldreq	r3, [r3, #4]
 800c580:	6063      	str	r3, [r4, #4]
 800c582:	bf04      	itt	eq
 800c584:	1949      	addeq	r1, r1, r5
 800c586:	6021      	streq	r1, [r4, #0]
 800c588:	6054      	str	r4, [r2, #4]
 800c58a:	e7c7      	b.n	800c51c <_free_r+0x28>
 800c58c:	b003      	add	sp, #12
 800c58e:	bd30      	pop	{r4, r5, pc}
 800c590:	20008438 	.word	0x20008438

0800c594 <_malloc_r>:
 800c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c596:	1ccd      	adds	r5, r1, #3
 800c598:	f025 0503 	bic.w	r5, r5, #3
 800c59c:	3508      	adds	r5, #8
 800c59e:	2d0c      	cmp	r5, #12
 800c5a0:	bf38      	it	cc
 800c5a2:	250c      	movcc	r5, #12
 800c5a4:	2d00      	cmp	r5, #0
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	db01      	blt.n	800c5ae <_malloc_r+0x1a>
 800c5aa:	42a9      	cmp	r1, r5
 800c5ac:	d903      	bls.n	800c5b6 <_malloc_r+0x22>
 800c5ae:	230c      	movs	r3, #12
 800c5b0:	6033      	str	r3, [r6, #0]
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b6:	f000 fa0f 	bl	800c9d8 <__malloc_lock>
 800c5ba:	4921      	ldr	r1, [pc, #132]	; (800c640 <_malloc_r+0xac>)
 800c5bc:	680a      	ldr	r2, [r1, #0]
 800c5be:	4614      	mov	r4, r2
 800c5c0:	b99c      	cbnz	r4, 800c5ea <_malloc_r+0x56>
 800c5c2:	4f20      	ldr	r7, [pc, #128]	; (800c644 <_malloc_r+0xb0>)
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	b923      	cbnz	r3, 800c5d2 <_malloc_r+0x3e>
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f000 f998 	bl	800c900 <_sbrk_r>
 800c5d0:	6038      	str	r0, [r7, #0]
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	f000 f993 	bl	800c900 <_sbrk_r>
 800c5da:	1c43      	adds	r3, r0, #1
 800c5dc:	d123      	bne.n	800c626 <_malloc_r+0x92>
 800c5de:	230c      	movs	r3, #12
 800c5e0:	6033      	str	r3, [r6, #0]
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f000 f9fe 	bl	800c9e4 <__malloc_unlock>
 800c5e8:	e7e3      	b.n	800c5b2 <_malloc_r+0x1e>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	1b5b      	subs	r3, r3, r5
 800c5ee:	d417      	bmi.n	800c620 <_malloc_r+0x8c>
 800c5f0:	2b0b      	cmp	r3, #11
 800c5f2:	d903      	bls.n	800c5fc <_malloc_r+0x68>
 800c5f4:	6023      	str	r3, [r4, #0]
 800c5f6:	441c      	add	r4, r3
 800c5f8:	6025      	str	r5, [r4, #0]
 800c5fa:	e004      	b.n	800c606 <_malloc_r+0x72>
 800c5fc:	6863      	ldr	r3, [r4, #4]
 800c5fe:	42a2      	cmp	r2, r4
 800c600:	bf0c      	ite	eq
 800c602:	600b      	streq	r3, [r1, #0]
 800c604:	6053      	strne	r3, [r2, #4]
 800c606:	4630      	mov	r0, r6
 800c608:	f000 f9ec 	bl	800c9e4 <__malloc_unlock>
 800c60c:	f104 000b 	add.w	r0, r4, #11
 800c610:	1d23      	adds	r3, r4, #4
 800c612:	f020 0007 	bic.w	r0, r0, #7
 800c616:	1ac2      	subs	r2, r0, r3
 800c618:	d0cc      	beq.n	800c5b4 <_malloc_r+0x20>
 800c61a:	1a1b      	subs	r3, r3, r0
 800c61c:	50a3      	str	r3, [r4, r2]
 800c61e:	e7c9      	b.n	800c5b4 <_malloc_r+0x20>
 800c620:	4622      	mov	r2, r4
 800c622:	6864      	ldr	r4, [r4, #4]
 800c624:	e7cc      	b.n	800c5c0 <_malloc_r+0x2c>
 800c626:	1cc4      	adds	r4, r0, #3
 800c628:	f024 0403 	bic.w	r4, r4, #3
 800c62c:	42a0      	cmp	r0, r4
 800c62e:	d0e3      	beq.n	800c5f8 <_malloc_r+0x64>
 800c630:	1a21      	subs	r1, r4, r0
 800c632:	4630      	mov	r0, r6
 800c634:	f000 f964 	bl	800c900 <_sbrk_r>
 800c638:	3001      	adds	r0, #1
 800c63a:	d1dd      	bne.n	800c5f8 <_malloc_r+0x64>
 800c63c:	e7cf      	b.n	800c5de <_malloc_r+0x4a>
 800c63e:	bf00      	nop
 800c640:	20008438 	.word	0x20008438
 800c644:	2000843c 	.word	0x2000843c

0800c648 <__ssputs_r>:
 800c648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c64c:	688e      	ldr	r6, [r1, #8]
 800c64e:	429e      	cmp	r6, r3
 800c650:	4682      	mov	sl, r0
 800c652:	460c      	mov	r4, r1
 800c654:	4690      	mov	r8, r2
 800c656:	461f      	mov	r7, r3
 800c658:	d838      	bhi.n	800c6cc <__ssputs_r+0x84>
 800c65a:	898a      	ldrh	r2, [r1, #12]
 800c65c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c660:	d032      	beq.n	800c6c8 <__ssputs_r+0x80>
 800c662:	6825      	ldr	r5, [r4, #0]
 800c664:	6909      	ldr	r1, [r1, #16]
 800c666:	eba5 0901 	sub.w	r9, r5, r1
 800c66a:	6965      	ldr	r5, [r4, #20]
 800c66c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c674:	3301      	adds	r3, #1
 800c676:	444b      	add	r3, r9
 800c678:	106d      	asrs	r5, r5, #1
 800c67a:	429d      	cmp	r5, r3
 800c67c:	bf38      	it	cc
 800c67e:	461d      	movcc	r5, r3
 800c680:	0553      	lsls	r3, r2, #21
 800c682:	d531      	bpl.n	800c6e8 <__ssputs_r+0xa0>
 800c684:	4629      	mov	r1, r5
 800c686:	f7ff ff85 	bl	800c594 <_malloc_r>
 800c68a:	4606      	mov	r6, r0
 800c68c:	b950      	cbnz	r0, 800c6a4 <__ssputs_r+0x5c>
 800c68e:	230c      	movs	r3, #12
 800c690:	f8ca 3000 	str.w	r3, [sl]
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c69a:	81a3      	strh	r3, [r4, #12]
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a4:	6921      	ldr	r1, [r4, #16]
 800c6a6:	464a      	mov	r2, r9
 800c6a8:	f7fe f872 	bl	800a790 <memcpy>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	6126      	str	r6, [r4, #16]
 800c6ba:	6165      	str	r5, [r4, #20]
 800c6bc:	444e      	add	r6, r9
 800c6be:	eba5 0509 	sub.w	r5, r5, r9
 800c6c2:	6026      	str	r6, [r4, #0]
 800c6c4:	60a5      	str	r5, [r4, #8]
 800c6c6:	463e      	mov	r6, r7
 800c6c8:	42be      	cmp	r6, r7
 800c6ca:	d900      	bls.n	800c6ce <__ssputs_r+0x86>
 800c6cc:	463e      	mov	r6, r7
 800c6ce:	4632      	mov	r2, r6
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	4641      	mov	r1, r8
 800c6d4:	f000 f966 	bl	800c9a4 <memmove>
 800c6d8:	68a3      	ldr	r3, [r4, #8]
 800c6da:	6822      	ldr	r2, [r4, #0]
 800c6dc:	1b9b      	subs	r3, r3, r6
 800c6de:	4432      	add	r2, r6
 800c6e0:	60a3      	str	r3, [r4, #8]
 800c6e2:	6022      	str	r2, [r4, #0]
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e7db      	b.n	800c6a0 <__ssputs_r+0x58>
 800c6e8:	462a      	mov	r2, r5
 800c6ea:	f000 f981 	bl	800c9f0 <_realloc_r>
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d1e1      	bne.n	800c6b8 <__ssputs_r+0x70>
 800c6f4:	6921      	ldr	r1, [r4, #16]
 800c6f6:	4650      	mov	r0, sl
 800c6f8:	f7ff fefc 	bl	800c4f4 <_free_r>
 800c6fc:	e7c7      	b.n	800c68e <__ssputs_r+0x46>
	...

0800c700 <_svfiprintf_r>:
 800c700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	4698      	mov	r8, r3
 800c706:	898b      	ldrh	r3, [r1, #12]
 800c708:	061b      	lsls	r3, r3, #24
 800c70a:	b09d      	sub	sp, #116	; 0x74
 800c70c:	4607      	mov	r7, r0
 800c70e:	460d      	mov	r5, r1
 800c710:	4614      	mov	r4, r2
 800c712:	d50e      	bpl.n	800c732 <_svfiprintf_r+0x32>
 800c714:	690b      	ldr	r3, [r1, #16]
 800c716:	b963      	cbnz	r3, 800c732 <_svfiprintf_r+0x32>
 800c718:	2140      	movs	r1, #64	; 0x40
 800c71a:	f7ff ff3b 	bl	800c594 <_malloc_r>
 800c71e:	6028      	str	r0, [r5, #0]
 800c720:	6128      	str	r0, [r5, #16]
 800c722:	b920      	cbnz	r0, 800c72e <_svfiprintf_r+0x2e>
 800c724:	230c      	movs	r3, #12
 800c726:	603b      	str	r3, [r7, #0]
 800c728:	f04f 30ff 	mov.w	r0, #4294967295
 800c72c:	e0d1      	b.n	800c8d2 <_svfiprintf_r+0x1d2>
 800c72e:	2340      	movs	r3, #64	; 0x40
 800c730:	616b      	str	r3, [r5, #20]
 800c732:	2300      	movs	r3, #0
 800c734:	9309      	str	r3, [sp, #36]	; 0x24
 800c736:	2320      	movs	r3, #32
 800c738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c73c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c740:	2330      	movs	r3, #48	; 0x30
 800c742:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c8ec <_svfiprintf_r+0x1ec>
 800c746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c74a:	f04f 0901 	mov.w	r9, #1
 800c74e:	4623      	mov	r3, r4
 800c750:	469a      	mov	sl, r3
 800c752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c756:	b10a      	cbz	r2, 800c75c <_svfiprintf_r+0x5c>
 800c758:	2a25      	cmp	r2, #37	; 0x25
 800c75a:	d1f9      	bne.n	800c750 <_svfiprintf_r+0x50>
 800c75c:	ebba 0b04 	subs.w	fp, sl, r4
 800c760:	d00b      	beq.n	800c77a <_svfiprintf_r+0x7a>
 800c762:	465b      	mov	r3, fp
 800c764:	4622      	mov	r2, r4
 800c766:	4629      	mov	r1, r5
 800c768:	4638      	mov	r0, r7
 800c76a:	f7ff ff6d 	bl	800c648 <__ssputs_r>
 800c76e:	3001      	adds	r0, #1
 800c770:	f000 80aa 	beq.w	800c8c8 <_svfiprintf_r+0x1c8>
 800c774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c776:	445a      	add	r2, fp
 800c778:	9209      	str	r2, [sp, #36]	; 0x24
 800c77a:	f89a 3000 	ldrb.w	r3, [sl]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f000 80a2 	beq.w	800c8c8 <_svfiprintf_r+0x1c8>
 800c784:	2300      	movs	r3, #0
 800c786:	f04f 32ff 	mov.w	r2, #4294967295
 800c78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c78e:	f10a 0a01 	add.w	sl, sl, #1
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	9307      	str	r3, [sp, #28]
 800c796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c79a:	931a      	str	r3, [sp, #104]	; 0x68
 800c79c:	4654      	mov	r4, sl
 800c79e:	2205      	movs	r2, #5
 800c7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a4:	4851      	ldr	r0, [pc, #324]	; (800c8ec <_svfiprintf_r+0x1ec>)
 800c7a6:	f7f3 fd1b 	bl	80001e0 <memchr>
 800c7aa:	9a04      	ldr	r2, [sp, #16]
 800c7ac:	b9d8      	cbnz	r0, 800c7e6 <_svfiprintf_r+0xe6>
 800c7ae:	06d0      	lsls	r0, r2, #27
 800c7b0:	bf44      	itt	mi
 800c7b2:	2320      	movmi	r3, #32
 800c7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7b8:	0711      	lsls	r1, r2, #28
 800c7ba:	bf44      	itt	mi
 800c7bc:	232b      	movmi	r3, #43	; 0x2b
 800c7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7c8:	d015      	beq.n	800c7f6 <_svfiprintf_r+0xf6>
 800c7ca:	9a07      	ldr	r2, [sp, #28]
 800c7cc:	4654      	mov	r4, sl
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	f04f 0c0a 	mov.w	ip, #10
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7da:	3b30      	subs	r3, #48	; 0x30
 800c7dc:	2b09      	cmp	r3, #9
 800c7de:	d94e      	bls.n	800c87e <_svfiprintf_r+0x17e>
 800c7e0:	b1b0      	cbz	r0, 800c810 <_svfiprintf_r+0x110>
 800c7e2:	9207      	str	r2, [sp, #28]
 800c7e4:	e014      	b.n	800c810 <_svfiprintf_r+0x110>
 800c7e6:	eba0 0308 	sub.w	r3, r0, r8
 800c7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	9304      	str	r3, [sp, #16]
 800c7f2:	46a2      	mov	sl, r4
 800c7f4:	e7d2      	b.n	800c79c <_svfiprintf_r+0x9c>
 800c7f6:	9b03      	ldr	r3, [sp, #12]
 800c7f8:	1d19      	adds	r1, r3, #4
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	9103      	str	r1, [sp, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bfbb      	ittet	lt
 800c802:	425b      	neglt	r3, r3
 800c804:	f042 0202 	orrlt.w	r2, r2, #2
 800c808:	9307      	strge	r3, [sp, #28]
 800c80a:	9307      	strlt	r3, [sp, #28]
 800c80c:	bfb8      	it	lt
 800c80e:	9204      	strlt	r2, [sp, #16]
 800c810:	7823      	ldrb	r3, [r4, #0]
 800c812:	2b2e      	cmp	r3, #46	; 0x2e
 800c814:	d10c      	bne.n	800c830 <_svfiprintf_r+0x130>
 800c816:	7863      	ldrb	r3, [r4, #1]
 800c818:	2b2a      	cmp	r3, #42	; 0x2a
 800c81a:	d135      	bne.n	800c888 <_svfiprintf_r+0x188>
 800c81c:	9b03      	ldr	r3, [sp, #12]
 800c81e:	1d1a      	adds	r2, r3, #4
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	9203      	str	r2, [sp, #12]
 800c824:	2b00      	cmp	r3, #0
 800c826:	bfb8      	it	lt
 800c828:	f04f 33ff 	movlt.w	r3, #4294967295
 800c82c:	3402      	adds	r4, #2
 800c82e:	9305      	str	r3, [sp, #20]
 800c830:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8fc <_svfiprintf_r+0x1fc>
 800c834:	7821      	ldrb	r1, [r4, #0]
 800c836:	2203      	movs	r2, #3
 800c838:	4650      	mov	r0, sl
 800c83a:	f7f3 fcd1 	bl	80001e0 <memchr>
 800c83e:	b140      	cbz	r0, 800c852 <_svfiprintf_r+0x152>
 800c840:	2340      	movs	r3, #64	; 0x40
 800c842:	eba0 000a 	sub.w	r0, r0, sl
 800c846:	fa03 f000 	lsl.w	r0, r3, r0
 800c84a:	9b04      	ldr	r3, [sp, #16]
 800c84c:	4303      	orrs	r3, r0
 800c84e:	3401      	adds	r4, #1
 800c850:	9304      	str	r3, [sp, #16]
 800c852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c856:	4826      	ldr	r0, [pc, #152]	; (800c8f0 <_svfiprintf_r+0x1f0>)
 800c858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c85c:	2206      	movs	r2, #6
 800c85e:	f7f3 fcbf 	bl	80001e0 <memchr>
 800c862:	2800      	cmp	r0, #0
 800c864:	d038      	beq.n	800c8d8 <_svfiprintf_r+0x1d8>
 800c866:	4b23      	ldr	r3, [pc, #140]	; (800c8f4 <_svfiprintf_r+0x1f4>)
 800c868:	bb1b      	cbnz	r3, 800c8b2 <_svfiprintf_r+0x1b2>
 800c86a:	9b03      	ldr	r3, [sp, #12]
 800c86c:	3307      	adds	r3, #7
 800c86e:	f023 0307 	bic.w	r3, r3, #7
 800c872:	3308      	adds	r3, #8
 800c874:	9303      	str	r3, [sp, #12]
 800c876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c878:	4433      	add	r3, r6
 800c87a:	9309      	str	r3, [sp, #36]	; 0x24
 800c87c:	e767      	b.n	800c74e <_svfiprintf_r+0x4e>
 800c87e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c882:	460c      	mov	r4, r1
 800c884:	2001      	movs	r0, #1
 800c886:	e7a5      	b.n	800c7d4 <_svfiprintf_r+0xd4>
 800c888:	2300      	movs	r3, #0
 800c88a:	3401      	adds	r4, #1
 800c88c:	9305      	str	r3, [sp, #20]
 800c88e:	4619      	mov	r1, r3
 800c890:	f04f 0c0a 	mov.w	ip, #10
 800c894:	4620      	mov	r0, r4
 800c896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c89a:	3a30      	subs	r2, #48	; 0x30
 800c89c:	2a09      	cmp	r2, #9
 800c89e:	d903      	bls.n	800c8a8 <_svfiprintf_r+0x1a8>
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d0c5      	beq.n	800c830 <_svfiprintf_r+0x130>
 800c8a4:	9105      	str	r1, [sp, #20]
 800c8a6:	e7c3      	b.n	800c830 <_svfiprintf_r+0x130>
 800c8a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e7f0      	b.n	800c894 <_svfiprintf_r+0x194>
 800c8b2:	ab03      	add	r3, sp, #12
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	462a      	mov	r2, r5
 800c8b8:	4b0f      	ldr	r3, [pc, #60]	; (800c8f8 <_svfiprintf_r+0x1f8>)
 800c8ba:	a904      	add	r1, sp, #16
 800c8bc:	4638      	mov	r0, r7
 800c8be:	f7fe f81d 	bl	800a8fc <_printf_float>
 800c8c2:	1c42      	adds	r2, r0, #1
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	d1d6      	bne.n	800c876 <_svfiprintf_r+0x176>
 800c8c8:	89ab      	ldrh	r3, [r5, #12]
 800c8ca:	065b      	lsls	r3, r3, #25
 800c8cc:	f53f af2c 	bmi.w	800c728 <_svfiprintf_r+0x28>
 800c8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8d2:	b01d      	add	sp, #116	; 0x74
 800c8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d8:	ab03      	add	r3, sp, #12
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	462a      	mov	r2, r5
 800c8de:	4b06      	ldr	r3, [pc, #24]	; (800c8f8 <_svfiprintf_r+0x1f8>)
 800c8e0:	a904      	add	r1, sp, #16
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	f7fe faae 	bl	800ae44 <_printf_i>
 800c8e8:	e7eb      	b.n	800c8c2 <_svfiprintf_r+0x1c2>
 800c8ea:	bf00      	nop
 800c8ec:	0800d8ac 	.word	0x0800d8ac
 800c8f0:	0800d8b6 	.word	0x0800d8b6
 800c8f4:	0800a8fd 	.word	0x0800a8fd
 800c8f8:	0800c649 	.word	0x0800c649
 800c8fc:	0800d8b2 	.word	0x0800d8b2

0800c900 <_sbrk_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d06      	ldr	r5, [pc, #24]	; (800c91c <_sbrk_r+0x1c>)
 800c904:	2300      	movs	r3, #0
 800c906:	4604      	mov	r4, r0
 800c908:	4608      	mov	r0, r1
 800c90a:	602b      	str	r3, [r5, #0]
 800c90c:	f7f6 f8c4 	bl	8002a98 <_sbrk>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d102      	bne.n	800c91a <_sbrk_r+0x1a>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	b103      	cbz	r3, 800c91a <_sbrk_r+0x1a>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	2000877c 	.word	0x2000877c

0800c920 <__assert_func>:
 800c920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c922:	4614      	mov	r4, r2
 800c924:	461a      	mov	r2, r3
 800c926:	4b09      	ldr	r3, [pc, #36]	; (800c94c <__assert_func+0x2c>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4605      	mov	r5, r0
 800c92c:	68d8      	ldr	r0, [r3, #12]
 800c92e:	b14c      	cbz	r4, 800c944 <__assert_func+0x24>
 800c930:	4b07      	ldr	r3, [pc, #28]	; (800c950 <__assert_func+0x30>)
 800c932:	9100      	str	r1, [sp, #0]
 800c934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c938:	4906      	ldr	r1, [pc, #24]	; (800c954 <__assert_func+0x34>)
 800c93a:	462b      	mov	r3, r5
 800c93c:	f000 f80e 	bl	800c95c <fiprintf>
 800c940:	f000 faa4 	bl	800ce8c <abort>
 800c944:	4b04      	ldr	r3, [pc, #16]	; (800c958 <__assert_func+0x38>)
 800c946:	461c      	mov	r4, r3
 800c948:	e7f3      	b.n	800c932 <__assert_func+0x12>
 800c94a:	bf00      	nop
 800c94c:	20000014 	.word	0x20000014
 800c950:	0800d8bd 	.word	0x0800d8bd
 800c954:	0800d8ca 	.word	0x0800d8ca
 800c958:	0800d8f8 	.word	0x0800d8f8

0800c95c <fiprintf>:
 800c95c:	b40e      	push	{r1, r2, r3}
 800c95e:	b503      	push	{r0, r1, lr}
 800c960:	4601      	mov	r1, r0
 800c962:	ab03      	add	r3, sp, #12
 800c964:	4805      	ldr	r0, [pc, #20]	; (800c97c <fiprintf+0x20>)
 800c966:	f853 2b04 	ldr.w	r2, [r3], #4
 800c96a:	6800      	ldr	r0, [r0, #0]
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	f000 f88f 	bl	800ca90 <_vfiprintf_r>
 800c972:	b002      	add	sp, #8
 800c974:	f85d eb04 	ldr.w	lr, [sp], #4
 800c978:	b003      	add	sp, #12
 800c97a:	4770      	bx	lr
 800c97c:	20000014 	.word	0x20000014

0800c980 <__ascii_mbtowc>:
 800c980:	b082      	sub	sp, #8
 800c982:	b901      	cbnz	r1, 800c986 <__ascii_mbtowc+0x6>
 800c984:	a901      	add	r1, sp, #4
 800c986:	b142      	cbz	r2, 800c99a <__ascii_mbtowc+0x1a>
 800c988:	b14b      	cbz	r3, 800c99e <__ascii_mbtowc+0x1e>
 800c98a:	7813      	ldrb	r3, [r2, #0]
 800c98c:	600b      	str	r3, [r1, #0]
 800c98e:	7812      	ldrb	r2, [r2, #0]
 800c990:	1e10      	subs	r0, r2, #0
 800c992:	bf18      	it	ne
 800c994:	2001      	movne	r0, #1
 800c996:	b002      	add	sp, #8
 800c998:	4770      	bx	lr
 800c99a:	4610      	mov	r0, r2
 800c99c:	e7fb      	b.n	800c996 <__ascii_mbtowc+0x16>
 800c99e:	f06f 0001 	mvn.w	r0, #1
 800c9a2:	e7f8      	b.n	800c996 <__ascii_mbtowc+0x16>

0800c9a4 <memmove>:
 800c9a4:	4288      	cmp	r0, r1
 800c9a6:	b510      	push	{r4, lr}
 800c9a8:	eb01 0402 	add.w	r4, r1, r2
 800c9ac:	d902      	bls.n	800c9b4 <memmove+0x10>
 800c9ae:	4284      	cmp	r4, r0
 800c9b0:	4623      	mov	r3, r4
 800c9b2:	d807      	bhi.n	800c9c4 <memmove+0x20>
 800c9b4:	1e43      	subs	r3, r0, #1
 800c9b6:	42a1      	cmp	r1, r4
 800c9b8:	d008      	beq.n	800c9cc <memmove+0x28>
 800c9ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9c2:	e7f8      	b.n	800c9b6 <memmove+0x12>
 800c9c4:	4402      	add	r2, r0
 800c9c6:	4601      	mov	r1, r0
 800c9c8:	428a      	cmp	r2, r1
 800c9ca:	d100      	bne.n	800c9ce <memmove+0x2a>
 800c9cc:	bd10      	pop	{r4, pc}
 800c9ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9d6:	e7f7      	b.n	800c9c8 <memmove+0x24>

0800c9d8 <__malloc_lock>:
 800c9d8:	4801      	ldr	r0, [pc, #4]	; (800c9e0 <__malloc_lock+0x8>)
 800c9da:	f000 bc17 	b.w	800d20c <__retarget_lock_acquire_recursive>
 800c9de:	bf00      	nop
 800c9e0:	20008784 	.word	0x20008784

0800c9e4 <__malloc_unlock>:
 800c9e4:	4801      	ldr	r0, [pc, #4]	; (800c9ec <__malloc_unlock+0x8>)
 800c9e6:	f000 bc12 	b.w	800d20e <__retarget_lock_release_recursive>
 800c9ea:	bf00      	nop
 800c9ec:	20008784 	.word	0x20008784

0800c9f0 <_realloc_r>:
 800c9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f2:	4607      	mov	r7, r0
 800c9f4:	4614      	mov	r4, r2
 800c9f6:	460e      	mov	r6, r1
 800c9f8:	b921      	cbnz	r1, 800ca04 <_realloc_r+0x14>
 800c9fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c9fe:	4611      	mov	r1, r2
 800ca00:	f7ff bdc8 	b.w	800c594 <_malloc_r>
 800ca04:	b922      	cbnz	r2, 800ca10 <_realloc_r+0x20>
 800ca06:	f7ff fd75 	bl	800c4f4 <_free_r>
 800ca0a:	4625      	mov	r5, r4
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca10:	f000 fc62 	bl	800d2d8 <_malloc_usable_size_r>
 800ca14:	42a0      	cmp	r0, r4
 800ca16:	d20f      	bcs.n	800ca38 <_realloc_r+0x48>
 800ca18:	4621      	mov	r1, r4
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	f7ff fdba 	bl	800c594 <_malloc_r>
 800ca20:	4605      	mov	r5, r0
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d0f2      	beq.n	800ca0c <_realloc_r+0x1c>
 800ca26:	4631      	mov	r1, r6
 800ca28:	4622      	mov	r2, r4
 800ca2a:	f7fd feb1 	bl	800a790 <memcpy>
 800ca2e:	4631      	mov	r1, r6
 800ca30:	4638      	mov	r0, r7
 800ca32:	f7ff fd5f 	bl	800c4f4 <_free_r>
 800ca36:	e7e9      	b.n	800ca0c <_realloc_r+0x1c>
 800ca38:	4635      	mov	r5, r6
 800ca3a:	e7e7      	b.n	800ca0c <_realloc_r+0x1c>

0800ca3c <__sfputc_r>:
 800ca3c:	6893      	ldr	r3, [r2, #8]
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	b410      	push	{r4}
 800ca44:	6093      	str	r3, [r2, #8]
 800ca46:	da08      	bge.n	800ca5a <__sfputc_r+0x1e>
 800ca48:	6994      	ldr	r4, [r2, #24]
 800ca4a:	42a3      	cmp	r3, r4
 800ca4c:	db01      	blt.n	800ca52 <__sfputc_r+0x16>
 800ca4e:	290a      	cmp	r1, #10
 800ca50:	d103      	bne.n	800ca5a <__sfputc_r+0x1e>
 800ca52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca56:	f000 b94b 	b.w	800ccf0 <__swbuf_r>
 800ca5a:	6813      	ldr	r3, [r2, #0]
 800ca5c:	1c58      	adds	r0, r3, #1
 800ca5e:	6010      	str	r0, [r2, #0]
 800ca60:	7019      	strb	r1, [r3, #0]
 800ca62:	4608      	mov	r0, r1
 800ca64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca68:	4770      	bx	lr

0800ca6a <__sfputs_r>:
 800ca6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	460f      	mov	r7, r1
 800ca70:	4614      	mov	r4, r2
 800ca72:	18d5      	adds	r5, r2, r3
 800ca74:	42ac      	cmp	r4, r5
 800ca76:	d101      	bne.n	800ca7c <__sfputs_r+0x12>
 800ca78:	2000      	movs	r0, #0
 800ca7a:	e007      	b.n	800ca8c <__sfputs_r+0x22>
 800ca7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca80:	463a      	mov	r2, r7
 800ca82:	4630      	mov	r0, r6
 800ca84:	f7ff ffda 	bl	800ca3c <__sfputc_r>
 800ca88:	1c43      	adds	r3, r0, #1
 800ca8a:	d1f3      	bne.n	800ca74 <__sfputs_r+0xa>
 800ca8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca90 <_vfiprintf_r>:
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	460d      	mov	r5, r1
 800ca96:	b09d      	sub	sp, #116	; 0x74
 800ca98:	4614      	mov	r4, r2
 800ca9a:	4698      	mov	r8, r3
 800ca9c:	4606      	mov	r6, r0
 800ca9e:	b118      	cbz	r0, 800caa8 <_vfiprintf_r+0x18>
 800caa0:	6983      	ldr	r3, [r0, #24]
 800caa2:	b90b      	cbnz	r3, 800caa8 <_vfiprintf_r+0x18>
 800caa4:	f000 fb14 	bl	800d0d0 <__sinit>
 800caa8:	4b89      	ldr	r3, [pc, #548]	; (800ccd0 <_vfiprintf_r+0x240>)
 800caaa:	429d      	cmp	r5, r3
 800caac:	d11b      	bne.n	800cae6 <_vfiprintf_r+0x56>
 800caae:	6875      	ldr	r5, [r6, #4]
 800cab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cab2:	07d9      	lsls	r1, r3, #31
 800cab4:	d405      	bmi.n	800cac2 <_vfiprintf_r+0x32>
 800cab6:	89ab      	ldrh	r3, [r5, #12]
 800cab8:	059a      	lsls	r2, r3, #22
 800caba:	d402      	bmi.n	800cac2 <_vfiprintf_r+0x32>
 800cabc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cabe:	f000 fba5 	bl	800d20c <__retarget_lock_acquire_recursive>
 800cac2:	89ab      	ldrh	r3, [r5, #12]
 800cac4:	071b      	lsls	r3, r3, #28
 800cac6:	d501      	bpl.n	800cacc <_vfiprintf_r+0x3c>
 800cac8:	692b      	ldr	r3, [r5, #16]
 800caca:	b9eb      	cbnz	r3, 800cb08 <_vfiprintf_r+0x78>
 800cacc:	4629      	mov	r1, r5
 800cace:	4630      	mov	r0, r6
 800cad0:	f000 f96e 	bl	800cdb0 <__swsetup_r>
 800cad4:	b1c0      	cbz	r0, 800cb08 <_vfiprintf_r+0x78>
 800cad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cad8:	07dc      	lsls	r4, r3, #31
 800cada:	d50e      	bpl.n	800cafa <_vfiprintf_r+0x6a>
 800cadc:	f04f 30ff 	mov.w	r0, #4294967295
 800cae0:	b01d      	add	sp, #116	; 0x74
 800cae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae6:	4b7b      	ldr	r3, [pc, #492]	; (800ccd4 <_vfiprintf_r+0x244>)
 800cae8:	429d      	cmp	r5, r3
 800caea:	d101      	bne.n	800caf0 <_vfiprintf_r+0x60>
 800caec:	68b5      	ldr	r5, [r6, #8]
 800caee:	e7df      	b.n	800cab0 <_vfiprintf_r+0x20>
 800caf0:	4b79      	ldr	r3, [pc, #484]	; (800ccd8 <_vfiprintf_r+0x248>)
 800caf2:	429d      	cmp	r5, r3
 800caf4:	bf08      	it	eq
 800caf6:	68f5      	ldreq	r5, [r6, #12]
 800caf8:	e7da      	b.n	800cab0 <_vfiprintf_r+0x20>
 800cafa:	89ab      	ldrh	r3, [r5, #12]
 800cafc:	0598      	lsls	r0, r3, #22
 800cafe:	d4ed      	bmi.n	800cadc <_vfiprintf_r+0x4c>
 800cb00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb02:	f000 fb84 	bl	800d20e <__retarget_lock_release_recursive>
 800cb06:	e7e9      	b.n	800cadc <_vfiprintf_r+0x4c>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb0c:	2320      	movs	r3, #32
 800cb0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb12:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb16:	2330      	movs	r3, #48	; 0x30
 800cb18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ccdc <_vfiprintf_r+0x24c>
 800cb1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb20:	f04f 0901 	mov.w	r9, #1
 800cb24:	4623      	mov	r3, r4
 800cb26:	469a      	mov	sl, r3
 800cb28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb2c:	b10a      	cbz	r2, 800cb32 <_vfiprintf_r+0xa2>
 800cb2e:	2a25      	cmp	r2, #37	; 0x25
 800cb30:	d1f9      	bne.n	800cb26 <_vfiprintf_r+0x96>
 800cb32:	ebba 0b04 	subs.w	fp, sl, r4
 800cb36:	d00b      	beq.n	800cb50 <_vfiprintf_r+0xc0>
 800cb38:	465b      	mov	r3, fp
 800cb3a:	4622      	mov	r2, r4
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f7ff ff93 	bl	800ca6a <__sfputs_r>
 800cb44:	3001      	adds	r0, #1
 800cb46:	f000 80aa 	beq.w	800cc9e <_vfiprintf_r+0x20e>
 800cb4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb4c:	445a      	add	r2, fp
 800cb4e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb50:	f89a 3000 	ldrb.w	r3, [sl]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 80a2 	beq.w	800cc9e <_vfiprintf_r+0x20e>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb64:	f10a 0a01 	add.w	sl, sl, #1
 800cb68:	9304      	str	r3, [sp, #16]
 800cb6a:	9307      	str	r3, [sp, #28]
 800cb6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb70:	931a      	str	r3, [sp, #104]	; 0x68
 800cb72:	4654      	mov	r4, sl
 800cb74:	2205      	movs	r2, #5
 800cb76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb7a:	4858      	ldr	r0, [pc, #352]	; (800ccdc <_vfiprintf_r+0x24c>)
 800cb7c:	f7f3 fb30 	bl	80001e0 <memchr>
 800cb80:	9a04      	ldr	r2, [sp, #16]
 800cb82:	b9d8      	cbnz	r0, 800cbbc <_vfiprintf_r+0x12c>
 800cb84:	06d1      	lsls	r1, r2, #27
 800cb86:	bf44      	itt	mi
 800cb88:	2320      	movmi	r3, #32
 800cb8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb8e:	0713      	lsls	r3, r2, #28
 800cb90:	bf44      	itt	mi
 800cb92:	232b      	movmi	r3, #43	; 0x2b
 800cb94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb98:	f89a 3000 	ldrb.w	r3, [sl]
 800cb9c:	2b2a      	cmp	r3, #42	; 0x2a
 800cb9e:	d015      	beq.n	800cbcc <_vfiprintf_r+0x13c>
 800cba0:	9a07      	ldr	r2, [sp, #28]
 800cba2:	4654      	mov	r4, sl
 800cba4:	2000      	movs	r0, #0
 800cba6:	f04f 0c0a 	mov.w	ip, #10
 800cbaa:	4621      	mov	r1, r4
 800cbac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbb0:	3b30      	subs	r3, #48	; 0x30
 800cbb2:	2b09      	cmp	r3, #9
 800cbb4:	d94e      	bls.n	800cc54 <_vfiprintf_r+0x1c4>
 800cbb6:	b1b0      	cbz	r0, 800cbe6 <_vfiprintf_r+0x156>
 800cbb8:	9207      	str	r2, [sp, #28]
 800cbba:	e014      	b.n	800cbe6 <_vfiprintf_r+0x156>
 800cbbc:	eba0 0308 	sub.w	r3, r0, r8
 800cbc0:	fa09 f303 	lsl.w	r3, r9, r3
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	9304      	str	r3, [sp, #16]
 800cbc8:	46a2      	mov	sl, r4
 800cbca:	e7d2      	b.n	800cb72 <_vfiprintf_r+0xe2>
 800cbcc:	9b03      	ldr	r3, [sp, #12]
 800cbce:	1d19      	adds	r1, r3, #4
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	9103      	str	r1, [sp, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	bfbb      	ittet	lt
 800cbd8:	425b      	neglt	r3, r3
 800cbda:	f042 0202 	orrlt.w	r2, r2, #2
 800cbde:	9307      	strge	r3, [sp, #28]
 800cbe0:	9307      	strlt	r3, [sp, #28]
 800cbe2:	bfb8      	it	lt
 800cbe4:	9204      	strlt	r2, [sp, #16]
 800cbe6:	7823      	ldrb	r3, [r4, #0]
 800cbe8:	2b2e      	cmp	r3, #46	; 0x2e
 800cbea:	d10c      	bne.n	800cc06 <_vfiprintf_r+0x176>
 800cbec:	7863      	ldrb	r3, [r4, #1]
 800cbee:	2b2a      	cmp	r3, #42	; 0x2a
 800cbf0:	d135      	bne.n	800cc5e <_vfiprintf_r+0x1ce>
 800cbf2:	9b03      	ldr	r3, [sp, #12]
 800cbf4:	1d1a      	adds	r2, r3, #4
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	9203      	str	r2, [sp, #12]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	bfb8      	it	lt
 800cbfe:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc02:	3402      	adds	r4, #2
 800cc04:	9305      	str	r3, [sp, #20]
 800cc06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ccec <_vfiprintf_r+0x25c>
 800cc0a:	7821      	ldrb	r1, [r4, #0]
 800cc0c:	2203      	movs	r2, #3
 800cc0e:	4650      	mov	r0, sl
 800cc10:	f7f3 fae6 	bl	80001e0 <memchr>
 800cc14:	b140      	cbz	r0, 800cc28 <_vfiprintf_r+0x198>
 800cc16:	2340      	movs	r3, #64	; 0x40
 800cc18:	eba0 000a 	sub.w	r0, r0, sl
 800cc1c:	fa03 f000 	lsl.w	r0, r3, r0
 800cc20:	9b04      	ldr	r3, [sp, #16]
 800cc22:	4303      	orrs	r3, r0
 800cc24:	3401      	adds	r4, #1
 800cc26:	9304      	str	r3, [sp, #16]
 800cc28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc2c:	482c      	ldr	r0, [pc, #176]	; (800cce0 <_vfiprintf_r+0x250>)
 800cc2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc32:	2206      	movs	r2, #6
 800cc34:	f7f3 fad4 	bl	80001e0 <memchr>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d03f      	beq.n	800ccbc <_vfiprintf_r+0x22c>
 800cc3c:	4b29      	ldr	r3, [pc, #164]	; (800cce4 <_vfiprintf_r+0x254>)
 800cc3e:	bb1b      	cbnz	r3, 800cc88 <_vfiprintf_r+0x1f8>
 800cc40:	9b03      	ldr	r3, [sp, #12]
 800cc42:	3307      	adds	r3, #7
 800cc44:	f023 0307 	bic.w	r3, r3, #7
 800cc48:	3308      	adds	r3, #8
 800cc4a:	9303      	str	r3, [sp, #12]
 800cc4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc4e:	443b      	add	r3, r7
 800cc50:	9309      	str	r3, [sp, #36]	; 0x24
 800cc52:	e767      	b.n	800cb24 <_vfiprintf_r+0x94>
 800cc54:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc58:	460c      	mov	r4, r1
 800cc5a:	2001      	movs	r0, #1
 800cc5c:	e7a5      	b.n	800cbaa <_vfiprintf_r+0x11a>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	3401      	adds	r4, #1
 800cc62:	9305      	str	r3, [sp, #20]
 800cc64:	4619      	mov	r1, r3
 800cc66:	f04f 0c0a 	mov.w	ip, #10
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc70:	3a30      	subs	r2, #48	; 0x30
 800cc72:	2a09      	cmp	r2, #9
 800cc74:	d903      	bls.n	800cc7e <_vfiprintf_r+0x1ee>
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d0c5      	beq.n	800cc06 <_vfiprintf_r+0x176>
 800cc7a:	9105      	str	r1, [sp, #20]
 800cc7c:	e7c3      	b.n	800cc06 <_vfiprintf_r+0x176>
 800cc7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc82:	4604      	mov	r4, r0
 800cc84:	2301      	movs	r3, #1
 800cc86:	e7f0      	b.n	800cc6a <_vfiprintf_r+0x1da>
 800cc88:	ab03      	add	r3, sp, #12
 800cc8a:	9300      	str	r3, [sp, #0]
 800cc8c:	462a      	mov	r2, r5
 800cc8e:	4b16      	ldr	r3, [pc, #88]	; (800cce8 <_vfiprintf_r+0x258>)
 800cc90:	a904      	add	r1, sp, #16
 800cc92:	4630      	mov	r0, r6
 800cc94:	f7fd fe32 	bl	800a8fc <_printf_float>
 800cc98:	4607      	mov	r7, r0
 800cc9a:	1c78      	adds	r0, r7, #1
 800cc9c:	d1d6      	bne.n	800cc4c <_vfiprintf_r+0x1bc>
 800cc9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cca0:	07d9      	lsls	r1, r3, #31
 800cca2:	d405      	bmi.n	800ccb0 <_vfiprintf_r+0x220>
 800cca4:	89ab      	ldrh	r3, [r5, #12]
 800cca6:	059a      	lsls	r2, r3, #22
 800cca8:	d402      	bmi.n	800ccb0 <_vfiprintf_r+0x220>
 800ccaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccac:	f000 faaf 	bl	800d20e <__retarget_lock_release_recursive>
 800ccb0:	89ab      	ldrh	r3, [r5, #12]
 800ccb2:	065b      	lsls	r3, r3, #25
 800ccb4:	f53f af12 	bmi.w	800cadc <_vfiprintf_r+0x4c>
 800ccb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccba:	e711      	b.n	800cae0 <_vfiprintf_r+0x50>
 800ccbc:	ab03      	add	r3, sp, #12
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	462a      	mov	r2, r5
 800ccc2:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <_vfiprintf_r+0x258>)
 800ccc4:	a904      	add	r1, sp, #16
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f7fe f8bc 	bl	800ae44 <_printf_i>
 800cccc:	e7e4      	b.n	800cc98 <_vfiprintf_r+0x208>
 800ccce:	bf00      	nop
 800ccd0:	0800da24 	.word	0x0800da24
 800ccd4:	0800da44 	.word	0x0800da44
 800ccd8:	0800da04 	.word	0x0800da04
 800ccdc:	0800d8ac 	.word	0x0800d8ac
 800cce0:	0800d8b6 	.word	0x0800d8b6
 800cce4:	0800a8fd 	.word	0x0800a8fd
 800cce8:	0800ca6b 	.word	0x0800ca6b
 800ccec:	0800d8b2 	.word	0x0800d8b2

0800ccf0 <__swbuf_r>:
 800ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf2:	460e      	mov	r6, r1
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	b118      	cbz	r0, 800cd02 <__swbuf_r+0x12>
 800ccfa:	6983      	ldr	r3, [r0, #24]
 800ccfc:	b90b      	cbnz	r3, 800cd02 <__swbuf_r+0x12>
 800ccfe:	f000 f9e7 	bl	800d0d0 <__sinit>
 800cd02:	4b21      	ldr	r3, [pc, #132]	; (800cd88 <__swbuf_r+0x98>)
 800cd04:	429c      	cmp	r4, r3
 800cd06:	d12b      	bne.n	800cd60 <__swbuf_r+0x70>
 800cd08:	686c      	ldr	r4, [r5, #4]
 800cd0a:	69a3      	ldr	r3, [r4, #24]
 800cd0c:	60a3      	str	r3, [r4, #8]
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	071a      	lsls	r2, r3, #28
 800cd12:	d52f      	bpl.n	800cd74 <__swbuf_r+0x84>
 800cd14:	6923      	ldr	r3, [r4, #16]
 800cd16:	b36b      	cbz	r3, 800cd74 <__swbuf_r+0x84>
 800cd18:	6923      	ldr	r3, [r4, #16]
 800cd1a:	6820      	ldr	r0, [r4, #0]
 800cd1c:	1ac0      	subs	r0, r0, r3
 800cd1e:	6963      	ldr	r3, [r4, #20]
 800cd20:	b2f6      	uxtb	r6, r6
 800cd22:	4283      	cmp	r3, r0
 800cd24:	4637      	mov	r7, r6
 800cd26:	dc04      	bgt.n	800cd32 <__swbuf_r+0x42>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f000 f93c 	bl	800cfa8 <_fflush_r>
 800cd30:	bb30      	cbnz	r0, 800cd80 <__swbuf_r+0x90>
 800cd32:	68a3      	ldr	r3, [r4, #8]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	60a3      	str	r3, [r4, #8]
 800cd38:	6823      	ldr	r3, [r4, #0]
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	6022      	str	r2, [r4, #0]
 800cd3e:	701e      	strb	r6, [r3, #0]
 800cd40:	6963      	ldr	r3, [r4, #20]
 800cd42:	3001      	adds	r0, #1
 800cd44:	4283      	cmp	r3, r0
 800cd46:	d004      	beq.n	800cd52 <__swbuf_r+0x62>
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	07db      	lsls	r3, r3, #31
 800cd4c:	d506      	bpl.n	800cd5c <__swbuf_r+0x6c>
 800cd4e:	2e0a      	cmp	r6, #10
 800cd50:	d104      	bne.n	800cd5c <__swbuf_r+0x6c>
 800cd52:	4621      	mov	r1, r4
 800cd54:	4628      	mov	r0, r5
 800cd56:	f000 f927 	bl	800cfa8 <_fflush_r>
 800cd5a:	b988      	cbnz	r0, 800cd80 <__swbuf_r+0x90>
 800cd5c:	4638      	mov	r0, r7
 800cd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd60:	4b0a      	ldr	r3, [pc, #40]	; (800cd8c <__swbuf_r+0x9c>)
 800cd62:	429c      	cmp	r4, r3
 800cd64:	d101      	bne.n	800cd6a <__swbuf_r+0x7a>
 800cd66:	68ac      	ldr	r4, [r5, #8]
 800cd68:	e7cf      	b.n	800cd0a <__swbuf_r+0x1a>
 800cd6a:	4b09      	ldr	r3, [pc, #36]	; (800cd90 <__swbuf_r+0xa0>)
 800cd6c:	429c      	cmp	r4, r3
 800cd6e:	bf08      	it	eq
 800cd70:	68ec      	ldreq	r4, [r5, #12]
 800cd72:	e7ca      	b.n	800cd0a <__swbuf_r+0x1a>
 800cd74:	4621      	mov	r1, r4
 800cd76:	4628      	mov	r0, r5
 800cd78:	f000 f81a 	bl	800cdb0 <__swsetup_r>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d0cb      	beq.n	800cd18 <__swbuf_r+0x28>
 800cd80:	f04f 37ff 	mov.w	r7, #4294967295
 800cd84:	e7ea      	b.n	800cd5c <__swbuf_r+0x6c>
 800cd86:	bf00      	nop
 800cd88:	0800da24 	.word	0x0800da24
 800cd8c:	0800da44 	.word	0x0800da44
 800cd90:	0800da04 	.word	0x0800da04

0800cd94 <__ascii_wctomb>:
 800cd94:	b149      	cbz	r1, 800cdaa <__ascii_wctomb+0x16>
 800cd96:	2aff      	cmp	r2, #255	; 0xff
 800cd98:	bf85      	ittet	hi
 800cd9a:	238a      	movhi	r3, #138	; 0x8a
 800cd9c:	6003      	strhi	r3, [r0, #0]
 800cd9e:	700a      	strbls	r2, [r1, #0]
 800cda0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cda4:	bf98      	it	ls
 800cda6:	2001      	movls	r0, #1
 800cda8:	4770      	bx	lr
 800cdaa:	4608      	mov	r0, r1
 800cdac:	4770      	bx	lr
	...

0800cdb0 <__swsetup_r>:
 800cdb0:	4b32      	ldr	r3, [pc, #200]	; (800ce7c <__swsetup_r+0xcc>)
 800cdb2:	b570      	push	{r4, r5, r6, lr}
 800cdb4:	681d      	ldr	r5, [r3, #0]
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	460c      	mov	r4, r1
 800cdba:	b125      	cbz	r5, 800cdc6 <__swsetup_r+0x16>
 800cdbc:	69ab      	ldr	r3, [r5, #24]
 800cdbe:	b913      	cbnz	r3, 800cdc6 <__swsetup_r+0x16>
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f000 f985 	bl	800d0d0 <__sinit>
 800cdc6:	4b2e      	ldr	r3, [pc, #184]	; (800ce80 <__swsetup_r+0xd0>)
 800cdc8:	429c      	cmp	r4, r3
 800cdca:	d10f      	bne.n	800cdec <__swsetup_r+0x3c>
 800cdcc:	686c      	ldr	r4, [r5, #4]
 800cdce:	89a3      	ldrh	r3, [r4, #12]
 800cdd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdd4:	0719      	lsls	r1, r3, #28
 800cdd6:	d42c      	bmi.n	800ce32 <__swsetup_r+0x82>
 800cdd8:	06dd      	lsls	r5, r3, #27
 800cdda:	d411      	bmi.n	800ce00 <__swsetup_r+0x50>
 800cddc:	2309      	movs	r3, #9
 800cdde:	6033      	str	r3, [r6, #0]
 800cde0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cde4:	81a3      	strh	r3, [r4, #12]
 800cde6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdea:	e03e      	b.n	800ce6a <__swsetup_r+0xba>
 800cdec:	4b25      	ldr	r3, [pc, #148]	; (800ce84 <__swsetup_r+0xd4>)
 800cdee:	429c      	cmp	r4, r3
 800cdf0:	d101      	bne.n	800cdf6 <__swsetup_r+0x46>
 800cdf2:	68ac      	ldr	r4, [r5, #8]
 800cdf4:	e7eb      	b.n	800cdce <__swsetup_r+0x1e>
 800cdf6:	4b24      	ldr	r3, [pc, #144]	; (800ce88 <__swsetup_r+0xd8>)
 800cdf8:	429c      	cmp	r4, r3
 800cdfa:	bf08      	it	eq
 800cdfc:	68ec      	ldreq	r4, [r5, #12]
 800cdfe:	e7e6      	b.n	800cdce <__swsetup_r+0x1e>
 800ce00:	0758      	lsls	r0, r3, #29
 800ce02:	d512      	bpl.n	800ce2a <__swsetup_r+0x7a>
 800ce04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce06:	b141      	cbz	r1, 800ce1a <__swsetup_r+0x6a>
 800ce08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce0c:	4299      	cmp	r1, r3
 800ce0e:	d002      	beq.n	800ce16 <__swsetup_r+0x66>
 800ce10:	4630      	mov	r0, r6
 800ce12:	f7ff fb6f 	bl	800c4f4 <_free_r>
 800ce16:	2300      	movs	r3, #0
 800ce18:	6363      	str	r3, [r4, #52]	; 0x34
 800ce1a:	89a3      	ldrh	r3, [r4, #12]
 800ce1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce20:	81a3      	strh	r3, [r4, #12]
 800ce22:	2300      	movs	r3, #0
 800ce24:	6063      	str	r3, [r4, #4]
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	89a3      	ldrh	r3, [r4, #12]
 800ce2c:	f043 0308 	orr.w	r3, r3, #8
 800ce30:	81a3      	strh	r3, [r4, #12]
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	b94b      	cbnz	r3, 800ce4a <__swsetup_r+0x9a>
 800ce36:	89a3      	ldrh	r3, [r4, #12]
 800ce38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce40:	d003      	beq.n	800ce4a <__swsetup_r+0x9a>
 800ce42:	4621      	mov	r1, r4
 800ce44:	4630      	mov	r0, r6
 800ce46:	f000 fa07 	bl	800d258 <__smakebuf_r>
 800ce4a:	89a0      	ldrh	r0, [r4, #12]
 800ce4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce50:	f010 0301 	ands.w	r3, r0, #1
 800ce54:	d00a      	beq.n	800ce6c <__swsetup_r+0xbc>
 800ce56:	2300      	movs	r3, #0
 800ce58:	60a3      	str	r3, [r4, #8]
 800ce5a:	6963      	ldr	r3, [r4, #20]
 800ce5c:	425b      	negs	r3, r3
 800ce5e:	61a3      	str	r3, [r4, #24]
 800ce60:	6923      	ldr	r3, [r4, #16]
 800ce62:	b943      	cbnz	r3, 800ce76 <__swsetup_r+0xc6>
 800ce64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce68:	d1ba      	bne.n	800cde0 <__swsetup_r+0x30>
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}
 800ce6c:	0781      	lsls	r1, r0, #30
 800ce6e:	bf58      	it	pl
 800ce70:	6963      	ldrpl	r3, [r4, #20]
 800ce72:	60a3      	str	r3, [r4, #8]
 800ce74:	e7f4      	b.n	800ce60 <__swsetup_r+0xb0>
 800ce76:	2000      	movs	r0, #0
 800ce78:	e7f7      	b.n	800ce6a <__swsetup_r+0xba>
 800ce7a:	bf00      	nop
 800ce7c:	20000014 	.word	0x20000014
 800ce80:	0800da24 	.word	0x0800da24
 800ce84:	0800da44 	.word	0x0800da44
 800ce88:	0800da04 	.word	0x0800da04

0800ce8c <abort>:
 800ce8c:	b508      	push	{r3, lr}
 800ce8e:	2006      	movs	r0, #6
 800ce90:	f000 fa52 	bl	800d338 <raise>
 800ce94:	2001      	movs	r0, #1
 800ce96:	f7f5 fd87 	bl	80029a8 <_exit>
	...

0800ce9c <__sflush_r>:
 800ce9c:	898a      	ldrh	r2, [r1, #12]
 800ce9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea2:	4605      	mov	r5, r0
 800cea4:	0710      	lsls	r0, r2, #28
 800cea6:	460c      	mov	r4, r1
 800cea8:	d458      	bmi.n	800cf5c <__sflush_r+0xc0>
 800ceaa:	684b      	ldr	r3, [r1, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	dc05      	bgt.n	800cebc <__sflush_r+0x20>
 800ceb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dc02      	bgt.n	800cebc <__sflush_r+0x20>
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cebe:	2e00      	cmp	r6, #0
 800cec0:	d0f9      	beq.n	800ceb6 <__sflush_r+0x1a>
 800cec2:	2300      	movs	r3, #0
 800cec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cec8:	682f      	ldr	r7, [r5, #0]
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	d032      	beq.n	800cf34 <__sflush_r+0x98>
 800cece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	075a      	lsls	r2, r3, #29
 800ced4:	d505      	bpl.n	800cee2 <__sflush_r+0x46>
 800ced6:	6863      	ldr	r3, [r4, #4]
 800ced8:	1ac0      	subs	r0, r0, r3
 800ceda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cedc:	b10b      	cbz	r3, 800cee2 <__sflush_r+0x46>
 800cede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cee0:	1ac0      	subs	r0, r0, r3
 800cee2:	2300      	movs	r3, #0
 800cee4:	4602      	mov	r2, r0
 800cee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cee8:	6a21      	ldr	r1, [r4, #32]
 800ceea:	4628      	mov	r0, r5
 800ceec:	47b0      	blx	r6
 800ceee:	1c43      	adds	r3, r0, #1
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	d106      	bne.n	800cf02 <__sflush_r+0x66>
 800cef4:	6829      	ldr	r1, [r5, #0]
 800cef6:	291d      	cmp	r1, #29
 800cef8:	d82c      	bhi.n	800cf54 <__sflush_r+0xb8>
 800cefa:	4a2a      	ldr	r2, [pc, #168]	; (800cfa4 <__sflush_r+0x108>)
 800cefc:	40ca      	lsrs	r2, r1
 800cefe:	07d6      	lsls	r6, r2, #31
 800cf00:	d528      	bpl.n	800cf54 <__sflush_r+0xb8>
 800cf02:	2200      	movs	r2, #0
 800cf04:	6062      	str	r2, [r4, #4]
 800cf06:	04d9      	lsls	r1, r3, #19
 800cf08:	6922      	ldr	r2, [r4, #16]
 800cf0a:	6022      	str	r2, [r4, #0]
 800cf0c:	d504      	bpl.n	800cf18 <__sflush_r+0x7c>
 800cf0e:	1c42      	adds	r2, r0, #1
 800cf10:	d101      	bne.n	800cf16 <__sflush_r+0x7a>
 800cf12:	682b      	ldr	r3, [r5, #0]
 800cf14:	b903      	cbnz	r3, 800cf18 <__sflush_r+0x7c>
 800cf16:	6560      	str	r0, [r4, #84]	; 0x54
 800cf18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf1a:	602f      	str	r7, [r5, #0]
 800cf1c:	2900      	cmp	r1, #0
 800cf1e:	d0ca      	beq.n	800ceb6 <__sflush_r+0x1a>
 800cf20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf24:	4299      	cmp	r1, r3
 800cf26:	d002      	beq.n	800cf2e <__sflush_r+0x92>
 800cf28:	4628      	mov	r0, r5
 800cf2a:	f7ff fae3 	bl	800c4f4 <_free_r>
 800cf2e:	2000      	movs	r0, #0
 800cf30:	6360      	str	r0, [r4, #52]	; 0x34
 800cf32:	e7c1      	b.n	800ceb8 <__sflush_r+0x1c>
 800cf34:	6a21      	ldr	r1, [r4, #32]
 800cf36:	2301      	movs	r3, #1
 800cf38:	4628      	mov	r0, r5
 800cf3a:	47b0      	blx	r6
 800cf3c:	1c41      	adds	r1, r0, #1
 800cf3e:	d1c7      	bne.n	800ced0 <__sflush_r+0x34>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d0c4      	beq.n	800ced0 <__sflush_r+0x34>
 800cf46:	2b1d      	cmp	r3, #29
 800cf48:	d001      	beq.n	800cf4e <__sflush_r+0xb2>
 800cf4a:	2b16      	cmp	r3, #22
 800cf4c:	d101      	bne.n	800cf52 <__sflush_r+0xb6>
 800cf4e:	602f      	str	r7, [r5, #0]
 800cf50:	e7b1      	b.n	800ceb6 <__sflush_r+0x1a>
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf58:	81a3      	strh	r3, [r4, #12]
 800cf5a:	e7ad      	b.n	800ceb8 <__sflush_r+0x1c>
 800cf5c:	690f      	ldr	r7, [r1, #16]
 800cf5e:	2f00      	cmp	r7, #0
 800cf60:	d0a9      	beq.n	800ceb6 <__sflush_r+0x1a>
 800cf62:	0793      	lsls	r3, r2, #30
 800cf64:	680e      	ldr	r6, [r1, #0]
 800cf66:	bf08      	it	eq
 800cf68:	694b      	ldreq	r3, [r1, #20]
 800cf6a:	600f      	str	r7, [r1, #0]
 800cf6c:	bf18      	it	ne
 800cf6e:	2300      	movne	r3, #0
 800cf70:	eba6 0807 	sub.w	r8, r6, r7
 800cf74:	608b      	str	r3, [r1, #8]
 800cf76:	f1b8 0f00 	cmp.w	r8, #0
 800cf7a:	dd9c      	ble.n	800ceb6 <__sflush_r+0x1a>
 800cf7c:	6a21      	ldr	r1, [r4, #32]
 800cf7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf80:	4643      	mov	r3, r8
 800cf82:	463a      	mov	r2, r7
 800cf84:	4628      	mov	r0, r5
 800cf86:	47b0      	blx	r6
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	dc06      	bgt.n	800cf9a <__sflush_r+0xfe>
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf92:	81a3      	strh	r3, [r4, #12]
 800cf94:	f04f 30ff 	mov.w	r0, #4294967295
 800cf98:	e78e      	b.n	800ceb8 <__sflush_r+0x1c>
 800cf9a:	4407      	add	r7, r0
 800cf9c:	eba8 0800 	sub.w	r8, r8, r0
 800cfa0:	e7e9      	b.n	800cf76 <__sflush_r+0xda>
 800cfa2:	bf00      	nop
 800cfa4:	20400001 	.word	0x20400001

0800cfa8 <_fflush_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	690b      	ldr	r3, [r1, #16]
 800cfac:	4605      	mov	r5, r0
 800cfae:	460c      	mov	r4, r1
 800cfb0:	b913      	cbnz	r3, 800cfb8 <_fflush_r+0x10>
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	b118      	cbz	r0, 800cfc2 <_fflush_r+0x1a>
 800cfba:	6983      	ldr	r3, [r0, #24]
 800cfbc:	b90b      	cbnz	r3, 800cfc2 <_fflush_r+0x1a>
 800cfbe:	f000 f887 	bl	800d0d0 <__sinit>
 800cfc2:	4b14      	ldr	r3, [pc, #80]	; (800d014 <_fflush_r+0x6c>)
 800cfc4:	429c      	cmp	r4, r3
 800cfc6:	d11b      	bne.n	800d000 <_fflush_r+0x58>
 800cfc8:	686c      	ldr	r4, [r5, #4]
 800cfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d0ef      	beq.n	800cfb2 <_fflush_r+0xa>
 800cfd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfd4:	07d0      	lsls	r0, r2, #31
 800cfd6:	d404      	bmi.n	800cfe2 <_fflush_r+0x3a>
 800cfd8:	0599      	lsls	r1, r3, #22
 800cfda:	d402      	bmi.n	800cfe2 <_fflush_r+0x3a>
 800cfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfde:	f000 f915 	bl	800d20c <__retarget_lock_acquire_recursive>
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	f7ff ff59 	bl	800ce9c <__sflush_r>
 800cfea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfec:	07da      	lsls	r2, r3, #31
 800cfee:	4605      	mov	r5, r0
 800cff0:	d4e0      	bmi.n	800cfb4 <_fflush_r+0xc>
 800cff2:	89a3      	ldrh	r3, [r4, #12]
 800cff4:	059b      	lsls	r3, r3, #22
 800cff6:	d4dd      	bmi.n	800cfb4 <_fflush_r+0xc>
 800cff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cffa:	f000 f908 	bl	800d20e <__retarget_lock_release_recursive>
 800cffe:	e7d9      	b.n	800cfb4 <_fflush_r+0xc>
 800d000:	4b05      	ldr	r3, [pc, #20]	; (800d018 <_fflush_r+0x70>)
 800d002:	429c      	cmp	r4, r3
 800d004:	d101      	bne.n	800d00a <_fflush_r+0x62>
 800d006:	68ac      	ldr	r4, [r5, #8]
 800d008:	e7df      	b.n	800cfca <_fflush_r+0x22>
 800d00a:	4b04      	ldr	r3, [pc, #16]	; (800d01c <_fflush_r+0x74>)
 800d00c:	429c      	cmp	r4, r3
 800d00e:	bf08      	it	eq
 800d010:	68ec      	ldreq	r4, [r5, #12]
 800d012:	e7da      	b.n	800cfca <_fflush_r+0x22>
 800d014:	0800da24 	.word	0x0800da24
 800d018:	0800da44 	.word	0x0800da44
 800d01c:	0800da04 	.word	0x0800da04

0800d020 <std>:
 800d020:	2300      	movs	r3, #0
 800d022:	b510      	push	{r4, lr}
 800d024:	4604      	mov	r4, r0
 800d026:	e9c0 3300 	strd	r3, r3, [r0]
 800d02a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d02e:	6083      	str	r3, [r0, #8]
 800d030:	8181      	strh	r1, [r0, #12]
 800d032:	6643      	str	r3, [r0, #100]	; 0x64
 800d034:	81c2      	strh	r2, [r0, #14]
 800d036:	6183      	str	r3, [r0, #24]
 800d038:	4619      	mov	r1, r3
 800d03a:	2208      	movs	r2, #8
 800d03c:	305c      	adds	r0, #92	; 0x5c
 800d03e:	f7fd fbb5 	bl	800a7ac <memset>
 800d042:	4b05      	ldr	r3, [pc, #20]	; (800d058 <std+0x38>)
 800d044:	6263      	str	r3, [r4, #36]	; 0x24
 800d046:	4b05      	ldr	r3, [pc, #20]	; (800d05c <std+0x3c>)
 800d048:	62a3      	str	r3, [r4, #40]	; 0x28
 800d04a:	4b05      	ldr	r3, [pc, #20]	; (800d060 <std+0x40>)
 800d04c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d04e:	4b05      	ldr	r3, [pc, #20]	; (800d064 <std+0x44>)
 800d050:	6224      	str	r4, [r4, #32]
 800d052:	6323      	str	r3, [r4, #48]	; 0x30
 800d054:	bd10      	pop	{r4, pc}
 800d056:	bf00      	nop
 800d058:	0800d371 	.word	0x0800d371
 800d05c:	0800d393 	.word	0x0800d393
 800d060:	0800d3cb 	.word	0x0800d3cb
 800d064:	0800d3ef 	.word	0x0800d3ef

0800d068 <_cleanup_r>:
 800d068:	4901      	ldr	r1, [pc, #4]	; (800d070 <_cleanup_r+0x8>)
 800d06a:	f000 b8af 	b.w	800d1cc <_fwalk_reent>
 800d06e:	bf00      	nop
 800d070:	0800cfa9 	.word	0x0800cfa9

0800d074 <__sfmoreglue>:
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	1e4a      	subs	r2, r1, #1
 800d078:	2568      	movs	r5, #104	; 0x68
 800d07a:	4355      	muls	r5, r2
 800d07c:	460e      	mov	r6, r1
 800d07e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d082:	f7ff fa87 	bl	800c594 <_malloc_r>
 800d086:	4604      	mov	r4, r0
 800d088:	b140      	cbz	r0, 800d09c <__sfmoreglue+0x28>
 800d08a:	2100      	movs	r1, #0
 800d08c:	e9c0 1600 	strd	r1, r6, [r0]
 800d090:	300c      	adds	r0, #12
 800d092:	60a0      	str	r0, [r4, #8]
 800d094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d098:	f7fd fb88 	bl	800a7ac <memset>
 800d09c:	4620      	mov	r0, r4
 800d09e:	bd70      	pop	{r4, r5, r6, pc}

0800d0a0 <__sfp_lock_acquire>:
 800d0a0:	4801      	ldr	r0, [pc, #4]	; (800d0a8 <__sfp_lock_acquire+0x8>)
 800d0a2:	f000 b8b3 	b.w	800d20c <__retarget_lock_acquire_recursive>
 800d0a6:	bf00      	nop
 800d0a8:	20008788 	.word	0x20008788

0800d0ac <__sfp_lock_release>:
 800d0ac:	4801      	ldr	r0, [pc, #4]	; (800d0b4 <__sfp_lock_release+0x8>)
 800d0ae:	f000 b8ae 	b.w	800d20e <__retarget_lock_release_recursive>
 800d0b2:	bf00      	nop
 800d0b4:	20008788 	.word	0x20008788

0800d0b8 <__sinit_lock_acquire>:
 800d0b8:	4801      	ldr	r0, [pc, #4]	; (800d0c0 <__sinit_lock_acquire+0x8>)
 800d0ba:	f000 b8a7 	b.w	800d20c <__retarget_lock_acquire_recursive>
 800d0be:	bf00      	nop
 800d0c0:	20008783 	.word	0x20008783

0800d0c4 <__sinit_lock_release>:
 800d0c4:	4801      	ldr	r0, [pc, #4]	; (800d0cc <__sinit_lock_release+0x8>)
 800d0c6:	f000 b8a2 	b.w	800d20e <__retarget_lock_release_recursive>
 800d0ca:	bf00      	nop
 800d0cc:	20008783 	.word	0x20008783

0800d0d0 <__sinit>:
 800d0d0:	b510      	push	{r4, lr}
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	f7ff fff0 	bl	800d0b8 <__sinit_lock_acquire>
 800d0d8:	69a3      	ldr	r3, [r4, #24]
 800d0da:	b11b      	cbz	r3, 800d0e4 <__sinit+0x14>
 800d0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0e0:	f7ff bff0 	b.w	800d0c4 <__sinit_lock_release>
 800d0e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d0e8:	6523      	str	r3, [r4, #80]	; 0x50
 800d0ea:	4b13      	ldr	r3, [pc, #76]	; (800d138 <__sinit+0x68>)
 800d0ec:	4a13      	ldr	r2, [pc, #76]	; (800d13c <__sinit+0x6c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d0f2:	42a3      	cmp	r3, r4
 800d0f4:	bf04      	itt	eq
 800d0f6:	2301      	moveq	r3, #1
 800d0f8:	61a3      	streq	r3, [r4, #24]
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f000 f820 	bl	800d140 <__sfp>
 800d100:	6060      	str	r0, [r4, #4]
 800d102:	4620      	mov	r0, r4
 800d104:	f000 f81c 	bl	800d140 <__sfp>
 800d108:	60a0      	str	r0, [r4, #8]
 800d10a:	4620      	mov	r0, r4
 800d10c:	f000 f818 	bl	800d140 <__sfp>
 800d110:	2200      	movs	r2, #0
 800d112:	60e0      	str	r0, [r4, #12]
 800d114:	2104      	movs	r1, #4
 800d116:	6860      	ldr	r0, [r4, #4]
 800d118:	f7ff ff82 	bl	800d020 <std>
 800d11c:	68a0      	ldr	r0, [r4, #8]
 800d11e:	2201      	movs	r2, #1
 800d120:	2109      	movs	r1, #9
 800d122:	f7ff ff7d 	bl	800d020 <std>
 800d126:	68e0      	ldr	r0, [r4, #12]
 800d128:	2202      	movs	r2, #2
 800d12a:	2112      	movs	r1, #18
 800d12c:	f7ff ff78 	bl	800d020 <std>
 800d130:	2301      	movs	r3, #1
 800d132:	61a3      	str	r3, [r4, #24]
 800d134:	e7d2      	b.n	800d0dc <__sinit+0xc>
 800d136:	bf00      	nop
 800d138:	0800d680 	.word	0x0800d680
 800d13c:	0800d069 	.word	0x0800d069

0800d140 <__sfp>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	4607      	mov	r7, r0
 800d144:	f7ff ffac 	bl	800d0a0 <__sfp_lock_acquire>
 800d148:	4b1e      	ldr	r3, [pc, #120]	; (800d1c4 <__sfp+0x84>)
 800d14a:	681e      	ldr	r6, [r3, #0]
 800d14c:	69b3      	ldr	r3, [r6, #24]
 800d14e:	b913      	cbnz	r3, 800d156 <__sfp+0x16>
 800d150:	4630      	mov	r0, r6
 800d152:	f7ff ffbd 	bl	800d0d0 <__sinit>
 800d156:	3648      	adds	r6, #72	; 0x48
 800d158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d15c:	3b01      	subs	r3, #1
 800d15e:	d503      	bpl.n	800d168 <__sfp+0x28>
 800d160:	6833      	ldr	r3, [r6, #0]
 800d162:	b30b      	cbz	r3, 800d1a8 <__sfp+0x68>
 800d164:	6836      	ldr	r6, [r6, #0]
 800d166:	e7f7      	b.n	800d158 <__sfp+0x18>
 800d168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d16c:	b9d5      	cbnz	r5, 800d1a4 <__sfp+0x64>
 800d16e:	4b16      	ldr	r3, [pc, #88]	; (800d1c8 <__sfp+0x88>)
 800d170:	60e3      	str	r3, [r4, #12]
 800d172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d176:	6665      	str	r5, [r4, #100]	; 0x64
 800d178:	f000 f847 	bl	800d20a <__retarget_lock_init_recursive>
 800d17c:	f7ff ff96 	bl	800d0ac <__sfp_lock_release>
 800d180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d188:	6025      	str	r5, [r4, #0]
 800d18a:	61a5      	str	r5, [r4, #24]
 800d18c:	2208      	movs	r2, #8
 800d18e:	4629      	mov	r1, r5
 800d190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d194:	f7fd fb0a 	bl	800a7ac <memset>
 800d198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d19c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1a4:	3468      	adds	r4, #104	; 0x68
 800d1a6:	e7d9      	b.n	800d15c <__sfp+0x1c>
 800d1a8:	2104      	movs	r1, #4
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	f7ff ff62 	bl	800d074 <__sfmoreglue>
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	6030      	str	r0, [r6, #0]
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d1d5      	bne.n	800d164 <__sfp+0x24>
 800d1b8:	f7ff ff78 	bl	800d0ac <__sfp_lock_release>
 800d1bc:	230c      	movs	r3, #12
 800d1be:	603b      	str	r3, [r7, #0]
 800d1c0:	e7ee      	b.n	800d1a0 <__sfp+0x60>
 800d1c2:	bf00      	nop
 800d1c4:	0800d680 	.word	0x0800d680
 800d1c8:	ffff0001 	.word	0xffff0001

0800d1cc <_fwalk_reent>:
 800d1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	4688      	mov	r8, r1
 800d1d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1d8:	2700      	movs	r7, #0
 800d1da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1de:	f1b9 0901 	subs.w	r9, r9, #1
 800d1e2:	d505      	bpl.n	800d1f0 <_fwalk_reent+0x24>
 800d1e4:	6824      	ldr	r4, [r4, #0]
 800d1e6:	2c00      	cmp	r4, #0
 800d1e8:	d1f7      	bne.n	800d1da <_fwalk_reent+0xe>
 800d1ea:	4638      	mov	r0, r7
 800d1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1f0:	89ab      	ldrh	r3, [r5, #12]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d907      	bls.n	800d206 <_fwalk_reent+0x3a>
 800d1f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	d003      	beq.n	800d206 <_fwalk_reent+0x3a>
 800d1fe:	4629      	mov	r1, r5
 800d200:	4630      	mov	r0, r6
 800d202:	47c0      	blx	r8
 800d204:	4307      	orrs	r7, r0
 800d206:	3568      	adds	r5, #104	; 0x68
 800d208:	e7e9      	b.n	800d1de <_fwalk_reent+0x12>

0800d20a <__retarget_lock_init_recursive>:
 800d20a:	4770      	bx	lr

0800d20c <__retarget_lock_acquire_recursive>:
 800d20c:	4770      	bx	lr

0800d20e <__retarget_lock_release_recursive>:
 800d20e:	4770      	bx	lr

0800d210 <__swhatbuf_r>:
 800d210:	b570      	push	{r4, r5, r6, lr}
 800d212:	460e      	mov	r6, r1
 800d214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d218:	2900      	cmp	r1, #0
 800d21a:	b096      	sub	sp, #88	; 0x58
 800d21c:	4614      	mov	r4, r2
 800d21e:	461d      	mov	r5, r3
 800d220:	da07      	bge.n	800d232 <__swhatbuf_r+0x22>
 800d222:	2300      	movs	r3, #0
 800d224:	602b      	str	r3, [r5, #0]
 800d226:	89b3      	ldrh	r3, [r6, #12]
 800d228:	061a      	lsls	r2, r3, #24
 800d22a:	d410      	bmi.n	800d24e <__swhatbuf_r+0x3e>
 800d22c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d230:	e00e      	b.n	800d250 <__swhatbuf_r+0x40>
 800d232:	466a      	mov	r2, sp
 800d234:	f000 f902 	bl	800d43c <_fstat_r>
 800d238:	2800      	cmp	r0, #0
 800d23a:	dbf2      	blt.n	800d222 <__swhatbuf_r+0x12>
 800d23c:	9a01      	ldr	r2, [sp, #4]
 800d23e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d246:	425a      	negs	r2, r3
 800d248:	415a      	adcs	r2, r3
 800d24a:	602a      	str	r2, [r5, #0]
 800d24c:	e7ee      	b.n	800d22c <__swhatbuf_r+0x1c>
 800d24e:	2340      	movs	r3, #64	; 0x40
 800d250:	2000      	movs	r0, #0
 800d252:	6023      	str	r3, [r4, #0]
 800d254:	b016      	add	sp, #88	; 0x58
 800d256:	bd70      	pop	{r4, r5, r6, pc}

0800d258 <__smakebuf_r>:
 800d258:	898b      	ldrh	r3, [r1, #12]
 800d25a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d25c:	079d      	lsls	r5, r3, #30
 800d25e:	4606      	mov	r6, r0
 800d260:	460c      	mov	r4, r1
 800d262:	d507      	bpl.n	800d274 <__smakebuf_r+0x1c>
 800d264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d268:	6023      	str	r3, [r4, #0]
 800d26a:	6123      	str	r3, [r4, #16]
 800d26c:	2301      	movs	r3, #1
 800d26e:	6163      	str	r3, [r4, #20]
 800d270:	b002      	add	sp, #8
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	ab01      	add	r3, sp, #4
 800d276:	466a      	mov	r2, sp
 800d278:	f7ff ffca 	bl	800d210 <__swhatbuf_r>
 800d27c:	9900      	ldr	r1, [sp, #0]
 800d27e:	4605      	mov	r5, r0
 800d280:	4630      	mov	r0, r6
 800d282:	f7ff f987 	bl	800c594 <_malloc_r>
 800d286:	b948      	cbnz	r0, 800d29c <__smakebuf_r+0x44>
 800d288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d28c:	059a      	lsls	r2, r3, #22
 800d28e:	d4ef      	bmi.n	800d270 <__smakebuf_r+0x18>
 800d290:	f023 0303 	bic.w	r3, r3, #3
 800d294:	f043 0302 	orr.w	r3, r3, #2
 800d298:	81a3      	strh	r3, [r4, #12]
 800d29a:	e7e3      	b.n	800d264 <__smakebuf_r+0xc>
 800d29c:	4b0d      	ldr	r3, [pc, #52]	; (800d2d4 <__smakebuf_r+0x7c>)
 800d29e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2a0:	89a3      	ldrh	r3, [r4, #12]
 800d2a2:	6020      	str	r0, [r4, #0]
 800d2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a8:	81a3      	strh	r3, [r4, #12]
 800d2aa:	9b00      	ldr	r3, [sp, #0]
 800d2ac:	6163      	str	r3, [r4, #20]
 800d2ae:	9b01      	ldr	r3, [sp, #4]
 800d2b0:	6120      	str	r0, [r4, #16]
 800d2b2:	b15b      	cbz	r3, 800d2cc <__smakebuf_r+0x74>
 800d2b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f000 f8d1 	bl	800d460 <_isatty_r>
 800d2be:	b128      	cbz	r0, 800d2cc <__smakebuf_r+0x74>
 800d2c0:	89a3      	ldrh	r3, [r4, #12]
 800d2c2:	f023 0303 	bic.w	r3, r3, #3
 800d2c6:	f043 0301 	orr.w	r3, r3, #1
 800d2ca:	81a3      	strh	r3, [r4, #12]
 800d2cc:	89a0      	ldrh	r0, [r4, #12]
 800d2ce:	4305      	orrs	r5, r0
 800d2d0:	81a5      	strh	r5, [r4, #12]
 800d2d2:	e7cd      	b.n	800d270 <__smakebuf_r+0x18>
 800d2d4:	0800d069 	.word	0x0800d069

0800d2d8 <_malloc_usable_size_r>:
 800d2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2dc:	1f18      	subs	r0, r3, #4
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	bfbc      	itt	lt
 800d2e2:	580b      	ldrlt	r3, [r1, r0]
 800d2e4:	18c0      	addlt	r0, r0, r3
 800d2e6:	4770      	bx	lr

0800d2e8 <_raise_r>:
 800d2e8:	291f      	cmp	r1, #31
 800d2ea:	b538      	push	{r3, r4, r5, lr}
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	460d      	mov	r5, r1
 800d2f0:	d904      	bls.n	800d2fc <_raise_r+0x14>
 800d2f2:	2316      	movs	r3, #22
 800d2f4:	6003      	str	r3, [r0, #0]
 800d2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
 800d2fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d2fe:	b112      	cbz	r2, 800d306 <_raise_r+0x1e>
 800d300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d304:	b94b      	cbnz	r3, 800d31a <_raise_r+0x32>
 800d306:	4620      	mov	r0, r4
 800d308:	f000 f830 	bl	800d36c <_getpid_r>
 800d30c:	462a      	mov	r2, r5
 800d30e:	4601      	mov	r1, r0
 800d310:	4620      	mov	r0, r4
 800d312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d316:	f000 b817 	b.w	800d348 <_kill_r>
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d00a      	beq.n	800d334 <_raise_r+0x4c>
 800d31e:	1c59      	adds	r1, r3, #1
 800d320:	d103      	bne.n	800d32a <_raise_r+0x42>
 800d322:	2316      	movs	r3, #22
 800d324:	6003      	str	r3, [r0, #0]
 800d326:	2001      	movs	r0, #1
 800d328:	e7e7      	b.n	800d2fa <_raise_r+0x12>
 800d32a:	2400      	movs	r4, #0
 800d32c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d330:	4628      	mov	r0, r5
 800d332:	4798      	blx	r3
 800d334:	2000      	movs	r0, #0
 800d336:	e7e0      	b.n	800d2fa <_raise_r+0x12>

0800d338 <raise>:
 800d338:	4b02      	ldr	r3, [pc, #8]	; (800d344 <raise+0xc>)
 800d33a:	4601      	mov	r1, r0
 800d33c:	6818      	ldr	r0, [r3, #0]
 800d33e:	f7ff bfd3 	b.w	800d2e8 <_raise_r>
 800d342:	bf00      	nop
 800d344:	20000014 	.word	0x20000014

0800d348 <_kill_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4d07      	ldr	r5, [pc, #28]	; (800d368 <_kill_r+0x20>)
 800d34c:	2300      	movs	r3, #0
 800d34e:	4604      	mov	r4, r0
 800d350:	4608      	mov	r0, r1
 800d352:	4611      	mov	r1, r2
 800d354:	602b      	str	r3, [r5, #0]
 800d356:	f7f5 fb17 	bl	8002988 <_kill>
 800d35a:	1c43      	adds	r3, r0, #1
 800d35c:	d102      	bne.n	800d364 <_kill_r+0x1c>
 800d35e:	682b      	ldr	r3, [r5, #0]
 800d360:	b103      	cbz	r3, 800d364 <_kill_r+0x1c>
 800d362:	6023      	str	r3, [r4, #0]
 800d364:	bd38      	pop	{r3, r4, r5, pc}
 800d366:	bf00      	nop
 800d368:	2000877c 	.word	0x2000877c

0800d36c <_getpid_r>:
 800d36c:	f7f5 bb04 	b.w	8002978 <_getpid>

0800d370 <__sread>:
 800d370:	b510      	push	{r4, lr}
 800d372:	460c      	mov	r4, r1
 800d374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d378:	f000 f894 	bl	800d4a4 <_read_r>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	bfab      	itete	ge
 800d380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d382:	89a3      	ldrhlt	r3, [r4, #12]
 800d384:	181b      	addge	r3, r3, r0
 800d386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d38a:	bfac      	ite	ge
 800d38c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d38e:	81a3      	strhlt	r3, [r4, #12]
 800d390:	bd10      	pop	{r4, pc}

0800d392 <__swrite>:
 800d392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d396:	461f      	mov	r7, r3
 800d398:	898b      	ldrh	r3, [r1, #12]
 800d39a:	05db      	lsls	r3, r3, #23
 800d39c:	4605      	mov	r5, r0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	4616      	mov	r6, r2
 800d3a2:	d505      	bpl.n	800d3b0 <__swrite+0x1e>
 800d3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f000 f868 	bl	800d480 <_lseek_r>
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	4632      	mov	r2, r6
 800d3be:	463b      	mov	r3, r7
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c6:	f000 b817 	b.w	800d3f8 <_write_r>

0800d3ca <__sseek>:
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d2:	f000 f855 	bl	800d480 <_lseek_r>
 800d3d6:	1c43      	adds	r3, r0, #1
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	bf15      	itete	ne
 800d3dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3e6:	81a3      	strheq	r3, [r4, #12]
 800d3e8:	bf18      	it	ne
 800d3ea:	81a3      	strhne	r3, [r4, #12]
 800d3ec:	bd10      	pop	{r4, pc}

0800d3ee <__sclose>:
 800d3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f2:	f000 b813 	b.w	800d41c <_close_r>
	...

0800d3f8 <_write_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4d07      	ldr	r5, [pc, #28]	; (800d418 <_write_r+0x20>)
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	4608      	mov	r0, r1
 800d400:	4611      	mov	r1, r2
 800d402:	2200      	movs	r2, #0
 800d404:	602a      	str	r2, [r5, #0]
 800d406:	461a      	mov	r2, r3
 800d408:	f7f5 faf5 	bl	80029f6 <_write>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d102      	bne.n	800d416 <_write_r+0x1e>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	b103      	cbz	r3, 800d416 <_write_r+0x1e>
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	bd38      	pop	{r3, r4, r5, pc}
 800d418:	2000877c 	.word	0x2000877c

0800d41c <_close_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4d06      	ldr	r5, [pc, #24]	; (800d438 <_close_r+0x1c>)
 800d420:	2300      	movs	r3, #0
 800d422:	4604      	mov	r4, r0
 800d424:	4608      	mov	r0, r1
 800d426:	602b      	str	r3, [r5, #0]
 800d428:	f7f5 fb01 	bl	8002a2e <_close>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_close_r+0x1a>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_close_r+0x1a>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	2000877c 	.word	0x2000877c

0800d43c <_fstat_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d07      	ldr	r5, [pc, #28]	; (800d45c <_fstat_r+0x20>)
 800d440:	2300      	movs	r3, #0
 800d442:	4604      	mov	r4, r0
 800d444:	4608      	mov	r0, r1
 800d446:	4611      	mov	r1, r2
 800d448:	602b      	str	r3, [r5, #0]
 800d44a:	f7f5 fafc 	bl	8002a46 <_fstat>
 800d44e:	1c43      	adds	r3, r0, #1
 800d450:	d102      	bne.n	800d458 <_fstat_r+0x1c>
 800d452:	682b      	ldr	r3, [r5, #0]
 800d454:	b103      	cbz	r3, 800d458 <_fstat_r+0x1c>
 800d456:	6023      	str	r3, [r4, #0]
 800d458:	bd38      	pop	{r3, r4, r5, pc}
 800d45a:	bf00      	nop
 800d45c:	2000877c 	.word	0x2000877c

0800d460 <_isatty_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d06      	ldr	r5, [pc, #24]	; (800d47c <_isatty_r+0x1c>)
 800d464:	2300      	movs	r3, #0
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	602b      	str	r3, [r5, #0]
 800d46c:	f7f5 fafb 	bl	8002a66 <_isatty>
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	d102      	bne.n	800d47a <_isatty_r+0x1a>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	b103      	cbz	r3, 800d47a <_isatty_r+0x1a>
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	2000877c 	.word	0x2000877c

0800d480 <_lseek_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4d07      	ldr	r5, [pc, #28]	; (800d4a0 <_lseek_r+0x20>)
 800d484:	4604      	mov	r4, r0
 800d486:	4608      	mov	r0, r1
 800d488:	4611      	mov	r1, r2
 800d48a:	2200      	movs	r2, #0
 800d48c:	602a      	str	r2, [r5, #0]
 800d48e:	461a      	mov	r2, r3
 800d490:	f7f5 faf4 	bl	8002a7c <_lseek>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d102      	bne.n	800d49e <_lseek_r+0x1e>
 800d498:	682b      	ldr	r3, [r5, #0]
 800d49a:	b103      	cbz	r3, 800d49e <_lseek_r+0x1e>
 800d49c:	6023      	str	r3, [r4, #0]
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	2000877c 	.word	0x2000877c

0800d4a4 <_read_r>:
 800d4a4:	b538      	push	{r3, r4, r5, lr}
 800d4a6:	4d07      	ldr	r5, [pc, #28]	; (800d4c4 <_read_r+0x20>)
 800d4a8:	4604      	mov	r4, r0
 800d4aa:	4608      	mov	r0, r1
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	602a      	str	r2, [r5, #0]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	f7f5 fa82 	bl	80029bc <_read>
 800d4b8:	1c43      	adds	r3, r0, #1
 800d4ba:	d102      	bne.n	800d4c2 <_read_r+0x1e>
 800d4bc:	682b      	ldr	r3, [r5, #0]
 800d4be:	b103      	cbz	r3, 800d4c2 <_read_r+0x1e>
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	bd38      	pop	{r3, r4, r5, pc}
 800d4c4:	2000877c 	.word	0x2000877c

0800d4c8 <_init>:
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	bf00      	nop
 800d4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ce:	bc08      	pop	{r3}
 800d4d0:	469e      	mov	lr, r3
 800d4d2:	4770      	bx	lr

0800d4d4 <_fini>:
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	bf00      	nop
 800d4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4da:	bc08      	pop	{r3}
 800d4dc:	469e      	mov	lr, r3
 800d4de:	4770      	bx	lr
