
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  08012d80  08012d80  00022d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138dc  080138dc  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080138dc  080138dc  000238dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138e4  080138e4  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138e4  080138e4  000238e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138e8  080138e8  000238e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080138ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094fc  200001f0  08013adc  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200096ec  08013adc  000396ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dd0a  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051f1  00000000  00000000  0005df2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002168  00000000  00000000  00063120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f68  00000000  00000000  00065288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002774a  00000000  00000000  000671f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000239e5  00000000  00000000  0008e93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eedc4  00000000  00000000  000b231f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001a10e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f94  00000000  00000000  001a11b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012d68 	.word	0x08012d68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08012d68 	.word	0x08012d68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <AS7341begin>:
 *    @brief  Sets up the hardware and initializes I2C
 *    @param  i2c_address
 *            The I2C address to be used.
 *    @return True if initialization was successful, otherwise false.
 */
bool AS7341begin(I2C_HandleTypeDef hi2c1){
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	f107 0c08 	add.w	ip, r7, #8
 8000eaa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c = hi2c1;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <AS7341begin+0x2c>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	224c      	movs	r2, #76	; 0x4c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f00f f8b9 	bl	8010030 <memcpy>
	return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec8:	b004      	add	sp, #16
 8000eca:	4770      	bx	lr
 8000ecc:	200092a4 	.word	0x200092a4

08000ed0 <setASTEP>:

bool setASTEP(uint8_t astep_value) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {AS7341_ASTEP_L, astep_value};
 8000eda:	23ca      	movs	r3, #202	; 0xca
 8000edc:	733b      	strb	r3, [r7, #12]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000ee2:	bf00      	nop
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	2172      	movs	r1, #114	; 0x72
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <setASTEP+0x84>)
 8000ef4:	f003 fcf8 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f2      	bne.n	8000ee4 <setASTEP+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000efe:	bf00      	nop
 8000f00:	23c8      	movs	r3, #200	; 0xc8
 8000f02:	220a      	movs	r2, #10
 8000f04:	2172      	movs	r1, #114	; 0x72
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <setASTEP+0x84>)
 8000f08:	f003 fed8 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f6      	bne.n	8000f00 <setASTEP+0x30>

	data[0] = AS7341_ASTEP_H;
 8000f12:	23cb      	movs	r3, #203	; 0xcb
 8000f14:	733b      	strb	r3, [r7, #12]
	data[1] = 0x03;
 8000f16:	2303      	movs	r3, #3
 8000f18:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000f1a:	bf00      	nop
 8000f1c:	f107 020c 	add.w	r2, r7, #12
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2302      	movs	r3, #2
 8000f28:	2172      	movs	r1, #114	; 0x72
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <setASTEP+0x84>)
 8000f2c:	f003 fcdc 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f2      	bne.n	8000f1c <setASTEP+0x4c>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000f36:	bf00      	nop
 8000f38:	23c8      	movs	r3, #200	; 0xc8
 8000f3a:	220a      	movs	r2, #10
 8000f3c:	2172      	movs	r1, #114	; 0x72
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <setASTEP+0x84>)
 8000f40:	f003 febc 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f6      	bne.n	8000f38 <setASTEP+0x68>

	return 1;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200092a4 	.word	0x200092a4

08000f58 <setATIME>:

bool setATIME(uint8_t atime_value) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {AS7341_ATIME, atime_value};
 8000f62:	2381      	movs	r3, #129	; 0x81
 8000f64:	733b      	strb	r3, [r7, #12]
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000f6a:	bf00      	nop
 8000f6c:	f107 020c 	add.w	r2, r7, #12
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2302      	movs	r3, #2
 8000f78:	2172      	movs	r1, #114	; 0x72
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <setATIME+0x4c>)
 8000f7c:	f003 fcb4 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f2      	bne.n	8000f6c <setATIME+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000f86:	bf00      	nop
 8000f88:	23c8      	movs	r3, #200	; 0xc8
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	2172      	movs	r1, #114	; 0x72
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <setATIME+0x4c>)
 8000f90:	f003 fe94 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f6      	bne.n	8000f88 <setATIME+0x30>

	return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200092a4 	.word	0x200092a4

08000fa8 <setGain>:

bool setGain(as7341_gain_t gain_value) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {AS7341_CFG1, gain_value};
 8000fb2:	23aa      	movs	r3, #170	; 0xaa
 8000fb4:	733b      	strb	r3, [r7, #12]
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000fba:	bf00      	nop
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	2172      	movs	r1, #114	; 0x72
 8000fca:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <setGain+0x4c>)
 8000fcc:	f003 fc8c 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f2      	bne.n	8000fbc <setGain+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000fd6:	bf00      	nop
 8000fd8:	23c8      	movs	r3, #200	; 0xc8
 8000fda:	220a      	movs	r2, #10
 8000fdc:	2172      	movs	r1, #114	; 0x72
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <setGain+0x4c>)
 8000fe0:	f003 fe6c 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f6      	bne.n	8000fd8 <setGain+0x30>

	return 1;
 8000fea:	2301      	movs	r3, #1
  // AGAIN bitfield is only[0:4] but the rest is empty
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200092a4 	.word	0x200092a4

08000ff8 <readAllChannels>:
	    break;
	  }
	  return raw / (gain_val * (getATIME() + 1) * (getASTEP() + 1) * 2.78 / 1000);
}

uint16_t readAllChannels(uint16_t *readings_buffer) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_CH0_DATA_L,0x02};
 8001000:	f240 2395 	movw	r3, #661	; 0x295
 8001004:	81bb      	strh	r3, [r7, #12]
	uint16_t buff = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	81fb      	strh	r3, [r7, #14]

    for(int i=0; i<12; i++){
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e007      	b.n	8001020 <readAllChannels+0x28>
        _channel_readings[i]=0;
 8001010:	4a62      	ldr	r2, [pc, #392]	; (800119c <readAllChannels+0x1a4>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2100      	movs	r1, #0
 8001016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0; i<12; i++){
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b0b      	cmp	r3, #11
 8001024:	ddf4      	ble.n	8001010 <readAllChannels+0x18>
    }

	setSMUXLowChannels(true);        // Configure SMUX to read low channels
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fb22 	bl	8001670 <setSMUXLowChannels>
  	enableSpectralMeasurement(true); // Start integration
 800102c:	2001      	movs	r0, #1
 800102e:	f000 f9af 	bl	8001390 <enableSpectralMeasurement>
  	delayForData(0);                 // I'll wait for you for all time
 8001032:	2000      	movs	r0, #0
 8001034:	f000 f8b6 	bl	80011a4 <delayForData>

  	readings_buffer=_channel_readings;
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <readAllChannels+0x1a4>)
 800103a:	607b      	str	r3, [r7, #4]

  	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 800103c:	bf00      	nop
 800103e:	f107 020c 	add.w	r2, r7, #12
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2172      	movs	r1, #114	; 0x72
 800104c:	4854      	ldr	r0, [pc, #336]	; (80011a0 <readAllChannels+0x1a8>)
 800104e:	f003 fc4b 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f2      	bne.n	800103e <readAllChannels+0x46>
  	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001058:	bf00      	nop
 800105a:	23c8      	movs	r3, #200	; 0xc8
 800105c:	220a      	movs	r2, #10
 800105e:	2172      	movs	r1, #114	; 0x72
 8001060:	484f      	ldr	r0, [pc, #316]	; (80011a0 <readAllChannels+0x1a8>)
 8001062:	f003 fe2b 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f6      	bne.n	800105a <readAllChannels+0x62>

  	regwrite[0]=AS7341_CH0_DATA_L;
 800106c:	2395      	movs	r3, #149	; 0x95
 800106e:	733b      	strb	r3, [r7, #12]
  	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001070:	bf00      	nop
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2302      	movs	r3, #2
 800107e:	2172      	movs	r1, #114	; 0x72
 8001080:	4847      	ldr	r0, [pc, #284]	; (80011a0 <readAllChannels+0x1a8>)
 8001082:	f003 fc31 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f2      	bne.n	8001072 <readAllChannels+0x7a>
  	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800108c:	bf00      	nop
 800108e:	23c8      	movs	r3, #200	; 0xc8
 8001090:	220a      	movs	r2, #10
 8001092:	2172      	movs	r1, #114	; 0x72
 8001094:	4842      	ldr	r0, [pc, #264]	; (80011a0 <readAllChannels+0x1a8>)
 8001096:	f003 fe11 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f6      	bne.n	800108e <readAllChannels+0x96>
  	while(HAL_I2C_Master_Receive(&hi2c, 0x72, (uint8_t *)readings_buffer, 12, HAL_MAX_DELAY)!= HAL_OK);
 80010a0:	bf00      	nop
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	230c      	movs	r3, #12
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	2172      	movs	r1, #114	; 0x72
 80010ae:	483c      	ldr	r0, [pc, #240]	; (80011a0 <readAllChannels+0x1a8>)
 80010b0:	f003 fd0e 	bl	8004ad0 <HAL_I2C_Master_Receive>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f3      	bne.n	80010a2 <readAllChannels+0xaa>


  setSMUXLowChannels(false);       // Configure SMUX to read high channels
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 fad8 	bl	8001670 <setSMUXLowChannels>
  enableSpectralMeasurement(true); // Start integration
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 f965 	bl	8001390 <enableSpectralMeasurement>
  delayForData(0);                 // I'll wait for you for all time
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f86c 	bl	80011a4 <delayForData>

  regwrite[0]=AS7341_CH0_DATA_L;
 80010cc:	2395      	movs	r3, #149	; 0x95
 80010ce:	733b      	strb	r3, [r7, #12]
  regwrite[1]=0x02;
 80010d0:	2302      	movs	r3, #2
 80010d2:	737b      	strb	r3, [r7, #13]
  while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 80010d4:	bf00      	nop
 80010d6:	f107 020c 	add.w	r2, r7, #12
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	2172      	movs	r1, #114	; 0x72
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <readAllChannels+0x1a8>)
 80010e6:	f003 fbff 	bl	80048e8 <HAL_I2C_Master_Transmit>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f2      	bne.n	80010d6 <readAllChannels+0xde>
  while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80010f0:	bf00      	nop
 80010f2:	23c8      	movs	r3, #200	; 0xc8
 80010f4:	220a      	movs	r2, #10
 80010f6:	2172      	movs	r1, #114	; 0x72
 80010f8:	4829      	ldr	r0, [pc, #164]	; (80011a0 <readAllChannels+0x1a8>)
 80010fa:	f003 fddf 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f6      	bne.n	80010f2 <readAllChannels+0xfa>

  regwrite[0]=AS7341_CH0_DATA_L;
 8001104:	2395      	movs	r3, #149	; 0x95
 8001106:	733b      	strb	r3, [r7, #12]
  while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001108:	bf00      	nop
 800110a:	f107 020c 	add.w	r2, r7, #12
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2302      	movs	r3, #2
 8001116:	2172      	movs	r1, #114	; 0x72
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <readAllChannels+0x1a8>)
 800111a:	f003 fbe5 	bl	80048e8 <HAL_I2C_Master_Transmit>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f2      	bne.n	800110a <readAllChannels+0x112>
  while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001124:	bf00      	nop
 8001126:	23c8      	movs	r3, #200	; 0xc8
 8001128:	220a      	movs	r2, #10
 800112a:	2172      	movs	r1, #114	; 0x72
 800112c:	481c      	ldr	r0, [pc, #112]	; (80011a0 <readAllChannels+0x1a8>)
 800112e:	f003 fdc5 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f6      	bne.n	8001126 <readAllChannels+0x12e>
  while(HAL_I2C_Master_Receive(&hi2c, 0x72, (uint8_t *)&readings_buffer[6], 12, HAL_MAX_DELAY)!= HAL_OK);
 8001138:	bf00      	nop
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f103 020c 	add.w	r2, r3, #12
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	230c      	movs	r3, #12
 8001148:	2172      	movs	r1, #114	; 0x72
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <readAllChannels+0x1a8>)
 800114c:	f003 fcc0 	bl	8004ad0 <HAL_I2C_Master_Receive>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f1      	bne.n	800113a <readAllChannels+0x142>

	//swap MSB and LSB

  for(int i=0; i<12; i++){
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	e017      	b.n	800118c <readAllChannels+0x194>
	  buff = ((_channel_readings[i] & 0x00FF) << 8) | (_channel_readings[i]>>8);
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <readAllChannels+0x1a4>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <readAllChannels+0x1a4>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29b      	uxth	r3, r3
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21b      	sxth	r3, r3
 800117a:	81fb      	strh	r3, [r7, #14]
	  _channel_readings[i] = buff;
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <readAllChannels+0x1a4>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	89fa      	ldrh	r2, [r7, #14]
 8001182:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(int i=0; i<12; i++){
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	3301      	adds	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b0b      	cmp	r3, #11
 8001190:	dde4      	ble.n	800115c <readAllChannels+0x164>
  }

  return 1;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000928c 	.word	0x2000928c
 80011a0:	200092a4 	.word	0x200092a4

080011a4 <delayForData>:

void delayForData(int waitTime) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_STATUS2};
 80011ac:	23a3      	movs	r3, #163	; 0xa3
 80011ae:	733b      	strb	r3, [r7, #12]
	uint8_t regRead[1]={0};
 80011b0:	2300      	movs	r3, #0
 80011b2:	723b      	strb	r3, [r7, #8]

	while(regRead[0]!=0x40){
 80011b4:	e028      	b.n	8001208 <delayForData+0x64>
		osDelay(100);
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	f007 f836 	bl	8008228 <osDelay>
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80011bc:	bf00      	nop
 80011be:	f107 020c 	add.w	r2, r7, #12
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2172      	movs	r1, #114	; 0x72
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <delayForData+0x74>)
 80011ce:	f003 fb8b 	bl	80048e8 <HAL_I2C_Master_Transmit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f2      	bne.n	80011be <delayForData+0x1a>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80011d8:	bf00      	nop
 80011da:	23c8      	movs	r3, #200	; 0xc8
 80011dc:	220a      	movs	r2, #10
 80011de:	2172      	movs	r1, #114	; 0x72
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <delayForData+0x74>)
 80011e2:	f003 fd6b 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f6      	bne.n	80011da <delayForData+0x36>
		while(HAL_I2C_Master_Receive(&hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 80011ec:	bf00      	nop
 80011ee:	f107 0208 	add.w	r2, r7, #8
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	2172      	movs	r1, #114	; 0x72
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <delayForData+0x74>)
 80011fe:	f003 fc67 	bl	8004ad0 <HAL_I2C_Master_Receive>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f2      	bne.n	80011ee <delayForData+0x4a>
	while(regRead[0]!=0x40){
 8001208:	7a3b      	ldrb	r3, [r7, #8]
 800120a:	2b40      	cmp	r3, #64	; 0x40
 800120c:	d1d3      	bne.n	80011b6 <delayForData+0x12>
		//sprintf(msg, "delayForData = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200092a4 	.word	0x200092a4

0800121c <getChannel>:
	read16bits = ((read[0] & 0x00FF) << 8) | read[0]>>8;
	return read16bits;

}

uint16_t getChannel(as7341_color_channel_t channel) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  return _channel_readings[channel];
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <getChannel+0x20>)
 800122a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000928c 	.word	0x2000928c

08001240 <setup_F1F4_Clear_NIR>:
	  default:
	    return 0;
	  }
}

void setup_F1F4_Clear_NIR() {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  // SMUX Config for F1,F2,F3,F4,NIR,Clear
  writeRegister((0x00), (0x30)); // F3 left set to ADC2
 8001244:	2130      	movs	r1, #48	; 0x30
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f9e6 	bl	8001618 <writeRegister>
  writeRegister((0x01), (0x01)); // F1 left set to ADC0
 800124c:	2101      	movs	r1, #1
 800124e:	2001      	movs	r0, #1
 8001250:	f000 f9e2 	bl	8001618 <writeRegister>
  writeRegister((0x02), (0x00)); // Reserved or disabled
 8001254:	2100      	movs	r1, #0
 8001256:	2002      	movs	r0, #2
 8001258:	f000 f9de 	bl	8001618 <writeRegister>
  writeRegister((0x03), (0x00)); // F8 left disabled
 800125c:	2100      	movs	r1, #0
 800125e:	2003      	movs	r0, #3
 8001260:	f000 f9da 	bl	8001618 <writeRegister>
  writeRegister((0x04), (0x00)); // F6 left disabled
 8001264:	2100      	movs	r1, #0
 8001266:	2004      	movs	r0, #4
 8001268:	f000 f9d6 	bl	8001618 <writeRegister>
  writeRegister((0x05), (0x42)); // F4 left connected to ADC3/f2 left connected to ADC1
 800126c:	2142      	movs	r1, #66	; 0x42
 800126e:	2005      	movs	r0, #5
 8001270:	f000 f9d2 	bl	8001618 <writeRegister>
  writeRegister((0x06), (0x00)); // F5 left disbled
 8001274:	2100      	movs	r1, #0
 8001276:	2006      	movs	r0, #6
 8001278:	f000 f9ce 	bl	8001618 <writeRegister>
  writeRegister((0x07), (0x00)); // F7 left disbled
 800127c:	2100      	movs	r1, #0
 800127e:	2007      	movs	r0, #7
 8001280:	f000 f9ca 	bl	8001618 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR connected to ADC4
 8001284:	2150      	movs	r1, #80	; 0x50
 8001286:	2008      	movs	r0, #8
 8001288:	f000 f9c6 	bl	8001618 <writeRegister>
  writeRegister((0x09), (0x00)); // F5 right disabled
 800128c:	2100      	movs	r1, #0
 800128e:	2009      	movs	r0, #9
 8001290:	f000 f9c2 	bl	8001618 <writeRegister>
  writeRegister((0x0A), (0x00)); // F7 right disabled
 8001294:	2100      	movs	r1, #0
 8001296:	200a      	movs	r0, #10
 8001298:	f000 f9be 	bl	8001618 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 800129c:	2100      	movs	r1, #0
 800129e:	200b      	movs	r0, #11
 80012a0:	f000 f9ba 	bl	8001618 <writeRegister>
  writeRegister((0x0C), (0x20)); // F2 right connected to ADC1
 80012a4:	2120      	movs	r1, #32
 80012a6:	200c      	movs	r0, #12
 80012a8:	f000 f9b6 	bl	8001618 <writeRegister>
  writeRegister((0x0D), (0x04)); // F4 right connected to ADC3
 80012ac:	2104      	movs	r1, #4
 80012ae:	200d      	movs	r0, #13
 80012b0:	f000 f9b2 	bl	8001618 <writeRegister>
  writeRegister((0x0E), (0x00)); // F6/F8 right disabled
 80012b4:	2100      	movs	r1, #0
 80012b6:	200e      	movs	r0, #14
 80012b8:	f000 f9ae 	bl	8001618 <writeRegister>
  writeRegister((0x0F), (0x30)); // F3 right connected to AD2
 80012bc:	2130      	movs	r1, #48	; 0x30
 80012be:	200f      	movs	r0, #15
 80012c0:	f000 f9aa 	bl	8001618 <writeRegister>
  writeRegister((0x10), (0x01)); // F1 right connected to AD0
 80012c4:	2101      	movs	r1, #1
 80012c6:	2010      	movs	r0, #16
 80012c8:	f000 f9a6 	bl	8001618 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 80012cc:	2150      	movs	r1, #80	; 0x50
 80012ce:	2011      	movs	r0, #17
 80012d0:	f000 f9a2 	bl	8001618 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 80012d4:	2100      	movs	r1, #0
 80012d6:	2012      	movs	r0, #18
 80012d8:	f000 f99e 	bl	8001618 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 80012dc:	2106      	movs	r1, #6
 80012de:	2013      	movs	r0, #19
 80012e0:	f000 f99a 	bl	8001618 <writeRegister>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <setup_F5F8_Clear_NIR>:

void setup_F5F8_Clear_NIR() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  // SMUX Config for F5,F6,F7,F8,NIR,Clear
  writeRegister((0x00), (0x00)); // F3 left disable
 80012ec:	2100      	movs	r1, #0
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f992 	bl	8001618 <writeRegister>
  writeRegister((0x01), (0x00)); // F1 left disable
 80012f4:	2100      	movs	r1, #0
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 f98e 	bl	8001618 <writeRegister>
  writeRegister((0x02), (0x00)); // reserved/disable
 80012fc:	2100      	movs	r1, #0
 80012fe:	2002      	movs	r0, #2
 8001300:	f000 f98a 	bl	8001618 <writeRegister>
  writeRegister((0x03), (0x40)); // F8 left connected to ADC3
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	2003      	movs	r0, #3
 8001308:	f000 f986 	bl	8001618 <writeRegister>
  writeRegister((0x04), (0x02)); // F6 left connected to ADC1
 800130c:	2102      	movs	r1, #2
 800130e:	2004      	movs	r0, #4
 8001310:	f000 f982 	bl	8001618 <writeRegister>
  writeRegister((0x05), (0x00)); // F4/ F2 disabled
 8001314:	2100      	movs	r1, #0
 8001316:	2005      	movs	r0, #5
 8001318:	f000 f97e 	bl	8001618 <writeRegister>
  writeRegister((0x06), (0x10)); // F5 left connected to ADC0
 800131c:	2110      	movs	r1, #16
 800131e:	2006      	movs	r0, #6
 8001320:	f000 f97a 	bl	8001618 <writeRegister>
  writeRegister((0x07), (0x03)); // F7 left connected to ADC2
 8001324:	2103      	movs	r1, #3
 8001326:	2007      	movs	r0, #7
 8001328:	f000 f976 	bl	8001618 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR Connected to ADC4
 800132c:	2150      	movs	r1, #80	; 0x50
 800132e:	2008      	movs	r0, #8
 8001330:	f000 f972 	bl	8001618 <writeRegister>
  writeRegister((0x09), (0x10)); // F5 right connected to ADC0
 8001334:	2110      	movs	r1, #16
 8001336:	2009      	movs	r0, #9
 8001338:	f000 f96e 	bl	8001618 <writeRegister>
  writeRegister((0x0A), (0x03)); // F7 right connected to ADC2
 800133c:	2103      	movs	r1, #3
 800133e:	200a      	movs	r0, #10
 8001340:	f000 f96a 	bl	8001618 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 8001344:	2100      	movs	r1, #0
 8001346:	200b      	movs	r0, #11
 8001348:	f000 f966 	bl	8001618 <writeRegister>
  writeRegister((0x0C), (0x00)); // F2 right disabled
 800134c:	2100      	movs	r1, #0
 800134e:	200c      	movs	r0, #12
 8001350:	f000 f962 	bl	8001618 <writeRegister>
  writeRegister((0x0D), (0x00)); // F4 right disabled
 8001354:	2100      	movs	r1, #0
 8001356:	200d      	movs	r0, #13
 8001358:	f000 f95e 	bl	8001618 <writeRegister>
  writeRegister((0x0E), (0x24)); // F8 right connected to ADC2/ F6 right connected to ADC1
 800135c:	2124      	movs	r1, #36	; 0x24
 800135e:	200e      	movs	r0, #14
 8001360:	f000 f95a 	bl	8001618 <writeRegister>
  writeRegister((0x0F), (0x00)); // F3 right disabled
 8001364:	2100      	movs	r1, #0
 8001366:	200f      	movs	r0, #15
 8001368:	f000 f956 	bl	8001618 <writeRegister>
  writeRegister((0x10), (0x00)); // F1 right disabled
 800136c:	2100      	movs	r1, #0
 800136e:	2010      	movs	r0, #16
 8001370:	f000 f952 	bl	8001618 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 8001374:	2150      	movs	r1, #80	; 0x50
 8001376:	2011      	movs	r0, #17
 8001378:	f000 f94e 	bl	8001618 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 800137c:	2100      	movs	r1, #0
 800137e:	2012      	movs	r0, #18
 8001380:	f000 f94a 	bl	8001618 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 8001384:	2106      	movs	r1, #6
 8001386:	2013      	movs	r0, #19
 8001388:	f000 f946 	bl	8001618 <writeRegister>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <enableSpectralMeasurement>:
	uint8_t regWrite[]={AS7341_ENABLE,0x01}; //PON to 1
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
}

bool enableSpectralMeasurement(bool enable_measurement) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_ENABLE,0x01};
 800139a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800139e:	81bb      	strh	r3, [r7, #12]
	//uint8_t regRead[1]={0};

	if(enable_measurement==0){
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f083 0301 	eor.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01a      	beq.n	80013e2 <enableSpectralMeasurement+0x52>
		regwrite[1]=0x01;
 80013ac:	2301      	movs	r3, #1
 80013ae:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80013b0:	bf00      	nop
 80013b2:	f107 020c 	add.w	r2, r7, #12
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2302      	movs	r3, #2
 80013be:	2172      	movs	r1, #114	; 0x72
 80013c0:	4817      	ldr	r0, [pc, #92]	; (8001420 <enableSpectralMeasurement+0x90>)
 80013c2:	f003 fa91 	bl	80048e8 <HAL_I2C_Master_Transmit>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f2      	bne.n	80013b2 <enableSpectralMeasurement+0x22>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80013cc:	bf00      	nop
 80013ce:	23c8      	movs	r3, #200	; 0xc8
 80013d0:	220a      	movs	r2, #10
 80013d2:	2172      	movs	r1, #114	; 0x72
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <enableSpectralMeasurement+0x90>)
 80013d6:	f003 fc71 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f6      	bne.n	80013ce <enableSpectralMeasurement+0x3e>
 80013e0:	e019      	b.n	8001416 <enableSpectralMeasurement+0x86>
	}
	else{
		regwrite[1]=0x03;
 80013e2:	2303      	movs	r3, #3
 80013e4:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80013e6:	bf00      	nop
 80013e8:	f107 020c 	add.w	r2, r7, #12
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2302      	movs	r3, #2
 80013f4:	2172      	movs	r1, #114	; 0x72
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <enableSpectralMeasurement+0x90>)
 80013f8:	f003 fa76 	bl	80048e8 <HAL_I2C_Master_Transmit>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f2      	bne.n	80013e8 <enableSpectralMeasurement+0x58>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001402:	bf00      	nop
 8001404:	23c8      	movs	r3, #200	; 0xc8
 8001406:	220a      	movs	r2, #10
 8001408:	2172      	movs	r1, #114	; 0x72
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <enableSpectralMeasurement+0x90>)
 800140c:	f003 fc56 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f6      	bne.n	8001404 <enableSpectralMeasurement+0x74>
	}
  return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200092a4 	.word	0x200092a4

08001424 <AS7341init>:

/*!  @brief Initializer for post i2c/spi init
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool AS7341init(int32_t sensor_id){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af02      	add	r7, sp, #8
 800142a:	6078      	str	r0, [r7, #4]
    //POWER enable true
    uint8_t regWrite[]={AS7341_ENABLE,0x01}; //PON to 1
 800142c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001430:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
 8001432:	bf00      	nop
 8001434:	f107 020c 	add.w	r2, r7, #12
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2302      	movs	r3, #2
 8001440:	2172      	movs	r1, #114	; 0x72
 8001442:	480a      	ldr	r0, [pc, #40]	; (800146c <AS7341init+0x48>)
 8001444:	f003 fa50 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f2      	bne.n	8001434 <AS7341init+0x10>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800144e:	bf00      	nop
 8001450:	23c8      	movs	r3, #200	; 0xc8
 8001452:	220a      	movs	r2, #10
 8001454:	2172      	movs	r1, #114	; 0x72
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <AS7341init+0x48>)
 8001458:	f003 fc30 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f6      	bne.n	8001450 <AS7341init+0x2c>
	return 1;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200092a4 	.word	0x200092a4

08001470 <enableSMUX>:

bool enableSMUX() {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af02      	add	r7, sp, #8
	uint8_t regwrite[]={AS7341_ENABLE,0x19};
 8001476:	f44f 53cc 	mov.w	r3, #6528	; 0x1980
 800147a:	80bb      	strh	r3, [r7, #4]
	uint8_t regRead[1]={0};
 800147c:	2300      	movs	r3, #0
 800147e:	703b      	strb	r3, [r7, #0]

	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001480:	bf00      	nop
 8001482:	1d3a      	adds	r2, r7, #4
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2302      	movs	r3, #2
 800148c:	2172      	movs	r1, #114	; 0x72
 800148e:	4820      	ldr	r0, [pc, #128]	; (8001510 <enableSMUX+0xa0>)
 8001490:	f003 fa2a 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f3      	bne.n	8001482 <enableSMUX+0x12>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800149a:	bf00      	nop
 800149c:	23c8      	movs	r3, #200	; 0xc8
 800149e:	220a      	movs	r2, #10
 80014a0:	2172      	movs	r1, #114	; 0x72
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <enableSMUX+0xa0>)
 80014a4:	f003 fc0a 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f6      	bne.n	800149c <enableSMUX+0x2c>


	regwrite[0]=AS7341_ENABLE;//0xA9 to AS7341_ENABLE
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	713b      	strb	r3, [r7, #4]
	regRead[0]=0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	703b      	strb	r3, [r7, #0]
	while(regRead[0]==0){
 80014b6:	e023      	b.n	8001500 <enableSMUX+0x90>
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 80014b8:	bf00      	nop
 80014ba:	1d3a      	adds	r2, r7, #4
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	2172      	movs	r1, #114	; 0x72
 80014c6:	4812      	ldr	r0, [pc, #72]	; (8001510 <enableSMUX+0xa0>)
 80014c8:	f003 fa0e 	bl	80048e8 <HAL_I2C_Master_Transmit>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f3      	bne.n	80014ba <enableSMUX+0x4a>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80014d2:	bf00      	nop
 80014d4:	23c8      	movs	r3, #200	; 0xc8
 80014d6:	220a      	movs	r2, #10
 80014d8:	2172      	movs	r1, #114	; 0x72
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <enableSMUX+0xa0>)
 80014dc:	f003 fbee 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f6      	bne.n	80014d4 <enableSMUX+0x64>
		while(HAL_I2C_Master_Receive(&hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 80014e6:	bf00      	nop
 80014e8:	463a      	mov	r2, r7
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	2172      	movs	r1, #114	; 0x72
 80014f4:	4806      	ldr	r0, [pc, #24]	; (8001510 <enableSMUX+0xa0>)
 80014f6:	f003 faeb 	bl	8004ad0 <HAL_I2C_Master_Receive>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f3      	bne.n	80014e8 <enableSMUX+0x78>
	while(regRead[0]==0){
 8001500:	783b      	ldrb	r3, [r7, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0d8      	beq.n	80014b8 <enableSMUX+0x48>

		//sprintf(msg, "enableSMUX = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}

    return 1;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200092a4 	.word	0x200092a4

08001514 <enableFlickerDetection>:

bool enableFlickerDetection(bool enable_fd){
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af02      	add	r7, sp, #8
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	uint8_t regWrite[]={AS7341_ENABLE,0x40}; //PON to 1
 800151e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001522:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
 8001524:	bf00      	nop
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2302      	movs	r3, #2
 8001532:	2172      	movs	r1, #114	; 0x72
 8001534:	480a      	ldr	r0, [pc, #40]	; (8001560 <enableFlickerDetection+0x4c>)
 8001536:	f003 f9d7 	bl	80048e8 <HAL_I2C_Master_Transmit>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f2      	bne.n	8001526 <enableFlickerDetection+0x12>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001540:	bf00      	nop
 8001542:	23c8      	movs	r3, #200	; 0xc8
 8001544:	220a      	movs	r2, #10
 8001546:	2172      	movs	r1, #114	; 0x72
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <enableFlickerDetection+0x4c>)
 800154a:	f003 fbb7 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f6      	bne.n	8001542 <enableFlickerDetection+0x2e>
	return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200092a4 	.word	0x200092a4

08001564 <getFlickerDetectStatus>:
/**
 * @brief Returns the flicker detection status
 *
 * @return int8_t
 */
int8_t getFlickerDetectStatus(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af02      	add	r7, sp, #8
	uint8_t read[1];
	uint8_t regCh[] = {AS7341_FD_STATUS};
 800156a:	23db      	movs	r3, #219	; 0xdb
 800156c:	703b      	strb	r3, [r7, #0]

	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regCh, 2, HAL_MAX_DELAY) != HAL_OK);
 800156e:	bf00      	nop
 8001570:	463a      	mov	r2, r7
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2302      	movs	r3, #2
 800157a:	2172      	movs	r1, #114	; 0x72
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <getFlickerDetectStatus+0x60>)
 800157e:	f003 f9b3 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f3      	bne.n	8001570 <getFlickerDetectStatus+0xc>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001588:	bf00      	nop
 800158a:	23c8      	movs	r3, #200	; 0xc8
 800158c:	220a      	movs	r2, #10
 800158e:	2172      	movs	r1, #114	; 0x72
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <getFlickerDetectStatus+0x60>)
 8001592:	f003 fb93 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f6      	bne.n	800158a <getFlickerDetectStatus+0x26>
	while(HAL_I2C_Master_Receive(&hi2c, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 800159c:	bf00      	nop
 800159e:	1d3a      	adds	r2, r7, #4
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	2172      	movs	r1, #114	; 0x72
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <getFlickerDetectStatus+0x60>)
 80015ac:	f003 fa90 	bl	8004ad0 <HAL_I2C_Master_Receive>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f3      	bne.n	800159e <getFlickerDetectStatus+0x3a>

	return read[0];
 80015b6:	793b      	ldrb	r3, [r7, #4]
 80015b8:	b25b      	sxtb	r3, r3
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200092a4 	.word	0x200092a4

080015c8 <setSMUXCommand>:

bool setSMUXCommand(as7341_smux_cmd_t command) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_CFG6,0x10}; //should be command << to something
 80015d2:	f241 03af 	movw	r3, #4271	; 0x10af
 80015d6:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80015d8:	bf00      	nop
 80015da:	f107 020c 	add.w	r2, r7, #12
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2302      	movs	r3, #2
 80015e6:	2172      	movs	r1, #114	; 0x72
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <setSMUXCommand+0x4c>)
 80015ea:	f003 f97d 	bl	80048e8 <HAL_I2C_Master_Transmit>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f2      	bne.n	80015da <setSMUXCommand+0x12>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80015f4:	bf00      	nop
 80015f6:	23c8      	movs	r3, #200	; 0xc8
 80015f8:	220a      	movs	r2, #10
 80015fa:	2172      	movs	r1, #114	; 0x72
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <setSMUXCommand+0x4c>)
 80015fe:	f003 fb5d 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f6      	bne.n	80015f6 <setSMUXCommand+0x2e>
	return 1;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200092a4 	.word	0x200092a4

08001618 <writeRegister>:

void writeRegister(uint8_t addr, uint8_t val) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af02      	add	r7, sp, #8
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {addr, val};
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	733b      	strb	r3, [r7, #12]
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8001630:	bf00      	nop
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2302      	movs	r3, #2
 800163e:	2172      	movs	r1, #114	; 0x72
 8001640:	480a      	ldr	r0, [pc, #40]	; (800166c <writeRegister+0x54>)
 8001642:	f003 f951 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f2      	bne.n	8001632 <writeRegister+0x1a>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800164c:	bf00      	nop
 800164e:	23c8      	movs	r3, #200	; 0xc8
 8001650:	220a      	movs	r2, #10
 8001652:	2172      	movs	r1, #114	; 0x72
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <writeRegister+0x54>)
 8001656:	f003 fb31 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f6      	bne.n	800164e <writeRegister+0x36>

}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200092a4 	.word	0x200092a4

08001670 <setSMUXLowChannels>:


void setSMUXLowChannels(bool f1_f4) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  enableSpectralMeasurement(false);
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fe88 	bl	8001390 <enableSpectralMeasurement>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
 8001680:	2002      	movs	r0, #2
 8001682:	f7ff ffa1 	bl	80015c8 <setSMUXCommand>
  if (f1_f4) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <setSMUXLowChannels+0x22>
    setup_F1F4_Clear_NIR();
 800168c:	f7ff fdd8 	bl	8001240 <setup_F1F4_Clear_NIR>
 8001690:	e001      	b.n	8001696 <setSMUXLowChannels+0x26>
  } else {
    setup_F5F8_Clear_NIR();
 8001692:	f7ff fe29 	bl	80012e8 <setup_F5F8_Clear_NIR>
  }
  enableSMUX(&hi2c);
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <setSMUXLowChannels+0x34>)
 8001698:	f7ff feea 	bl	8001470 <enableSMUX>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200092a4 	.word	0x200092a4

080016a8 <getThermocoupleTemp>:
}

/*----------------------------- Sensor Measurements ---------------------*/

uint8_t getThermocoupleTemp(bool units)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  int16_t raw = readDoubleRegister(HOT_JUNC_TEMP);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f822 	bl	80016fc <readDoubleRegister>
 80016b8:	4603      	mov	r3, r0
 80016ba:	81fb      	strh	r3, [r7, #14]
  uint8_t LSB = raw & 0x00FF;
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	737b      	strb	r3, [r7, #13]
  uint8_t MSB = raw>>8;
 80016c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016c4:	121b      	asrs	r3, r3, #8
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	733b      	strb	r3, [r7, #12]

  if((MSB & 0x80) == 0x80){
 80016ca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da08      	bge.n	80016e4 <getThermocoupleTemp+0x3c>
	  return(((MSB*16)+(LSB/16))-4096);
 80016d2:	7b3b      	ldrb	r3, [r7, #12]
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	7b7b      	ldrb	r3, [r7, #13]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4413      	add	r3, r2
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	e007      	b.n	80016f4 <getThermocoupleTemp+0x4c>
  }
  else{
	  return(((MSB*16)+(LSB/16)));
 80016e4:	7b3b      	ldrb	r3, [r7, #12]
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	b2db      	uxtb	r3, r3
  }
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <readDoubleRegister>:
  return read8bits;

}

uint16_t readDoubleRegister(MCP9600_Register reg)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  //Attempt to read the register until we exit with no error code
  //This attempts to fix the bug where clock stretching sometimes failes, as
  //described in the MCP9600 eratta
	uint8_t read[2]={0,0};
 8001706:	2300      	movs	r3, #0
 8001708:	81bb      	strh	r3, [r7, #12]
	uint16_t read16bits = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	81fb      	strh	r3, [r7, #14]

	while(HAL_I2C_Master_Transmit(&hi2c, 0xCE, &reg, 1, HAL_MAX_DELAY) != HAL_OK);
 800170e:	bf00      	nop
 8001710:	1dfa      	adds	r2, r7, #7
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	21ce      	movs	r1, #206	; 0xce
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <readDoubleRegister+0x78>)
 800171e:	f003 f8e3 	bl	80048e8 <HAL_I2C_Master_Transmit>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f3      	bne.n	8001710 <readDoubleRegister+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0xCE,10,200)!=HAL_OK);
 8001728:	bf00      	nop
 800172a:	23c8      	movs	r3, #200	; 0xc8
 800172c:	220a      	movs	r2, #10
 800172e:	21ce      	movs	r1, #206	; 0xce
 8001730:	4810      	ldr	r0, [pc, #64]	; (8001774 <readDoubleRegister+0x78>)
 8001732:	f003 fac3 	bl	8004cbc <HAL_I2C_IsDeviceReady>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f6      	bne.n	800172a <readDoubleRegister+0x2e>
	while(HAL_I2C_Master_Receive(&hi2c, 0XCF, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 800173c:	bf00      	nop
 800173e:	f107 020c 	add.w	r2, r7, #12
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2302      	movs	r3, #2
 800174a:	21cf      	movs	r1, #207	; 0xcf
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <readDoubleRegister+0x78>)
 800174e:	f003 f9bf 	bl	8004ad0 <HAL_I2C_Master_Receive>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f2      	bne.n	800173e <readDoubleRegister+0x42>
	read16bits = (read[0] << 8) | read[1];
 8001758:	7b3b      	ldrb	r3, [r7, #12]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	7b7b      	ldrb	r3, [r7, #13]
 8001760:	b21b      	sxth	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b21b      	sxth	r3, r3
 8001766:	81fb      	strh	r3, [r7, #14]
	return read16bits;
 8001768:	89fb      	ldrh	r3, [r7, #14]


}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200092a4 	.word	0x200092a4

08001778 <PCA9685begin>:
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <PCA9685.h>

bool PCA9685begin(I2C_HandleTypeDef hi2c1, uint8_t prescale){
 8001778:	b084      	sub	sp, #16
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
 800177e:	f107 0c08 	add.w	ip, r7, #8
 8001782:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c3=hi2c1;
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <PCA9685begin+0x2c>)
 8001788:	4618      	mov	r0, r3
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	224c      	movs	r2, #76	; 0x4c
 8001790:	4619      	mov	r1, r3
 8001792:	f00e fc4d 	bl	8010030 <memcpy>
}
 8001796:	bf00      	nop
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017a0:	b004      	add	sp, #16
 80017a2:	4770      	bx	lr
 80017a4:	200092f0 	.word	0x200092f0

080017a8 <pca9685_init>:
	//HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(uint8_t address)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]

 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 80017b2:	2303      	movs	r3, #3
 80017b4:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c3, address, PCA9685_MODE1, 1, 1);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	b299      	uxth	r1, r3
 80017ba:	2301      	movs	r3, #1
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2301      	movs	r3, #1
 80017c0:	2200      	movs	r2, #0
 80017c2:	4825      	ldr	r0, [pc, #148]	; (8001858 <pca9685_init+0xb0>)
 80017c4:	f003 f890 	bl	80048e8 <HAL_I2C_Master_Transmit>
 uint8_t oldmode = 0x00; // hardcoded
 80017c8:	2300      	movs	r3, #0
 80017ca:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 80017cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017d0:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 80017de:	2300      	movs	r3, #0
 80017e0:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 80017e2:	7b7b      	ldrb	r3, [r7, #13]
 80017e4:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	b299      	uxth	r1, r3
 80017ea:	f107 0208 	add.w	r2, r7, #8
 80017ee:	2301      	movs	r3, #1
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2302      	movs	r3, #2
 80017f4:	4818      	ldr	r0, [pc, #96]	; (8001858 <pca9685_init+0xb0>)
 80017f6:	f003 f877 	bl	80048e8 <HAL_I2C_Master_Transmit>
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	b299      	uxth	r1, r3
 8001802:	f107 0208 	add.w	r2, r7, #8
 8001806:	2301      	movs	r3, #1
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2302      	movs	r3, #2
 800180c:	4812      	ldr	r0, [pc, #72]	; (8001858 <pca9685_init+0xb0>)
 800180e:	f003 f86b 	bl	80048e8 <HAL_I2C_Master_Transmit>
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	b299      	uxth	r1, r3
 800181a:	f107 0208 	add.w	r2, r7, #8
 800181e:	2301      	movs	r3, #1
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2302      	movs	r3, #2
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <pca9685_init+0xb0>)
 8001826:	f003 f85f 	bl	80048e8 <HAL_I2C_Master_Transmit>
 osDelay(5);
 800182a:	2005      	movs	r0, #5
 800182c:	f006 fcfc 	bl	8008228 <osDelay>
 initStruct[1] = (oldmode | 0xA1);
 8001830:	7bbb      	ldrb	r3, [r7, #14]
 8001832:	f063 035e 	orn	r3, r3, #94	; 0x5e
 8001836:	b2db      	uxtb	r3, r3
 8001838:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	b299      	uxth	r1, r3
 800183e:	f107 0208 	add.w	r2, r7, #8
 8001842:	2301      	movs	r3, #1
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2302      	movs	r3, #2
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <pca9685_init+0xb0>)
 800184a:	f003 f84d 	bl	80048e8 <HAL_I2C_Master_Transmit>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200092f0 	.word	0x200092f0

0800185c <pca9685_mult_pwm>:
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
	HAL_I2C_Master_Transmit(&hi2c3, address, outputBuffer, sizeof(outputBuffer), 1);
}

void pca9685_mult_pwm(uint8_t address, uint16_t num, uint16_t on, uint16_t off)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b08b      	sub	sp, #44	; 0x2c
 8001860:	af02      	add	r7, sp, #8
 8001862:	4604      	mov	r4, r0
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4623      	mov	r3, r4
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	4603      	mov	r3, r0
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]
 8001876:	4613      	mov	r3, r2
 8001878:	803b      	strh	r3, [r7, #0]
	int i, iter;

	for (i=1, iter=1; i<65535; i<<=1, iter++)
 800187a:	2301      	movs	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	e047      	b.n	8001914 <pca9685_mult_pwm+0xb8>
	{
		if (num & i)
 8001884:	88ba      	ldrh	r2, [r7, #4]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d022      	beq.n	80018d4 <pca9685_mult_pwm+0x78>
		{
			uint8_t outputBuffer[] = {0x06 + 4*((iter)-1), on, (on >> 8), off, (off >> 8)};
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	3b01      	subs	r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	b2db      	uxtb	r3, r3
 8001898:	3306      	adds	r3, #6
 800189a:	b2db      	uxtb	r3, r3
 800189c:	743b      	strb	r3, [r7, #16]
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	747b      	strb	r3, [r7, #17]
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	74bb      	strb	r3, [r7, #18]
 80018ae:	883b      	ldrh	r3, [r7, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	74fb      	strb	r3, [r7, #19]
 80018b4:	883b      	ldrh	r3, [r7, #0]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	753b      	strb	r3, [r7, #20]
			HAL_I2C_Master_Transmit(&hi2c3, address, outputBuffer, sizeof(outputBuffer), 1);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	b299      	uxth	r1, r3
 80018c2:	f107 0210 	add.w	r2, r7, #16
 80018c6:	2301      	movs	r3, #1
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2305      	movs	r3, #5
 80018cc:	4816      	ldr	r0, [pc, #88]	; (8001928 <pca9685_mult_pwm+0xcc>)
 80018ce:	f003 f80b 	bl	80048e8 <HAL_I2C_Master_Transmit>
 80018d2:	e019      	b.n	8001908 <pca9685_mult_pwm+0xac>
		}
		else
		{
			uint8_t outputBuffer[] = {0x06 + 4*((iter)-1), 0, (0 >> 8), 4096, (4096 >> 8)};
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	3306      	adds	r3, #6
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	723b      	strb	r3, [r7, #8]
 80018e4:	2300      	movs	r3, #0
 80018e6:	727b      	strb	r3, [r7, #9]
 80018e8:	2300      	movs	r3, #0
 80018ea:	72bb      	strb	r3, [r7, #10]
 80018ec:	2300      	movs	r3, #0
 80018ee:	72fb      	strb	r3, [r7, #11]
 80018f0:	2310      	movs	r3, #16
 80018f2:	733b      	strb	r3, [r7, #12]
			HAL_I2C_Master_Transmit(&hi2c3, address, outputBuffer, sizeof(outputBuffer), 1);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	b299      	uxth	r1, r3
 80018f8:	f107 0208 	add.w	r2, r7, #8
 80018fc:	2301      	movs	r3, #1
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2305      	movs	r3, #5
 8001902:	4809      	ldr	r0, [pc, #36]	; (8001928 <pca9685_mult_pwm+0xcc>)
 8001904:	f002 fff0 	bl	80048e8 <HAL_I2C_Master_Transmit>
	for (i=1, iter=1; i<65535; i<<=1, iter++)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	3301      	adds	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800191a:	4293      	cmp	r3, r2
 800191c:	ddb2      	ble.n	8001884 <pca9685_mult_pwm+0x28>
	{
		uint8_t outputBuffer[] = {0x06 + 4*((num & 0b00000010)-1), on, (on >> 8), off, (off >> 8)};
		HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
	}
	*/
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	3724      	adds	r7, #36	; 0x24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd90      	pop	{r4, r7, pc}
 8001928:	200092f0 	.word	0x200092f0

0800192c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	UNSIGNED8	emcyData[5] = { 1, 2, 3, 4, 5 };
 8001932:	4a6d      	ldr	r2, [pc, #436]	; (8001ae8 <main+0x1bc>)
 8001934:	463b      	mov	r3, r7
 8001936:	e892 0003 	ldmia.w	r2, {r0, r1}
 800193a:	6018      	str	r0, [r3, #0]
 800193c:	3304      	adds	r3, #4
 800193e:	7019      	strb	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001940:	f001 fb15 	bl	8002f6e <HAL_Init>
  //uint8_t I2C_address = 0x80;
  //pca9685_init(&hi2c3, I2C_address);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001944:	f000 f900 	bl	8001b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001948:	f000 fc30 	bl	80021ac <MX_GPIO_Init>
  MX_DMA_Init();
 800194c:	f000 fc08 	bl	8002160 <MX_DMA_Init>
  MX_I2C1_Init();
 8001950:	f000 fa2e 	bl	8001db0 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001954:	f000 f9f6 	bl	8001d44 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001958:	f000 faa6 	bl	8001ea8 <MX_TIM1_Init>
  MX_ADC1_Init();
 800195c:	f000 f98e 	bl	8001c7c <MX_ADC1_Init>
  MX_TIM15_Init();
 8001960:	f000 fb4a 	bl	8001ff8 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001964:	f000 fbcc 	bl	8002100 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001968:	f000 fa60 	bl	8001e2c <MX_I2C3_Init>
  /* In this evaluation example
  	 * the hardware configuration is generated by the CubeIDE.
  	 * Normally this is done by codrvHardwareInit() */
  	//codrvHardwareInit();

  	if (codrvCanInit(250u) != RET_OK)  {
 800196c:	20fa      	movs	r0, #250	; 0xfa
 800196e:	f009 f89f 	bl	800aab0 <codrvCanInit>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <main+0x52>
  		errorHandler(1);
 8001978:	2001      	movs	r0, #1
 800197a:	f000 fd3b 	bl	80023f4 <errorHandler>
  	}

  	/* setup the systick interrupt intervall to provide a precise time for CANopen.
  	 * make sure HAL_SYSTICK_IRQHandler() is calles in the SysTick_Handler */
  	if (codrvTimerSetup(CO_TIMER_INTERVAL) != RET_OK)  {
 800197e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001982:	f009 f9d7 	bl	800ad34 <codrvTimerSetup>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <main+0x66>
  		errorHandler(2);
 800198c:	2002      	movs	r0, #2
 800198e:	f000 fd31 	bl	80023f4 <errorHandler>
  	}

  	/* CANopen Initialization */
  	if (coCanOpenStackInit(NULL) != RET_OK)  {
 8001992:	2000      	movs	r0, #0
 8001994:	f006 fa6a 	bl	8007e6c <coCanOpenStackInit>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <main+0x78>
  		printf("error init library\n");
  		errorHandler(1);
 800199e:	2001      	movs	r0, #1
 80019a0:	f000 fd28 	bl	80023f4 <errorHandler>
  	}

  	/* register indication functions */
  	if (coEventRegister_NMT(nmtInd) != RET_OK)  {
 80019a4:	4851      	ldr	r0, [pc, #324]	; (8001aec <main+0x1c0>)
 80019a6:	f00a fc6f 	bl	800c288 <coEventRegister_NMT>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <main+0x8a>
  		errorHandler(3);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 fd1f 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_ERRCTRL(hbState) != RET_OK)  {
 80019b6:	484e      	ldr	r0, [pc, #312]	; (8001af0 <main+0x1c4>)
 80019b8:	f009 fda6 	bl	800b508 <coEventRegister_ERRCTRL>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <main+0x9c>
  		errorHandler(4);
 80019c2:	2004      	movs	r0, #4
 80019c4:	f000 fd16 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_SDO_SERVER_READ(sdoServerReadInd) != RET_OK)  {
 80019c8:	484a      	ldr	r0, [pc, #296]	; (8001af4 <main+0x1c8>)
 80019ca:	f00d fabb 	bl	800ef44 <coEventRegister_SDO_SERVER_READ>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <main+0xae>
  		errorHandler(5);
 80019d4:	2005      	movs	r0, #5
 80019d6:	f000 fd0d 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_SDO_SERVER_CHECK_WRITE(sdoServerCheckWriteInd) != RET_OK)  {
 80019da:	4847      	ldr	r0, [pc, #284]	; (8001af8 <main+0x1cc>)
 80019dc:	f00d fac2 	bl	800ef64 <coEventRegister_SDO_SERVER_CHECK_WRITE>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <main+0xc0>
  		errorHandler(6);
 80019e6:	2006      	movs	r0, #6
 80019e8:	f000 fd04 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_SDO_SERVER_WRITE(sdoServerWriteInd) != RET_OK)  {
 80019ec:	4843      	ldr	r0, [pc, #268]	; (8001afc <main+0x1d0>)
 80019ee:	f00d fac9 	bl	800ef84 <coEventRegister_SDO_SERVER_WRITE>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <main+0xd2>
  		errorHandler(7);
 80019f8:	2007      	movs	r0, #7
 80019fa:	f000 fcfb 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_PDO(pdoInd) != RET_OK)  {
 80019fe:	4840      	ldr	r0, [pc, #256]	; (8001b00 <main+0x1d4>)
 8001a00:	f00c fa0e 	bl	800de20 <coEventRegister_PDO>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <main+0xe4>
  		errorHandler(8);
 8001a0a:	2008      	movs	r0, #8
 8001a0c:	f000 fcf2 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_PDO_REC_EVENT(pdoRecEvent) != RET_OK)  {
 8001a10:	483c      	ldr	r0, [pc, #240]	; (8001b04 <main+0x1d8>)
 8001a12:	f00c fa15 	bl	800de40 <coEventRegister_PDO_REC_EVENT>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <main+0xf6>
  		errorHandler(9);
 8001a1c:	2009      	movs	r0, #9
 8001a1e:	f000 fce9 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_LED_GREEN(ledGreenInd) != RET_OK)  {
 8001a22:	4839      	ldr	r0, [pc, #228]	; (8001b08 <main+0x1dc>)
 8001a24:	f00a f834 	bl	800ba90 <coEventRegister_LED_GREEN>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <main+0x108>
  		errorHandler(10);
 8001a2e:	200a      	movs	r0, #10
 8001a30:	f000 fce0 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_LED_RED(ledRedInd) != RET_OK)  {
 8001a34:	4835      	ldr	r0, [pc, #212]	; (8001b0c <main+0x1e0>)
 8001a36:	f00a f841 	bl	800babc <coEventRegister_LED_RED>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <main+0x11a>
  		errorHandler(11);
 8001a40:	200b      	movs	r0, #11
 8001a42:	f000 fcd7 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_CAN_STATE(canInd) != RET_OK)  {
 8001a46:	4832      	ldr	r0, [pc, #200]	; (8001b10 <main+0x1e4>)
 8001a48:	f009 faaa 	bl	800afa0 <coEventRegister_CAN_STATE>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <main+0x12c>
  		errorHandler(12);
 8001a52:	200c      	movs	r0, #12
 8001a54:	f000 fcce 	bl	80023f4 <errorHandler>
  	}
  	if (coEventRegister_COMM_EVENT(commInd) != RET_OK)  {
 8001a58:	482e      	ldr	r0, [pc, #184]	; (8001b14 <main+0x1e8>)
 8001a5a:	f009 fab1 	bl	800afc0 <coEventRegister_COMM_EVENT>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <main+0x13e>
  		errorHandler(13);
 8001a64:	200d      	movs	r0, #13
 8001a66:	f000 fcc5 	bl	80023f4 <errorHandler>
  	}

  	/* enable CAN communication */
  	if (codrvCanEnable() != RET_OK)  {
 8001a6a:	f008 ff57 	bl	800a91c <codrvCanEnable>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <main+0x14e>
  		errorHandler(14);
 8001a74:	200e      	movs	r0, #14
 8001a76:	f000 fcbd 	bl	80023f4 <errorHandler>
  	}

  	/* send emcy message */
  	if (coEmcyWriteReq(0x1234, &emcyData[0]) != RET_OK)  {
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f241 2034 	movw	r0, #4660	; 0x1234
 8001a82:	f009 fafd 	bl	800b080 <coEmcyWriteReq>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <main+0x166>
  		errorHandler(15);
 8001a8c:	200f      	movs	r0, #15
 8001a8e:	f000 fcb1 	bl	80023f4 <errorHandler>
  	}

  	/* create cyclic timer */
  	if (coTimerStart(&timer1, (1000ul * 1000ul), timerCallback, NULL, CO_TIMER_ATTR_ROUNDUP_CYCLIC) != RET_OK)  {
 8001a92:	2301      	movs	r3, #1
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2300      	movs	r3, #0
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <main+0x1ec>)
 8001a9a:	4920      	ldr	r1, [pc, #128]	; (8001b1c <main+0x1f0>)
 8001a9c:	4820      	ldr	r0, [pc, #128]	; (8001b20 <main+0x1f4>)
 8001a9e:	f00e f87b 	bl	800fb98 <coTimerStart>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <main+0x182>
  		errorHandler(16);
 8001aa8:	2010      	movs	r0, #16
 8001aaa:	f000 fca3 	bl	80023f4 <errorHandler>
*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001aae:	f006 fadf 	bl	8008070 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <main+0x1f8>)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	481c      	ldr	r0, [pc, #112]	; (8001b28 <main+0x1fc>)
 8001ab8:	f006 fb24 	bl	8008104 <osThreadNew>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <main+0x200>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8001ac2:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <main+0x204>)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	481b      	ldr	r0, [pc, #108]	; (8001b34 <main+0x208>)
 8001ac8:	f006 fb1c 	bl	8008104 <osThreadNew>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <main+0x20c>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8001ad2:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <main+0x210>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	481a      	ldr	r0, [pc, #104]	; (8001b40 <main+0x214>)
 8001ad8:	f006 fb14 	bl	8008104 <osThreadNew>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <main+0x218>)
 8001ae0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ae2:	f006 fae9 	bl	80080b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <main+0x1ba>
 8001ae8:	08012dac 	.word	0x08012dac
 8001aec:	08002249 	.word	0x08002249
 8001af0:	08002293 	.word	0x08002293
 8001af4:	080022b1 	.word	0x080022b1
 8001af8:	080022db 	.word	0x080022db
 8001afc:	08002305 	.word	0x08002305
 8001b00:	08002267 	.word	0x08002267
 8001b04:	0800227d 	.word	0x0800227d
 8001b08:	080023ad 	.word	0x080023ad
 8001b0c:	080023df 	.word	0x080023df
 8001b10:	0800232f 	.word	0x0800232f
 8001b14:	08002369 	.word	0x08002369
 8001b18:	0800220d 	.word	0x0800220d
 8001b1c:	000f4240 	.word	0x000f4240
 8001b20:	2000954c 	.word	0x2000954c
 8001b24:	08012e68 	.word	0x08012e68
 8001b28:	08002401 	.word	0x08002401
 8001b2c:	20009364 	.word	0x20009364
 8001b30:	08012e8c 	.word	0x08012e8c
 8001b34:	080025a9 	.word	0x080025a9
 8001b38:	20009448 	.word	0x20009448
 8001b3c:	08012eb0 	.word	0x08012eb0
 8001b40:	080025f9 	.word	0x080025f9
 8001b44:	20009544 	.word	0x20009544

08001b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0ac      	sub	sp, #176	; 0xb0
 8001b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b52:	2244      	movs	r2, #68	; 0x44
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00e fa78 	bl	801004c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2254      	movs	r2, #84	; 0x54
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00e fa6a 	bl	801004c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b78:	f003 fc20 	bl	80053bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b7c:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <SystemClock_Config+0x130>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	4a3d      	ldr	r2, [pc, #244]	; (8001c78 <SystemClock_Config+0x130>)
 8001b84:	f023 0318 	bic.w	r3, r3, #24
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b8c:	2314      	movs	r3, #20
 8001b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b90:	2301      	movs	r3, #1
 8001b92:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001ba0:	2390      	movs	r3, #144	; 0x90
 8001ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001bb8:	2310      	movs	r3, #16
 8001bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001bca:	2306      	movs	r3, #6
 8001bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fc65 	bl	80054a4 <HAL_RCC_OscConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001be0:	f000 fd8a 	bl	80026f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be4:	230f      	movs	r3, #15
 8001be6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be8:	2303      	movs	r3, #3
 8001bea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001bec:	23a0      	movs	r3, #160	; 0xa0
 8001bee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001bf0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001bf4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 f86f 	bl	8005ce4 <HAL_RCC_ClockConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c0c:	f000 fd74 	bl	80026f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001c10:	f244 1342 	movw	r3, #16706	; 0x4142
 8001c14:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001c16:	2304      	movs	r3, #4
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 8001c30:	230e      	movs	r3, #14
 8001c32:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c34:	2307      	movs	r3, #7
 8001c36:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c44:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fa81 	bl	8006150 <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001c54:	f000 fd50 	bl	80026f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c5c:	f003 fbcc 	bl	80053f8 <HAL_PWREx_ControlVoltageScaling>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8001c66:	f000 fd47 	bl	80026f8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c6a:	f004 fc65 	bl	8006538 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c6e:	bf00      	nop
 8001c70:	37b0      	adds	r7, #176	; 0xb0
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000

08001c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c82:	463b      	mov	r3, r7
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
 8001c90:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001c94:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <MX_ADC1_Init+0xc0>)
 8001c96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001cf4:	f001 fb00 	bl	80032f8 <HAL_ADC_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001cfe:	f000 fcfb 	bl	80026f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_ADC1_Init+0xc4>)
 8001d04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d06:	2306      	movs	r3, #6
 8001d08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d0e:	237f      	movs	r3, #127	; 0x7f
 8001d10:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d12:	2304      	movs	r3, #4
 8001d14:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <MX_ADC1_Init+0xbc>)
 8001d20:	f001 fc32 	bl	8003588 <HAL_ADC_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001d2a:	f000 fce5 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000944c 	.word	0x2000944c
 8001d3c:	50040000 	.word	0x50040000
 8001d40:	19200040 	.word	0x19200040

08001d44 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <MX_CAN1_Init+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d66:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d6e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d96:	f001 ffd7 	bl	8003d48 <HAL_CAN_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001da0:	f000 fcaa 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200095f0 	.word	0x200095f0
 8001dac:	40006400 	.word	0x40006400

08001db0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <MX_I2C1_Init+0x78>)
 8001db8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dea:	480e      	ldr	r0, [pc, #56]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001dec:	f002 fcec 	bl	80047c8 <HAL_I2C_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001df6:	f000 fc7f 	bl	80026f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4809      	ldr	r0, [pc, #36]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001dfe:	f003 fa45 	bl	800528c <HAL_I2CEx_ConfigAnalogFilter>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e08:	f000 fc76 	bl	80026f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_I2C1_Init+0x74>)
 8001e10:	f003 fa87 	bl	8005322 <HAL_I2CEx_ConfigDigitalFilter>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e1a:	f000 fc6d 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200093b0 	.word	0x200093b0
 8001e28:	40005400 	.word	0x40005400

08001e2c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <MX_I2C3_Init+0x78>)
 8001e34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e66:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e68:	f002 fcae 	bl	80047c8 <HAL_I2C_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001e72:	f000 fc41 	bl	80026f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e76:	2100      	movs	r1, #0
 8001e78:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e7a:	f003 fa07 	bl	800528c <HAL_I2CEx_ConfigAnalogFilter>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001e84:	f000 fc38 	bl	80026f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_I2C3_Init+0x74>)
 8001e8c:	f003 fa49 	bl	8005322 <HAL_I2CEx_ConfigDigitalFilter>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001e96:	f000 fc2f 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200092f0 	.word	0x200092f0
 8001ea4:	40005c00 	.word	0x40005c00

08001ea8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b096      	sub	sp, #88	; 0x58
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	222c      	movs	r2, #44	; 0x2c
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f00e f8b9 	bl	801004c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eda:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001edc:	4a45      	ldr	r2, [pc, #276]	; (8001ff4 <MX_TIM1_Init+0x14c>)
 8001ede:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ee0:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee6:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef4:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f06:	483a      	ldr	r0, [pc, #232]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001f08:	f004 fcce 	bl	80068a8 <HAL_TIM_PWM_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001f12:	f000 fbf1 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f26:	4619      	mov	r1, r3
 8001f28:	4831      	ldr	r0, [pc, #196]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001f2a:	f005 fa4d 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f34:	f000 fbe0 	bl	80026f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f38:	2360      	movs	r3, #96	; 0x60
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4824      	ldr	r0, [pc, #144]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001f5e:	f004 fe19 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f68:	f000 fbc6 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f70:	2204      	movs	r2, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	481e      	ldr	r0, [pc, #120]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001f76:	f004 fe0d 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001f80:	f000 fbba 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f88:	2208      	movs	r2, #8
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001f8e:	f004 fe01 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001f98:	f000 fbae 	bl	80026f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001fd2:	f005 fa5f 	bl	8007494 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001fdc:	f000 fb8c 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <MX_TIM1_Init+0x148>)
 8001fe2:	f000 fd0b 	bl	80029fc <HAL_TIM_MspPostInit>

}
 8001fe6:	bf00      	nop
 8001fe8:	3758      	adds	r7, #88	; 0x58
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200094f8 	.word	0x200094f8
 8001ff4:	40012c00 	.word	0x40012c00

08001ff8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b096      	sub	sp, #88	; 0x58
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800200a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	615a      	str	r2, [r3, #20]
 800201c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	222c      	movs	r2, #44	; 0x2c
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f00e f811 	bl	801004c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800202a:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <MX_TIM15_Init+0x100>)
 800202c:	4a33      	ldr	r2, [pc, #204]	; (80020fc <MX_TIM15_Init+0x104>)
 800202e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002030:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <MX_TIM15_Init+0x100>)
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <MX_TIM15_Init+0x100>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <MX_TIM15_Init+0x100>)
 800203e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002042:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <MX_TIM15_Init+0x100>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <MX_TIM15_Init+0x100>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <MX_TIM15_Init+0x100>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002056:	4828      	ldr	r0, [pc, #160]	; (80020f8 <MX_TIM15_Init+0x100>)
 8002058:	f004 fc26 	bl	80068a8 <HAL_TIM_PWM_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002062:	f000 fb49 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800206e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002072:	4619      	mov	r1, r3
 8002074:	4820      	ldr	r0, [pc, #128]	; (80020f8 <MX_TIM15_Init+0x100>)
 8002076:	f005 f9a7 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002080:	f000 fb3a 	bl	80026f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002084:	2360      	movs	r3, #96	; 0x60
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800208c:	2300      	movs	r3, #0
 800208e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002090:	2300      	movs	r3, #0
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a4:	2204      	movs	r2, #4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4813      	ldr	r0, [pc, #76]	; (80020f8 <MX_TIM15_Init+0x100>)
 80020aa:	f004 fd73 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80020b4:	f000 fb20 	bl	80026f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4807      	ldr	r0, [pc, #28]	; (80020f8 <MX_TIM15_Init+0x100>)
 80020dc:	f005 f9da 	bl	8007494 <HAL_TIMEx_ConfigBreakDeadTime>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80020e6:	f000 fb07 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80020ea:	4803      	ldr	r0, [pc, #12]	; (80020f8 <MX_TIM15_Init+0x100>)
 80020ec:	f000 fc86 	bl	80029fc <HAL_TIM_MspPostInit>

}
 80020f0:	bf00      	nop
 80020f2:	3758      	adds	r7, #88	; 0x58
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200093fc 	.word	0x200093fc
 80020fc:	40014000 	.word	0x40014000

08002100 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <MX_USART2_UART_Init+0x5c>)
 8002108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <MX_USART2_UART_Init+0x58>)
 800210c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_USART2_UART_Init+0x58>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002126:	220c      	movs	r2, #12
 8002128:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_USART2_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_USART2_UART_Init+0x58>)
 800213e:	2200      	movs	r2, #0
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002144:	f005 fa3c 	bl	80075c0 <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800214e:	f000 fad3 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000956c 	.word	0x2000956c
 800215c:	40004400 	.word	0x40004400

08002160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_DMA_Init+0x48>)
 8002168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <MX_DMA_Init+0x48>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6493      	str	r3, [r2, #72]	; 0x48
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <MX_DMA_Init+0x48>)
 8002174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2105      	movs	r1, #5
 8002182:	2010      	movs	r0, #16
 8002184:	f001 ffd5 	bl	8004132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002188:	2010      	movs	r0, #16
 800218a:	f001 ffee 	bl	800416a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2105      	movs	r1, #5
 8002192:	2011      	movs	r0, #17
 8002194:	f001 ffcd 	bl	8004132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002198:	2011      	movs	r0, #17
 800219a:	f001 ffe6 	bl	800416a <HAL_NVIC_EnableIRQ>

}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000

080021ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <MX_GPIO_Init+0x5c>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <MX_GPIO_Init+0x5c>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MX_GPIO_Init+0x5c>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_GPIO_Init+0x5c>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <MX_GPIO_Init+0x5c>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_GPIO_Init+0x5c>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_GPIO_Init+0x5c>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <MX_GPIO_Init+0x5c>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_GPIO_Init+0x5c>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]

}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <timerCallback>:

/* USER CODE BEGIN 4 */
/*********************************************************************/
static void timerCallback(void* pVoid)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
UNSIGNED8 val_2000_1;

	/* read object dictionary entry 0x2000:1 */
	if (coOdGetObj_u8(0x2000, 1u, &val_2000_1) == RET_OK)  {
 8002214:	f107 030f 	add.w	r3, r7, #15
 8002218:	461a      	mov	r2, r3
 800221a:	2101      	movs	r1, #1
 800221c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002220:	f00a fd26 	bl	800cc70 <coOdGetObj_u8>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <timerCallback+0x34>
		/* increase value */
		val_2000_1++;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	3301      	adds	r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]

		/* write increased value back to the object dictionary */
		if (coOdPutObj_u8(0x2000, 1u, val_2000_1) != RET_OK)  {
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	461a      	mov	r2, r3
 8002236:	2101      	movs	r1, #1
 8002238:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800223c:	f00a fee2 	bl	800d004 <coOdPutObj_u8>
			printf("something went wrong\n");
		}
	}
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <nmtInd>:
/*********************************************************************/
static RET_T nmtInd(
		BOOL_T	execute,
		CO_NMT_STATE_T	newState
	)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	460a      	mov	r2, r1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	71bb      	strb	r3, [r7, #6]
	//printf("nmtInd: New Nmt state %d - execute %d\n", newState, execute);

	return(RET_OK);
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <pdoInd>:

/*********************************************************************/
static void pdoInd(
		UNSIGNED16	pdoNr
	)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	80fb      	strh	r3, [r7, #6]
	//printf("pdoInd: pdo %d received\n", pdoNr);
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <pdoRecEvent>:

/*********************************************************************/
static void pdoRecEvent(
		UNSIGNED16	pdoNr
	)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
	//printf("pdoRecEvent: pdo %d time out\n", pdoNr);
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <hbState>:
static void hbState(
		UNSIGNED8	nodeId,
		CO_ERRCTRL_T state,
		CO_NMT_STATE_T	nmtState
	)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
 800229c:	460b      	mov	r3, r1
 800229e:	71bb      	strb	r3, [r7, #6]
 80022a0:	4613      	mov	r3, r2
 80022a2:	717b      	strb	r3, [r7, #5]
	//printf("hbInd: HB Event %d node %d nmtState: %d\n", state, nodeId, nmtState);

    return;
 80022a4:	bf00      	nop
}
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <sdoServerReadInd>:
		BOOL_T		execute,
		UNSIGNED8	sdoNr,
		UNSIGNED16	index,
		UNSIGNED8	subIndex
	)
{
 80022b0:	b490      	push	{r4, r7}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	4603      	mov	r3, r0
 80022c4:	71bb      	strb	r3, [r7, #6]
 80022c6:	460b      	mov	r3, r1
 80022c8:	80bb      	strh	r3, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	70fb      	strb	r3, [r7, #3]
	//printf("sdo server read ind: exec: %d, sdoNr %d, index %x:%d\n",
	//	execute, sdoNr, index, subIndex);

   // return(RET_INVALID_PARAMETER);
	return(RET_OK);
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc90      	pop	{r4, r7}
 80022d8:	4770      	bx	lr

080022da <sdoServerCheckWriteInd>:
		UNSIGNED8	sdoNr,
		UNSIGNED16	index,
		UNSIGNED8	subIndex,
		const UNSIGNED8	*pData
	)
{
 80022da:	b490      	push	{r4, r7}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4604      	mov	r4, r0
 80022e2:	4608      	mov	r0, r1
 80022e4:	4611      	mov	r1, r2
 80022e6:	461a      	mov	r2, r3
 80022e8:	4623      	mov	r3, r4
 80022ea:	71fb      	strb	r3, [r7, #7]
 80022ec:	4603      	mov	r3, r0
 80022ee:	71bb      	strb	r3, [r7, #6]
 80022f0:	460b      	mov	r3, r1
 80022f2:	80bb      	strh	r3, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	70fb      	strb	r3, [r7, #3]
	//printf("sdo server check write ind: exec: %d, sdoNr %d, index %x:%d\n",
	//	execute, sdoNr, index, subIndex);

   // return(RET_INVALID_PARAMETER);
	return(RET_OK);
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc90      	pop	{r4, r7}
 8002302:	4770      	bx	lr

08002304 <sdoServerWriteInd>:
		BOOL_T		execute,
		UNSIGNED8	sdoNr,
		UNSIGNED16	index,
		UNSIGNED8	subIndex
	)
{
 8002304:	b490      	push	{r4, r7}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4604      	mov	r4, r0
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	461a      	mov	r2, r3
 8002312:	4623      	mov	r3, r4
 8002314:	71fb      	strb	r3, [r7, #7]
 8002316:	4603      	mov	r3, r0
 8002318:	71bb      	strb	r3, [r7, #6]
 800231a:	460b      	mov	r3, r1
 800231c:	80bb      	strh	r3, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	70fb      	strb	r3, [r7, #3]
	//printf("sdo server write ind: exec: %d, sdoNr %d, index %x:%d\n",
	//	execute, sdoNr, index, subIndex);

   // return(RET_INVALID_PARAMETER);
	return(RET_OK);
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bc90      	pop	{r4, r7}
 800232c:	4770      	bx	lr

0800232e <canInd>:

/*********************************************************************/
static void canInd(
	CO_CAN_STATE_T	canState
	)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
	switch (canState)  {
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d006      	beq.n	800234c <canInd+0x1e>
 800233e:	2b02      	cmp	r3, #2
 8002340:	dc06      	bgt.n	8002350 <canInd+0x22>
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <canInd+0x26>
 8002346:	2b01      	cmp	r3, #1
 8002348:	d006      	beq.n	8002358 <canInd+0x2a>
			break;
		case CO_CAN_STATE_PASSIVE:
			//printf("CAN: Passive\n");
			break;
		default:
			break;
 800234a:	e001      	b.n	8002350 <canInd+0x22>
			break;
 800234c:	bf00      	nop
 800234e:	e004      	b.n	800235a <canInd+0x2c>
			break;
 8002350:	bf00      	nop
 8002352:	e002      	b.n	800235a <canInd+0x2c>
			break;
 8002354:	bf00      	nop
 8002356:	e000      	b.n	800235a <canInd+0x2c>
			break;
 8002358:	bf00      	nop
	}
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <commInd>:

/*********************************************************************/
static void commInd(
		CO_COMM_STATE_EVENT_T	commEvent
	)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	switch (commEvent)  {
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	3b06      	subs	r3, #6
 8002376:	2b06      	cmp	r3, #6
 8002378:	d810      	bhi.n	800239c <commInd+0x34>
 800237a:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <commInd+0x18>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	0800239d 	.word	0x0800239d
 8002384:	0800239d 	.word	0x0800239d
 8002388:	0800239d 	.word	0x0800239d
 800238c:	0800239d 	.word	0x0800239d
 8002390:	0800239d 	.word	0x0800239d
 8002394:	0800239d 	.word	0x0800239d
 8002398:	0800239d 	.word	0x0800239d
		case CO_COMM_STATE_EVENT_TR_QUEUE_EMPTY:
			//printf("COMM-Event: Tr Queue Empty\n");
			break;
		default:
			//printf("COMM-Event: %d\n", commEvent);
			break;
 800239c:	bf00      	nop
	}

}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <ledGreenInd>:

/*********************************************************************/
static void ledGreenInd(
		BOOL_T	on
	)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
#ifdef CANOPEN_LED
	if (on == CO_TRUE)  {
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <ledGreenInd+0x1e>
		HAL_GPIO_WritePin(CANOPEN_LED_PORT, CANOPEN_LED_PIN, GPIO_PIN_SET);
 80023bc:	2201      	movs	r2, #1
 80023be:	2120      	movs	r1, #32
 80023c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c4:	f002 f9e8 	bl	8004798 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(CANOPEN_LED_PORT, CANOPEN_LED_PIN, GPIO_PIN_RESET);
	}
#endif /* CANOPEN_LED */
}
 80023c8:	e005      	b.n	80023d6 <ledGreenInd+0x2a>
		HAL_GPIO_WritePin(CANOPEN_LED_PORT, CANOPEN_LED_PIN, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2120      	movs	r1, #32
 80023ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d2:	f002 f9e1 	bl	8004798 <HAL_GPIO_WritePin>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <ledRedInd>:

/*********************************************************************/
static void ledRedInd(
		BOOL_T	on
	)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(ERROR_LED_PORT, ERROR_LED_PIN, GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(ERROR_LED_PORT, ERROR_LED_PIN, GPIO_PIN_RESET);
	}
#endif /* ERROR_LED */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <errorHandler>:

/*********************************************************************/
static void errorHandler(
		int errorCode
	)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	while(1) { (void)errorCode; };
 80023fc:	e7fe      	b.n	80023fc <errorHandler+0x8>
	...

08002400 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002402:	b0ab      	sub	sp, #172	; 0xac
 8002404:	af10      	add	r7, sp, #64	; 0x40
 8002406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	  char msg[50];
	  uint8_t canPacketMSB[8];
	  uint8_t canPacketLSB[16]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
 8002408:	4b60      	ldr	r3, [pc, #384]	; (800258c <StartDefaultTask+0x18c>)
 800240a:	f107 040c 	add.w	r4, r7, #12
 800240e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	  for(;;){
		    for(int i=0; i<12; i++){
 8002414:	2300      	movs	r3, #0
 8002416:	667b      	str	r3, [r7, #100]	; 0x64
 8002418:	e007      	b.n	800242a <StartDefaultTask+0x2a>
		        _channel_readings[i]=0;
 800241a:	4a5d      	ldr	r2, [pc, #372]	; (8002590 <StartDefaultTask+0x190>)
 800241c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800241e:	2100      	movs	r1, #0
 8002420:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		    for(int i=0; i<12; i++){
 8002424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002426:	3301      	adds	r3, #1
 8002428:	667b      	str	r3, [r7, #100]	; 0x64
 800242a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800242c:	2b0b      	cmp	r3, #11
 800242e:	ddf4      	ble.n	800241a <StartDefaultTask+0x1a>
		    }

		    //AS7341 initialize
		    AS7341begin(hi2c1);
 8002430:	4e58      	ldr	r6, [pc, #352]	; (8002594 <StartDefaultTask+0x194>)
 8002432:	466d      	mov	r5, sp
 8002434:	f106 0410 	add.w	r4, r6, #16
 8002438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800243a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800243c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800243e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002444:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002448:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800244c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002450:	f7fe fd26 	bl	8000ea0 <AS7341begin>
		    AS7341init(0x01);
 8002454:	2001      	movs	r0, #1
 8002456:	f7fe ffe5 	bl	8001424 <AS7341init>

			//configure integration time
		    setATIME(100);
 800245a:	2064      	movs	r0, #100	; 0x64
 800245c:	f7fe fd7c 	bl	8000f58 <setATIME>
		    setASTEP(0xE7);
 8002460:	20e7      	movs	r0, #231	; 0xe7
 8002462:	f7fe fd35 	bl	8000ed0 <setASTEP>
		    setGain(AS7341_GAIN_256X);
 8002466:	2009      	movs	r0, #9
 8002468:	f7fe fd9e 	bl	8000fa8 <setGain>

		    readAllChannels(_channel_readings);
 800246c:	4848      	ldr	r0, [pc, #288]	; (8002590 <StartDefaultTask+0x190>)
 800246e:	f7fe fdc3 	bl	8000ff8 <readAllChannels>

		    //get all channel
		    int a = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	663b      	str	r3, [r7, #96]	; 0x60
		    for(int i=0; i<8; i++){
 8002476:	2300      	movs	r3, #0
 8002478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800247a:	e027      	b.n	80024cc <StartDefaultTask+0xcc>
		    	if(i%2==0){
 800247c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <StartDefaultTask+0xa6>
		    		canPacketMSB[i]=getChannel(a)>>8;
 8002486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fec6 	bl	800121c <getChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b29b      	uxth	r3, r3
 8002496:	b2d9      	uxtb	r1, r3
 8002498:	f107 021c 	add.w	r2, r7, #28
 800249c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249e:	4413      	add	r3, r2
 80024a0:	460a      	mov	r2, r1
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e00f      	b.n	80024c6 <StartDefaultTask+0xc6>
		    	}
		    	else{
		    		canPacketMSB[i]=getChannel(a)&0x00FF;
 80024a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe feb6 	bl	800121c <getChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	b2d9      	uxtb	r1, r3
 80024b4:	f107 021c 	add.w	r2, r7, #28
 80024b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
		    		a++;
 80024c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024c2:	3301      	adds	r3, #1
 80024c4:	663b      	str	r3, [r7, #96]	; 0x60
		    for(int i=0; i<8; i++){
 80024c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c8:	3301      	adds	r3, #1
 80024ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ce:	2b07      	cmp	r3, #7
 80024d0:	ddd4      	ble.n	800247c <StartDefaultTask+0x7c>
		    	}
		    }


		    for(int i=0; i<12; i++){
 80024d2:	2300      	movs	r3, #0
 80024d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80024d6:	e01e      	b.n	8002516 <StartDefaultTask+0x116>
			    sprintf(msg, "getChannel %d = %x\r\n",i+1,  getChannel(i));
 80024d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024da:	1c5c      	adds	r4, r3, #1
 80024dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fe9b 	bl	800121c <getChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80024ec:	4622      	mov	r2, r4
 80024ee:	492a      	ldr	r1, [pc, #168]	; (8002598 <StartDefaultTask+0x198>)
 80024f0:	f00e fa1e 	bl	8010930 <siprintf>
			    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80024f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd fe69 	bl	80001d0 <strlen>
 80024fe:	4603      	mov	r3, r0
 8002500:	b29a      	uxth	r2, r3
 8002502:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	4824      	ldr	r0, [pc, #144]	; (800259c <StartDefaultTask+0x19c>)
 800250c:	f005 f8a6 	bl	800765c <HAL_UART_Transmit>
		    for(int i=0; i<12; i++){
 8002510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002512:	3301      	adds	r3, #1
 8002514:	65bb      	str	r3, [r7, #88]	; 0x58
 8002516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002518:	2b0b      	cmp	r3, #11
 800251a:	dddd      	ble.n	80024d8 <StartDefaultTask+0xd8>
		    }


		    sprintf(msg, "getThermocoupleTemp = %d\r\n",getThermocoupleTemp(1));
 800251c:	2001      	movs	r0, #1
 800251e:	f7ff f8c3 	bl	80016a8 <getThermocoupleTemp>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252a:	491d      	ldr	r1, [pc, #116]	; (80025a0 <StartDefaultTask+0x1a0>)
 800252c:	4618      	mov	r0, r3
 800252e:	f00e f9ff 	bl	8010930 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002536:	4618      	mov	r0, r3
 8002538:	f7fd fe4a 	bl	80001d0 <strlen>
 800253c:	4603      	mov	r3, r0
 800253e:	b29a      	uxth	r2, r3
 8002540:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	4814      	ldr	r0, [pc, #80]	; (800259c <StartDefaultTask+0x19c>)
 800254a:	f005 f887 	bl	800765c <HAL_UART_Transmit>

		    enableFlickerDetection(1);
 800254e:	2001      	movs	r0, #1
 8002550:	f7fe ffe0 	bl	8001514 <enableFlickerDetection>
		    sprintf(msg, "getFlickerDetectStatus = %d\r\n",getFlickerDetectStatus());
 8002554:	f7ff f806 	bl	8001564 <getFlickerDetectStatus>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	4910      	ldr	r1, [pc, #64]	; (80025a4 <StartDefaultTask+0x1a4>)
 8002562:	4618      	mov	r0, r3
 8002564:	f00e f9e4 	bl	8010930 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd fe2f 	bl	80001d0 <strlen>
 8002572:	4603      	mov	r3, r0
 8002574:	b29a      	uxth	r2, r3
 8002576:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <StartDefaultTask+0x19c>)
 8002580:	f005 f86c 	bl	800765c <HAL_UART_Transmit>

			if (coCommTask() == CO_TRUE)  {
 8002584:	f008 fbf8 	bl	800ad78 <coCommTask>
	  for(;;){
 8002588:	e744      	b.n	8002414 <StartDefaultTask+0x14>
 800258a:	bf00      	nop
 800258c:	08012e08 	.word	0x08012e08
 8002590:	2000928c 	.word	0x2000928c
 8002594:	200093b0 	.word	0x200093b0
 8002598:	08012db4 	.word	0x08012db4
 800259c:	2000956c 	.word	0x2000956c
 80025a0:	08012dcc 	.word	0x08012dcc
 80025a4:	08012de8 	.word	0x08012de8

080025a8 <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b094      	sub	sp, #80	; 0x50
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */

	  char msg[50];
	  uint8_t read[2]={0};
 80025b0:	2300      	movs	r3, #0
 80025b2:	823b      	strh	r3, [r7, #16]
	  uint16_t readtest;
	  float readfloat=0.0;
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint8_t TH = 0x00;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  uint8_t TV = 0x01;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	  uint8_t TC = 0x02;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	  uint8_t tempReg[] = {TH,TV,TC};
 80025cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80025d0:	733b      	strb	r3, [r7, #12]
 80025d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80025d6:	737b      	strb	r3, [r7, #13]
 80025d8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80025dc:	73bb      	strb	r3, [r7, #14]

	  uint8_t data[1]={TH};
 80025de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80025e2:	723b      	strb	r3, [r7, #8]
	  uint8_t MSB = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	  uint8_t LSB = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  HAL_StatusTypeDef status;
	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(10);
 80025f0:	200a      	movs	r0, #10
 80025f2:	f005 fe19 	bl	8008228 <osDelay>
 80025f6:	e7fb      	b.n	80025f0 <StartReadTempTask+0x48>

080025f8 <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fa:	b0a7      	sub	sp, #156	; 0x9c
 80025fc:	af10      	add	r7, sp, #64	; 0x40
 80025fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  char msg[50];
  uint16_t sharedvar=32;
 8002600:	2320      	movs	r3, #32
 8002602:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  uint16_t sharedchannel=0xFFFF;
 8002606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800260a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  uint16_t shareddelay = 20;
 800260e:	2314      	movs	r3, #20
 8002610:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	 //turn off all LED
	 //all_led_off(&hi2c1, I2C_address);

	 //uint16_t channel = 0b1001001110010101;
	 //uint16_t channel = sharedchannel;
  	  PCA9685begin(hi2c3,0);
 8002614:	4e2e      	ldr	r6, [pc, #184]	; (80026d0 <StartReadLightTask+0xd8>)
 8002616:	2300      	movs	r3, #0
 8002618:	930f      	str	r3, [sp, #60]	; 0x3c
 800261a:	466d      	mov	r5, sp
 800261c:	f106 0410 	add.w	r4, r6, #16
 8002620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002630:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002634:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002638:	f7ff f89e 	bl	8001778 <PCA9685begin>
  	  pca9685_init(0x80);
 800263c:	2080      	movs	r0, #128	; 0x80
 800263e:	f7ff f8b3 	bl	80017a8 <pca9685_init>
  	  uint32_t tickTab[3];
	 for(;;)
	 {
		 //osDelay(shareddelay);

		 for(int i=0; i<4096/sharedvar; i++){
 8002642:	2300      	movs	r3, #0
 8002644:	657b      	str	r3, [r7, #84]	; 0x54
 8002646:	e018      	b.n	800267a <StartReadLightTask+0x82>
			pca9685_mult_pwm(0x80, sharedchannel, 0, 4095-(sharedvar*i));
 8002648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264a:	b29b      	uxth	r3, r3
 800264c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002650:	fb12 f303 	smulbb	r3, r2, r3
 8002654:	b29b      	uxth	r3, r3
 8002656:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800265a:	330f      	adds	r3, #15
 800265c:	b29b      	uxth	r3, r3
 800265e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8002662:	2200      	movs	r2, #0
 8002664:	2080      	movs	r0, #128	; 0x80
 8002666:	f7ff f8f9 	bl	800185c <pca9685_mult_pwm>
			//pca9685_pwm(&hi2c1, I2C_address, 15, 0, 4095-(sharedvar*i));
			osDelay(shareddelay);
 800266a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800266e:	4618      	mov	r0, r3
 8002670:	f005 fdda 	bl	8008228 <osDelay>
		 for(int i=0; i<4096/sharedvar; i++){
 8002674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002676:	3301      	adds	r3, #1
 8002678:	657b      	str	r3, [r7, #84]	; 0x54
 800267a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800267e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002682:	fb92 f3f3 	sdiv	r3, r2, r3
 8002686:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002688:	429a      	cmp	r2, r3
 800268a:	dbdd      	blt.n	8002648 <StartReadLightTask+0x50>

		 }


	 	 for(int i=0; i<4096/sharedvar; i++){
 800268c:	2300      	movs	r3, #0
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
 8002690:	e014      	b.n	80026bc <StartReadLightTask+0xc4>
	 		pca9685_mult_pwm(0x80, sharedchannel, 0, (sharedvar*i));
 8002692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800269a:	fb12 f303 	smulbb	r3, r2, r3
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80026a4:	2200      	movs	r2, #0
 80026a6:	2080      	movs	r0, #128	; 0x80
 80026a8:	f7ff f8d8 	bl	800185c <pca9685_mult_pwm>
	 		//pca9685_pwm(&hi2c1, I2C_address, 15 ,0, 4095-(sharedvar*i));
	 		osDelay(shareddelay);
 80026ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026b0:	4618      	mov	r0, r3
 80026b2:	f005 fdb9 	bl	8008228 <osDelay>
	 	 for(int i=0; i<4096/sharedvar; i++){
 80026b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b8:	3301      	adds	r3, #1
 80026ba:	653b      	str	r3, [r7, #80]	; 0x50
 80026bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80026c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dbe1      	blt.n	8002692 <StartReadLightTask+0x9a>
		 for(int i=0; i<4096/sharedvar; i++){
 80026ce:	e7b8      	b.n	8002642 <StartReadLightTask+0x4a>
 80026d0:	200092f0 	.word	0x200092f0

080026d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026e6:	f000 fc5b 	bl	8002fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40001000 	.word	0x40001000

080026f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 80026fc:	e7fe      	b.n	80026fc <Error_Handler+0x4>
	...

08002700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_MspInit+0x4c>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <HAL_MspInit+0x4c>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6613      	str	r3, [r2, #96]	; 0x60
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_MspInit+0x4c>)
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_MspInit+0x4c>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_MspInit+0x4c>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6593      	str	r3, [r2, #88]	; 0x58
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_MspInit+0x4c>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	210f      	movs	r1, #15
 800273a:	f06f 0001 	mvn.w	r0, #1
 800273e:	f001 fcf8 	bl	8004132 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <HAL_ADC_MspInit+0x74>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d124      	bne.n	80027bc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_ADC_MspInit+0x78>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <HAL_ADC_MspInit+0x78>)
 8002778:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800277c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_ADC_MspInit+0x78>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_ADC_MspInit+0x78>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <HAL_ADC_MspInit+0x78>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <HAL_ADC_MspInit+0x78>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80027a2:	2372      	movs	r3, #114	; 0x72
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80027a6:	230b      	movs	r3, #11
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b8:	f001 fe84 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	50040000 	.word	0x50040000
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <HAL_CAN_MspInit+0xa0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d139      	bne.n	8002862 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_CAN_MspInit+0xa4>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_CAN_MspInit+0xa4>)
 80027f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f8:	6593      	str	r3, [r2, #88]	; 0x58
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_CAN_MspInit+0xa4>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_CAN_MspInit+0xa4>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_CAN_MspInit+0xa4>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_CAN_MspInit+0xa4>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800281e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002830:	2309      	movs	r3, #9
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283e:	f001 fe41 	bl	80044c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2105      	movs	r1, #5
 8002846:	2013      	movs	r0, #19
 8002848:	f001 fc73 	bl	8004132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800284c:	2013      	movs	r0, #19
 800284e:	f001 fc8c 	bl	800416a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2105      	movs	r1, #5
 8002856:	2014      	movs	r0, #20
 8002858:	f001 fc6b 	bl	8004132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800285c:	2014      	movs	r0, #20
 800285e:	f001 fc84 	bl	800416a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002862:	bf00      	nop
 8002864:	3728      	adds	r7, #40	; 0x28
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40006400 	.word	0x40006400
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08c      	sub	sp, #48	; 0x30
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a3c      	ldr	r2, [pc, #240]	; (8002984 <HAL_I2C_MspInit+0x110>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d128      	bne.n	80028e8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <HAL_I2C_MspInit+0x114>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <HAL_I2C_MspInit+0x114>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <HAL_I2C_MspInit+0x114>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ae:	23c0      	movs	r3, #192	; 0xc0
 80028b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b2:	2312      	movs	r3, #18
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028be:	2304      	movs	r3, #4
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	4619      	mov	r1, r3
 80028c8:	4830      	ldr	r0, [pc, #192]	; (800298c <HAL_I2C_MspInit+0x118>)
 80028ca:	f001 fdfb 	bl	80044c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_I2C_MspInit+0x114>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <HAL_I2C_MspInit+0x114>)
 80028d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028d8:	6593      	str	r3, [r2, #88]	; 0x58
 80028da:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_I2C_MspInit+0x114>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028e6:	e049      	b.n	800297c <HAL_I2C_MspInit+0x108>
  else if(hi2c->Instance==I2C3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_I2C_MspInit+0x11c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d144      	bne.n	800297c <HAL_I2C_MspInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_I2C_MspInit+0x114>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	4a24      	ldr	r2, [pc, #144]	; (8002988 <HAL_I2C_MspInit+0x114>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_I2C_MspInit+0x114>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <HAL_I2C_MspInit+0x114>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <HAL_I2C_MspInit+0x114>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_I2C_MspInit+0x114>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002926:	2312      	movs	r3, #18
 8002928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800292a:	2301      	movs	r3, #1
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002932:	2304      	movs	r3, #4
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	4619      	mov	r1, r3
 800293c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002940:	f001 fdc0 	bl	80044c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002944:	2310      	movs	r3, #16
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002948:	2312      	movs	r3, #18
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800294c:	2301      	movs	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002954:	2304      	movs	r3, #4
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	480b      	ldr	r0, [pc, #44]	; (800298c <HAL_I2C_MspInit+0x118>)
 8002960:	f001 fdb0 	bl	80044c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_I2C_MspInit+0x114>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_I2C_MspInit+0x114>)
 800296a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800296e:	6593      	str	r3, [r2, #88]	; 0x58
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_I2C_MspInit+0x114>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
}
 800297c:	bf00      	nop
 800297e:	3730      	adds	r7, #48	; 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40005400 	.word	0x40005400
 8002988:	40021000 	.word	0x40021000
 800298c:	48000400 	.word	0x48000400
 8002990:	40005c00 	.word	0x40005c00

08002994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_TIM_PWM_MspInit+0x5c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d10c      	bne.n	80029c0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <HAL_TIM_PWM_MspInit+0x60>)
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_TIM_PWM_MspInit+0x60>)
 80029ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b0:	6613      	str	r3, [r2, #96]	; 0x60
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_TIM_PWM_MspInit+0x60>)
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80029be:	e010      	b.n	80029e2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <HAL_TIM_PWM_MspInit+0x64>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10b      	bne.n	80029e2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_TIM_PWM_MspInit+0x60>)
 80029cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ce:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <HAL_TIM_PWM_MspInit+0x60>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6613      	str	r3, [r2, #96]	; 0x60
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_TIM_PWM_MspInit+0x60>)
 80029d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40012c00 	.word	0x40012c00
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40014000 	.word	0x40014000

080029fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a23      	ldr	r2, [pc, #140]	; (8002aa8 <HAL_TIM_MspPostInit+0xac>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d11e      	bne.n	8002a5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_TIM_MspPostInit+0xb0>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4a22      	ldr	r2, [pc, #136]	; (8002aac <HAL_TIM_MspPostInit+0xb0>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_TIM_MspPostInit+0xb0>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a36:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	2300      	movs	r3, #0
 8002a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	4619      	mov	r1, r3
 8002a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a56:	f001 fd35 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002a5a:	e021      	b.n	8002aa0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM15)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <HAL_TIM_MspPostInit+0xb4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d11c      	bne.n	8002aa0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_TIM_MspPostInit+0xb0>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <HAL_TIM_MspPostInit+0xb0>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_TIM_MspPostInit+0xb0>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a7e:	2308      	movs	r3, #8
 8002a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002a8e:	230e      	movs	r3, #14
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4619      	mov	r1, r3
 8002a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a9c:	f001 fd12 	bl	80044c4 <HAL_GPIO_Init>
}
 8002aa0:	bf00      	nop
 8002aa2:	3728      	adds	r7, #40	; 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40014000 	.word	0x40014000

08002ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a4a      	ldr	r2, [pc, #296]	; (8002bfc <HAL_UART_MspInit+0x148>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f040 808d 	bne.w	8002bf2 <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad8:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <HAL_UART_MspInit+0x14c>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	4a48      	ldr	r2, [pc, #288]	; (8002c00 <HAL_UART_MspInit+0x14c>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae4:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <HAL_UART_MspInit+0x14c>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <HAL_UART_MspInit+0x14c>)
 8002af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af4:	4a42      	ldr	r2, [pc, #264]	; (8002c00 <HAL_UART_MspInit+0x14c>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afc:	4b40      	ldr	r3, [pc, #256]	; (8002c00 <HAL_UART_MspInit+0x14c>)
 8002afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b08:	2304      	movs	r3, #4
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b18:	2307      	movs	r3, #7
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b26:	f001 fccd 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4619      	mov	r1, r3
 8002b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4a:	f001 fcbb 	bl	80044c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b50:	4a2d      	ldr	r2, [pc, #180]	; (8002c08 <HAL_UART_MspInit+0x154>)
 8002b52:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b56:	2202      	movs	r2, #2
 8002b58:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b66:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b68:	2280      	movs	r2, #128	; 0x80
 8002b6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b84:	481f      	ldr	r0, [pc, #124]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b86:	f001 fb35 	bl	80041f4 <HAL_DMA_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002b90:	f7ff fdb2 	bl	80026f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b98:	671a      	str	r2, [r3, #112]	; 0x70
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_UART_MspInit+0x150>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <HAL_UART_MspInit+0x15c>)
 8002ba4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002ba8:	2202      	movs	r2, #2
 8002baa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bae:	2210      	movs	r2, #16
 8002bb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bd6:	480d      	ldr	r0, [pc, #52]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bd8:	f001 fb0c 	bl	80041f4 <HAL_DMA_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8002be2:	f7ff fd89 	bl	80026f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bea:	66da      	str	r2, [r3, #108]	; 0x6c
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_UART_MspInit+0x158>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	40021000 	.word	0x40021000
 8002c04:	20009368 	.word	0x20009368
 8002c08:	4002006c 	.word	0x4002006c
 8002c0c:	200094b0 	.word	0x200094b0
 8002c10:	40020080 	.word	0x40020080

08002c14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002c24:	2200      	movs	r2, #0
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	2036      	movs	r0, #54	; 0x36
 8002c2a:	f001 fa82 	bl	8004132 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c2e:	2036      	movs	r0, #54	; 0x36
 8002c30:	f001 fa9b 	bl	800416a <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c34:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <HAL_InitTick+0xa0>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_InitTick+0xa0>)
 8002c3a:	f043 0310 	orr.w	r3, r3, #16
 8002c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <HAL_InitTick+0xa0>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c4c:	f107 0210 	add.w	r2, r7, #16
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 f9e8 	bl	800602c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c5c:	f003 f9ba 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
 8002c60:	4603      	mov	r3, r0
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <HAL_InitTick+0xa4>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0c9b      	lsrs	r3, r3, #18
 8002c70:	3b01      	subs	r3, #1
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_InitTick+0xa8>)
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <HAL_InitTick+0xac>)
 8002c78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_InitTick+0xa8>)
 8002c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c82:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <HAL_InitTick+0xa8>)
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_InitTick+0xa8>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_InitTick+0xa8>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c94:	4809      	ldr	r0, [pc, #36]	; (8002cbc <HAL_InitTick+0xa8>)
 8002c96:	f003 fd51 	bl	800673c <HAL_TIM_Base_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d104      	bne.n	8002caa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ca0:	4806      	ldr	r0, [pc, #24]	; (8002cbc <HAL_InitTick+0xa8>)
 8002ca2:	f003 fdad 	bl	8006800 <HAL_TIM_Base_Start_IT>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	e000      	b.n	8002cac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3730      	adds	r7, #48	; 0x30
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	431bde83 	.word	0x431bde83
 8002cbc:	2000964c 	.word	0x2000964c
 8002cc0:	40001000 	.word	0x40001000

08002cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <NMI_Handler+0x4>

08002cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cce:	e7fe      	b.n	8002cce <HardFault_Handler+0x4>

08002cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd4:	e7fe      	b.n	8002cd4 <MemManage_Handler+0x4>

08002cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cda:	e7fe      	b.n	8002cda <BusFault_Handler+0x4>

08002cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <UsageFault_Handler+0x4>

08002ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <DMA1_Channel6_IRQHandler+0x10>)
 8002cf6:	f001 fb35 	bl	8004364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20009368 	.word	0x20009368

08002d04 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <DMA1_Channel7_IRQHandler+0x10>)
 8002d0a:	f001 fb2b 	bl	8004364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200094b0 	.word	0x200094b0

08002d18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <TIM6_DAC_IRQHandler+0x10>)
 8002d1e:	f003 fe1a 	bl	8006956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000964c 	.word	0x2000964c

08002d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	return 1;
 8002d30:	2301      	movs	r3, #1
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_kill>:

int _kill(int pid, int sig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d46:	f00d f93b 	bl	800ffc0 <__errno>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2216      	movs	r2, #22
 8002d4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_exit>:

void _exit (int status)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffe7 	bl	8002d3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d6e:	e7fe      	b.n	8002d6e <_exit+0x12>

08002d70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e00a      	b.n	8002d98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d82:	f3af 8000 	nop.w
 8002d86:	4601      	mov	r1, r0
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	b2ca      	uxtb	r2, r1
 8002d90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	dbf0      	blt.n	8002d82 <_read+0x12>
	}

return len;
 8002da0:	687b      	ldr	r3, [r7, #4]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e009      	b.n	8002dd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	60ba      	str	r2, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	dbf1      	blt.n	8002dbc <_write+0x12>
	}
	return len;
 8002dd8:	687b      	ldr	r3, [r7, #4]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_close>:

int _close(int file)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	return -1;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <_isatty>:

int _isatty(int file)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
	return 1;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f00d f8a0 	bl	800ffc0 <__errno>
 8002e80:	4603      	mov	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <_sbrk+0x64>)
 8002e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20010000 	.word	0x20010000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	2000020c 	.word	0x2000020c
 8002eb4:	200096f0 	.word	0x200096f0

08002eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ebc:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <SystemInit+0x5c>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <SystemInit+0x5c>)
 8002ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <SystemInit+0x60>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <SystemInit+0x60>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <SystemInit+0x60>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <SystemInit+0x60>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <SystemInit+0x60>)
 8002ee4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002ee8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002eec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <SystemInit+0x60>)
 8002ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ef4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <SystemInit+0x60>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <SystemInit+0x60>)
 8002efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <SystemInit+0x60>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00
 8002f18:	40021000 	.word	0x40021000

08002f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f20:	f7ff ffca 	bl	8002eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f26:	e003      	b.n	8002f30 <LoopCopyDataInit>

08002f28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f2e:	3104      	adds	r1, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f30:	480a      	ldr	r0, [pc, #40]	; (8002f5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f38:	d3f6      	bcc.n	8002f28 <CopyDataInit>
	ldr	r2, =_sbss
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f3c:	e002      	b.n	8002f44 <LoopFillZerobss>

08002f3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f40:	f842 3b04 	str.w	r3, [r2], #4

08002f44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <LoopForever+0x16>)
	cmp	r2, r3
 8002f46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f48:	d3f9      	bcc.n	8002f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f4a:	f00d f83f 	bl	800ffcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f4e:	f7fe fced 	bl	800192c <main>

08002f52 <LoopForever>:

LoopForever:
    b LoopForever
 8002f52:	e7fe      	b.n	8002f52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f54:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002f58:	080138ec 	.word	0x080138ec
	ldr	r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f60:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8002f64:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8002f68:	200096ec 	.word	0x200096ec

08002f6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f6c:	e7fe      	b.n	8002f6c <ADC1_IRQHandler>

08002f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f001 f8cf 	bl	800411c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7ff fe48 	bl	8002c14 <HAL_InitTick>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	71fb      	strb	r3, [r7, #7]
 8002f8e:	e001      	b.n	8002f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f90:	f7ff fbb6 	bl	8002700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f94:	79fb      	ldrb	r3, [r7, #7]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x20>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x24>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <HAL_IncTick+0x24>)
 8002fb2:	6013      	str	r3, [r2, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	20009698 	.word	0x20009698

08002fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return uwTick;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_GetTick+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20009698 	.word	0x20009698

08002fe0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3360      	adds	r3, #96	; 0x60
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <LL_ADC_SetOffset+0x44>)
 800306a:	4013      	ands	r3, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	4313      	orrs	r3, r2
 8003078:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	03fff000 	.word	0x03fff000

08003090 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3360      	adds	r3, #96	; 0x60
 800309e:	461a      	mov	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3360      	adds	r3, #96	; 0x60
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b087      	sub	sp, #28
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3330      	adds	r3, #48	; 0x30
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	4413      	add	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	211f      	movs	r1, #31
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	401a      	ands	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	f003 011f 	and.w	r1, r3, #31
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	431a      	orrs	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800314a:	b480      	push	{r7}
 800314c:	b087      	sub	sp, #28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3314      	adds	r3, #20
 800315a:	461a      	mov	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	0e5b      	lsrs	r3, r3, #25
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	4413      	add	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	0d1b      	lsrs	r3, r3, #20
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2107      	movs	r1, #7
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	401a      	ands	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	0d1b      	lsrs	r3, r3, #20
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	431a      	orrs	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	43db      	mvns	r3, r3
 80031ba:	401a      	ands	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0318 	and.w	r3, r3, #24
 80031c2:	4908      	ldr	r1, [pc, #32]	; (80031e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031c4:	40d9      	lsrs	r1, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	400b      	ands	r3, r1
 80031ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ce:	431a      	orrs	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	0007ffff 	.word	0x0007ffff

080031e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6093      	str	r3, [r2, #8]
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800321c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003220:	d101      	bne.n	8003226 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003248:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003270:	d101      	bne.n	8003276 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <LL_ADC_IsEnabled+0x18>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_ADC_IsEnabled+0x1a>
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d101      	bne.n	80032c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d101      	bne.n	80032e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e12c      	b.n	800356c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fa15 	bl	8002750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff67 	bl	800320c <LL_ADC_IsDeepPowerDownEnabled>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff4d 	bl	80031e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff82 	bl	800325c <LL_ADC_IsInternalRegulatorEnabled>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d115      	bne.n	800338a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff66 	bl	8003234 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003368:	4b82      	ldr	r3, [pc, #520]	; (8003574 <HAL_ADC_Init+0x27c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	4a82      	ldr	r2, [pc, #520]	; (8003578 <HAL_ADC_Init+0x280>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	3301      	adds	r3, #1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800337c:	e002      	b.n	8003384 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3b01      	subs	r3, #1
 8003382:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f9      	bne.n	800337e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff64 	bl	800325c <LL_ADC_IsInternalRegulatorEnabled>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	f043 0210 	orr.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff75 	bl	80032aa <LL_ADC_REG_IsConversionOngoing>
 80033c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 80c5 	bne.w	800355a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 80c1 	bne.w	800355a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033e0:	f043 0202 	orr.w	r2, r3, #2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff49 	bl	8003284 <LL_ADC_IsEnabled>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f8:	4860      	ldr	r0, [pc, #384]	; (800357c <HAL_ADC_Init+0x284>)
 80033fa:	f7ff ff43 	bl	8003284 <LL_ADC_IsEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4619      	mov	r1, r3
 800340a:	485d      	ldr	r0, [pc, #372]	; (8003580 <HAL_ADC_Init+0x288>)
 800340c:	f7ff fde8 	bl	8002fe0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7e5b      	ldrb	r3, [r3, #25]
 8003414:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800341a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003420:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003426:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800342e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d106      	bne.n	800344c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	3b01      	subs	r3, #1
 8003444:	045b      	lsls	r3, r3, #17
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	4b45      	ldr	r3, [pc, #276]	; (8003584 <HAL_ADC_Init+0x28c>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	69b9      	ldr	r1, [r7, #24]
 8003478:	430b      	orrs	r3, r1
 800347a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff12 	bl	80032aa <LL_ADC_REG_IsConversionOngoing>
 8003486:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff1f 	bl	80032d0 <LL_ADC_INJ_IsConversionOngoing>
 8003492:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d13d      	bne.n	8003516 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d13a      	bne.n	8003516 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034bc:	f023 0302 	bic.w	r3, r3, #2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	69b9      	ldr	r1, [r7, #24]
 80034c6:	430b      	orrs	r3, r1
 80034c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d118      	bne.n	8003506 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034ea:	4311      	orrs	r1, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034f0:	4311      	orrs	r1, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034f6:	430a      	orrs	r2, r1
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	611a      	str	r2, [r3, #16]
 8003504:	e007      	b.n	8003516 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10c      	bne.n	8003538 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f023 010f 	bic.w	r1, r3, #15
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
 8003536:	e007      	b.n	8003548 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 020f 	bic.w	r2, r2, #15
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f023 0303 	bic.w	r3, r3, #3
 8003550:	f043 0201 	orr.w	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
 8003558:	e007      	b.n	800356a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f043 0210 	orr.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800356a:	7ffb      	ldrb	r3, [r7, #31]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000000 	.word	0x20000000
 8003578:	053e2d63 	.word	0x053e2d63
 800357c:	50040000 	.word	0x50040000
 8003580:	50040300 	.word	0x50040300
 8003584:	fff0c007 	.word	0xfff0c007

08003588 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b0b6      	sub	sp, #216	; 0xd8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x22>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e3b9      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x796>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fe77 	bl	80032aa <LL_ADC_REG_IsConversionOngoing>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 839e 	bne.w	8003d00 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d824      	bhi.n	8003616 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	3b02      	subs	r3, #2
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d81b      	bhi.n	800360e <HAL_ADC_ConfigChannel+0x86>
 80035d6:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <HAL_ADC_ConfigChannel+0x54>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	080035ed 	.word	0x080035ed
 80035e0:	080035f5 	.word	0x080035f5
 80035e4:	080035fd 	.word	0x080035fd
 80035e8:	08003605 	.word	0x08003605
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	220c      	movs	r2, #12
 80035f0:	605a      	str	r2, [r3, #4]
          break;
 80035f2:	e011      	b.n	8003618 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2212      	movs	r2, #18
 80035f8:	605a      	str	r2, [r3, #4]
          break;
 80035fa:	e00d      	b.n	8003618 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2218      	movs	r2, #24
 8003600:	605a      	str	r2, [r3, #4]
          break;
 8003602:	e009      	b.n	8003618 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800360a:	605a      	str	r2, [r3, #4]
          break;
 800360c:	e004      	b.n	8003618 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2206      	movs	r2, #6
 8003612:	605a      	str	r2, [r3, #4]
          break;
 8003614:	e000      	b.n	8003618 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003616:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	f7ff fd64 	bl	80030f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fe3b 	bl	80032aa <LL_ADC_REG_IsConversionOngoing>
 8003634:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fe47 	bl	80032d0 <LL_ADC_INJ_IsConversionOngoing>
 8003642:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003646:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 81a6 	bne.w	800399c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003654:	2b00      	cmp	r3, #0
 8003656:	f040 81a1 	bne.w	800399c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	461a      	mov	r2, r3
 8003668:	f7ff fd6f 	bl	800314a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d00a      	beq.n	80036a4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6919      	ldr	r1, [r3, #16]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800369e:	f7ff fcd3 	bl	8003048 <LL_ADC_SetOffset>
 80036a2:	e17b      	b.n	800399c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fcf0 	bl	8003090 <LL_ADC_GetOffsetChannel>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x148>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fce5 	bl	8003090 <LL_ADC_GetOffsetChannel>
 80036c6:	4603      	mov	r3, r0
 80036c8:	0e9b      	lsrs	r3, r3, #26
 80036ca:	f003 021f 	and.w	r2, r3, #31
 80036ce:	e01e      	b.n	800370e <HAL_ADC_ConfigChannel+0x186>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fcda 	bl	8003090 <LL_ADC_GetOffsetChannel>
 80036dc:	4603      	mov	r3, r0
 80036de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80036fe:	2320      	movs	r3, #32
 8003700:	e004      	b.n	800370c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003702:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x19e>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0e9b      	lsrs	r3, r3, #26
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	e018      	b.n	8003758 <HAL_ADC_ConfigChannel+0x1d0>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800373a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800373e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800374a:	2320      	movs	r3, #32
 800374c:	e004      	b.n	8003758 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800374e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003758:	429a      	cmp	r2, r3
 800375a:	d106      	bne.n	800376a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2200      	movs	r2, #0
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fca9 	bl	80030bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fc8d 	bl	8003090 <LL_ADC_GetOffsetChannel>
 8003776:	4603      	mov	r3, r0
 8003778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x20e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2101      	movs	r1, #1
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fc82 	bl	8003090 <LL_ADC_GetOffsetChannel>
 800378c:	4603      	mov	r3, r0
 800378e:	0e9b      	lsrs	r3, r3, #26
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	e01e      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x24c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2101      	movs	r1, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fc77 	bl	8003090 <LL_ADC_GetOffsetChannel>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80037c4:	2320      	movs	r3, #32
 80037c6:	e004      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80037c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x264>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	0e9b      	lsrs	r3, r3, #26
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	e018      	b.n	800381e <HAL_ADC_ConfigChannel+0x296>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003800:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003810:	2320      	movs	r3, #32
 8003812:	e004      	b.n	800381e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800381e:	429a      	cmp	r2, r3
 8003820:	d106      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2200      	movs	r2, #0
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fc46 	bl	80030bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2102      	movs	r1, #2
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fc2a 	bl	8003090 <LL_ADC_GetOffsetChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <HAL_ADC_ConfigChannel+0x2d4>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2102      	movs	r1, #2
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fc1f 	bl	8003090 <LL_ADC_GetOffsetChannel>
 8003852:	4603      	mov	r3, r0
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	f003 021f 	and.w	r2, r3, #31
 800385a:	e01e      	b.n	800389a <HAL_ADC_ConfigChannel+0x312>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fc14 	bl	8003090 <LL_ADC_GetOffsetChannel>
 8003868:	4603      	mov	r3, r0
 800386a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800387a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800387e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003882:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800388a:	2320      	movs	r3, #32
 800388c:	e004      	b.n	8003898 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800388e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x32a>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0e9b      	lsrs	r3, r3, #26
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	e016      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x358>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80038d2:	2320      	movs	r3, #32
 80038d4:	e004      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80038d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d106      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fbe5 	bl	80030bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2103      	movs	r1, #3
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fbc9 	bl	8003090 <LL_ADC_GetOffsetChannel>
 80038fe:	4603      	mov	r3, r0
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <HAL_ADC_ConfigChannel+0x396>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2103      	movs	r1, #3
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fbbe 	bl	8003090 <LL_ADC_GetOffsetChannel>
 8003914:	4603      	mov	r3, r0
 8003916:	0e9b      	lsrs	r3, r3, #26
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	e017      	b.n	800394e <HAL_ADC_ConfigChannel+0x3c6>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2103      	movs	r1, #3
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fbb3 	bl	8003090 <LL_ADC_GetOffsetChannel>
 800392a:	4603      	mov	r3, r0
 800392c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003938:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800393a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003940:	2320      	movs	r3, #32
 8003942:	e003      	b.n	800394c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003956:	2b00      	cmp	r3, #0
 8003958:	d105      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x3de>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	0e9b      	lsrs	r3, r3, #26
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	e011      	b.n	800398a <HAL_ADC_ConfigChannel+0x402>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003976:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800397e:	2320      	movs	r3, #32
 8003980:	e003      	b.n	800398a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800398a:	429a      	cmp	r2, r3
 800398c:	d106      	bne.n	800399c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2200      	movs	r2, #0
 8003994:	2103      	movs	r1, #3
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fb90 	bl	80030bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fc6f 	bl	8003284 <LL_ADC_IsEnabled>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f040 813f 	bne.w	8003c2c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f7ff fbf0 	bl	80031a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a8e      	ldr	r2, [pc, #568]	; (8003c00 <HAL_ADC_ConfigChannel+0x678>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	f040 8130 	bne.w	8003c2c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x46c>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0e9b      	lsrs	r3, r3, #26
 80039e2:	3301      	adds	r3, #1
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	2b09      	cmp	r3, #9
 80039ea:	bf94      	ite	ls
 80039ec:	2301      	movls	r3, #1
 80039ee:	2300      	movhi	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e019      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x4a0>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a04:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	e003      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2b09      	cmp	r3, #9
 8003a20:	bf94      	ite	ls
 8003a22:	2301      	movls	r3, #1
 8003a24:	2300      	movhi	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d079      	beq.n	8003b20 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x4c0>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	3301      	adds	r3, #1
 8003a40:	069b      	lsls	r3, r3, #26
 8003a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a46:	e015      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x4ec>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a58:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003a60:	2320      	movs	r3, #32
 8003a62:	e003      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	069b      	lsls	r3, r3, #26
 8003a70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x50c>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0e9b      	lsrs	r3, r3, #26
 8003a86:	3301      	adds	r3, #1
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	e017      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x53c>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003aac:	2320      	movs	r3, #32
 8003aae:	e003      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	2101      	movs	r1, #1
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x562>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	0e9b      	lsrs	r3, r3, #26
 8003ada:	3301      	adds	r3, #1
 8003adc:	f003 021f 	and.w	r2, r3, #31
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	051b      	lsls	r3, r3, #20
 8003ae8:	e018      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x594>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003b02:	2320      	movs	r3, #32
 8003b04:	e003      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	fab3 f383 	clz	r3, r3
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f003 021f 	and.w	r2, r3, #31
 8003b14:	4613      	mov	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	e080      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x5b4>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0e9b      	lsrs	r3, r3, #26
 8003b32:	3301      	adds	r3, #1
 8003b34:	069b      	lsls	r3, r3, #26
 8003b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b3a:	e015      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x5e0>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003b54:	2320      	movs	r3, #32
 8003b56:	e003      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	fab3 f383 	clz	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	069b      	lsls	r3, r3, #26
 8003b64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x600>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0e9b      	lsrs	r3, r3, #26
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2101      	movs	r1, #1
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	e017      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x630>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	61fb      	str	r3, [r7, #28]
  return result;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	e003      	b.n	8003bac <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	ea42 0103 	orr.w	r1, r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10d      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x65c>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0e9b      	lsrs	r3, r3, #26
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4413      	add	r3, r2
 8003bda:	3b1e      	subs	r3, #30
 8003bdc:	051b      	lsls	r3, r3, #20
 8003bde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003be2:	e01d      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x698>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	613b      	str	r3, [r7, #16]
  return result;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e005      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x684>
 8003c00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f003 021f 	and.w	r2, r3, #31
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	3b1e      	subs	r3, #30
 8003c1a:	051b      	lsls	r3, r3, #20
 8003c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c20:	430b      	orrs	r3, r1
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	6892      	ldr	r2, [r2, #8]
 8003c26:	4619      	mov	r1, r3
 8003c28:	f7ff fa8f 	bl	800314a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b3d      	ldr	r3, [pc, #244]	; (8003d28 <HAL_ADC_ConfigChannel+0x7a0>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d06c      	beq.n	8003d12 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c38:	483c      	ldr	r0, [pc, #240]	; (8003d2c <HAL_ADC_ConfigChannel+0x7a4>)
 8003c3a:	f7ff f9f7 	bl	800302c <LL_ADC_GetCommonPathInternalCh>
 8003c3e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3a      	ldr	r2, [pc, #232]	; (8003d30 <HAL_ADC_ConfigChannel+0x7a8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d127      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d121      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a35      	ldr	r2, [pc, #212]	; (8003d34 <HAL_ADC_ConfigChannel+0x7ac>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d157      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	482f      	ldr	r0, [pc, #188]	; (8003d2c <HAL_ADC_ConfigChannel+0x7a4>)
 8003c6e:	f7ff f9ca 	bl	8003006 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c72:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_ADC_ConfigChannel+0x7b0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	4a30      	ldr	r2, [pc, #192]	; (8003d3c <HAL_ADC_ConfigChannel+0x7b4>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	099b      	lsrs	r3, r3, #6
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c8c:	e002      	b.n	8003c94 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f9      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c9a:	e03a      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a27      	ldr	r2, [pc, #156]	; (8003d40 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d113      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x746>
 8003ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10d      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <HAL_ADC_ConfigChannel+0x7ac>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d12a      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4819      	ldr	r0, [pc, #100]	; (8003d2c <HAL_ADC_ConfigChannel+0x7a4>)
 8003cc8:	f7ff f99d 	bl	8003006 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ccc:	e021      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d11c      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d116      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <HAL_ADC_ConfigChannel+0x7ac>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d111      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <HAL_ADC_ConfigChannel+0x7a4>)
 8003cfa:	f7ff f984 	bl	8003006 <LL_ADC_SetCommonPathInternalCh>
 8003cfe:	e008      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	37d8      	adds	r7, #216	; 0xd8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	80080000 	.word	0x80080000
 8003d2c:	50040300 	.word	0x50040300
 8003d30:	c7520000 	.word	0xc7520000
 8003d34:	50040000 	.word	0x50040000
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	053e2d63 	.word	0x053e2d63
 8003d40:	cb840000 	.word	0xcb840000
 8003d44:	80000001 	.word	0x80000001

08003d48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0ed      	b.n	8003f36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe fd30 	bl	80027cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0202 	bic.w	r2, r2, #2
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d7c:	f7ff f924 	bl	8002fc8 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d82:	e012      	b.n	8003daa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d84:	f7ff f920 	bl	8002fc8 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b0a      	cmp	r3, #10
 8003d90:	d90b      	bls.n	8003daa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2205      	movs	r2, #5
 8003da2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0c5      	b.n	8003f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc8:	f7ff f8fe 	bl	8002fc8 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dce:	e012      	b.n	8003df6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dd0:	f7ff f8fa 	bl	8002fc8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b0a      	cmp	r3, #10
 8003ddc:	d90b      	bls.n	8003df6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2205      	movs	r2, #5
 8003dee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e09f      	b.n	8003f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0e5      	beq.n	8003dd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7e1b      	ldrb	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d108      	bne.n	8003e1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e007      	b.n	8003e2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7e5b      	ldrb	r3, [r3, #25]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d108      	bne.n	8003e48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e007      	b.n	8003e58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7e9b      	ldrb	r3, [r3, #26]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d108      	bne.n	8003e72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0220 	orr.w	r2, r2, #32
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	e007      	b.n	8003e82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0220 	bic.w	r2, r2, #32
 8003e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7edb      	ldrb	r3, [r3, #27]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d108      	bne.n	8003e9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0210 	bic.w	r2, r2, #16
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e007      	b.n	8003eac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0210 	orr.w	r2, r2, #16
 8003eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7f1b      	ldrb	r3, [r3, #28]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d108      	bne.n	8003ec6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e007      	b.n	8003ed6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0208 	bic.w	r2, r2, #8
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7f5b      	ldrb	r3, [r3, #29]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d108      	bne.n	8003ef0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0204 	orr.w	r2, r2, #4
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e007      	b.n	8003f00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0204 	bic.w	r2, r2, #4
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	ea42 0103 	orr.w	r1, r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <__NVIC_SetPriorityGrouping+0x44>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <__NVIC_SetPriorityGrouping+0x44>)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	60d3      	str	r3, [r2, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	0a1b      	lsrs	r3, r3, #8
 8003f92:	f003 0307 	and.w	r3, r3, #7
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	db0b      	blt.n	8003fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	f003 021f 	and.w	r2, r3, #31
 8003fbc:	4907      	ldr	r1, [pc, #28]	; (8003fdc <__NVIC_EnableIRQ+0x38>)
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000e100 	.word	0xe000e100

08003fe0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	db0c      	blt.n	800400c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	f003 021f 	and.w	r2, r3, #31
 8003ff8:	4907      	ldr	r1, [pc, #28]	; (8004018 <__NVIC_SetPendingIRQ+0x38>)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2001      	movs	r0, #1
 8004002:	fa00 f202 	lsl.w	r2, r0, r2
 8004006:	3340      	adds	r3, #64	; 0x40
 8004008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000e100 	.word	0xe000e100

0800401c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	6039      	str	r1, [r7, #0]
 8004026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402c:	2b00      	cmp	r3, #0
 800402e:	db0a      	blt.n	8004046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	490c      	ldr	r1, [pc, #48]	; (8004068 <__NVIC_SetPriority+0x4c>)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	0112      	lsls	r2, r2, #4
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	440b      	add	r3, r1
 8004040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004044:	e00a      	b.n	800405c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4908      	ldr	r1, [pc, #32]	; (800406c <__NVIC_SetPriority+0x50>)
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	3b04      	subs	r3, #4
 8004054:	0112      	lsls	r2, r2, #4
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	440b      	add	r3, r1
 800405a:	761a      	strb	r2, [r3, #24]
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000e100 	.word	0xe000e100
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	; 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f1c3 0307 	rsb	r3, r3, #7
 800408a:	2b04      	cmp	r3, #4
 800408c:	bf28      	it	cs
 800408e:	2304      	movcs	r3, #4
 8004090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3304      	adds	r3, #4
 8004096:	2b06      	cmp	r3, #6
 8004098:	d902      	bls.n	80040a0 <NVIC_EncodePriority+0x30>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3b03      	subs	r3, #3
 800409e:	e000      	b.n	80040a2 <NVIC_EncodePriority+0x32>
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a4:	f04f 32ff 	mov.w	r2, #4294967295
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43da      	mvns	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	401a      	ands	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040b8:	f04f 31ff 	mov.w	r1, #4294967295
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	fa01 f303 	lsl.w	r3, r1, r3
 80040c2:	43d9      	mvns	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c8:	4313      	orrs	r3, r2
         );
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3724      	adds	r7, #36	; 0x24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040e8:	d301      	bcc.n	80040ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ea:	2301      	movs	r3, #1
 80040ec:	e00f      	b.n	800410e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ee:	4a0a      	ldr	r2, [pc, #40]	; (8004118 <SysTick_Config+0x40>)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040f6:	210f      	movs	r1, #15
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	f7ff ff8e 	bl	800401c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <SysTick_Config+0x40>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004106:	4b04      	ldr	r3, [pc, #16]	; (8004118 <SysTick_Config+0x40>)
 8004108:	2207      	movs	r2, #7
 800410a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	e000e010 	.word	0xe000e010

0800411c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff0b 	bl	8003f40 <__NVIC_SetPriorityGrouping>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	4603      	mov	r3, r0
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004144:	f7ff ff20 	bl	8003f88 <__NVIC_GetPriorityGrouping>
 8004148:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	6978      	ldr	r0, [r7, #20]
 8004150:	f7ff ff8e 	bl	8004070 <NVIC_EncodePriority>
 8004154:	4602      	mov	r2, r0
 8004156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff ff5d 	bl	800401c <__NVIC_SetPriority>
}
 8004162:	bf00      	nop
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	4603      	mov	r3, r0
 8004172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ff13 	bl	8003fa4 <__NVIC_EnableIRQ>
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ffa2 	bl	80040d8 <SysTick_Config>
 8004194:	4603      	mov	r3, r0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff17 	bl	8003fe0 <__NVIC_SetPendingIRQ>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d106      	bne.n	80041d8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80041d6:	e005      	b.n	80041e4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80041de:	f023 0304 	bic.w	r3, r3, #4
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000e010 	.word	0xe000e010

080041f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e098      	b.n	8004338 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	4b4d      	ldr	r3, [pc, #308]	; (8004344 <HAL_DMA_Init+0x150>)
 800420e:	429a      	cmp	r2, r3
 8004210:	d80f      	bhi.n	8004232 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_DMA_Init+0x154>)
 800421a:	4413      	add	r3, r2
 800421c:	4a4b      	ldr	r2, [pc, #300]	; (800434c <HAL_DMA_Init+0x158>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	009a      	lsls	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a48      	ldr	r2, [pc, #288]	; (8004350 <HAL_DMA_Init+0x15c>)
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
 8004230:	e00e      	b.n	8004250 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	4b46      	ldr	r3, [pc, #280]	; (8004354 <HAL_DMA_Init+0x160>)
 800423a:	4413      	add	r3, r2
 800423c:	4a43      	ldr	r2, [pc, #268]	; (800434c <HAL_DMA_Init+0x158>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	009a      	lsls	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a42      	ldr	r2, [pc, #264]	; (8004358 <HAL_DMA_Init+0x164>)
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800428c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042aa:	d039      	beq.n	8004320 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	4a27      	ldr	r2, [pc, #156]	; (8004350 <HAL_DMA_Init+0x15c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d11a      	bne.n	80042ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <HAL_DMA_Init+0x168>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	f003 031c 	and.w	r3, r3, #28
 80042c2:	210f      	movs	r1, #15
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	4924      	ldr	r1, [pc, #144]	; (800435c <HAL_DMA_Init+0x168>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042d0:	4b22      	ldr	r3, [pc, #136]	; (800435c <HAL_DMA_Init+0x168>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	f003 031c 	and.w	r3, r3, #28
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	491d      	ldr	r1, [pc, #116]	; (800435c <HAL_DMA_Init+0x168>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
 80042ea:	e019      	b.n	8004320 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042ec:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <HAL_DMA_Init+0x16c>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f003 031c 	and.w	r3, r3, #28
 80042f8:	210f      	movs	r1, #15
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	4917      	ldr	r1, [pc, #92]	; (8004360 <HAL_DMA_Init+0x16c>)
 8004302:	4013      	ands	r3, r2
 8004304:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004306:	4b16      	ldr	r3, [pc, #88]	; (8004360 <HAL_DMA_Init+0x16c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f003 031c 	and.w	r3, r3, #28
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	4911      	ldr	r1, [pc, #68]	; (8004360 <HAL_DMA_Init+0x16c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40020407 	.word	0x40020407
 8004348:	bffdfff8 	.word	0xbffdfff8
 800434c:	cccccccd 	.word	0xcccccccd
 8004350:	40020000 	.word	0x40020000
 8004354:	bffdfbf8 	.word	0xbffdfbf8
 8004358:	40020400 	.word	0x40020400
 800435c:	400200a8 	.word	0x400200a8
 8004360:	400204a8 	.word	0x400204a8

08004364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	f003 031c 	and.w	r3, r3, #28
 8004384:	2204      	movs	r2, #4
 8004386:	409a      	lsls	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d026      	beq.n	80043de <HAL_DMA_IRQHandler+0x7a>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d021      	beq.n	80043de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0204 	bic.w	r2, r2, #4
 80043b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	f003 021c 	and.w	r2, r3, #28
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	2104      	movs	r1, #4
 80043c6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d071      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80043dc:	e06c      	b.n	80044b8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	f003 031c 	and.w	r3, r3, #28
 80043e6:	2202      	movs	r2, #2
 80043e8:	409a      	lsls	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d02e      	beq.n	8004450 <HAL_DMA_IRQHandler+0xec>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d029      	beq.n	8004450 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10b      	bne.n	8004422 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 020a 	bic.w	r2, r2, #10
 8004418:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	f003 021c 	and.w	r2, r3, #28
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2102      	movs	r1, #2
 8004430:	fa01 f202 	lsl.w	r2, r1, r2
 8004434:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d038      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800444e:	e033      	b.n	80044b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	f003 031c 	and.w	r3, r3, #28
 8004458:	2208      	movs	r2, #8
 800445a:	409a      	lsls	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02a      	beq.n	80044ba <HAL_DMA_IRQHandler+0x156>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d025      	beq.n	80044ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 020e 	bic.w	r2, r2, #14
 800447c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	f003 021c 	and.w	r2, r3, #28
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	2101      	movs	r1, #1
 800448c:	fa01 f202 	lsl.w	r2, r1, r2
 8004490:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d004      	beq.n	80044ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
}
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d2:	e148      	b.n	8004766 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 813a 	beq.w	8004760 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d00b      	beq.n	800450c <HAL_GPIO_Init+0x48>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d007      	beq.n	800450c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004500:	2b11      	cmp	r3, #17
 8004502:	d003      	beq.n	800450c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b12      	cmp	r3, #18
 800450a:	d130      	bne.n	800456e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2203      	movs	r2, #3
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4013      	ands	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004542:	2201      	movs	r2, #1
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	f003 0201 	and.w	r2, r3, #1
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	2203      	movs	r2, #3
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0xea>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b12      	cmp	r3, #18
 80045ac:	d123      	bne.n	80045f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	08da      	lsrs	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3208      	adds	r2, #8
 80045b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	220f      	movs	r2, #15
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	08da      	lsrs	r2, r3, #3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3208      	adds	r2, #8
 80045f0:	6939      	ldr	r1, [r7, #16]
 80045f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	2203      	movs	r2, #3
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0203 	and.w	r2, r3, #3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8094 	beq.w	8004760 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004638:	4b52      	ldr	r3, [pc, #328]	; (8004784 <HAL_GPIO_Init+0x2c0>)
 800463a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463c:	4a51      	ldr	r2, [pc, #324]	; (8004784 <HAL_GPIO_Init+0x2c0>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6613      	str	r3, [r2, #96]	; 0x60
 8004644:	4b4f      	ldr	r3, [pc, #316]	; (8004784 <HAL_GPIO_Init+0x2c0>)
 8004646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004650:	4a4d      	ldr	r2, [pc, #308]	; (8004788 <HAL_GPIO_Init+0x2c4>)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	3302      	adds	r3, #2
 8004658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	220f      	movs	r2, #15
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800467a:	d00d      	beq.n	8004698 <HAL_GPIO_Init+0x1d4>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a43      	ldr	r2, [pc, #268]	; (800478c <HAL_GPIO_Init+0x2c8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <HAL_GPIO_Init+0x1d0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a42      	ldr	r2, [pc, #264]	; (8004790 <HAL_GPIO_Init+0x2cc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d101      	bne.n	8004690 <HAL_GPIO_Init+0x1cc>
 800468c:	2302      	movs	r3, #2
 800468e:	e004      	b.n	800469a <HAL_GPIO_Init+0x1d6>
 8004690:	2307      	movs	r3, #7
 8004692:	e002      	b.n	800469a <HAL_GPIO_Init+0x1d6>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_GPIO_Init+0x1d6>
 8004698:	2300      	movs	r3, #0
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	f002 0203 	and.w	r2, r2, #3
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	4093      	lsls	r3, r2
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046aa:	4937      	ldr	r1, [pc, #220]	; (8004788 <HAL_GPIO_Init+0x2c4>)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	3302      	adds	r3, #2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046b8:	4b36      	ldr	r3, [pc, #216]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046dc:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80046e2:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004706:	4a23      	ldr	r2, [pc, #140]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800470c:	4b21      	ldr	r3, [pc, #132]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004736:	4b17      	ldr	r3, [pc, #92]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	43db      	mvns	r3, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800475a:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	3301      	adds	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	f47f aeaf 	bne.w	80044d4 <HAL_GPIO_Init+0x10>
  }
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40021000 	.word	0x40021000
 8004788:	40010000 	.word	0x40010000
 800478c:	48000400 	.word	0x48000400
 8004790:	48000800 	.word	0x48000800
 8004794:	40010400 	.word	0x40010400

08004798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
 80047a4:	4613      	mov	r3, r2
 80047a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047a8:	787b      	ldrb	r3, [r7, #1]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047b4:	e002      	b.n	80047bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e081      	b.n	80048de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fe f840 	bl	8002874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004818:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004828:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d107      	bne.n	8004842 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	e006      	b.n	8004850 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800484e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d104      	bne.n	8004862 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004874:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004884:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	ea42 0103 	orr.w	r1, r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	021a      	lsls	r2, r3, #8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69d9      	ldr	r1, [r3, #28]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	461a      	mov	r2, r3
 80048f4:	460b      	mov	r3, r1
 80048f6:	817b      	strh	r3, [r7, #10]
 80048f8:	4613      	mov	r3, r2
 80048fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b20      	cmp	r3, #32
 8004906:	f040 80da 	bne.w	8004abe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2C_Master_Transmit+0x30>
 8004914:	2302      	movs	r3, #2
 8004916:	e0d3      	b.n	8004ac0 <HAL_I2C_Master_Transmit+0x1d8>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004920:	f7fe fb52 	bl	8002fc8 <HAL_GetTick>
 8004924:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	2319      	movs	r3, #25
 800492c:	2201      	movs	r2, #1
 800492e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 faed 	bl	8004f12 <I2C_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0be      	b.n	8004ac0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2221      	movs	r2, #33	; 0x21
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2210      	movs	r2, #16
 800494e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	893a      	ldrh	r2, [r7, #8]
 8004962:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	2bff      	cmp	r3, #255	; 0xff
 8004972:	d90e      	bls.n	8004992 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	22ff      	movs	r2, #255	; 0xff
 8004978:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497e:	b2da      	uxtb	r2, r3
 8004980:	8979      	ldrh	r1, [r7, #10]
 8004982:	4b51      	ldr	r3, [pc, #324]	; (8004ac8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fc50 	bl	8005230 <I2C_TransferConfig>
 8004990:	e06c      	b.n	8004a6c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	8979      	ldrh	r1, [r7, #10]
 80049a4:	4b48      	ldr	r3, [pc, #288]	; (8004ac8 <HAL_I2C_Master_Transmit+0x1e0>)
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fc3f 	bl	8005230 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80049b2:	e05b      	b.n	8004a6c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	6a39      	ldr	r1, [r7, #32]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 faea 	bl	8004f92 <I2C_WaitOnTXISFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e07b      	b.n	8004ac0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	781a      	ldrb	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d034      	beq.n	8004a6c <HAL_I2C_Master_Transmit+0x184>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d130      	bne.n	8004a6c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2180      	movs	r1, #128	; 0x80
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fa7c 	bl	8004f12 <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e04d      	b.n	8004ac0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2bff      	cmp	r3, #255	; 0xff
 8004a2c:	d90e      	bls.n	8004a4c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	22ff      	movs	r2, #255	; 0xff
 8004a32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	8979      	ldrh	r1, [r7, #10]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fbf3 	bl	8005230 <I2C_TransferConfig>
 8004a4a:	e00f      	b.n	8004a6c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	8979      	ldrh	r1, [r7, #10]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fbe2 	bl	8005230 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d19e      	bne.n	80049b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	6a39      	ldr	r1, [r7, #32]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fac9 	bl	8005012 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e01a      	b.n	8004ac0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_I2C_Master_Transmit+0x1e4>)
 8004a9e:	400b      	ands	r3, r1
 8004aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e000      	b.n	8004ac0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	80002000 	.word	0x80002000
 8004acc:	fe00e800 	.word	0xfe00e800

08004ad0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	461a      	mov	r2, r3
 8004adc:	460b      	mov	r3, r1
 8004ade:	817b      	strh	r3, [r7, #10]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	f040 80db 	bne.w	8004ca8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_I2C_Master_Receive+0x30>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0d4      	b.n	8004caa <HAL_I2C_Master_Receive+0x1da>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b08:	f7fe fa5e 	bl	8002fc8 <HAL_GetTick>
 8004b0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	2319      	movs	r3, #25
 8004b14:	2201      	movs	r2, #1
 8004b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f9f9 	bl	8004f12 <I2C_WaitOnFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0bf      	b.n	8004caa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2222      	movs	r2, #34	; 0x22
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2210      	movs	r2, #16
 8004b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	893a      	ldrh	r2, [r7, #8]
 8004b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2bff      	cmp	r3, #255	; 0xff
 8004b5a:	d90e      	bls.n	8004b7a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	22ff      	movs	r2, #255	; 0xff
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	8979      	ldrh	r1, [r7, #10]
 8004b6a:	4b52      	ldr	r3, [pc, #328]	; (8004cb4 <HAL_I2C_Master_Receive+0x1e4>)
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fb5c 	bl	8005230 <I2C_TransferConfig>
 8004b78:	e06d      	b.n	8004c56 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	8979      	ldrh	r1, [r7, #10]
 8004b8c:	4b49      	ldr	r3, [pc, #292]	; (8004cb4 <HAL_I2C_Master_Receive+0x1e4>)
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fb4b 	bl	8005230 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004b9a:	e05c      	b.n	8004c56 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	6a39      	ldr	r1, [r7, #32]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fa73 	bl	800508c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e07c      	b.n	8004caa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d034      	beq.n	8004c56 <HAL_I2C_Master_Receive+0x186>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d130      	bne.n	8004c56 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2180      	movs	r1, #128	; 0x80
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f987 	bl	8004f12 <I2C_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e04d      	b.n	8004caa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2bff      	cmp	r3, #255	; 0xff
 8004c16:	d90e      	bls.n	8004c36 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	22ff      	movs	r2, #255	; 0xff
 8004c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	8979      	ldrh	r1, [r7, #10]
 8004c26:	2300      	movs	r3, #0
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fafe 	bl	8005230 <I2C_TransferConfig>
 8004c34:	e00f      	b.n	8004c56 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	8979      	ldrh	r1, [r7, #10]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 faed 	bl	8005230 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d19d      	bne.n	8004b9c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	6a39      	ldr	r1, [r7, #32]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f9d4 	bl	8005012 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e01a      	b.n	8004caa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <HAL_I2C_Master_Receive+0x1e8>)
 8004c88:	400b      	ands	r3, r1
 8004c8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e000      	b.n	8004caa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	80002400 	.word	0x80002400
 8004cb8:	fe00e800 	.word	0xfe00e800

08004cbc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	f040 80f1 	bne.w	8004ec0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0e7      	b.n	8004ec2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_I2C_IsDeviceReady+0x44>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e0e0      	b.n	8004ec2 <HAL_I2C_IsDeviceReady+0x206>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d107      	bne.n	8004d2e <HAL_I2C_IsDeviceReady+0x72>
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d2c:	e004      	b.n	8004d38 <HAL_I2C_IsDeviceReady+0x7c>
 8004d2e:	897b      	ldrh	r3, [r7, #10]
 8004d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d34:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004d3e:	f7fe f943 	bl	8002fc8 <HAL_GetTick>
 8004d42:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d70:	e034      	b.n	8004ddc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d01a      	beq.n	8004db0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fe f925 	bl	8002fc8 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <HAL_I2C_IsDeviceReady+0xd4>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10f      	bne.n	8004db0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e088      	b.n	8004ec2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2301      	moveq	r3, #1
 8004dc0:	2300      	movne	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004ddc:	7ffb      	ldrb	r3, [r7, #31]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_I2C_IsDeviceReady+0x12c>
 8004de2:	7fbb      	ldrb	r3, [r7, #30]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0c4      	beq.n	8004d72 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d01a      	beq.n	8004e2c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2120      	movs	r1, #32
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f886 	bl	8004f12 <I2C_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e058      	b.n	8004ec2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2220      	movs	r2, #32
 8004e16:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e04a      	b.n	8004ec2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2120      	movs	r1, #32
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f86b 	bl	8004f12 <I2C_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e03d      	b.n	8004ec2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2210      	movs	r2, #16
 8004e4c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2220      	movs	r2, #32
 8004e54:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d118      	bne.n	8004e90 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2120      	movs	r1, #32
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f84a 	bl	8004f12 <I2C_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e01c      	b.n	8004ec2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3301      	adds	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	f63f af3b 	bhi.w	8004d16 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d103      	bne.n	8004ee8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d007      	beq.n	8004f06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	619a      	str	r2, [r3, #24]
  }
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f22:	e022      	b.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d01e      	beq.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7fe f84c 	bl	8002fc8 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d113      	bne.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e00f      	b.n	8004f8a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d0cd      	beq.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f9e:	e02c      	b.n	8004ffa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f8dd 	bl	8005164 <I2C_IsAcknowledgeFailed>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e02a      	b.n	800500a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d01e      	beq.n	8004ffa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbc:	f7fe f804 	bl	8002fc8 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d113      	bne.n	8004ffa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e007      	b.n	800500a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d1cb      	bne.n	8004fa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501e:	e028      	b.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f89d 	bl	8005164 <I2C_IsAcknowledgeFailed>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e026      	b.n	8005082 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005034:	f7fd ffc8 	bl	8002fc8 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	d302      	bcc.n	800504a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d113      	bne.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e007      	b.n	8005082 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b20      	cmp	r3, #32
 800507e:	d1cf      	bne.n	8005020 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005098:	e055      	b.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f860 	bl	8005164 <I2C_IsAcknowledgeFailed>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e053      	b.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d129      	bne.n	8005110 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d105      	bne.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e03f      	b.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2220      	movs	r2, #32
 80050dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6859      	ldr	r1, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80050ea:	400b      	ands	r3, r1
 80050ec:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e022      	b.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005110:	f7fd ff5a 	bl	8002fc8 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10f      	bne.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e007      	b.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d1a2      	bne.n	800509a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	fe00e800 	.word	0xfe00e800

08005164 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b10      	cmp	r3, #16
 800517c:	d151      	bne.n	8005222 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800517e:	e022      	b.n	80051c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d01e      	beq.n	80051c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005188:	f7fd ff1e 	bl	8002fc8 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	429a      	cmp	r2, r3
 8005196:	d302      	bcc.n	800519e <I2C_IsAcknowledgeFailed+0x3a>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d113      	bne.n	80051c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e02e      	b.n	8005224 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d1d5      	bne.n	8005180 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2210      	movs	r2, #16
 80051da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2220      	movs	r2, #32
 80051e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff fe70 	bl	8004eca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6859      	ldr	r1, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <I2C_IsAcknowledgeFailed+0xc8>)
 80051f6:	400b      	ands	r3, r1
 80051f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	f043 0204 	orr.w	r2, r3, #4
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	fe00e800 	.word	0xfe00e800

08005230 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	607b      	str	r3, [r7, #4]
 800523a:	460b      	mov	r3, r1
 800523c:	817b      	strh	r3, [r7, #10]
 800523e:	4613      	mov	r3, r2
 8005240:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	0d5b      	lsrs	r3, r3, #21
 800524c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005250:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <I2C_TransferConfig+0x58>)
 8005252:	430b      	orrs	r3, r1
 8005254:	43db      	mvns	r3, r3
 8005256:	ea02 0103 	and.w	r1, r2, r3
 800525a:	897b      	ldrh	r3, [r7, #10]
 800525c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005260:	7a7b      	ldrb	r3, [r7, #9]
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	431a      	orrs	r2, r3
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	03ff63ff 	.word	0x03ff63ff

0800528c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d138      	bne.n	8005314 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e032      	b.n	8005316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2224      	movs	r2, #36	; 0x24
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e000      	b.n	8005316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005314:	2302      	movs	r3, #2
  }
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b20      	cmp	r3, #32
 8005336:	d139      	bne.n	80053ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005342:	2302      	movs	r3, #2
 8005344:	e033      	b.n	80053ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2224      	movs	r2, #36	; 0x24
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005374:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a04      	ldr	r2, [pc, #16]	; (80053d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ca:	6013      	str	r3, [r2, #0]
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40007000 	.word	0x40007000

080053dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40007000 	.word	0x40007000

080053f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005406:	d130      	bne.n	800546a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005408:	4b23      	ldr	r3, [pc, #140]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005414:	d038      	beq.n	8005488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005416:	4b20      	ldr	r3, [pc, #128]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800541e:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005424:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005426:	4b1d      	ldr	r3, [pc, #116]	; (800549c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2232      	movs	r2, #50	; 0x32
 800542c:	fb02 f303 	mul.w	r3, r2, r3
 8005430:	4a1b      	ldr	r2, [pc, #108]	; (80054a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	0c9b      	lsrs	r3, r3, #18
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800543c:	e002      	b.n	8005444 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3b01      	subs	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005444:	4b14      	ldr	r3, [pc, #80]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005450:	d102      	bne.n	8005458 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f2      	bne.n	800543e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005464:	d110      	bne.n	8005488 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e00f      	b.n	800548a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800546a:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005476:	d007      	beq.n	8005488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005478:	4b07      	ldr	r3, [pc, #28]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005480:	4a05      	ldr	r2, [pc, #20]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005486:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40007000 	.word	0x40007000
 800549c:	20000000 	.word	0x20000000
 80054a0:	431bde83 	.word	0x431bde83

080054a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f000 bc11 	b.w	8005cda <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b8:	4ba0      	ldr	r3, [pc, #640]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 030c 	and.w	r3, r3, #12
 80054c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054c2:	4b9e      	ldr	r3, [pc, #632]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80e4 	beq.w	80056a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <HAL_RCC_OscConfig+0x4c>
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b0c      	cmp	r3, #12
 80054e4:	f040 808b 	bne.w	80055fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	f040 8087 	bne.w	80055fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054f0:	4b92      	ldr	r3, [pc, #584]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_RCC_OscConfig+0x64>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e3e8      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	4b8b      	ldr	r3, [pc, #556]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <HAL_RCC_OscConfig+0x7e>
 8005518:	4b88      	ldr	r3, [pc, #544]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005520:	e005      	b.n	800552e <HAL_RCC_OscConfig+0x8a>
 8005522:	4b86      	ldr	r3, [pc, #536]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800552e:	4293      	cmp	r3, r2
 8005530:	d223      	bcs.n	800557a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fdaa 	bl	8006090 <RCC_SetFlashLatencyFromMSIRange>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e3c9      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005546:	4b7d      	ldr	r3, [pc, #500]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a7c      	ldr	r2, [pc, #496]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800554c:	f043 0308 	orr.w	r3, r3, #8
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	4b7a      	ldr	r3, [pc, #488]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4977      	ldr	r1, [pc, #476]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005564:	4b75      	ldr	r3, [pc, #468]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	4972      	ldr	r1, [pc, #456]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005574:	4313      	orrs	r3, r2
 8005576:	604b      	str	r3, [r1, #4]
 8005578:	e025      	b.n	80055c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800557a:	4b70      	ldr	r3, [pc, #448]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a6f      	ldr	r2, [pc, #444]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005580:	f043 0308 	orr.w	r3, r3, #8
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b6d      	ldr	r3, [pc, #436]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	496a      	ldr	r1, [pc, #424]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005598:	4b68      	ldr	r3, [pc, #416]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	4965      	ldr	r1, [pc, #404]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fd6a 	bl	8006090 <RCC_SetFlashLatencyFromMSIRange>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e389      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055c6:	f000 fc6f 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 80055ca:	4602      	mov	r2, r0
 80055cc:	4b5b      	ldr	r3, [pc, #364]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	091b      	lsrs	r3, r3, #4
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	495a      	ldr	r1, [pc, #360]	; (8005740 <HAL_RCC_OscConfig+0x29c>)
 80055d8:	5ccb      	ldrb	r3, [r1, r3]
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	fa22 f303 	lsr.w	r3, r2, r3
 80055e2:	4a58      	ldr	r2, [pc, #352]	; (8005744 <HAL_RCC_OscConfig+0x2a0>)
 80055e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055e6:	4b58      	ldr	r3, [pc, #352]	; (8005748 <HAL_RCC_OscConfig+0x2a4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fd fb12 	bl	8002c14 <HAL_InitTick>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d052      	beq.n	80056a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	e36d      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d032      	beq.n	800566c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005606:	4b4d      	ldr	r3, [pc, #308]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a4c      	ldr	r2, [pc, #304]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005612:	f7fd fcd9 	bl	8002fc8 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800561a:	f7fd fcd5 	bl	8002fc8 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e356      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800562c:	4b43      	ldr	r3, [pc, #268]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005638:	4b40      	ldr	r3, [pc, #256]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a3f      	ldr	r2, [pc, #252]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800563e:	f043 0308 	orr.w	r3, r3, #8
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	4b3d      	ldr	r3, [pc, #244]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	493a      	ldr	r1, [pc, #232]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005656:	4b39      	ldr	r3, [pc, #228]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	4935      	ldr	r1, [pc, #212]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005666:	4313      	orrs	r3, r2
 8005668:	604b      	str	r3, [r1, #4]
 800566a:	e01a      	b.n	80056a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800566c:	4b33      	ldr	r3, [pc, #204]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a32      	ldr	r2, [pc, #200]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005678:	f7fd fca6 	bl	8002fc8 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005680:	f7fd fca2 	bl	8002fc8 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e323      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005692:	4b2a      	ldr	r3, [pc, #168]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <HAL_RCC_OscConfig+0x1dc>
 800569e:	e000      	b.n	80056a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d073      	beq.n	8005796 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d005      	beq.n	80056c0 <HAL_RCC_OscConfig+0x21c>
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b0c      	cmp	r3, #12
 80056b8:	d10e      	bne.n	80056d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d10b      	bne.n	80056d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c0:	4b1e      	ldr	r3, [pc, #120]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d063      	beq.n	8005794 <HAL_RCC_OscConfig+0x2f0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d15f      	bne.n	8005794 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e300      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e0:	d106      	bne.n	80056f0 <HAL_RCC_OscConfig+0x24c>
 80056e2:	4b16      	ldr	r3, [pc, #88]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a15      	ldr	r2, [pc, #84]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e01d      	b.n	800572c <HAL_RCC_OscConfig+0x288>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056f8:	d10c      	bne.n	8005714 <HAL_RCC_OscConfig+0x270>
 80056fa:	4b10      	ldr	r3, [pc, #64]	; (800573c <HAL_RCC_OscConfig+0x298>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a0f      	ldr	r2, [pc, #60]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a0c      	ldr	r2, [pc, #48]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800570c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e00b      	b.n	800572c <HAL_RCC_OscConfig+0x288>
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <HAL_RCC_OscConfig+0x298>)
 800571a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a05      	ldr	r2, [pc, #20]	; (800573c <HAL_RCC_OscConfig+0x298>)
 8005726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800572a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fd fc48 	bl	8002fc8 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800573a:	e010      	b.n	800575e <HAL_RCC_OscConfig+0x2ba>
 800573c:	40021000 	.word	0x40021000
 8005740:	08012ed4 	.word	0x08012ed4
 8005744:	20000000 	.word	0x20000000
 8005748:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800574c:	f7fd fc3c 	bl	8002fc8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e2bd      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800575e:	4baf      	ldr	r3, [pc, #700]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0x2a8>
 800576a:	e014      	b.n	8005796 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fd fc2c 	bl	8002fc8 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005774:	f7fd fc28 	bl	8002fc8 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	; 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e2a9      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005786:	4ba5      	ldr	r3, [pc, #660]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x2d0>
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d060      	beq.n	8005864 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_OscConfig+0x310>
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d119      	bne.n	80057e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d116      	bne.n	80057e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057b4:	4b99      	ldr	r3, [pc, #612]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_RCC_OscConfig+0x328>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e286      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057cc:	4b93      	ldr	r3, [pc, #588]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	4990      	ldr	r1, [pc, #576]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e0:	e040      	b.n	8005864 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d023      	beq.n	8005832 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ea:	4b8c      	ldr	r3, [pc, #560]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a8b      	ldr	r2, [pc, #556]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80057f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f6:	f7fd fbe7 	bl	8002fc8 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057fe:	f7fd fbe3 	bl	8002fc8 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e264      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005810:	4b82      	ldr	r3, [pc, #520]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581c:	4b7f      	ldr	r3, [pc, #508]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	061b      	lsls	r3, r3, #24
 800582a:	497c      	ldr	r1, [pc, #496]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800582c:	4313      	orrs	r3, r2
 800582e:	604b      	str	r3, [r1, #4]
 8005830:	e018      	b.n	8005864 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005832:	4b7a      	ldr	r3, [pc, #488]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a79      	ldr	r2, [pc, #484]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800583c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583e:	f7fd fbc3 	bl	8002fc8 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005846:	f7fd fbbf 	bl	8002fc8 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e240      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005858:	4b70      	ldr	r3, [pc, #448]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d03c      	beq.n	80058ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01c      	beq.n	80058b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005878:	4b68      	ldr	r3, [pc, #416]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587e:	4a67      	ldr	r2, [pc, #412]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005888:	f7fd fb9e 	bl	8002fc8 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005890:	f7fd fb9a 	bl	8002fc8 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e21b      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058a2:	4b5e      	ldr	r3, [pc, #376]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0ef      	beq.n	8005890 <HAL_RCC_OscConfig+0x3ec>
 80058b0:	e01b      	b.n	80058ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058b2:	4b5a      	ldr	r3, [pc, #360]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b8:	4a58      	ldr	r2, [pc, #352]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c2:	f7fd fb81 	bl	8002fc8 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ca:	f7fd fb7d 	bl	8002fc8 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e1fe      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058dc:	4b4f      	ldr	r3, [pc, #316]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ef      	bne.n	80058ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80a6 	beq.w	8005a44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f8:	2300      	movs	r3, #0
 80058fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058fc:	4b47      	ldr	r3, [pc, #284]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80058fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10d      	bne.n	8005924 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005908:	4b44      	ldr	r3, [pc, #272]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	4a43      	ldr	r2, [pc, #268]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800590e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005912:	6593      	str	r3, [r2, #88]	; 0x58
 8005914:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005920:	2301      	movs	r3, #1
 8005922:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005924:	4b3e      	ldr	r3, [pc, #248]	; (8005a20 <HAL_RCC_OscConfig+0x57c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d118      	bne.n	8005962 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005930:	4b3b      	ldr	r3, [pc, #236]	; (8005a20 <HAL_RCC_OscConfig+0x57c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a3a      	ldr	r2, [pc, #232]	; (8005a20 <HAL_RCC_OscConfig+0x57c>)
 8005936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800593c:	f7fd fb44 	bl	8002fc8 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005944:	f7fd fb40 	bl	8002fc8 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e1c1      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005956:	4b32      	ldr	r3, [pc, #200]	; (8005a20 <HAL_RCC_OscConfig+0x57c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d108      	bne.n	800597c <HAL_RCC_OscConfig+0x4d8>
 800596a:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005970:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800597a:	e024      	b.n	80059c6 <HAL_RCC_OscConfig+0x522>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b05      	cmp	r3, #5
 8005982:	d110      	bne.n	80059a6 <HAL_RCC_OscConfig+0x502>
 8005984:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800598c:	f043 0304 	orr.w	r3, r3, #4
 8005990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005994:	4b21      	ldr	r3, [pc, #132]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	4a20      	ldr	r2, [pc, #128]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059a4:	e00f      	b.n	80059c6 <HAL_RCC_OscConfig+0x522>
 80059a6:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ac:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b6:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059bc:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059be:	f023 0304 	bic.w	r3, r3, #4
 80059c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ce:	f7fd fafb 	bl	8002fc8 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fd faf7 	bl	8002fc8 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e176      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_OscConfig+0x578>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0ed      	beq.n	80059d6 <HAL_RCC_OscConfig+0x532>
 80059fa:	e01a      	b.n	8005a32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fd fae4 	bl	8002fc8 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a02:	e00f      	b.n	8005a24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7fd fae0 	bl	8002fc8 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d906      	bls.n	8005a24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e15f      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
 8005a1a:	bf00      	nop
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a24:	4baa      	ldr	r3, [pc, #680]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e8      	bne.n	8005a04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a32:	7ffb      	ldrb	r3, [r7, #31]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d105      	bne.n	8005a44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a38:	4ba5      	ldr	r3, [pc, #660]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3c:	4aa4      	ldr	r2, [pc, #656]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d03c      	beq.n	8005aca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01c      	beq.n	8005a92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a58:	4b9d      	ldr	r3, [pc, #628]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a5e:	4a9c      	ldr	r2, [pc, #624]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fd faae 	bl	8002fc8 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a70:	f7fd faaa 	bl	8002fc8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e12b      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a82:	4b93      	ldr	r3, [pc, #588]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0ef      	beq.n	8005a70 <HAL_RCC_OscConfig+0x5cc>
 8005a90:	e01b      	b.n	8005aca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a92:	4b8f      	ldr	r3, [pc, #572]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a98:	4a8d      	ldr	r2, [pc, #564]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa2:	f7fd fa91 	bl	8002fc8 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aaa:	f7fd fa8d 	bl	8002fc8 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e10e      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005abc:	4b84      	ldr	r3, [pc, #528]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1ef      	bne.n	8005aaa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8102 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	f040 80c5 	bne.w	8005c68 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005ade:	4b7c      	ldr	r3, [pc, #496]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f003 0203 	and.w	r2, r3, #3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d12c      	bne.n	8005b4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	3b01      	subs	r3, #1
 8005afe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d123      	bne.n	8005b4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d11b      	bne.n	8005b4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d113      	bne.n	8005b4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	3b01      	subs	r3, #1
 8005b32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d109      	bne.n	8005b4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	3b01      	subs	r3, #1
 8005b46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d067      	beq.n	8005c1c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b0c      	cmp	r3, #12
 8005b50:	d062      	beq.n	8005c18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b52:	4b5f      	ldr	r3, [pc, #380]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e0bb      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b62:	4b5b      	ldr	r3, [pc, #364]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a5a      	ldr	r2, [pc, #360]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b6e:	f7fd fa2b 	bl	8002fc8 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b76:	f7fd fa27 	bl	8002fc8 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e0a8      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b88:	4b51      	ldr	r3, [pc, #324]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f0      	bne.n	8005b76 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b94:	4b4e      	ldr	r3, [pc, #312]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	4b4e      	ldr	r3, [pc, #312]	; (8005cd4 <HAL_RCC_OscConfig+0x830>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ba4:	3a01      	subs	r2, #1
 8005ba6:	0112      	lsls	r2, r2, #4
 8005ba8:	4311      	orrs	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bae:	0212      	lsls	r2, r2, #8
 8005bb0:	4311      	orrs	r1, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bb6:	0852      	lsrs	r2, r2, #1
 8005bb8:	3a01      	subs	r2, #1
 8005bba:	0552      	lsls	r2, r2, #21
 8005bbc:	4311      	orrs	r1, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bc2:	0852      	lsrs	r2, r2, #1
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	0652      	lsls	r2, r2, #25
 8005bc8:	4311      	orrs	r1, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bce:	06d2      	lsls	r2, r2, #27
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	493f      	ldr	r1, [pc, #252]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005bd8:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3c      	ldr	r2, [pc, #240]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005be4:	4b3a      	ldr	r3, [pc, #232]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4a39      	ldr	r2, [pc, #228]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bf0:	f7fd f9ea 	bl	8002fc8 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf8:	f7fd f9e6 	bl	8002fc8 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e067      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c0a:	4b31      	ldr	r3, [pc, #196]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c16:	e05f      	b.n	8005cd8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e05e      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c1c:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d157      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c28:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c34:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4a25      	ldr	r2, [pc, #148]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c40:	f7fd f9c2 	bl	8002fc8 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c48:	f7fd f9be 	bl	8002fc8 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e03f      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0x7a4>
 8005c66:	e037      	b.n	8005cd8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b0c      	cmp	r3, #12
 8005c6c:	d02d      	beq.n	8005cca <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	4b18      	ldr	r3, [pc, #96]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c78:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d105      	bne.n	8005c92 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4a11      	ldr	r2, [pc, #68]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c8c:	f023 0303 	bic.w	r3, r3, #3
 8005c90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	4a0e      	ldr	r2, [pc, #56]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005c98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca2:	f7fd f991 	bl	8002fc8 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005caa:	f7fd f98d 	bl	8002fc8 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e00e      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <HAL_RCC_OscConfig+0x82c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1f0      	bne.n	8005caa <HAL_RCC_OscConfig+0x806>
 8005cc8:	e006      	b.n	8005cd8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e005      	b.n	8005cda <HAL_RCC_OscConfig+0x836>
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop

08005ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0c8      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf8:	4b66      	ldr	r3, [pc, #408]	; (8005e94 <HAL_RCC_ClockConfig+0x1b0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d910      	bls.n	8005d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d06:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <HAL_RCC_ClockConfig+0x1b0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f023 0207 	bic.w	r2, r3, #7
 8005d0e:	4961      	ldr	r1, [pc, #388]	; (8005e94 <HAL_RCC_ClockConfig+0x1b0>)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d16:	4b5f      	ldr	r3, [pc, #380]	; (8005e94 <HAL_RCC_ClockConfig+0x1b0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d001      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0b0      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d04c      	beq.n	8005dce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d107      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d3c:	4b56      	ldr	r3, [pc, #344]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d121      	bne.n	8005d8c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e09e      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d107      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d54:	4b50      	ldr	r3, [pc, #320]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d115      	bne.n	8005d8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e092      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d6c:	4b4a      	ldr	r3, [pc, #296]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d109      	bne.n	8005d8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e086      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d7c:	4b46      	ldr	r3, [pc, #280]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e07e      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d8c:	4b42      	ldr	r3, [pc, #264]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f023 0203 	bic.w	r2, r3, #3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	493f      	ldr	r1, [pc, #252]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d9e:	f7fd f913 	bl	8002fc8 <HAL_GetTick>
 8005da2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da4:	e00a      	b.n	8005dbc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da6:	f7fd f90f 	bl	8002fc8 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e066      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbc:	4b36      	ldr	r3, [pc, #216]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 020c 	and.w	r2, r3, #12
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d1eb      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d008      	beq.n	8005dec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dda:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	492c      	ldr	r1, [pc, #176]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dec:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <HAL_RCC_ClockConfig+0x1b0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d210      	bcs.n	8005e1c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <HAL_RCC_ClockConfig+0x1b0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f023 0207 	bic.w	r2, r3, #7
 8005e02:	4924      	ldr	r1, [pc, #144]	; (8005e94 <HAL_RCC_ClockConfig+0x1b0>)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <HAL_RCC_ClockConfig+0x1b0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d001      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e036      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e28:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	4918      	ldr	r1, [pc, #96]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e46:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4910      	ldr	r1, [pc, #64]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e5a:	f000 f825 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <HAL_RCC_ClockConfig+0x1b4>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	490c      	ldr	r1, [pc, #48]	; (8005e9c <HAL_RCC_ClockConfig+0x1b8>)
 8005e6c:	5ccb      	ldrb	r3, [r1, r3]
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	fa22 f303 	lsr.w	r3, r2, r3
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fc fec8 	bl	8002c14 <HAL_InitTick>
 8005e84:	4603      	mov	r3, r0
 8005e86:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e88:	7afb      	ldrb	r3, [r7, #11]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40022000 	.word	0x40022000
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	08012ed4 	.word	0x08012ed4
 8005ea0:	20000000 	.word	0x20000000
 8005ea4:	20000004 	.word	0x20000004

08005ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b089      	sub	sp, #36	; 0x24
 8005eac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb6:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec0:	4b3b      	ldr	r3, [pc, #236]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x34>
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d121      	bne.n	8005f1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d11e      	bne.n	8005f1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005edc:	4b34      	ldr	r3, [pc, #208]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ee8:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	e005      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ef8:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f04:	4a2b      	ldr	r2, [pc, #172]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10d      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f18:	e00a      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d102      	bne.n	8005f26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f20:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	e004      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d101      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f2c:	4b22      	ldr	r3, [pc, #136]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	2b0c      	cmp	r3, #12
 8005f34:	d134      	bne.n	8005fa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f36:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d003      	beq.n	8005f4e <HAL_RCC_GetSysClockFreq+0xa6>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d003      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0xac>
 8005f4c:	e005      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f4e:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f50:	617b      	str	r3, [r7, #20]
      break;
 8005f52:	e005      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f54:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f56:	617b      	str	r3, [r7, #20]
      break;
 8005f58:	e002      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	617b      	str	r3, [r7, #20]
      break;
 8005f5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f60:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	fb02 f203 	mul.w	r2, r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	0e5b      	lsrs	r3, r3, #25
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	3301      	adds	r3, #1
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3724      	adds	r7, #36	; 0x24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	08012eec 	.word	0x08012eec
 8005fb8:	00f42400 	.word	0x00f42400

08005fbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc0:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000000 	.word	0x20000000

08005fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fd8:	f7ff fff0 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	4904      	ldr	r1, [pc, #16]	; (8005ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fea:	5ccb      	ldrb	r3, [r1, r3]
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	08012ee4 	.word	0x08012ee4

08006000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006004:	f7ff ffda 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0adb      	lsrs	r3, r3, #11
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4904      	ldr	r1, [pc, #16]	; (8006028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40021000 	.word	0x40021000
 8006028:	08012ee4 	.word	0x08012ee4

0800602c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	220f      	movs	r2, #15
 800603a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800603c:	4b12      	ldr	r3, [pc, #72]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 0203 	and.w	r2, r3, #3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	08db      	lsrs	r3, r3, #3
 8006066:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <HAL_RCC_GetClockConfig+0x60>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0207 	and.w	r2, r3, #7
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	601a      	str	r2, [r3, #0]
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40021000 	.word	0x40021000
 800608c:	40022000 	.word	0x40022000

08006090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800609e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060a8:	f7ff f998 	bl	80053dc <HAL_PWREx_GetVoltageRange>
 80060ac:	6178      	str	r0, [r7, #20]
 80060ae:	e014      	b.n	80060da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060b0:	4b25      	ldr	r3, [pc, #148]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b4:	4a24      	ldr	r2, [pc, #144]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ba:	6593      	str	r3, [r2, #88]	; 0x58
 80060bc:	4b22      	ldr	r3, [pc, #136]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060c8:	f7ff f988 	bl	80053dc <HAL_PWREx_GetVoltageRange>
 80060cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060ce:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e0:	d10b      	bne.n	80060fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b80      	cmp	r3, #128	; 0x80
 80060e6:	d919      	bls.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2ba0      	cmp	r3, #160	; 0xa0
 80060ec:	d902      	bls.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060ee:	2302      	movs	r3, #2
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	e013      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060f4:	2301      	movs	r3, #1
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	e010      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b80      	cmp	r3, #128	; 0x80
 80060fe:	d902      	bls.n	8006106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006100:	2303      	movs	r3, #3
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	e00a      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d102      	bne.n	8006112 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800610c:	2302      	movs	r3, #2
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e004      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b70      	cmp	r3, #112	; 0x70
 8006116:	d101      	bne.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006118:	2301      	movs	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f023 0207 	bic.w	r2, r3, #7
 8006124:	4909      	ldr	r1, [pc, #36]	; (800614c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800612c:	4b07      	ldr	r3, [pc, #28]	; (800614c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	429a      	cmp	r2, r3
 8006138:	d001      	beq.n	800613e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	40022000 	.word	0x40022000

08006150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006158:	2300      	movs	r3, #0
 800615a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800615c:	2300      	movs	r3, #0
 800615e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006168:	2b00      	cmp	r3, #0
 800616a:	d031      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006174:	d01a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006176:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800617a:	d814      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006184:	d10f      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006186:	4bac      	ldr	r3, [pc, #688]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	4aab      	ldr	r2, [pc, #684]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800618c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006190:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006192:	e00c      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f9dc 	bl	8006558 <RCCEx_PLLSAI1_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061a4:	e003      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	74fb      	strb	r3, [r7, #19]
      break;
 80061aa:	e000      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80061ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061b4:	4ba0      	ldr	r3, [pc, #640]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	499d      	ldr	r1, [pc, #628]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061ca:	e001      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	7cfb      	ldrb	r3, [r7, #19]
 80061ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8099 	beq.w	8006310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061de:	2300      	movs	r3, #0
 80061e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061e2:	4b95      	ldr	r3, [pc, #596]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f8:	4b8f      	ldr	r3, [pc, #572]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fc:	4a8e      	ldr	r2, [pc, #568]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006202:	6593      	str	r3, [r2, #88]	; 0x58
 8006204:	4b8c      	ldr	r3, [pc, #560]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006210:	2301      	movs	r3, #1
 8006212:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006214:	4b89      	ldr	r3, [pc, #548]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a88      	ldr	r2, [pc, #544]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800621a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006220:	f7fc fed2 	bl	8002fc8 <HAL_GetTick>
 8006224:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006226:	e009      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006228:	f7fc fece 	bl	8002fc8 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d902      	bls.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	74fb      	strb	r3, [r7, #19]
        break;
 800623a:	e005      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800623c:	4b7f      	ldr	r3, [pc, #508]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ef      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006248:	7cfb      	ldrb	r3, [r7, #19]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d155      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800624e:	4b7a      	ldr	r3, [pc, #488]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006258:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01e      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	429a      	cmp	r2, r3
 8006268:	d019      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800626a:	4b73      	ldr	r3, [pc, #460]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006274:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006276:	4b70      	ldr	r3, [pc, #448]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627c:	4a6e      	ldr	r2, [pc, #440]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800627e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006286:	4b6c      	ldr	r3, [pc, #432]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628c:	4a6a      	ldr	r2, [pc, #424]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800628e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006296:	4a68      	ldr	r2, [pc, #416]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d016      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fc fe8e 	bl	8002fc8 <HAL_GetTick>
 80062ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ae:	e00b      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b0:	f7fc fe8a 	bl	8002fc8 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80062be:	4293      	cmp	r3, r2
 80062c0:	d902      	bls.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	74fb      	strb	r3, [r7, #19]
            break;
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c8:	4b5b      	ldr	r3, [pc, #364]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0ec      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80062d6:	7cfb      	ldrb	r3, [r7, #19]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062dc:	4b56      	ldr	r3, [pc, #344]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ea:	4953      	ldr	r1, [pc, #332]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062f2:	e004      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f4:	7cfb      	ldrb	r3, [r7, #19]
 80062f6:	74bb      	strb	r3, [r7, #18]
 80062f8:	e001      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fa:	7cfb      	ldrb	r3, [r7, #19]
 80062fc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062fe:	7c7b      	ldrb	r3, [r7, #17]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d105      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006304:	4b4c      	ldr	r3, [pc, #304]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006308:	4a4b      	ldr	r2, [pc, #300]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800630a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800630e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800631c:	4b46      	ldr	r3, [pc, #280]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006322:	f023 0203 	bic.w	r2, r3, #3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	4943      	ldr	r1, [pc, #268]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800633e:	4b3e      	ldr	r3, [pc, #248]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006344:	f023 020c 	bic.w	r2, r3, #12
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	493a      	ldr	r1, [pc, #232]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006360:	4b35      	ldr	r3, [pc, #212]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	4932      	ldr	r1, [pc, #200]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006382:	4b2d      	ldr	r3, [pc, #180]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006390:	4929      	ldr	r1, [pc, #164]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063a4:	4b24      	ldr	r3, [pc, #144]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	4921      	ldr	r1, [pc, #132]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063c6:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4918      	ldr	r1, [pc, #96]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063e8:	4b13      	ldr	r3, [pc, #76]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	4910      	ldr	r1, [pc, #64]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d02c      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800640c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006410:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	4907      	ldr	r1, [pc, #28]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006428:	d10a      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642a:	4b03      	ldr	r3, [pc, #12]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	4a02      	ldr	r2, [pc, #8]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006434:	60d3      	str	r3, [r2, #12]
 8006436:	e015      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006438:	40021000 	.word	0x40021000
 800643c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006448:	d10c      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3304      	adds	r3, #4
 800644e:	2101      	movs	r1, #1
 8006450:	4618      	mov	r0, r3
 8006452:	f000 f881 	bl	8006558 <RCCEx_PLLSAI1_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8006460:	7cfb      	ldrb	r3, [r7, #19]
 8006462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d028      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006470:	4b30      	ldr	r3, [pc, #192]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	492d      	ldr	r1, [pc, #180]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800648e:	d106      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006490:	4b28      	ldr	r3, [pc, #160]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a27      	ldr	r2, [pc, #156]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800649a:	60d3      	str	r3, [r2, #12]
 800649c:	e011      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064a6:	d10c      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3304      	adds	r3, #4
 80064ac:	2101      	movs	r1, #1
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f852 	bl	8006558 <RCCEx_PLLSAI1_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064b8:	7cfb      	ldrb	r3, [r7, #19]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80064be:	7cfb      	ldrb	r3, [r7, #19]
 80064c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01c      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064ce:	4b19      	ldr	r3, [pc, #100]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064dc:	4915      	ldr	r1, [pc, #84]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ec:	d10c      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3304      	adds	r3, #4
 80064f2:	2102      	movs	r1, #2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 f82f 	bl	8006558 <RCCEx_PLLSAI1_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064fe:	7cfb      	ldrb	r3, [r7, #19]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006504:	7cfb      	ldrb	r3, [r7, #19]
 8006506:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006514:	4b07      	ldr	r3, [pc, #28]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006522:	4904      	ldr	r1, [pc, #16]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800652a:	7cbb      	ldrb	r3, [r7, #18]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40021000 	.word	0x40021000

08006538 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a04      	ldr	r2, [pc, #16]	; (8006554 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006542:	f043 0304 	orr.w	r3, r3, #4
 8006546:	6013      	str	r3, [r2, #0]
}
 8006548:	bf00      	nop
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40021000 	.word	0x40021000

08006558 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006566:	4b74      	ldr	r3, [pc, #464]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d018      	beq.n	80065a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006572:	4b71      	ldr	r3, [pc, #452]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0203 	and.w	r2, r3, #3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d10d      	bne.n	800659e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
       ||
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800658a:	4b6b      	ldr	r3, [pc, #428]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	091b      	lsrs	r3, r3, #4
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
       ||
 800659a:	429a      	cmp	r2, r3
 800659c:	d047      	beq.n	800662e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	73fb      	strb	r3, [r7, #15]
 80065a2:	e044      	b.n	800662e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d018      	beq.n	80065de <RCCEx_PLLSAI1_Config+0x86>
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d825      	bhi.n	80065fc <RCCEx_PLLSAI1_Config+0xa4>
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d002      	beq.n	80065ba <RCCEx_PLLSAI1_Config+0x62>
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d009      	beq.n	80065cc <RCCEx_PLLSAI1_Config+0x74>
 80065b8:	e020      	b.n	80065fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065ba:	4b5f      	ldr	r3, [pc, #380]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d11d      	bne.n	8006602 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ca:	e01a      	b.n	8006602 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065cc:	4b5a      	ldr	r3, [pc, #360]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d116      	bne.n	8006606 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065dc:	e013      	b.n	8006606 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065de:	4b56      	ldr	r3, [pc, #344]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065ea:	4b53      	ldr	r3, [pc, #332]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065fa:	e006      	b.n	800660a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006600:	e004      	b.n	800660c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006602:	bf00      	nop
 8006604:	e002      	b.n	800660c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006606:	bf00      	nop
 8006608:	e000      	b.n	800660c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800660a:	bf00      	nop
    }

    if(status == HAL_OK)
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10d      	bne.n	800662e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006612:	4b49      	ldr	r3, [pc, #292]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6819      	ldr	r1, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	3b01      	subs	r3, #1
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	430b      	orrs	r3, r1
 8006628:	4943      	ldr	r1, [pc, #268]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800662a:	4313      	orrs	r3, r2
 800662c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d17c      	bne.n	800672e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006634:	4b40      	ldr	r3, [pc, #256]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a3f      	ldr	r2, [pc, #252]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800663a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800663e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006640:	f7fc fcc2 	bl	8002fc8 <HAL_GetTick>
 8006644:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006646:	e009      	b.n	800665c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006648:	f7fc fcbe 	bl	8002fc8 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d902      	bls.n	800665c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	73fb      	strb	r3, [r7, #15]
        break;
 800665a:	e005      	b.n	8006668 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800665c:	4b36      	ldr	r3, [pc, #216]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1ef      	bne.n	8006648 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d15f      	bne.n	800672e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d110      	bne.n	8006696 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006674:	4b30      	ldr	r3, [pc, #192]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800667c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6892      	ldr	r2, [r2, #8]
 8006684:	0211      	lsls	r1, r2, #8
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	68d2      	ldr	r2, [r2, #12]
 800668a:	06d2      	lsls	r2, r2, #27
 800668c:	430a      	orrs	r2, r1
 800668e:	492a      	ldr	r1, [pc, #168]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006690:	4313      	orrs	r3, r2
 8006692:	610b      	str	r3, [r1, #16]
 8006694:	e027      	b.n	80066e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d112      	bne.n	80066c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800669c:	4b26      	ldr	r3, [pc, #152]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80066a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6892      	ldr	r2, [r2, #8]
 80066ac:	0211      	lsls	r1, r2, #8
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6912      	ldr	r2, [r2, #16]
 80066b2:	0852      	lsrs	r2, r2, #1
 80066b4:	3a01      	subs	r2, #1
 80066b6:	0552      	lsls	r2, r2, #21
 80066b8:	430a      	orrs	r2, r1
 80066ba:	491f      	ldr	r1, [pc, #124]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	610b      	str	r3, [r1, #16]
 80066c0:	e011      	b.n	80066e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066c2:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6892      	ldr	r2, [r2, #8]
 80066d2:	0211      	lsls	r1, r2, #8
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6952      	ldr	r2, [r2, #20]
 80066d8:	0852      	lsrs	r2, r2, #1
 80066da:	3a01      	subs	r2, #1
 80066dc:	0652      	lsls	r2, r2, #25
 80066de:	430a      	orrs	r2, r1
 80066e0:	4915      	ldr	r1, [pc, #84]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066e6:	4b14      	ldr	r3, [pc, #80]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a13      	ldr	r2, [pc, #76]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f2:	f7fc fc69 	bl	8002fc8 <HAL_GetTick>
 80066f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066f8:	e009      	b.n	800670e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066fa:	f7fc fc65 	bl	8002fc8 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d902      	bls.n	800670e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	73fb      	strb	r3, [r7, #15]
          break;
 800670c:	e005      	b.n	800671a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800670e:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0ef      	beq.n	80066fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	4903      	ldr	r1, [pc, #12]	; (8006738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800672a:	4313      	orrs	r3, r2
 800672c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40021000 	.word	0x40021000

0800673c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e049      	b.n	80067e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f841 	bl	80067ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3304      	adds	r3, #4
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f000 fb42 	bl	8006e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e03b      	b.n	8006890 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0201 	orr.w	r2, r2, #1
 800682e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a19      	ldr	r2, [pc, #100]	; (800689c <HAL_TIM_Base_Start_IT+0x9c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d009      	beq.n	800684e <HAL_TIM_Base_Start_IT+0x4e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006842:	d004      	beq.n	800684e <HAL_TIM_Base_Start_IT+0x4e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d115      	bne.n	800687a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	4b13      	ldr	r3, [pc, #76]	; (80068a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8006856:	4013      	ands	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b06      	cmp	r3, #6
 800685e:	d015      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x8c>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006866:	d011      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006878:	e008      	b.n	800688c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0201 	orr.w	r2, r2, #1
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	e000      	b.n	800688e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40014000 	.word	0x40014000
 80068a4:	00010007 	.word	0x00010007

080068a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e049      	b.n	800694e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fc f860 	bl	8002994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f000 fa8c 	bl	8006e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b02      	cmp	r3, #2
 800696a:	d122      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b02      	cmp	r3, #2
 8006978:	d11b      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f06f 0202 	mvn.w	r2, #2
 8006982:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f003 0303 	and.w	r3, r3, #3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fa15 	bl	8006dc8 <HAL_TIM_IC_CaptureCallback>
 800699e:	e005      	b.n	80069ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fa07 	bl	8006db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa18 	bl	8006ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d122      	bne.n	8006a06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d11b      	bne.n	8006a06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f06f 0204 	mvn.w	r2, #4
 80069d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f9eb 	bl	8006dc8 <HAL_TIM_IC_CaptureCallback>
 80069f2:	e005      	b.n	8006a00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9dd 	bl	8006db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9ee 	bl	8006ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d122      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d11b      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f06f 0208 	mvn.w	r2, #8
 8006a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f9c1 	bl	8006dc8 <HAL_TIM_IC_CaptureCallback>
 8006a46:	e005      	b.n	8006a54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f9b3 	bl	8006db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f9c4 	bl	8006ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b10      	cmp	r3, #16
 8006a66:	d122      	bne.n	8006aae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d11b      	bne.n	8006aae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f06f 0210 	mvn.w	r2, #16
 8006a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2208      	movs	r2, #8
 8006a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f997 	bl	8006dc8 <HAL_TIM_IC_CaptureCallback>
 8006a9a:	e005      	b.n	8006aa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f989 	bl	8006db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f99a 	bl	8006ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d10e      	bne.n	8006ada <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d107      	bne.n	8006ada <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f06f 0201 	mvn.w	r2, #1
 8006ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fb fdfd 	bl	80026d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae4:	2b80      	cmp	r3, #128	; 0x80
 8006ae6:	d10e      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d107      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fd49 	bl	8007598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b14:	d10e      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b80      	cmp	r3, #128	; 0x80
 8006b22:	d107      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fd3c 	bl	80075ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d10e      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b40      	cmp	r3, #64	; 0x40
 8006b4e:	d107      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f948 	bl	8006df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d10e      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d107      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0220 	mvn.w	r2, #32
 8006b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fcfc 	bl	8007584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e0fd      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x216>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b14      	cmp	r3, #20
 8006bba:	f200 80f0 	bhi.w	8006d9e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006c19 	.word	0x08006c19
 8006bc8:	08006d9f 	.word	0x08006d9f
 8006bcc:	08006d9f 	.word	0x08006d9f
 8006bd0:	08006d9f 	.word	0x08006d9f
 8006bd4:	08006c59 	.word	0x08006c59
 8006bd8:	08006d9f 	.word	0x08006d9f
 8006bdc:	08006d9f 	.word	0x08006d9f
 8006be0:	08006d9f 	.word	0x08006d9f
 8006be4:	08006c9b 	.word	0x08006c9b
 8006be8:	08006d9f 	.word	0x08006d9f
 8006bec:	08006d9f 	.word	0x08006d9f
 8006bf0:	08006d9f 	.word	0x08006d9f
 8006bf4:	08006cdb 	.word	0x08006cdb
 8006bf8:	08006d9f 	.word	0x08006d9f
 8006bfc:	08006d9f 	.word	0x08006d9f
 8006c00:	08006d9f 	.word	0x08006d9f
 8006c04:	08006d1d 	.word	0x08006d1d
 8006c08:	08006d9f 	.word	0x08006d9f
 8006c0c:	08006d9f 	.word	0x08006d9f
 8006c10:	08006d9f 	.word	0x08006d9f
 8006c14:	08006d5d 	.word	0x08006d5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 f954 	bl	8006ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0208 	orr.w	r2, r2, #8
 8006c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0204 	bic.w	r2, r2, #4
 8006c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6999      	ldr	r1, [r3, #24]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	619a      	str	r2, [r3, #24]
      break;
 8006c56:	e0a3      	b.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 f9b0 	bl	8006fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6999      	ldr	r1, [r3, #24]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	021a      	lsls	r2, r3, #8
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	619a      	str	r2, [r3, #24]
      break;
 8006c98:	e082      	b.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fa09 	bl	80070b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0208 	orr.w	r2, r2, #8
 8006cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0204 	bic.w	r2, r2, #4
 8006cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69d9      	ldr	r1, [r3, #28]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	61da      	str	r2, [r3, #28]
      break;
 8006cd8:	e062      	b.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fa61 	bl	80071a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69d9      	ldr	r1, [r3, #28]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	021a      	lsls	r2, r3, #8
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	61da      	str	r2, [r3, #28]
      break;
 8006d1a:	e041      	b.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fa9e 	bl	8007264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0208 	orr.w	r2, r2, #8
 8006d36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0204 	bic.w	r2, r2, #4
 8006d46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	691a      	ldr	r2, [r3, #16]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d5a:	e021      	b.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fad6 	bl	8007314 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	021a      	lsls	r2, r3, #8
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d9c:	e000      	b.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006d9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop

08006db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <TIM_Base_SetConfig+0xbc>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_Base_SetConfig+0x20>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d108      	bne.n	8006e36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a21      	ldr	r2, [pc, #132]	; (8006ec0 <TIM_Base_SetConfig+0xbc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00b      	beq.n	8006e56 <TIM_Base_SetConfig+0x52>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e44:	d007      	beq.n	8006e56 <TIM_Base_SetConfig+0x52>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a1e      	ldr	r2, [pc, #120]	; (8006ec4 <TIM_Base_SetConfig+0xc0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_Base_SetConfig+0x52>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a1d      	ldr	r2, [pc, #116]	; (8006ec8 <TIM_Base_SetConfig+0xc4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d108      	bne.n	8006e68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ec0 <TIM_Base_SetConfig+0xbc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d007      	beq.n	8006ea4 <TIM_Base_SetConfig+0xa0>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a0b      	ldr	r2, [pc, #44]	; (8006ec4 <TIM_Base_SetConfig+0xc0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_Base_SetConfig+0xa0>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a0a      	ldr	r2, [pc, #40]	; (8006ec8 <TIM_Base_SetConfig+0xc4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d103      	bne.n	8006eac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	615a      	str	r2, [r3, #20]
}
 8006eb2:	bf00      	nop
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40012c00 	.word	0x40012c00
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40014400 	.word	0x40014400

08006ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0201 	bic.w	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f023 0302 	bic.w	r3, r3, #2
 8006f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <TIM_OC1_SetConfig+0xec>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <TIM_OC1_SetConfig+0x70>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a23      	ldr	r2, [pc, #140]	; (8006fbc <TIM_OC1_SetConfig+0xf0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_OC1_SetConfig+0x70>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a22      	ldr	r2, [pc, #136]	; (8006fc0 <TIM_OC1_SetConfig+0xf4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10c      	bne.n	8006f56 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f023 0308 	bic.w	r3, r3, #8
 8006f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f023 0304 	bic.w	r3, r3, #4
 8006f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <TIM_OC1_SetConfig+0xec>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d007      	beq.n	8006f6e <TIM_OC1_SetConfig+0xa2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <TIM_OC1_SetConfig+0xf0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d003      	beq.n	8006f6e <TIM_OC1_SetConfig+0xa2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a15      	ldr	r2, [pc, #84]	; (8006fc0 <TIM_OC1_SetConfig+0xf4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d111      	bne.n	8006f92 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	621a      	str	r2, [r3, #32]
}
 8006fac:	bf00      	nop
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	40012c00 	.word	0x40012c00
 8006fbc:	40014000 	.word	0x40014000
 8006fc0:	40014400 	.word	0x40014400

08006fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	f023 0210 	bic.w	r2, r3, #16
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 0320 	bic.w	r3, r3, #32
 8007012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a22      	ldr	r2, [pc, #136]	; (80070ac <TIM_OC2_SetConfig+0xe8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d10d      	bne.n	8007044 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800702e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007042:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a19      	ldr	r2, [pc, #100]	; (80070ac <TIM_OC2_SetConfig+0xe8>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d007      	beq.n	800705c <TIM_OC2_SetConfig+0x98>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <TIM_OC2_SetConfig+0xec>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_OC2_SetConfig+0x98>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <TIM_OC2_SetConfig+0xf0>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d113      	bne.n	8007084 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800706a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40014000 	.word	0x40014000
 80070b4:	40014400 	.word	0x40014400

080070b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0303 	bic.w	r3, r3, #3
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a21      	ldr	r2, [pc, #132]	; (800719c <TIM_OC3_SetConfig+0xe4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d10d      	bne.n	8007136 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a18      	ldr	r2, [pc, #96]	; (800719c <TIM_OC3_SetConfig+0xe4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d007      	beq.n	800714e <TIM_OC3_SetConfig+0x96>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a17      	ldr	r2, [pc, #92]	; (80071a0 <TIM_OC3_SetConfig+0xe8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d003      	beq.n	800714e <TIM_OC3_SetConfig+0x96>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a16      	ldr	r2, [pc, #88]	; (80071a4 <TIM_OC3_SetConfig+0xec>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d113      	bne.n	8007176 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800715c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	621a      	str	r2, [r3, #32]
}
 8007190:	bf00      	nop
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	40012c00 	.word	0x40012c00
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40014400 	.word	0x40014400

080071a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	031b      	lsls	r3, r3, #12
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a14      	ldr	r2, [pc, #80]	; (8007258 <TIM_OC4_SetConfig+0xb0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d007      	beq.n	800721c <TIM_OC4_SetConfig+0x74>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a13      	ldr	r2, [pc, #76]	; (800725c <TIM_OC4_SetConfig+0xb4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_OC4_SetConfig+0x74>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a12      	ldr	r2, [pc, #72]	; (8007260 <TIM_OC4_SetConfig+0xb8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d109      	bne.n	8007230 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	019b      	lsls	r3, r3, #6
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	40012c00 	.word	0x40012c00
 800725c:	40014000 	.word	0x40014000
 8007260:	40014400 	.word	0x40014400

08007264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	041b      	lsls	r3, r3, #16
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a13      	ldr	r2, [pc, #76]	; (8007308 <TIM_OC5_SetConfig+0xa4>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d007      	beq.n	80072ce <TIM_OC5_SetConfig+0x6a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a12      	ldr	r2, [pc, #72]	; (800730c <TIM_OC5_SetConfig+0xa8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d003      	beq.n	80072ce <TIM_OC5_SetConfig+0x6a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a11      	ldr	r2, [pc, #68]	; (8007310 <TIM_OC5_SetConfig+0xac>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d109      	bne.n	80072e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	621a      	str	r2, [r3, #32]
}
 80072fc:	bf00      	nop
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40012c00 	.word	0x40012c00
 800730c:	40014000 	.word	0x40014000
 8007310:	40014400 	.word	0x40014400

08007314 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800735a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	051b      	lsls	r3, r3, #20
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a14      	ldr	r2, [pc, #80]	; (80073bc <TIM_OC6_SetConfig+0xa8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d007      	beq.n	8007380 <TIM_OC6_SetConfig+0x6c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a13      	ldr	r2, [pc, #76]	; (80073c0 <TIM_OC6_SetConfig+0xac>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_OC6_SetConfig+0x6c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a12      	ldr	r2, [pc, #72]	; (80073c4 <TIM_OC6_SetConfig+0xb0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d109      	bne.n	8007394 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	029b      	lsls	r3, r3, #10
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	621a      	str	r2, [r3, #32]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40012c00 	.word	0x40012c00
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e04f      	b.n	8007480 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a21      	ldr	r2, [pc, #132]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d108      	bne.n	800741c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007410:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a14      	ldr	r2, [pc, #80]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d009      	beq.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007448:	d004      	beq.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a10      	ldr	r2, [pc, #64]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d10c      	bne.n	800746e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	4313      	orrs	r3, r2
 8007464:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	40012c00 	.word	0x40012c00
 8007490:	40014000 	.word	0x40014000

08007494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e060      	b.n	8007572 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	041b      	lsls	r3, r3, #16
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a14      	ldr	r2, [pc, #80]	; (8007580 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d115      	bne.n	8007560 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	051b      	lsls	r3, r3, #20
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40012c00 	.word	0x40012c00

08007584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e040      	b.n	8007654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fb fa66 	bl	8002ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2224      	movs	r2, #36	; 0x24
 80075ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0201 	bic.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f8c0 	bl	8007784 <UART_SetConfig>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e022      	b.n	8007654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fac0 	bl	8007b9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800762a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800763a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fb47 	bl	8007ce0 <UART_CheckIdleState>
 8007652:	4603      	mov	r3, r0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08a      	sub	sp, #40	; 0x28
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	603b      	str	r3, [r7, #0]
 8007668:	4613      	mov	r3, r2
 800766a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007670:	2b20      	cmp	r3, #32
 8007672:	f040 8082 	bne.w	800777a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_UART_Transmit+0x26>
 800767c:	88fb      	ldrh	r3, [r7, #6]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e07a      	b.n	800777c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_UART_Transmit+0x38>
 8007690:	2302      	movs	r3, #2
 8007692:	e073      	b.n	800777c <HAL_UART_Transmit+0x120>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2221      	movs	r2, #33	; 0x21
 80076a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076aa:	f7fb fc8d 	bl	8002fc8 <HAL_GetTick>
 80076ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	88fa      	ldrh	r2, [r7, #6]
 80076b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	88fa      	ldrh	r2, [r7, #6]
 80076bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c8:	d108      	bne.n	80076dc <HAL_UART_Transmit+0x80>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d104      	bne.n	80076dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	e003      	b.n	80076e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80076ec:	e02d      	b.n	800774a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2200      	movs	r2, #0
 80076f6:	2180      	movs	r1, #128	; 0x80
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fb3a 	bl	8007d72 <UART_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e039      	b.n	800777c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10b      	bne.n	8007726 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	881a      	ldrh	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800771a:	b292      	uxth	r2, r2
 800771c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	3302      	adds	r3, #2
 8007722:	61bb      	str	r3, [r7, #24]
 8007724:	e008      	b.n	8007738 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	b292      	uxth	r2, r2
 8007730:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	3301      	adds	r3, #1
 8007736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1cb      	bne.n	80076ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2200      	movs	r2, #0
 800775e:	2140      	movs	r1, #64	; 0x40
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fb06 	bl	8007d72 <UART_WaitOnFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e005      	b.n	800777c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	e000      	b.n	800777c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800777a:	2302      	movs	r3, #2
  }
}
 800777c:	4618      	mov	r0, r3
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007784:	b5b0      	push	{r4, r5, r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4baf      	ldr	r3, [pc, #700]	; (8007a6c <UART_SetConfig+0x2e8>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	69f9      	ldr	r1, [r7, #28]
 80077b8:	430b      	orrs	r3, r1
 80077ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4aa4      	ldr	r2, [pc, #656]	; (8007a70 <UART_SetConfig+0x2ec>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a9b      	ldr	r2, [pc, #620]	; (8007a74 <UART_SetConfig+0x2f0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d121      	bne.n	800784e <UART_SetConfig+0xca>
 800780a:	4b9b      	ldr	r3, [pc, #620]	; (8007a78 <UART_SetConfig+0x2f4>)
 800780c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	2b03      	cmp	r3, #3
 8007816:	d817      	bhi.n	8007848 <UART_SetConfig+0xc4>
 8007818:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <UART_SetConfig+0x9c>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	08007831 	.word	0x08007831
 8007824:	0800783d 	.word	0x0800783d
 8007828:	08007837 	.word	0x08007837
 800782c:	08007843 	.word	0x08007843
 8007830:	2301      	movs	r3, #1
 8007832:	76fb      	strb	r3, [r7, #27]
 8007834:	e070      	b.n	8007918 <UART_SetConfig+0x194>
 8007836:	2302      	movs	r3, #2
 8007838:	76fb      	strb	r3, [r7, #27]
 800783a:	e06d      	b.n	8007918 <UART_SetConfig+0x194>
 800783c:	2304      	movs	r3, #4
 800783e:	76fb      	strb	r3, [r7, #27]
 8007840:	e06a      	b.n	8007918 <UART_SetConfig+0x194>
 8007842:	2308      	movs	r3, #8
 8007844:	76fb      	strb	r3, [r7, #27]
 8007846:	e067      	b.n	8007918 <UART_SetConfig+0x194>
 8007848:	2310      	movs	r3, #16
 800784a:	76fb      	strb	r3, [r7, #27]
 800784c:	e064      	b.n	8007918 <UART_SetConfig+0x194>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a8a      	ldr	r2, [pc, #552]	; (8007a7c <UART_SetConfig+0x2f8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d132      	bne.n	80078be <UART_SetConfig+0x13a>
 8007858:	4b87      	ldr	r3, [pc, #540]	; (8007a78 <UART_SetConfig+0x2f4>)
 800785a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785e:	f003 030c 	and.w	r3, r3, #12
 8007862:	2b0c      	cmp	r3, #12
 8007864:	d828      	bhi.n	80078b8 <UART_SetConfig+0x134>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <UART_SetConfig+0xe8>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	080078a1 	.word	0x080078a1
 8007870:	080078b9 	.word	0x080078b9
 8007874:	080078b9 	.word	0x080078b9
 8007878:	080078b9 	.word	0x080078b9
 800787c:	080078ad 	.word	0x080078ad
 8007880:	080078b9 	.word	0x080078b9
 8007884:	080078b9 	.word	0x080078b9
 8007888:	080078b9 	.word	0x080078b9
 800788c:	080078a7 	.word	0x080078a7
 8007890:	080078b9 	.word	0x080078b9
 8007894:	080078b9 	.word	0x080078b9
 8007898:	080078b9 	.word	0x080078b9
 800789c:	080078b3 	.word	0x080078b3
 80078a0:	2300      	movs	r3, #0
 80078a2:	76fb      	strb	r3, [r7, #27]
 80078a4:	e038      	b.n	8007918 <UART_SetConfig+0x194>
 80078a6:	2302      	movs	r3, #2
 80078a8:	76fb      	strb	r3, [r7, #27]
 80078aa:	e035      	b.n	8007918 <UART_SetConfig+0x194>
 80078ac:	2304      	movs	r3, #4
 80078ae:	76fb      	strb	r3, [r7, #27]
 80078b0:	e032      	b.n	8007918 <UART_SetConfig+0x194>
 80078b2:	2308      	movs	r3, #8
 80078b4:	76fb      	strb	r3, [r7, #27]
 80078b6:	e02f      	b.n	8007918 <UART_SetConfig+0x194>
 80078b8:	2310      	movs	r3, #16
 80078ba:	76fb      	strb	r3, [r7, #27]
 80078bc:	e02c      	b.n	8007918 <UART_SetConfig+0x194>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a6b      	ldr	r2, [pc, #428]	; (8007a70 <UART_SetConfig+0x2ec>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d125      	bne.n	8007914 <UART_SetConfig+0x190>
 80078c8:	4b6b      	ldr	r3, [pc, #428]	; (8007a78 <UART_SetConfig+0x2f4>)
 80078ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078d6:	d017      	beq.n	8007908 <UART_SetConfig+0x184>
 80078d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078dc:	d817      	bhi.n	800790e <UART_SetConfig+0x18a>
 80078de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e2:	d00b      	beq.n	80078fc <UART_SetConfig+0x178>
 80078e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e8:	d811      	bhi.n	800790e <UART_SetConfig+0x18a>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <UART_SetConfig+0x172>
 80078ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f2:	d006      	beq.n	8007902 <UART_SetConfig+0x17e>
 80078f4:	e00b      	b.n	800790e <UART_SetConfig+0x18a>
 80078f6:	2300      	movs	r3, #0
 80078f8:	76fb      	strb	r3, [r7, #27]
 80078fa:	e00d      	b.n	8007918 <UART_SetConfig+0x194>
 80078fc:	2302      	movs	r3, #2
 80078fe:	76fb      	strb	r3, [r7, #27]
 8007900:	e00a      	b.n	8007918 <UART_SetConfig+0x194>
 8007902:	2304      	movs	r3, #4
 8007904:	76fb      	strb	r3, [r7, #27]
 8007906:	e007      	b.n	8007918 <UART_SetConfig+0x194>
 8007908:	2308      	movs	r3, #8
 800790a:	76fb      	strb	r3, [r7, #27]
 800790c:	e004      	b.n	8007918 <UART_SetConfig+0x194>
 800790e:	2310      	movs	r3, #16
 8007910:	76fb      	strb	r3, [r7, #27]
 8007912:	e001      	b.n	8007918 <UART_SetConfig+0x194>
 8007914:	2310      	movs	r3, #16
 8007916:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a54      	ldr	r2, [pc, #336]	; (8007a70 <UART_SetConfig+0x2ec>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d173      	bne.n	8007a0a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007922:	7efb      	ldrb	r3, [r7, #27]
 8007924:	2b08      	cmp	r3, #8
 8007926:	d824      	bhi.n	8007972 <UART_SetConfig+0x1ee>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <UART_SetConfig+0x1ac>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007955 	.word	0x08007955
 8007934:	08007973 	.word	0x08007973
 8007938:	0800795d 	.word	0x0800795d
 800793c:	08007973 	.word	0x08007973
 8007940:	08007963 	.word	0x08007963
 8007944:	08007973 	.word	0x08007973
 8007948:	08007973 	.word	0x08007973
 800794c:	08007973 	.word	0x08007973
 8007950:	0800796b 	.word	0x0800796b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007954:	f7fe fb3e 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
 8007958:	6178      	str	r0, [r7, #20]
        break;
 800795a:	e00f      	b.n	800797c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800795c:	4b48      	ldr	r3, [pc, #288]	; (8007a80 <UART_SetConfig+0x2fc>)
 800795e:	617b      	str	r3, [r7, #20]
        break;
 8007960:	e00c      	b.n	800797c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007962:	f7fe faa1 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8007966:	6178      	str	r0, [r7, #20]
        break;
 8007968:	e008      	b.n	800797c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800796e:	617b      	str	r3, [r7, #20]
        break;
 8007970:	e004      	b.n	800797c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	76bb      	strb	r3, [r7, #26]
        break;
 800797a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 80fe 	beq.w	8007b80 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	4613      	mov	r3, r2
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	4413      	add	r3, r2
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	429a      	cmp	r2, r3
 8007992:	d305      	bcc.n	80079a0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	429a      	cmp	r2, r3
 800799e:	d902      	bls.n	80079a6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	76bb      	strb	r3, [r7, #26]
 80079a4:	e0ec      	b.n	8007b80 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f04f 0100 	mov.w	r1, #0
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	020b      	lsls	r3, r1, #8
 80079b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079bc:	0202      	lsls	r2, r0, #8
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	6849      	ldr	r1, [r1, #4]
 80079c2:	0849      	lsrs	r1, r1, #1
 80079c4:	4608      	mov	r0, r1
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	1814      	adds	r4, r2, r0
 80079cc:	eb43 0501 	adc.w	r5, r3, r1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	461a      	mov	r2, r3
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	4620      	mov	r0, r4
 80079dc:	4629      	mov	r1, r5
 80079de:	f7f9 f8e3 	bl	8000ba8 <__aeabi_uldivmod>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4613      	mov	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079f0:	d308      	bcc.n	8007a04 <UART_SetConfig+0x280>
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f8:	d204      	bcs.n	8007a04 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	60da      	str	r2, [r3, #12]
 8007a02:	e0bd      	b.n	8007b80 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	76bb      	strb	r3, [r7, #26]
 8007a08:	e0ba      	b.n	8007b80 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a12:	d168      	bne.n	8007ae6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8007a14:	7efb      	ldrb	r3, [r7, #27]
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d834      	bhi.n	8007a84 <UART_SetConfig+0x300>
 8007a1a:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <UART_SetConfig+0x29c>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007a4d 	.word	0x08007a4d
 8007a28:	08007a55 	.word	0x08007a55
 8007a2c:	08007a85 	.word	0x08007a85
 8007a30:	08007a5b 	.word	0x08007a5b
 8007a34:	08007a85 	.word	0x08007a85
 8007a38:	08007a85 	.word	0x08007a85
 8007a3c:	08007a85 	.word	0x08007a85
 8007a40:	08007a63 	.word	0x08007a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a44:	f7fe fac6 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
 8007a48:	6178      	str	r0, [r7, #20]
        break;
 8007a4a:	e020      	b.n	8007a8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a4c:	f7fe fad8 	bl	8006000 <HAL_RCC_GetPCLK2Freq>
 8007a50:	6178      	str	r0, [r7, #20]
        break;
 8007a52:	e01c      	b.n	8007a8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a54:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <UART_SetConfig+0x2fc>)
 8007a56:	617b      	str	r3, [r7, #20]
        break;
 8007a58:	e019      	b.n	8007a8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5a:	f7fe fa25 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8007a5e:	6178      	str	r0, [r7, #20]
        break;
 8007a60:	e015      	b.n	8007a8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a66:	617b      	str	r3, [r7, #20]
        break;
 8007a68:	e011      	b.n	8007a8e <UART_SetConfig+0x30a>
 8007a6a:	bf00      	nop
 8007a6c:	efff69f3 	.word	0xefff69f3
 8007a70:	40008000 	.word	0x40008000
 8007a74:	40013800 	.word	0x40013800
 8007a78:	40021000 	.word	0x40021000
 8007a7c:	40004400 	.word	0x40004400
 8007a80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	76bb      	strb	r3, [r7, #26]
        break;
 8007a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d075      	beq.n	8007b80 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	005a      	lsls	r2, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	085b      	lsrs	r3, r3, #1
 8007a9e:	441a      	add	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2b0f      	cmp	r3, #15
 8007ab0:	d916      	bls.n	8007ae0 <UART_SetConfig+0x35c>
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab8:	d212      	bcs.n	8007ae0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	f023 030f 	bic.w	r3, r3, #15
 8007ac2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	085b      	lsrs	r3, r3, #1
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	89fa      	ldrh	r2, [r7, #14]
 8007adc:	60da      	str	r2, [r3, #12]
 8007ade:	e04f      	b.n	8007b80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	76bb      	strb	r3, [r7, #26]
 8007ae4:	e04c      	b.n	8007b80 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ae6:	7efb      	ldrb	r3, [r7, #27]
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d828      	bhi.n	8007b3e <UART_SetConfig+0x3ba>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <UART_SetConfig+0x370>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b19 	.word	0x08007b19
 8007af8:	08007b21 	.word	0x08007b21
 8007afc:	08007b29 	.word	0x08007b29
 8007b00:	08007b3f 	.word	0x08007b3f
 8007b04:	08007b2f 	.word	0x08007b2f
 8007b08:	08007b3f 	.word	0x08007b3f
 8007b0c:	08007b3f 	.word	0x08007b3f
 8007b10:	08007b3f 	.word	0x08007b3f
 8007b14:	08007b37 	.word	0x08007b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b18:	f7fe fa5c 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
 8007b1c:	6178      	str	r0, [r7, #20]
        break;
 8007b1e:	e013      	b.n	8007b48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b20:	f7fe fa6e 	bl	8006000 <HAL_RCC_GetPCLK2Freq>
 8007b24:	6178      	str	r0, [r7, #20]
        break;
 8007b26:	e00f      	b.n	8007b48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b28:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <UART_SetConfig+0x414>)
 8007b2a:	617b      	str	r3, [r7, #20]
        break;
 8007b2c:	e00c      	b.n	8007b48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b2e:	f7fe f9bb 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8007b32:	6178      	str	r0, [r7, #20]
        break;
 8007b34:	e008      	b.n	8007b48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b3a:	617b      	str	r3, [r7, #20]
        break;
 8007b3c:	e004      	b.n	8007b48 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	76bb      	strb	r3, [r7, #26]
        break;
 8007b46:	bf00      	nop
    }

    if (pclk != 0U)
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d018      	beq.n	8007b80 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	085a      	lsrs	r2, r3, #1
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	441a      	add	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b0f      	cmp	r3, #15
 8007b68:	d908      	bls.n	8007b7c <UART_SetConfig+0x3f8>
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b70:	d204      	bcs.n	8007b7c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	60da      	str	r2, [r3, #12]
 8007b7a:	e001      	b.n	8007b80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3720      	adds	r7, #32
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bdb0      	pop	{r4, r5, r7, pc}
 8007b96:	bf00      	nop
 8007b98:	00f42400 	.word	0x00f42400

08007b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	f003 0308 	and.w	r3, r3, #8
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d01a      	beq.n	8007cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c9a:	d10a      	bne.n	8007cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	605a      	str	r2, [r3, #4]
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cf0:	f7fb f96a 	bl	8002fc8 <HAL_GetTick>
 8007cf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0308 	and.w	r3, r3, #8
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d10e      	bne.n	8007d22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f82d 	bl	8007d72 <UART_WaitOnFlagUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e023      	b.n	8007d6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d10e      	bne.n	8007d4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f817 	bl	8007d72 <UART_WaitOnFlagUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e00d      	b.n	8007d6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	603b      	str	r3, [r7, #0]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d82:	e05e      	b.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d05a      	beq.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8c:	f7fb f91c 	bl	8002fc8 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d302      	bcc.n	8007da2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d11b      	bne.n	8007dda <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007db0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e043      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d02c      	beq.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df6:	d124      	bne.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e00:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e10:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0201 	bic.w	r2, r2, #1
 8007e20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2220      	movs	r2, #32
 8007e26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e00f      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69da      	ldr	r2, [r3, #28]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	bf0c      	ite	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	2300      	movne	r3, #0
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d091      	beq.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <coCanOpenStackInit>:


RET_T coCanOpenStackInit(
         CO_EVENT_STORE_T pLoadFunction
    )
{
 8007e6c:	b5b0      	push	{r4, r5, r7, lr}
 8007e6e:	b08c      	sub	sp, #48	; 0x30
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	6078      	str	r0, [r7, #4]
    RET_T retVal;

    CO_SERVICE_INIT_VAL_T	serviceInitVars = {
 8007e74:	4b56      	ldr	r3, [pc, #344]	; (8007fd0 <coCanOpenStackInit+0x164>)
 8007e76:	f107 0408 	add.w	r4, r7, #8
 8007e7a:	461d      	mov	r5, r3
 8007e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
       { CO_NODE_IDS }, 
       { CO_NODE_ID_FUNCTIONS } 
    };

    /* variable initialization */
    retVal = coCanOpenStackVarInit(&serviceInitVars);
 8007e88:	f107 0308 	add.w	r3, r7, #8
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f007 fca1 	bl	800f7d4 <coCanOpenStackVarInit>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retVal != RET_OK) {
 8007e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <coCanOpenStackInit+0x3a>
        return (retVal);
 8007ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ea4:	e08f      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    }

    /* initialize object dictionary variables and pointers */
    coOdInitOdPtr(&od_assign[0], CO_OD_ASSIGN_CNT, &od_description[0], CO_OBJ_DESC_CNT, NULL, &od_data_variables);
 8007ea6:	4b4b      	ldr	r3, [pc, #300]	; (8007fd4 <coCanOpenStackInit+0x168>)
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	233c      	movs	r3, #60	; 0x3c
 8007eb0:	4a49      	ldr	r2, [pc, #292]	; (8007fd8 <coCanOpenStackInit+0x16c>)
 8007eb2:	2110      	movs	r1, #16
 8007eb4:	4849      	ldr	r0, [pc, #292]	; (8007fdc <coCanOpenStackInit+0x170>)
 8007eb6:	f005 fad9 	bl	800d46c <coOdInitOdPtr>

    /* library timer initialization */
    coTimerInit(CO_TIMER_INTERVAL);
 8007eba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ebe:	f007 fecf 	bl	800fc60 <coTimerInit>

    /* initialization of LED module */
    coLedInit();
 8007ec2:	f003 fe27 	bl	800bb14 <coLedInit>

    /* initialize sdo server(s) */
    retVal = coSdoServerInit(1u);
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	f007 fc5e 	bl	800f788 <coSdoServerInit>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retVal != RET_OK) {
 8007ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <coCanOpenStackInit+0x74>
        return(retVal);
 8007eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ede:	e072      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    }
    /* initialize error control */
    retVal = coErrorCtrlInit(od_const_u16[0], 3u);
 8007ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ee4:	2103      	movs	r1, #3
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f003 fc44 	bl	800b774 <coErrorCtrlInit>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retVal != RET_OK) {
 8007ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <coCanOpenStackInit+0x94>
        return(retVal);
 8007efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007efe:	e062      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    }
    /* initialize emergency */
    retVal = coEmcyProducerInit();
 8007f00:	f003 f9c4 	bl	800b28c <coEmcyProducerInit>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retVal != RET_OK) {
 8007f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <coCanOpenStackInit+0xac>
        return(retVal);
 8007f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f16:	e056      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    }
    /* initialize sync */
    retVal = coSyncInit(od_const_u32[1]);
 8007f18:	2380      	movs	r3, #128	; 0x80
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f007 fde4 	bl	800fae8 <coSyncInit>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retVal != RET_OK) {
 8007f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <coCanOpenStackInit+0xc8>
        return(retVal);
 8007f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f32:	e048      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    }
    /* initialize TPDO 1 */
    retVal = coPdoTransmitInit(1u, od_const_u8[5], od_const_u16[1], od_const_u16[2], od_const_u8[0], &mapTableTPDO1);
 8007f34:	21fe      	movs	r1, #254	; 0xfe
 8007f36:	2000      	movs	r0, #0
 8007f38:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4a28      	ldr	r2, [pc, #160]	; (8007fe0 <coCanOpenStackInit+0x174>)
 8007f40:	9201      	str	r2, [sp, #4]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	4623      	mov	r3, r4
 8007f46:	4602      	mov	r2, r0
 8007f48:	2001      	movs	r0, #1
 8007f4a:	f006 fa9d 	bl	800e488 <coPdoTransmitInit>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retVal != RET_OK) {
 8007f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <coCanOpenStackInit+0xf6>
        return(retVal);
 8007f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f60:	e031      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    }
    /* initialize RPDO 1 */
    retVal = coPdoReceiveInit(1u, od_const_u8[5], od_const_u16[1], od_const_u16[1], &mapTableRPDO0);
 8007f62:	21fe      	movs	r1, #254	; 0xfe
 8007f64:	2200      	movs	r2, #0
 8007f66:	2000      	movs	r0, #0
 8007f68:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <coCanOpenStackInit+0x178>)
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2001      	movs	r0, #1
 8007f70:	f006 fb18 	bl	800e5a4 <coPdoReceiveInit>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retVal != RET_OK) {
 8007f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <coCanOpenStackInit+0x11c>
        return(retVal);
 8007f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f86:	e01e      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    retVal = coEventRegister_LOAD_PARA(pLoadFunction);
    if (retVal != RET_OK) {
        return (retVal);
    }
#else
    if (pLoadFunction != NULL) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <coCanOpenStackInit+0x126>
        return RET_INVALID_PARAMETER;
 8007f8e:	230a      	movs	r3, #10
 8007f90:	e019      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    }
#endif /* CO_EVENT_DYNAMIC_STORE || CO_EVENT_PROFILE_STORE */

    /* initialize LSS Slave */
    retVal =  coLssInit();
 8007f92:	f004 f8e5 	bl	800c160 <coLssInit>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retVal != RET_OK) {
 8007f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d002      	beq.n	8007faa <coCanOpenStackInit+0x13e>
        return(retVal);
 8007fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fa8:	e00d      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    }
    /* initialize NMT slave */ 
    retVal = coNmtInit(0u);
 8007faa:	2000      	movs	r0, #0
 8007fac:	f004 fa34 	bl	800c418 <coNmtInit>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retVal != RET_OK) {
 8007fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <coCanOpenStackInit+0x158>
        return(retVal);
 8007fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fc2:	e000      	b.n	8007fc6 <coCanOpenStackInit+0x15a>
    }
    return(RET_OK);
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3728      	adds	r7, #40	; 0x28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	08012e34 	.word	0x08012e34
 8007fd4:	080132a8 	.word	0x080132a8
 8007fd8:	08012fe0 	.word	0x08012fe0
 8007fdc:	080131c0 	.word	0x080131c0
 8007fe0:	08013240 	.word	0x08013240
 8007fe4:	08013274 	.word	0x08013274

08007fe8 <__NVIC_SetPriority>:
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6039      	str	r1, [r7, #0]
 8007ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	db0a      	blt.n	8008012 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	490c      	ldr	r1, [pc, #48]	; (8008034 <__NVIC_SetPriority+0x4c>)
 8008002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008006:	0112      	lsls	r2, r2, #4
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	440b      	add	r3, r1
 800800c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008010:	e00a      	b.n	8008028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	b2da      	uxtb	r2, r3
 8008016:	4908      	ldr	r1, [pc, #32]	; (8008038 <__NVIC_SetPriority+0x50>)
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	3b04      	subs	r3, #4
 8008020:	0112      	lsls	r2, r2, #4
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	440b      	add	r3, r1
 8008026:	761a      	strb	r2, [r3, #24]
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	e000e100 	.word	0xe000e100
 8008038:	e000ed00 	.word	0xe000ed00

0800803c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800803c:	b580      	push	{r7, lr}
 800803e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008040:	4b05      	ldr	r3, [pc, #20]	; (8008058 <SysTick_Handler+0x1c>)
 8008042:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008044:	f001 fcfe 	bl	8009a44 <xTaskGetSchedulerState>
 8008048:	4603      	mov	r3, r0
 800804a:	2b01      	cmp	r3, #1
 800804c:	d001      	beq.n	8008052 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800804e:	f002 fae3 	bl	800a618 <xPortSysTickHandler>
  }
}
 8008052:	bf00      	nop
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	e000e010 	.word	0xe000e010

0800805c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008060:	2100      	movs	r1, #0
 8008062:	f06f 0004 	mvn.w	r0, #4
 8008066:	f7ff ffbf 	bl	8007fe8 <__NVIC_SetPriority>
#endif
}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008076:	f3ef 8305 	mrs	r3, IPSR
 800807a:	603b      	str	r3, [r7, #0]
  return(result);
 800807c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008082:	f06f 0305 	mvn.w	r3, #5
 8008086:	607b      	str	r3, [r7, #4]
 8008088:	e00c      	b.n	80080a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800808a:	4b0a      	ldr	r3, [pc, #40]	; (80080b4 <osKernelInitialize+0x44>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d105      	bne.n	800809e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008092:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <osKernelInitialize+0x44>)
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008098:	2300      	movs	r3, #0
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	e002      	b.n	80080a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080a4:	687b      	ldr	r3, [r7, #4]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000248 	.word	0x20000248

080080b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080be:	f3ef 8305 	mrs	r3, IPSR
 80080c2:	603b      	str	r3, [r7, #0]
  return(result);
 80080c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80080ca:	f06f 0305 	mvn.w	r3, #5
 80080ce:	607b      	str	r3, [r7, #4]
 80080d0:	e010      	b.n	80080f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80080d2:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <osKernelStart+0x48>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d109      	bne.n	80080ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80080da:	f7ff ffbf 	bl	800805c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <osKernelStart+0x48>)
 80080e0:	2202      	movs	r2, #2
 80080e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80080e4:	f001 f866 	bl	80091b4 <vTaskStartScheduler>
      stat = osOK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	607b      	str	r3, [r7, #4]
 80080ec:	e002      	b.n	80080f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80080ee:	f04f 33ff 	mov.w	r3, #4294967295
 80080f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080f4:	687b      	ldr	r3, [r7, #4]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000248 	.word	0x20000248

08008104 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008104:	b580      	push	{r7, lr}
 8008106:	b08e      	sub	sp, #56	; 0x38
 8008108:	af04      	add	r7, sp, #16
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008114:	f3ef 8305 	mrs	r3, IPSR
 8008118:	617b      	str	r3, [r7, #20]
  return(result);
 800811a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800811c:	2b00      	cmp	r3, #0
 800811e:	d17e      	bne.n	800821e <osThreadNew+0x11a>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d07b      	beq.n	800821e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008126:	2380      	movs	r3, #128	; 0x80
 8008128:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800812a:	2318      	movs	r3, #24
 800812c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008132:	f04f 33ff 	mov.w	r3, #4294967295
 8008136:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d045      	beq.n	80081ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <osThreadNew+0x48>
        name = attr->name;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d008      	beq.n	8008172 <osThreadNew+0x6e>
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	2b38      	cmp	r3, #56	; 0x38
 8008164:	d805      	bhi.n	8008172 <osThreadNew+0x6e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <osThreadNew+0x72>
        return (NULL);
 8008172:	2300      	movs	r3, #0
 8008174:	e054      	b.n	8008220 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	089b      	lsrs	r3, r3, #2
 8008184:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00e      	beq.n	80081ac <osThreadNew+0xa8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	2b5b      	cmp	r3, #91	; 0x5b
 8008194:	d90a      	bls.n	80081ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800819a:	2b00      	cmp	r3, #0
 800819c:	d006      	beq.n	80081ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <osThreadNew+0xa8>
        mem = 1;
 80081a6:	2301      	movs	r3, #1
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	e010      	b.n	80081ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10c      	bne.n	80081ce <osThreadNew+0xca>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d108      	bne.n	80081ce <osThreadNew+0xca>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d104      	bne.n	80081ce <osThreadNew+0xca>
          mem = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61bb      	str	r3, [r7, #24]
 80081c8:	e001      	b.n	80081ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d110      	bne.n	80081f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081dc:	9202      	str	r2, [sp, #8]
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	6a3a      	ldr	r2, [r7, #32]
 80081e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fe0c 	bl	8008e08 <xTaskCreateStatic>
 80081f0:	4603      	mov	r3, r0
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	e013      	b.n	800821e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d110      	bne.n	800821e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	b29a      	uxth	r2, r3
 8008200:	f107 0310 	add.w	r3, r7, #16
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 fe57 	bl	8008ec2 <xTaskCreate>
 8008214:	4603      	mov	r3, r0
 8008216:	2b01      	cmp	r3, #1
 8008218:	d001      	beq.n	800821e <osThreadNew+0x11a>
            hTask = NULL;
 800821a:	2300      	movs	r3, #0
 800821c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800821e:	693b      	ldr	r3, [r7, #16]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3728      	adds	r7, #40	; 0x28
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008230:	f3ef 8305 	mrs	r3, IPSR
 8008234:	60bb      	str	r3, [r7, #8]
  return(result);
 8008236:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <osDelay+0x1c>
    stat = osErrorISR;
 800823c:	f06f 0305 	mvn.w	r3, #5
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	e007      	b.n	8008254 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <osDelay+0x2c>
      vTaskDelay(ticks);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 ff7c 	bl	800914c <vTaskDelay>
    }
  }

  return (stat);
 8008254:	68fb      	ldr	r3, [r7, #12]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4a07      	ldr	r2, [pc, #28]	; (800828c <vApplicationGetIdleTaskMemory+0x2c>)
 8008270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	4a06      	ldr	r2, [pc, #24]	; (8008290 <vApplicationGetIdleTaskMemory+0x30>)
 8008276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2280      	movs	r2, #128	; 0x80
 800827c:	601a      	str	r2, [r3, #0]
}
 800827e:	bf00      	nop
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	2000024c 	.word	0x2000024c
 8008290:	200002a8 	.word	0x200002a8

08008294 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4a07      	ldr	r2, [pc, #28]	; (80082c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80082a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	4a06      	ldr	r2, [pc, #24]	; (80082c4 <vApplicationGetTimerTaskMemory+0x30>)
 80082aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082b2:	601a      	str	r2, [r3, #0]
}
 80082b4:	bf00      	nop
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	200004a8 	.word	0x200004a8
 80082c4:	20000504 	.word	0x20000504

080082c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f103 0208 	add.w	r2, r3, #8
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f04f 32ff 	mov.w	r2, #4294967295
 80082e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f103 0208 	add.w	r2, r3, #8
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f103 0208 	add.w	r2, r3, #8
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008322:	b480      	push	{r7}
 8008324:	b085      	sub	sp, #20
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
}
 800835e:	bf00      	nop
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800836a:	b480      	push	{r7}
 800836c:	b085      	sub	sp, #20
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d103      	bne.n	800838a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	e00c      	b.n	80083a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3308      	adds	r3, #8
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	e002      	b.n	8008398 <vListInsert+0x2e>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d2f6      	bcs.n	8008392 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	601a      	str	r2, [r3, #0]
}
 80083d0:	bf00      	nop
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6892      	ldr	r2, [r2, #8]
 80083f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6852      	ldr	r2, [r2, #4]
 80083fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	429a      	cmp	r2, r3
 8008406:	d103      	bne.n	8008410 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	1e5a      	subs	r2, r3, #1
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800845a:	f002 f84b 	bl	800a4f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008466:	68f9      	ldr	r1, [r7, #12]
 8008468:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800846a:	fb01 f303 	mul.w	r3, r1, r3
 800846e:	441a      	add	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848a:	3b01      	subs	r3, #1
 800848c:	68f9      	ldr	r1, [r7, #12]
 800848e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008490:	fb01 f303 	mul.w	r3, r1, r3
 8008494:	441a      	add	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	22ff      	movs	r2, #255	; 0xff
 800849e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	22ff      	movs	r2, #255	; 0xff
 80084a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d114      	bne.n	80084da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01a      	beq.n	80084ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3310      	adds	r3, #16
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 f903 	bl	80096c8 <xTaskRemoveFromEventList>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d012      	beq.n	80084ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80084c8:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <xQueueGenericReset+0xcc>)
 80084ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	e009      	b.n	80084ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3310      	adds	r3, #16
 80084de:	4618      	mov	r0, r3
 80084e0:	f7ff fef2 	bl	80082c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3324      	adds	r3, #36	; 0x24
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff feed 	bl	80082c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084ee:	f002 f831 	bl	800a554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80084f2:	2301      	movs	r3, #1
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	e000ed04 	.word	0xe000ed04

08008500 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08e      	sub	sp, #56	; 0x38
 8008504:	af02      	add	r7, sp, #8
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10a      	bne.n	800852a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <xQueueGenericCreateStatic+0x52>
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <xQueueGenericCreateStatic+0x56>
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <xQueueGenericCreateStatic+0x58>
 8008556:	2300      	movs	r3, #0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	623b      	str	r3, [r7, #32]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <xQueueGenericCreateStatic+0x7e>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <xQueueGenericCreateStatic+0x82>
 800857e:	2301      	movs	r3, #1
 8008580:	e000      	b.n	8008584 <xQueueGenericCreateStatic+0x84>
 8008582:	2300      	movs	r3, #0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	61fb      	str	r3, [r7, #28]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800859e:	2350      	movs	r3, #80	; 0x50
 80085a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b50      	cmp	r3, #80	; 0x50
 80085a6:	d00a      	beq.n	80085be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	61bb      	str	r3, [r7, #24]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80085be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80085c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	4613      	mov	r3, r2
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 f805 	bl	80085f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3730      	adds	r7, #48	; 0x30
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d103      	bne.n	800860c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	e002      	b.n	8008612 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800861e:	2101      	movs	r1, #1
 8008620:	69b8      	ldr	r0, [r7, #24]
 8008622:	f7ff ff05 	bl	8008430 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08e      	sub	sp, #56	; 0x38
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008646:	2300      	movs	r3, #0
 8008648:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <xQueueGenericSend+0x32>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d103      	bne.n	8008678 <xQueueGenericSend+0x40>
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <xQueueGenericSend+0x44>
 8008678:	2301      	movs	r3, #1
 800867a:	e000      	b.n	800867e <xQueueGenericSend+0x46>
 800867c:	2300      	movs	r3, #0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <xQueueGenericSend+0x60>
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008694:	bf00      	nop
 8008696:	e7fe      	b.n	8008696 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d103      	bne.n	80086a6 <xQueueGenericSend+0x6e>
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <xQueueGenericSend+0x72>
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <xQueueGenericSend+0x74>
 80086aa:	2300      	movs	r3, #0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10a      	bne.n	80086c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	623b      	str	r3, [r7, #32]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086c6:	f001 f9bd 	bl	8009a44 <xTaskGetSchedulerState>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <xQueueGenericSend+0x9e>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <xQueueGenericSend+0xa2>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <xQueueGenericSend+0xa4>
 80086da:	2300      	movs	r3, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10a      	bne.n	80086f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	61fb      	str	r3, [r7, #28]
}
 80086f2:	bf00      	nop
 80086f4:	e7fe      	b.n	80086f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086f6:	f001 fefd 	bl	800a4f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008702:	429a      	cmp	r2, r3
 8008704:	d302      	bcc.n	800870c <xQueueGenericSend+0xd4>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d129      	bne.n	8008760 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	68b9      	ldr	r1, [r7, #8]
 8008710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008712:	f000 fa0b 	bl	8008b2c <prvCopyDataToQueue>
 8008716:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	2b00      	cmp	r3, #0
 800871e:	d010      	beq.n	8008742 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	3324      	adds	r3, #36	; 0x24
 8008724:	4618      	mov	r0, r3
 8008726:	f000 ffcf 	bl	80096c8 <xTaskRemoveFromEventList>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d013      	beq.n	8008758 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008730:	4b3f      	ldr	r3, [pc, #252]	; (8008830 <xQueueGenericSend+0x1f8>)
 8008732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	e00a      	b.n	8008758 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d007      	beq.n	8008758 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008748:	4b39      	ldr	r3, [pc, #228]	; (8008830 <xQueueGenericSend+0x1f8>)
 800874a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008758:	f001 fefc 	bl	800a554 <vPortExitCritical>
				return pdPASS;
 800875c:	2301      	movs	r3, #1
 800875e:	e063      	b.n	8008828 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d103      	bne.n	800876e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008766:	f001 fef5 	bl	800a554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800876a:	2300      	movs	r3, #0
 800876c:	e05c      	b.n	8008828 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800876e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008774:	f107 0314 	add.w	r3, r7, #20
 8008778:	4618      	mov	r0, r3
 800877a:	f001 f809 	bl	8009790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800877e:	2301      	movs	r3, #1
 8008780:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008782:	f001 fee7 	bl	800a554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008786:	f000 fd7b 	bl	8009280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800878a:	f001 feb3 	bl	800a4f4 <vPortEnterCritical>
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008794:	b25b      	sxtb	r3, r3
 8008796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879a:	d103      	bne.n	80087a4 <xQueueGenericSend+0x16c>
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087aa:	b25b      	sxtb	r3, r3
 80087ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b0:	d103      	bne.n	80087ba <xQueueGenericSend+0x182>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087ba:	f001 fecb 	bl	800a554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087be:	1d3a      	adds	r2, r7, #4
 80087c0:	f107 0314 	add.w	r3, r7, #20
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fff8 	bl	80097bc <xTaskCheckForTimeOut>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d124      	bne.n	800881c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087d4:	f000 faa2 	bl	8008d1c <prvIsQueueFull>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d018      	beq.n	8008810 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	3310      	adds	r3, #16
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	4611      	mov	r1, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 ff1e 	bl	8009628 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ee:	f000 fa2d 	bl	8008c4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087f2:	f000 fd53 	bl	800929c <xTaskResumeAll>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f47f af7c 	bne.w	80086f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80087fe:	4b0c      	ldr	r3, [pc, #48]	; (8008830 <xQueueGenericSend+0x1f8>)
 8008800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	e772      	b.n	80086f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008812:	f000 fa1b 	bl	8008c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008816:	f000 fd41 	bl	800929c <xTaskResumeAll>
 800881a:	e76c      	b.n	80086f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800881c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800881e:	f000 fa15 	bl	8008c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008822:	f000 fd3b 	bl	800929c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008826:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008828:	4618      	mov	r0, r3
 800882a:	3738      	adds	r7, #56	; 0x38
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b090      	sub	sp, #64	; 0x40
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d103      	bne.n	8008870 <xQueueGenericSendFromISR+0x3c>
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <xQueueGenericSendFromISR+0x40>
 8008870:	2301      	movs	r3, #1
 8008872:	e000      	b.n	8008876 <xQueueGenericSendFromISR+0x42>
 8008874:	2300      	movs	r3, #0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b02      	cmp	r3, #2
 8008894:	d103      	bne.n	800889e <xQueueGenericSendFromISR+0x6a>
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889a:	2b01      	cmp	r3, #1
 800889c:	d101      	bne.n	80088a2 <xQueueGenericSendFromISR+0x6e>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <xQueueGenericSendFromISR+0x70>
 80088a2:	2300      	movs	r3, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	623b      	str	r3, [r7, #32]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088be:	f001 fefb 	bl	800a6b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088c2:	f3ef 8211 	mrs	r2, BASEPRI
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	61fa      	str	r2, [r7, #28]
 80088d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d302      	bcc.n	80088f0 <xQueueGenericSendFromISR+0xbc>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d12f      	bne.n	8008950 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008906:	f000 f911 	bl	8008b2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800890a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d112      	bne.n	800893a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d016      	beq.n	800894a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	3324      	adds	r3, #36	; 0x24
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fed1 	bl	80096c8 <xTaskRemoveFromEventList>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00e      	beq.n	800894a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00b      	beq.n	800894a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	e007      	b.n	800894a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800893a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800893e:	3301      	adds	r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	b25a      	sxtb	r2, r3
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800894a:	2301      	movs	r3, #1
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800894e:	e001      	b.n	8008954 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008950:	2300      	movs	r3, #0
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008956:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800895e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008962:	4618      	mov	r0, r3
 8008964:	3740      	adds	r7, #64	; 0x40
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08c      	sub	sp, #48	; 0x30
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008978:	2300      	movs	r3, #0
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10a      	bne.n	800899c <xQueueReceive+0x30>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	623b      	str	r3, [r7, #32]
}
 8008998:	bf00      	nop
 800899a:	e7fe      	b.n	800899a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <xQueueReceive+0x3e>
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <xQueueReceive+0x42>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e000      	b.n	80089b0 <xQueueReceive+0x44>
 80089ae:	2300      	movs	r3, #0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10a      	bne.n	80089ca <xQueueReceive+0x5e>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	61fb      	str	r3, [r7, #28]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089ca:	f001 f83b 	bl	8009a44 <xTaskGetSchedulerState>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d102      	bne.n	80089da <xQueueReceive+0x6e>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <xQueueReceive+0x72>
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <xQueueReceive+0x74>
 80089de:	2300      	movs	r3, #0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <xQueueReceive+0x8e>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	61bb      	str	r3, [r7, #24]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089fa:	f001 fd7b 	bl	800a4f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d01f      	beq.n	8008a4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a0e:	f000 f8f7 	bl	8008c00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	1e5a      	subs	r2, r3, #1
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00f      	beq.n	8008a42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	3310      	adds	r3, #16
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fe4e 	bl	80096c8 <xTaskRemoveFromEventList>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d007      	beq.n	8008a42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a32:	4b3d      	ldr	r3, [pc, #244]	; (8008b28 <xQueueReceive+0x1bc>)
 8008a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a42:	f001 fd87 	bl	800a554 <vPortExitCritical>
				return pdPASS;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e069      	b.n	8008b1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d103      	bne.n	8008a58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a50:	f001 fd80 	bl	800a554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a54:	2300      	movs	r3, #0
 8008a56:	e062      	b.n	8008b1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a5e:	f107 0310 	add.w	r3, r7, #16
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fe94 	bl	8009790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a6c:	f001 fd72 	bl	800a554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a70:	f000 fc06 	bl	8009280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a74:	f001 fd3e 	bl	800a4f4 <vPortEnterCritical>
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a7e:	b25b      	sxtb	r3, r3
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a84:	d103      	bne.n	8008a8e <xQueueReceive+0x122>
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a94:	b25b      	sxtb	r3, r3
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d103      	bne.n	8008aa4 <xQueueReceive+0x138>
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aa4:	f001 fd56 	bl	800a554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aa8:	1d3a      	adds	r2, r7, #4
 8008aaa:	f107 0310 	add.w	r3, r7, #16
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fe83 	bl	80097bc <xTaskCheckForTimeOut>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d123      	bne.n	8008b04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008abe:	f000 f917 	bl	8008cf0 <prvIsQueueEmpty>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d017      	beq.n	8008af8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	3324      	adds	r3, #36	; 0x24
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fda9 	bl	8009628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ad8:	f000 f8b8 	bl	8008c4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008adc:	f000 fbde 	bl	800929c <xTaskResumeAll>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d189      	bne.n	80089fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008ae6:	4b10      	ldr	r3, [pc, #64]	; (8008b28 <xQueueReceive+0x1bc>)
 8008ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	e780      	b.n	80089fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afa:	f000 f8a7 	bl	8008c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008afe:	f000 fbcd 	bl	800929c <xTaskResumeAll>
 8008b02:	e77a      	b.n	80089fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b06:	f000 f8a1 	bl	8008c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b0a:	f000 fbc7 	bl	800929c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b10:	f000 f8ee 	bl	8008cf0 <prvIsQueueEmpty>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f43f af6f 	beq.w	80089fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3730      	adds	r7, #48	; 0x30
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	e000ed04 	.word	0xe000ed04

08008b2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10d      	bne.n	8008b66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d14d      	bne.n	8008bee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 ff92 	bl	8009a80 <xTaskPriorityDisinherit>
 8008b5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	609a      	str	r2, [r3, #8]
 8008b64:	e043      	b.n	8008bee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d119      	bne.n	8008ba0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6858      	ldr	r0, [r3, #4]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	461a      	mov	r2, r3
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	f007 fa5a 	bl	8010030 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	441a      	add	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d32b      	bcc.n	8008bee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	605a      	str	r2, [r3, #4]
 8008b9e:	e026      	b.n	8008bee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68d8      	ldr	r0, [r3, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba8:	461a      	mov	r2, r3
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	f007 fa40 	bl	8010030 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	425b      	negs	r3, r3
 8008bba:	441a      	add	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d207      	bcs.n	8008bdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd4:	425b      	negs	r3, r3
 8008bd6:	441a      	add	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d105      	bne.n	8008bee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008bf6:	697b      	ldr	r3, [r7, #20]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d018      	beq.n	8008c44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	441a      	add	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d303      	bcc.n	8008c34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68d9      	ldr	r1, [r3, #12]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	6838      	ldr	r0, [r7, #0]
 8008c40:	f007 f9f6 	bl	8010030 <memcpy>
	}
}
 8008c44:	bf00      	nop
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c54:	f001 fc4e 	bl	800a4f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c60:	e011      	b.n	8008c86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d012      	beq.n	8008c90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	3324      	adds	r3, #36	; 0x24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fd2a 	bl	80096c8 <xTaskRemoveFromEventList>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c7a:	f000 fe01 	bl	8009880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	dce9      	bgt.n	8008c62 <prvUnlockQueue+0x16>
 8008c8e:	e000      	b.n	8008c92 <prvUnlockQueue+0x46>
					break;
 8008c90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	22ff      	movs	r2, #255	; 0xff
 8008c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c9a:	f001 fc5b 	bl	800a554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c9e:	f001 fc29 	bl	800a4f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ca8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008caa:	e011      	b.n	8008cd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d012      	beq.n	8008cda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3310      	adds	r3, #16
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fd05 	bl	80096c8 <xTaskRemoveFromEventList>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cc4:	f000 fddc 	bl	8009880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dce9      	bgt.n	8008cac <prvUnlockQueue+0x60>
 8008cd8:	e000      	b.n	8008cdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008cda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	22ff      	movs	r2, #255	; 0xff
 8008ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ce4:	f001 fc36 	bl	800a554 <vPortExitCritical>
}
 8008ce8:	bf00      	nop
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cf8:	f001 fbfc 	bl	800a4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d102      	bne.n	8008d0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	e001      	b.n	8008d0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d0e:	f001 fc21 	bl	800a554 <vPortExitCritical>

	return xReturn;
 8008d12:	68fb      	ldr	r3, [r7, #12]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d24:	f001 fbe6 	bl	800a4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d102      	bne.n	8008d3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d34:	2301      	movs	r3, #1
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e001      	b.n	8008d3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d3e:	f001 fc09 	bl	800a554 <vPortExitCritical>

	return xReturn;
 8008d42:	68fb      	ldr	r3, [r7, #12]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]
 8008d5a:	e014      	b.n	8008d86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d5c:	4a0f      	ldr	r2, [pc, #60]	; (8008d9c <vQueueAddToRegistry+0x50>)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10b      	bne.n	8008d80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d68:	490c      	ldr	r1, [pc, #48]	; (8008d9c <vQueueAddToRegistry+0x50>)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d72:	4a0a      	ldr	r2, [pc, #40]	; (8008d9c <vQueueAddToRegistry+0x50>)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	4413      	add	r3, r2
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d7e:	e006      	b.n	8008d8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	3301      	adds	r3, #1
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b07      	cmp	r3, #7
 8008d8a:	d9e7      	bls.n	8008d5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	2000969c 	.word	0x2000969c

08008da0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008db0:	f001 fba0 	bl	800a4f4 <vPortEnterCritical>
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dba:	b25b      	sxtb	r3, r3
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	d103      	bne.n	8008dca <vQueueWaitForMessageRestricted+0x2a>
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dd0:	b25b      	sxtb	r3, r3
 8008dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd6:	d103      	bne.n	8008de0 <vQueueWaitForMessageRestricted+0x40>
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008de0:	f001 fbb8 	bl	800a554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d106      	bne.n	8008dfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	3324      	adds	r3, #36	; 0x24
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	68b9      	ldr	r1, [r7, #8]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fc3b 	bl	8009670 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008dfa:	6978      	ldr	r0, [r7, #20]
 8008dfc:	f7ff ff26 	bl	8008c4c <prvUnlockQueue>
	}
 8008e00:	bf00      	nop
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	; 0x38
 8008e0c:	af04      	add	r7, sp, #16
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	623b      	str	r3, [r7, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <xTaskCreateStatic+0x46>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	61fb      	str	r3, [r7, #28]
}
 8008e4a:	bf00      	nop
 8008e4c:	e7fe      	b.n	8008e4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e4e:	235c      	movs	r3, #92	; 0x5c
 8008e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b5c      	cmp	r3, #92	; 0x5c
 8008e56:	d00a      	beq.n	8008e6e <xTaskCreateStatic+0x66>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	61bb      	str	r3, [r7, #24]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d01e      	beq.n	8008eb4 <xTaskCreateStatic+0xac>
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d01b      	beq.n	8008eb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	2202      	movs	r2, #2
 8008e8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9303      	str	r3, [sp, #12]
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	9302      	str	r3, [sp, #8]
 8008e96:	f107 0314 	add.w	r3, r7, #20
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f850 	bl	8008f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eae:	f000 f8dd 	bl	800906c <prvAddNewTaskToReadyList>
 8008eb2:	e001      	b.n	8008eb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008eb8:	697b      	ldr	r3, [r7, #20]
	}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3728      	adds	r7, #40	; 0x28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b08c      	sub	sp, #48	; 0x30
 8008ec6:	af04      	add	r7, sp, #16
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	603b      	str	r3, [r7, #0]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ed2:	88fb      	ldrh	r3, [r7, #6]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 fc2e 	bl	800a738 <pvPortMalloc>
 8008edc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00e      	beq.n	8008f02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ee4:	205c      	movs	r0, #92	; 0x5c
 8008ee6:	f001 fc27 	bl	800a738 <pvPortMalloc>
 8008eea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8008ef8:	e005      	b.n	8008f06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008efa:	6978      	ldr	r0, [r7, #20]
 8008efc:	f001 fcaa 	bl	800a854 <vPortFree>
 8008f00:	e001      	b.n	8008f06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d017      	beq.n	8008f3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f14:	88fa      	ldrh	r2, [r7, #6]
 8008f16:	2300      	movs	r3, #0
 8008f18:	9303      	str	r3, [sp, #12]
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	9302      	str	r3, [sp, #8]
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68b9      	ldr	r1, [r7, #8]
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f80e 	bl	8008f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f30:	69f8      	ldr	r0, [r7, #28]
 8008f32:	f000 f89b 	bl	800906c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f36:	2301      	movs	r3, #1
 8008f38:	61bb      	str	r3, [r7, #24]
 8008f3a:	e002      	b.n	8008f42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f42:	69bb      	ldr	r3, [r7, #24]
	}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	461a      	mov	r2, r3
 8008f64:	21a5      	movs	r1, #165	; 0xa5
 8008f66:	f007 f871 	bl	801004c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f74:	3b01      	subs	r3, #1
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	f023 0307 	bic.w	r3, r3, #7
 8008f82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	617b      	str	r3, [r7, #20]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d01f      	beq.n	8008fea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008faa:	2300      	movs	r3, #0
 8008fac:	61fb      	str	r3, [r7, #28]
 8008fae:	e012      	b.n	8008fd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	7819      	ldrb	r1, [r3, #0]
 8008fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	3334      	adds	r3, #52	; 0x34
 8008fc0:	460a      	mov	r2, r1
 8008fc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d006      	beq.n	8008fde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	2b0f      	cmp	r3, #15
 8008fda:	d9e9      	bls.n	8008fb0 <prvInitialiseNewTask+0x64>
 8008fdc:	e000      	b.n	8008fe0 <prvInitialiseNewTask+0x94>
			{
				break;
 8008fde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fe8:	e003      	b.n	8008ff2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	2b37      	cmp	r3, #55	; 0x37
 8008ff6:	d901      	bls.n	8008ffc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ff8:	2337      	movs	r3, #55	; 0x37
 8008ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009000:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009006:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	2200      	movs	r2, #0
 800900c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	3304      	adds	r3, #4
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff f978 	bl	8008308 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	3318      	adds	r3, #24
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff f973 	bl	8008308 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009026:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009036:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	2200      	movs	r2, #0
 800903c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	68f9      	ldr	r1, [r7, #12]
 800904a:	69b8      	ldr	r0, [r7, #24]
 800904c:	f001 f928 	bl	800a2a0 <pxPortInitialiseStack>
 8009050:	4602      	mov	r2, r0
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009062:	bf00      	nop
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009074:	f001 fa3e 	bl	800a4f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009078:	4b2d      	ldr	r3, [pc, #180]	; (8009130 <prvAddNewTaskToReadyList+0xc4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3301      	adds	r3, #1
 800907e:	4a2c      	ldr	r2, [pc, #176]	; (8009130 <prvAddNewTaskToReadyList+0xc4>)
 8009080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009082:	4b2c      	ldr	r3, [pc, #176]	; (8009134 <prvAddNewTaskToReadyList+0xc8>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d109      	bne.n	800909e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800908a:	4a2a      	ldr	r2, [pc, #168]	; (8009134 <prvAddNewTaskToReadyList+0xc8>)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009090:	4b27      	ldr	r3, [pc, #156]	; (8009130 <prvAddNewTaskToReadyList+0xc4>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d110      	bne.n	80090ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009098:	f000 fc16 	bl	80098c8 <prvInitialiseTaskLists>
 800909c:	e00d      	b.n	80090ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800909e:	4b26      	ldr	r3, [pc, #152]	; (8009138 <prvAddNewTaskToReadyList+0xcc>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090a6:	4b23      	ldr	r3, [pc, #140]	; (8009134 <prvAddNewTaskToReadyList+0xc8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d802      	bhi.n	80090ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090b4:	4a1f      	ldr	r2, [pc, #124]	; (8009134 <prvAddNewTaskToReadyList+0xc8>)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090ba:	4b20      	ldr	r3, [pc, #128]	; (800913c <prvAddNewTaskToReadyList+0xd0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3301      	adds	r3, #1
 80090c0:	4a1e      	ldr	r2, [pc, #120]	; (800913c <prvAddNewTaskToReadyList+0xd0>)
 80090c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090c4:	4b1d      	ldr	r3, [pc, #116]	; (800913c <prvAddNewTaskToReadyList+0xd0>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d0:	4b1b      	ldr	r3, [pc, #108]	; (8009140 <prvAddNewTaskToReadyList+0xd4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d903      	bls.n	80090e0 <prvAddNewTaskToReadyList+0x74>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090dc:	4a18      	ldr	r2, [pc, #96]	; (8009140 <prvAddNewTaskToReadyList+0xd4>)
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	4613      	mov	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4a15      	ldr	r2, [pc, #84]	; (8009144 <prvAddNewTaskToReadyList+0xd8>)
 80090ee:	441a      	add	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4619      	mov	r1, r3
 80090f6:	4610      	mov	r0, r2
 80090f8:	f7ff f913 	bl	8008322 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090fc:	f001 fa2a 	bl	800a554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009100:	4b0d      	ldr	r3, [pc, #52]	; (8009138 <prvAddNewTaskToReadyList+0xcc>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00e      	beq.n	8009126 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009108:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <prvAddNewTaskToReadyList+0xc8>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	429a      	cmp	r2, r3
 8009114:	d207      	bcs.n	8009126 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009116:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <prvAddNewTaskToReadyList+0xdc>)
 8009118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000dd8 	.word	0x20000dd8
 8009134:	20000904 	.word	0x20000904
 8009138:	20000de4 	.word	0x20000de4
 800913c:	20000df4 	.word	0x20000df4
 8009140:	20000de0 	.word	0x20000de0
 8009144:	20000908 	.word	0x20000908
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d017      	beq.n	800918e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <vTaskDelay+0x60>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <vTaskDelay+0x30>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	60bb      	str	r3, [r7, #8]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800917c:	f000 f880 	bl	8009280 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009180:	2100      	movs	r1, #0
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fcea 	bl	8009b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009188:	f000 f888 	bl	800929c <xTaskResumeAll>
 800918c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d107      	bne.n	80091a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009194:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <vTaskDelay+0x64>)
 8009196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091a4:	bf00      	nop
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	20000e00 	.word	0x20000e00
 80091b0:	e000ed04 	.word	0xe000ed04

080091b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	; 0x28
 80091b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091c2:	463a      	mov	r2, r7
 80091c4:	1d39      	adds	r1, r7, #4
 80091c6:	f107 0308 	add.w	r3, r7, #8
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff f848 	bl	8008260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	9202      	str	r2, [sp, #8]
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	2300      	movs	r3, #0
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	2300      	movs	r3, #0
 80091e0:	460a      	mov	r2, r1
 80091e2:	4921      	ldr	r1, [pc, #132]	; (8009268 <vTaskStartScheduler+0xb4>)
 80091e4:	4821      	ldr	r0, [pc, #132]	; (800926c <vTaskStartScheduler+0xb8>)
 80091e6:	f7ff fe0f 	bl	8008e08 <xTaskCreateStatic>
 80091ea:	4603      	mov	r3, r0
 80091ec:	4a20      	ldr	r2, [pc, #128]	; (8009270 <vTaskStartScheduler+0xbc>)
 80091ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091f0:	4b1f      	ldr	r3, [pc, #124]	; (8009270 <vTaskStartScheduler+0xbc>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091f8:	2301      	movs	r3, #1
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	e001      	b.n	8009202 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091fe:	2300      	movs	r3, #0
 8009200:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d102      	bne.n	800920e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009208:	f000 fcfc 	bl	8009c04 <xTimerCreateTimerTask>
 800920c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d116      	bne.n	8009242 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	613b      	str	r3, [r7, #16]
}
 8009226:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009228:	4b12      	ldr	r3, [pc, #72]	; (8009274 <vTaskStartScheduler+0xc0>)
 800922a:	f04f 32ff 	mov.w	r2, #4294967295
 800922e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009230:	4b11      	ldr	r3, [pc, #68]	; (8009278 <vTaskStartScheduler+0xc4>)
 8009232:	2201      	movs	r2, #1
 8009234:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009236:	4b11      	ldr	r3, [pc, #68]	; (800927c <vTaskStartScheduler+0xc8>)
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800923c:	f001 f8b8 	bl	800a3b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009240:	e00e      	b.n	8009260 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009248:	d10a      	bne.n	8009260 <vTaskStartScheduler+0xac>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	60fb      	str	r3, [r7, #12]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <vTaskStartScheduler+0xaa>
}
 8009260:	bf00      	nop
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	08012e50 	.word	0x08012e50
 800926c:	08009899 	.word	0x08009899
 8009270:	20000dfc 	.word	0x20000dfc
 8009274:	20000df8 	.word	0x20000df8
 8009278:	20000de4 	.word	0x20000de4
 800927c:	20000ddc 	.word	0x20000ddc

08009280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009284:	4b04      	ldr	r3, [pc, #16]	; (8009298 <vTaskSuspendAll+0x18>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3301      	adds	r3, #1
 800928a:	4a03      	ldr	r2, [pc, #12]	; (8009298 <vTaskSuspendAll+0x18>)
 800928c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800928e:	bf00      	nop
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	20000e00 	.word	0x20000e00

0800929c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092a6:	2300      	movs	r3, #0
 80092a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092aa:	4b42      	ldr	r3, [pc, #264]	; (80093b4 <xTaskResumeAll+0x118>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	603b      	str	r3, [r7, #0]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092c8:	f001 f914 	bl	800a4f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092cc:	4b39      	ldr	r3, [pc, #228]	; (80093b4 <xTaskResumeAll+0x118>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	4a38      	ldr	r2, [pc, #224]	; (80093b4 <xTaskResumeAll+0x118>)
 80092d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092d6:	4b37      	ldr	r3, [pc, #220]	; (80093b4 <xTaskResumeAll+0x118>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d162      	bne.n	80093a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092de:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <xTaskResumeAll+0x11c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d05e      	beq.n	80093a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092e6:	e02f      	b.n	8009348 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e8:	4b34      	ldr	r3, [pc, #208]	; (80093bc <xTaskResumeAll+0x120>)
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3318      	adds	r3, #24
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff f871 	bl	80083dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff f86c 	bl	80083dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009308:	4b2d      	ldr	r3, [pc, #180]	; (80093c0 <xTaskResumeAll+0x124>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d903      	bls.n	8009318 <xTaskResumeAll+0x7c>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	4a2a      	ldr	r2, [pc, #168]	; (80093c0 <xTaskResumeAll+0x124>)
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4a27      	ldr	r2, [pc, #156]	; (80093c4 <xTaskResumeAll+0x128>)
 8009326:	441a      	add	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3304      	adds	r3, #4
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fe fff7 	bl	8008322 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009338:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <xTaskResumeAll+0x12c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933e:	429a      	cmp	r2, r3
 8009340:	d302      	bcc.n	8009348 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009342:	4b22      	ldr	r3, [pc, #136]	; (80093cc <xTaskResumeAll+0x130>)
 8009344:	2201      	movs	r2, #1
 8009346:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009348:	4b1c      	ldr	r3, [pc, #112]	; (80093bc <xTaskResumeAll+0x120>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1cb      	bne.n	80092e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009356:	f000 fb55 	bl	8009a04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800935a:	4b1d      	ldr	r3, [pc, #116]	; (80093d0 <xTaskResumeAll+0x134>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d010      	beq.n	8009388 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009366:	f000 f847 	bl	80093f8 <xTaskIncrementTick>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009370:	4b16      	ldr	r3, [pc, #88]	; (80093cc <xTaskResumeAll+0x130>)
 8009372:	2201      	movs	r2, #1
 8009374:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3b01      	subs	r3, #1
 800937a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1f1      	bne.n	8009366 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009382:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <xTaskResumeAll+0x134>)
 8009384:	2200      	movs	r2, #0
 8009386:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009388:	4b10      	ldr	r3, [pc, #64]	; (80093cc <xTaskResumeAll+0x130>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d009      	beq.n	80093a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009390:	2301      	movs	r3, #1
 8009392:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009394:	4b0f      	ldr	r3, [pc, #60]	; (80093d4 <xTaskResumeAll+0x138>)
 8009396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093a4:	f001 f8d6 	bl	800a554 <vPortExitCritical>

	return xAlreadyYielded;
 80093a8:	68bb      	ldr	r3, [r7, #8]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000e00 	.word	0x20000e00
 80093b8:	20000dd8 	.word	0x20000dd8
 80093bc:	20000d98 	.word	0x20000d98
 80093c0:	20000de0 	.word	0x20000de0
 80093c4:	20000908 	.word	0x20000908
 80093c8:	20000904 	.word	0x20000904
 80093cc:	20000dec 	.word	0x20000dec
 80093d0:	20000de8 	.word	0x20000de8
 80093d4:	e000ed04 	.word	0xe000ed04

080093d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093de:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <xTaskGetTickCount+0x1c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093e4:	687b      	ldr	r3, [r7, #4]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20000ddc 	.word	0x20000ddc

080093f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009402:	4b4f      	ldr	r3, [pc, #316]	; (8009540 <xTaskIncrementTick+0x148>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f040 808f 	bne.w	800952a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800940c:	4b4d      	ldr	r3, [pc, #308]	; (8009544 <xTaskIncrementTick+0x14c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009414:	4a4b      	ldr	r2, [pc, #300]	; (8009544 <xTaskIncrementTick+0x14c>)
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d120      	bne.n	8009462 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009420:	4b49      	ldr	r3, [pc, #292]	; (8009548 <xTaskIncrementTick+0x150>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <xTaskIncrementTick+0x48>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	603b      	str	r3, [r7, #0]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <xTaskIncrementTick+0x46>
 8009440:	4b41      	ldr	r3, [pc, #260]	; (8009548 <xTaskIncrementTick+0x150>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	4b41      	ldr	r3, [pc, #260]	; (800954c <xTaskIncrementTick+0x154>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a3f      	ldr	r2, [pc, #252]	; (8009548 <xTaskIncrementTick+0x150>)
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	4a3f      	ldr	r2, [pc, #252]	; (800954c <xTaskIncrementTick+0x154>)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6013      	str	r3, [r2, #0]
 8009454:	4b3e      	ldr	r3, [pc, #248]	; (8009550 <xTaskIncrementTick+0x158>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3301      	adds	r3, #1
 800945a:	4a3d      	ldr	r2, [pc, #244]	; (8009550 <xTaskIncrementTick+0x158>)
 800945c:	6013      	str	r3, [r2, #0]
 800945e:	f000 fad1 	bl	8009a04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009462:	4b3c      	ldr	r3, [pc, #240]	; (8009554 <xTaskIncrementTick+0x15c>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	429a      	cmp	r2, r3
 800946a:	d349      	bcc.n	8009500 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800946c:	4b36      	ldr	r3, [pc, #216]	; (8009548 <xTaskIncrementTick+0x150>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d104      	bne.n	8009480 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009476:	4b37      	ldr	r3, [pc, #220]	; (8009554 <xTaskIncrementTick+0x15c>)
 8009478:	f04f 32ff 	mov.w	r2, #4294967295
 800947c:	601a      	str	r2, [r3, #0]
					break;
 800947e:	e03f      	b.n	8009500 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009480:	4b31      	ldr	r3, [pc, #196]	; (8009548 <xTaskIncrementTick+0x150>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	429a      	cmp	r2, r3
 8009496:	d203      	bcs.n	80094a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009498:	4a2e      	ldr	r2, [pc, #184]	; (8009554 <xTaskIncrementTick+0x15c>)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800949e:	e02f      	b.n	8009500 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe ff99 	bl	80083dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d004      	beq.n	80094bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	3318      	adds	r3, #24
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe ff90 	bl	80083dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c0:	4b25      	ldr	r3, [pc, #148]	; (8009558 <xTaskIncrementTick+0x160>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d903      	bls.n	80094d0 <xTaskIncrementTick+0xd8>
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	4a22      	ldr	r2, [pc, #136]	; (8009558 <xTaskIncrementTick+0x160>)
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4a1f      	ldr	r2, [pc, #124]	; (800955c <xTaskIncrementTick+0x164>)
 80094de:	441a      	add	r2, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	3304      	adds	r3, #4
 80094e4:	4619      	mov	r1, r3
 80094e6:	4610      	mov	r0, r2
 80094e8:	f7fe ff1b 	bl	8008322 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f0:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <xTaskIncrementTick+0x168>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d3b8      	bcc.n	800946c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80094fa:	2301      	movs	r3, #1
 80094fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094fe:	e7b5      	b.n	800946c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009500:	4b17      	ldr	r3, [pc, #92]	; (8009560 <xTaskIncrementTick+0x168>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	4915      	ldr	r1, [pc, #84]	; (800955c <xTaskIncrementTick+0x164>)
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	440b      	add	r3, r1
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d901      	bls.n	800951c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009518:	2301      	movs	r3, #1
 800951a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800951c:	4b11      	ldr	r3, [pc, #68]	; (8009564 <xTaskIncrementTick+0x16c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d007      	beq.n	8009534 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009524:	2301      	movs	r3, #1
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e004      	b.n	8009534 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <xTaskIncrementTick+0x170>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3301      	adds	r3, #1
 8009530:	4a0d      	ldr	r2, [pc, #52]	; (8009568 <xTaskIncrementTick+0x170>)
 8009532:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009534:	697b      	ldr	r3, [r7, #20]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000e00 	.word	0x20000e00
 8009544:	20000ddc 	.word	0x20000ddc
 8009548:	20000d90 	.word	0x20000d90
 800954c:	20000d94 	.word	0x20000d94
 8009550:	20000df0 	.word	0x20000df0
 8009554:	20000df8 	.word	0x20000df8
 8009558:	20000de0 	.word	0x20000de0
 800955c:	20000908 	.word	0x20000908
 8009560:	20000904 	.word	0x20000904
 8009564:	20000dec 	.word	0x20000dec
 8009568:	20000de8 	.word	0x20000de8

0800956c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009572:	4b28      	ldr	r3, [pc, #160]	; (8009614 <vTaskSwitchContext+0xa8>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800957a:	4b27      	ldr	r3, [pc, #156]	; (8009618 <vTaskSwitchContext+0xac>)
 800957c:	2201      	movs	r2, #1
 800957e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009580:	e041      	b.n	8009606 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009582:	4b25      	ldr	r3, [pc, #148]	; (8009618 <vTaskSwitchContext+0xac>)
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009588:	4b24      	ldr	r3, [pc, #144]	; (800961c <vTaskSwitchContext+0xb0>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	e010      	b.n	80095b2 <vTaskSwitchContext+0x46>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10a      	bne.n	80095ac <vTaskSwitchContext+0x40>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	607b      	str	r3, [r7, #4]
}
 80095a8:	bf00      	nop
 80095aa:	e7fe      	b.n	80095aa <vTaskSwitchContext+0x3e>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	60fb      	str	r3, [r7, #12]
 80095b2:	491b      	ldr	r1, [pc, #108]	; (8009620 <vTaskSwitchContext+0xb4>)
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0e4      	beq.n	8009590 <vTaskSwitchContext+0x24>
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4a13      	ldr	r2, [pc, #76]	; (8009620 <vTaskSwitchContext+0xb4>)
 80095d2:	4413      	add	r3, r2
 80095d4:	60bb      	str	r3, [r7, #8]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	605a      	str	r2, [r3, #4]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	3308      	adds	r3, #8
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d104      	bne.n	80095f6 <vTaskSwitchContext+0x8a>
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	605a      	str	r2, [r3, #4]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	4a09      	ldr	r2, [pc, #36]	; (8009624 <vTaskSwitchContext+0xb8>)
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	4a06      	ldr	r2, [pc, #24]	; (800961c <vTaskSwitchContext+0xb0>)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6013      	str	r3, [r2, #0]
}
 8009606:	bf00      	nop
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20000e00 	.word	0x20000e00
 8009618:	20000dec 	.word	0x20000dec
 800961c:	20000de0 	.word	0x20000de0
 8009620:	20000908 	.word	0x20000908
 8009624:	20000904 	.word	0x20000904

08009628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	60fb      	str	r3, [r7, #12]
}
 800964a:	bf00      	nop
 800964c:	e7fe      	b.n	800964c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <vTaskPlaceOnEventList+0x44>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3318      	adds	r3, #24
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7fe fe87 	bl	800836a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800965c:	2101      	movs	r1, #1
 800965e:	6838      	ldr	r0, [r7, #0]
 8009660:	f000 fa7c 	bl	8009b5c <prvAddCurrentTaskToDelayedList>
}
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000904 	.word	0x20000904

08009670 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	617b      	str	r3, [r7, #20]
}
 8009694:	bf00      	nop
 8009696:	e7fe      	b.n	8009696 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009698:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3318      	adds	r3, #24
 800969e:	4619      	mov	r1, r3
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7fe fe3e 	bl	8008322 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80096ac:	f04f 33ff 	mov.w	r3, #4294967295
 80096b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	68b8      	ldr	r0, [r7, #8]
 80096b6:	f000 fa51 	bl	8009b5c <prvAddCurrentTaskToDelayedList>
	}
 80096ba:	bf00      	nop
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20000904 	.word	0x20000904

080096c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	60fb      	str	r3, [r7, #12]
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	3318      	adds	r3, #24
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe fe6f 	bl	80083dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096fe:	4b1e      	ldr	r3, [pc, #120]	; (8009778 <xTaskRemoveFromEventList+0xb0>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d11d      	bne.n	8009742 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3304      	adds	r3, #4
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fe66 	bl	80083dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009714:	4b19      	ldr	r3, [pc, #100]	; (800977c <xTaskRemoveFromEventList+0xb4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	429a      	cmp	r2, r3
 800971a:	d903      	bls.n	8009724 <xTaskRemoveFromEventList+0x5c>
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009720:	4a16      	ldr	r2, [pc, #88]	; (800977c <xTaskRemoveFromEventList+0xb4>)
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4a13      	ldr	r2, [pc, #76]	; (8009780 <xTaskRemoveFromEventList+0xb8>)
 8009732:	441a      	add	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	3304      	adds	r3, #4
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fe fdf1 	bl	8008322 <vListInsertEnd>
 8009740:	e005      	b.n	800974e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	3318      	adds	r3, #24
 8009746:	4619      	mov	r1, r3
 8009748:	480e      	ldr	r0, [pc, #56]	; (8009784 <xTaskRemoveFromEventList+0xbc>)
 800974a:	f7fe fdea 	bl	8008322 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009752:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <xTaskRemoveFromEventList+0xc0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	429a      	cmp	r2, r3
 800975a:	d905      	bls.n	8009768 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800975c:	2301      	movs	r3, #1
 800975e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <xTaskRemoveFromEventList+0xc4>)
 8009762:	2201      	movs	r2, #1
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	e001      	b.n	800976c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009768:	2300      	movs	r3, #0
 800976a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800976c:	697b      	ldr	r3, [r7, #20]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000e00 	.word	0x20000e00
 800977c:	20000de0 	.word	0x20000de0
 8009780:	20000908 	.word	0x20000908
 8009784:	20000d98 	.word	0x20000d98
 8009788:	20000904 	.word	0x20000904
 800978c:	20000dec 	.word	0x20000dec

08009790 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009798:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <vTaskInternalSetTimeOutState+0x24>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097a0:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <vTaskInternalSetTimeOutState+0x28>)
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	605a      	str	r2, [r3, #4]
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	20000df0 	.word	0x20000df0
 80097b8:	20000ddc 	.word	0x20000ddc

080097bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	613b      	str	r3, [r7, #16]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	60fb      	str	r3, [r7, #12]
}
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80097fe:	f000 fe79 	bl	800a4f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009802:	4b1d      	ldr	r3, [pc, #116]	; (8009878 <xTaskCheckForTimeOut+0xbc>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d102      	bne.n	8009822 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800981c:	2300      	movs	r3, #0
 800981e:	61fb      	str	r3, [r7, #28]
 8009820:	e023      	b.n	800986a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	4b15      	ldr	r3, [pc, #84]	; (800987c <xTaskCheckForTimeOut+0xc0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d007      	beq.n	800983e <xTaskCheckForTimeOut+0x82>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	429a      	cmp	r2, r3
 8009836:	d302      	bcc.n	800983e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009838:	2301      	movs	r3, #1
 800983a:	61fb      	str	r3, [r7, #28]
 800983c:	e015      	b.n	800986a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	429a      	cmp	r2, r3
 8009846:	d20b      	bcs.n	8009860 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	1ad2      	subs	r2, r2, r3
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff ff9b 	bl	8009790 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800985a:	2300      	movs	r3, #0
 800985c:	61fb      	str	r3, [r7, #28]
 800985e:	e004      	b.n	800986a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009866:	2301      	movs	r3, #1
 8009868:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800986a:	f000 fe73 	bl	800a554 <vPortExitCritical>

	return xReturn;
 800986e:	69fb      	ldr	r3, [r7, #28]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3720      	adds	r7, #32
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20000ddc 	.word	0x20000ddc
 800987c:	20000df0 	.word	0x20000df0

08009880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009884:	4b03      	ldr	r3, [pc, #12]	; (8009894 <vTaskMissedYield+0x14>)
 8009886:	2201      	movs	r2, #1
 8009888:	601a      	str	r2, [r3, #0]
}
 800988a:	bf00      	nop
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	20000dec 	.word	0x20000dec

08009898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098a0:	f000 f852 	bl	8009948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098a4:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <prvIdleTask+0x28>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d9f9      	bls.n	80098a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098ac:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <prvIdleTask+0x2c>)
 80098ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098bc:	e7f0      	b.n	80098a0 <prvIdleTask+0x8>
 80098be:	bf00      	nop
 80098c0:	20000908 	.word	0x20000908
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	e00c      	b.n	80098ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	4613      	mov	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4a12      	ldr	r2, [pc, #72]	; (8009928 <prvInitialiseTaskLists+0x60>)
 80098e0:	4413      	add	r3, r2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fe fcf0 	bl	80082c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3301      	adds	r3, #1
 80098ec:	607b      	str	r3, [r7, #4]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b37      	cmp	r3, #55	; 0x37
 80098f2:	d9ef      	bls.n	80098d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098f4:	480d      	ldr	r0, [pc, #52]	; (800992c <prvInitialiseTaskLists+0x64>)
 80098f6:	f7fe fce7 	bl	80082c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098fa:	480d      	ldr	r0, [pc, #52]	; (8009930 <prvInitialiseTaskLists+0x68>)
 80098fc:	f7fe fce4 	bl	80082c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009900:	480c      	ldr	r0, [pc, #48]	; (8009934 <prvInitialiseTaskLists+0x6c>)
 8009902:	f7fe fce1 	bl	80082c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009906:	480c      	ldr	r0, [pc, #48]	; (8009938 <prvInitialiseTaskLists+0x70>)
 8009908:	f7fe fcde 	bl	80082c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800990c:	480b      	ldr	r0, [pc, #44]	; (800993c <prvInitialiseTaskLists+0x74>)
 800990e:	f7fe fcdb 	bl	80082c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009912:	4b0b      	ldr	r3, [pc, #44]	; (8009940 <prvInitialiseTaskLists+0x78>)
 8009914:	4a05      	ldr	r2, [pc, #20]	; (800992c <prvInitialiseTaskLists+0x64>)
 8009916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009918:	4b0a      	ldr	r3, [pc, #40]	; (8009944 <prvInitialiseTaskLists+0x7c>)
 800991a:	4a05      	ldr	r2, [pc, #20]	; (8009930 <prvInitialiseTaskLists+0x68>)
 800991c:	601a      	str	r2, [r3, #0]
}
 800991e:	bf00      	nop
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20000908 	.word	0x20000908
 800992c:	20000d68 	.word	0x20000d68
 8009930:	20000d7c 	.word	0x20000d7c
 8009934:	20000d98 	.word	0x20000d98
 8009938:	20000dac 	.word	0x20000dac
 800993c:	20000dc4 	.word	0x20000dc4
 8009940:	20000d90 	.word	0x20000d90
 8009944:	20000d94 	.word	0x20000d94

08009948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800994e:	e019      	b.n	8009984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009950:	f000 fdd0 	bl	800a4f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009954:	4b10      	ldr	r3, [pc, #64]	; (8009998 <prvCheckTasksWaitingTermination+0x50>)
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3304      	adds	r3, #4
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe fd3b 	bl	80083dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009966:	4b0d      	ldr	r3, [pc, #52]	; (800999c <prvCheckTasksWaitingTermination+0x54>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3b01      	subs	r3, #1
 800996c:	4a0b      	ldr	r2, [pc, #44]	; (800999c <prvCheckTasksWaitingTermination+0x54>)
 800996e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009970:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <prvCheckTasksWaitingTermination+0x58>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3b01      	subs	r3, #1
 8009976:	4a0a      	ldr	r2, [pc, #40]	; (80099a0 <prvCheckTasksWaitingTermination+0x58>)
 8009978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800997a:	f000 fdeb 	bl	800a554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f810 	bl	80099a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009984:	4b06      	ldr	r3, [pc, #24]	; (80099a0 <prvCheckTasksWaitingTermination+0x58>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e1      	bne.n	8009950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20000dac 	.word	0x20000dac
 800999c:	20000dd8 	.word	0x20000dd8
 80099a0:	20000dc0 	.word	0x20000dc0

080099a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d108      	bne.n	80099c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 ff4a 	bl	800a854 <vPortFree>
				vPortFree( pxTCB );
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 ff47 	bl	800a854 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099c6:	e018      	b.n	80099fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d103      	bne.n	80099da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 ff3e 	bl	800a854 <vPortFree>
	}
 80099d8:	e00f      	b.n	80099fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d00a      	beq.n	80099fa <prvDeleteTCB+0x56>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	60fb      	str	r3, [r7, #12]
}
 80099f6:	bf00      	nop
 80099f8:	e7fe      	b.n	80099f8 <prvDeleteTCB+0x54>
	}
 80099fa:	bf00      	nop
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a0a:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <prvResetNextTaskUnblockTime+0x38>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a14:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <prvResetNextTaskUnblockTime+0x3c>)
 8009a16:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a1c:	e008      	b.n	8009a30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a1e:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <prvResetNextTaskUnblockTime+0x38>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	4a04      	ldr	r2, [pc, #16]	; (8009a40 <prvResetNextTaskUnblockTime+0x3c>)
 8009a2e:	6013      	str	r3, [r2, #0]
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000d90 	.word	0x20000d90
 8009a40:	20000df8 	.word	0x20000df8

08009a44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a4a:	4b0b      	ldr	r3, [pc, #44]	; (8009a78 <xTaskGetSchedulerState+0x34>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d102      	bne.n	8009a58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a52:	2301      	movs	r3, #1
 8009a54:	607b      	str	r3, [r7, #4]
 8009a56:	e008      	b.n	8009a6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a58:	4b08      	ldr	r3, [pc, #32]	; (8009a7c <xTaskGetSchedulerState+0x38>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d102      	bne.n	8009a66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a60:	2302      	movs	r3, #2
 8009a62:	607b      	str	r3, [r7, #4]
 8009a64:	e001      	b.n	8009a6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a66:	2300      	movs	r3, #0
 8009a68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a6a:	687b      	ldr	r3, [r7, #4]
	}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	20000de4 	.word	0x20000de4
 8009a7c:	20000e00 	.word	0x20000e00

08009a80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d056      	beq.n	8009b44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a96:	4b2e      	ldr	r3, [pc, #184]	; (8009b50 <xTaskPriorityDisinherit+0xd0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d00a      	beq.n	8009ab6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60fb      	str	r3, [r7, #12]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10a      	bne.n	8009ad4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	60bb      	str	r3, [r7, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad8:	1e5a      	subs	r2, r3, #1
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d02c      	beq.n	8009b44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d128      	bne.n	8009b44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fc70 	bl	80083dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b14:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <xTaskPriorityDisinherit+0xd4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d903      	bls.n	8009b24 <xTaskPriorityDisinherit+0xa4>
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	4a0c      	ldr	r2, [pc, #48]	; (8009b54 <xTaskPriorityDisinherit+0xd4>)
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4a09      	ldr	r2, [pc, #36]	; (8009b58 <xTaskPriorityDisinherit+0xd8>)
 8009b32:	441a      	add	r2, r3
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	3304      	adds	r3, #4
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	f7fe fbf1 	bl	8008322 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b40:	2301      	movs	r3, #1
 8009b42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b44:	697b      	ldr	r3, [r7, #20]
	}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20000904 	.word	0x20000904
 8009b54:	20000de0 	.word	0x20000de0
 8009b58:	20000908 	.word	0x20000908

08009b5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b66:	4b21      	ldr	r3, [pc, #132]	; (8009bec <prvAddCurrentTaskToDelayedList+0x90>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b6c:	4b20      	ldr	r3, [pc, #128]	; (8009bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3304      	adds	r3, #4
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe fc32 	bl	80083dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7e:	d10a      	bne.n	8009b96 <prvAddCurrentTaskToDelayedList+0x3a>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d007      	beq.n	8009b96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b86:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4819      	ldr	r0, [pc, #100]	; (8009bf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b90:	f7fe fbc7 	bl	8008322 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b94:	e026      	b.n	8009be4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b9e:	4b14      	ldr	r3, [pc, #80]	; (8009bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d209      	bcs.n	8009bc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bae:	4b12      	ldr	r3, [pc, #72]	; (8009bf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	4b0f      	ldr	r3, [pc, #60]	; (8009bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fe fbd5 	bl	800836a <vListInsert>
}
 8009bc0:	e010      	b.n	8009be4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bc2:	4b0e      	ldr	r3, [pc, #56]	; (8009bfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f7fe fbcb 	bl	800836a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d202      	bcs.n	8009be4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bde:	4a08      	ldr	r2, [pc, #32]	; (8009c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	6013      	str	r3, [r2, #0]
}
 8009be4:	bf00      	nop
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20000ddc 	.word	0x20000ddc
 8009bf0:	20000904 	.word	0x20000904
 8009bf4:	20000dc4 	.word	0x20000dc4
 8009bf8:	20000d94 	.word	0x20000d94
 8009bfc:	20000d90 	.word	0x20000d90
 8009c00:	20000df8 	.word	0x20000df8

08009c04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08a      	sub	sp, #40	; 0x28
 8009c08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c0e:	f000 fb07 	bl	800a220 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c12:	4b1c      	ldr	r3, [pc, #112]	; (8009c84 <xTimerCreateTimerTask+0x80>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d021      	beq.n	8009c5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c22:	1d3a      	adds	r2, r7, #4
 8009c24:	f107 0108 	add.w	r1, r7, #8
 8009c28:	f107 030c 	add.w	r3, r7, #12
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fe fb31 	bl	8008294 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	9202      	str	r2, [sp, #8]
 8009c3a:	9301      	str	r3, [sp, #4]
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	2300      	movs	r3, #0
 8009c42:	460a      	mov	r2, r1
 8009c44:	4910      	ldr	r1, [pc, #64]	; (8009c88 <xTimerCreateTimerTask+0x84>)
 8009c46:	4811      	ldr	r0, [pc, #68]	; (8009c8c <xTimerCreateTimerTask+0x88>)
 8009c48:	f7ff f8de 	bl	8008e08 <xTaskCreateStatic>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	4a10      	ldr	r2, [pc, #64]	; (8009c90 <xTimerCreateTimerTask+0x8c>)
 8009c50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c52:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <xTimerCreateTimerTask+0x8c>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	613b      	str	r3, [r7, #16]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c7a:	697b      	ldr	r3, [r7, #20]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20000e34 	.word	0x20000e34
 8009c88:	08012e58 	.word	0x08012e58
 8009c8c:	08009dc9 	.word	0x08009dc9
 8009c90:	20000e38 	.word	0x20000e38

08009c94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08a      	sub	sp, #40	; 0x28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	623b      	str	r3, [r7, #32]
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cc2:	4b1a      	ldr	r3, [pc, #104]	; (8009d2c <xTimerGenericCommand+0x98>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d02a      	beq.n	8009d20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2b05      	cmp	r3, #5
 8009cda:	dc18      	bgt.n	8009d0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cdc:	f7ff feb2 	bl	8009a44 <xTaskGetSchedulerState>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d109      	bne.n	8009cfa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ce6:	4b11      	ldr	r3, [pc, #68]	; (8009d2c <xTimerGenericCommand+0x98>)
 8009ce8:	6818      	ldr	r0, [r3, #0]
 8009cea:	f107 0110 	add.w	r1, r7, #16
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf2:	f7fe fca1 	bl	8008638 <xQueueGenericSend>
 8009cf6:	6278      	str	r0, [r7, #36]	; 0x24
 8009cf8:	e012      	b.n	8009d20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <xTimerGenericCommand+0x98>)
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	f107 0110 	add.w	r1, r7, #16
 8009d02:	2300      	movs	r3, #0
 8009d04:	2200      	movs	r2, #0
 8009d06:	f7fe fc97 	bl	8008638 <xQueueGenericSend>
 8009d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d0c:	e008      	b.n	8009d20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d0e:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <xTimerGenericCommand+0x98>)
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	f107 0110 	add.w	r1, r7, #16
 8009d16:	2300      	movs	r3, #0
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	f7fe fd8b 	bl	8008834 <xQueueGenericSendFromISR>
 8009d1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3728      	adds	r7, #40	; 0x28
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20000e34 	.word	0x20000e34

08009d30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d3a:	4b22      	ldr	r3, [pc, #136]	; (8009dc4 <prvProcessExpiredTimer+0x94>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe fb47 	bl	80083dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d022      	beq.n	8009da2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	699a      	ldr	r2, [r3, #24]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	18d1      	adds	r1, r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	6978      	ldr	r0, [r7, #20]
 8009d6a:	f000 f8d1 	bl	8009f10 <prvInsertTimerInActiveList>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d01f      	beq.n	8009db4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d74:	2300      	movs	r3, #0
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	6978      	ldr	r0, [r7, #20]
 8009d80:	f7ff ff88 	bl	8009c94 <xTimerGenericCommand>
 8009d84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d113      	bne.n	8009db4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	60fb      	str	r3, [r7, #12]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009da8:	f023 0301 	bic.w	r3, r3, #1
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	6978      	ldr	r0, [r7, #20]
 8009dba:	4798      	blx	r3
}
 8009dbc:	bf00      	nop
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20000e2c 	.word	0x20000e2c

08009dc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dd0:	f107 0308 	add.w	r3, r7, #8
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 f857 	bl	8009e88 <prvGetNextExpireTime>
 8009dda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4619      	mov	r1, r3
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 f803 	bl	8009dec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009de6:	f000 f8d5 	bl	8009f94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dea:	e7f1      	b.n	8009dd0 <prvTimerTask+0x8>

08009dec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009df6:	f7ff fa43 	bl	8009280 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dfa:	f107 0308 	add.w	r3, r7, #8
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f866 	bl	8009ed0 <prvSampleTimeNow>
 8009e04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d130      	bne.n	8009e6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <prvProcessTimerOrBlockTask+0x3c>
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d806      	bhi.n	8009e28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e1a:	f7ff fa3f 	bl	800929c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e1e:	68f9      	ldr	r1, [r7, #12]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff ff85 	bl	8009d30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e26:	e024      	b.n	8009e72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d008      	beq.n	8009e40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e2e:	4b13      	ldr	r3, [pc, #76]	; (8009e7c <prvProcessTimerOrBlockTask+0x90>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <prvProcessTimerOrBlockTask+0x50>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e000      	b.n	8009e3e <prvProcessTimerOrBlockTask+0x52>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e40:	4b0f      	ldr	r3, [pc, #60]	; (8009e80 <prvProcessTimerOrBlockTask+0x94>)
 8009e42:	6818      	ldr	r0, [r3, #0]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	f7fe ffa7 	bl	8008da0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e52:	f7ff fa23 	bl	800929c <xTaskResumeAll>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10a      	bne.n	8009e72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e5c:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <prvProcessTimerOrBlockTask+0x98>)
 8009e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	f3bf 8f6f 	isb	sy
}
 8009e6c:	e001      	b.n	8009e72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e6e:	f7ff fa15 	bl	800929c <xTaskResumeAll>
}
 8009e72:	bf00      	nop
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000e30 	.word	0x20000e30
 8009e80:	20000e34 	.word	0x20000e34
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e90:	4b0e      	ldr	r3, [pc, #56]	; (8009ecc <prvGetNextExpireTime+0x44>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <prvGetNextExpireTime+0x16>
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	e000      	b.n	8009ea0 <prvGetNextExpireTime+0x18>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d105      	bne.n	8009eb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009eac:	4b07      	ldr	r3, [pc, #28]	; (8009ecc <prvGetNextExpireTime+0x44>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	e001      	b.n	8009ebc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	20000e2c 	.word	0x20000e2c

08009ed0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ed8:	f7ff fa7e 	bl	80093d8 <xTaskGetTickCount>
 8009edc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ede:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <prvSampleTimeNow+0x3c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d205      	bcs.n	8009ef4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ee8:	f000 f936 	bl	800a158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	e002      	b.n	8009efa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009efa:	4a04      	ldr	r2, [pc, #16]	; (8009f0c <prvSampleTimeNow+0x3c>)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f00:	68fb      	ldr	r3, [r7, #12]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000e3c 	.word	0x20000e3c

08009f10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d812      	bhi.n	8009f5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	1ad2      	subs	r2, r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d302      	bcc.n	8009f4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f44:	2301      	movs	r3, #1
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	e01b      	b.n	8009f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f4a:	4b10      	ldr	r3, [pc, #64]	; (8009f8c <prvInsertTimerInActiveList+0x7c>)
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3304      	adds	r3, #4
 8009f52:	4619      	mov	r1, r3
 8009f54:	4610      	mov	r0, r2
 8009f56:	f7fe fa08 	bl	800836a <vListInsert>
 8009f5a:	e012      	b.n	8009f82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d206      	bcs.n	8009f72 <prvInsertTimerInActiveList+0x62>
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d302      	bcc.n	8009f72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	e007      	b.n	8009f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f72:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <prvInsertTimerInActiveList+0x80>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	f7fe f9f4 	bl	800836a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f82:	697b      	ldr	r3, [r7, #20]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20000e30 	.word	0x20000e30
 8009f90:	20000e2c 	.word	0x20000e2c

08009f94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08e      	sub	sp, #56	; 0x38
 8009f98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f9a:	e0ca      	b.n	800a132 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	da18      	bge.n	8009fd4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fa2:	1d3b      	adds	r3, r7, #4
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	61fb      	str	r3, [r7, #28]
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fca:	6850      	ldr	r0, [r2, #4]
 8009fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fce:	6892      	ldr	r2, [r2, #8]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f2c0 80aa 	blt.w	800a130 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	3304      	adds	r3, #4
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fe f9f5 	bl	80083dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ff2:	463b      	mov	r3, r7
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7ff ff6b 	bl	8009ed0 <prvSampleTimeNow>
 8009ffa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	f200 8097 	bhi.w	800a132 <prvProcessReceivedCommands+0x19e>
 800a004:	a201      	add	r2, pc, #4	; (adr r2, 800a00c <prvProcessReceivedCommands+0x78>)
 800a006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00a:	bf00      	nop
 800a00c:	0800a035 	.word	0x0800a035
 800a010:	0800a035 	.word	0x0800a035
 800a014:	0800a035 	.word	0x0800a035
 800a018:	0800a0a9 	.word	0x0800a0a9
 800a01c:	0800a0bd 	.word	0x0800a0bd
 800a020:	0800a107 	.word	0x0800a107
 800a024:	0800a035 	.word	0x0800a035
 800a028:	0800a035 	.word	0x0800a035
 800a02c:	0800a0a9 	.word	0x0800a0a9
 800a030:	0800a0bd 	.word	0x0800a0bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a03a:	f043 0301 	orr.w	r3, r3, #1
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	18d1      	adds	r1, r2, r3
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a054:	f7ff ff5c 	bl	8009f10 <prvInsertTimerInActiveList>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d069      	beq.n	800a132 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a064:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d05e      	beq.n	800a132 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	441a      	add	r2, r3
 800a07c:	2300      	movs	r3, #0
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	2300      	movs	r3, #0
 800a082:	2100      	movs	r1, #0
 800a084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a086:	f7ff fe05 	bl	8009c94 <xTimerGenericCommand>
 800a08a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d14f      	bne.n	800a132 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	61bb      	str	r3, [r7, #24]
}
 800a0a4:	bf00      	nop
 800a0a6:	e7fe      	b.n	800a0a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ae:	f023 0301 	bic.w	r3, r3, #1
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a0ba:	e03a      	b.n	800a132 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0c2:	f043 0301 	orr.w	r3, r3, #1
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	617b      	str	r3, [r7, #20]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	699a      	ldr	r2, [r3, #24]
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	18d1      	adds	r1, r2, r3
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a100:	f7ff ff06 	bl	8009f10 <prvInsertTimerInActiveList>
					break;
 800a104:	e015      	b.n	800a132 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a10c:	f003 0302 	and.w	r3, r3, #2
 800a110:	2b00      	cmp	r3, #0
 800a112:	d103      	bne.n	800a11c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a116:	f000 fb9d 	bl	800a854 <vPortFree>
 800a11a:	e00a      	b.n	800a132 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a122:	f023 0301 	bic.w	r3, r3, #1
 800a126:	b2da      	uxtb	r2, r3
 800a128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a12e:	e000      	b.n	800a132 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a130:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <prvProcessReceivedCommands+0x1c0>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	1d39      	adds	r1, r7, #4
 800a138:	2200      	movs	r2, #0
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe fc16 	bl	800896c <xQueueReceive>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	f47f af2a 	bne.w	8009f9c <prvProcessReceivedCommands+0x8>
	}
}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	3730      	adds	r7, #48	; 0x30
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20000e34 	.word	0x20000e34

0800a158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a15e:	e048      	b.n	800a1f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a160:	4b2d      	ldr	r3, [pc, #180]	; (800a218 <prvSwitchTimerLists+0xc0>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a16a:	4b2b      	ldr	r3, [pc, #172]	; (800a218 <prvSwitchTimerLists+0xc0>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3304      	adds	r3, #4
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fe f92f 	bl	80083dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d02e      	beq.n	800a1f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	4413      	add	r3, r2
 800a19c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d90e      	bls.n	800a1c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1b2:	4b19      	ldr	r3, [pc, #100]	; (800a218 <prvSwitchTimerLists+0xc0>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7fe f8d4 	bl	800836a <vListInsert>
 800a1c2:	e016      	b.n	800a1f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fd60 	bl	8009c94 <xTimerGenericCommand>
 800a1d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10a      	bne.n	800a1f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	603b      	str	r3, [r7, #0]
}
 800a1ee:	bf00      	nop
 800a1f0:	e7fe      	b.n	800a1f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <prvSwitchTimerLists+0xc0>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1b1      	bne.n	800a160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1fc:	4b06      	ldr	r3, [pc, #24]	; (800a218 <prvSwitchTimerLists+0xc0>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a202:	4b06      	ldr	r3, [pc, #24]	; (800a21c <prvSwitchTimerLists+0xc4>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a04      	ldr	r2, [pc, #16]	; (800a218 <prvSwitchTimerLists+0xc0>)
 800a208:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a20a:	4a04      	ldr	r2, [pc, #16]	; (800a21c <prvSwitchTimerLists+0xc4>)
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	6013      	str	r3, [r2, #0]
}
 800a210:	bf00      	nop
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000e2c 	.word	0x20000e2c
 800a21c:	20000e30 	.word	0x20000e30

0800a220 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a226:	f000 f965 	bl	800a4f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a22a:	4b15      	ldr	r3, [pc, #84]	; (800a280 <prvCheckForValidListAndQueue+0x60>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d120      	bne.n	800a274 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a232:	4814      	ldr	r0, [pc, #80]	; (800a284 <prvCheckForValidListAndQueue+0x64>)
 800a234:	f7fe f848 	bl	80082c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a238:	4813      	ldr	r0, [pc, #76]	; (800a288 <prvCheckForValidListAndQueue+0x68>)
 800a23a:	f7fe f845 	bl	80082c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a23e:	4b13      	ldr	r3, [pc, #76]	; (800a28c <prvCheckForValidListAndQueue+0x6c>)
 800a240:	4a10      	ldr	r2, [pc, #64]	; (800a284 <prvCheckForValidListAndQueue+0x64>)
 800a242:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a244:	4b12      	ldr	r3, [pc, #72]	; (800a290 <prvCheckForValidListAndQueue+0x70>)
 800a246:	4a10      	ldr	r2, [pc, #64]	; (800a288 <prvCheckForValidListAndQueue+0x68>)
 800a248:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a24a:	2300      	movs	r3, #0
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	4b11      	ldr	r3, [pc, #68]	; (800a294 <prvCheckForValidListAndQueue+0x74>)
 800a250:	4a11      	ldr	r2, [pc, #68]	; (800a298 <prvCheckForValidListAndQueue+0x78>)
 800a252:	2110      	movs	r1, #16
 800a254:	200a      	movs	r0, #10
 800a256:	f7fe f953 	bl	8008500 <xQueueGenericCreateStatic>
 800a25a:	4603      	mov	r3, r0
 800a25c:	4a08      	ldr	r2, [pc, #32]	; (800a280 <prvCheckForValidListAndQueue+0x60>)
 800a25e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a260:	4b07      	ldr	r3, [pc, #28]	; (800a280 <prvCheckForValidListAndQueue+0x60>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a268:	4b05      	ldr	r3, [pc, #20]	; (800a280 <prvCheckForValidListAndQueue+0x60>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	490b      	ldr	r1, [pc, #44]	; (800a29c <prvCheckForValidListAndQueue+0x7c>)
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fd6c 	bl	8008d4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a274:	f000 f96e 	bl	800a554 <vPortExitCritical>
}
 800a278:	bf00      	nop
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20000e34 	.word	0x20000e34
 800a284:	20000e04 	.word	0x20000e04
 800a288:	20000e18 	.word	0x20000e18
 800a28c:	20000e2c 	.word	0x20000e2c
 800a290:	20000e30 	.word	0x20000e30
 800a294:	20000ee0 	.word	0x20000ee0
 800a298:	20000e40 	.word	0x20000e40
 800a29c:	08012e60 	.word	0x08012e60

0800a2a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3b04      	subs	r3, #4
 800a2b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3b04      	subs	r3, #4
 800a2be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f023 0201 	bic.w	r2, r3, #1
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3b04      	subs	r3, #4
 800a2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2d0:	4a0c      	ldr	r2, [pc, #48]	; (800a304 <pxPortInitialiseStack+0x64>)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3b14      	subs	r3, #20
 800a2da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	3b04      	subs	r3, #4
 800a2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f06f 0202 	mvn.w	r2, #2
 800a2ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3b20      	subs	r3, #32
 800a2f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	0800a309 	.word	0x0800a309

0800a308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <prvTaskExitError+0x54>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31a:	d00a      	beq.n	800a332 <prvTaskExitError+0x2a>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	60fb      	str	r3, [r7, #12]
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <prvTaskExitError+0x28>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60bb      	str	r3, [r7, #8]
}
 800a344:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a346:	bf00      	nop
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0fc      	beq.n	800a348 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a34e:	bf00      	nop
 800a350:	bf00      	nop
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	2000000c 	.word	0x2000000c

0800a360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a360:	4b07      	ldr	r3, [pc, #28]	; (800a380 <pxCurrentTCBConst2>)
 800a362:	6819      	ldr	r1, [r3, #0]
 800a364:	6808      	ldr	r0, [r1, #0]
 800a366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	f380 8809 	msr	PSP, r0
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f04f 0000 	mov.w	r0, #0
 800a376:	f380 8811 	msr	BASEPRI, r0
 800a37a:	4770      	bx	lr
 800a37c:	f3af 8000 	nop.w

0800a380 <pxCurrentTCBConst2>:
 800a380:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a388:	4808      	ldr	r0, [pc, #32]	; (800a3ac <prvPortStartFirstTask+0x24>)
 800a38a:	6800      	ldr	r0, [r0, #0]
 800a38c:	6800      	ldr	r0, [r0, #0]
 800a38e:	f380 8808 	msr	MSP, r0
 800a392:	f04f 0000 	mov.w	r0, #0
 800a396:	f380 8814 	msr	CONTROL, r0
 800a39a:	b662      	cpsie	i
 800a39c:	b661      	cpsie	f
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	df00      	svc	0
 800a3a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3aa:	bf00      	nop
 800a3ac:	e000ed08 	.word	0xe000ed08

0800a3b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3b6:	4b46      	ldr	r3, [pc, #280]	; (800a4d0 <xPortStartScheduler+0x120>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a46      	ldr	r2, [pc, #280]	; (800a4d4 <xPortStartScheduler+0x124>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d10a      	bne.n	800a3d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	613b      	str	r3, [r7, #16]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a3d6:	4b3e      	ldr	r3, [pc, #248]	; (800a4d0 <xPortStartScheduler+0x120>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a3f      	ldr	r2, [pc, #252]	; (800a4d8 <xPortStartScheduler+0x128>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d10a      	bne.n	800a3f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	60fb      	str	r3, [r7, #12]
}
 800a3f2:	bf00      	nop
 800a3f4:	e7fe      	b.n	800a3f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3f6:	4b39      	ldr	r3, [pc, #228]	; (800a4dc <xPortStartScheduler+0x12c>)
 800a3f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	22ff      	movs	r2, #255	; 0xff
 800a406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	b2db      	uxtb	r3, r3
 800a414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	4b31      	ldr	r3, [pc, #196]	; (800a4e0 <xPortStartScheduler+0x130>)
 800a41c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a41e:	4b31      	ldr	r3, [pc, #196]	; (800a4e4 <xPortStartScheduler+0x134>)
 800a420:	2207      	movs	r2, #7
 800a422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a424:	e009      	b.n	800a43a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a426:	4b2f      	ldr	r3, [pc, #188]	; (800a4e4 <xPortStartScheduler+0x134>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	4a2d      	ldr	r2, [pc, #180]	; (800a4e4 <xPortStartScheduler+0x134>)
 800a42e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	b2db      	uxtb	r3, r3
 800a438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a43a:	78fb      	ldrb	r3, [r7, #3]
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a442:	2b80      	cmp	r3, #128	; 0x80
 800a444:	d0ef      	beq.n	800a426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a446:	4b27      	ldr	r3, [pc, #156]	; (800a4e4 <xPortStartScheduler+0x134>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f1c3 0307 	rsb	r3, r3, #7
 800a44e:	2b04      	cmp	r3, #4
 800a450:	d00a      	beq.n	800a468 <xPortStartScheduler+0xb8>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	60bb      	str	r3, [r7, #8]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a468:	4b1e      	ldr	r3, [pc, #120]	; (800a4e4 <xPortStartScheduler+0x134>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	4a1d      	ldr	r2, [pc, #116]	; (800a4e4 <xPortStartScheduler+0x134>)
 800a470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a472:	4b1c      	ldr	r3, [pc, #112]	; (800a4e4 <xPortStartScheduler+0x134>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a47a:	4a1a      	ldr	r2, [pc, #104]	; (800a4e4 <xPortStartScheduler+0x134>)
 800a47c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	b2da      	uxtb	r2, r3
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a486:	4b18      	ldr	r3, [pc, #96]	; (800a4e8 <xPortStartScheduler+0x138>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a17      	ldr	r2, [pc, #92]	; (800a4e8 <xPortStartScheduler+0x138>)
 800a48c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a492:	4b15      	ldr	r3, [pc, #84]	; (800a4e8 <xPortStartScheduler+0x138>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a14      	ldr	r2, [pc, #80]	; (800a4e8 <xPortStartScheduler+0x138>)
 800a498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a49c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a49e:	f000 f8dd 	bl	800a65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4a2:	4b12      	ldr	r3, [pc, #72]	; (800a4ec <xPortStartScheduler+0x13c>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4a8:	f000 f8fc 	bl	800a6a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4ac:	4b10      	ldr	r3, [pc, #64]	; (800a4f0 <xPortStartScheduler+0x140>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a0f      	ldr	r2, [pc, #60]	; (800a4f0 <xPortStartScheduler+0x140>)
 800a4b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4b8:	f7ff ff66 	bl	800a388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4bc:	f7ff f856 	bl	800956c <vTaskSwitchContext>
	prvTaskExitError();
 800a4c0:	f7ff ff22 	bl	800a308 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	e000ed00 	.word	0xe000ed00
 800a4d4:	410fc271 	.word	0x410fc271
 800a4d8:	410fc270 	.word	0x410fc270
 800a4dc:	e000e400 	.word	0xe000e400
 800a4e0:	20000f30 	.word	0x20000f30
 800a4e4:	20000f34 	.word	0x20000f34
 800a4e8:	e000ed20 	.word	0xe000ed20
 800a4ec:	2000000c 	.word	0x2000000c
 800a4f0:	e000ef34 	.word	0xe000ef34

0800a4f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	607b      	str	r3, [r7, #4]
}
 800a50c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a50e:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <vPortEnterCritical+0x58>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3301      	adds	r3, #1
 800a514:	4a0d      	ldr	r2, [pc, #52]	; (800a54c <vPortEnterCritical+0x58>)
 800a516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a518:	4b0c      	ldr	r3, [pc, #48]	; (800a54c <vPortEnterCritical+0x58>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d10f      	bne.n	800a540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a520:	4b0b      	ldr	r3, [pc, #44]	; (800a550 <vPortEnterCritical+0x5c>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <vPortEnterCritical+0x4c>
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	603b      	str	r3, [r7, #0]
}
 800a53c:	bf00      	nop
 800a53e:	e7fe      	b.n	800a53e <vPortEnterCritical+0x4a>
	}
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	2000000c 	.word	0x2000000c
 800a550:	e000ed04 	.word	0xe000ed04

0800a554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a55a:	4b12      	ldr	r3, [pc, #72]	; (800a5a4 <vPortExitCritical+0x50>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10a      	bne.n	800a578 <vPortExitCritical+0x24>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	607b      	str	r3, [r7, #4]
}
 800a574:	bf00      	nop
 800a576:	e7fe      	b.n	800a576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a578:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <vPortExitCritical+0x50>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	4a09      	ldr	r2, [pc, #36]	; (800a5a4 <vPortExitCritical+0x50>)
 800a580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a582:	4b08      	ldr	r3, [pc, #32]	; (800a5a4 <vPortExitCritical+0x50>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d105      	bne.n	800a596 <vPortExitCritical+0x42>
 800a58a:	2300      	movs	r3, #0
 800a58c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	f383 8811 	msr	BASEPRI, r3
}
 800a594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a596:	bf00      	nop
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	2000000c 	.word	0x2000000c
	...

0800a5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5b0:	f3ef 8009 	mrs	r0, PSP
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	4b15      	ldr	r3, [pc, #84]	; (800a610 <pxCurrentTCBConst>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	f01e 0f10 	tst.w	lr, #16
 800a5c0:	bf08      	it	eq
 800a5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	6010      	str	r0, [r2, #0]
 800a5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5d4:	f380 8811 	msr	BASEPRI, r0
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f7fe ffc4 	bl	800956c <vTaskSwitchContext>
 800a5e4:	f04f 0000 	mov.w	r0, #0
 800a5e8:	f380 8811 	msr	BASEPRI, r0
 800a5ec:	bc09      	pop	{r0, r3}
 800a5ee:	6819      	ldr	r1, [r3, #0]
 800a5f0:	6808      	ldr	r0, [r1, #0]
 800a5f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f6:	f01e 0f10 	tst.w	lr, #16
 800a5fa:	bf08      	it	eq
 800a5fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a600:	f380 8809 	msr	PSP, r0
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w

0800a610 <pxCurrentTCBConst>:
 800a610:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop

0800a618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	607b      	str	r3, [r7, #4]
}
 800a630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a632:	f7fe fee1 	bl	80093f8 <xTaskIncrementTick>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a63c:	4b06      	ldr	r3, [pc, #24]	; (800a658 <xPortSysTickHandler+0x40>)
 800a63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	2300      	movs	r3, #0
 800a646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	f383 8811 	msr	BASEPRI, r3
}
 800a64e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a660:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <vPortSetupTimerInterrupt+0x34>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a666:	4b0b      	ldr	r3, [pc, #44]	; (800a694 <vPortSetupTimerInterrupt+0x38>)
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a66c:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <vPortSetupTimerInterrupt+0x3c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <vPortSetupTimerInterrupt+0x40>)
 800a672:	fba2 2303 	umull	r2, r3, r2, r3
 800a676:	099b      	lsrs	r3, r3, #6
 800a678:	4a09      	ldr	r2, [pc, #36]	; (800a6a0 <vPortSetupTimerInterrupt+0x44>)
 800a67a:	3b01      	subs	r3, #1
 800a67c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a67e:	4b04      	ldr	r3, [pc, #16]	; (800a690 <vPortSetupTimerInterrupt+0x34>)
 800a680:	2207      	movs	r2, #7
 800a682:	601a      	str	r2, [r3, #0]
}
 800a684:	bf00      	nop
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	e000e010 	.word	0xe000e010
 800a694:	e000e018 	.word	0xe000e018
 800a698:	20000000 	.word	0x20000000
 800a69c:	10624dd3 	.word	0x10624dd3
 800a6a0:	e000e014 	.word	0xe000e014

0800a6a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6b4 <vPortEnableVFP+0x10>
 800a6a8:	6801      	ldr	r1, [r0, #0]
 800a6aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6ae:	6001      	str	r1, [r0, #0]
 800a6b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6b2:	bf00      	nop
 800a6b4:	e000ed88 	.word	0xe000ed88

0800a6b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6be:	f3ef 8305 	mrs	r3, IPSR
 800a6c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b0f      	cmp	r3, #15
 800a6c8:	d914      	bls.n	800a6f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6ca:	4a17      	ldr	r2, [pc, #92]	; (800a728 <vPortValidateInterruptPriority+0x70>)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6d4:	4b15      	ldr	r3, [pc, #84]	; (800a72c <vPortValidateInterruptPriority+0x74>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	7afa      	ldrb	r2, [r7, #11]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d20a      	bcs.n	800a6f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	607b      	str	r3, [r7, #4]
}
 800a6f0:	bf00      	nop
 800a6f2:	e7fe      	b.n	800a6f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6f4:	4b0e      	ldr	r3, [pc, #56]	; (800a730 <vPortValidateInterruptPriority+0x78>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6fc:	4b0d      	ldr	r3, [pc, #52]	; (800a734 <vPortValidateInterruptPriority+0x7c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	429a      	cmp	r2, r3
 800a702:	d90a      	bls.n	800a71a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	603b      	str	r3, [r7, #0]
}
 800a716:	bf00      	nop
 800a718:	e7fe      	b.n	800a718 <vPortValidateInterruptPriority+0x60>
	}
 800a71a:	bf00      	nop
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	e000e3f0 	.word	0xe000e3f0
 800a72c:	20000f30 	.word	0x20000f30
 800a730:	e000ed0c 	.word	0xe000ed0c
 800a734:	20000f34 	.word	0x20000f34

0800a738 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b088      	sub	sp, #32
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800a740:	2300      	movs	r3, #0
 800a742:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800a744:	f7fe fd9c 	bl	8009280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800a748:	4b3e      	ldr	r3, [pc, #248]	; (800a844 <pvPortMalloc+0x10c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 800a750:	f000 f8ba 	bl	800a8c8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800a754:	4b3b      	ldr	r3, [pc, #236]	; (800a844 <pvPortMalloc+0x10c>)
 800a756:	2201      	movs	r2, #1
 800a758:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00e      	beq.n	800a77e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 800a760:	2308      	movs	r3, #8
 800a762:	461a      	mov	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4413      	add	r3, r2
 800a768:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	2b00      	cmp	r3, #0
 800a772:	d004      	beq.n	800a77e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f023 0307 	bic.w	r3, r3, #7
 800a77a:	3308      	adds	r3, #8
 800a77c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d057      	beq.n	800a834 <pvPortMalloc+0xfc>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f247 5227 	movw	r2, #29991	; 0x7527
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d852      	bhi.n	800a834 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800a78e:	4b2e      	ldr	r3, [pc, #184]	; (800a848 <pvPortMalloc+0x110>)
 800a790:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800a792:	4b2d      	ldr	r3, [pc, #180]	; (800a848 <pvPortMalloc+0x110>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a798:	e004      	b.n	800a7a4 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d903      	bls.n	800a7b6 <pvPortMalloc+0x7e>
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1f1      	bne.n	800a79a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	4a24      	ldr	r2, [pc, #144]	; (800a84c <pvPortMalloc+0x114>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d03a      	beq.n	800a834 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2208      	movs	r2, #8
 800a7c4:	4413      	add	r3, r2
 800a7c6:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	2208      	movs	r2, #8
 800a7da:	0052      	lsls	r2, r2, #1
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d922      	bls.n	800a826 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	1ad2      	subs	r2, r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	60bb      	str	r3, [r7, #8]
 800a800:	4b11      	ldr	r3, [pc, #68]	; (800a848 <pvPortMalloc+0x110>)
 800a802:	613b      	str	r3, [r7, #16]
 800a804:	e002      	b.n	800a80c <pvPortMalloc+0xd4>
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	613b      	str	r3, [r7, #16]
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	429a      	cmp	r2, r3
 800a816:	d8f6      	bhi.n	800a806 <pvPortMalloc+0xce>
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	601a      	str	r2, [r3, #0]
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a826:	4b0a      	ldr	r3, [pc, #40]	; (800a850 <pvPortMalloc+0x118>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	4a07      	ldr	r2, [pc, #28]	; (800a850 <pvPortMalloc+0x118>)
 800a832:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a834:	f7fe fd32 	bl	800929c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800a838:	697b      	ldr	r3, [r7, #20]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3720      	adds	r7, #32
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20008478 	.word	0x20008478
 800a848:	20008468 	.word	0x20008468
 800a84c:	20008470 	.word	0x20008470
 800a850:	20000010 	.word	0x20000010

0800a854 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d027      	beq.n	800a8b6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800a866:	2308      	movs	r3, #8
 800a868:	425b      	negs	r3, r3
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	4413      	add	r3, r2
 800a86e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800a874:	f7fe fd04 	bl	8009280 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	60bb      	str	r3, [r7, #8]
 800a87e:	4b10      	ldr	r3, [pc, #64]	; (800a8c0 <vPortFree+0x6c>)
 800a880:	617b      	str	r3, [r7, #20]
 800a882:	e002      	b.n	800a88a <vPortFree+0x36>
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	429a      	cmp	r2, r3
 800a894:	d8f6      	bhi.n	800a884 <vPortFree+0x30>
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <vPortFree+0x70>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	4a05      	ldr	r2, [pc, #20]	; (800a8c4 <vPortFree+0x70>)
 800a8b0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800a8b2:	f7fe fcf3 	bl	800929c <xTaskResumeAll>
	}
}
 800a8b6:	bf00      	nop
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20008468 	.word	0x20008468
 800a8c4:	20000010 	.word	0x20000010

0800a8c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800a8ce:	4b10      	ldr	r3, [pc, #64]	; (800a910 <prvHeapInit+0x48>)
 800a8d0:	f023 0307 	bic.w	r3, r3, #7
 800a8d4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8d6:	4a0f      	ldr	r2, [pc, #60]	; (800a914 <prvHeapInit+0x4c>)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8dc:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <prvHeapInit+0x4c>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800a8e2:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <prvHeapInit+0x50>)
 800a8e4:	f247 5228 	movw	r2, #29992	; 0x7528
 800a8e8:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800a8ea:	4b0b      	ldr	r3, [pc, #44]	; (800a918 <prvHeapInit+0x50>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	f247 5228 	movw	r2, #29992	; 0x7528
 800a8fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	4a06      	ldr	r2, [pc, #24]	; (800a918 <prvHeapInit+0x50>)
 800a900:	601a      	str	r2, [r3, #0]
}
 800a902:	bf00      	nop
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	20000f40 	.word	0x20000f40
 800a914:	20008468 	.word	0x20008468
 800a918:	20008470 	.word	0x20008470

0800a91c <codrvCanEnable>:
 800a91c:	b508      	push	{r3, lr}
 800a91e:	4b0c      	ldr	r3, [pc, #48]	; (800a950 <codrvCanEnable+0x34>)
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	f042 0201 	orr.w	r2, r2, #1
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	f042 0202 	orr.w	r2, r2, #2
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	f442 4206 	orr.w	r2, r2, #34304	; 0x8600
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	2270      	movs	r2, #112	; 0x70
 800a93a:	605a      	str	r2, [r3, #4]
 800a93c:	4a05      	ldr	r2, [pc, #20]	; (800a954 <codrvCanEnable+0x38>)
 800a93e:	6813      	ldr	r3, [r2, #0]
 800a940:	f023 0301 	bic.w	r3, r3, #1
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	f000 f9df 	bl	800ad08 <codrvCanEnableInterrupt>
 800a94a:	2000      	movs	r0, #0
 800a94c:	bd08      	pop	{r3, pc}
 800a94e:	bf00      	nop
 800a950:	40006414 	.word	0x40006414
 800a954:	40006400 	.word	0x40006400

0800a958 <codrvCanDisable>:
 800a958:	4a0d      	ldr	r2, [pc, #52]	; (800a990 <codrvCanDisable+0x38>)
 800a95a:	6813      	ldr	r3, [r2, #0]
 800a95c:	f043 0301 	orr.w	r3, r3, #1
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	3204      	adds	r2, #4
 800a964:	6813      	ldr	r3, [r2, #0]
 800a966:	07db      	lsls	r3, r3, #31
 800a968:	d5fc      	bpl.n	800a964 <codrvCanDisable+0xc>
 800a96a:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <codrvCanDisable+0x3c>)
 800a96c:	2000      	movs	r0, #0
 800a96e:	7018      	strb	r0, [r3, #0]
 800a970:	4b09      	ldr	r3, [pc, #36]	; (800a998 <codrvCanDisable+0x40>)
 800a972:	7018      	strb	r0, [r3, #0]
 800a974:	4b09      	ldr	r3, [pc, #36]	; (800a99c <codrvCanDisable+0x44>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	f022 0201 	bic.w	r2, r2, #1
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	f022 0202 	bic.w	r2, r2, #2
 800a984:	601a      	str	r2, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	f422 4206 	bic.w	r2, r2, #34304	; 0x8600
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	4770      	bx	lr
 800a990:	40006400 	.word	0x40006400
 800a994:	2000847c 	.word	0x2000847c
 800a998:	20008484 	.word	0x20008484
 800a99c:	40006414 	.word	0x40006414

0800a9a0 <codrvCanSetBitRate>:
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	f7ff ffd8 	bl	800a958 <codrvCanDisable>
 800a9a8:	4b0e      	ldr	r3, [pc, #56]	; (800a9e4 <codrvCanSetBitRate+0x44>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	b2d0      	uxtb	r0, r2
 800a9ae:	f833 1030 	ldrh.w	r1, [r3, r0, lsl #3]
 800a9b2:	b909      	cbnz	r1, 800a9b8 <codrvCanSetBitRate+0x18>
 800a9b4:	203c      	movs	r0, #60	; 0x3c
 800a9b6:	e014      	b.n	800a9e2 <codrvCanSetBitRate+0x42>
 800a9b8:	428c      	cmp	r4, r1
 800a9ba:	f102 0201 	add.w	r2, r2, #1
 800a9be:	d1f5      	bne.n	800a9ac <codrvCanSetBitRate+0xc>
 800a9c0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	799a      	ldrb	r2, [r3, #6]
 800a9c8:	1e51      	subs	r1, r2, #1
 800a9ca:	885a      	ldrh	r2, [r3, #2]
 800a9cc:	3a01      	subs	r2, #1
 800a9ce:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800a9d2:	7959      	ldrb	r1, [r3, #5]
 800a9d4:	791b      	ldrb	r3, [r3, #4]
 800a9d6:	440b      	add	r3, r1
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800a9de:	4a02      	ldr	r2, [pc, #8]	; (800a9e8 <codrvCanSetBitRate+0x48>)
 800a9e0:	6013      	str	r3, [r2, #0]
 800a9e2:	bd10      	pop	{r4, pc}
 800a9e4:	08012f1c 	.word	0x08012f1c
 800a9e8:	4000641c 	.word	0x4000641c

0800a9ec <codrvCanInitController>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4b25      	ldr	r3, [pc, #148]	; (800aa84 <codrvCanInitController+0x98>)
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	601a      	str	r2, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	0412      	lsls	r2, r2, #16
 800a9fe:	d4fc      	bmi.n	800a9fa <codrvCanInitController+0xe>
 800aa00:	2201      	movs	r2, #1
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	4a20      	ldr	r2, [pc, #128]	; (800aa88 <codrvCanInitController+0x9c>)
 800aa06:	6813      	ldr	r3, [r2, #0]
 800aa08:	07db      	lsls	r3, r3, #31
 800aa0a:	d5fc      	bpl.n	800aa06 <codrvCanInitController+0x1a>
 800aa0c:	4b1d      	ldr	r3, [pc, #116]	; (800aa84 <codrvCanInitController+0x98>)
 800aa0e:	491f      	ldr	r1, [pc, #124]	; (800aa8c <codrvCanInitController+0xa0>)
 800aa10:	481f      	ldr	r0, [pc, #124]	; (800aa90 <codrvCanInitController+0xa4>)
 800aa12:	224d      	movs	r2, #77	; 0x4d
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	4a1f      	ldr	r2, [pc, #124]	; (800aa94 <codrvCanInitController+0xa8>)
 800aa18:	6813      	ldr	r3, [r2, #0]
 800aa1a:	f043 0301 	orr.w	r3, r3, #1
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	680b      	ldr	r3, [r1, #0]
 800aa22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800aa26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800aa2a:	600b      	str	r3, [r1, #0]
 800aa2c:	4b1a      	ldr	r3, [pc, #104]	; (800aa98 <codrvCanInitController+0xac>)
 800aa2e:	f06f 1207 	mvn.w	r2, #458759	; 0x70007
 800aa32:	461d      	mov	r5, r3
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	605a      	str	r2, [r3, #4]
 800aa38:	3308      	adds	r3, #8
 800aa3a:	4283      	cmp	r3, r0
 800aa3c:	d1fa      	bne.n	800aa34 <codrvCanInitController+0x48>
 800aa3e:	4817      	ldr	r0, [pc, #92]	; (800aa9c <codrvCanInitController+0xb0>)
 800aa40:	4a17      	ldr	r2, [pc, #92]	; (800aaa0 <codrvCanInitController+0xb4>)
 800aa42:	6803      	ldr	r3, [r0, #0]
 800aa44:	4013      	ands	r3, r2
 800aa46:	6003      	str	r3, [r0, #0]
 800aa48:	6883      	ldr	r3, [r0, #8]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	6083      	str	r3, [r0, #8]
 800aa4e:	6903      	ldr	r3, [r0, #16]
 800aa50:	4013      	ands	r3, r2
 800aa52:	6103      	str	r3, [r0, #16]
 800aa54:	2300      	movs	r3, #0
 800aa56:	602b      	str	r3, [r5, #0]
 800aa58:	680a      	ldr	r2, [r1, #0]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	600a      	str	r2, [r1, #0]
 800aa60:	490c      	ldr	r1, [pc, #48]	; (800aa94 <codrvCanInitController+0xa8>)
 800aa62:	680a      	ldr	r2, [r1, #0]
 800aa64:	f022 0201 	bic.w	r2, r2, #1
 800aa68:	600a      	str	r2, [r1, #0]
 800aa6a:	4a0e      	ldr	r2, [pc, #56]	; (800aaa4 <codrvCanInitController+0xb8>)
 800aa6c:	7013      	strb	r3, [r2, #0]
 800aa6e:	4a0e      	ldr	r2, [pc, #56]	; (800aaa8 <codrvCanInitController+0xbc>)
 800aa70:	7013      	strb	r3, [r2, #0]
 800aa72:	4a0e      	ldr	r2, [pc, #56]	; (800aaac <codrvCanInitController+0xc0>)
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	f005 f905 	bl	800fc84 <codrvCanErrorInit>
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa80:	f7ff bf8e 	b.w	800a9a0 <codrvCanSetBitRate>
 800aa84:	40006400 	.word	0x40006400
 800aa88:	40006404 	.word	0x40006404
 800aa8c:	4000661c 	.word	0x4000661c
 800aa90:	400066b0 	.word	0x400066b0
 800aa94:	40006600 	.word	0x40006600
 800aa98:	40006640 	.word	0x40006640
 800aa9c:	40006604 	.word	0x40006604
 800aaa0:	ffffc000 	.word	0xffffc000
 800aaa4:	2000847c 	.word	0x2000847c
 800aaa8:	20008484 	.word	0x20008484
 800aaac:	20008480 	.word	0x20008480

0800aab0 <codrvCanInit>:
 800aab0:	f7ff bf9c 	b.w	800a9ec <codrvCanInitController>

0800aab4 <codrvCanStartTransmission>:
 800aab4:	4b06      	ldr	r3, [pc, #24]	; (800aad0 <codrvCanStartTransmission+0x1c>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	b510      	push	{r4, lr}
 800aabc:	d106      	bne.n	800aacc <codrvCanStartTransmission+0x18>
 800aabe:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <codrvCanStartTransmission+0x20>)
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	b90b      	cbnz	r3, 800aac8 <codrvCanStartTransmission+0x14>
 800aac4:	f000 f92c 	bl	800ad20 <codrvCanSetTxInterrupt>
 800aac8:	2000      	movs	r0, #0
 800aaca:	e000      	b.n	800aace <codrvCanStartTransmission+0x1a>
 800aacc:	203d      	movs	r0, #61	; 0x3d
 800aace:	bd10      	pop	{r4, pc}
 800aad0:	2000847c 	.word	0x2000847c
 800aad4:	20008484 	.word	0x20008484

0800aad8 <codrvCanTransmitInterrupt>:
 800aad8:	4b1e      	ldr	r3, [pc, #120]	; (800ab54 <codrvCanTransmitInterrupt+0x7c>)
 800aada:	4a1f      	ldr	r2, [pc, #124]	; (800ab58 <codrvCanTransmitInterrupt+0x80>)
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 53e0 	and.w	r3, r3, #469762048	; 0x1c000000
 800aae6:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 800aaea:	d131      	bne.n	800ab50 <codrvCanTransmitInterrupt+0x78>
 800aaec:	4d1b      	ldr	r5, [pc, #108]	; (800ab5c <codrvCanTransmitInterrupt+0x84>)
 800aaee:	4c1c      	ldr	r4, [pc, #112]	; (800ab60 <codrvCanTransmitInterrupt+0x88>)
 800aaf0:	6828      	ldr	r0, [r5, #0]
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	7026      	strb	r6, [r4, #0]
 800aaf6:	b110      	cbz	r0, 800aafe <codrvCanTransmitInterrupt+0x26>
 800aaf8:	f004 f8e0 	bl	800ecbc <coQueueMsgTransmitted>
 800aafc:	602e      	str	r6, [r5, #0]
 800aafe:	f004 f8c5 	bl	800ec8c <coQueueGetNextTransmitMessage>
 800ab02:	6028      	str	r0, [r5, #0]
 800ab04:	b320      	cbz	r0, 800ab50 <codrvCanTransmitInterrupt+0x78>
 800ab06:	4b17      	ldr	r3, [pc, #92]	; (800ab64 <codrvCanTransmitInterrupt+0x8c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f013 0301 	ands.w	r3, r3, #1
 800ab0e:	d11f      	bne.n	800ab50 <codrvCanTransmitInterrupt+0x78>
 800ab10:	4a15      	ldr	r2, [pc, #84]	; (800ab68 <codrvCanTransmitInterrupt+0x90>)
 800ab12:	7ac1      	ldrb	r1, [r0, #11]
 800ab14:	6011      	str	r1, [r2, #0]
 800ab16:	7a82      	ldrb	r2, [r0, #10]
 800ab18:	0712      	lsls	r2, r2, #28
 800ab1a:	bf5f      	itttt	pl
 800ab1c:	4a13      	ldrpl	r2, [pc, #76]	; (800ab6c <codrvCanTransmitInterrupt+0x94>)
 800ab1e:	68c1      	ldrpl	r1, [r0, #12]
 800ab20:	6011      	strpl	r1, [r2, #0]
 800ab22:	6901      	ldrpl	r1, [r0, #16]
 800ab24:	bf58      	it	pl
 800ab26:	6051      	strpl	r1, [r2, #4]
 800ab28:	7a82      	ldrb	r2, [r0, #10]
 800ab2a:	6841      	ldr	r1, [r0, #4]
 800ab2c:	bf48      	it	mi
 800ab2e:	2302      	movmi	r3, #2
 800ab30:	f012 0f02 	tst.w	r2, #2
 800ab34:	bf14      	ite	ne
 800ab36:	ea43 03c1 	orrne.w	r3, r3, r1, lsl #3
 800ab3a:	ea43 5341 	orreq.w	r3, r3, r1, lsl #21
 800ab3e:	4a09      	ldr	r2, [pc, #36]	; (800ab64 <codrvCanTransmitInterrupt+0x8c>)
 800ab40:	bf14      	ite	ne
 800ab42:	f043 0305 	orrne.w	r3, r3, #5
 800ab46:	f043 0301 	orreq.w	r3, r3, #1
 800ab4a:	6013      	str	r3, [r2, #0]
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	7023      	strb	r3, [r4, #0]
 800ab50:	bd70      	pop	{r4, r5, r6, pc}
 800ab52:	bf00      	nop
 800ab54:	40006408 	.word	0x40006408
 800ab58:	00010101 	.word	0x00010101
 800ab5c:	20008480 	.word	0x20008480
 800ab60:	20008484 	.word	0x20008484
 800ab64:	40006580 	.word	0x40006580
 800ab68:	40006584 	.word	0x40006584
 800ab6c:	40006588 	.word	0x40006588

0800ab70 <codrvCanReceiveInterrupt>:
 800ab70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab72:	4c28      	ldr	r4, [pc, #160]	; (800ac14 <codrvCanReceiveInterrupt+0xa4>)
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	0798      	lsls	r0, r3, #30
 800ab78:	d048      	beq.n	800ac0c <codrvCanReceiveInterrupt+0x9c>
 800ab7a:	4b27      	ldr	r3, [pc, #156]	; (800ac18 <codrvCanReceiveInterrupt+0xa8>)
 800ab7c:	6818      	ldr	r0, [r3, #0]
 800ab7e:	f010 0304 	ands.w	r3, r0, #4
 800ab82:	bf0c      	ite	eq
 800ab84:	2200      	moveq	r2, #0
 800ab86:	2202      	movne	r2, #2
 800ab88:	0781      	lsls	r1, r0, #30
 800ab8a:	bf48      	it	mi
 800ab8c:	f042 0208 	orrmi.w	r2, r2, #8
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d13d      	bne.n	800ac10 <codrvCanReceiveInterrupt+0xa0>
 800ab94:	0d40      	lsrs	r0, r0, #21
 800ab96:	4b21      	ldr	r3, [pc, #132]	; (800ac1c <codrvCanReceiveInterrupt+0xac>)
 800ab98:	681d      	ldr	r5, [r3, #0]
 800ab9a:	f005 050f 	and.w	r5, r5, #15
 800ab9e:	2d08      	cmp	r5, #8
 800aba0:	462e      	mov	r6, r5
 800aba2:	bf28      	it	cs
 800aba4:	2608      	movcs	r6, #8
 800aba6:	4631      	mov	r1, r6
 800aba8:	f003 fee4 	bl	800e974 <coQueueGetReceiveBuffer>
 800abac:	b318      	cbz	r0, 800abf6 <codrvCanReceiveInterrupt+0x86>
 800abae:	4b1c      	ldr	r3, [pc, #112]	; (800ac20 <codrvCanReceiveInterrupt+0xb0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f88d 3000 	strb.w	r3, [sp]
 800abb6:	0a1a      	lsrs	r2, r3, #8
 800abb8:	f88d 2001 	strb.w	r2, [sp, #1]
 800abbc:	2d04      	cmp	r5, #4
 800abbe:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800abc2:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800abc6:	f88d 2002 	strb.w	r2, [sp, #2]
 800abca:	f88d 3003 	strb.w	r3, [sp, #3]
 800abce:	d90c      	bls.n	800abea <codrvCanReceiveInterrupt+0x7a>
 800abd0:	4b14      	ldr	r3, [pc, #80]	; (800ac24 <codrvCanReceiveInterrupt+0xb4>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f88d 3004 	strb.w	r3, [sp, #4]
 800abd8:	0a1a      	lsrs	r2, r3, #8
 800abda:	f88d 2005 	strb.w	r2, [sp, #5]
 800abde:	0c1a      	lsrs	r2, r3, #16
 800abe0:	0e1b      	lsrs	r3, r3, #24
 800abe2:	f88d 2006 	strb.w	r2, [sp, #6]
 800abe6:	f88d 3007 	strb.w	r3, [sp, #7]
 800abea:	4632      	mov	r2, r6
 800abec:	4669      	mov	r1, sp
 800abee:	f005 fa1f 	bl	8010030 <memcpy>
 800abf2:	f003 fe7f 	bl	800e8f4 <coQueueReceiveBufferIsFilled>
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	06db      	lsls	r3, r3, #27
 800abfa:	d505      	bpl.n	800ac08 <codrvCanReceiveInterrupt+0x98>
 800abfc:	f005 f83e 	bl	800fc7c <codrvCanErrorGetFlags>
 800ac00:	2301      	movs	r3, #1
 800ac02:	7003      	strb	r3, [r0, #0]
 800ac04:	2310      	movs	r3, #16
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	2320      	movs	r3, #32
 800ac0a:	6023      	str	r3, [r4, #0]
 800ac0c:	b002      	add	sp, #8
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	08c0      	lsrs	r0, r0, #3
 800ac12:	e7c0      	b.n	800ab96 <codrvCanReceiveInterrupt+0x26>
 800ac14:	4000640c 	.word	0x4000640c
 800ac18:	400065b0 	.word	0x400065b0
 800ac1c:	400065b4 	.word	0x400065b4
 800ac20:	400065b8 	.word	0x400065b8
 800ac24:	400065bc 	.word	0x400065bc

0800ac28 <codrvCanErrorInterrupt>:
 800ac28:	b508      	push	{r3, lr}
 800ac2a:	f005 f827 	bl	800fc7c <codrvCanErrorGetFlags>
 800ac2e:	4b08      	ldr	r3, [pc, #32]	; (800ac50 <codrvCanErrorInterrupt+0x28>)
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	f012 0f04 	tst.w	r2, #4
 800ac36:	f04f 0301 	mov.w	r3, #1
 800ac3a:	d004      	beq.n	800ac46 <codrvCanErrorInterrupt+0x1e>
 800ac3c:	70c3      	strb	r3, [r0, #3]
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <codrvCanErrorInterrupt+0x2c>)
 800ac40:	2204      	movs	r2, #4
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	bd08      	pop	{r3, pc}
 800ac46:	0792      	lsls	r2, r2, #30
 800ac48:	bf4c      	ite	mi
 800ac4a:	7043      	strbmi	r3, [r0, #1]
 800ac4c:	7083      	strbpl	r3, [r0, #2]
 800ac4e:	e7f6      	b.n	800ac3e <codrvCanErrorInterrupt+0x16>
 800ac50:	40006418 	.word	0x40006418
 800ac54:	40006404 	.word	0x40006404

0800ac58 <codrvCanDriverHandler>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	f005 f80f 	bl	800fc7c <codrvCanErrorGetFlags>
 800ac5e:	4b23      	ldr	r3, [pc, #140]	; (800acec <codrvCanDriverHandler+0x94>)
 800ac60:	4c23      	ldr	r4, [pc, #140]	; (800acf0 <codrvCanDriverHandler+0x98>)
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	4923      	ldr	r1, [pc, #140]	; (800acf4 <codrvCanDriverHandler+0x9c>)
 800ac66:	3b14      	subs	r3, #20
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f013 0301 	ands.w	r3, r3, #1
 800ac6e:	d103      	bne.n	800ac78 <codrvCanDriverHandler+0x20>
 800ac70:	4d21      	ldr	r5, [pc, #132]	; (800acf8 <codrvCanDriverHandler+0xa0>)
 800ac72:	682d      	ldr	r5, [r5, #0]
 800ac74:	2d00      	cmp	r5, #0
 800ac76:	da24      	bge.n	800acc2 <codrvCanDriverHandler+0x6a>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	7183      	strb	r3, [r0, #6]
 800ac7c:	7023      	strb	r3, [r4, #0]
 800ac7e:	700b      	strb	r3, [r1, #0]
 800ac80:	780a      	ldrb	r2, [r1, #0]
 800ac82:	481e      	ldr	r0, [pc, #120]	; (800acfc <codrvCanDriverHandler+0xa4>)
 800ac84:	b372      	cbz	r2, 800ace4 <codrvCanDriverHandler+0x8c>
 800ac86:	4a1e      	ldr	r2, [pc, #120]	; (800ad00 <codrvCanDriverHandler+0xa8>)
 800ac88:	6812      	ldr	r2, [r2, #0]
 800ac8a:	f002 52e0 	and.w	r2, r2, #469762048	; 0x1c000000
 800ac8e:	f1b2 5fe0 	cmp.w	r2, #469762048	; 0x1c000000
 800ac92:	d127      	bne.n	800ace4 <codrvCanDriverHandler+0x8c>
 800ac94:	8802      	ldrh	r2, [r0, #0]
 800ac96:	3201      	adds	r2, #1
 800ac98:	b292      	uxth	r2, r2
 800ac9a:	2a14      	cmp	r2, #20
 800ac9c:	8002      	strh	r2, [r0, #0]
 800ac9e:	d901      	bls.n	800aca4 <codrvCanDriverHandler+0x4c>
 800aca0:	2200      	movs	r2, #0
 800aca2:	700a      	strb	r2, [r1, #0]
 800aca4:	7822      	ldrb	r2, [r4, #0]
 800aca6:	2a01      	cmp	r2, #1
 800aca8:	d104      	bne.n	800acb4 <codrvCanDriverHandler+0x5c>
 800acaa:	780a      	ldrb	r2, [r1, #0]
 800acac:	b912      	cbnz	r2, 800acb4 <codrvCanDriverHandler+0x5c>
 800acae:	4a15      	ldr	r2, [pc, #84]	; (800ad04 <codrvCanDriverHandler+0xac>)
 800acb0:	6812      	ldr	r2, [r2, #0]
 800acb2:	b902      	cbnz	r2, 800acb6 <codrvCanDriverHandler+0x5e>
 800acb4:	b10b      	cbz	r3, 800acba <codrvCanDriverHandler+0x62>
 800acb6:	f7ff fefd 	bl	800aab4 <codrvCanStartTransmission>
 800acba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acbe:	f004 bfed 	b.w	800fc9c <codrvCanErrorInformStack>
 800acc2:	0755      	lsls	r5, r2, #29
 800acc4:	d502      	bpl.n	800accc <codrvCanDriverHandler+0x74>
 800acc6:	2203      	movs	r2, #3
 800acc8:	7182      	strb	r2, [r0, #6]
 800acca:	e7d7      	b.n	800ac7c <codrvCanDriverHandler+0x24>
 800accc:	0793      	lsls	r3, r2, #30
 800acce:	bf4c      	ite	mi
 800acd0:	2302      	movmi	r3, #2
 800acd2:	2301      	movpl	r3, #1
 800acd4:	7183      	strb	r3, [r0, #6]
 800acd6:	7823      	ldrb	r3, [r4, #0]
 800acd8:	2201      	movs	r2, #1
 800acda:	fab3 f383 	clz	r3, r3
 800acde:	095b      	lsrs	r3, r3, #5
 800ace0:	7022      	strb	r2, [r4, #0]
 800ace2:	e7cd      	b.n	800ac80 <codrvCanDriverHandler+0x28>
 800ace4:	2200      	movs	r2, #0
 800ace6:	8002      	strh	r2, [r0, #0]
 800ace8:	e7dc      	b.n	800aca4 <codrvCanDriverHandler+0x4c>
 800acea:	bf00      	nop
 800acec:	40006418 	.word	0x40006418
 800acf0:	2000847c 	.word	0x2000847c
 800acf4:	20008484 	.word	0x20008484
 800acf8:	4000641c 	.word	0x4000641c
 800acfc:	2000847e 	.word	0x2000847e
 800ad00:	40006408 	.word	0x40006408
 800ad04:	20008480 	.word	0x20008480

0800ad08 <codrvCanEnableInterrupt>:
 800ad08:	b508      	push	{r3, lr}
 800ad0a:	2013      	movs	r0, #19
 800ad0c:	f7f9 fa2d 	bl	800416a <HAL_NVIC_EnableIRQ>
 800ad10:	2014      	movs	r0, #20
 800ad12:	f7f9 fa2a 	bl	800416a <HAL_NVIC_EnableIRQ>
 800ad16:	2016      	movs	r0, #22
 800ad18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad1c:	f7f9 ba25 	b.w	800416a <HAL_NVIC_EnableIRQ>

0800ad20 <codrvCanSetTxInterrupt>:
 800ad20:	2013      	movs	r0, #19
 800ad22:	f7f9 ba3c 	b.w	800419e <HAL_NVIC_SetPendingIRQ>

0800ad26 <CAN1_TX_IRQHandler>:
 800ad26:	f7ff bed7 	b.w	800aad8 <codrvCanTransmitInterrupt>

0800ad2a <CAN1_SCE_IRQHandler>:
 800ad2a:	f7ff bf7d 	b.w	800ac28 <codrvCanErrorInterrupt>

0800ad2e <CAN1_RX0_IRQHandler>:
 800ad2e:	f7ff bf1f 	b.w	800ab70 <codrvCanReceiveInterrupt>
	...

0800ad34 <codrvTimerSetup>:
 800ad34:	b510      	push	{r4, lr}
 800ad36:	4604      	mov	r4, r0
 800ad38:	2004      	movs	r0, #4
 800ad3a:	f7f9 fa3f 	bl	80041bc <HAL_SYSTICK_CLKSourceConfig>
 800ad3e:	f7fb f93d 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 800ad42:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <codrvTimerSetup+0x28>)
 800ad44:	4298      	cmp	r0, r3
 800ad46:	d906      	bls.n	800ad56 <codrvTimerSetup+0x22>
 800ad48:	3301      	adds	r3, #1
 800ad4a:	fbb0 f0f3 	udiv	r0, r0, r3
 800ad4e:	4360      	muls	r0, r4
 800ad50:	f7f9 fa19 	bl	8004186 <HAL_SYSTICK_Config>
 800ad54:	b100      	cbz	r0, 800ad58 <codrvTimerSetup+0x24>
 800ad56:	2051      	movs	r0, #81	; 0x51
 800ad58:	bd10      	pop	{r4, pc}
 800ad5a:	bf00      	nop
 800ad5c:	000f423f 	.word	0x000f423f

0800ad60 <coCommTaskCheck>:
 800ad60:	b508      	push	{r3, lr}
 800ad62:	f003 fdb1 	bl	800e8c8 <coQueueReceiveMessageAvailable>
 800ad66:	2801      	cmp	r0, #1
 800ad68:	d004      	beq.n	800ad74 <coCommTaskCheck+0x14>
 800ad6a:	f000 fd3b 	bl	800b7e4 <icoEventsAvailable>
 800ad6e:	1e43      	subs	r3, r0, #1
 800ad70:	4258      	negs	r0, r3
 800ad72:	4158      	adcs	r0, r3
 800ad74:	bd08      	pop	{r3, pc}
	...

0800ad78 <coCommTask>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	4c2c      	ldr	r4, [pc, #176]	; (800ae2c <coCommTask+0xb4>)
 800ad7c:	7823      	ldrb	r3, [r4, #0]
 800ad7e:	b086      	sub	sp, #24
 800ad80:	b1c3      	cbz	r3, 800adb4 <coCommTask+0x3c>
 800ad82:	2300      	movs	r3, #0
 800ad84:	a801      	add	r0, sp, #4
 800ad86:	7023      	strb	r3, [r4, #0]
 800ad88:	f003 fd12 	bl	800e7b0 <icoQueueGetReceiveMessage>
 800ad8c:	b190      	cbz	r0, 800adb4 <coCommTask+0x3c>
 800ad8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ad92:	2b0f      	cmp	r3, #15
 800ad94:	d80c      	bhi.n	800adb0 <coCommTask+0x38>
 800ad96:	e8df f003 	tbb	[pc, r3]
 800ad9a:	0b38      	.short	0x0b38
 800ad9c:	30403408 	.word	0x30403408
 800ada0:	3c0b230b 	.word	0x3c0b230b
 800ada4:	0b0b0b0b 	.word	0x0b0b0b0b
 800ada8:	440b      	.short	0x440b
 800adaa:	a801      	add	r0, sp, #4
 800adac:	f001 faca 	bl	800c344 <icoNmtMsgHandler>
 800adb0:	2301      	movs	r3, #1
 800adb2:	7023      	strb	r3, [r4, #0]
 800adb4:	4b1e      	ldr	r3, [pc, #120]	; (800ae30 <coCommTask+0xb8>)
 800adb6:	781a      	ldrb	r2, [r3, #0]
 800adb8:	b11a      	cbz	r2, 800adc2 <coCommTask+0x4a>
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	f004 ff21 	bl	800fc04 <icoTimerCheck>
 800adc2:	4b1c      	ldr	r3, [pc, #112]	; (800ae34 <coCommTask+0xbc>)
 800adc4:	781a      	ldrb	r2, [r3, #0]
 800adc6:	b11a      	cbz	r2, 800add0 <coCommTask+0x58>
 800adc8:	2200      	movs	r2, #0
 800adca:	701a      	strb	r2, [r3, #0]
 800adcc:	f000 fd12 	bl	800b7f4 <icoEventCheck>
 800add0:	f003 ff78 	bl	800ecc4 <icoQueueHandler>
 800add4:	f7ff ff40 	bl	800ac58 <codrvCanDriverHandler>
 800add8:	f7ff ffc2 	bl	800ad60 <coCommTaskCheck>
 800addc:	b006      	add	sp, #24
 800adde:	bd10      	pop	{r4, pc}
 800ade0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800ade4:	b933      	cbnz	r3, 800adf4 <coCommTask+0x7c>
 800ade6:	f88d 300e 	strb.w	r3, [sp, #14]
 800adea:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800adee:	f004 fd81 	bl	800f8f4 <icoSyncHandler>
 800adf2:	e7dd      	b.n	800adb0 <coCommTask+0x38>
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d8db      	bhi.n	800adb0 <coCommTask+0x38>
 800adf8:	e7f7      	b.n	800adea <coCommTask+0x72>
 800adfa:	a801      	add	r0, sp, #4
 800adfc:	f002 fe2e 	bl	800da5c <icoPdoReceiveHandler>
 800ae00:	e7d6      	b.n	800adb0 <coCommTask+0x38>
 800ae02:	a801      	add	r0, sp, #4
 800ae04:	f000 fbc2 	bl	800b58c <icoNmtErrorCtrlHandler>
 800ae08:	e7d2      	b.n	800adb0 <coCommTask+0x38>
 800ae0a:	a801      	add	r0, sp, #4
 800ae0c:	f004 f96c 	bl	800f0e8 <icoSdoServerHandler>
 800ae10:	e7ce      	b.n	800adb0 <coCommTask+0x38>
 800ae12:	a801      	add	r0, sp, #4
 800ae14:	f000 f952 	bl	800b0bc <icoEmcyConsumerHandler>
 800ae18:	e7ca      	b.n	800adb0 <coCommTask+0x38>
 800ae1a:	a801      	add	r0, sp, #4
 800ae1c:	f002 fdfc 	bl	800da18 <icoPdoRtrHandler>
 800ae20:	e7c6      	b.n	800adb0 <coCommTask+0x38>
 800ae22:	a802      	add	r0, sp, #8
 800ae24:	f000 fee6 	bl	800bbf4 <icoLssHandler>
 800ae28:	e7c2      	b.n	800adb0 <coCommTask+0x38>
 800ae2a:	bf00      	nop
 800ae2c:	20008496 	.word	0x20008496
 800ae30:	20008497 	.word	0x20008497
 800ae34:	20008495 	.word	0x20008495

0800ae38 <coCommTaskSet>:
 800ae38:	2801      	cmp	r0, #1
 800ae3a:	d007      	beq.n	800ae4c <coCommTaskSet+0x14>
 800ae3c:	d302      	bcc.n	800ae44 <coCommTaskSet+0xc>
 800ae3e:	2802      	cmp	r0, #2
 800ae40:	d007      	beq.n	800ae52 <coCommTaskSet+0x1a>
 800ae42:	4770      	bx	lr
 800ae44:	4b04      	ldr	r3, [pc, #16]	; (800ae58 <coCommTaskSet+0x20>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
 800ae4a:	4770      	bx	lr
 800ae4c:	4b03      	ldr	r3, [pc, #12]	; (800ae5c <coCommTaskSet+0x24>)
 800ae4e:	7018      	strb	r0, [r3, #0]
 800ae50:	4770      	bx	lr
 800ae52:	4b03      	ldr	r3, [pc, #12]	; (800ae60 <coCommTaskSet+0x28>)
 800ae54:	e7f7      	b.n	800ae46 <coCommTaskSet+0xe>
 800ae56:	bf00      	nop
 800ae58:	20008497 	.word	0x20008497
 800ae5c:	20008496 	.word	0x20008496
 800ae60:	20008495 	.word	0x20008495

0800ae64 <coCommStateEvent>:
 800ae64:	4b34      	ldr	r3, [pc, #208]	; (800af38 <coCommStateEvent+0xd4>)
 800ae66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6a:	4680      	mov	r8, r0
 800ae6c:	2400      	movs	r4, #0
 800ae6e:	469b      	mov	fp, r3
 800ae70:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800ae74:	eb0a 0204 	add.w	r2, sl, r4
 800ae78:	5cd5      	ldrb	r5, [r2, r3]
 800ae7a:	4545      	cmp	r5, r8
 800ae7c:	d026      	beq.n	800aecc <coCommStateEvent+0x68>
 800ae7e:	3401      	adds	r4, #1
 800ae80:	2c0d      	cmp	r4, #13
 800ae82:	d1f5      	bne.n	800ae70 <coCommStateEvent+0xc>
 800ae84:	b003      	add	sp, #12
 800ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8a:	3f01      	subs	r7, #1
 800ae8c:	b2ff      	uxtb	r7, r7
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	4790      	blx	r2
 800ae98:	9b01      	ldr	r3, [sp, #4]
 800ae9a:	e026      	b.n	800aeea <coCommStateEvent+0x86>
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	2006      	movs	r0, #6
 800aea0:	f000 fdd0 	bl	800ba44 <coLedSetState>
 800aea4:	e028      	b.n	800aef8 <coCommStateEvent+0x94>
 800aea6:	4639      	mov	r1, r7
 800aea8:	2006      	movs	r0, #6
 800aeaa:	f000 fdcb 	bl	800ba44 <coLedSetState>
 800aeae:	4639      	mov	r1, r7
 800aeb0:	2002      	movs	r0, #2
 800aeb2:	e7f5      	b.n	800aea0 <coCommStateEvent+0x3c>
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	e7f2      	b.n	800aea0 <coCommStateEvent+0x3c>
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d138      	bne.n	800af30 <coCommStateEvent+0xcc>
 800aebe:	4b1f      	ldr	r3, [pc, #124]	; (800af3c <coCommStateEvent+0xd8>)
 800aec0:	781a      	ldrb	r2, [r3, #0]
 800aec2:	42aa      	cmp	r2, r5
 800aec4:	d0de      	beq.n	800ae84 <coCommStateEvent+0x20>
 800aec6:	701d      	strb	r5, [r3, #0]
 800aec8:	46a8      	mov	r8, r5
 800aeca:	e022      	b.n	800af12 <coCommStateEvent+0xae>
 800aecc:	4413      	add	r3, r2
 800aece:	789e      	ldrb	r6, [r3, #2]
 800aed0:	2e03      	cmp	r6, #3
 800aed2:	d013      	beq.n	800aefc <coCommStateEvent+0x98>
 800aed4:	4b1a      	ldr	r3, [pc, #104]	; (800af40 <coCommStateEvent+0xdc>)
 800aed6:	781a      	ldrb	r2, [r3, #0]
 800aed8:	42b2      	cmp	r2, r6
 800aeda:	4699      	mov	r9, r3
 800aedc:	d00c      	beq.n	800aef8 <coCommStateEvent+0x94>
 800aede:	b90e      	cbnz	r6, 800aee4 <coCommStateEvent+0x80>
 800aee0:	f000 faa8 	bl	800b434 <icoErrorBehavior>
 800aee4:	4b17      	ldr	r3, [pc, #92]	; (800af44 <coCommStateEvent+0xe0>)
 800aee6:	781f      	ldrb	r7, [r3, #0]
 800aee8:	4b17      	ldr	r3, [pc, #92]	; (800af48 <coCommStateEvent+0xe4>)
 800aeea:	2f00      	cmp	r7, #0
 800aeec:	d1cd      	bne.n	800ae8a <coCommStateEvent+0x26>
 800aeee:	2e01      	cmp	r6, #1
 800aef0:	d0d9      	beq.n	800aea6 <coCommStateEvent+0x42>
 800aef2:	d3d3      	bcc.n	800ae9c <coCommStateEvent+0x38>
 800aef4:	2e02      	cmp	r6, #2
 800aef6:	d0dd      	beq.n	800aeb4 <coCommStateEvent+0x50>
 800aef8:	f889 6000 	strb.w	r6, [r9]
 800aefc:	4454      	add	r4, sl
 800aefe:	44a3      	add	fp, r4
 800af00:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d1d8      	bne.n	800aeba <coCommStateEvent+0x56>
 800af08:	4b10      	ldr	r3, [pc, #64]	; (800af4c <coCommStateEvent+0xe8>)
 800af0a:	781a      	ldrb	r2, [r3, #0]
 800af0c:	42aa      	cmp	r2, r5
 800af0e:	d0b9      	beq.n	800ae84 <coCommStateEvent+0x20>
 800af10:	701d      	strb	r5, [r3, #0]
 800af12:	f1b8 0f00 	cmp.w	r8, #0
 800af16:	d0b5      	beq.n	800ae84 <coCommStateEvent+0x20>
 800af18:	4b0d      	ldr	r3, [pc, #52]	; (800af50 <coCommStateEvent+0xec>)
 800af1a:	4e0e      	ldr	r6, [pc, #56]	; (800af54 <coCommStateEvent+0xf0>)
 800af1c:	781c      	ldrb	r4, [r3, #0]
 800af1e:	2c00      	cmp	r4, #0
 800af20:	d0b0      	beq.n	800ae84 <coCommStateEvent+0x20>
 800af22:	3c01      	subs	r4, #1
 800af24:	b2e4      	uxtb	r4, r4
 800af26:	4628      	mov	r0, r5
 800af28:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800af2c:	4798      	blx	r3
 800af2e:	e7f6      	b.n	800af1e <coCommStateEvent+0xba>
 800af30:	2b03      	cmp	r3, #3
 800af32:	d0c9      	beq.n	800aec8 <coCommStateEvent+0x64>
 800af34:	e7a6      	b.n	800ae84 <coCommStateEvent+0x20>
 800af36:	bf00      	nop
 800af38:	08013328 	.word	0x08013328
 800af3c:	20008498 	.word	0x20008498
 800af40:	20008485 	.word	0x20008485
 800af44:	2000848c 	.word	0x2000848c
 800af48:	20008488 	.word	0x20008488
 800af4c:	20008499 	.word	0x20008499
 800af50:	20008494 	.word	0x20008494
 800af54:	20008490 	.word	0x20008490

0800af58 <icoCommTaskVarInit>:
 800af58:	4a09      	ldr	r2, [pc, #36]	; (800af80 <icoCommTaskVarInit+0x28>)
 800af5a:	2300      	movs	r3, #0
 800af5c:	7013      	strb	r3, [r2, #0]
 800af5e:	4a09      	ldr	r2, [pc, #36]	; (800af84 <icoCommTaskVarInit+0x2c>)
 800af60:	7013      	strb	r3, [r2, #0]
 800af62:	4a09      	ldr	r2, [pc, #36]	; (800af88 <icoCommTaskVarInit+0x30>)
 800af64:	7013      	strb	r3, [r2, #0]
 800af66:	4a09      	ldr	r2, [pc, #36]	; (800af8c <icoCommTaskVarInit+0x34>)
 800af68:	7013      	strb	r3, [r2, #0]
 800af6a:	4a09      	ldr	r2, [pc, #36]	; (800af90 <icoCommTaskVarInit+0x38>)
 800af6c:	2109      	movs	r1, #9
 800af6e:	7011      	strb	r1, [r2, #0]
 800af70:	4a08      	ldr	r2, [pc, #32]	; (800af94 <icoCommTaskVarInit+0x3c>)
 800af72:	2102      	movs	r1, #2
 800af74:	7011      	strb	r1, [r2, #0]
 800af76:	4a08      	ldr	r2, [pc, #32]	; (800af98 <icoCommTaskVarInit+0x40>)
 800af78:	7013      	strb	r3, [r2, #0]
 800af7a:	4a08      	ldr	r2, [pc, #32]	; (800af9c <icoCommTaskVarInit+0x44>)
 800af7c:	7013      	strb	r3, [r2, #0]
 800af7e:	4770      	bx	lr
 800af80:	20008496 	.word	0x20008496
 800af84:	20008497 	.word	0x20008497
 800af88:	20008495 	.word	0x20008495
 800af8c:	20008485 	.word	0x20008485
 800af90:	20008498 	.word	0x20008498
 800af94:	20008499 	.word	0x20008499
 800af98:	2000848c 	.word	0x2000848c
 800af9c:	20008494 	.word	0x20008494

0800afa0 <coEventRegister_CAN_STATE>:
 800afa0:	4a05      	ldr	r2, [pc, #20]	; (800afb8 <coEventRegister_CAN_STATE+0x18>)
 800afa2:	7813      	ldrb	r3, [r2, #0]
 800afa4:	b92b      	cbnz	r3, 800afb2 <coEventRegister_CAN_STATE+0x12>
 800afa6:	4905      	ldr	r1, [pc, #20]	; (800afbc <coEventRegister_CAN_STATE+0x1c>)
 800afa8:	6008      	str	r0, [r1, #0]
 800afaa:	2101      	movs	r1, #1
 800afac:	7011      	strb	r1, [r2, #0]
 800afae:	4618      	mov	r0, r3
 800afb0:	4770      	bx	lr
 800afb2:	200d      	movs	r0, #13
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	2000848c 	.word	0x2000848c
 800afbc:	20008488 	.word	0x20008488

0800afc0 <coEventRegister_COMM_EVENT>:
 800afc0:	4a05      	ldr	r2, [pc, #20]	; (800afd8 <coEventRegister_COMM_EVENT+0x18>)
 800afc2:	7813      	ldrb	r3, [r2, #0]
 800afc4:	b92b      	cbnz	r3, 800afd2 <coEventRegister_COMM_EVENT+0x12>
 800afc6:	4905      	ldr	r1, [pc, #20]	; (800afdc <coEventRegister_COMM_EVENT+0x1c>)
 800afc8:	6008      	str	r0, [r1, #0]
 800afca:	2101      	movs	r1, #1
 800afcc:	7011      	strb	r1, [r2, #0]
 800afce:	4618      	mov	r0, r3
 800afd0:	4770      	bx	lr
 800afd2:	200d      	movs	r0, #13
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	20008494 	.word	0x20008494
 800afdc:	20008490 	.word	0x20008490

0800afe0 <classicalEmergency>:
 800afe0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afe2:	4606      	mov	r6, r0
 800afe4:	460c      	mov	r4, r1
 800afe6:	f241 0001 	movw	r0, #4097	; 0x1001
 800afea:	2100      	movs	r1, #0
 800afec:	f001 fe32 	bl	800cc54 <coOdGetObjAddr>
 800aff0:	4605      	mov	r5, r0
 800aff2:	b138      	cbz	r0, 800b004 <classicalEmergency+0x24>
 800aff4:	7803      	ldrb	r3, [r0, #0]
 800aff6:	f013 02fe 	ands.w	r2, r3, #254	; 0xfe
 800affa:	bf16      	itet	ne
 800affc:	f043 0301 	orrne.w	r3, r3, #1
 800b000:	7002      	strbeq	r2, [r0, #0]
 800b002:	7003      	strbne	r3, [r0, #0]
 800b004:	f001 f9e2 	bl	800c3cc <coNmtGetState>
 800b008:	287f      	cmp	r0, #127	; 0x7f
 800b00a:	d001      	beq.n	800b010 <classicalEmergency+0x30>
 800b00c:	2805      	cmp	r0, #5
 800b00e:	d132      	bne.n	800b076 <classicalEmergency+0x96>
 800b010:	0a33      	lsrs	r3, r6, #8
 800b012:	f88d 6000 	strb.w	r6, [sp]
 800b016:	f88d 3001 	strb.w	r3, [sp, #1]
 800b01a:	b1f5      	cbz	r5, 800b05a <classicalEmergency+0x7a>
 800b01c:	782b      	ldrb	r3, [r5, #0]
 800b01e:	f88d 3002 	strb.w	r3, [sp, #2]
 800b022:	f416 4f7f 	tst.w	r6, #65280	; 0xff00
 800b026:	bf1e      	ittt	ne
 800b028:	f89d 3002 	ldrbne.w	r3, [sp, #2]
 800b02c:	f043 0301 	orrne.w	r3, r3, #1
 800b030:	f88d 3002 	strbne.w	r3, [sp, #2]
 800b034:	b9a4      	cbnz	r4, 800b060 <classicalEmergency+0x80>
 800b036:	f88d 4003 	strb.w	r4, [sp, #3]
 800b03a:	f88d 4004 	strb.w	r4, [sp, #4]
 800b03e:	f88d 4005 	strb.w	r4, [sp, #5]
 800b042:	f88d 4006 	strb.w	r4, [sp, #6]
 800b046:	f88d 4007 	strb.w	r4, [sp, #7]
 800b04a:	4b0c      	ldr	r3, [pc, #48]	; (800b07c <classicalEmergency+0x9c>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	4669      	mov	r1, sp
 800b050:	8818      	ldrh	r0, [r3, #0]
 800b052:	f003 fd09 	bl	800ea68 <icoTransmitMessage>
 800b056:	b002      	add	sp, #8
 800b058:	bd70      	pop	{r4, r5, r6, pc}
 800b05a:	f88d 5002 	strb.w	r5, [sp, #2]
 800b05e:	e7e0      	b.n	800b022 <classicalEmergency+0x42>
 800b060:	1e63      	subs	r3, r4, #1
 800b062:	f10d 0202 	add.w	r2, sp, #2
 800b066:	3404      	adds	r4, #4
 800b068:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b06c:	f802 1f01 	strb.w	r1, [r2, #1]!
 800b070:	42a3      	cmp	r3, r4
 800b072:	d1f9      	bne.n	800b068 <classicalEmergency+0x88>
 800b074:	e7e9      	b.n	800b04a <classicalEmergency+0x6a>
 800b076:	200e      	movs	r0, #14
 800b078:	e7ed      	b.n	800b056 <classicalEmergency+0x76>
 800b07a:	bf00      	nop
 800b07c:	2000849a 	.word	0x2000849a

0800b080 <coEmcyWriteReq>:
 800b080:	f7ff bfae 	b.w	800afe0 <classicalEmergency>

0800b084 <icoEmcyWriteReq>:
 800b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b086:	4b0b      	ldr	r3, [pc, #44]	; (800b0b4 <icoEmcyWriteReq+0x30>)
 800b088:	4f0b      	ldr	r7, [pc, #44]	; (800b0b8 <icoEmcyWriteReq+0x34>)
 800b08a:	781c      	ldrb	r4, [r3, #0]
 800b08c:	4605      	mov	r5, r0
 800b08e:	460e      	mov	r6, r1
 800b090:	b92c      	cbnz	r4, 800b09e <icoEmcyWriteReq+0x1a>
 800b092:	4631      	mov	r1, r6
 800b094:	4628      	mov	r0, r5
 800b096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b09a:	f7ff bfa1 	b.w	800afe0 <classicalEmergency>
 800b09e:	3c01      	subs	r4, #1
 800b0a0:	b2e4      	uxtb	r4, r4
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	4798      	blx	r3
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d0ef      	beq.n	800b090 <icoEmcyWriteReq+0xc>
 800b0b0:	2050      	movs	r0, #80	; 0x50
 800b0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b4:	200084c4 	.word	0x200084c4
 800b0b8:	200084c0 	.word	0x200084c0

0800b0bc <icoEmcyConsumerHandler>:
 800b0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c0:	7a43      	ldrb	r3, [r0, #9]
 800b0c2:	2b08      	cmp	r3, #8
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	d10a      	bne.n	800b0de <icoEmcyConsumerHandler+0x22>
 800b0c8:	4b0c      	ldr	r3, [pc, #48]	; (800b0fc <icoEmcyConsumerHandler+0x40>)
 800b0ca:	8842      	ldrh	r2, [r0, #2]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d805      	bhi.n	800b0de <icoEmcyConsumerHandler+0x22>
 800b0d2:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <icoEmcyConsumerHandler+0x44>)
 800b0d4:	4f0b      	ldr	r7, [pc, #44]	; (800b104 <icoEmcyConsumerHandler+0x48>)
 800b0d6:	781c      	ldrb	r4, [r3, #0]
 800b0d8:	f100 080d 	add.w	r8, r0, #13
 800b0dc:	b90c      	cbnz	r4, 800b0e2 <icoEmcyConsumerHandler+0x26>
 800b0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e2:	3c01      	subs	r4, #1
 800b0e4:	b2e4      	uxtb	r4, r4
 800b0e6:	6868      	ldr	r0, [r5, #4]
 800b0e8:	7b2a      	ldrb	r2, [r5, #12]
 800b0ea:	8969      	ldrh	r1, [r5, #10]
 800b0ec:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 800b0f0:	4643      	mov	r3, r8
 800b0f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b0f6:	47b0      	blx	r6
 800b0f8:	e7f0      	b.n	800b0dc <icoEmcyConsumerHandler+0x20>
 800b0fa:	bf00      	nop
 800b0fc:	200084bd 	.word	0x200084bd
 800b100:	200084bc 	.word	0x200084bc
 800b104:	200084b8 	.word	0x200084b8

0800b108 <icoEmcyGetObjectAddr>:
 800b108:	f241 0315 	movw	r3, #4117	; 0x1015
 800b10c:	4298      	cmp	r0, r3
 800b10e:	d00b      	beq.n	800b128 <icoEmcyGetObjectAddr+0x20>
 800b110:	f241 0328 	movw	r3, #4136	; 0x1028
 800b114:	4298      	cmp	r0, r3
 800b116:	d009      	beq.n	800b12c <icoEmcyGetObjectAddr+0x24>
 800b118:	4907      	ldr	r1, [pc, #28]	; (800b138 <icoEmcyGetObjectAddr+0x30>)
 800b11a:	f241 0314 	movw	r3, #4116	; 0x1014
 800b11e:	4298      	cmp	r0, r3
 800b120:	bf0c      	ite	eq
 800b122:	4608      	moveq	r0, r1
 800b124:	2000      	movne	r0, #0
 800b126:	4770      	bx	lr
 800b128:	4804      	ldr	r0, [pc, #16]	; (800b13c <icoEmcyGetObjectAddr+0x34>)
 800b12a:	4770      	bx	lr
 800b12c:	4804      	ldr	r0, [pc, #16]	; (800b140 <icoEmcyGetObjectAddr+0x38>)
 800b12e:	3901      	subs	r1, #1
 800b130:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	2000849c 	.word	0x2000849c
 800b13c:	200084c6 	.word	0x200084c6
 800b140:	200084a0 	.word	0x200084a0

0800b144 <icoEmcyCheckObjLimitCobid>:
 800b144:	b508      	push	{r3, lr}
 800b146:	4613      	mov	r3, r2
 800b148:	f241 0214 	movw	r2, #4116	; 0x1014
 800b14c:	4290      	cmp	r0, r2
 800b14e:	d112      	bne.n	800b176 <icoEmcyCheckObjLimitCobid+0x32>
 800b150:	4a0e      	ldr	r2, [pc, #56]	; (800b18c <icoEmcyCheckObjLimitCobid+0x48>)
 800b152:	6812      	ldr	r2, [r2, #0]
 800b154:	429a      	cmp	r2, r3
 800b156:	d00c      	beq.n	800b172 <icoEmcyCheckObjLimitCobid+0x2e>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	db03      	blt.n	800b164 <icoEmcyCheckObjLimitCobid+0x20>
 800b15c:	2a00      	cmp	r2, #0
 800b15e:	db01      	blt.n	800b164 <icoEmcyCheckObjLimitCobid+0x20>
 800b160:	2020      	movs	r0, #32
 800b162:	bd08      	pop	{r3, pc}
 800b164:	2281      	movs	r2, #129	; 0x81
 800b166:	4611      	mov	r1, r2
 800b168:	4618      	mov	r0, r3
 800b16a:	f004 ff0b 	bl	800ff84 <icoCheckRestrictedCobs>
 800b16e:	2801      	cmp	r0, #1
 800b170:	d0f6      	beq.n	800b160 <icoEmcyCheckObjLimitCobid+0x1c>
 800b172:	2000      	movs	r0, #0
 800b174:	e7f5      	b.n	800b162 <icoEmcyCheckObjLimitCobid+0x1e>
 800b176:	f241 0228 	movw	r2, #4136	; 0x1028
 800b17a:	4290      	cmp	r0, r2
 800b17c:	d1f9      	bne.n	800b172 <icoEmcyCheckObjLimitCobid+0x2e>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dbf7      	blt.n	800b172 <icoEmcyCheckObjLimitCobid+0x2e>
 800b182:	3901      	subs	r1, #1
 800b184:	4a02      	ldr	r2, [pc, #8]	; (800b190 <icoEmcyCheckObjLimitCobid+0x4c>)
 800b186:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
 800b18a:	e7e7      	b.n	800b15c <icoEmcyCheckObjLimitCobid+0x18>
 800b18c:	2000849c 	.word	0x2000849c
 800b190:	200084a0 	.word	0x200084a0

0800b194 <icoEmcyObjChanged>:
 800b194:	f241 0315 	movw	r3, #4117	; 0x1015
 800b198:	4298      	cmp	r0, r3
 800b19a:	b510      	push	{r4, lr}
 800b19c:	d011      	beq.n	800b1c2 <icoEmcyObjChanged+0x2e>
 800b19e:	f241 0328 	movw	r3, #4136	; 0x1028
 800b1a2:	4298      	cmp	r0, r3
 800b1a4:	d015      	beq.n	800b1d2 <icoEmcyObjChanged+0x3e>
 800b1a6:	f241 0314 	movw	r3, #4116	; 0x1014
 800b1aa:	4298      	cmp	r0, r3
 800b1ac:	d11d      	bne.n	800b1ea <icoEmcyObjChanged+0x56>
 800b1ae:	4910      	ldr	r1, [pc, #64]	; (800b1f0 <icoEmcyObjChanged+0x5c>)
 800b1b0:	4810      	ldr	r0, [pc, #64]	; (800b1f4 <icoEmcyObjChanged+0x60>)
 800b1b2:	6809      	ldr	r1, [r1, #0]
 800b1b4:	8800      	ldrh	r0, [r0, #0]
 800b1b6:	2308      	movs	r3, #8
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1be:	f004 be15 	b.w	800fdec <icoCobSet>
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	; (800b1f8 <icoEmcyObjChanged+0x64>)
 800b1c4:	8819      	ldrh	r1, [r3, #0]
 800b1c6:	4b0b      	ldr	r3, [pc, #44]	; (800b1f4 <icoEmcyObjChanged+0x60>)
 800b1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1cc:	8818      	ldrh	r0, [r3, #0]
 800b1ce:	f004 be67 	b.w	800fea0 <icoCobSetInhibit>
 800b1d2:	480a      	ldr	r0, [pc, #40]	; (800b1fc <icoEmcyObjChanged+0x68>)
 800b1d4:	3901      	subs	r1, #1
 800b1d6:	b289      	uxth	r1, r1
 800b1d8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800b1dc:	2308      	movs	r3, #8
 800b1de:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800b1e2:	88a0      	ldrh	r0, [r4, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f004 fe01 	bl	800fdec <icoCobSet>
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	bd10      	pop	{r4, pc}
 800b1ee:	bf00      	nop
 800b1f0:	2000849c 	.word	0x2000849c
 800b1f4:	2000849a 	.word	0x2000849a
 800b1f8:	200084c6 	.word	0x200084c6
 800b1fc:	200084a0 	.word	0x200084a0

0800b200 <icoEmcyCheckObjLimitHist>:
 800b200:	f241 0301 	movw	r3, #4097	; 0x1001
 800b204:	4298      	cmp	r0, r3
 800b206:	d005      	beq.n	800b214 <icoEmcyCheckObjLimitHist+0x14>
 800b208:	b931      	cbnz	r1, 800b218 <icoEmcyCheckObjLimitHist+0x18>
 800b20a:	2a00      	cmp	r2, #0
 800b20c:	bf0c      	ite	eq
 800b20e:	2000      	moveq	r0, #0
 800b210:	2020      	movne	r0, #32
 800b212:	4770      	bx	lr
 800b214:	2000      	movs	r0, #0
 800b216:	4770      	bx	lr
 800b218:	2020      	movs	r0, #32
 800b21a:	4770      	bx	lr

0800b21c <icoEmcyReset>:
 800b21c:	4903      	ldr	r1, [pc, #12]	; (800b22c <icoEmcyReset+0x10>)
 800b21e:	4804      	ldr	r0, [pc, #16]	; (800b230 <icoEmcyReset+0x14>)
 800b220:	6809      	ldr	r1, [r1, #0]
 800b222:	8800      	ldrh	r0, [r0, #0]
 800b224:	2308      	movs	r3, #8
 800b226:	2200      	movs	r2, #0
 800b228:	f004 bde0 	b.w	800fdec <icoCobSet>
 800b22c:	2000849c 	.word	0x2000849c
 800b230:	2000849a 	.word	0x2000849a

0800b234 <icoEmcyProducerSetDefaultValue>:
 800b234:	b513      	push	{r0, r1, r4, lr}
 800b236:	f001 f8c3 	bl	800c3c0 <coNmtGetNodeId>
 800b23a:	4c11      	ldr	r4, [pc, #68]	; (800b280 <icoEmcyProducerSetDefaultValue+0x4c>)
 800b23c:	3080      	adds	r0, #128	; 0x80
 800b23e:	6020      	str	r0, [r4, #0]
 800b240:	aa01      	add	r2, sp, #4
 800b242:	2100      	movs	r1, #0
 800b244:	f241 0014 	movw	r0, #4116	; 0x1014
 800b248:	f001 fe3e 	bl	800cec8 <coOdGetDefaultVal_u32>
 800b24c:	b930      	cbnz	r0, 800b25c <icoEmcyProducerSetDefaultValue+0x28>
 800b24e:	9b01      	ldr	r3, [sp, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	bfbe      	ittt	lt
 800b254:	6823      	ldrlt	r3, [r4, #0]
 800b256:	f043 4300 	orrlt.w	r3, r3, #2147483648	; 0x80000000
 800b25a:	6023      	strlt	r3, [r4, #0]
 800b25c:	f10d 0202 	add.w	r2, sp, #2
 800b260:	2100      	movs	r1, #0
 800b262:	f241 0015 	movw	r0, #4117	; 0x1015
 800b266:	f001 fe05 	bl	800ce74 <coOdGetDefaultVal_u16>
 800b26a:	b938      	cbnz	r0, 800b27c <icoEmcyProducerSetDefaultValue+0x48>
 800b26c:	4b05      	ldr	r3, [pc, #20]	; (800b284 <icoEmcyProducerSetDefaultValue+0x50>)
 800b26e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800b272:	8019      	strh	r1, [r3, #0]
 800b274:	4b04      	ldr	r3, [pc, #16]	; (800b288 <icoEmcyProducerSetDefaultValue+0x54>)
 800b276:	8818      	ldrh	r0, [r3, #0]
 800b278:	f004 fe12 	bl	800fea0 <icoCobSetInhibit>
 800b27c:	b002      	add	sp, #8
 800b27e:	bd10      	pop	{r4, pc}
 800b280:	2000849c 	.word	0x2000849c
 800b284:	200084c6 	.word	0x200084c6
 800b288:	2000849a 	.word	0x2000849a

0800b28c <coEmcyProducerInit>:
 800b28c:	2200      	movs	r2, #0
 800b28e:	b508      	push	{r3, lr}
 800b290:	2108      	movs	r1, #8
 800b292:	4610      	mov	r0, r2
 800b294:	f004 fd7e 	bl	800fd94 <icoCobCreate>
 800b298:	4b04      	ldr	r3, [pc, #16]	; (800b2ac <coEmcyProducerInit+0x20>)
 800b29a:	8018      	strh	r0, [r3, #0]
 800b29c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2a0:	4298      	cmp	r0, r3
 800b2a2:	bf0c      	ite	eq
 800b2a4:	2032      	moveq	r0, #50	; 0x32
 800b2a6:	2000      	movne	r0, #0
 800b2a8:	bd08      	pop	{r3, pc}
 800b2aa:	bf00      	nop
 800b2ac:	2000849a 	.word	0x2000849a

0800b2b0 <icoEmcyVarInit>:
 800b2b0:	4a09      	ldr	r2, [pc, #36]	; (800b2d8 <icoEmcyVarInit+0x28>)
 800b2b2:	490a      	ldr	r1, [pc, #40]	; (800b2dc <icoEmcyVarInit+0x2c>)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2bc:	800a      	strh	r2, [r1, #0]
 800b2be:	4908      	ldr	r1, [pc, #32]	; (800b2e0 <icoEmcyVarInit+0x30>)
 800b2c0:	800b      	strh	r3, [r1, #0]
 800b2c2:	4908      	ldr	r1, [pc, #32]	; (800b2e4 <icoEmcyVarInit+0x34>)
 800b2c4:	700b      	strb	r3, [r1, #0]
 800b2c6:	4908      	ldr	r1, [pc, #32]	; (800b2e8 <icoEmcyVarInit+0x38>)
 800b2c8:	700b      	strb	r3, [r1, #0]
 800b2ca:	4908      	ldr	r1, [pc, #32]	; (800b2ec <icoEmcyVarInit+0x3c>)
 800b2cc:	808a      	strh	r2, [r1, #4]
 800b2ce:	818a      	strh	r2, [r1, #12]
 800b2d0:	828a      	strh	r2, [r1, #20]
 800b2d2:	4a07      	ldr	r2, [pc, #28]	; (800b2f0 <icoEmcyVarInit+0x40>)
 800b2d4:	7013      	strb	r3, [r2, #0]
 800b2d6:	4770      	bx	lr
 800b2d8:	2000849c 	.word	0x2000849c
 800b2dc:	2000849a 	.word	0x2000849a
 800b2e0:	200084c6 	.word	0x200084c6
 800b2e4:	200084c4 	.word	0x200084c4
 800b2e8:	200084bd 	.word	0x200084bd
 800b2ec:	200084a0 	.word	0x200084a0
 800b2f0:	200084bc 	.word	0x200084bc

0800b2f4 <icoEmcyConsumerReset>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	4d0a      	ldr	r5, [pc, #40]	; (800b320 <icoEmcyConsumerReset+0x2c>)
 800b2f8:	4c0a      	ldr	r4, [pc, #40]	; (800b324 <icoEmcyConsumerReset+0x30>)
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	782b      	ldrb	r3, [r5, #0]
 800b2fe:	1c4e      	adds	r6, r1, #1
 800b300:	b2c9      	uxtb	r1, r1
 800b302:	428b      	cmp	r3, r1
 800b304:	d800      	bhi.n	800b308 <icoEmcyConsumerReset+0x14>
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 800b30c:	2308      	movs	r3, #8
 800b30e:	f854 1031 	ldr.w	r1, [r4, r1, lsl #3]
 800b312:	8880      	ldrh	r0, [r0, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f004 fd69 	bl	800fdec <icoCobSet>
 800b31a:	4631      	mov	r1, r6
 800b31c:	e7ee      	b.n	800b2fc <icoEmcyConsumerReset+0x8>
 800b31e:	bf00      	nop
 800b320:	200084bd 	.word	0x200084bd
 800b324:	200084a0 	.word	0x200084a0

0800b328 <icoEmcyConsumerSetDefaultValue>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	4f0c      	ldr	r7, [pc, #48]	; (800b35c <icoEmcyConsumerSetDefaultValue+0x34>)
 800b32c:	4e0c      	ldr	r6, [pc, #48]	; (800b360 <icoEmcyConsumerSetDefaultValue+0x38>)
 800b32e:	2400      	movs	r4, #0
 800b330:	783b      	ldrb	r3, [r7, #0]
 800b332:	42a3      	cmp	r3, r4
 800b334:	d800      	bhi.n	800b338 <icoEmcyConsumerSetDefaultValue+0x10>
 800b336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b338:	1c65      	adds	r5, r4, #1
 800b33a:	b2ed      	uxtb	r5, r5
 800b33c:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 800b340:	4629      	mov	r1, r5
 800b342:	f241 0028 	movw	r0, #4136	; 0x1028
 800b346:	f001 fdbf 	bl	800cec8 <coOdGetDefaultVal_u32>
 800b34a:	b128      	cbz	r0, 800b358 <icoEmcyConsumerSetDefaultValue+0x30>
 800b34c:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800b350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b354:	f846 3034 	str.w	r3, [r6, r4, lsl #3]
 800b358:	462c      	mov	r4, r5
 800b35a:	e7e9      	b.n	800b330 <icoEmcyConsumerSetDefaultValue+0x8>
 800b35c:	200084bd 	.word	0x200084bd
 800b360:	200084a0 	.word	0x200084a0

0800b364 <setupHbConsumer>:
 800b364:	4b19      	ldr	r3, [pc, #100]	; (800b3cc <setupHbConsumer+0x68>)
 800b366:	b570      	push	{r4, r5, r6, lr}
 800b368:	2428      	movs	r4, #40	; 0x28
 800b36a:	fb04 3400 	mla	r4, r4, r0, r3
 800b36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b372:	8b21      	ldrh	r1, [r4, #24]
 800b374:	4291      	cmp	r1, r2
 800b376:	4605      	mov	r5, r0
 800b378:	461e      	mov	r6, r3
 800b37a:	d024      	beq.n	800b3c6 <setupHbConsumer+0x62>
 800b37c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b380:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b384:	f004 fbf2 	bl	800fb6c <coTimerStop>
 800b388:	6a23      	ldr	r3, [r4, #32]
 800b38a:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800b38e:	b29b      	uxth	r3, r3
 800b390:	7721      	strb	r1, [r4, #28]
 800b392:	8363      	strh	r3, [r4, #26]
 800b394:	b101      	cbz	r1, 800b398 <setupHbConsumer+0x34>
 800b396:	b95b      	cbnz	r3, 800b3b0 <setupHbConsumer+0x4c>
 800b398:	2328      	movs	r3, #40	; 0x28
 800b39a:	fb03 6505 	mla	r5, r3, r5, r6
 800b39e:	2200      	movs	r2, #0
 800b3a0:	8b28      	ldrh	r0, [r5, #24]
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b3a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3ac:	f004 bd1e 	b.w	800fdec <icoCobSet>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 800b3b8:	8b20      	ldrh	r0, [r4, #24]
 800b3ba:	f004 fd17 	bl	800fdec <icoCobSet>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800b3c4:	bd70      	pop	{r4, r5, r6, pc}
 800b3c6:	200c      	movs	r0, #12
 800b3c8:	e7fc      	b.n	800b3c4 <setupHbConsumer+0x60>
 800b3ca:	bf00      	nop
 800b3cc:	200084d4 	.word	0x200084d4

0800b3d0 <hbProdSendMessage>:
 800b3d0:	b507      	push	{r0, r1, r2, lr}
 800b3d2:	f000 fffb 	bl	800c3cc <coNmtGetState>
 800b3d6:	a902      	add	r1, sp, #8
 800b3d8:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <hbProdSendMessage+0x1c>)
 800b3da:	f801 0d08 	strb.w	r0, [r1, #-8]!
 800b3de:	2200      	movs	r2, #0
 800b3e0:	8818      	ldrh	r0, [r3, #0]
 800b3e2:	f003 fb41 	bl	800ea68 <icoTransmitMessage>
 800b3e6:	b003      	add	sp, #12
 800b3e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3ec:	200084c8 	.word	0x200084c8

0800b3f0 <icoHbProdStart>:
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <icoHbProdStart+0x38>)
 800b3f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3f4:	881c      	ldrh	r4, [r3, #0]
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	b92c      	cbnz	r4, 800b406 <icoHbProdStart+0x16>
 800b3fa:	480c      	ldr	r0, [pc, #48]	; (800b42c <icoHbProdStart+0x3c>)
 800b3fc:	f004 fbb6 	bl	800fb6c <coTimerStop>
 800b400:	4620      	mov	r0, r4
 800b402:	b003      	add	sp, #12
 800b404:	bd30      	pop	{r4, r5, pc}
 800b406:	2301      	movs	r3, #1
 800b408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b40c:	9300      	str	r3, [sp, #0]
 800b40e:	4361      	muls	r1, r4
 800b410:	2300      	movs	r3, #0
 800b412:	4a07      	ldr	r2, [pc, #28]	; (800b430 <icoHbProdStart+0x40>)
 800b414:	4805      	ldr	r0, [pc, #20]	; (800b42c <icoHbProdStart+0x3c>)
 800b416:	f004 fbbf 	bl	800fb98 <coTimerStart>
 800b41a:	2d01      	cmp	r5, #1
 800b41c:	4604      	mov	r4, r0
 800b41e:	d1ef      	bne.n	800b400 <icoHbProdStart+0x10>
 800b420:	2000      	movs	r0, #0
 800b422:	f7ff ffd5 	bl	800b3d0 <hbProdSendMessage>
 800b426:	e7eb      	b.n	800b400 <icoHbProdStart+0x10>
 800b428:	2000854c 	.word	0x2000854c
 800b42c:	20008550 	.word	0x20008550
 800b430:	0800b3d1 	.word	0x0800b3d1

0800b434 <icoErrorBehavior>:
 800b434:	b508      	push	{r3, lr}
 800b436:	f000 ffc9 	bl	800c3cc <coNmtGetState>
 800b43a:	2805      	cmp	r0, #5
 800b43c:	d10c      	bne.n	800b458 <icoErrorBehavior+0x24>
 800b43e:	4b07      	ldr	r3, [pc, #28]	; (800b45c <icoErrorBehavior+0x28>)
 800b440:	7819      	ldrb	r1, [r3, #0]
 800b442:	b921      	cbnz	r1, 800b44e <icoErrorBehavior+0x1a>
 800b444:	207f      	movs	r0, #127	; 0x7f
 800b446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b44a:	f000 becf 	b.w	800c1ec <icoNmtStateChange>
 800b44e:	2902      	cmp	r1, #2
 800b450:	d102      	bne.n	800b458 <icoErrorBehavior+0x24>
 800b452:	2100      	movs	r1, #0
 800b454:	2004      	movs	r0, #4
 800b456:	e7f6      	b.n	800b446 <icoErrorBehavior+0x12>
 800b458:	bd08      	pop	{r3, pc}
 800b45a:	bf00      	nop
 800b45c:	200084d1 	.word	0x200084d1

0800b460 <icoErrCtrlGetObjectAddr>:
 800b460:	f241 0317 	movw	r3, #4119	; 0x1017
 800b464:	4298      	cmp	r0, r3
 800b466:	d012      	beq.n	800b48e <icoErrCtrlGetObjectAddr+0x2e>
 800b468:	f241 0329 	movw	r3, #4137	; 0x1029
 800b46c:	4298      	cmp	r0, r3
 800b46e:	d00a      	beq.n	800b486 <icoErrCtrlGetObjectAddr+0x26>
 800b470:	f241 0316 	movw	r3, #4118	; 0x1016
 800b474:	4298      	cmp	r0, r3
 800b476:	d108      	bne.n	800b48a <icoErrCtrlGetObjectAddr+0x2a>
 800b478:	1e48      	subs	r0, r1, #1
 800b47a:	4906      	ldr	r1, [pc, #24]	; (800b494 <icoErrCtrlGetObjectAddr+0x34>)
 800b47c:	2328      	movs	r3, #40	; 0x28
 800b47e:	fb03 1000 	mla	r0, r3, r0, r1
 800b482:	3020      	adds	r0, #32
 800b484:	4770      	bx	lr
 800b486:	4804      	ldr	r0, [pc, #16]	; (800b498 <icoErrCtrlGetObjectAddr+0x38>)
 800b488:	4770      	bx	lr
 800b48a:	2000      	movs	r0, #0
 800b48c:	4770      	bx	lr
 800b48e:	4803      	ldr	r0, [pc, #12]	; (800b49c <icoErrCtrlGetObjectAddr+0x3c>)
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	200084d4 	.word	0x200084d4
 800b498:	200084d1 	.word	0x200084d1
 800b49c:	2000854c 	.word	0x2000854c

0800b4a0 <icoErrCtrlCheckObjLimit>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	f3c1 4406 	ubfx	r4, r1, #16, #7
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	b1ac      	cbz	r4, 800b4d6 <icoErrCtrlCheckObjLimit+0x36>
 800b4aa:	b289      	uxth	r1, r1
 800b4ac:	b199      	cbz	r1, 800b4d6 <icoErrCtrlCheckObjLimit+0x36>
 800b4ae:	f000 ff87 	bl	800c3c0 <coNmtGetNodeId>
 800b4b2:	42a0      	cmp	r0, r4
 800b4b4:	d011      	beq.n	800b4da <icoErrCtrlCheckObjLimit+0x3a>
 800b4b6:	490a      	ldr	r1, [pc, #40]	; (800b4e0 <icoErrCtrlCheckObjLimit+0x40>)
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	3d01      	subs	r5, #1
 800b4bc:	2028      	movs	r0, #40	; 0x28
 800b4be:	429d      	cmp	r5, r3
 800b4c0:	d006      	beq.n	800b4d0 <icoErrCtrlCheckObjLimit+0x30>
 800b4c2:	fb00 1203 	mla	r2, r0, r3, r1
 800b4c6:	7f16      	ldrb	r6, [r2, #28]
 800b4c8:	42a6      	cmp	r6, r4
 800b4ca:	d101      	bne.n	800b4d0 <icoErrCtrlCheckObjLimit+0x30>
 800b4cc:	8b52      	ldrh	r2, [r2, #26]
 800b4ce:	b922      	cbnz	r2, 800b4da <icoErrCtrlCheckObjLimit+0x3a>
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d1f3      	bne.n	800b4be <icoErrCtrlCheckObjLimit+0x1e>
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	bd70      	pop	{r4, r5, r6, pc}
 800b4da:	200b      	movs	r0, #11
 800b4dc:	e7fc      	b.n	800b4d8 <icoErrCtrlCheckObjLimit+0x38>
 800b4de:	bf00      	nop
 800b4e0:	200084d4 	.word	0x200084d4

0800b4e4 <icoErrCtrlObjChanged>:
 800b4e4:	f241 0316 	movw	r3, #4118	; 0x1016
 800b4e8:	4298      	cmp	r0, r3
 800b4ea:	d005      	beq.n	800b4f8 <icoErrCtrlObjChanged+0x14>
 800b4ec:	f241 0317 	movw	r3, #4119	; 0x1017
 800b4f0:	4298      	cmp	r0, r3
 800b4f2:	d005      	beq.n	800b500 <icoErrCtrlObjChanged+0x1c>
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	4770      	bx	lr
 800b4f8:	1e48      	subs	r0, r1, #1
 800b4fa:	b2c0      	uxtb	r0, r0
 800b4fc:	f7ff bf32 	b.w	800b364 <setupHbConsumer>
 800b500:	2001      	movs	r0, #1
 800b502:	f7ff bf75 	b.w	800b3f0 <icoHbProdStart>
	...

0800b508 <coEventRegister_ERRCTRL>:
 800b508:	4a05      	ldr	r2, [pc, #20]	; (800b520 <coEventRegister_ERRCTRL+0x18>)
 800b50a:	7813      	ldrb	r3, [r2, #0]
 800b50c:	b92b      	cbnz	r3, 800b51a <coEventRegister_ERRCTRL+0x12>
 800b50e:	4905      	ldr	r1, [pc, #20]	; (800b524 <coEventRegister_ERRCTRL+0x1c>)
 800b510:	6008      	str	r0, [r1, #0]
 800b512:	2101      	movs	r1, #1
 800b514:	7011      	strb	r1, [r2, #0]
 800b516:	4618      	mov	r0, r3
 800b518:	4770      	bx	lr
 800b51a:	200d      	movs	r0, #13
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	200084d0 	.word	0x200084d0
 800b524:	200084cc 	.word	0x200084cc

0800b528 <icoErrCtrlInd>:
 800b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52c:	4b09      	ldr	r3, [pc, #36]	; (800b554 <icoErrCtrlInd+0x2c>)
 800b52e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800b558 <icoErrCtrlInd+0x30>
 800b532:	781c      	ldrb	r4, [r3, #0]
 800b534:	4605      	mov	r5, r0
 800b536:	460e      	mov	r6, r1
 800b538:	4617      	mov	r7, r2
 800b53a:	b90c      	cbnz	r4, 800b540 <icoErrCtrlInd+0x18>
 800b53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b540:	3c01      	subs	r4, #1
 800b542:	b2e4      	uxtb	r4, r4
 800b544:	463a      	mov	r2, r7
 800b546:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b54a:	4631      	mov	r1, r6
 800b54c:	4628      	mov	r0, r5
 800b54e:	4798      	blx	r3
 800b550:	e7f3      	b.n	800b53a <icoErrCtrlInd+0x12>
 800b552:	bf00      	nop
 800b554:	200084d0 	.word	0x200084d0
 800b558:	200084cc 	.word	0x200084cc

0800b55c <hbConsFailure>:
 800b55c:	b507      	push	{r0, r1, r2, lr}
 800b55e:	2200      	movs	r2, #0
 800b560:	2103      	movs	r1, #3
 800b562:	7f00      	ldrb	r0, [r0, #28]
 800b564:	f7ff ffe0 	bl	800b528 <icoErrCtrlInd>
 800b568:	2300      	movs	r3, #0
 800b56a:	4669      	mov	r1, sp
 800b56c:	f248 1030 	movw	r0, #33072	; 0x8130
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	f88d 3004 	strb.w	r3, [sp, #4]
 800b576:	f7ff fd85 	bl	800b084 <icoEmcyWriteReq>
 800b57a:	2101      	movs	r1, #1
 800b57c:	2003      	movs	r0, #3
 800b57e:	f000 fa61 	bl	800ba44 <coLedSetState>
 800b582:	f7ff ff57 	bl	800b434 <icoErrorBehavior>
 800b586:	b003      	add	sp, #12
 800b588:	f85d fb04 	ldr.w	pc, [sp], #4

0800b58c <icoNmtErrorCtrlHandler>:
 800b58c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b590:	4604      	mov	r4, r0
 800b592:	f000 ff15 	bl	800c3c0 <coNmtGetNodeId>
 800b596:	7a22      	ldrb	r2, [r4, #8]
 800b598:	f012 0208 	ands.w	r2, r2, #8
 800b59c:	d00a      	beq.n	800b5b4 <icoNmtErrorCtrlHandler+0x28>
 800b59e:	6863      	ldr	r3, [r4, #4]
 800b5a0:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
 800b5a4:	4283      	cmp	r3, r0
 800b5a6:	d167      	bne.n	800b678 <icoNmtErrorCtrlHandler+0xec>
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	b002      	add	sp, #8
 800b5ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b0:	f7ff bf0e 	b.w	800b3d0 <hbProdSendMessage>
 800b5b4:	7a63      	ldrb	r3, [r4, #9]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d15e      	bne.n	800b678 <icoNmtErrorCtrlHandler+0xec>
 800b5ba:	6865      	ldr	r5, [r4, #4]
 800b5bc:	f500 63e0 	add.w	r3, r0, #1792	; 0x700
 800b5c0:	429d      	cmp	r5, r3
 800b5c2:	d107      	bne.n	800b5d4 <icoNmtErrorCtrlHandler+0x48>
 800b5c4:	2108      	movs	r1, #8
 800b5c6:	f005 007f 	and.w	r0, r5, #127	; 0x7f
 800b5ca:	b002      	add	sp, #8
 800b5cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d0:	f7ff bfaa 	b.w	800b528 <icoErrCtrlInd>
 800b5d4:	7823      	ldrb	r3, [r4, #0]
 800b5d6:	7aa1      	ldrb	r1, [r4, #10]
 800b5d8:	2b03      	cmp	r3, #3
 800b5da:	d137      	bne.n	800b64c <icoNmtErrorCtrlHandler+0xc0>
 800b5dc:	8865      	ldrh	r5, [r4, #2]
 800b5de:	4f28      	ldr	r7, [pc, #160]	; (800b680 <icoNmtErrorCtrlHandler+0xf4>)
 800b5e0:	2328      	movs	r3, #40	; 0x28
 800b5e2:	fb03 7305 	mla	r3, r3, r5, r7
 800b5e6:	2904      	cmp	r1, #4
 800b5e8:	f893 6024 	ldrb.w	r6, [r3, #36]	; 0x24
 800b5ec:	d00c      	beq.n	800b608 <icoNmtErrorCtrlHandler+0x7c>
 800b5ee:	d807      	bhi.n	800b600 <icoNmtErrorCtrlHandler+0x74>
 800b5f0:	b389      	cbz	r1, 800b656 <icoNmtErrorCtrlHandler+0xca>
 800b5f2:	2328      	movs	r3, #40	; 0x28
 800b5f4:	fb03 7305 	mla	r3, r3, r5, r7
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b5fe:	e031      	b.n	800b664 <icoNmtErrorCtrlHandler+0xd8>
 800b600:	2905      	cmp	r1, #5
 800b602:	d001      	beq.n	800b608 <icoNmtErrorCtrlHandler+0x7c>
 800b604:	297f      	cmp	r1, #127	; 0x7f
 800b606:	d1f4      	bne.n	800b5f2 <icoNmtErrorCtrlHandler+0x66>
 800b608:	2428      	movs	r4, #40	; 0x28
 800b60a:	fb04 7405 	mla	r4, r4, r5, r7
 800b60e:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
 800b612:	4620      	mov	r0, r4
 800b614:	f004 faea 	bl	800fbec <coTimerIsActive>
 800b618:	8b61      	ldrh	r1, [r4, #26]
 800b61a:	4a1a      	ldr	r2, [pc, #104]	; (800b684 <icoNmtErrorCtrlHandler+0xf8>)
 800b61c:	4680      	mov	r8, r0
 800b61e:	2300      	movs	r3, #0
 800b620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	4341      	muls	r1, r0
 800b628:	4623      	mov	r3, r4
 800b62a:	4620      	mov	r0, r4
 800b62c:	f004 fab4 	bl	800fb98 <coTimerStart>
 800b630:	f1b8 0f00 	cmp.w	r8, #0
 800b634:	d116      	bne.n	800b664 <icoNmtErrorCtrlHandler+0xd8>
 800b636:	7f20      	ldrb	r0, [r4, #28]
 800b638:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800b63c:	2102      	movs	r1, #2
 800b63e:	f7ff ff73 	bl	800b528 <icoErrCtrlInd>
 800b642:	4641      	mov	r1, r8
 800b644:	2003      	movs	r0, #3
 800b646:	f000 f9fd 	bl	800ba44 <coLedSetState>
 800b64a:	e00b      	b.n	800b664 <icoNmtErrorCtrlHandler+0xd8>
 800b64c:	b9a1      	cbnz	r1, 800b678 <icoNmtErrorCtrlHandler+0xec>
 800b64e:	227f      	movs	r2, #127	; 0x7f
 800b650:	ea05 0002 	and.w	r0, r5, r2
 800b654:	e7b9      	b.n	800b5ca <icoNmtErrorCtrlHandler+0x3e>
 800b656:	267f      	movs	r6, #127	; 0x7f
 800b658:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
 800b65c:	4632      	mov	r2, r6
 800b65e:	7f18      	ldrb	r0, [r3, #28]
 800b660:	f7ff ff62 	bl	800b528 <icoErrCtrlInd>
 800b664:	2328      	movs	r3, #40	; 0x28
 800b666:	fb03 7505 	mla	r5, r3, r5, r7
 800b66a:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800b66e:	42b2      	cmp	r2, r6
 800b670:	d002      	beq.n	800b678 <icoNmtErrorCtrlHandler+0xec>
 800b672:	2101      	movs	r1, #1
 800b674:	7f28      	ldrb	r0, [r5, #28]
 800b676:	e7a8      	b.n	800b5ca <icoNmtErrorCtrlHandler+0x3e>
 800b678:	b002      	add	sp, #8
 800b67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67e:	bf00      	nop
 800b680:	200084d4 	.word	0x200084d4
 800b684:	0800b55d 	.word	0x0800b55d

0800b688 <icoErrorCtrlReset>:
 800b688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b68a:	f000 fe99 	bl	800c3c0 <coNmtGetNodeId>
 800b68e:	4d11      	ldr	r5, [pc, #68]	; (800b6d4 <icoErrorCtrlReset+0x4c>)
 800b690:	2301      	movs	r3, #1
 800b692:	461a      	mov	r2, r3
 800b694:	f500 61e0 	add.w	r1, r0, #1792	; 0x700
 800b698:	4604      	mov	r4, r0
 800b69a:	8828      	ldrh	r0, [r5, #0]
 800b69c:	f004 fba6 	bl	800fdec <icoCobSet>
 800b6a0:	a902      	add	r1, sp, #8
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f801 3d08 	strb.w	r3, [r1, #-8]!
 800b6a8:	2204      	movs	r2, #4
 800b6aa:	8828      	ldrh	r0, [r5, #0]
 800b6ac:	f003 f9dc 	bl	800ea68 <icoTransmitMessage>
 800b6b0:	b120      	cbz	r0, 800b6bc <icoErrorCtrlReset+0x34>
 800b6b2:	227f      	movs	r2, #127	; 0x7f
 800b6b4:	2107      	movs	r1, #7
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f7ff ff36 	bl	800b528 <icoErrCtrlInd>
 800b6bc:	2000      	movs	r0, #0
 800b6be:	f7ff fe51 	bl	800b364 <setupHbConsumer>
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	f7ff fe4e 	bl	800b364 <setupHbConsumer>
 800b6c8:	2002      	movs	r0, #2
 800b6ca:	f7ff fe4b 	bl	800b364 <setupHbConsumer>
 800b6ce:	b003      	add	sp, #12
 800b6d0:	bd30      	pop	{r4, r5, pc}
 800b6d2:	bf00      	nop
 800b6d4:	200084c8 	.word	0x200084c8

0800b6d8 <icoErrorCtrlSetDefaultValue>:
 800b6d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b6dc:	2100      	movs	r1, #0
 800b6de:	f10d 0202 	add.w	r2, sp, #2
 800b6e2:	f241 0017 	movw	r0, #4119	; 0x1017
 800b6e6:	f001 fbc5 	bl	800ce74 <coOdGetDefaultVal_u16>
 800b6ea:	b918      	cbnz	r0, 800b6f4 <icoErrorCtrlSetDefaultValue+0x1c>
 800b6ec:	4b12      	ldr	r3, [pc, #72]	; (800b738 <icoErrorCtrlSetDefaultValue+0x60>)
 800b6ee:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b6f2:	801a      	strh	r2, [r3, #0]
 800b6f4:	4e11      	ldr	r6, [pc, #68]	; (800b73c <icoErrorCtrlSetDefaultValue+0x64>)
 800b6f6:	2401      	movs	r4, #1
 800b6f8:	2728      	movs	r7, #40	; 0x28
 800b6fa:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800b6fe:	fb07 6504 	mla	r5, r7, r4, r6
 800b702:	b2e1      	uxtb	r1, r4
 800b704:	f835 3c10 	ldrh.w	r3, [r5, #-16]
 800b708:	4543      	cmp	r3, r8
 800b70a:	d008      	beq.n	800b71e <icoErrorCtrlSetDefaultValue+0x46>
 800b70c:	aa01      	add	r2, sp, #4
 800b70e:	f241 0016 	movw	r0, #4118	; 0x1016
 800b712:	f001 fbd9 	bl	800cec8 <coOdGetDefaultVal_u32>
 800b716:	b910      	cbnz	r0, 800b71e <icoErrorCtrlSetDefaultValue+0x46>
 800b718:	9b01      	ldr	r3, [sp, #4]
 800b71a:	f845 3c08 	str.w	r3, [r5, #-8]
 800b71e:	3401      	adds	r4, #1
 800b720:	2c04      	cmp	r4, #4
 800b722:	d1ec      	bne.n	800b6fe <icoErrorCtrlSetDefaultValue+0x26>
 800b724:	4a06      	ldr	r2, [pc, #24]	; (800b740 <icoErrorCtrlSetDefaultValue+0x68>)
 800b726:	2101      	movs	r1, #1
 800b728:	f241 0029 	movw	r0, #4137	; 0x1029
 800b72c:	f001 fb74 	bl	800ce18 <coOdGetDefaultVal_u8>
 800b730:	b002      	add	sp, #8
 800b732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b736:	bf00      	nop
 800b738:	2000854c 	.word	0x2000854c
 800b73c:	200084d4 	.word	0x200084d4
 800b740:	200084d1 	.word	0x200084d1

0800b744 <icoErrorCtrlVarInit>:
 800b744:	4a07      	ldr	r2, [pc, #28]	; (800b764 <icoErrorCtrlVarInit+0x20>)
 800b746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b74a:	8013      	strh	r3, [r2, #0]
 800b74c:	4a06      	ldr	r2, [pc, #24]	; (800b768 <icoErrorCtrlVarInit+0x24>)
 800b74e:	2100      	movs	r1, #0
 800b750:	7011      	strb	r1, [r2, #0]
 800b752:	4a06      	ldr	r2, [pc, #24]	; (800b76c <icoErrorCtrlVarInit+0x28>)
 800b754:	8313      	strh	r3, [r2, #24]
 800b756:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 800b75a:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 800b75e:	4b04      	ldr	r3, [pc, #16]	; (800b770 <icoErrorCtrlVarInit+0x2c>)
 800b760:	7019      	strb	r1, [r3, #0]
 800b762:	4770      	bx	lr
 800b764:	200084c8 	.word	0x200084c8
 800b768:	200084d1 	.word	0x200084d1
 800b76c:	200084d4 	.word	0x200084d4
 800b770:	200084d0 	.word	0x200084d0

0800b774 <coErrorCtrlInit>:
 800b774:	2200      	movs	r2, #0
 800b776:	b570      	push	{r4, r5, r6, lr}
 800b778:	4604      	mov	r4, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	4610      	mov	r0, r2
 800b77e:	2103      	movs	r1, #3
 800b780:	f004 fb08 	bl	800fd94 <icoCobCreate>
 800b784:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <coErrorCtrlInit+0x60>)
 800b786:	8018      	strh	r0, [r3, #0]
 800b788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b78c:	4298      	cmp	r0, r3
 800b78e:	d101      	bne.n	800b794 <coErrorCtrlInit+0x20>
 800b790:	2032      	movs	r0, #50	; 0x32
 800b792:	bd70      	pop	{r4, r5, r6, pc}
 800b794:	4b10      	ldr	r3, [pc, #64]	; (800b7d8 <coErrorCtrlInit+0x64>)
 800b796:	4e11      	ldr	r6, [pc, #68]	; (800b7dc <coErrorCtrlInit+0x68>)
 800b798:	801c      	strh	r4, [r3, #0]
 800b79a:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <coErrorCtrlInit+0x6c>)
 800b79c:	2400      	movs	r4, #0
 800b79e:	701c      	strb	r4, [r3, #0]
 800b7a0:	42ac      	cmp	r4, r5
 800b7a2:	d107      	bne.n	800b7b4 <coErrorCtrlInit+0x40>
 800b7a4:	4a0e      	ldr	r2, [pc, #56]	; (800b7e0 <coErrorCtrlInit+0x6c>)
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	f241 0029 	movw	r0, #4137	; 0x1029
 800b7ac:	f001 fb34 	bl	800ce18 <coOdGetDefaultVal_u8>
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	e7ee      	b.n	800b792 <coErrorCtrlInit+0x1e>
 800b7b4:	b2a2      	uxth	r2, r4
 800b7b6:	2103      	movs	r1, #3
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	f004 faeb 	bl	800fd94 <icoCobCreate>
 800b7be:	2328      	movs	r3, #40	; 0x28
 800b7c0:	fb03 6304 	mla	r3, r3, r4, r6
 800b7c4:	3401      	adds	r4, #1
 800b7c6:	8318      	strh	r0, [r3, #24]
 800b7c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7cc:	4298      	cmp	r0, r3
 800b7ce:	d1e7      	bne.n	800b7a0 <coErrorCtrlInit+0x2c>
 800b7d0:	e7de      	b.n	800b790 <coErrorCtrlInit+0x1c>
 800b7d2:	bf00      	nop
 800b7d4:	200084c8 	.word	0x200084c8
 800b7d8:	2000854c 	.word	0x2000854c
 800b7dc:	200084d4 	.word	0x200084d4
 800b7e0:	200084d1 	.word	0x200084d1

0800b7e4 <icoEventsAvailable>:
 800b7e4:	4b02      	ldr	r3, [pc, #8]	; (800b7f0 <icoEventsAvailable+0xc>)
 800b7e6:	6818      	ldr	r0, [r3, #0]
 800b7e8:	3000      	adds	r0, #0
 800b7ea:	bf18      	it	ne
 800b7ec:	2001      	movne	r0, #1
 800b7ee:	4770      	bx	lr
 800b7f0:	20008568 	.word	0x20008568

0800b7f4 <icoEventCheck>:
 800b7f4:	4907      	ldr	r1, [pc, #28]	; (800b814 <icoEventCheck+0x20>)
 800b7f6:	b538      	push	{r3, r4, r5, lr}
 800b7f8:	2400      	movs	r4, #0
 800b7fa:	680b      	ldr	r3, [r1, #0]
 800b7fc:	600c      	str	r4, [r1, #0]
 800b7fe:	b903      	cbnz	r3, 800b802 <icoEventCheck+0xe>
 800b800:	bd38      	pop	{r3, r4, r5, pc}
 800b802:	685a      	ldr	r2, [r3, #4]
 800b804:	681d      	ldr	r5, [r3, #0]
 800b806:	601c      	str	r4, [r3, #0]
 800b808:	b10a      	cbz	r2, 800b80e <icoEventCheck+0x1a>
 800b80a:	6898      	ldr	r0, [r3, #8]
 800b80c:	4790      	blx	r2
 800b80e:	462b      	mov	r3, r5
 800b810:	e7f5      	b.n	800b7fe <icoEventCheck+0xa>
 800b812:	bf00      	nop
 800b814:	20008568 	.word	0x20008568

0800b818 <icoEventInit>:
 800b818:	4b01      	ldr	r3, [pc, #4]	; (800b820 <icoEventInit+0x8>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	4770      	bx	lr
 800b820:	20008568 	.word	0x20008568

0800b824 <ledRedInd>:
 800b824:	b570      	push	{r4, r5, r6, lr}
 800b826:	4b06      	ldr	r3, [pc, #24]	; (800b840 <ledRedInd+0x1c>)
 800b828:	4e06      	ldr	r6, [pc, #24]	; (800b844 <ledRedInd+0x20>)
 800b82a:	781c      	ldrb	r4, [r3, #0]
 800b82c:	4605      	mov	r5, r0
 800b82e:	b904      	cbnz	r4, 800b832 <ledRedInd+0xe>
 800b830:	bd70      	pop	{r4, r5, r6, pc}
 800b832:	3c01      	subs	r4, #1
 800b834:	b2e4      	uxtb	r4, r4
 800b836:	4628      	mov	r0, r5
 800b838:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800b83c:	4798      	blx	r3
 800b83e:	e7f6      	b.n	800b82e <ledRedInd+0xa>
 800b840:	2000858c 	.word	0x2000858c
 800b844:	20008588 	.word	0x20008588

0800b848 <ledGreenInd>:
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	4b06      	ldr	r3, [pc, #24]	; (800b864 <ledGreenInd+0x1c>)
 800b84c:	4e06      	ldr	r6, [pc, #24]	; (800b868 <ledGreenInd+0x20>)
 800b84e:	781c      	ldrb	r4, [r3, #0]
 800b850:	4605      	mov	r5, r0
 800b852:	b904      	cbnz	r4, 800b856 <ledGreenInd+0xe>
 800b854:	bd70      	pop	{r4, r5, r6, pc}
 800b856:	3c01      	subs	r4, #1
 800b858:	b2e4      	uxtb	r4, r4
 800b85a:	4628      	mov	r0, r5
 800b85c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800b860:	4798      	blx	r3
 800b862:	e7f6      	b.n	800b852 <ledGreenInd+0xa>
 800b864:	2000857c 	.word	0x2000857c
 800b868:	20008578 	.word	0x20008578

0800b86c <ledTimerInd>:
 800b86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b870:	4f23      	ldr	r7, [pc, #140]	; (800b900 <ledTimerInd+0x94>)
 800b872:	4d24      	ldr	r5, [pc, #144]	; (800b904 <ledTimerInd+0x98>)
 800b874:	783a      	ldrb	r2, [r7, #0]
 800b876:	4c24      	ldr	r4, [pc, #144]	; (800b908 <ledTimerInd+0x9c>)
 800b878:	7868      	ldrb	r0, [r5, #1]
 800b87a:	7866      	ldrb	r6, [r4, #1]
 800b87c:	f012 0201 	ands.w	r2, r2, #1
 800b880:	d127      	bne.n	800b8d2 <ledTimerInd+0x66>
 800b882:	782b      	ldrb	r3, [r5, #0]
 800b884:	6861      	ldr	r1, [r4, #4]
 800b886:	2b06      	cmp	r3, #6
 800b888:	78a3      	ldrb	r3, [r4, #2]
 800b88a:	4419      	add	r1, r3
 800b88c:	bf08      	it	eq
 800b88e:	4680      	moveq	r8, r0
 800b890:	7849      	ldrb	r1, [r1, #1]
 800b892:	bf18      	it	ne
 800b894:	f04f 0800 	movne.w	r8, #0
 800b898:	3301      	adds	r3, #1
 800b89a:	2900      	cmp	r1, #0
 800b89c:	78e1      	ldrb	r1, [r4, #3]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	bf18      	it	ne
 800b8a2:	2601      	movne	r6, #1
 800b8a4:	4299      	cmp	r1, r3
 800b8a6:	70a3      	strb	r3, [r4, #2]
 800b8a8:	d100      	bne.n	800b8ac <ledTimerInd+0x40>
 800b8aa:	70a2      	strb	r2, [r4, #2]
 800b8ac:	4580      	cmp	r8, r0
 800b8ae:	d004      	beq.n	800b8ba <ledTimerInd+0x4e>
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	f7ff ffc9 	bl	800b848 <ledGreenInd>
 800b8b6:	f885 8001 	strb.w	r8, [r5, #1]
 800b8ba:	7863      	ldrb	r3, [r4, #1]
 800b8bc:	42b3      	cmp	r3, r6
 800b8be:	d003      	beq.n	800b8c8 <ledTimerInd+0x5c>
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f7ff ffaf 	bl	800b824 <ledRedInd>
 800b8c6:	7066      	strb	r6, [r4, #1]
 800b8c8:	783b      	ldrb	r3, [r7, #0]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	703b      	strb	r3, [r7, #0]
 800b8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d2:	7823      	ldrb	r3, [r4, #0]
 800b8d4:	686a      	ldr	r2, [r5, #4]
 800b8d6:	2b06      	cmp	r3, #6
 800b8d8:	78ab      	ldrb	r3, [r5, #2]
 800b8da:	441a      	add	r2, r3
 800b8dc:	bf18      	it	ne
 800b8de:	2600      	movne	r6, #0
 800b8e0:	7852      	ldrb	r2, [r2, #1]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	2a00      	cmp	r2, #0
 800b8e6:	78ea      	ldrb	r2, [r5, #3]
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	bf0c      	ite	eq
 800b8ec:	4680      	moveq	r8, r0
 800b8ee:	f04f 0801 	movne.w	r8, #1
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	70ab      	strb	r3, [r5, #2]
 800b8f6:	bf04      	itt	eq
 800b8f8:	2300      	moveq	r3, #0
 800b8fa:	70ab      	strbeq	r3, [r5, #2]
 800b8fc:	e7d6      	b.n	800b8ac <ledTimerInd+0x40>
 800b8fe:	bf00      	nop
 800b900:	2000856c 	.word	0x2000856c
 800b904:	20008570 	.word	0x20008570
 800b908:	20008580 	.word	0x20008580

0800b90c <stopLedTimer>:
 800b90c:	b508      	push	{r3, lr}
 800b90e:	4804      	ldr	r0, [pc, #16]	; (800b920 <stopLedTimer+0x14>)
 800b910:	f004 f92c 	bl	800fb6c <coTimerStop>
 800b914:	4a03      	ldr	r2, [pc, #12]	; (800b924 <stopLedTimer+0x18>)
 800b916:	2300      	movs	r3, #0
 800b918:	7013      	strb	r3, [r2, #0]
 800b91a:	4a03      	ldr	r2, [pc, #12]	; (800b928 <stopLedTimer+0x1c>)
 800b91c:	7013      	strb	r3, [r2, #0]
 800b91e:	bd08      	pop	{r3, pc}
 800b920:	20008590 	.word	0x20008590
 800b924:	200085a8 	.word	0x200085a8
 800b928:	2000856c 	.word	0x2000856c

0800b92c <coLedSetGreen.part.0>:
 800b92c:	2801      	cmp	r0, #1
 800b92e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b930:	4604      	mov	r4, r0
 800b932:	4e0b      	ldr	r6, [pc, #44]	; (800b960 <coLedSetGreen.part.0+0x34>)
 800b934:	4d0b      	ldr	r5, [pc, #44]	; (800b964 <coLedSetGreen.part.0+0x38>)
 800b936:	d10c      	bne.n	800b952 <coLedSetGreen.part.0+0x26>
 800b938:	4a0b      	ldr	r2, [pc, #44]	; (800b968 <coLedSetGreen.part.0+0x3c>)
 800b93a:	9000      	str	r0, [sp, #0]
 800b93c:	2300      	movs	r3, #0
 800b93e:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b942:	480a      	ldr	r0, [pc, #40]	; (800b96c <coLedSetGreen.part.0+0x40>)
 800b944:	f004 f928 	bl	800fb98 <coTimerStart>
 800b948:	2300      	movs	r3, #0
 800b94a:	7034      	strb	r4, [r6, #0]
 800b94c:	702b      	strb	r3, [r5, #0]
 800b94e:	b002      	add	sp, #8
 800b950:	bd70      	pop	{r4, r5, r6, pc}
 800b952:	2401      	movs	r4, #1
 800b954:	9400      	str	r4, [sp, #0]
 800b956:	2300      	movs	r3, #0
 800b958:	4a03      	ldr	r2, [pc, #12]	; (800b968 <coLedSetGreen.part.0+0x3c>)
 800b95a:	4905      	ldr	r1, [pc, #20]	; (800b970 <coLedSetGreen.part.0+0x44>)
 800b95c:	e7f1      	b.n	800b942 <coLedSetGreen.part.0+0x16>
 800b95e:	bf00      	nop
 800b960:	200085a8 	.word	0x200085a8
 800b964:	2000856c 	.word	0x2000856c
 800b968:	0800b86d 	.word	0x0800b86d
 800b96c:	20008590 	.word	0x20008590
 800b970:	00030d40 	.word	0x00030d40

0800b974 <coLedSetGreen>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4c15      	ldr	r4, [pc, #84]	; (800b9cc <coLedSetGreen+0x58>)
 800b978:	7823      	ldrb	r3, [r4, #0]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	4605      	mov	r5, r0
 800b97e:	d104      	bne.n	800b98a <coLedSetGreen+0x16>
 800b980:	f7ff ffc4 	bl	800b90c <stopLedTimer>
 800b984:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <coLedSetGreen+0x5c>)
 800b986:	2200      	movs	r2, #0
 800b988:	701a      	strb	r2, [r3, #0]
 800b98a:	2300      	movs	r3, #0
 800b98c:	70a3      	strb	r3, [r4, #2]
 800b98e:	2306      	movs	r3, #6
 800b990:	4a10      	ldr	r2, [pc, #64]	; (800b9d4 <coLedSetGreen+0x60>)
 800b992:	7025      	strb	r5, [r4, #0]
 800b994:	436b      	muls	r3, r5
 800b996:	18d1      	adds	r1, r2, r3
 800b998:	5cd3      	ldrb	r3, [r2, r3]
 800b99a:	6061      	str	r1, [r4, #4]
 800b99c:	70e3      	strb	r3, [r4, #3]
 800b99e:	4c0e      	ldr	r4, [pc, #56]	; (800b9d8 <coLedSetGreen+0x64>)
 800b9a0:	b955      	cbnz	r5, 800b9b8 <coLedSetGreen+0x44>
 800b9a2:	4b0b      	ldr	r3, [pc, #44]	; (800b9d0 <coLedSetGreen+0x5c>)
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	b90b      	cbnz	r3, 800b9ac <coLedSetGreen+0x38>
 800b9a8:	f7ff ffb0 	bl	800b90c <stopLedTimer>
 800b9ac:	7820      	ldrb	r0, [r4, #0]
 800b9ae:	b958      	cbnz	r0, 800b9c8 <coLedSetGreen+0x54>
 800b9b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9b4:	f7ff bf48 	b.w	800b848 <ledGreenInd>
 800b9b8:	7823      	ldrb	r3, [r4, #0]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d004      	beq.n	800b9c8 <coLedSetGreen+0x54>
 800b9be:	4628      	mov	r0, r5
 800b9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c4:	f7ff bfb2 	b.w	800b92c <coLedSetGreen.part.0>
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20008570 	.word	0x20008570
 800b9d0:	20008580 	.word	0x20008580
 800b9d4:	0801334f 	.word	0x0801334f
 800b9d8:	200085a8 	.word	0x200085a8

0800b9dc <coLedSetRed>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4c15      	ldr	r4, [pc, #84]	; (800ba34 <coLedSetRed+0x58>)
 800b9e0:	7823      	ldrb	r3, [r4, #0]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	d104      	bne.n	800b9f2 <coLedSetRed+0x16>
 800b9e8:	f7ff ff90 	bl	800b90c <stopLedTimer>
 800b9ec:	4b12      	ldr	r3, [pc, #72]	; (800ba38 <coLedSetRed+0x5c>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	701a      	strb	r2, [r3, #0]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	70a3      	strb	r3, [r4, #2]
 800b9f6:	2306      	movs	r3, #6
 800b9f8:	4a10      	ldr	r2, [pc, #64]	; (800ba3c <coLedSetRed+0x60>)
 800b9fa:	7025      	strb	r5, [r4, #0]
 800b9fc:	436b      	muls	r3, r5
 800b9fe:	18d1      	adds	r1, r2, r3
 800ba00:	5cd3      	ldrb	r3, [r2, r3]
 800ba02:	6061      	str	r1, [r4, #4]
 800ba04:	70e3      	strb	r3, [r4, #3]
 800ba06:	4c0e      	ldr	r4, [pc, #56]	; (800ba40 <coLedSetRed+0x64>)
 800ba08:	b955      	cbnz	r5, 800ba20 <coLedSetRed+0x44>
 800ba0a:	4b0b      	ldr	r3, [pc, #44]	; (800ba38 <coLedSetRed+0x5c>)
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	b90b      	cbnz	r3, 800ba14 <coLedSetRed+0x38>
 800ba10:	f7ff ff7c 	bl	800b90c <stopLedTimer>
 800ba14:	7820      	ldrb	r0, [r4, #0]
 800ba16:	b958      	cbnz	r0, 800ba30 <coLedSetRed+0x54>
 800ba18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba1c:	f7ff bf02 	b.w	800b824 <ledRedInd>
 800ba20:	7823      	ldrb	r3, [r4, #0]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d004      	beq.n	800ba30 <coLedSetRed+0x54>
 800ba26:	4628      	mov	r0, r5
 800ba28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba2c:	f7ff bf7e 	b.w	800b92c <coLedSetGreen.part.0>
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	bf00      	nop
 800ba34:	20008580 	.word	0x20008580
 800ba38:	20008570 	.word	0x20008570
 800ba3c:	0801334f 	.word	0x0801334f
 800ba40:	200085a8 	.word	0x200085a8

0800ba44 <coLedSetState>:
 800ba44:	2301      	movs	r3, #1
 800ba46:	fa03 f000 	lsl.w	r0, r3, r0
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <coLedSetState+0x44>)
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	2901      	cmp	r1, #1
 800ba50:	bf0c      	ite	eq
 800ba52:	4310      	orreq	r0, r2
 800ba54:	ea22 0000 	bicne.w	r0, r2, r0
 800ba58:	b410      	push	{r4}
 800ba5a:	6018      	str	r0, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	b922      	cbnz	r2, 800ba6a <coLedSetState+0x26>
 800ba60:	4610      	mov	r0, r2
 800ba62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba66:	f7ff bfb9 	b.w	800b9dc <coLedSetRed>
 800ba6a:	4908      	ldr	r1, [pc, #32]	; (800ba8c <coLedSetState+0x48>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	18c8      	adds	r0, r1, r3
 800ba70:	7980      	ldrb	r0, [r0, #6]
 800ba72:	fa22 f400 	lsr.w	r4, r2, r0
 800ba76:	07e4      	lsls	r4, r4, #31
 800ba78:	d4f3      	bmi.n	800ba62 <coLedSetState+0x1e>
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	1dd8      	adds	r0, r3, #7
 800ba7e:	d1f6      	bne.n	800ba6e <coLedSetState+0x2a>
 800ba80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	200085ac 	.word	0x200085ac
 800ba8c:	08013379 	.word	0x08013379

0800ba90 <coEventRegister_LED_GREEN>:
 800ba90:	b510      	push	{r4, lr}
 800ba92:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <coEventRegister_LED_GREEN+0x20>)
 800ba94:	781c      	ldrb	r4, [r3, #0]
 800ba96:	b94c      	cbnz	r4, 800baac <coEventRegister_LED_GREEN+0x1c>
 800ba98:	4a06      	ldr	r2, [pc, #24]	; (800bab4 <coEventRegister_LED_GREEN+0x24>)
 800ba9a:	6010      	str	r0, [r2, #0]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	701a      	strb	r2, [r3, #0]
 800baa0:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <coEventRegister_LED_GREEN+0x28>)
 800baa2:	7858      	ldrb	r0, [r3, #1]
 800baa4:	f7ff fed0 	bl	800b848 <ledGreenInd>
 800baa8:	4620      	mov	r0, r4
 800baaa:	bd10      	pop	{r4, pc}
 800baac:	200d      	movs	r0, #13
 800baae:	e7fc      	b.n	800baaa <coEventRegister_LED_GREEN+0x1a>
 800bab0:	2000857c 	.word	0x2000857c
 800bab4:	20008578 	.word	0x20008578
 800bab8:	20008570 	.word	0x20008570

0800babc <coEventRegister_LED_RED>:
 800babc:	b510      	push	{r4, lr}
 800babe:	4b07      	ldr	r3, [pc, #28]	; (800badc <coEventRegister_LED_RED+0x20>)
 800bac0:	781c      	ldrb	r4, [r3, #0]
 800bac2:	b94c      	cbnz	r4, 800bad8 <coEventRegister_LED_RED+0x1c>
 800bac4:	4a06      	ldr	r2, [pc, #24]	; (800bae0 <coEventRegister_LED_RED+0x24>)
 800bac6:	6010      	str	r0, [r2, #0]
 800bac8:	2201      	movs	r2, #1
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <coEventRegister_LED_RED+0x28>)
 800bace:	7858      	ldrb	r0, [r3, #1]
 800bad0:	f7ff fea8 	bl	800b824 <ledRedInd>
 800bad4:	4620      	mov	r0, r4
 800bad6:	bd10      	pop	{r4, pc}
 800bad8:	200d      	movs	r0, #13
 800bada:	e7fc      	b.n	800bad6 <coEventRegister_LED_RED+0x1a>
 800badc:	2000858c 	.word	0x2000858c
 800bae0:	20008588 	.word	0x20008588
 800bae4:	20008580 	.word	0x20008580

0800bae8 <icoLedVarInit>:
 800bae8:	4a05      	ldr	r2, [pc, #20]	; (800bb00 <icoLedVarInit+0x18>)
 800baea:	2300      	movs	r3, #0
 800baec:	7013      	strb	r3, [r2, #0]
 800baee:	4a05      	ldr	r2, [pc, #20]	; (800bb04 <icoLedVarInit+0x1c>)
 800baf0:	7013      	strb	r3, [r2, #0]
 800baf2:	4a05      	ldr	r2, [pc, #20]	; (800bb08 <icoLedVarInit+0x20>)
 800baf4:	7013      	strb	r3, [r2, #0]
 800baf6:	4a05      	ldr	r2, [pc, #20]	; (800bb0c <icoLedVarInit+0x24>)
 800baf8:	7013      	strb	r3, [r2, #0]
 800bafa:	4a05      	ldr	r2, [pc, #20]	; (800bb10 <icoLedVarInit+0x28>)
 800bafc:	6013      	str	r3, [r2, #0]
 800bafe:	4770      	bx	lr
 800bb00:	2000857c 	.word	0x2000857c
 800bb04:	2000858c 	.word	0x2000858c
 800bb08:	200085a8 	.word	0x200085a8
 800bb0c:	2000856c 	.word	0x2000856c
 800bb10:	200085ac 	.word	0x200085ac

0800bb14 <coLedInit>:
 800bb14:	b508      	push	{r3, lr}
 800bb16:	2000      	movs	r0, #0
 800bb18:	f7ff ff2c 	bl	800b974 <coLedSetGreen>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bb22:	f7ff bf5b 	b.w	800b9dc <coLedSetRed>
	...

0800bb28 <lssEvent>:
 800bb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb2c:	4699      	mov	r9, r3
 800bb2e:	4b09      	ldr	r3, [pc, #36]	; (800bb54 <lssEvent+0x2c>)
 800bb30:	4f09      	ldr	r7, [pc, #36]	; (800bb58 <lssEvent+0x30>)
 800bb32:	881c      	ldrh	r4, [r3, #0]
 800bb34:	4682      	mov	sl, r0
 800bb36:	460e      	mov	r6, r1
 800bb38:	4690      	mov	r8, r2
 800bb3a:	b90c      	cbnz	r4, 800bb40 <lssEvent+0x18>
 800bb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb40:	3c01      	subs	r4, #1
 800bb42:	b2a4      	uxth	r4, r4
 800bb44:	464b      	mov	r3, r9
 800bb46:	4642      	mov	r2, r8
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4650      	mov	r0, sl
 800bb4c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bb50:	47a8      	blx	r5
 800bb52:	e7f2      	b.n	800bb3a <lssEvent+0x12>
 800bb54:	200085d0 	.word	0x200085d0
 800bb58:	200085cc 	.word	0x200085cc

0800bb5c <lssSlaveIdentify>:
 800bb5c:	b507      	push	{r0, r1, r2, lr}
 800bb5e:	2300      	movs	r3, #0
 800bb60:	e9cd 3300 	strd	r3, r3, [sp]
 800bb64:	234f      	movs	r3, #79	; 0x4f
 800bb66:	f88d 3000 	strb.w	r3, [sp]
 800bb6a:	4b04      	ldr	r3, [pc, #16]	; (800bb7c <lssSlaveIdentify+0x20>)
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	4669      	mov	r1, sp
 800bb70:	8818      	ldrh	r0, [r3, #0]
 800bb72:	f002 ff79 	bl	800ea68 <icoTransmitMessage>
 800bb76:	b003      	add	sp, #12
 800bb78:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb7c:	200085dc 	.word	0x200085dc

0800bb80 <bitrateSwitchFct>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	4c0d      	ldr	r4, [pc, #52]	; (800bbb8 <bitrateSwitchFct+0x38>)
 800bb84:	7823      	ldrb	r3, [r4, #0]
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d108      	bne.n	800bb9c <bitrateSwitchFct+0x1c>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4619      	mov	r1, r3
 800bb90:	2003      	movs	r0, #3
 800bb92:	f7ff ffc9 	bl	800bb28 <lssEvent>
 800bb96:	2303      	movs	r3, #3
 800bb98:	7023      	strb	r3, [r4, #0]
 800bb9a:	bd10      	pop	{r4, pc}
 800bb9c:	2b03      	cmp	r3, #3
 800bb9e:	d1fc      	bne.n	800bb9a <bitrateSwitchFct+0x1a>
 800bba0:	4906      	ldr	r1, [pc, #24]	; (800bbbc <bitrateSwitchFct+0x3c>)
 800bba2:	2300      	movs	r3, #0
 800bba4:	461a      	mov	r2, r3
 800bba6:	8809      	ldrh	r1, [r1, #0]
 800bba8:	2004      	movs	r0, #4
 800bbaa:	f7ff ffbd 	bl	800bb28 <lssEvent>
 800bbae:	4804      	ldr	r0, [pc, #16]	; (800bbc0 <bitrateSwitchFct+0x40>)
 800bbb0:	f003 ffdc 	bl	800fb6c <coTimerStop>
 800bbb4:	2304      	movs	r3, #4
 800bbb6:	e7ef      	b.n	800bb98 <bitrateSwitchFct+0x18>
 800bbb8:	200085b0 	.word	0x200085b0
 800bbbc:	200085d4 	.word	0x200085d4
 800bbc0:	200085b4 	.word	0x200085b4

0800bbc4 <coLssNonConfigSlave>:
 800bbc4:	b507      	push	{r0, r1, r2, lr}
 800bbc6:	f000 fbfb 	bl	800c3c0 <coNmtGetNodeId>
 800bbca:	28ff      	cmp	r0, #255	; 0xff
 800bbcc:	d10c      	bne.n	800bbe8 <coLssNonConfigSlave+0x24>
 800bbce:	a902      	add	r1, sp, #8
 800bbd0:	2350      	movs	r3, #80	; 0x50
 800bbd2:	f801 3d08 	strb.w	r3, [r1, #-8]!
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f8cd 3001 	str.w	r3, [sp, #1]
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	4b04      	ldr	r3, [pc, #16]	; (800bbf0 <coLssNonConfigSlave+0x2c>)
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	8818      	ldrh	r0, [r3, #0]
 800bbe4:	f002 ff40 	bl	800ea68 <icoTransmitMessage>
 800bbe8:	b003      	add	sp, #12
 800bbea:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbee:	bf00      	nop
 800bbf0:	200085dc 	.word	0x200085dc

0800bbf4 <icoLssHandler>:
 800bbf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbf8:	7986      	ldrb	r6, [r0, #6]
 800bbfa:	2e43      	cmp	r6, #67	; 0x43
 800bbfc:	b08b      	sub	sp, #44	; 0x2c
 800bbfe:	4604      	mov	r4, r0
 800bc00:	d82e      	bhi.n	800bc60 <icoLssHandler+0x6c>
 800bc02:	2e40      	cmp	r6, #64	; 0x40
 800bc04:	f080 8164 	bcs.w	800bed0 <icoLssHandler+0x2dc>
 800bc08:	2e13      	cmp	r6, #19
 800bc0a:	f000 80cd 	beq.w	800bda8 <icoLssHandler+0x1b4>
 800bc0e:	d808      	bhi.n	800bc22 <icoLssHandler+0x2e>
 800bc10:	2e04      	cmp	r6, #4
 800bc12:	f000 8102 	beq.w	800be1a <icoLssHandler+0x226>
 800bc16:	2e11      	cmp	r6, #17
 800bc18:	f000 8093 	beq.w	800bd42 <icoLssHandler+0x14e>
 800bc1c:	b00b      	add	sp, #44	; 0x2c
 800bc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc22:	2e15      	cmp	r6, #21
 800bc24:	f000 813f 	beq.w	800bea6 <icoLssHandler+0x2b2>
 800bc28:	2e17      	cmp	r6, #23
 800bc2a:	d1f7      	bne.n	800bc1c <icoLssHandler+0x28>
 800bc2c:	4bb7      	ldr	r3, [pc, #732]	; (800bf0c <icoLssHandler+0x318>)
 800bc2e:	781d      	ldrb	r5, [r3, #0]
 800bc30:	2d01      	cmp	r5, #1
 800bc32:	d1f3      	bne.n	800bc1c <icoLssHandler+0x28>
 800bc34:	ab0a      	add	r3, sp, #40	; 0x28
 800bc36:	49b6      	ldr	r1, [pc, #728]	; (800bf10 <icoLssHandler+0x31c>)
 800bc38:	f88d 500f 	strb.w	r5, [sp, #15]
 800bc3c:	2400      	movs	r4, #0
 800bc3e:	f803 4d18 	strb.w	r4, [r3, #-24]!
 800bc42:	f10d 020f 	add.w	r2, sp, #15
 800bc46:	7809      	ldrb	r1, [r1, #0]
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f7ff ff6d 	bl	800bb28 <lssEvent>
 800bc4e:	f8cd 4016 	str.w	r4, [sp, #22]
 800bc52:	f8ad 401a 	strh.w	r4, [sp, #26]
 800bc56:	f88d 6014 	strb.w	r6, [sp, #20]
 800bc5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800bc5e:	e0c4      	b.n	800bdea <icoLssHandler+0x1f6>
 800bc60:	2e4c      	cmp	r6, #76	; 0x4c
 800bc62:	d02b      	beq.n	800bcbc <icoLssHandler+0xc8>
 800bc64:	d810      	bhi.n	800bc88 <icoLssHandler+0x94>
 800bc66:	2e46      	cmp	r6, #70	; 0x46
 800bc68:	d3d8      	bcc.n	800bc1c <icoLssHandler+0x28>
 800bc6a:	1dc1      	adds	r1, r0, #7
 800bc6c:	48a9      	ldr	r0, [pc, #676]	; (800bf14 <icoLssHandler+0x320>)
 800bc6e:	7802      	ldrb	r2, [r0, #0]
 800bc70:	2300      	movs	r3, #0
 800bc72:	42b2      	cmp	r2, r6
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	4605      	mov	r5, r0
 800bc78:	f000 819d 	beq.w	800bfb6 <icoLssHandler+0x3c2>
 800bc7c:	2e46      	cmp	r6, #70	; 0x46
 800bc7e:	f000 81a2 	beq.w	800bfc6 <icoLssHandler+0x3d2>
 800bc82:	2346      	movs	r3, #70	; 0x46
 800bc84:	7003      	strb	r3, [r0, #0]
 800bc86:	e7c9      	b.n	800bc1c <icoLssHandler+0x28>
 800bc88:	2e51      	cmp	r6, #81	; 0x51
 800bc8a:	d01a      	beq.n	800bcc2 <icoLssHandler+0xce>
 800bc8c:	d3c6      	bcc.n	800bc1c <icoLssHandler+0x28>
 800bc8e:	f1a6 035a 	sub.w	r3, r6, #90	; 0x5a
 800bc92:	2b04      	cmp	r3, #4
 800bc94:	d8c2      	bhi.n	800bc1c <icoLssHandler+0x28>
 800bc96:	4b9d      	ldr	r3, [pc, #628]	; (800bf0c <icoLssHandler+0x318>)
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d1be      	bne.n	800bc1c <icoLssHandler+0x28>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800bca4:	f88d 6014 	strb.w	r6, [sp, #20]
 800bca8:	3e5b      	subs	r6, #91	; 0x5b
 800bcaa:	2e03      	cmp	r6, #3
 800bcac:	f200 80e3 	bhi.w	800be76 <icoLssHandler+0x282>
 800bcb0:	e8df f016 	tbh	[pc, r6, lsl #1]
 800bcb4:	00f300f0 	.word	0x00f300f0
 800bcb8:	00dc00f6 	.word	0x00dc00f6
 800bcbc:	f7ff ff82 	bl	800bbc4 <coLssNonConfigSlave>
 800bcc0:	e7ac      	b.n	800bc1c <icoLssHandler+0x28>
 800bcc2:	f000 fb7d 	bl	800c3c0 <coNmtGetNodeId>
 800bcc6:	28ff      	cmp	r0, #255	; 0xff
 800bcc8:	d1a8      	bne.n	800bc1c <icoLssHandler+0x28>
 800bcca:	4d90      	ldr	r5, [pc, #576]	; (800bf0c <icoLssHandler+0x318>)
 800bccc:	782b      	ldrb	r3, [r5, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1a4      	bne.n	800bc1c <icoLssHandler+0x28>
 800bcd2:	7ae7      	ldrb	r7, [r4, #11]
 800bcd4:	7aa2      	ldrb	r2, [r4, #10]
 800bcd6:	f8d4 9007 	ldr.w	r9, [r4, #7]
 800bcda:	9205      	str	r2, [sp, #20]
 800bcdc:	2f80      	cmp	r7, #128	; 0x80
 800bcde:	f8df 825c 	ldr.w	r8, [pc, #604]	; 800bf3c <icoLssHandler+0x348>
 800bce2:	d104      	bne.n	800bcee <icoLssHandler+0xfa>
 800bce4:	f888 3000 	strb.w	r3, [r8]
 800bce8:	f7ff ff38 	bl	800bb5c <lssSlaveIdentify>
 800bcec:	e796      	b.n	800bc1c <icoLssHandler+0x28>
 800bcee:	7b26      	ldrb	r6, [r4, #12]
 800bcf0:	f898 3000 	ldrb.w	r3, [r8]
 800bcf4:	42b3      	cmp	r3, r6
 800bcf6:	d191      	bne.n	800bc1c <icoLssHandler+0x28>
 800bcf8:	1c71      	adds	r1, r6, #1
 800bcfa:	aa05      	add	r2, sp, #20
 800bcfc:	b2c9      	uxtb	r1, r1
 800bcfe:	f241 0018 	movw	r0, #4120	; 0x1018
 800bd02:	7b64      	ldrb	r4, [r4, #13]
 800bd04:	f000 ffe9 	bl	800ccda <coOdGetObj_u32>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d187      	bne.n	800bc1c <icoLssHandler+0x28>
 800bd0c:	9b05      	ldr	r3, [sp, #20]
 800bd0e:	ea89 0903 	eor.w	r9, r9, r3
 800bd12:	2320      	movs	r3, #32
 800bd14:	429f      	cmp	r7, r3
 800bd16:	d30c      	bcc.n	800bd32 <icoLssHandler+0x13e>
 800bd18:	f7ff ff20 	bl	800bb5c <lssSlaveIdentify>
 800bd1c:	f888 4000 	strb.w	r4, [r8]
 800bd20:	2f00      	cmp	r7, #0
 800bd22:	f47f af7b 	bne.w	800bc1c <icoLssHandler+0x28>
 800bd26:	42a6      	cmp	r6, r4
 800bd28:	f67f af78 	bls.w	800bc1c <icoLssHandler+0x28>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	702b      	strb	r3, [r5, #0]
 800bd30:	e774      	b.n	800bc1c <icoLssHandler+0x28>
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	fa29 f203 	lsr.w	r2, r9, r3
 800bd3a:	07d2      	lsls	r2, r2, #31
 800bd3c:	f53f af6e 	bmi.w	800bc1c <icoLssHandler+0x28>
 800bd40:	e7e8      	b.n	800bd14 <icoLssHandler+0x120>
 800bd42:	4a72      	ldr	r2, [pc, #456]	; (800bf0c <icoLssHandler+0x318>)
 800bd44:	7812      	ldrb	r2, [r2, #0]
 800bd46:	2300      	movs	r3, #0
 800bd48:	2a01      	cmp	r2, #1
 800bd4a:	f88d 3010 	strb.w	r3, [sp, #16]
 800bd4e:	f47f af65 	bne.w	800bc1c <icoLssHandler+0x28>
 800bd52:	79c4      	ldrb	r4, [r0, #7]
 800bd54:	b11c      	cbz	r4, 800bd5e <icoLssHandler+0x16a>
 800bd56:	f084 0280 	eor.w	r2, r4, #128	; 0x80
 800bd5a:	2a7e      	cmp	r2, #126	; 0x7e
 800bd5c:	d815      	bhi.n	800bd8a <icoLssHandler+0x196>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	f88d 3010 	strb.w	r3, [sp, #16]
 800bd64:	2300      	movs	r3, #0
 800bd66:	f8cd 3016 	str.w	r3, [sp, #22]
 800bd6a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800bd6e:	2311      	movs	r3, #17
 800bd70:	f88d 3014 	strb.w	r3, [sp, #20]
 800bd74:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bd78:	f88d 3015 	strb.w	r3, [sp, #21]
 800bd7c:	4b66      	ldr	r3, [pc, #408]	; (800bf18 <icoLssHandler+0x324>)
 800bd7e:	2201      	movs	r2, #1
 800bd80:	a905      	add	r1, sp, #20
 800bd82:	8818      	ldrh	r0, [r3, #0]
 800bd84:	f002 fe70 	bl	800ea68 <icoTransmitMessage>
 800bd88:	e748      	b.n	800bc1c <icoLssHandler+0x28>
 800bd8a:	aa04      	add	r2, sp, #16
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	2005      	movs	r0, #5
 800bd90:	f7ff feca 	bl	800bb28 <lssEvent>
 800bd94:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1e3      	bne.n	800bd64 <icoLssHandler+0x170>
 800bd9c:	4b5c      	ldr	r3, [pc, #368]	; (800bf10 <icoLssHandler+0x31c>)
 800bd9e:	701c      	strb	r4, [r3, #0]
 800bda0:	4b5e      	ldr	r3, [pc, #376]	; (800bf1c <icoLssHandler+0x328>)
 800bda2:	2201      	movs	r2, #1
 800bda4:	701a      	strb	r2, [r3, #0]
 800bda6:	e7dd      	b.n	800bd64 <icoLssHandler+0x170>
 800bda8:	4958      	ldr	r1, [pc, #352]	; (800bf0c <icoLssHandler+0x318>)
 800bdaa:	79c3      	ldrb	r3, [r0, #7]
 800bdac:	7a02      	ldrb	r2, [r0, #8]
 800bdae:	7808      	ldrb	r0, [r1, #0]
 800bdb0:	2400      	movs	r4, #0
 800bdb2:	2801      	cmp	r0, #1
 800bdb4:	f88d 400f 	strb.w	r4, [sp, #15]
 800bdb8:	f88d 4010 	strb.w	r4, [sp, #16]
 800bdbc:	f47f af2e 	bne.w	800bc1c <icoLssHandler+0x28>
 800bdc0:	b9fb      	cbnz	r3, 800be02 <icoLssHandler+0x20e>
 800bdc2:	2a09      	cmp	r2, #9
 800bdc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bdc8:	d916      	bls.n	800bdf8 <icoLssHandler+0x204>
 800bdca:	f88d 000f 	strb.w	r0, [sp, #15]
 800bdce:	460c      	mov	r4, r1
 800bdd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800bdd4:	b90b      	cbnz	r3, 800bdda <icoLssHandler+0x1e6>
 800bdd6:	4a52      	ldr	r2, [pc, #328]	; (800bf20 <icoLssHandler+0x32c>)
 800bdd8:	8014      	strh	r4, [r2, #0]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f8cd 2016 	str.w	r2, [sp, #22]
 800bde0:	f8ad 201a 	strh.w	r2, [sp, #26]
 800bde4:	2213      	movs	r2, #19
 800bde6:	f88d 2014 	strb.w	r2, [sp, #20]
 800bdea:	f88d 3015 	strb.w	r3, [sp, #21]
 800bdee:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bdf2:	f88d 3016 	strb.w	r3, [sp, #22]
 800bdf6:	e7c1      	b.n	800bd7c <icoLssHandler+0x188>
 800bdf8:	484a      	ldr	r0, [pc, #296]	; (800bf24 <icoLssHandler+0x330>)
 800bdfa:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 800bdfe:	428c      	cmp	r4, r1
 800be00:	d0e6      	beq.n	800bdd0 <icoLssHandler+0x1dc>
 800be02:	f88d 300f 	strb.w	r3, [sp, #15]
 800be06:	ab0a      	add	r3, sp, #40	; 0x28
 800be08:	4621      	mov	r1, r4
 800be0a:	f803 2d18 	strb.w	r2, [r3, #-24]!
 800be0e:	2001      	movs	r0, #1
 800be10:	f10d 020f 	add.w	r2, sp, #15
 800be14:	f7ff fe88 	bl	800bb28 <lssEvent>
 800be18:	e7da      	b.n	800bdd0 <icoLssHandler+0x1dc>
 800be1a:	79c4      	ldrb	r4, [r0, #7]
 800be1c:	b9e4      	cbnz	r4, 800be58 <icoLssHandler+0x264>
 800be1e:	4b3b      	ldr	r3, [pc, #236]	; (800bf0c <icoLssHandler+0x318>)
 800be20:	781a      	ldrb	r2, [r3, #0]
 800be22:	2a01      	cmp	r2, #1
 800be24:	f47f aefa 	bne.w	800bc1c <icoLssHandler+0x28>
 800be28:	4d3c      	ldr	r5, [pc, #240]	; (800bf1c <icoLssHandler+0x328>)
 800be2a:	701c      	strb	r4, [r3, #0]
 800be2c:	782a      	ldrb	r2, [r5, #0]
 800be2e:	2a01      	cmp	r2, #1
 800be30:	f47f aef4 	bne.w	800bc1c <icoLssHandler+0x28>
 800be34:	f000 faca 	bl	800c3cc <coNmtGetState>
 800be38:	2880      	cmp	r0, #128	; 0x80
 800be3a:	d10b      	bne.n	800be54 <icoLssHandler+0x260>
 800be3c:	2302      	movs	r3, #2
 800be3e:	f88d 301d 	strb.w	r3, [sp, #29]
 800be42:	a805      	add	r0, sp, #20
 800be44:	2382      	movs	r3, #130	; 0x82
 800be46:	9406      	str	r4, [sp, #24]
 800be48:	f88d 301e 	strb.w	r3, [sp, #30]
 800be4c:	f88d 401f 	strb.w	r4, [sp, #31]
 800be50:	f000 fa78 	bl	800c344 <icoNmtMsgHandler>
 800be54:	2300      	movs	r3, #0
 800be56:	e76a      	b.n	800bd2e <icoLssHandler+0x13a>
 800be58:	2c01      	cmp	r4, #1
 800be5a:	f47f aedf 	bne.w	800bc1c <icoLssHandler+0x28>
 800be5e:	4b2b      	ldr	r3, [pc, #172]	; (800bf0c <icoLssHandler+0x318>)
 800be60:	781a      	ldrb	r2, [r3, #0]
 800be62:	2a00      	cmp	r2, #0
 800be64:	f47f aeda 	bne.w	800bc1c <icoLssHandler+0x28>
 800be68:	701c      	strb	r4, [r3, #0]
 800be6a:	e6d7      	b.n	800bc1c <icoLssHandler+0x28>
 800be6c:	f000 faa8 	bl	800c3c0 <coNmtGetNodeId>
 800be70:	f88d 0015 	strb.w	r0, [sp, #21]
 800be74:	e782      	b.n	800bd7c <icoLssHandler+0x188>
 800be76:	aa04      	add	r2, sp, #16
 800be78:	2101      	movs	r1, #1
 800be7a:	f241 0018 	movw	r0, #4120	; 0x1018
 800be7e:	f000 ff2c 	bl	800ccda <coOdGetObj_u32>
 800be82:	2204      	movs	r2, #4
 800be84:	9200      	str	r2, [sp, #0]
 800be86:	2301      	movs	r3, #1
 800be88:	a904      	add	r1, sp, #16
 800be8a:	f10d 0015 	add.w	r0, sp, #21
 800be8e:	f000 fd03 	bl	800c898 <coNumMemcpyUnpack>
 800be92:	e773      	b.n	800bd7c <icoLssHandler+0x188>
 800be94:	aa04      	add	r2, sp, #16
 800be96:	2102      	movs	r1, #2
 800be98:	e7ef      	b.n	800be7a <icoLssHandler+0x286>
 800be9a:	aa04      	add	r2, sp, #16
 800be9c:	2103      	movs	r1, #3
 800be9e:	e7ec      	b.n	800be7a <icoLssHandler+0x286>
 800bea0:	aa04      	add	r2, sp, #16
 800bea2:	2104      	movs	r1, #4
 800bea4:	e7e9      	b.n	800be7a <icoLssHandler+0x286>
 800bea6:	f8b0 1007 	ldrh.w	r1, [r0, #7]
 800beaa:	4a1f      	ldr	r2, [pc, #124]	; (800bf28 <icoLssHandler+0x334>)
 800beac:	2301      	movs	r3, #1
 800beae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	4341      	muls	r1, r0
 800beb6:	2300      	movs	r3, #0
 800beb8:	481c      	ldr	r0, [pc, #112]	; (800bf2c <icoLssHandler+0x338>)
 800beba:	f003 fe6d 	bl	800fb98 <coTimerStart>
 800bebe:	4b1c      	ldr	r3, [pc, #112]	; (800bf30 <icoLssHandler+0x33c>)
 800bec0:	2002      	movs	r0, #2
 800bec2:	7018      	strb	r0, [r3, #0]
 800bec4:	aa04      	add	r2, sp, #16
 800bec6:	ab05      	add	r3, sp, #20
 800bec8:	2100      	movs	r1, #0
 800beca:	f7ff fe2d 	bl	800bb28 <lssEvent>
 800bece:	e6a5      	b.n	800bc1c <icoLssHandler+0x28>
 800bed0:	4c18      	ldr	r4, [pc, #96]	; (800bf34 <icoLssHandler+0x340>)
 800bed2:	7823      	ldrb	r3, [r4, #0]
 800bed4:	2500      	movs	r5, #0
 800bed6:	42b3      	cmp	r3, r6
 800bed8:	f100 0107 	add.w	r1, r0, #7
 800bedc:	9504      	str	r5, [sp, #16]
 800bede:	4627      	mov	r7, r4
 800bee0:	d004      	beq.n	800beec <icoLssHandler+0x2f8>
 800bee2:	2e40      	cmp	r6, #64	; 0x40
 800bee4:	d008      	beq.n	800bef8 <icoLssHandler+0x304>
 800bee6:	2340      	movs	r3, #64	; 0x40
 800bee8:	7023      	strb	r3, [r4, #0]
 800beea:	e697      	b.n	800bc1c <icoLssHandler+0x28>
 800beec:	2b42      	cmp	r3, #66	; 0x42
 800beee:	d02f      	beq.n	800bf50 <icoLssHandler+0x35c>
 800bef0:	2b43      	cmp	r3, #67	; 0x43
 800bef2:	d035      	beq.n	800bf60 <icoLssHandler+0x36c>
 800bef4:	2b41      	cmp	r3, #65	; 0x41
 800bef6:	d023      	beq.n	800bf40 <icoLssHandler+0x34c>
 800bef8:	2300      	movs	r3, #0
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	2204      	movs	r2, #4
 800befe:	2301      	movs	r3, #1
 800bf00:	480d      	ldr	r0, [pc, #52]	; (800bf38 <icoLssHandler+0x344>)
 800bf02:	f000 fcb9 	bl	800c878 <coNumMemcpyPack>
 800bf06:	2341      	movs	r3, #65	; 0x41
 800bf08:	703b      	strb	r3, [r7, #0]
 800bf0a:	e687      	b.n	800bc1c <icoLssHandler+0x28>
 800bf0c:	200085da 	.word	0x200085da
 800bf10:	200085d6 	.word	0x200085d6
 800bf14:	20000015 	.word	0x20000015
 800bf18:	200085dc 	.word	0x200085dc
 800bf1c:	200085d2 	.word	0x200085d2
 800bf20:	200085d4 	.word	0x200085d4
 800bf24:	08013380 	.word	0x08013380
 800bf28:	0800bb81 	.word	0x0800bb81
 800bf2c:	200085b4 	.word	0x200085b4
 800bf30:	200085b0 	.word	0x200085b0
 800bf34:	20000014 	.word	0x20000014
 800bf38:	200085e0 	.word	0x200085e0
 800bf3c:	200085d7 	.word	0x200085d7
 800bf40:	2301      	movs	r3, #1
 800bf42:	9500      	str	r5, [sp, #0]
 800bf44:	2204      	movs	r2, #4
 800bf46:	485c      	ldr	r0, [pc, #368]	; (800c0b8 <icoLssHandler+0x4c4>)
 800bf48:	f000 fc96 	bl	800c878 <coNumMemcpyPack>
 800bf4c:	2342      	movs	r3, #66	; 0x42
 800bf4e:	e7cb      	b.n	800bee8 <icoLssHandler+0x2f4>
 800bf50:	2301      	movs	r3, #1
 800bf52:	9500      	str	r5, [sp, #0]
 800bf54:	2204      	movs	r2, #4
 800bf56:	4859      	ldr	r0, [pc, #356]	; (800c0bc <icoLssHandler+0x4c8>)
 800bf58:	f000 fc8e 	bl	800c878 <coNumMemcpyPack>
 800bf5c:	2343      	movs	r3, #67	; 0x43
 800bf5e:	e7c3      	b.n	800bee8 <icoLssHandler+0x2f4>
 800bf60:	2301      	movs	r3, #1
 800bf62:	9500      	str	r5, [sp, #0]
 800bf64:	2204      	movs	r2, #4
 800bf66:	4856      	ldr	r0, [pc, #344]	; (800c0c0 <icoLssHandler+0x4cc>)
 800bf68:	4e56      	ldr	r6, [pc, #344]	; (800c0c4 <icoLssHandler+0x4d0>)
 800bf6a:	f000 fc85 	bl	800c878 <coNumMemcpyPack>
 800bf6e:	2340      	movs	r3, #64	; 0x40
 800bf70:	7023      	strb	r3, [r4, #0]
 800bf72:	1c6c      	adds	r4, r5, #1
 800bf74:	aa04      	add	r2, sp, #16
 800bf76:	b2e1      	uxtb	r1, r4
 800bf78:	f241 0018 	movw	r0, #4120	; 0x1018
 800bf7c:	f000 fead 	bl	800ccda <coOdGetObj_u32>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	f47f ae4b 	bne.w	800bc1c <icoLssHandler+0x28>
 800bf86:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 800bf8a:	9b04      	ldr	r3, [sp, #16]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	f47f ae45 	bne.w	800bc1c <icoLssHandler+0x28>
 800bf92:	2c04      	cmp	r4, #4
 800bf94:	4625      	mov	r5, r4
 800bf96:	d1ec      	bne.n	800bf72 <icoLssHandler+0x37e>
 800bf98:	2344      	movs	r3, #68	; 0x44
 800bf9a:	e9cd 0005 	strd	r0, r0, [sp, #20]
 800bf9e:	f88d 3014 	strb.w	r3, [sp, #20]
 800bfa2:	4b49      	ldr	r3, [pc, #292]	; (800c0c8 <icoLssHandler+0x4d4>)
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	8818      	ldrh	r0, [r3, #0]
 800bfa8:	a905      	add	r1, sp, #20
 800bfaa:	f002 fd5d 	bl	800ea68 <icoTransmitMessage>
 800bfae:	4b47      	ldr	r3, [pc, #284]	; (800c0cc <icoLssHandler+0x4d8>)
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	701a      	strb	r2, [r3, #0]
 800bfb4:	e632      	b.n	800bc1c <icoLssHandler+0x28>
 800bfb6:	3a47      	subs	r2, #71	; 0x47
 800bfb8:	2a04      	cmp	r2, #4
 800bfba:	d804      	bhi.n	800bfc6 <icoLssHandler+0x3d2>
 800bfbc:	e8df f002 	tbb	[pc, r2]
 800bfc0:	231b130b 	.word	0x231b130b
 800bfc4:	2b          	.byte	0x2b
 800bfc5:	00          	.byte	0x00
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	2204      	movs	r2, #4
 800bfca:	2301      	movs	r3, #1
 800bfcc:	4840      	ldr	r0, [pc, #256]	; (800c0d0 <icoLssHandler+0x4dc>)
 800bfce:	f000 fc53 	bl	800c878 <coNumMemcpyPack>
 800bfd2:	2347      	movs	r3, #71	; 0x47
 800bfd4:	e6ab      	b.n	800bd2e <icoLssHandler+0x13a>
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	2204      	movs	r2, #4
 800bfda:	2301      	movs	r3, #1
 800bfdc:	483d      	ldr	r0, [pc, #244]	; (800c0d4 <icoLssHandler+0x4e0>)
 800bfde:	f000 fc4b 	bl	800c878 <coNumMemcpyPack>
 800bfe2:	2348      	movs	r3, #72	; 0x48
 800bfe4:	e6a3      	b.n	800bd2e <icoLssHandler+0x13a>
 800bfe6:	9300      	str	r3, [sp, #0]
 800bfe8:	2204      	movs	r2, #4
 800bfea:	2301      	movs	r3, #1
 800bfec:	483a      	ldr	r0, [pc, #232]	; (800c0d8 <icoLssHandler+0x4e4>)
 800bfee:	f000 fc43 	bl	800c878 <coNumMemcpyPack>
 800bff2:	2349      	movs	r3, #73	; 0x49
 800bff4:	e69b      	b.n	800bd2e <icoLssHandler+0x13a>
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	2204      	movs	r2, #4
 800bffa:	2301      	movs	r3, #1
 800bffc:	4837      	ldr	r0, [pc, #220]	; (800c0dc <icoLssHandler+0x4e8>)
 800bffe:	f000 fc3b 	bl	800c878 <coNumMemcpyPack>
 800c002:	234a      	movs	r3, #74	; 0x4a
 800c004:	e693      	b.n	800bd2e <icoLssHandler+0x13a>
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	2204      	movs	r2, #4
 800c00a:	2301      	movs	r3, #1
 800c00c:	4834      	ldr	r0, [pc, #208]	; (800c0e0 <icoLssHandler+0x4ec>)
 800c00e:	f000 fc33 	bl	800c878 <coNumMemcpyPack>
 800c012:	234b      	movs	r3, #75	; 0x4b
 800c014:	e68b      	b.n	800bd2e <icoLssHandler+0x13a>
 800c016:	4c2e      	ldr	r4, [pc, #184]	; (800c0d0 <icoLssHandler+0x4dc>)
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	2204      	movs	r2, #4
 800c01c:	2301      	movs	r3, #1
 800c01e:	f104 0014 	add.w	r0, r4, #20
 800c022:	f000 fc29 	bl	800c878 <coNumMemcpyPack>
 800c026:	2346      	movs	r3, #70	; 0x46
 800c028:	aa04      	add	r2, sp, #16
 800c02a:	2101      	movs	r1, #1
 800c02c:	f241 0018 	movw	r0, #4120	; 0x1018
 800c030:	702b      	strb	r3, [r5, #0]
 800c032:	f000 fe52 	bl	800ccda <coOdGetObj_u32>
 800c036:	2800      	cmp	r0, #0
 800c038:	f47f adf0 	bne.w	800bc1c <icoLssHandler+0x28>
 800c03c:	6822      	ldr	r2, [r4, #0]
 800c03e:	9b04      	ldr	r3, [sp, #16]
 800c040:	429a      	cmp	r2, r3
 800c042:	f47f adeb 	bne.w	800bc1c <icoLssHandler+0x28>
 800c046:	aa04      	add	r2, sp, #16
 800c048:	2102      	movs	r1, #2
 800c04a:	f241 0018 	movw	r0, #4120	; 0x1018
 800c04e:	f000 fe44 	bl	800ccda <coOdGetObj_u32>
 800c052:	2800      	cmp	r0, #0
 800c054:	f47f ade2 	bne.w	800bc1c <icoLssHandler+0x28>
 800c058:	6862      	ldr	r2, [r4, #4]
 800c05a:	9b04      	ldr	r3, [sp, #16]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	f47f addd 	bne.w	800bc1c <icoLssHandler+0x28>
 800c062:	aa04      	add	r2, sp, #16
 800c064:	2103      	movs	r1, #3
 800c066:	f241 0018 	movw	r0, #4120	; 0x1018
 800c06a:	f000 fe36 	bl	800ccda <coOdGetObj_u32>
 800c06e:	2800      	cmp	r0, #0
 800c070:	f47f add4 	bne.w	800bc1c <icoLssHandler+0x28>
 800c074:	9b04      	ldr	r3, [sp, #16]
 800c076:	68a2      	ldr	r2, [r4, #8]
 800c078:	429a      	cmp	r2, r3
 800c07a:	f63f adcf 	bhi.w	800bc1c <icoLssHandler+0x28>
 800c07e:	68e2      	ldr	r2, [r4, #12]
 800c080:	4293      	cmp	r3, r2
 800c082:	f63f adcb 	bhi.w	800bc1c <icoLssHandler+0x28>
 800c086:	aa04      	add	r2, sp, #16
 800c088:	2104      	movs	r1, #4
 800c08a:	f241 0018 	movw	r0, #4120	; 0x1018
 800c08e:	f000 fe24 	bl	800ccda <coOdGetObj_u32>
 800c092:	2800      	cmp	r0, #0
 800c094:	f47f adc2 	bne.w	800bc1c <icoLssHandler+0x28>
 800c098:	9b04      	ldr	r3, [sp, #16]
 800c09a:	6922      	ldr	r2, [r4, #16]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	f63f adbd 	bhi.w	800bc1c <icoLssHandler+0x28>
 800c0a2:	6962      	ldr	r2, [r4, #20]
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	f63f adb9 	bhi.w	800bc1c <icoLssHandler+0x28>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c0b0:	234f      	movs	r3, #79	; 0x4f
 800c0b2:	f88d 3014 	strb.w	r3, [sp, #20]
 800c0b6:	e661      	b.n	800bd7c <icoLssHandler+0x188>
 800c0b8:	200085e4 	.word	0x200085e4
 800c0bc:	200085e8 	.word	0x200085e8
 800c0c0:	200085ec 	.word	0x200085ec
 800c0c4:	200085e0 	.word	0x200085e0
 800c0c8:	200085dc 	.word	0x200085dc
 800c0cc:	200085da 	.word	0x200085da
 800c0d0:	200085f0 	.word	0x200085f0
 800c0d4:	200085f4 	.word	0x200085f4
 800c0d8:	200085f8 	.word	0x200085f8
 800c0dc:	200085fc 	.word	0x200085fc
 800c0e0:	20008600 	.word	0x20008600

0800c0e4 <icoLssReset>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	480b      	ldr	r0, [pc, #44]	; (800c118 <icoLssReset+0x34>)
 800c0ea:	2308      	movs	r3, #8
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800c0f2:	8800      	ldrh	r0, [r0, #0]
 800c0f4:	f003 fe7a 	bl	800fdec <icoCobSet>
 800c0f8:	4808      	ldr	r0, [pc, #32]	; (800c11c <icoLssReset+0x38>)
 800c0fa:	2308      	movs	r3, #8
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f240 71e5 	movw	r1, #2021	; 0x7e5
 800c102:	8800      	ldrh	r0, [r0, #0]
 800c104:	f003 fe72 	bl	800fdec <icoCobSet>
 800c108:	4b05      	ldr	r3, [pc, #20]	; (800c120 <icoLssReset+0x3c>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	7023      	strb	r3, [r4, #0]
 800c10e:	4b05      	ldr	r3, [pc, #20]	; (800c124 <icoLssReset+0x40>)
 800c110:	2200      	movs	r2, #0
 800c112:	701a      	strb	r2, [r3, #0]
 800c114:	bd10      	pop	{r4, pc}
 800c116:	bf00      	nop
 800c118:	200085dc 	.word	0x200085dc
 800c11c:	200085d8 	.word	0x200085d8
 800c120:	200085d6 	.word	0x200085d6
 800c124:	200085da 	.word	0x200085da

0800c128 <icoLssResetAppl>:
 800c128:	b508      	push	{r3, lr}
 800c12a:	f000 f8bd 	bl	800c2a8 <icoNmtPersistantNodeIdGet>
 800c12e:	4b01      	ldr	r3, [pc, #4]	; (800c134 <icoLssResetAppl+0xc>)
 800c130:	7018      	strb	r0, [r3, #0]
 800c132:	bd08      	pop	{r3, pc}
 800c134:	200085d6 	.word	0x200085d6

0800c138 <icoLssVarInit>:
 800c138:	4a05      	ldr	r2, [pc, #20]	; (800c150 <icoLssVarInit+0x18>)
 800c13a:	4906      	ldr	r1, [pc, #24]	; (800c154 <icoLssVarInit+0x1c>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	7013      	strb	r3, [r2, #0]
 800c140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c144:	800a      	strh	r2, [r1, #0]
 800c146:	4904      	ldr	r1, [pc, #16]	; (800c158 <icoLssVarInit+0x20>)
 800c148:	800a      	strh	r2, [r1, #0]
 800c14a:	4a04      	ldr	r2, [pc, #16]	; (800c15c <icoLssVarInit+0x24>)
 800c14c:	8013      	strh	r3, [r2, #0]
 800c14e:	4770      	bx	lr
 800c150:	200085d2 	.word	0x200085d2
 800c154:	200085dc 	.word	0x200085dc
 800c158:	200085d8 	.word	0x200085d8
 800c15c:	200085d0 	.word	0x200085d0

0800c160 <coLssInit>:
 800c160:	b513      	push	{r0, r1, r4, lr}
 800c162:	2200      	movs	r2, #0
 800c164:	23ff      	movs	r3, #255	; 0xff
 800c166:	210e      	movs	r1, #14
 800c168:	4610      	mov	r0, r2
 800c16a:	f88d 3007 	strb.w	r3, [sp, #7]
 800c16e:	f003 fe11 	bl	800fd94 <icoCobCreate>
 800c172:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <coLssInit+0x44>)
 800c178:	42a0      	cmp	r0, r4
 800c17a:	8018      	strh	r0, [r3, #0]
 800c17c:	d102      	bne.n	800c184 <coLssInit+0x24>
 800c17e:	2032      	movs	r0, #50	; 0x32
 800c180:	b002      	add	sp, #8
 800c182:	bd10      	pop	{r4, pc}
 800c184:	2200      	movs	r2, #0
 800c186:	210f      	movs	r1, #15
 800c188:	2001      	movs	r0, #1
 800c18a:	f003 fe03 	bl	800fd94 <icoCobCreate>
 800c18e:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <coLssInit+0x48>)
 800c190:	42a0      	cmp	r0, r4
 800c192:	8018      	strh	r0, [r3, #0]
 800c194:	d0f3      	beq.n	800c17e <coLssInit+0x1e>
 800c196:	f10d 0007 	add.w	r0, sp, #7
 800c19a:	f7ff ffa3 	bl	800c0e4 <icoLssReset>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e7ee      	b.n	800c180 <coLssInit+0x20>
 800c1a2:	bf00      	nop
 800c1a4:	200085dc 	.word	0x200085dc
 800c1a8:	200085d8 	.word	0x200085d8

0800c1ac <nmtResetAppl>:
 800c1ac:	b508      	push	{r3, lr}
 800c1ae:	f7ff fb33 	bl	800b818 <icoEventInit>
 800c1b2:	f7ff ffb9 	bl	800c128 <icoLssResetAppl>
 800c1b6:	f649 71ff 	movw	r1, #40959	; 0x9fff
 800c1ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c1be:	f000 ffa9 	bl	800d114 <icoOdReset>
 800c1c2:	2003      	movs	r0, #3
 800c1c4:	f003 fb3d 	bl	800f842 <icoStoreLoadReq>
 800c1c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c1cc:	f002 bdca 	b.w	800ed64 <coQueueInit>

0800c1d0 <nmtReset>:
 800c1d0:	4b04      	ldr	r3, [pc, #16]	; (800c1e4 <nmtReset+0x14>)
 800c1d2:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <nmtReset+0x18>)
 800c1d4:	2280      	movs	r2, #128	; 0x80
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2302      	movs	r3, #2
 800c1dc:	4611      	mov	r1, r2
 800c1de:	8800      	ldrh	r0, [r0, #0]
 800c1e0:	f003 be04 	b.w	800fdec <icoCobSet>
 800c1e4:	20000016 	.word	0x20000016
 800c1e8:	20008608 	.word	0x20008608

0800c1ec <icoNmtStateChange>:
 800c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f0:	4f21      	ldr	r7, [pc, #132]	; (800c278 <icoNmtStateChange+0x8c>)
 800c1f2:	783b      	ldrb	r3, [r7, #0]
 800c1f4:	4283      	cmp	r3, r0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	d022      	beq.n	800c240 <icoNmtStateChange+0x54>
 800c1fa:	4a20      	ldr	r2, [pc, #128]	; (800c27c <icoNmtStateChange+0x90>)
 800c1fc:	f992 2000 	ldrsb.w	r2, [r2]
 800c200:	2a00      	cmp	r2, #0
 800c202:	dd1d      	ble.n	800c240 <icoNmtStateChange+0x54>
 800c204:	2901      	cmp	r1, #1
 800c206:	d001      	beq.n	800c20c <icoNmtStateChange+0x20>
 800c208:	2b05      	cmp	r3, #5
 800c20a:	d119      	bne.n	800c240 <icoNmtStateChange+0x54>
 800c20c:	2c05      	cmp	r4, #5
 800c20e:	4e1c      	ldr	r6, [pc, #112]	; (800c280 <icoNmtStateChange+0x94>)
 800c210:	d008      	beq.n	800c224 <icoNmtStateChange+0x38>
 800c212:	2c05      	cmp	r4, #5
 800c214:	703c      	strb	r4, [r7, #0]
 800c216:	d021      	beq.n	800c25c <icoNmtStateChange+0x70>
 800c218:	2c7f      	cmp	r4, #127	; 0x7f
 800c21a:	d013      	beq.n	800c244 <icoNmtStateChange+0x58>
 800c21c:	2c04      	cmp	r4, #4
 800c21e:	d114      	bne.n	800c24a <icoNmtStateChange+0x5e>
 800c220:	2002      	movs	r0, #2
 800c222:	e010      	b.n	800c246 <icoNmtStateChange+0x5a>
 800c224:	7835      	ldrb	r5, [r6, #0]
 800c226:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c284 <icoNmtStateChange+0x98>
 800c22a:	2d00      	cmp	r5, #0
 800c22c:	d0f1      	beq.n	800c212 <icoNmtStateChange+0x26>
 800c22e:	3d01      	subs	r5, #1
 800c230:	b2ed      	uxtb	r5, r5
 800c232:	2105      	movs	r1, #5
 800c234:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 800c238:	2000      	movs	r0, #0
 800c23a:	4798      	blx	r3
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0f4      	beq.n	800c22a <icoNmtStateChange+0x3e>
 800c240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c244:	2005      	movs	r0, #5
 800c246:	f7ff fb95 	bl	800b974 <coLedSetGreen>
 800c24a:	7835      	ldrb	r5, [r6, #0]
 800c24c:	4e0d      	ldr	r6, [pc, #52]	; (800c284 <icoNmtStateChange+0x98>)
 800c24e:	b93d      	cbnz	r5, 800c260 <icoNmtStateChange+0x74>
 800c250:	2c05      	cmp	r4, #5
 800c252:	d10d      	bne.n	800c270 <icoNmtStateChange+0x84>
 800c254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c258:	f001 bf3e 	b.w	800e0d8 <icoPdoOperational>
 800c25c:	2006      	movs	r0, #6
 800c25e:	e7f2      	b.n	800c246 <icoNmtStateChange+0x5a>
 800c260:	3d01      	subs	r5, #1
 800c262:	b2ed      	uxtb	r5, r5
 800c264:	4621      	mov	r1, r4
 800c266:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c26a:	2001      	movs	r0, #1
 800c26c:	4798      	blx	r3
 800c26e:	e7ee      	b.n	800c24e <icoNmtStateChange+0x62>
 800c270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c274:	f001 bf50 	b.w	800e118 <icoPdoPreOperational>
 800c278:	20000016 	.word	0x20000016
 800c27c:	20000017 	.word	0x20000017
 800c280:	20008610 	.word	0x20008610
 800c284:	2000860c 	.word	0x2000860c

0800c288 <coEventRegister_NMT>:
 800c288:	4a05      	ldr	r2, [pc, #20]	; (800c2a0 <coEventRegister_NMT+0x18>)
 800c28a:	7813      	ldrb	r3, [r2, #0]
 800c28c:	b92b      	cbnz	r3, 800c29a <coEventRegister_NMT+0x12>
 800c28e:	4905      	ldr	r1, [pc, #20]	; (800c2a4 <coEventRegister_NMT+0x1c>)
 800c290:	6008      	str	r0, [r1, #0]
 800c292:	2101      	movs	r1, #1
 800c294:	7011      	strb	r1, [r2, #0]
 800c296:	4618      	mov	r0, r3
 800c298:	4770      	bx	lr
 800c29a:	200d      	movs	r0, #13
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	20008610 	.word	0x20008610
 800c2a4:	2000860c 	.word	0x2000860c

0800c2a8 <icoNmtPersistantNodeIdGet>:
 800c2a8:	4b03      	ldr	r3, [pc, #12]	; (800c2b8 <icoNmtPersistantNodeIdGet+0x10>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	b103      	cbz	r3, 800c2b0 <icoNmtPersistantNodeIdGet+0x8>
 800c2ae:	4718      	bx	r3
 800c2b0:	4b02      	ldr	r3, [pc, #8]	; (800c2bc <icoNmtPersistantNodeIdGet+0x14>)
 800c2b2:	7818      	ldrb	r0, [r3, #0]
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	20008614 	.word	0x20008614
 800c2bc:	20008618 	.word	0x20008618

0800c2c0 <nmtResetComm>:
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	f7ff fff1 	bl	800c2a8 <icoNmtPersistantNodeIdGet>
 800c2c6:	4c1e      	ldr	r4, [pc, #120]	; (800c340 <nmtResetComm+0x80>)
 800c2c8:	7020      	strb	r0, [r4, #0]
 800c2ca:	f003 fe4b 	bl	800ff64 <icoCobDisableAll>
 800c2ce:	f7ff ff7f 	bl	800c1d0 <nmtReset>
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f7ff ff06 	bl	800c0e4 <icoLssReset>
 800c2d8:	f994 3000 	ldrsb.w	r3, [r4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	dd2d      	ble.n	800c33c <nmtResetComm+0x7c>
 800c2e0:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800c2e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c2e8:	f000 ff14 	bl	800d114 <icoOdReset>
 800c2ec:	f003 fa0c 	bl	800f708 <icoSdoServerSetDefaultValue>
 800c2f0:	f001 ff8c 	bl	800e20c <icoPdoSetDefaultValue>
 800c2f4:	f7ff f9f0 	bl	800b6d8 <icoErrorCtrlSetDefaultValue>
 800c2f8:	f003 fbbe 	bl	800fa78 <icoSyncSetDefaultValue>
 800c2fc:	f7fe ff9a 	bl	800b234 <icoEmcyProducerSetDefaultValue>
 800c300:	f7ff f812 	bl	800b328 <icoEmcyConsumerSetDefaultValue>
 800c304:	2002      	movs	r0, #2
 800c306:	f003 fa9c 	bl	800f842 <icoStoreLoadReq>
 800c30a:	f003 f9d5 	bl	800f6b8 <icoSdoServerReset>
 800c30e:	f001 ff1b 	bl	800e148 <icoPdoReset>
 800c312:	2101      	movs	r1, #1
 800c314:	2081      	movs	r0, #129	; 0x81
 800c316:	f7ff ff69 	bl	800c1ec <icoNmtStateChange>
 800c31a:	2101      	movs	r1, #1
 800c31c:	207f      	movs	r0, #127	; 0x7f
 800c31e:	f7ff ff65 	bl	800c1ec <icoNmtStateChange>
 800c322:	f7ff f9b1 	bl	800b688 <icoErrorCtrlReset>
 800c326:	f003 fb7e 	bl	800fa26 <icoSyncReset>
 800c32a:	f7fe ff77 	bl	800b21c <icoEmcyReset>
 800c32e:	f7fe ffe1 	bl	800b2f4 <icoEmcyConsumerReset>
 800c332:	2000      	movs	r0, #0
 800c334:	f7ff f85c 	bl	800b3f0 <icoHbProdStart>
 800c338:	2000      	movs	r0, #0
 800c33a:	bd10      	pop	{r4, pc}
 800c33c:	200f      	movs	r0, #15
 800c33e:	e7fc      	b.n	800c33a <nmtResetComm+0x7a>
 800c340:	20000017 	.word	0x20000017

0800c344 <icoNmtMsgHandler>:
 800c344:	6843      	ldr	r3, [r0, #4]
 800c346:	b510      	push	{r4, lr}
 800c348:	4604      	mov	r4, r0
 800c34a:	b983      	cbnz	r3, 800c36e <icoNmtMsgHandler+0x2a>
 800c34c:	7a43      	ldrb	r3, [r0, #9]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d132      	bne.n	800c3b8 <icoNmtMsgHandler+0x74>
 800c352:	4a1a      	ldr	r2, [pc, #104]	; (800c3bc <icoNmtMsgHandler+0x78>)
 800c354:	7ac3      	ldrb	r3, [r0, #11]
 800c356:	7812      	ldrb	r2, [r2, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d000      	beq.n	800c35e <icoNmtMsgHandler+0x1a>
 800c35c:	bb63      	cbnz	r3, 800c3b8 <icoNmtMsgHandler+0x74>
 800c35e:	7aa1      	ldrb	r1, [r4, #10]
 800c360:	2980      	cmp	r1, #128	; 0x80
 800c362:	d018      	beq.n	800c396 <icoNmtMsgHandler+0x52>
 800c364:	d80f      	bhi.n	800c386 <icoNmtMsgHandler+0x42>
 800c366:	2901      	cmp	r1, #1
 800c368:	d018      	beq.n	800c39c <icoNmtMsgHandler+0x58>
 800c36a:	2902      	cmp	r1, #2
 800c36c:	d01a      	beq.n	800c3a4 <icoNmtMsgHandler+0x60>
 800c36e:	6863      	ldr	r3, [r4, #4]
 800c370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c374:	d920      	bls.n	800c3b8 <icoNmtMsgHandler+0x74>
 800c376:	7a63      	ldrb	r3, [r4, #9]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d11d      	bne.n	800c3b8 <icoNmtMsgHandler+0x74>
 800c37c:	4620      	mov	r0, r4
 800c37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c382:	f7ff b903 	b.w	800b58c <icoNmtErrorCtrlHandler>
 800c386:	2981      	cmp	r1, #129	; 0x81
 800c388:	d00f      	beq.n	800c3aa <icoNmtMsgHandler+0x66>
 800c38a:	2982      	cmp	r1, #130	; 0x82
 800c38c:	d1ef      	bne.n	800c36e <icoNmtMsgHandler+0x2a>
 800c38e:	f7ff ff97 	bl	800c2c0 <nmtResetComm>
 800c392:	2800      	cmp	r0, #0
 800c394:	d1eb      	bne.n	800c36e <icoNmtMsgHandler+0x2a>
 800c396:	2101      	movs	r1, #1
 800c398:	207f      	movs	r0, #127	; 0x7f
 800c39a:	e000      	b.n	800c39e <icoNmtMsgHandler+0x5a>
 800c39c:	2005      	movs	r0, #5
 800c39e:	f7ff ff25 	bl	800c1ec <icoNmtStateChange>
 800c3a2:	e7e4      	b.n	800c36e <icoNmtMsgHandler+0x2a>
 800c3a4:	2101      	movs	r1, #1
 800c3a6:	2004      	movs	r0, #4
 800c3a8:	e7f9      	b.n	800c39e <icoNmtMsgHandler+0x5a>
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	2080      	movs	r0, #128	; 0x80
 800c3ae:	f7ff ff1d 	bl	800c1ec <icoNmtStateChange>
 800c3b2:	f7ff fefb 	bl	800c1ac <nmtResetAppl>
 800c3b6:	e7ea      	b.n	800c38e <icoNmtMsgHandler+0x4a>
 800c3b8:	bd10      	pop	{r4, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20000017 	.word	0x20000017

0800c3c0 <coNmtGetNodeId>:
 800c3c0:	4b01      	ldr	r3, [pc, #4]	; (800c3c8 <coNmtGetNodeId+0x8>)
 800c3c2:	7818      	ldrb	r0, [r3, #0]
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	20000017 	.word	0x20000017

0800c3cc <coNmtGetState>:
 800c3cc:	4b01      	ldr	r3, [pc, #4]	; (800c3d4 <coNmtGetState+0x8>)
 800c3ce:	7818      	ldrb	r0, [r3, #0]
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	20000016 	.word	0x20000016

0800c3d8 <icoNmtVarInit>:
 800c3d8:	4b09      	ldr	r3, [pc, #36]	; (800c400 <icoNmtVarInit+0x28>)
 800c3da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3de:	801a      	strh	r2, [r3, #0]
 800c3e0:	4b08      	ldr	r3, [pc, #32]	; (800c404 <icoNmtVarInit+0x2c>)
 800c3e2:	7802      	ldrb	r2, [r0, #0]
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	4b08      	ldr	r3, [pc, #32]	; (800c408 <icoNmtVarInit+0x30>)
 800c3e8:	680a      	ldr	r2, [r1, #0]
 800c3ea:	601a      	str	r2, [r3, #0]
 800c3ec:	4b07      	ldr	r3, [pc, #28]	; (800c40c <icoNmtVarInit+0x34>)
 800c3ee:	227f      	movs	r2, #127	; 0x7f
 800c3f0:	701a      	strb	r2, [r3, #0]
 800c3f2:	4b07      	ldr	r3, [pc, #28]	; (800c410 <icoNmtVarInit+0x38>)
 800c3f4:	2280      	movs	r2, #128	; 0x80
 800c3f6:	701a      	strb	r2, [r3, #0]
 800c3f8:	4b06      	ldr	r3, [pc, #24]	; (800c414 <icoNmtVarInit+0x3c>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	701a      	strb	r2, [r3, #0]
 800c3fe:	4770      	bx	lr
 800c400:	20008608 	.word	0x20008608
 800c404:	20008618 	.word	0x20008618
 800c408:	20008614 	.word	0x20008614
 800c40c:	20000017 	.word	0x20000017
 800c410:	20000016 	.word	0x20000016
 800c414:	20008610 	.word	0x20008610

0800c418 <coNmtInit>:
 800c418:	b510      	push	{r4, lr}
 800c41a:	4602      	mov	r2, r0
 800c41c:	4c0b      	ldr	r4, [pc, #44]	; (800c44c <coNmtInit+0x34>)
 800c41e:	b180      	cbz	r0, 800c442 <coNmtInit+0x2a>
 800c420:	2200      	movs	r2, #0
 800c422:	2102      	movs	r1, #2
 800c424:	4610      	mov	r0, r2
 800c426:	f003 fcb5 	bl	800fd94 <icoCobCreate>
 800c42a:	8020      	strh	r0, [r4, #0]
 800c42c:	8822      	ldrh	r2, [r4, #0]
 800c42e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c432:	429a      	cmp	r2, r3
 800c434:	d008      	beq.n	800c448 <coNmtInit+0x30>
 800c436:	f7ff feb9 	bl	800c1ac <nmtResetAppl>
 800c43a:	f7ff ff41 	bl	800c2c0 <nmtResetComm>
 800c43e:	2000      	movs	r0, #0
 800c440:	bd10      	pop	{r4, pc}
 800c442:	2102      	movs	r1, #2
 800c444:	2001      	movs	r0, #1
 800c446:	e7ee      	b.n	800c426 <coNmtInit+0xe>
 800c448:	2032      	movs	r0, #50	; 0x32
 800c44a:	e7f9      	b.n	800c440 <coNmtInit+0x28>
 800c44c:	20008608 	.word	0x20008608

0800c450 <odGetObjDescIdx>:
 800c450:	4b39      	ldr	r3, [pc, #228]	; (800c538 <odGetObjDescIdx+0xe8>)
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d068      	beq.n	800c52e <odGetObjDescIdx+0xde>
 800c45c:	4c37      	ldr	r4, [pc, #220]	; (800c53c <odGetObjDescIdx+0xec>)
 800c45e:	f04f 0e00 	mov.w	lr, #0
 800c462:	3b01      	subs	r3, #1
 800c464:	6824      	ldr	r4, [r4, #0]
 800c466:	b29b      	uxth	r3, r3
 800c468:	4677      	mov	r7, lr
 800c46a:	4675      	mov	r5, lr
 800c46c:	18ee      	adds	r6, r5, r3
 800c46e:	1076      	asrs	r6, r6, #1
 800c470:	fa1f fc86 	uxth.w	ip, r6
 800c474:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 800c478:	f834 6036 	ldrh.w	r6, [r4, r6, lsl #3]
 800c47c:	4286      	cmp	r6, r0
 800c47e:	d03f      	beq.n	800c500 <odGetObjDescIdx+0xb0>
 800c480:	d946      	bls.n	800c510 <odGetObjDescIdx+0xc0>
 800c482:	fabc f68c 	clz	r6, ip
 800c486:	f10c 33ff 	add.w	r3, ip, #4294967295
 800c48a:	0976      	lsrs	r6, r6, #5
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	b90e      	cbnz	r6, 800c494 <odGetObjDescIdx+0x44>
 800c490:	429d      	cmp	r5, r3
 800c492:	d9eb      	bls.n	800c46c <odGetObjDescIdx+0x1c>
 800c494:	f1be 0f00 	cmp.w	lr, #0
 800c498:	d049      	beq.n	800c52e <odGetObjDescIdx+0xde>
 800c49a:	f8b8 e006 	ldrh.w	lr, [r8, #6]
 800c49e:	f898 6002 	ldrb.w	r6, [r8, #2]
 800c4a2:	f10e 33ff 	add.w	r3, lr, #4294967295
 800c4a6:	441e      	add	r6, r3
 800c4a8:	4b25      	ldr	r3, [pc, #148]	; (800c540 <odGetObjDescIdx+0xf0>)
 800c4aa:	681d      	ldr	r5, [r3, #0]
 800c4ac:	b2b6      	uxth	r6, r6
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	45b6      	cmp	lr, r6
 800c4b2:	d811      	bhi.n	800c4d8 <odGetObjDescIdx+0x88>
 800c4b4:	eb0e 0306 	add.w	r3, lr, r6
 800c4b8:	105b      	asrs	r3, r3, #1
 800c4ba:	fa1f fc83 	uxth.w	ip, r3
 800c4be:	f815 8033 	ldrb.w	r8, [r5, r3, lsl #3]
 800c4c2:	4588      	cmp	r8, r1
 800c4c4:	d026      	beq.n	800c514 <odGetObjDescIdx+0xc4>
 800c4c6:	d92c      	bls.n	800c522 <odGetObjDescIdx+0xd2>
 800c4c8:	fab3 f383 	clz	r3, r3
 800c4cc:	f10c 36ff 	add.w	r6, ip, #4294967295
 800c4d0:	095b      	lsrs	r3, r3, #5
 800c4d2:	b2b6      	uxth	r6, r6
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d0eb      	beq.n	800c4b0 <odGetObjDescIdx+0x60>
 800c4d8:	bb28      	cbnz	r0, 800c526 <odGetObjDescIdx+0xd6>
 800c4da:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 800c4de:	78e3      	ldrb	r3, [r4, #3]
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	d326      	bcc.n	800c532 <odGetObjDescIdx+0xe2>
 800c4e4:	88e3      	ldrh	r3, [r4, #6]
 800c4e6:	78a1      	ldrb	r1, [r4, #2]
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	fa11 f383 	uxtah	r3, r1, r3
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 800c4f4:	8889      	ldrh	r1, [r1, #4]
 800c4f6:	0549      	lsls	r1, r1, #21
 800c4f8:	d51b      	bpl.n	800c532 <odGetObjDescIdx+0xe2>
 800c4fa:	8013      	strh	r3, [r2, #0]
 800c4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c500:	f04f 0e01 	mov.w	lr, #1
 800c504:	4667      	mov	r7, ip
 800c506:	4676      	mov	r6, lr
 800c508:	f10c 0501 	add.w	r5, ip, #1
 800c50c:	b2ad      	uxth	r5, r5
 800c50e:	e7be      	b.n	800c48e <odGetObjDescIdx+0x3e>
 800c510:	2600      	movs	r6, #0
 800c512:	e7f9      	b.n	800c508 <odGetObjDescIdx+0xb8>
 800c514:	2001      	movs	r0, #1
 800c516:	4603      	mov	r3, r0
 800c518:	f10c 0e01 	add.w	lr, ip, #1
 800c51c:	fa1f fe8e 	uxth.w	lr, lr
 800c520:	e7d8      	b.n	800c4d4 <odGetObjDescIdx+0x84>
 800c522:	2300      	movs	r3, #0
 800c524:	e7f8      	b.n	800c518 <odGetObjDescIdx+0xc8>
 800c526:	f8a2 c000 	strh.w	ip, [r2]
 800c52a:	2000      	movs	r0, #0
 800c52c:	e7e6      	b.n	800c4fc <odGetObjDescIdx+0xac>
 800c52e:	2014      	movs	r0, #20
 800c530:	e7e4      	b.n	800c4fc <odGetObjDescIdx+0xac>
 800c532:	2015      	movs	r0, #21
 800c534:	e7e2      	b.n	800c4fc <odGetObjDescIdx+0xac>
 800c536:	bf00      	nop
 800c538:	20008626 	.word	0x20008626
 800c53c:	2000862c 	.word	0x2000862c
 800c540:	20008628 	.word	0x20008628

0800c544 <odGetObjAddr>:
 800c544:	4602      	mov	r2, r0
 800c546:	8840      	ldrh	r0, [r0, #2]
 800c548:	8893      	ldrh	r3, [r2, #4]
 800c54a:	055b      	lsls	r3, r3, #21
 800c54c:	bf42      	ittt	mi
 800c54e:	1843      	addmi	r3, r0, r1
 800c550:	7811      	ldrbmi	r1, [r2, #0]
 800c552:	1a5b      	submi	r3, r3, r1
 800c554:	7851      	ldrb	r1, [r2, #1]
 800c556:	bf4c      	ite	mi
 800c558:	b29b      	uxthmi	r3, r3
 800c55a:	4603      	movpl	r3, r0
 800c55c:	294b      	cmp	r1, #75	; 0x4b
 800c55e:	d875      	bhi.n	800c64c <odGetObjAddr+0x108>
 800c560:	e8df f001 	tbb	[pc, r1]
 800c564:	263c7426 	.word	0x263c7426
 800c568:	742c3c74 	.word	0x742c3c74
 800c56c:	74747443 	.word	0x74747443
 800c570:	74457433 	.word	0x74457433
 800c574:	74747474 	.word	0x74747474
 800c578:	74747474 	.word	0x74747474
 800c57c:	494d7447 	.word	0x494d7447
 800c580:	744b4f74 	.word	0x744b4f74
 800c584:	59555751 	.word	0x59555751
 800c588:	745d5d5b 	.word	0x745d5d5b
 800c58c:	60606074 	.word	0x60606074
 800c590:	63666666 	.word	0x63666666
 800c594:	6c696963 	.word	0x6c696963
 800c598:	6f6f6c6c 	.word	0x6f6f6c6c
 800c59c:	74717171 	.word	0x74717171
 800c5a0:	74747474 	.word	0x74747474
 800c5a4:	74747474 	.word	0x74747474
 800c5a8:	74747474 	.word	0x74747474
 800c5ac:	53743a74 	.word	0x53743a74
 800c5b0:	4a27      	ldr	r2, [pc, #156]	; (800c650 <odGetObjAddr+0x10c>)
 800c5b2:	6810      	ldr	r0, [r2, #0]
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d04a      	beq.n	800c64e <odGetObjAddr+0x10a>
 800c5b8:	4418      	add	r0, r3
 800c5ba:	4770      	bx	lr
 800c5bc:	4a25      	ldr	r2, [pc, #148]	; (800c654 <odGetObjAddr+0x110>)
 800c5be:	6810      	ldr	r0, [r2, #0]
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d044      	beq.n	800c64e <odGetObjAddr+0x10a>
 800c5c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c5c8:	4770      	bx	lr
 800c5ca:	4a23      	ldr	r2, [pc, #140]	; (800c658 <odGetObjAddr+0x114>)
 800c5cc:	6810      	ldr	r0, [r2, #0]
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d03d      	beq.n	800c64e <odGetObjAddr+0x10a>
 800c5d2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c5d6:	4770      	bx	lr
 800c5d8:	4a20      	ldr	r2, [pc, #128]	; (800c65c <odGetObjAddr+0x118>)
 800c5da:	e7f7      	b.n	800c5cc <odGetObjAddr+0x88>
 800c5dc:	4a20      	ldr	r2, [pc, #128]	; (800c660 <odGetObjAddr+0x11c>)
 800c5de:	6810      	ldr	r0, [r2, #0]
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d034      	beq.n	800c64e <odGetObjAddr+0x10a>
 800c5e4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c5e8:	4770      	bx	lr
 800c5ea:	4a1e      	ldr	r2, [pc, #120]	; (800c664 <odGetObjAddr+0x120>)
 800c5ec:	e7f7      	b.n	800c5de <odGetObjAddr+0x9a>
 800c5ee:	4a1e      	ldr	r2, [pc, #120]	; (800c668 <odGetObjAddr+0x124>)
 800c5f0:	e7f5      	b.n	800c5de <odGetObjAddr+0x9a>
 800c5f2:	4a1e      	ldr	r2, [pc, #120]	; (800c66c <odGetObjAddr+0x128>)
 800c5f4:	e7dd      	b.n	800c5b2 <odGetObjAddr+0x6e>
 800c5f6:	4a1e      	ldr	r2, [pc, #120]	; (800c670 <odGetObjAddr+0x12c>)
 800c5f8:	e7e1      	b.n	800c5be <odGetObjAddr+0x7a>
 800c5fa:	4a1e      	ldr	r2, [pc, #120]	; (800c674 <odGetObjAddr+0x130>)
 800c5fc:	e7e6      	b.n	800c5cc <odGetObjAddr+0x88>
 800c5fe:	4a1e      	ldr	r2, [pc, #120]	; (800c678 <odGetObjAddr+0x134>)
 800c600:	e7ed      	b.n	800c5de <odGetObjAddr+0x9a>
 800c602:	4a1e      	ldr	r2, [pc, #120]	; (800c67c <odGetObjAddr+0x138>)
 800c604:	e7eb      	b.n	800c5de <odGetObjAddr+0x9a>
 800c606:	4a1e      	ldr	r2, [pc, #120]	; (800c680 <odGetObjAddr+0x13c>)
 800c608:	e7e9      	b.n	800c5de <odGetObjAddr+0x9a>
 800c60a:	4a1e      	ldr	r2, [pc, #120]	; (800c684 <odGetObjAddr+0x140>)
 800c60c:	e7e7      	b.n	800c5de <odGetObjAddr+0x9a>
 800c60e:	4a1e      	ldr	r2, [pc, #120]	; (800c688 <odGetObjAddr+0x144>)
 800c610:	e7e5      	b.n	800c5de <odGetObjAddr+0x9a>
 800c612:	4a1e      	ldr	r2, [pc, #120]	; (800c68c <odGetObjAddr+0x148>)
 800c614:	e7e3      	b.n	800c5de <odGetObjAddr+0x9a>
 800c616:	4a1e      	ldr	r2, [pc, #120]	; (800c690 <odGetObjAddr+0x14c>)
 800c618:	e7e1      	b.n	800c5de <odGetObjAddr+0x9a>
 800c61a:	4a1e      	ldr	r2, [pc, #120]	; (800c694 <odGetObjAddr+0x150>)
 800c61c:	e7df      	b.n	800c5de <odGetObjAddr+0x9a>
 800c61e:	7811      	ldrb	r1, [r2, #0]
 800c620:	f002 bfc2 	b.w	800f5a8 <icoSdoGetObjectAddr>
 800c624:	7811      	ldrb	r1, [r2, #0]
 800c626:	f001 bc77 	b.w	800df18 <icoTrPdoGetObjectAddr>
 800c62a:	7811      	ldrb	r1, [r2, #0]
 800c62c:	f001 bc8b 	b.w	800df46 <icoTrMapGetObjectAddr>
 800c630:	7811      	ldrb	r1, [r2, #0]
 800c632:	f001 bad9 	b.w	800dbe8 <icoRecPdoGetObjectAddr>
 800c636:	7811      	ldrb	r1, [r2, #0]
 800c638:	f001 baeb 	b.w	800dc12 <icoRecMapGetObjectAddr>
 800c63c:	7811      	ldrb	r1, [r2, #0]
 800c63e:	f7fe bf0f 	b.w	800b460 <icoErrCtrlGetObjectAddr>
 800c642:	f003 b9a3 	b.w	800f98c <icoSyncGetObjectAddr>
 800c646:	7811      	ldrb	r1, [r2, #0]
 800c648:	f7fe bd5e 	b.w	800b108 <icoEmcyGetObjectAddr>
 800c64c:	2000      	movs	r0, #0
 800c64e:	4770      	bx	lr
 800c650:	200086ac 	.word	0x200086ac
 800c654:	200086a4 	.word	0x200086a4
 800c658:	200086a8 	.word	0x200086a8
 800c65c:	200086a0 	.word	0x200086a0
 800c660:	20008690 	.word	0x20008690
 800c664:	20008688 	.word	0x20008688
 800c668:	2000868c 	.word	0x2000868c
 800c66c:	2000869c 	.word	0x2000869c
 800c670:	20008694 	.word	0x20008694
 800c674:	20008698 	.word	0x20008698
 800c678:	20008680 	.word	0x20008680
 800c67c:	20008678 	.word	0x20008678
 800c680:	2000867c 	.word	0x2000867c
 800c684:	20008684 	.word	0x20008684
 800c688:	20008630 	.word	0x20008630
 800c68c:	2000866c 	.word	0x2000866c
 800c690:	20008660 	.word	0x20008660
 800c694:	20008654 	.word	0x20008654

0800c698 <odGetObjAddr_R>:
 800c698:	b410      	push	{r4}
 800c69a:	4604      	mov	r4, r0
 800c69c:	8840      	ldrh	r0, [r0, #2]
 800c69e:	88a3      	ldrh	r3, [r4, #4]
 800c6a0:	055b      	lsls	r3, r3, #21
 800c6a2:	bf42      	ittt	mi
 800c6a4:	7822      	ldrbmi	r2, [r4, #0]
 800c6a6:	1843      	addmi	r3, r0, r1
 800c6a8:	1a9b      	submi	r3, r3, r2
 800c6aa:	7862      	ldrb	r2, [r4, #1]
 800c6ac:	bf4c      	ite	mi
 800c6ae:	b29b      	uxthmi	r3, r3
 800c6b0:	4603      	movpl	r3, r0
 800c6b2:	2a1c      	cmp	r2, #28
 800c6b4:	d035      	beq.n	800c722 <odGetObjAddr_R+0x8a>
 800c6b6:	d811      	bhi.n	800c6dc <odGetObjAddr_R+0x44>
 800c6b8:	2a07      	cmp	r2, #7
 800c6ba:	d024      	beq.n	800c706 <odGetObjAddr_R+0x6e>
 800c6bc:	d808      	bhi.n	800c6d0 <odGetObjAddr_R+0x38>
 800c6be:	2a01      	cmp	r2, #1
 800c6c0:	d01a      	beq.n	800c6f8 <odGetObjAddr_R+0x60>
 800c6c2:	2a04      	cmp	r2, #4
 800c6c4:	d018      	beq.n	800c6f8 <odGetObjAddr_R+0x60>
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6cc:	f7ff bf3a 	b.w	800c544 <odGetObjAddr>
 800c6d0:	2a0d      	cmp	r2, #13
 800c6d2:	d01f      	beq.n	800c714 <odGetObjAddr_R+0x7c>
 800c6d4:	2a19      	cmp	r2, #25
 800c6d6:	d1f6      	bne.n	800c6c6 <odGetObjAddr_R+0x2e>
 800c6d8:	4a18      	ldr	r2, [pc, #96]	; (800c73c <odGetObjAddr_R+0xa4>)
 800c6da:	e00e      	b.n	800c6fa <odGetObjAddr_R+0x62>
 800c6dc:	2a30      	cmp	r2, #48	; 0x30
 800c6de:	d805      	bhi.n	800c6ec <odGetObjAddr_R+0x54>
 800c6e0:	2a2f      	cmp	r2, #47	; 0x2f
 800c6e2:	d225      	bcs.n	800c730 <odGetObjAddr_R+0x98>
 800c6e4:	2a1f      	cmp	r2, #31
 800c6e6:	d1ee      	bne.n	800c6c6 <odGetObjAddr_R+0x2e>
 800c6e8:	4a15      	ldr	r2, [pc, #84]	; (800c740 <odGetObjAddr_R+0xa8>)
 800c6ea:	e014      	b.n	800c716 <odGetObjAddr_R+0x7e>
 800c6ec:	2a32      	cmp	r2, #50	; 0x32
 800c6ee:	d91a      	bls.n	800c726 <odGetObjAddr_R+0x8e>
 800c6f0:	2a4a      	cmp	r2, #74	; 0x4a
 800c6f2:	d1e8      	bne.n	800c6c6 <odGetObjAddr_R+0x2e>
 800c6f4:	4a13      	ldr	r2, [pc, #76]	; (800c744 <odGetObjAddr_R+0xac>)
 800c6f6:	e00e      	b.n	800c716 <odGetObjAddr_R+0x7e>
 800c6f8:	4a13      	ldr	r2, [pc, #76]	; (800c748 <odGetObjAddr_R+0xb0>)
 800c6fa:	6810      	ldr	r0, [r2, #0]
 800c6fc:	b100      	cbz	r0, 800c700 <odGetObjAddr_R+0x68>
 800c6fe:	4418      	add	r0, r3
 800c700:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c704:	4770      	bx	lr
 800c706:	4a11      	ldr	r2, [pc, #68]	; (800c74c <odGetObjAddr_R+0xb4>)
 800c708:	6810      	ldr	r0, [r2, #0]
 800c70a:	2800      	cmp	r0, #0
 800c70c:	d0f8      	beq.n	800c700 <odGetObjAddr_R+0x68>
 800c70e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c712:	e7f5      	b.n	800c700 <odGetObjAddr_R+0x68>
 800c714:	4a0e      	ldr	r2, [pc, #56]	; (800c750 <odGetObjAddr_R+0xb8>)
 800c716:	6810      	ldr	r0, [r2, #0]
 800c718:	2800      	cmp	r0, #0
 800c71a:	d0f1      	beq.n	800c700 <odGetObjAddr_R+0x68>
 800c71c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c720:	e7ee      	b.n	800c700 <odGetObjAddr_R+0x68>
 800c722:	4a0c      	ldr	r2, [pc, #48]	; (800c754 <odGetObjAddr_R+0xbc>)
 800c724:	e7f0      	b.n	800c708 <odGetObjAddr_R+0x70>
 800c726:	7821      	ldrb	r1, [r4, #0]
 800c728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c72c:	f001 ba7d 	b.w	800dc2a <icoRecMapGetObjectAddr_R>
 800c730:	7821      	ldrb	r1, [r4, #0]
 800c732:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c736:	f001 bc12 	b.w	800df5e <icoTrMapGetObjectAddr_R>
 800c73a:	bf00      	nop
 800c73c:	20008640 	.word	0x20008640
 800c740:	2000863c 	.word	0x2000863c
 800c744:	20008644 	.word	0x20008644
 800c748:	20008650 	.word	0x20008650
 800c74c:	20008648 	.word	0x20008648
 800c750:	2000864c 	.word	0x2000864c
 800c754:	20008638 	.word	0x20008638

0800c758 <checkObjValue_u8>:
 800c758:	7843      	ldrb	r3, [r0, #1]
 800c75a:	2b2f      	cmp	r3, #47	; 0x2f
 800c75c:	460a      	mov	r2, r1
 800c75e:	d023      	beq.n	800c7a8 <checkObjValue_u8+0x50>
 800c760:	d80e      	bhi.n	800c780 <checkObjValue_u8+0x28>
 800c762:	2b25      	cmp	r3, #37	; 0x25
 800c764:	d019      	beq.n	800c79a <checkObjValue_u8+0x42>
 800c766:	d803      	bhi.n	800c770 <checkObjValue_u8+0x18>
 800c768:	2b05      	cmp	r3, #5
 800c76a:	d910      	bls.n	800c78e <checkObjValue_u8+0x36>
 800c76c:	2016      	movs	r0, #22
 800c76e:	4770      	bx	lr
 800c770:	2b29      	cmp	r3, #41	; 0x29
 800c772:	d015      	beq.n	800c7a0 <checkObjValue_u8+0x48>
 800c774:	2b2c      	cmp	r3, #44	; 0x2c
 800c776:	d1f9      	bne.n	800c76c <checkObjValue_u8+0x14>
 800c778:	7801      	ldrb	r1, [r0, #0]
 800c77a:	8840      	ldrh	r0, [r0, #2]
 800c77c:	f001 ba61 	b.w	800dc42 <icoRecPdoCheckObjLimit_u8>
 800c780:	2b36      	cmp	r3, #54	; 0x36
 800c782:	d01d      	beq.n	800c7c0 <checkObjValue_u8+0x68>
 800c784:	d805      	bhi.n	800c792 <checkObjValue_u8+0x3a>
 800c786:	2b31      	cmp	r3, #49	; 0x31
 800c788:	d012      	beq.n	800c7b0 <checkObjValue_u8+0x58>
 800c78a:	2b33      	cmp	r3, #51	; 0x33
 800c78c:	d1ee      	bne.n	800c76c <checkObjValue_u8+0x14>
 800c78e:	2000      	movs	r0, #0
 800c790:	4770      	bx	lr
 800c792:	2b38      	cmp	r3, #56	; 0x38
 800c794:	d010      	beq.n	800c7b8 <checkObjValue_u8+0x60>
 800c796:	2b41      	cmp	r3, #65	; 0x41
 800c798:	e7f8      	b.n	800c78c <checkObjValue_u8+0x34>
 800c79a:	8840      	ldrh	r0, [r0, #2]
 800c79c:	f002 bf28 	b.w	800f5f0 <icoSdoCheckObjLimitNode>
 800c7a0:	7801      	ldrb	r1, [r0, #0]
 800c7a2:	8840      	ldrh	r0, [r0, #2]
 800c7a4:	f001 bbe7 	b.w	800df76 <icoTrPdoCheckObjLimit_u8>
 800c7a8:	7801      	ldrb	r1, [r0, #0]
 800c7aa:	8840      	ldrh	r0, [r0, #2]
 800c7ac:	f001 bc2c 	b.w	800e008 <icoTrMapCheckObjLimitMapTable>
 800c7b0:	7801      	ldrb	r1, [r0, #0]
 800c7b2:	8840      	ldrh	r0, [r0, #2]
 800c7b4:	f001 ba86 	b.w	800dcc4 <icoRecMapCheckObjLimitMapTable>
 800c7b8:	7801      	ldrb	r1, [r0, #0]
 800c7ba:	8840      	ldrh	r0, [r0, #2]
 800c7bc:	f7fe bd20 	b.w	800b200 <icoEmcyCheckObjLimitHist>
 800c7c0:	8840      	ldrh	r0, [r0, #2]
 800c7c2:	f003 b8f1 	b.w	800f9a8 <icoSyncCheckObjLimit_u8>

0800c7c6 <checkObjValue_u32>:
 800c7c6:	7843      	ldrb	r3, [r0, #1]
 800c7c8:	2b30      	cmp	r3, #48	; 0x30
 800c7ca:	460a      	mov	r2, r1
 800c7cc:	d02a      	beq.n	800c824 <checkObjValue_u32+0x5e>
 800c7ce:	d80e      	bhi.n	800c7ee <checkObjValue_u32+0x28>
 800c7d0:	2b26      	cmp	r3, #38	; 0x26
 800c7d2:	d020      	beq.n	800c816 <checkObjValue_u32+0x50>
 800c7d4:	d804      	bhi.n	800c7e0 <checkObjValue_u32+0x1a>
 800c7d6:	3b0c      	subs	r3, #12
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d92c      	bls.n	800c836 <checkObjValue_u32+0x70>
 800c7dc:	2016      	movs	r0, #22
 800c7de:	4770      	bx	lr
 800c7e0:	2b2b      	cmp	r3, #43	; 0x2b
 800c7e2:	d01c      	beq.n	800c81e <checkObjValue_u32+0x58>
 800c7e4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7e6:	d1f9      	bne.n	800c7dc <checkObjValue_u32+0x16>
 800c7e8:	8840      	ldrh	r0, [r0, #2]
 800c7ea:	f001 ba51 	b.w	800dc90 <icoRecPdoCheckObjLimitCobid>
 800c7ee:	2b37      	cmp	r3, #55	; 0x37
 800c7f0:	d01e      	beq.n	800c830 <checkObjValue_u32+0x6a>
 800c7f2:	d806      	bhi.n	800c802 <checkObjValue_u32+0x3c>
 800c7f4:	2b32      	cmp	r3, #50	; 0x32
 800c7f6:	d018      	beq.n	800c82a <checkObjValue_u32+0x64>
 800c7f8:	2b35      	cmp	r3, #53	; 0x35
 800c7fa:	d1ef      	bne.n	800c7dc <checkObjValue_u32+0x16>
 800c7fc:	7800      	ldrb	r0, [r0, #0]
 800c7fe:	f7fe be4f 	b.w	800b4a0 <icoErrCtrlCheckObjLimit>
 800c802:	2b3f      	cmp	r3, #63	; 0x3f
 800c804:	d017      	beq.n	800c836 <checkObjValue_u32+0x70>
 800c806:	2b43      	cmp	r3, #67	; 0x43
 800c808:	d015      	beq.n	800c836 <checkObjValue_u32+0x70>
 800c80a:	2b3a      	cmp	r3, #58	; 0x3a
 800c80c:	d1e6      	bne.n	800c7dc <checkObjValue_u32+0x16>
 800c80e:	7801      	ldrb	r1, [r0, #0]
 800c810:	8840      	ldrh	r0, [r0, #2]
 800c812:	f7fe bc97 	b.w	800b144 <icoEmcyCheckObjLimitCobid>
 800c816:	7801      	ldrb	r1, [r0, #0]
 800c818:	8840      	ldrh	r0, [r0, #2]
 800c81a:	f002 bef3 	b.w	800f604 <icoSdoCheckObjLimitCobId>
 800c81e:	8840      	ldrh	r0, [r0, #2]
 800c820:	f001 bbd8 	b.w	800dfd4 <icoTrPdoCheckObjLimitCobid>
 800c824:	8840      	ldrh	r0, [r0, #2]
 800c826:	f001 bc07 	b.w	800e038 <icoTrMapCheckObjLimitMapEntry>
 800c82a:	8840      	ldrh	r0, [r0, #2]
 800c82c:	f001 ba7a 	b.w	800dd24 <icoRecMapCheckObjLimitMapEntry>
 800c830:	8840      	ldrh	r0, [r0, #2]
 800c832:	f003 b8cf 	b.w	800f9d4 <icoSyncCheckObjLimit_u32>
 800c836:	2000      	movs	r0, #0
 800c838:	4770      	bx	lr

0800c83a <checkObjValue_u16.isra.2>:
 800c83a:	7843      	ldrb	r3, [r0, #1]
 800c83c:	2b2d      	cmp	r3, #45	; 0x2d
 800c83e:	d017      	beq.n	800c870 <checkObjValue_u16.isra.2+0x36>
 800c840:	d807      	bhi.n	800c852 <checkObjValue_u16.isra.2+0x18>
 800c842:	2b06      	cmp	r3, #6
 800c844:	d303      	bcc.n	800c84e <checkObjValue_u16.isra.2+0x14>
 800c846:	2b08      	cmp	r3, #8
 800c848:	d908      	bls.n	800c85c <checkObjValue_u16.isra.2+0x22>
 800c84a:	2b2a      	cmp	r3, #42	; 0x2a
 800c84c:	d00c      	beq.n	800c868 <checkObjValue_u16.isra.2+0x2e>
 800c84e:	2016      	movs	r0, #22
 800c850:	4770      	bx	lr
 800c852:	2b39      	cmp	r3, #57	; 0x39
 800c854:	d002      	beq.n	800c85c <checkObjValue_u16.isra.2+0x22>
 800c856:	d803      	bhi.n	800c860 <checkObjValue_u16.isra.2+0x26>
 800c858:	2b34      	cmp	r3, #52	; 0x34
 800c85a:	d1f8      	bne.n	800c84e <checkObjValue_u16.isra.2+0x14>
 800c85c:	2000      	movs	r0, #0
 800c85e:	4770      	bx	lr
 800c860:	2b3e      	cmp	r3, #62	; 0x3e
 800c862:	d0fb      	beq.n	800c85c <checkObjValue_u16.isra.2+0x22>
 800c864:	2b42      	cmp	r3, #66	; 0x42
 800c866:	e7f8      	b.n	800c85a <checkObjValue_u16.isra.2+0x20>
 800c868:	7801      	ldrb	r1, [r0, #0]
 800c86a:	8840      	ldrh	r0, [r0, #2]
 800c86c:	f001 bb9e 	b.w	800dfac <icoTrPdoCheckObjLimit_u16>
 800c870:	7801      	ldrb	r1, [r0, #0]
 800c872:	8840      	ldrh	r0, [r0, #2]
 800c874:	f001 b9f8 	b.w	800dc68 <icoRecPdoCheckObjLimit_u16>

0800c878 <coNumMemcpyPack>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	4605      	mov	r5, r0
 800c87c:	460e      	mov	r6, r1
 800c87e:	4617      	mov	r7, r2
 800c880:	f003 fbc8 	bl	8010014 <memcmp>
 800c884:	463a      	mov	r2, r7
 800c886:	4604      	mov	r4, r0
 800c888:	4631      	mov	r1, r6
 800c88a:	4628      	mov	r0, r5
 800c88c:	f003 fbd0 	bl	8010030 <memcpy>
 800c890:	1c20      	adds	r0, r4, #0
 800c892:	bf18      	it	ne
 800c894:	2001      	movne	r0, #1
 800c896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c898 <coNumMemcpyUnpack>:
 800c898:	f003 bbca 	b.w	8010030 <memcpy>

0800c89c <coNumMemcpy>:
 800c89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89e:	4605      	mov	r5, r0
 800c8a0:	460e      	mov	r6, r1
 800c8a2:	4617      	mov	r7, r2
 800c8a4:	f003 fbb6 	bl	8010014 <memcmp>
 800c8a8:	463a      	mov	r2, r7
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	4631      	mov	r1, r6
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	f003 fbbe 	bl	8010030 <memcpy>
 800c8b4:	1c20      	adds	r0, r4, #0
 800c8b6:	bf18      	it	ne
 800c8b8:	2001      	movne	r0, #1
 800c8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8bc <coOdGetObjAttribute>:
 800c8bc:	8880      	ldrh	r0, [r0, #4]
 800c8be:	4770      	bx	lr

0800c8c0 <icoOdCheckObjLimits>:
 800c8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8c2:	7843      	ldrb	r3, [r0, #1]
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	2b4a      	cmp	r3, #74	; 0x4a
 800c8c8:	d843      	bhi.n	800c952 <icoOdCheckObjLimits+0x92>
 800c8ca:	e8df f003 	tbb	[pc, r3]
 800c8ce:	5026      	.short	0x5026
 800c8d0:	26502626 	.word	0x26502626
 800c8d4:	422b502b 	.word	0x422b502b
 800c8d8:	50364242 	.word	0x50364242
 800c8dc:	42424236 	.word	0x42424236
 800c8e0:	42424242 	.word	0x42424242
 800c8e4:	42424242 	.word	0x42424242
 800c8e8:	42424242 	.word	0x42424242
 800c8ec:	50424242 	.word	0x50424242
 800c8f0:	26505050 	.word	0x26505050
 800c8f4:	26362636 	.word	0x26362636
 800c8f8:	2b26362b 	.word	0x2b26362b
 800c8fc:	26362636 	.word	0x26362636
 800c900:	362b2636 	.word	0x362b2636
 800c904:	2b263626 	.word	0x2b263626
 800c908:	42364236 	.word	0x42364236
 800c90c:	2642422b 	.word	0x2642422b
 800c910:	2b26362b 	.word	0x2b26362b
 800c914:	42363636 	.word	0x42363636
 800c918:	50          	.byte	0x50
 800c919:	00          	.byte	0x00
 800c91a:	7809      	ldrb	r1, [r1, #0]
 800c91c:	f7ff ff1c 	bl	800c758 <checkObjValue_u8>
 800c920:	b004      	add	sp, #16
 800c922:	bd10      	pop	{r4, pc}
 800c924:	2300      	movs	r3, #0
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	2202      	movs	r2, #2
 800c92a:	2301      	movs	r3, #1
 800c92c:	a803      	add	r0, sp, #12
 800c92e:	f7ff ffa3 	bl	800c878 <coNumMemcpyPack>
 800c932:	4620      	mov	r0, r4
 800c934:	f7ff ff81 	bl	800c83a <checkObjValue_u16.isra.2>
 800c938:	e7f2      	b.n	800c920 <icoOdCheckObjLimits+0x60>
 800c93a:	2300      	movs	r3, #0
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	2204      	movs	r2, #4
 800c940:	2301      	movs	r3, #1
 800c942:	a803      	add	r0, sp, #12
 800c944:	f7ff ff98 	bl	800c878 <coNumMemcpyPack>
 800c948:	9903      	ldr	r1, [sp, #12]
 800c94a:	4620      	mov	r0, r4
 800c94c:	f7ff ff3b 	bl	800c7c6 <checkObjValue_u32>
 800c950:	e7e6      	b.n	800c920 <icoOdCheckObjLimits+0x60>
 800c952:	8880      	ldrh	r0, [r0, #4]
 800c954:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c958:	d0e2      	beq.n	800c920 <icoOdCheckObjLimits+0x60>
 800c95a:	2b49      	cmp	r3, #73	; 0x49
 800c95c:	d007      	beq.n	800c96e <icoOdCheckObjLimits+0xae>
 800c95e:	d804      	bhi.n	800c96a <icoOdCheckObjLimits+0xaa>
 800c960:	3b18      	subs	r3, #24
 800c962:	2b08      	cmp	r3, #8
 800c964:	d903      	bls.n	800c96e <icoOdCheckObjLimits+0xae>
 800c966:	2016      	movs	r0, #22
 800c968:	e7da      	b.n	800c920 <icoOdCheckObjLimits+0x60>
 800c96a:	2b4b      	cmp	r3, #75	; 0x4b
 800c96c:	d1fb      	bne.n	800c966 <icoOdCheckObjLimits+0xa6>
 800c96e:	2000      	movs	r0, #0
 800c970:	e7d6      	b.n	800c920 <icoOdCheckObjLimits+0x60>
	...

0800c974 <coOdSetObjSize>:
 800c974:	7843      	ldrb	r3, [r0, #1]
 800c976:	2b23      	cmp	r3, #35	; 0x23
 800c978:	d00b      	beq.n	800c992 <coOdSetObjSize+0x1e>
 800c97a:	2b24      	cmp	r3, #36	; 0x24
 800c97c:	d00b      	beq.n	800c996 <coOdSetObjSize+0x22>
 800c97e:	2b21      	cmp	r3, #33	; 0x21
 800c980:	d105      	bne.n	800c98e <coOdSetObjSize+0x1a>
 800c982:	4b06      	ldr	r3, [pc, #24]	; (800c99c <coOdSetObjSize+0x28>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	b113      	cbz	r3, 800c98e <coOdSetObjSize+0x1a>
 800c988:	8842      	ldrh	r2, [r0, #2]
 800c98a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c98e:	2000      	movs	r0, #0
 800c990:	4770      	bx	lr
 800c992:	4b03      	ldr	r3, [pc, #12]	; (800c9a0 <coOdSetObjSize+0x2c>)
 800c994:	e7f6      	b.n	800c984 <coOdSetObjSize+0x10>
 800c996:	4b03      	ldr	r3, [pc, #12]	; (800c9a4 <coOdSetObjSize+0x30>)
 800c998:	e7f4      	b.n	800c984 <coOdSetObjSize+0x10>
 800c99a:	bf00      	nop
 800c99c:	20008670 	.word	0x20008670
 800c9a0:	20008664 	.word	0x20008664
 800c9a4:	20008658 	.word	0x20008658

0800c9a8 <coOdGetObjSize>:
 800c9a8:	7843      	ldrb	r3, [r0, #1]
 800c9aa:	2b4c      	cmp	r3, #76	; 0x4c
 800c9ac:	d873      	bhi.n	800ca96 <coOdGetObjSize+0xee>
 800c9ae:	e8df f003 	tbb	[pc, r3]
 800c9b2:	2a40      	.short	0x2a40
 800c9b4:	482a4048 	.word	0x482a4048
 800c9b8:	724a3042 	.word	0x724a3042
 800c9bc:	37447272 	.word	0x37447272
 800c9c0:	7272724c 	.word	0x7272724c
 800c9c4:	72727272 	.word	0x72727272
 800c9c8:	4e547272 	.word	0x4e547272
 800c9cc:	5c50565a 	.word	0x5c50565a
 800c9d0:	625e5258 	.word	0x625e5258
 800c9d4:	746e6c6a 	.word	0x746e6c6a
 800c9d8:	74707470 	.word	0x74707470
 800c9dc:	27747027 	.word	0x27747027
 800c9e0:	74707470 	.word	0x74707470
 800c9e4:	70277470 	.word	0x70277470
 800c9e8:	27747074 	.word	0x27747074
 800c9ec:	74707270 	.word	0x74707270
 800c9f0:	74277027 	.word	0x74277027
 800c9f4:	27747027 	.word	0x27747027
 800c9f8:	46707070 	.word	0x46707070
 800c9fc:	603e      	.short	0x603e
 800c9fe:	74          	.byte	0x74
 800c9ff:	00          	.byte	0x00
 800ca00:	2302      	movs	r3, #2
 800ca02:	4618      	mov	r0, r3
 800ca04:	4770      	bx	lr
 800ca06:	4b26      	ldr	r3, [pc, #152]	; (800caa0 <coOdGetObjSize+0xf8>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3300      	adds	r3, #0
 800ca0c:	bf18      	it	ne
 800ca0e:	2301      	movne	r3, #1
 800ca10:	e7f7      	b.n	800ca02 <coOdGetObjSize+0x5a>
 800ca12:	4b24      	ldr	r3, [pc, #144]	; (800caa4 <coOdGetObjSize+0xfc>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bf0c      	ite	eq
 800ca1a:	2300      	moveq	r3, #0
 800ca1c:	2302      	movne	r3, #2
 800ca1e:	e7f0      	b.n	800ca02 <coOdGetObjSize+0x5a>
 800ca20:	4b21      	ldr	r3, [pc, #132]	; (800caa8 <coOdGetObjSize+0x100>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	bf0c      	ite	eq
 800ca28:	2300      	moveq	r3, #0
 800ca2a:	2304      	movne	r3, #4
 800ca2c:	e7e9      	b.n	800ca02 <coOdGetObjSize+0x5a>
 800ca2e:	4b1f      	ldr	r3, [pc, #124]	; (800caac <coOdGetObjSize+0x104>)
 800ca30:	e7f7      	b.n	800ca22 <coOdGetObjSize+0x7a>
 800ca32:	4b1f      	ldr	r3, [pc, #124]	; (800cab0 <coOdGetObjSize+0x108>)
 800ca34:	e7e8      	b.n	800ca08 <coOdGetObjSize+0x60>
 800ca36:	4b1f      	ldr	r3, [pc, #124]	; (800cab4 <coOdGetObjSize+0x10c>)
 800ca38:	e7ec      	b.n	800ca14 <coOdGetObjSize+0x6c>
 800ca3a:	4b1f      	ldr	r3, [pc, #124]	; (800cab8 <coOdGetObjSize+0x110>)
 800ca3c:	e7f1      	b.n	800ca22 <coOdGetObjSize+0x7a>
 800ca3e:	4b1f      	ldr	r3, [pc, #124]	; (800cabc <coOdGetObjSize+0x114>)
 800ca40:	e7ef      	b.n	800ca22 <coOdGetObjSize+0x7a>
 800ca42:	4b1f      	ldr	r3, [pc, #124]	; (800cac0 <coOdGetObjSize+0x118>)
 800ca44:	e7e0      	b.n	800ca08 <coOdGetObjSize+0x60>
 800ca46:	4b1f      	ldr	r3, [pc, #124]	; (800cac4 <coOdGetObjSize+0x11c>)
 800ca48:	e7e4      	b.n	800ca14 <coOdGetObjSize+0x6c>
 800ca4a:	4b1f      	ldr	r3, [pc, #124]	; (800cac8 <coOdGetObjSize+0x120>)
 800ca4c:	e7e9      	b.n	800ca22 <coOdGetObjSize+0x7a>
 800ca4e:	4b1f      	ldr	r3, [pc, #124]	; (800cacc <coOdGetObjSize+0x124>)
 800ca50:	e7da      	b.n	800ca08 <coOdGetObjSize+0x60>
 800ca52:	4b1f      	ldr	r3, [pc, #124]	; (800cad0 <coOdGetObjSize+0x128>)
 800ca54:	e7de      	b.n	800ca14 <coOdGetObjSize+0x6c>
 800ca56:	4b1f      	ldr	r3, [pc, #124]	; (800cad4 <coOdGetObjSize+0x12c>)
 800ca58:	e7e3      	b.n	800ca22 <coOdGetObjSize+0x7a>
 800ca5a:	4b1f      	ldr	r3, [pc, #124]	; (800cad8 <coOdGetObjSize+0x130>)
 800ca5c:	e7d4      	b.n	800ca08 <coOdGetObjSize+0x60>
 800ca5e:	4b1f      	ldr	r3, [pc, #124]	; (800cadc <coOdGetObjSize+0x134>)
 800ca60:	e7d8      	b.n	800ca14 <coOdGetObjSize+0x6c>
 800ca62:	4b1f      	ldr	r3, [pc, #124]	; (800cae0 <coOdGetObjSize+0x138>)
 800ca64:	e7dd      	b.n	800ca22 <coOdGetObjSize+0x7a>
 800ca66:	4b1f      	ldr	r3, [pc, #124]	; (800cae4 <coOdGetObjSize+0x13c>)
 800ca68:	e7ce      	b.n	800ca08 <coOdGetObjSize+0x60>
 800ca6a:	4b1f      	ldr	r3, [pc, #124]	; (800cae8 <coOdGetObjSize+0x140>)
 800ca6c:	e7d2      	b.n	800ca14 <coOdGetObjSize+0x6c>
 800ca6e:	4b1f      	ldr	r3, [pc, #124]	; (800caec <coOdGetObjSize+0x144>)
 800ca70:	e7d7      	b.n	800ca22 <coOdGetObjSize+0x7a>
 800ca72:	4b1f      	ldr	r3, [pc, #124]	; (800caf0 <coOdGetObjSize+0x148>)
 800ca74:	e7d5      	b.n	800ca22 <coOdGetObjSize+0x7a>
 800ca76:	4b1f      	ldr	r3, [pc, #124]	; (800caf4 <coOdGetObjSize+0x14c>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d0c1      	beq.n	800ca02 <coOdGetObjSize+0x5a>
 800ca7e:	8842      	ldrh	r2, [r0, #2]
 800ca80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca84:	e7bd      	b.n	800ca02 <coOdGetObjSize+0x5a>
 800ca86:	4b1c      	ldr	r3, [pc, #112]	; (800caf8 <coOdGetObjSize+0x150>)
 800ca88:	e7f6      	b.n	800ca78 <coOdGetObjSize+0xd0>
 800ca8a:	4b1c      	ldr	r3, [pc, #112]	; (800cafc <coOdGetObjSize+0x154>)
 800ca8c:	e7f4      	b.n	800ca78 <coOdGetObjSize+0xd0>
 800ca8e:	4b1c      	ldr	r3, [pc, #112]	; (800cb00 <coOdGetObjSize+0x158>)
 800ca90:	e7f2      	b.n	800ca78 <coOdGetObjSize+0xd0>
 800ca92:	2304      	movs	r3, #4
 800ca94:	e7b5      	b.n	800ca02 <coOdGetObjSize+0x5a>
 800ca96:	2300      	movs	r3, #0
 800ca98:	e7b3      	b.n	800ca02 <coOdGetObjSize+0x5a>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e7b1      	b.n	800ca02 <coOdGetObjSize+0x5a>
 800ca9e:	bf00      	nop
 800caa0:	20008650 	.word	0x20008650
 800caa4:	20008648 	.word	0x20008648
 800caa8:	2000864c 	.word	0x2000864c
 800caac:	20008644 	.word	0x20008644
 800cab0:	200086ac 	.word	0x200086ac
 800cab4:	200086a4 	.word	0x200086a4
 800cab8:	200086a8 	.word	0x200086a8
 800cabc:	200086a0 	.word	0x200086a0
 800cac0:	20008690 	.word	0x20008690
 800cac4:	20008688 	.word	0x20008688
 800cac8:	2000868c 	.word	0x2000868c
 800cacc:	20008640 	.word	0x20008640
 800cad0:	20008638 	.word	0x20008638
 800cad4:	2000863c 	.word	0x2000863c
 800cad8:	2000869c 	.word	0x2000869c
 800cadc:	20008694 	.word	0x20008694
 800cae0:	20008698 	.word	0x20008698
 800cae4:	20008680 	.word	0x20008680
 800cae8:	20008678 	.word	0x20008678
 800caec:	2000867c 	.word	0x2000867c
 800caf0:	20008684 	.word	0x20008684
 800caf4:	20008670 	.word	0x20008670
 800caf8:	20008634 	.word	0x20008634
 800cafc:	20008664 	.word	0x20008664
 800cb00:	20008658 	.word	0x20008658

0800cb04 <icoOdGetObj>:
 800cb04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cb08:	9f08      	ldr	r7, [sp, #32]
 800cb0a:	8884      	ldrh	r4, [r0, #4]
 800cb0c:	4680      	mov	r8, r0
 800cb0e:	4615      	mov	r5, r2
 800cb10:	461e      	mov	r6, r3
 800cb12:	f7ff fdc1 	bl	800c698 <odGetObjAddr_R>
 800cb16:	4601      	mov	r1, r0
 800cb18:	b1e8      	cbz	r0, 800cb56 <icoOdGetObj+0x52>
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	f7ff ff44 	bl	800c9a8 <coOdGetObjSize>
 800cb20:	42b0      	cmp	r0, r6
 800cb22:	d91a      	bls.n	800cb5a <icoOdGetObj+0x56>
 800cb24:	1b82      	subs	r2, r0, r6
 800cb26:	b117      	cbz	r7, 800cb2e <icoOdGetObj+0x2a>
 800cb28:	42ba      	cmp	r2, r7
 800cb2a:	bf28      	it	cs
 800cb2c:	463a      	movcs	r2, r7
 800cb2e:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800cb32:	2801      	cmp	r0, #1
 800cb34:	4431      	add	r1, r6
 800cb36:	f004 0304 	and.w	r3, r4, #4
 800cb3a:	d106      	bne.n	800cb4a <icoOdGetObj+0x46>
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	f7ff fead 	bl	800c89c <coNumMemcpy>
 800cb42:	2000      	movs	r0, #0
 800cb44:	b002      	add	sp, #8
 800cb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb4a:	2400      	movs	r4, #0
 800cb4c:	9400      	str	r4, [sp, #0]
 800cb4e:	4628      	mov	r0, r5
 800cb50:	f7ff fea2 	bl	800c898 <coNumMemcpyUnpack>
 800cb54:	e7f5      	b.n	800cb42 <icoOdGetObj+0x3e>
 800cb56:	2053      	movs	r0, #83	; 0x53
 800cb58:	e7f4      	b.n	800cb44 <icoOdGetObj+0x40>
 800cb5a:	2022      	movs	r0, #34	; 0x22
 800cb5c:	e7f2      	b.n	800cb44 <icoOdGetObj+0x40>
	...

0800cb60 <coOdGetObjMaxSize>:
 800cb60:	7842      	ldrb	r2, [r0, #1]
 800cb62:	2a23      	cmp	r2, #35	; 0x23
 800cb64:	4603      	mov	r3, r0
 800cb66:	d00a      	beq.n	800cb7e <coOdGetObjMaxSize+0x1e>
 800cb68:	2a24      	cmp	r2, #36	; 0x24
 800cb6a:	d00a      	beq.n	800cb82 <coOdGetObjMaxSize+0x22>
 800cb6c:	2a21      	cmp	r2, #33	; 0x21
 800cb6e:	d10a      	bne.n	800cb86 <coOdGetObjMaxSize+0x26>
 800cb70:	4a06      	ldr	r2, [pc, #24]	; (800cb8c <coOdGetObjMaxSize+0x2c>)
 800cb72:	6810      	ldr	r0, [r2, #0]
 800cb74:	b148      	cbz	r0, 800cb8a <coOdGetObjMaxSize+0x2a>
 800cb76:	885b      	ldrh	r3, [r3, #2]
 800cb78:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800cb7c:	4770      	bx	lr
 800cb7e:	4a04      	ldr	r2, [pc, #16]	; (800cb90 <coOdGetObjMaxSize+0x30>)
 800cb80:	e7f7      	b.n	800cb72 <coOdGetObjMaxSize+0x12>
 800cb82:	4a04      	ldr	r2, [pc, #16]	; (800cb94 <coOdGetObjMaxSize+0x34>)
 800cb84:	e7f5      	b.n	800cb72 <coOdGetObjMaxSize+0x12>
 800cb86:	f7ff bf0f 	b.w	800c9a8 <coOdGetObjSize>
 800cb8a:	4770      	bx	lr
 800cb8c:	20008674 	.word	0x20008674
 800cb90:	20008668 	.word	0x20008668
 800cb94:	2000865c 	.word	0x2000865c

0800cb98 <icoOdPutObj>:
 800cb98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb9c:	4616      	mov	r6, r2
 800cb9e:	7842      	ldrb	r2, [r0, #1]
 800cba0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800cba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cba4:	2a19      	cmp	r2, #25
 800cba6:	4680      	mov	r8, r0
 800cba8:	4699      	mov	r9, r3
 800cbaa:	d03a      	beq.n	800cc22 <icoOdPutObj+0x8a>
 800cbac:	d82a      	bhi.n	800cc04 <icoOdPutObj+0x6c>
 800cbae:	2a04      	cmp	r2, #4
 800cbb0:	d037      	beq.n	800cc22 <icoOdPutObj+0x8a>
 800cbb2:	d823      	bhi.n	800cbfc <icoOdPutObj+0x64>
 800cbb4:	2a01      	cmp	r2, #1
 800cbb6:	d034      	beq.n	800cc22 <icoOdPutObj+0x8a>
 800cbb8:	4640      	mov	r0, r8
 800cbba:	f8b8 4004 	ldrh.w	r4, [r8, #4]
 800cbbe:	f7ff fcc1 	bl	800c544 <odGetObjAddr>
 800cbc2:	4601      	mov	r1, r0
 800cbc4:	b368      	cbz	r0, 800cc22 <icoOdPutObj+0x8a>
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	f7ff ffca 	bl	800cb60 <coOdGetObjMaxSize>
 800cbcc:	4548      	cmp	r0, r9
 800cbce:	d92a      	bls.n	800cc26 <icoOdPutObj+0x8e>
 800cbd0:	eba0 0209 	sub.w	r2, r0, r9
 800cbd4:	b117      	cbz	r7, 800cbdc <icoOdPutObj+0x44>
 800cbd6:	42ba      	cmp	r2, r7
 800cbd8:	bf28      	it	cs
 800cbda:	463a      	movcs	r2, r7
 800cbdc:	eb01 0009 	add.w	r0, r1, r9
 800cbe0:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800cbe4:	2901      	cmp	r1, #1
 800cbe6:	f004 0304 	and.w	r3, r4, #4
 800cbea:	d114      	bne.n	800cc16 <icoOdPutObj+0x7e>
 800cbec:	4631      	mov	r1, r6
 800cbee:	f7ff fe55 	bl	800c89c <coNumMemcpy>
 800cbf2:	7028      	strb	r0, [r5, #0]
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	b003      	add	sp, #12
 800cbf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbfc:	2a07      	cmp	r2, #7
 800cbfe:	d010      	beq.n	800cc22 <icoOdPutObj+0x8a>
 800cc00:	2a0d      	cmp	r2, #13
 800cc02:	e7d8      	b.n	800cbb6 <icoOdPutObj+0x1e>
 800cc04:	2a1f      	cmp	r2, #31
 800cc06:	d00c      	beq.n	800cc22 <icoOdPutObj+0x8a>
 800cc08:	d801      	bhi.n	800cc0e <icoOdPutObj+0x76>
 800cc0a:	2a1c      	cmp	r2, #28
 800cc0c:	e7d3      	b.n	800cbb6 <icoOdPutObj+0x1e>
 800cc0e:	2a22      	cmp	r2, #34	; 0x22
 800cc10:	d007      	beq.n	800cc22 <icoOdPutObj+0x8a>
 800cc12:	2a4a      	cmp	r2, #74	; 0x4a
 800cc14:	e7cf      	b.n	800cbb6 <icoOdPutObj+0x1e>
 800cc16:	2400      	movs	r4, #0
 800cc18:	9400      	str	r4, [sp, #0]
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	f7ff fe2c 	bl	800c878 <coNumMemcpyPack>
 800cc20:	e7e7      	b.n	800cbf2 <icoOdPutObj+0x5a>
 800cc22:	200a      	movs	r0, #10
 800cc24:	e7e7      	b.n	800cbf6 <icoOdPutObj+0x5e>
 800cc26:	2022      	movs	r0, #34	; 0x22
 800cc28:	e7e5      	b.n	800cbf6 <icoOdPutObj+0x5e>
	...

0800cc2c <coOdGetObjDescPtr>:
 800cc2c:	b513      	push	{r0, r1, r4, lr}
 800cc2e:	4614      	mov	r4, r2
 800cc30:	aa02      	add	r2, sp, #8
 800cc32:	2300      	movs	r3, #0
 800cc34:	f822 3d02 	strh.w	r3, [r2, #-2]!
 800cc38:	f7ff fc0a 	bl	800c450 <odGetObjDescIdx>
 800cc3c:	b930      	cbnz	r0, 800cc4c <coOdGetObjDescPtr+0x20>
 800cc3e:	4b04      	ldr	r3, [pc, #16]	; (800cc50 <coOdGetObjDescPtr+0x24>)
 800cc40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc4a:	6023      	str	r3, [r4, #0]
 800cc4c:	b002      	add	sp, #8
 800cc4e:	bd10      	pop	{r4, pc}
 800cc50:	20008628 	.word	0x20008628

0800cc54 <coOdGetObjAddr>:
 800cc54:	b513      	push	{r0, r1, r4, lr}
 800cc56:	aa01      	add	r2, sp, #4
 800cc58:	460c      	mov	r4, r1
 800cc5a:	f7ff ffe7 	bl	800cc2c <coOdGetObjDescPtr>
 800cc5e:	b928      	cbnz	r0, 800cc6c <coOdGetObjAddr+0x18>
 800cc60:	4621      	mov	r1, r4
 800cc62:	9801      	ldr	r0, [sp, #4]
 800cc64:	f7ff fc6e 	bl	800c544 <odGetObjAddr>
 800cc68:	b002      	add	sp, #8
 800cc6a:	bd10      	pop	{r4, pc}
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	e7fb      	b.n	800cc68 <coOdGetObjAddr+0x14>

0800cc70 <coOdGetObj_u8>:
 800cc70:	b530      	push	{r4, r5, lr}
 800cc72:	b085      	sub	sp, #20
 800cc74:	4615      	mov	r5, r2
 800cc76:	aa03      	add	r2, sp, #12
 800cc78:	460c      	mov	r4, r1
 800cc7a:	f7ff ffd7 	bl	800cc2c <coOdGetObjDescPtr>
 800cc7e:	b998      	cbnz	r0, 800cca8 <coOdGetObj_u8+0x38>
 800cc80:	9803      	ldr	r0, [sp, #12]
 800cc82:	7843      	ldrb	r3, [r0, #1]
 800cc84:	2b31      	cmp	r3, #49	; 0x31
 800cc86:	d007      	beq.n	800cc98 <coOdGetObj_u8+0x28>
 800cc88:	d816      	bhi.n	800ccb8 <coOdGetObj_u8+0x48>
 800cc8a:	2b27      	cmp	r3, #39	; 0x27
 800cc8c:	d004      	beq.n	800cc98 <coOdGetObj_u8+0x28>
 800cc8e:	d80d      	bhi.n	800ccac <coOdGetObj_u8+0x3c>
 800cc90:	2b05      	cmp	r3, #5
 800cc92:	d901      	bls.n	800cc98 <coOdGetObj_u8+0x28>
 800cc94:	2b25      	cmp	r3, #37	; 0x25
 800cc96:	d11e      	bne.n	800ccd6 <coOdGetObj_u8+0x66>
 800cc98:	2201      	movs	r2, #1
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e9cd 3200 	strd	r3, r2, [sp]
 800cca0:	4621      	mov	r1, r4
 800cca2:	462a      	mov	r2, r5
 800cca4:	f7ff ff2e 	bl	800cb04 <icoOdGetObj>
 800cca8:	b005      	add	sp, #20
 800ccaa:	bd30      	pop	{r4, r5, pc}
 800ccac:	2b2c      	cmp	r3, #44	; 0x2c
 800ccae:	d0f3      	beq.n	800cc98 <coOdGetObj_u8+0x28>
 800ccb0:	2b2f      	cmp	r3, #47	; 0x2f
 800ccb2:	d0f1      	beq.n	800cc98 <coOdGetObj_u8+0x28>
 800ccb4:	2b29      	cmp	r3, #41	; 0x29
 800ccb6:	e7ee      	b.n	800cc96 <coOdGetObj_u8+0x26>
 800ccb8:	2b3d      	cmp	r3, #61	; 0x3d
 800ccba:	d0ed      	beq.n	800cc98 <coOdGetObj_u8+0x28>
 800ccbc:	d805      	bhi.n	800ccca <coOdGetObj_u8+0x5a>
 800ccbe:	2b36      	cmp	r3, #54	; 0x36
 800ccc0:	d0ea      	beq.n	800cc98 <coOdGetObj_u8+0x28>
 800ccc2:	2b38      	cmp	r3, #56	; 0x38
 800ccc4:	d0e8      	beq.n	800cc98 <coOdGetObj_u8+0x28>
 800ccc6:	2b33      	cmp	r3, #51	; 0x33
 800ccc8:	e7e5      	b.n	800cc96 <coOdGetObj_u8+0x26>
 800ccca:	2b44      	cmp	r3, #68	; 0x44
 800cccc:	d0e4      	beq.n	800cc98 <coOdGetObj_u8+0x28>
 800ccce:	2b4c      	cmp	r3, #76	; 0x4c
 800ccd0:	d0e2      	beq.n	800cc98 <coOdGetObj_u8+0x28>
 800ccd2:	2b41      	cmp	r3, #65	; 0x41
 800ccd4:	e7df      	b.n	800cc96 <coOdGetObj_u8+0x26>
 800ccd6:	2016      	movs	r0, #22
 800ccd8:	e7e6      	b.n	800cca8 <coOdGetObj_u8+0x38>

0800ccda <coOdGetObj_u32>:
 800ccda:	b530      	push	{r4, r5, lr}
 800ccdc:	b085      	sub	sp, #20
 800ccde:	4615      	mov	r5, r2
 800cce0:	aa03      	add	r2, sp, #12
 800cce2:	460c      	mov	r4, r1
 800cce4:	f7ff ffa2 	bl	800cc2c <coOdGetObjDescPtr>
 800cce8:	b9a8      	cbnz	r0, 800cd16 <coOdGetObj_u32+0x3c>
 800ccea:	9803      	ldr	r0, [sp, #12]
 800ccec:	7843      	ldrb	r3, [r0, #1]
 800ccee:	2b32      	cmp	r3, #50	; 0x32
 800ccf0:	d009      	beq.n	800cd06 <coOdGetObj_u32+0x2c>
 800ccf2:	d818      	bhi.n	800cd26 <coOdGetObj_u32+0x4c>
 800ccf4:	2b28      	cmp	r3, #40	; 0x28
 800ccf6:	d006      	beq.n	800cd06 <coOdGetObj_u32+0x2c>
 800ccf8:	d80f      	bhi.n	800cd1a <coOdGetObj_u32+0x40>
 800ccfa:	2b0c      	cmp	r3, #12
 800ccfc:	d324      	bcc.n	800cd48 <coOdGetObj_u32+0x6e>
 800ccfe:	2b0e      	cmp	r3, #14
 800cd00:	d901      	bls.n	800cd06 <coOdGetObj_u32+0x2c>
 800cd02:	2b26      	cmp	r3, #38	; 0x26
 800cd04:	d120      	bne.n	800cd48 <coOdGetObj_u32+0x6e>
 800cd06:	2201      	movs	r2, #1
 800cd08:	2300      	movs	r3, #0
 800cd0a:	e9cd 3200 	strd	r3, r2, [sp]
 800cd0e:	4621      	mov	r1, r4
 800cd10:	462a      	mov	r2, r5
 800cd12:	f7ff fef7 	bl	800cb04 <icoOdGetObj>
 800cd16:	b005      	add	sp, #20
 800cd18:	bd30      	pop	{r4, r5, pc}
 800cd1a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd1c:	d0f3      	beq.n	800cd06 <coOdGetObj_u32+0x2c>
 800cd1e:	2b30      	cmp	r3, #48	; 0x30
 800cd20:	d0f1      	beq.n	800cd06 <coOdGetObj_u32+0x2c>
 800cd22:	2b2b      	cmp	r3, #43	; 0x2b
 800cd24:	e7ee      	b.n	800cd04 <coOdGetObj_u32+0x2a>
 800cd26:	2b3c      	cmp	r3, #60	; 0x3c
 800cd28:	d0ed      	beq.n	800cd06 <coOdGetObj_u32+0x2c>
 800cd2a:	d805      	bhi.n	800cd38 <coOdGetObj_u32+0x5e>
 800cd2c:	2b37      	cmp	r3, #55	; 0x37
 800cd2e:	d0ea      	beq.n	800cd06 <coOdGetObj_u32+0x2c>
 800cd30:	2b3a      	cmp	r3, #58	; 0x3a
 800cd32:	d0e8      	beq.n	800cd06 <coOdGetObj_u32+0x2c>
 800cd34:	2b35      	cmp	r3, #53	; 0x35
 800cd36:	e7e5      	b.n	800cd04 <coOdGetObj_u32+0x2a>
 800cd38:	2b43      	cmp	r3, #67	; 0x43
 800cd3a:	d0e4      	beq.n	800cd06 <coOdGetObj_u32+0x2c>
 800cd3c:	d801      	bhi.n	800cd42 <coOdGetObj_u32+0x68>
 800cd3e:	2b3f      	cmp	r3, #63	; 0x3f
 800cd40:	e7e0      	b.n	800cd04 <coOdGetObj_u32+0x2a>
 800cd42:	3b46      	subs	r3, #70	; 0x46
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d9de      	bls.n	800cd06 <coOdGetObj_u32+0x2c>
 800cd48:	2016      	movs	r0, #22
 800cd4a:	e7e4      	b.n	800cd16 <coOdGetObj_u32+0x3c>

0800cd4c <icoOdGetObjRecMapData>:
 800cd4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cd50:	281f      	cmp	r0, #31
 800cd52:	4688      	mov	r8, r1
 800cd54:	461f      	mov	r7, r3
 800cd56:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 800cd5a:	d815      	bhi.n	800cd88 <icoOdGetObjRecMapData+0x3c>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	603b      	str	r3, [r7, #0]
 800cd60:	1e42      	subs	r2, r0, #1
 800cd62:	2301      	movs	r3, #1
 800cd64:	7033      	strb	r3, [r6, #0]
 800cd66:	2a06      	cmp	r2, #6
 800cd68:	d829      	bhi.n	800cdbe <icoOdGetObjRecMapData+0x72>
 800cd6a:	e8df f002 	tbb	[pc, r2]
 800cd6e:	0505      	.short	0x0505
 800cd70:	04050b04 	.word	0x04050b04
 800cd74:	0b          	.byte	0x0b
 800cd75:	00          	.byte	0x00
 800cd76:	2302      	movs	r3, #2
 800cd78:	702b      	strb	r3, [r5, #0]
 800cd7a:	2400      	movs	r4, #0
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	b002      	add	sp, #8
 800cd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd84:	2304      	movs	r3, #4
 800cd86:	e7f7      	b.n	800cd78 <icoOdGetObjRecMapData+0x2c>
 800cd88:	aa01      	add	r2, sp, #4
 800cd8a:	f7ff ff4f 	bl	800cc2c <coOdGetObjDescPtr>
 800cd8e:	4604      	mov	r4, r0
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d1f3      	bne.n	800cd7c <icoOdGetObjRecMapData+0x30>
 800cd94:	9801      	ldr	r0, [sp, #4]
 800cd96:	8883      	ldrh	r3, [r0, #4]
 800cd98:	f013 0f28 	tst.w	r3, #40	; 0x28
 800cd9c:	d00f      	beq.n	800cdbe <icoOdGetObjRecMapData+0x72>
 800cd9e:	079a      	lsls	r2, r3, #30
 800cda0:	d50f      	bpl.n	800cdc2 <icoOdGetObjRecMapData+0x76>
 800cda2:	075b      	lsls	r3, r3, #29
 800cda4:	bf4a      	itet	mi
 800cda6:	2301      	movmi	r3, #1
 800cda8:	7034      	strbpl	r4, [r6, #0]
 800cdaa:	7033      	strbmi	r3, [r6, #0]
 800cdac:	4641      	mov	r1, r8
 800cdae:	f7ff fbc9 	bl	800c544 <odGetObjAddr>
 800cdb2:	6038      	str	r0, [r7, #0]
 800cdb4:	9801      	ldr	r0, [sp, #4]
 800cdb6:	f7ff fdf7 	bl	800c9a8 <coOdGetObjSize>
 800cdba:	7028      	strb	r0, [r5, #0]
 800cdbc:	e7de      	b.n	800cd7c <icoOdGetObjRecMapData+0x30>
 800cdbe:	2446      	movs	r4, #70	; 0x46
 800cdc0:	e7dc      	b.n	800cd7c <icoOdGetObjRecMapData+0x30>
 800cdc2:	2418      	movs	r4, #24
 800cdc4:	e7da      	b.n	800cd7c <icoOdGetObjRecMapData+0x30>

0800cdc6 <icoOdGetObjTrMapData>:
 800cdc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdc8:	281f      	cmp	r0, #31
 800cdca:	460f      	mov	r7, r1
 800cdcc:	461e      	mov	r6, r3
 800cdce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cdd0:	d803      	bhi.n	800cdda <icoOdGetObjTrMapData+0x14>
 800cdd2:	2446      	movs	r4, #70	; 0x46
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	b003      	add	sp, #12
 800cdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdda:	aa01      	add	r2, sp, #4
 800cddc:	f7ff ff26 	bl	800cc2c <coOdGetObjDescPtr>
 800cde0:	4604      	mov	r4, r0
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d1f6      	bne.n	800cdd4 <icoOdGetObjTrMapData+0xe>
 800cde6:	9801      	ldr	r0, [sp, #4]
 800cde8:	8883      	ldrh	r3, [r0, #4]
 800cdea:	f013 0f18 	tst.w	r3, #24
 800cdee:	d0f0      	beq.n	800cdd2 <icoOdGetObjTrMapData+0xc>
 800cdf0:	07da      	lsls	r2, r3, #31
 800cdf2:	d50e      	bpl.n	800ce12 <icoOdGetObjTrMapData+0x4c>
 800cdf4:	075b      	lsls	r3, r3, #29
 800cdf6:	bf46      	itte	mi
 800cdf8:	2301      	movmi	r3, #1
 800cdfa:	702b      	strbmi	r3, [r5, #0]
 800cdfc:	702c      	strbpl	r4, [r5, #0]
 800cdfe:	4639      	mov	r1, r7
 800ce00:	f7ff fc4a 	bl	800c698 <odGetObjAddr_R>
 800ce04:	6030      	str	r0, [r6, #0]
 800ce06:	9801      	ldr	r0, [sp, #4]
 800ce08:	f7ff fdce 	bl	800c9a8 <coOdGetObjSize>
 800ce0c:	9b08      	ldr	r3, [sp, #32]
 800ce0e:	7018      	strb	r0, [r3, #0]
 800ce10:	e7e0      	b.n	800cdd4 <icoOdGetObjTrMapData+0xe>
 800ce12:	2417      	movs	r4, #23
 800ce14:	e7de      	b.n	800cdd4 <icoOdGetObjTrMapData+0xe>
	...

0800ce18 <coOdGetDefaultVal_u8>:
 800ce18:	b513      	push	{r0, r1, r4, lr}
 800ce1a:	4614      	mov	r4, r2
 800ce1c:	aa01      	add	r2, sp, #4
 800ce1e:	f7ff ff05 	bl	800cc2c <coOdGetObjDescPtr>
 800ce22:	b970      	cbnz	r0, 800ce42 <coOdGetDefaultVal_u8+0x2a>
 800ce24:	9a01      	ldr	r2, [sp, #4]
 800ce26:	7853      	ldrb	r3, [r2, #1]
 800ce28:	2b2f      	cmp	r3, #47	; 0x2f
 800ce2a:	d005      	beq.n	800ce38 <coOdGetDefaultVal_u8+0x20>
 800ce2c:	d813      	bhi.n	800ce56 <coOdGetDefaultVal_u8+0x3e>
 800ce2e:	2b05      	cmp	r3, #5
 800ce30:	d809      	bhi.n	800ce46 <coOdGetDefaultVal_u8+0x2e>
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d200      	bcs.n	800ce38 <coOdGetDefaultVal_u8+0x20>
 800ce36:	b963      	cbnz	r3, 800ce52 <coOdGetDefaultVal_u8+0x3a>
 800ce38:	88d3      	ldrh	r3, [r2, #6]
 800ce3a:	4a0d      	ldr	r2, [pc, #52]	; (800ce70 <coOdGetDefaultVal_u8+0x58>)
 800ce3c:	6812      	ldr	r2, [r2, #0]
 800ce3e:	5cd3      	ldrb	r3, [r2, r3]
 800ce40:	7023      	strb	r3, [r4, #0]
 800ce42:	b002      	add	sp, #8
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	2b29      	cmp	r3, #41	; 0x29
 800ce48:	d0f6      	beq.n	800ce38 <coOdGetDefaultVal_u8+0x20>
 800ce4a:	2b2c      	cmp	r3, #44	; 0x2c
 800ce4c:	d0f4      	beq.n	800ce38 <coOdGetDefaultVal_u8+0x20>
 800ce4e:	2b27      	cmp	r3, #39	; 0x27
 800ce50:	d0f2      	beq.n	800ce38 <coOdGetDefaultVal_u8+0x20>
 800ce52:	201f      	movs	r0, #31
 800ce54:	e7f5      	b.n	800ce42 <coOdGetDefaultVal_u8+0x2a>
 800ce56:	2b36      	cmp	r3, #54	; 0x36
 800ce58:	d0ee      	beq.n	800ce38 <coOdGetDefaultVal_u8+0x20>
 800ce5a:	d803      	bhi.n	800ce64 <coOdGetDefaultVal_u8+0x4c>
 800ce5c:	2b31      	cmp	r3, #49	; 0x31
 800ce5e:	d0eb      	beq.n	800ce38 <coOdGetDefaultVal_u8+0x20>
 800ce60:	2b33      	cmp	r3, #51	; 0x33
 800ce62:	e7f5      	b.n	800ce50 <coOdGetDefaultVal_u8+0x38>
 800ce64:	2b41      	cmp	r3, #65	; 0x41
 800ce66:	d0e7      	beq.n	800ce38 <coOdGetDefaultVal_u8+0x20>
 800ce68:	2b44      	cmp	r3, #68	; 0x44
 800ce6a:	d0e5      	beq.n	800ce38 <coOdGetDefaultVal_u8+0x20>
 800ce6c:	2b38      	cmp	r3, #56	; 0x38
 800ce6e:	e7ef      	b.n	800ce50 <coOdGetDefaultVal_u8+0x38>
 800ce70:	20008650 	.word	0x20008650

0800ce74 <coOdGetDefaultVal_u16>:
 800ce74:	b513      	push	{r0, r1, r4, lr}
 800ce76:	4614      	mov	r4, r2
 800ce78:	aa01      	add	r2, sp, #4
 800ce7a:	f7ff fed7 	bl	800cc2c <coOdGetObjDescPtr>
 800ce7e:	b980      	cbnz	r0, 800cea2 <coOdGetDefaultVal_u16+0x2e>
 800ce80:	9a01      	ldr	r2, [sp, #4]
 800ce82:	7853      	ldrb	r3, [r2, #1]
 800ce84:	2b34      	cmp	r3, #52	; 0x34
 800ce86:	d006      	beq.n	800ce96 <coOdGetDefaultVal_u16+0x22>
 800ce88:	d811      	bhi.n	800ceae <coOdGetDefaultVal_u16+0x3a>
 800ce8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce8c:	d003      	beq.n	800ce96 <coOdGetDefaultVal_u16+0x22>
 800ce8e:	d80a      	bhi.n	800cea6 <coOdGetDefaultVal_u16+0x32>
 800ce90:	3b06      	subs	r3, #6
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d809      	bhi.n	800ceaa <coOdGetDefaultVal_u16+0x36>
 800ce96:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <coOdGetDefaultVal_u16+0x50>)
 800ce98:	88d2      	ldrh	r2, [r2, #6]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800cea0:	8023      	strh	r3, [r4, #0]
 800cea2:	b002      	add	sp, #8
 800cea4:	bd10      	pop	{r4, pc}
 800cea6:	2b2d      	cmp	r3, #45	; 0x2d
 800cea8:	d0f5      	beq.n	800ce96 <coOdGetDefaultVal_u16+0x22>
 800ceaa:	201f      	movs	r0, #31
 800ceac:	e7f9      	b.n	800cea2 <coOdGetDefaultVal_u16+0x2e>
 800ceae:	2b40      	cmp	r3, #64	; 0x40
 800ceb0:	d0f1      	beq.n	800ce96 <coOdGetDefaultVal_u16+0x22>
 800ceb2:	d803      	bhi.n	800cebc <coOdGetDefaultVal_u16+0x48>
 800ceb4:	2b39      	cmp	r3, #57	; 0x39
 800ceb6:	d0ee      	beq.n	800ce96 <coOdGetDefaultVal_u16+0x22>
 800ceb8:	2b3e      	cmp	r3, #62	; 0x3e
 800ceba:	e7f5      	b.n	800cea8 <coOdGetDefaultVal_u16+0x34>
 800cebc:	2b42      	cmp	r3, #66	; 0x42
 800cebe:	d0ea      	beq.n	800ce96 <coOdGetDefaultVal_u16+0x22>
 800cec0:	2b45      	cmp	r3, #69	; 0x45
 800cec2:	e7f1      	b.n	800cea8 <coOdGetDefaultVal_u16+0x34>
 800cec4:	20008648 	.word	0x20008648

0800cec8 <coOdGetDefaultVal_u32>:
 800cec8:	b513      	push	{r0, r1, r4, lr}
 800ceca:	4614      	mov	r4, r2
 800cecc:	aa01      	add	r2, sp, #4
 800cece:	f7ff fead 	bl	800cc2c <coOdGetObjDescPtr>
 800ced2:	b998      	cbnz	r0, 800cefc <coOdGetDefaultVal_u32+0x34>
 800ced4:	9a01      	ldr	r2, [sp, #4]
 800ced6:	7853      	ldrb	r3, [r2, #1]
 800ced8:	2b32      	cmp	r3, #50	; 0x32
 800ceda:	d009      	beq.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800cedc:	d816      	bhi.n	800cf0c <coOdGetDefaultVal_u32+0x44>
 800cede:	2b28      	cmp	r3, #40	; 0x28
 800cee0:	d006      	beq.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800cee2:	d80d      	bhi.n	800cf00 <coOdGetDefaultVal_u32+0x38>
 800cee4:	2b0c      	cmp	r3, #12
 800cee6:	d320      	bcc.n	800cf2a <coOdGetDefaultVal_u32+0x62>
 800cee8:	2b0e      	cmp	r3, #14
 800ceea:	d901      	bls.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800ceec:	2b26      	cmp	r3, #38	; 0x26
 800ceee:	d11c      	bne.n	800cf2a <coOdGetDefaultVal_u32+0x62>
 800cef0:	4b0f      	ldr	r3, [pc, #60]	; (800cf30 <coOdGetDefaultVal_u32+0x68>)
 800cef2:	88d2      	ldrh	r2, [r2, #6]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cefa:	6023      	str	r3, [r4, #0]
 800cefc:	b002      	add	sp, #8
 800cefe:	bd10      	pop	{r4, pc}
 800cf00:	2b2e      	cmp	r3, #46	; 0x2e
 800cf02:	d0f5      	beq.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800cf04:	2b30      	cmp	r3, #48	; 0x30
 800cf06:	d0f3      	beq.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800cf08:	2b2b      	cmp	r3, #43	; 0x2b
 800cf0a:	e7f0      	b.n	800ceee <coOdGetDefaultVal_u32+0x26>
 800cf0c:	2b3f      	cmp	r3, #63	; 0x3f
 800cf0e:	d0ef      	beq.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800cf10:	d805      	bhi.n	800cf1e <coOdGetDefaultVal_u32+0x56>
 800cf12:	2b37      	cmp	r3, #55	; 0x37
 800cf14:	d0ec      	beq.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800cf16:	2b3a      	cmp	r3, #58	; 0x3a
 800cf18:	d0ea      	beq.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800cf1a:	2b35      	cmp	r3, #53	; 0x35
 800cf1c:	e7e7      	b.n	800ceee <coOdGetDefaultVal_u32+0x26>
 800cf1e:	2b43      	cmp	r3, #67	; 0x43
 800cf20:	d0e6      	beq.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800cf22:	d302      	bcc.n	800cf2a <coOdGetDefaultVal_u32+0x62>
 800cf24:	3b46      	subs	r3, #70	; 0x46
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d9e2      	bls.n	800cef0 <coOdGetDefaultVal_u32+0x28>
 800cf2a:	201f      	movs	r0, #31
 800cf2c:	e7e6      	b.n	800cefc <coOdGetDefaultVal_u32+0x34>
 800cf2e:	bf00      	nop
 800cf30:	2000864c 	.word	0x2000864c

0800cf34 <icoEventObjectChangedFunction>:
 800cf34:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <icoEventObjectChangedFunction+0x40>)
 800cf36:	4a10      	ldr	r2, [pc, #64]	; (800cf78 <icoEventObjectChangedFunction+0x44>)
 800cf38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf3a:	881e      	ldrh	r6, [r3, #0]
 800cf3c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800cf40:	2300      	movs	r3, #0
 800cf42:	b29c      	uxth	r4, r3
 800cf44:	42a6      	cmp	r6, r4
 800cf46:	d801      	bhi.n	800cf4c <icoEventObjectChangedFunction+0x18>
 800cf48:	2000      	movs	r0, #0
 800cf4a:	e00d      	b.n	800cf68 <icoEventObjectChangedFunction+0x34>
 800cf4c:	f832 4033 	ldrh.w	r4, [r2, r3, lsl #3]
 800cf50:	4284      	cmp	r4, r0
 800cf52:	ea4f 05c3 	mov.w	r5, r3, lsl #3
 800cf56:	d001      	beq.n	800cf5c <icoEventObjectChangedFunction+0x28>
 800cf58:	42bc      	cmp	r4, r7
 800cf5a:	d108      	bne.n	800cf6e <icoEventObjectChangedFunction+0x3a>
 800cf5c:	1954      	adds	r4, r2, r5
 800cf5e:	78a4      	ldrb	r4, [r4, #2]
 800cf60:	428c      	cmp	r4, r1
 800cf62:	d102      	bne.n	800cf6a <icoEventObjectChangedFunction+0x36>
 800cf64:	442a      	add	r2, r5
 800cf66:	6850      	ldr	r0, [r2, #4]
 800cf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf6a:	2cff      	cmp	r4, #255	; 0xff
 800cf6c:	d0fa      	beq.n	800cf64 <icoEventObjectChangedFunction+0x30>
 800cf6e:	3301      	adds	r3, #1
 800cf70:	e7e7      	b.n	800cf42 <icoEventObjectChangedFunction+0xe>
 800cf72:	bf00      	nop
 800cf74:	20008624 	.word	0x20008624
 800cf78:	2000861c 	.word	0x2000861c

0800cf7c <icoEventObjectChanged>:
 800cf7c:	b570      	push	{r4, r5, r6, lr}
 800cf7e:	461e      	mov	r6, r3
 800cf80:	7843      	ldrb	r3, [r0, #1]
 800cf82:	3b26      	subs	r3, #38	; 0x26
 800cf84:	460d      	mov	r5, r1
 800cf86:	4614      	mov	r4, r2
 800cf88:	2b14      	cmp	r3, #20
 800cf8a:	d811      	bhi.n	800cfb0 <icoEventObjectChanged+0x34>
 800cf8c:	e8df f003 	tbb	[pc, r3]
 800cf90:	1c10100b 	.word	0x1c10100b
 800cf94:	21211c1c 	.word	0x21211c1c
 800cf98:	26101021 	.word	0x26101021
 800cf9c:	2a2a2a10 	.word	0x2a2a2a10
 800cfa0:	33332f2f 	.word	0x33332f2f
 800cfa4:	33          	.byte	0x33
 800cfa5:	00          	.byte	0x00
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	8840      	ldrh	r0, [r0, #2]
 800cfaa:	f002 fb5f 	bl	800f66c <icoSdoObjChanged>
 800cfae:	bb40      	cbnz	r0, 800d002 <icoEventObjectChanged+0x86>
 800cfb0:	2e01      	cmp	r6, #1
 800cfb2:	d125      	bne.n	800d000 <icoEventObjectChanged+0x84>
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f7ff ffbc 	bl	800cf34 <icoEventObjectChangedFunction>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	b300      	cbz	r0, 800d002 <icoEventObjectChanged+0x86>
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfc6:	4718      	bx	r3
 800cfc8:	4621      	mov	r1, r4
 800cfca:	8840      	ldrh	r0, [r0, #2]
 800cfcc:	f001 f852 	bl	800e074 <icoTrPdoObjChanged>
 800cfd0:	e7ed      	b.n	800cfae <icoEventObjectChanged+0x32>
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	8840      	ldrh	r0, [r0, #2]
 800cfd6:	f000 fec6 	bl	800dd66 <icoRecPdoObjChanged>
 800cfda:	e7e8      	b.n	800cfae <icoEventObjectChanged+0x32>
 800cfdc:	8840      	ldrh	r0, [r0, #2]
 800cfde:	f000 fee9 	bl	800ddb4 <icoRecPdoMapChanged>
 800cfe2:	e7e4      	b.n	800cfae <icoEventObjectChanged+0x32>
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	8840      	ldrh	r0, [r0, #2]
 800cfe8:	f7fe fa7c 	bl	800b4e4 <icoErrCtrlObjChanged>
 800cfec:	e7df      	b.n	800cfae <icoEventObjectChanged+0x32>
 800cfee:	8840      	ldrh	r0, [r0, #2]
 800cff0:	f002 fd10 	bl	800fa14 <icoSyncObjChanged>
 800cff4:	e7db      	b.n	800cfae <icoEventObjectChanged+0x32>
 800cff6:	4621      	mov	r1, r4
 800cff8:	8840      	ldrh	r0, [r0, #2]
 800cffa:	f7fe f8cb 	bl	800b194 <icoEmcyObjChanged>
 800cffe:	e7d6      	b.n	800cfae <icoEventObjectChanged+0x32>
 800d000:	2000      	movs	r0, #0
 800d002:	bd70      	pop	{r4, r5, r6, pc}

0800d004 <coOdPutObj_u8>:
 800d004:	b530      	push	{r4, r5, lr}
 800d006:	b089      	sub	sp, #36	; 0x24
 800d008:	2300      	movs	r3, #0
 800d00a:	f88d 2017 	strb.w	r2, [sp, #23]
 800d00e:	aa07      	add	r2, sp, #28
 800d010:	4605      	mov	r5, r0
 800d012:	460c      	mov	r4, r1
 800d014:	f88d 301b 	strb.w	r3, [sp, #27]
 800d018:	f7ff fe08 	bl	800cc2c <coOdGetObjDescPtr>
 800d01c:	bb60      	cbnz	r0, 800d078 <coOdPutObj_u8+0x74>
 800d01e:	9807      	ldr	r0, [sp, #28]
 800d020:	7843      	ldrb	r3, [r0, #1]
 800d022:	2b2f      	cmp	r3, #47	; 0x2f
 800d024:	d00e      	beq.n	800d044 <coOdPutObj_u8+0x40>
 800d026:	d82d      	bhi.n	800d084 <coOdPutObj_u8+0x80>
 800d028:	2b05      	cmp	r3, #5
 800d02a:	d039      	beq.n	800d0a0 <coOdPutObj_u8+0x9c>
 800d02c:	d805      	bhi.n	800d03a <coOdPutObj_u8+0x36>
 800d02e:	b3bb      	cbz	r3, 800d0a0 <coOdPutObj_u8+0x9c>
 800d030:	3b02      	subs	r3, #2
 800d032:	2b01      	cmp	r3, #1
 800d034:	d934      	bls.n	800d0a0 <coOdPutObj_u8+0x9c>
 800d036:	2016      	movs	r0, #22
 800d038:	e01e      	b.n	800d078 <coOdPutObj_u8+0x74>
 800d03a:	2b27      	cmp	r3, #39	; 0x27
 800d03c:	d002      	beq.n	800d044 <coOdPutObj_u8+0x40>
 800d03e:	d81d      	bhi.n	800d07c <coOdPutObj_u8+0x78>
 800d040:	2b25      	cmp	r3, #37	; 0x25
 800d042:	d1f8      	bne.n	800d036 <coOdPutObj_u8+0x32>
 800d044:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800d048:	f7ff fb86 	bl	800c758 <checkObjValue_u8>
 800d04c:	b9a0      	cbnz	r0, 800d078 <coOdPutObj_u8+0x74>
 800d04e:	f10d 031b 	add.w	r3, sp, #27
 800d052:	9302      	str	r3, [sp, #8]
 800d054:	2301      	movs	r3, #1
 800d056:	e9cd 0300 	strd	r0, r3, [sp]
 800d05a:	4603      	mov	r3, r0
 800d05c:	9807      	ldr	r0, [sp, #28]
 800d05e:	f10d 0217 	add.w	r2, sp, #23
 800d062:	4621      	mov	r1, r4
 800d064:	f7ff fd98 	bl	800cb98 <icoOdPutObj>
 800d068:	b930      	cbnz	r0, 800d078 <coOdPutObj_u8+0x74>
 800d06a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d06e:	9807      	ldr	r0, [sp, #28]
 800d070:	4622      	mov	r2, r4
 800d072:	4629      	mov	r1, r5
 800d074:	f7ff ff82 	bl	800cf7c <icoEventObjectChanged>
 800d078:	b009      	add	sp, #36	; 0x24
 800d07a:	bd30      	pop	{r4, r5, pc}
 800d07c:	2b29      	cmp	r3, #41	; 0x29
 800d07e:	d0e1      	beq.n	800d044 <coOdPutObj_u8+0x40>
 800d080:	2b2c      	cmp	r3, #44	; 0x2c
 800d082:	e7de      	b.n	800d042 <coOdPutObj_u8+0x3e>
 800d084:	2b38      	cmp	r3, #56	; 0x38
 800d086:	d0dd      	beq.n	800d044 <coOdPutObj_u8+0x40>
 800d088:	d805      	bhi.n	800d096 <coOdPutObj_u8+0x92>
 800d08a:	2b33      	cmp	r3, #51	; 0x33
 800d08c:	d0da      	beq.n	800d044 <coOdPutObj_u8+0x40>
 800d08e:	2b36      	cmp	r3, #54	; 0x36
 800d090:	d0d8      	beq.n	800d044 <coOdPutObj_u8+0x40>
 800d092:	2b31      	cmp	r3, #49	; 0x31
 800d094:	e7d5      	b.n	800d042 <coOdPutObj_u8+0x3e>
 800d096:	2b41      	cmp	r3, #65	; 0x41
 800d098:	d0d4      	beq.n	800d044 <coOdPutObj_u8+0x40>
 800d09a:	d80c      	bhi.n	800d0b6 <coOdPutObj_u8+0xb2>
 800d09c:	2b3d      	cmp	r3, #61	; 0x3d
 800d09e:	d1ca      	bne.n	800d036 <coOdPutObj_u8+0x32>
 800d0a0:	f10d 031b 	add.w	r3, sp, #27
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	9302      	str	r3, [sp, #8]
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	e9cd 3200 	strd	r3, r2, [sp]
 800d0ae:	4621      	mov	r1, r4
 800d0b0:	f10d 0217 	add.w	r2, sp, #23
 800d0b4:	e7d6      	b.n	800d064 <coOdPutObj_u8+0x60>
 800d0b6:	2b44      	cmp	r3, #68	; 0x44
 800d0b8:	d0c4      	beq.n	800d044 <coOdPutObj_u8+0x40>
 800d0ba:	2b4c      	cmp	r3, #76	; 0x4c
 800d0bc:	e7c1      	b.n	800d042 <coOdPutObj_u8+0x3e>
	...

0800d0c0 <icoOdGetNumberOfSubs>:
 800d0c0:	4b11      	ldr	r3, [pc, #68]	; (800d108 <icoOdGetNumberOfSubs+0x48>)
 800d0c2:	b530      	push	{r4, r5, lr}
 800d0c4:	881d      	ldrh	r5, [r3, #0]
 800d0c6:	4b11      	ldr	r3, [pc, #68]	; (800d10c <icoOdGetNumberOfSubs+0x4c>)
 800d0c8:	6819      	ldr	r1, [r3, #0]
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	4295      	cmp	r5, r2
 800d0d0:	d801      	bhi.n	800d0d6 <icoOdGetNumberOfSubs+0x16>
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	e016      	b.n	800d104 <icoOdGetNumberOfSubs+0x44>
 800d0d6:	00dc      	lsls	r4, r3, #3
 800d0d8:	190a      	adds	r2, r1, r4
 800d0da:	5b0c      	ldrh	r4, [r1, r4]
 800d0dc:	4284      	cmp	r4, r0
 800d0de:	f103 0301 	add.w	r3, r3, #1
 800d0e2:	d1f3      	bne.n	800d0cc <icoOdGetNumberOfSubs+0xc>
 800d0e4:	88d3      	ldrh	r3, [r2, #6]
 800d0e6:	7890      	ldrb	r0, [r2, #2]
 800d0e8:	4909      	ldr	r1, [pc, #36]	; (800d110 <icoOdGetNumberOfSubs+0x50>)
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	fa10 f383 	uxtah	r3, r0, r3
 800d0f0:	6809      	ldr	r1, [r1, #0]
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d0f8:	889b      	ldrh	r3, [r3, #4]
 800d0fa:	055b      	lsls	r3, r3, #21
 800d0fc:	d502      	bpl.n	800d104 <icoOdGetNumberOfSubs+0x44>
 800d0fe:	78d0      	ldrb	r0, [r2, #3]
 800d100:	3001      	adds	r0, #1
 800d102:	b2c0      	uxtb	r0, r0
 800d104:	bd30      	pop	{r4, r5, pc}
 800d106:	bf00      	nop
 800d108:	20008626 	.word	0x20008626
 800d10c:	2000862c 	.word	0x2000862c
 800d110:	20008628 	.word	0x20008628

0800d114 <icoOdReset>:
 800d114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d118:	4b79      	ldr	r3, [pc, #484]	; (800d300 <icoOdReset+0x1ec>)
 800d11a:	b091      	sub	sp, #68	; 0x44
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	4b78      	ldr	r3, [pc, #480]	; (800d304 <icoOdReset+0x1f0>)
 800d122:	910f      	str	r1, [sp, #60]	; 0x3c
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	930e      	str	r3, [sp, #56]	; 0x38
 800d128:	4b77      	ldr	r3, [pc, #476]	; (800d308 <icoOdReset+0x1f4>)
 800d12a:	f8d3 b000 	ldr.w	fp, [r3]
 800d12e:	4b77      	ldr	r3, [pc, #476]	; (800d30c <icoOdReset+0x1f8>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	9306      	str	r3, [sp, #24]
 800d134:	4b76      	ldr	r3, [pc, #472]	; (800d310 <icoOdReset+0x1fc>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	930d      	str	r3, [sp, #52]	; 0x34
 800d13a:	4b76      	ldr	r3, [pc, #472]	; (800d314 <icoOdReset+0x200>)
 800d13c:	f8d3 a000 	ldr.w	sl, [r3]
 800d140:	4b75      	ldr	r3, [pc, #468]	; (800d318 <icoOdReset+0x204>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	9307      	str	r3, [sp, #28]
 800d146:	4b75      	ldr	r3, [pc, #468]	; (800d31c <icoOdReset+0x208>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d14c:	4b74      	ldr	r3, [pc, #464]	; (800d320 <icoOdReset+0x20c>)
 800d14e:	f8d3 8000 	ldr.w	r8, [r3]
 800d152:	4b74      	ldr	r3, [pc, #464]	; (800d324 <icoOdReset+0x210>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	9304      	str	r3, [sp, #16]
 800d158:	4b73      	ldr	r3, [pc, #460]	; (800d328 <icoOdReset+0x214>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	9309      	str	r3, [sp, #36]	; 0x24
 800d15e:	4b73      	ldr	r3, [pc, #460]	; (800d32c <icoOdReset+0x218>)
 800d160:	f8d3 c000 	ldr.w	ip, [r3]
 800d164:	4b72      	ldr	r3, [pc, #456]	; (800d330 <icoOdReset+0x21c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	9302      	str	r3, [sp, #8]
 800d16a:	4b72      	ldr	r3, [pc, #456]	; (800d334 <icoOdReset+0x220>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	930c      	str	r3, [sp, #48]	; 0x30
 800d170:	4b71      	ldr	r3, [pc, #452]	; (800d338 <icoOdReset+0x224>)
 800d172:	f8d3 9000 	ldr.w	r9, [r3]
 800d176:	4b71      	ldr	r3, [pc, #452]	; (800d33c <icoOdReset+0x228>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	9305      	str	r3, [sp, #20]
 800d17c:	4b70      	ldr	r3, [pc, #448]	; (800d340 <icoOdReset+0x22c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	930a      	str	r3, [sp, #40]	; 0x28
 800d182:	4b70      	ldr	r3, [pc, #448]	; (800d344 <icoOdReset+0x230>)
 800d184:	f8d3 e000 	ldr.w	lr, [r3]
 800d188:	4b6f      	ldr	r3, [pc, #444]	; (800d348 <icoOdReset+0x234>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	9303      	str	r3, [sp, #12]
 800d18e:	4b6f      	ldr	r3, [pc, #444]	; (800d34c <icoOdReset+0x238>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	9308      	str	r3, [sp, #32]
 800d194:	4b6e      	ldr	r3, [pc, #440]	; (800d350 <icoOdReset+0x23c>)
 800d196:	681f      	ldr	r7, [r3, #0]
 800d198:	4b6e      	ldr	r3, [pc, #440]	; (800d354 <icoOdReset+0x240>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	9301      	str	r3, [sp, #4]
 800d19e:	4b6e      	ldr	r3, [pc, #440]	; (800d358 <icoOdReset+0x244>)
 800d1a0:	681c      	ldr	r4, [r3, #0]
 800d1a2:	4b6e      	ldr	r3, [pc, #440]	; (800d35c <icoOdReset+0x248>)
 800d1a4:	881e      	ldrh	r6, [r3, #0]
 800d1a6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800d1aa:	42a6      	cmp	r6, r4
 800d1ac:	d102      	bne.n	800d1b4 <icoOdReset+0xa0>
 800d1ae:	b011      	add	sp, #68	; 0x44
 800d1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b4:	8823      	ldrh	r3, [r4, #0]
 800d1b6:	4283      	cmp	r3, r0
 800d1b8:	d201      	bcs.n	800d1be <icoOdReset+0xaa>
 800d1ba:	3408      	adds	r4, #8
 800d1bc:	e7f5      	b.n	800d1aa <icoOdReset+0x96>
 800d1be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d8fa      	bhi.n	800d1ba <icoOdReset+0xa6>
 800d1c4:	2500      	movs	r5, #0
 800d1c6:	e022      	b.n	800d20e <icoOdReset+0xfa>
 800d1c8:	2a08      	cmp	r2, #8
 800d1ca:	d07a      	beq.n	800d2c2 <icoOdReset+0x1ae>
 800d1cc:	2a0c      	cmp	r2, #12
 800d1ce:	d050      	beq.n	800d272 <icoOdReset+0x15e>
 800d1d0:	2a06      	cmp	r2, #6
 800d1d2:	d11b      	bne.n	800d20c <icoOdReset+0xf8>
 800d1d4:	88da      	ldrh	r2, [r3, #6]
 800d1d6:	9903      	ldr	r1, [sp, #12]
 800d1d8:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 800d1dc:	885b      	ldrh	r3, [r3, #2]
 800d1de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800d1e2:	e013      	b.n	800d20c <icoOdReset+0xf8>
 800d1e4:	2a1d      	cmp	r2, #29
 800d1e6:	d075      	beq.n	800d2d4 <icoOdReset+0x1c0>
 800d1e8:	d80b      	bhi.n	800d202 <icoOdReset+0xee>
 800d1ea:	2a1a      	cmp	r2, #26
 800d1ec:	d061      	beq.n	800d2b2 <icoOdReset+0x19e>
 800d1ee:	2a1b      	cmp	r2, #27
 800d1f0:	d039      	beq.n	800d266 <icoOdReset+0x152>
 800d1f2:	2a18      	cmp	r2, #24
 800d1f4:	d10a      	bne.n	800d20c <icoOdReset+0xf8>
 800d1f6:	88da      	ldrh	r2, [r3, #6]
 800d1f8:	9902      	ldr	r1, [sp, #8]
 800d1fa:	f91c 2002 	ldrsb.w	r2, [ip, r2]
 800d1fe:	885b      	ldrh	r3, [r3, #2]
 800d200:	e022      	b.n	800d248 <icoOdReset+0x134>
 800d202:	2a20      	cmp	r2, #32
 800d204:	d075      	beq.n	800d2f2 <icoOdReset+0x1de>
 800d206:	d821      	bhi.n	800d24c <icoOdReset+0x138>
 800d208:	2a1e      	cmp	r2, #30
 800d20a:	d044      	beq.n	800d296 <icoOdReset+0x182>
 800d20c:	3501      	adds	r5, #1
 800d20e:	78a2      	ldrb	r2, [r4, #2]
 800d210:	b2ab      	uxth	r3, r5
 800d212:	429a      	cmp	r2, r3
 800d214:	d9d1      	bls.n	800d1ba <icoOdReset+0xa6>
 800d216:	88e3      	ldrh	r3, [r4, #6]
 800d218:	9a00      	ldr	r2, [sp, #0]
 800d21a:	442b      	add	r3, r5
 800d21c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d220:	889a      	ldrh	r2, [r3, #4]
 800d222:	0652      	lsls	r2, r2, #25
 800d224:	d5f2      	bpl.n	800d20c <icoOdReset+0xf8>
 800d226:	785a      	ldrb	r2, [r3, #1]
 800d228:	2a0e      	cmp	r2, #14
 800d22a:	d059      	beq.n	800d2e0 <icoOdReset+0x1cc>
 800d22c:	d8da      	bhi.n	800d1e4 <icoOdReset+0xd0>
 800d22e:	2a05      	cmp	r2, #5
 800d230:	d037      	beq.n	800d2a2 <icoOdReset+0x18e>
 800d232:	d8c9      	bhi.n	800d1c8 <icoOdReset+0xb4>
 800d234:	2a02      	cmp	r2, #2
 800d236:	d034      	beq.n	800d2a2 <icoOdReset+0x18e>
 800d238:	2a03      	cmp	r2, #3
 800d23a:	d001      	beq.n	800d240 <icoOdReset+0x12c>
 800d23c:	2a00      	cmp	r2, #0
 800d23e:	d1e5      	bne.n	800d20c <icoOdReset+0xf8>
 800d240:	88da      	ldrh	r2, [r3, #6]
 800d242:	9901      	ldr	r1, [sp, #4]
 800d244:	5cba      	ldrb	r2, [r7, r2]
 800d246:	885b      	ldrh	r3, [r3, #2]
 800d248:	54ca      	strb	r2, [r1, r3]
 800d24a:	e7df      	b.n	800d20c <icoOdReset+0xf8>
 800d24c:	2a49      	cmp	r2, #73	; 0x49
 800d24e:	d018      	beq.n	800d282 <icoOdReset+0x16e>
 800d250:	2a4b      	cmp	r2, #75	; 0x4b
 800d252:	d1db      	bne.n	800d20c <icoOdReset+0xf8>
 800d254:	88da      	ldrh	r2, [r3, #6]
 800d256:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d258:	885b      	ldrh	r3, [r3, #2]
 800d25a:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800d25e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d262:	6812      	ldr	r2, [r2, #0]
 800d264:	e015      	b.n	800d292 <icoOdReset+0x17e>
 800d266:	88da      	ldrh	r2, [r3, #6]
 800d268:	9904      	ldr	r1, [sp, #16]
 800d26a:	f938 2012 	ldrsh.w	r2, [r8, r2, lsl #1]
 800d26e:	885b      	ldrh	r3, [r3, #2]
 800d270:	e7b5      	b.n	800d1de <icoOdReset+0xca>
 800d272:	88da      	ldrh	r2, [r3, #6]
 800d274:	9905      	ldr	r1, [sp, #20]
 800d276:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800d27a:	885b      	ldrh	r3, [r3, #2]
 800d27c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d280:	e7c4      	b.n	800d20c <icoOdReset+0xf8>
 800d282:	88da      	ldrh	r2, [r3, #6]
 800d284:	9906      	ldr	r1, [sp, #24]
 800d286:	885b      	ldrh	r3, [r3, #2]
 800d288:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800d28c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d290:	6812      	ldr	r2, [r2, #0]
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	e7ba      	b.n	800d20c <icoOdReset+0xf8>
 800d296:	88da      	ldrh	r2, [r3, #6]
 800d298:	9907      	ldr	r1, [sp, #28]
 800d29a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d29e:	885b      	ldrh	r3, [r3, #2]
 800d2a0:	e7ec      	b.n	800d27c <icoOdReset+0x168>
 800d2a2:	885a      	ldrh	r2, [r3, #2]
 800d2a4:	9908      	ldr	r1, [sp, #32]
 800d2a6:	88db      	ldrh	r3, [r3, #6]
 800d2a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d2ac:	5cfb      	ldrb	r3, [r7, r3]
 800d2ae:	7013      	strb	r3, [r2, #0]
 800d2b0:	e7ac      	b.n	800d20c <icoOdReset+0xf8>
 800d2b2:	885a      	ldrh	r2, [r3, #2]
 800d2b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2b6:	88db      	ldrh	r3, [r3, #6]
 800d2b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d2bc:	f91c 3003 	ldrsb.w	r3, [ip, r3]
 800d2c0:	e7f5      	b.n	800d2ae <icoOdReset+0x19a>
 800d2c2:	88da      	ldrh	r2, [r3, #6]
 800d2c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d2c6:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 800d2ca:	885b      	ldrh	r3, [r3, #2]
 800d2cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d2d0:	801a      	strh	r2, [r3, #0]
 800d2d2:	e79b      	b.n	800d20c <icoOdReset+0xf8>
 800d2d4:	88da      	ldrh	r2, [r3, #6]
 800d2d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2d8:	f938 2012 	ldrsh.w	r2, [r8, r2, lsl #1]
 800d2dc:	885b      	ldrh	r3, [r3, #2]
 800d2de:	e7f5      	b.n	800d2cc <icoOdReset+0x1b8>
 800d2e0:	88da      	ldrh	r2, [r3, #6]
 800d2e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d2e4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800d2e8:	885b      	ldrh	r3, [r3, #2]
 800d2ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d2ee:	601a      	str	r2, [r3, #0]
 800d2f0:	e78c      	b.n	800d20c <icoOdReset+0xf8>
 800d2f2:	88da      	ldrh	r2, [r3, #6]
 800d2f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d2f6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d2fa:	885b      	ldrh	r3, [r3, #2]
 800d2fc:	e7f5      	b.n	800d2ea <icoOdReset+0x1d6>
 800d2fe:	bf00      	nop
 800d300:	20008628 	.word	0x20008628
 800d304:	20008684 	.word	0x20008684
 800d308:	20008644 	.word	0x20008644
 800d30c:	200086a0 	.word	0x200086a0
 800d310:	2000867c 	.word	0x2000867c
 800d314:	2000863c 	.word	0x2000863c
 800d318:	20008698 	.word	0x20008698
 800d31c:	20008678 	.word	0x20008678
 800d320:	20008638 	.word	0x20008638
 800d324:	20008694 	.word	0x20008694
 800d328:	20008680 	.word	0x20008680
 800d32c:	20008640 	.word	0x20008640
 800d330:	2000869c 	.word	0x2000869c
 800d334:	2000868c 	.word	0x2000868c
 800d338:	2000864c 	.word	0x2000864c
 800d33c:	200086a8 	.word	0x200086a8
 800d340:	20008688 	.word	0x20008688
 800d344:	20008648 	.word	0x20008648
 800d348:	200086a4 	.word	0x200086a4
 800d34c:	20008690 	.word	0x20008690
 800d350:	20008650 	.word	0x20008650
 800d354:	200086ac 	.word	0x200086ac
 800d358:	2000862c 	.word	0x2000862c
 800d35c:	20008626 	.word	0x20008626

0800d360 <icoOdAccessVarInit>:
 800d360:	4a21      	ldr	r2, [pc, #132]	; (800d3e8 <icoOdAccessVarInit+0x88>)
 800d362:	2300      	movs	r3, #0
 800d364:	8013      	strh	r3, [r2, #0]
 800d366:	4a21      	ldr	r2, [pc, #132]	; (800d3ec <icoOdAccessVarInit+0x8c>)
 800d368:	6013      	str	r3, [r2, #0]
 800d36a:	4a21      	ldr	r2, [pc, #132]	; (800d3f0 <icoOdAccessVarInit+0x90>)
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	4a21      	ldr	r2, [pc, #132]	; (800d3f4 <icoOdAccessVarInit+0x94>)
 800d370:	6013      	str	r3, [r2, #0]
 800d372:	4a21      	ldr	r2, [pc, #132]	; (800d3f8 <icoOdAccessVarInit+0x98>)
 800d374:	6013      	str	r3, [r2, #0]
 800d376:	4a21      	ldr	r2, [pc, #132]	; (800d3fc <icoOdAccessVarInit+0x9c>)
 800d378:	6013      	str	r3, [r2, #0]
 800d37a:	4a21      	ldr	r2, [pc, #132]	; (800d400 <icoOdAccessVarInit+0xa0>)
 800d37c:	6013      	str	r3, [r2, #0]
 800d37e:	4a21      	ldr	r2, [pc, #132]	; (800d404 <icoOdAccessVarInit+0xa4>)
 800d380:	6013      	str	r3, [r2, #0]
 800d382:	4a21      	ldr	r2, [pc, #132]	; (800d408 <icoOdAccessVarInit+0xa8>)
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	4a21      	ldr	r2, [pc, #132]	; (800d40c <icoOdAccessVarInit+0xac>)
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	4a21      	ldr	r2, [pc, #132]	; (800d410 <icoOdAccessVarInit+0xb0>)
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	4a21      	ldr	r2, [pc, #132]	; (800d414 <icoOdAccessVarInit+0xb4>)
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	4a21      	ldr	r2, [pc, #132]	; (800d418 <icoOdAccessVarInit+0xb8>)
 800d394:	6013      	str	r3, [r2, #0]
 800d396:	4a21      	ldr	r2, [pc, #132]	; (800d41c <icoOdAccessVarInit+0xbc>)
 800d398:	6013      	str	r3, [r2, #0]
 800d39a:	4a21      	ldr	r2, [pc, #132]	; (800d420 <icoOdAccessVarInit+0xc0>)
 800d39c:	6013      	str	r3, [r2, #0]
 800d39e:	4a21      	ldr	r2, [pc, #132]	; (800d424 <icoOdAccessVarInit+0xc4>)
 800d3a0:	6013      	str	r3, [r2, #0]
 800d3a2:	4a21      	ldr	r2, [pc, #132]	; (800d428 <icoOdAccessVarInit+0xc8>)
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	4a21      	ldr	r2, [pc, #132]	; (800d42c <icoOdAccessVarInit+0xcc>)
 800d3a8:	6013      	str	r3, [r2, #0]
 800d3aa:	4a21      	ldr	r2, [pc, #132]	; (800d430 <icoOdAccessVarInit+0xd0>)
 800d3ac:	6013      	str	r3, [r2, #0]
 800d3ae:	4a21      	ldr	r2, [pc, #132]	; (800d434 <icoOdAccessVarInit+0xd4>)
 800d3b0:	6013      	str	r3, [r2, #0]
 800d3b2:	4a21      	ldr	r2, [pc, #132]	; (800d438 <icoOdAccessVarInit+0xd8>)
 800d3b4:	6013      	str	r3, [r2, #0]
 800d3b6:	4a21      	ldr	r2, [pc, #132]	; (800d43c <icoOdAccessVarInit+0xdc>)
 800d3b8:	6013      	str	r3, [r2, #0]
 800d3ba:	4a21      	ldr	r2, [pc, #132]	; (800d440 <icoOdAccessVarInit+0xe0>)
 800d3bc:	6013      	str	r3, [r2, #0]
 800d3be:	4a21      	ldr	r2, [pc, #132]	; (800d444 <icoOdAccessVarInit+0xe4>)
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	4a21      	ldr	r2, [pc, #132]	; (800d448 <icoOdAccessVarInit+0xe8>)
 800d3c4:	6013      	str	r3, [r2, #0]
 800d3c6:	4a21      	ldr	r2, [pc, #132]	; (800d44c <icoOdAccessVarInit+0xec>)
 800d3c8:	6013      	str	r3, [r2, #0]
 800d3ca:	4a21      	ldr	r2, [pc, #132]	; (800d450 <icoOdAccessVarInit+0xf0>)
 800d3cc:	6013      	str	r3, [r2, #0]
 800d3ce:	4a21      	ldr	r2, [pc, #132]	; (800d454 <icoOdAccessVarInit+0xf4>)
 800d3d0:	6013      	str	r3, [r2, #0]
 800d3d2:	4a21      	ldr	r2, [pc, #132]	; (800d458 <icoOdAccessVarInit+0xf8>)
 800d3d4:	6013      	str	r3, [r2, #0]
 800d3d6:	4a21      	ldr	r2, [pc, #132]	; (800d45c <icoOdAccessVarInit+0xfc>)
 800d3d8:	6013      	str	r3, [r2, #0]
 800d3da:	4a21      	ldr	r2, [pc, #132]	; (800d460 <icoOdAccessVarInit+0x100>)
 800d3dc:	6013      	str	r3, [r2, #0]
 800d3de:	4a21      	ldr	r2, [pc, #132]	; (800d464 <icoOdAccessVarInit+0x104>)
 800d3e0:	6013      	str	r3, [r2, #0]
 800d3e2:	4a21      	ldr	r2, [pc, #132]	; (800d468 <icoOdAccessVarInit+0x108>)
 800d3e4:	6013      	str	r3, [r2, #0]
 800d3e6:	4770      	bx	lr
 800d3e8:	20008624 	.word	0x20008624
 800d3ec:	20008650 	.word	0x20008650
 800d3f0:	20008648 	.word	0x20008648
 800d3f4:	2000864c 	.word	0x2000864c
 800d3f8:	20008644 	.word	0x20008644
 800d3fc:	200086ac 	.word	0x200086ac
 800d400:	200086a4 	.word	0x200086a4
 800d404:	200086a8 	.word	0x200086a8
 800d408:	200086a0 	.word	0x200086a0
 800d40c:	20008640 	.word	0x20008640
 800d410:	20008638 	.word	0x20008638
 800d414:	2000863c 	.word	0x2000863c
 800d418:	2000869c 	.word	0x2000869c
 800d41c:	20008694 	.word	0x20008694
 800d420:	20008698 	.word	0x20008698
 800d424:	20008690 	.word	0x20008690
 800d428:	20008688 	.word	0x20008688
 800d42c:	2000868c 	.word	0x2000868c
 800d430:	20008680 	.word	0x20008680
 800d434:	20008678 	.word	0x20008678
 800d438:	2000867c 	.word	0x2000867c
 800d43c:	20008684 	.word	0x20008684
 800d440:	20008630 	.word	0x20008630
 800d444:	20008634 	.word	0x20008634
 800d448:	2000866c 	.word	0x2000866c
 800d44c:	20008674 	.word	0x20008674
 800d450:	20008670 	.word	0x20008670
 800d454:	20008660 	.word	0x20008660
 800d458:	20008668 	.word	0x20008668
 800d45c:	20008664 	.word	0x20008664
 800d460:	20008654 	.word	0x20008654
 800d464:	2000865c 	.word	0x2000865c
 800d468:	20008658 	.word	0x20008658

0800d46c <coOdInitOdPtr>:
 800d46c:	b410      	push	{r4}
 800d46e:	4c37      	ldr	r4, [pc, #220]	; (800d54c <coOdInitOdPtr+0xe0>)
 800d470:	9b02      	ldr	r3, [sp, #8]
 800d472:	6020      	str	r0, [r4, #0]
 800d474:	4836      	ldr	r0, [pc, #216]	; (800d550 <coOdInitOdPtr+0xe4>)
 800d476:	8001      	strh	r1, [r0, #0]
 800d478:	4936      	ldr	r1, [pc, #216]	; (800d554 <coOdInitOdPtr+0xe8>)
 800d47a:	600a      	str	r2, [r1, #0]
 800d47c:	4a36      	ldr	r2, [pc, #216]	; (800d558 <coOdInitOdPtr+0xec>)
 800d47e:	6819      	ldr	r1, [r3, #0]
 800d480:	6011      	str	r1, [r2, #0]
 800d482:	4a36      	ldr	r2, [pc, #216]	; (800d55c <coOdInitOdPtr+0xf0>)
 800d484:	6859      	ldr	r1, [r3, #4]
 800d486:	6011      	str	r1, [r2, #0]
 800d488:	4a35      	ldr	r2, [pc, #212]	; (800d560 <coOdInitOdPtr+0xf4>)
 800d48a:	6899      	ldr	r1, [r3, #8]
 800d48c:	6011      	str	r1, [r2, #0]
 800d48e:	4a35      	ldr	r2, [pc, #212]	; (800d564 <coOdInitOdPtr+0xf8>)
 800d490:	68d9      	ldr	r1, [r3, #12]
 800d492:	6011      	str	r1, [r2, #0]
 800d494:	4a34      	ldr	r2, [pc, #208]	; (800d568 <coOdInitOdPtr+0xfc>)
 800d496:	6919      	ldr	r1, [r3, #16]
 800d498:	6011      	str	r1, [r2, #0]
 800d49a:	4a34      	ldr	r2, [pc, #208]	; (800d56c <coOdInitOdPtr+0x100>)
 800d49c:	6959      	ldr	r1, [r3, #20]
 800d49e:	6011      	str	r1, [r2, #0]
 800d4a0:	4a33      	ldr	r2, [pc, #204]	; (800d570 <coOdInitOdPtr+0x104>)
 800d4a2:	6999      	ldr	r1, [r3, #24]
 800d4a4:	6011      	str	r1, [r2, #0]
 800d4a6:	4a33      	ldr	r2, [pc, #204]	; (800d574 <coOdInitOdPtr+0x108>)
 800d4a8:	69d9      	ldr	r1, [r3, #28]
 800d4aa:	6011      	str	r1, [r2, #0]
 800d4ac:	4a32      	ldr	r2, [pc, #200]	; (800d578 <coOdInitOdPtr+0x10c>)
 800d4ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d4b0:	6011      	str	r1, [r2, #0]
 800d4b2:	4a32      	ldr	r2, [pc, #200]	; (800d57c <coOdInitOdPtr+0x110>)
 800d4b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d4b6:	6011      	str	r1, [r2, #0]
 800d4b8:	4a31      	ldr	r2, [pc, #196]	; (800d580 <coOdInitOdPtr+0x114>)
 800d4ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d4bc:	6011      	str	r1, [r2, #0]
 800d4be:	4a31      	ldr	r2, [pc, #196]	; (800d584 <coOdInitOdPtr+0x118>)
 800d4c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d4c2:	6011      	str	r1, [r2, #0]
 800d4c4:	4a30      	ldr	r2, [pc, #192]	; (800d588 <coOdInitOdPtr+0x11c>)
 800d4c6:	6a19      	ldr	r1, [r3, #32]
 800d4c8:	6011      	str	r1, [r2, #0]
 800d4ca:	4a30      	ldr	r2, [pc, #192]	; (800d58c <coOdInitOdPtr+0x120>)
 800d4cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d4ce:	6011      	str	r1, [r2, #0]
 800d4d0:	4a2f      	ldr	r2, [pc, #188]	; (800d590 <coOdInitOdPtr+0x124>)
 800d4d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d4d4:	6011      	str	r1, [r2, #0]
 800d4d6:	4a2f      	ldr	r2, [pc, #188]	; (800d594 <coOdInitOdPtr+0x128>)
 800d4d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d4da:	6011      	str	r1, [r2, #0]
 800d4dc:	4a2e      	ldr	r2, [pc, #184]	; (800d598 <coOdInitOdPtr+0x12c>)
 800d4de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d4e0:	6011      	str	r1, [r2, #0]
 800d4e2:	4a2e      	ldr	r2, [pc, #184]	; (800d59c <coOdInitOdPtr+0x130>)
 800d4e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d4e6:	6011      	str	r1, [r2, #0]
 800d4e8:	4a2d      	ldr	r2, [pc, #180]	; (800d5a0 <coOdInitOdPtr+0x134>)
 800d4ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d4ec:	6011      	str	r1, [r2, #0]
 800d4ee:	4a2d      	ldr	r2, [pc, #180]	; (800d5a4 <coOdInitOdPtr+0x138>)
 800d4f0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800d4f2:	6011      	str	r1, [r2, #0]
 800d4f4:	4a2c      	ldr	r2, [pc, #176]	; (800d5a8 <coOdInitOdPtr+0x13c>)
 800d4f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d4f8:	6011      	str	r1, [r2, #0]
 800d4fa:	4a2c      	ldr	r2, [pc, #176]	; (800d5ac <coOdInitOdPtr+0x140>)
 800d4fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d4fe:	6011      	str	r1, [r2, #0]
 800d500:	4a2b      	ldr	r2, [pc, #172]	; (800d5b0 <coOdInitOdPtr+0x144>)
 800d502:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800d504:	6011      	str	r1, [r2, #0]
 800d506:	4a2b      	ldr	r2, [pc, #172]	; (800d5b4 <coOdInitOdPtr+0x148>)
 800d508:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d50a:	6011      	str	r1, [r2, #0]
 800d50c:	4a2a      	ldr	r2, [pc, #168]	; (800d5b8 <coOdInitOdPtr+0x14c>)
 800d50e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800d510:	6011      	str	r1, [r2, #0]
 800d512:	4a2a      	ldr	r2, [pc, #168]	; (800d5bc <coOdInitOdPtr+0x150>)
 800d514:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800d516:	6011      	str	r1, [r2, #0]
 800d518:	4a29      	ldr	r2, [pc, #164]	; (800d5c0 <coOdInitOdPtr+0x154>)
 800d51a:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800d51c:	6011      	str	r1, [r2, #0]
 800d51e:	4a29      	ldr	r2, [pc, #164]	; (800d5c4 <coOdInitOdPtr+0x158>)
 800d520:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d522:	6011      	str	r1, [r2, #0]
 800d524:	4a28      	ldr	r2, [pc, #160]	; (800d5c8 <coOdInitOdPtr+0x15c>)
 800d526:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d528:	6011      	str	r1, [r2, #0]
 800d52a:	4a28      	ldr	r2, [pc, #160]	; (800d5cc <coOdInitOdPtr+0x160>)
 800d52c:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800d52e:	6011      	str	r1, [r2, #0]
 800d530:	4a27      	ldr	r2, [pc, #156]	; (800d5d0 <coOdInitOdPtr+0x164>)
 800d532:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800d534:	6011      	str	r1, [r2, #0]
 800d536:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d538:	4b26      	ldr	r3, [pc, #152]	; (800d5d4 <coOdInitOdPtr+0x168>)
 800d53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d53e:	601a      	str	r2, [r3, #0]
 800d540:	f649 71ff 	movw	r1, #40959	; 0x9fff
 800d544:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d548:	f7ff bde4 	b.w	800d114 <icoOdReset>
 800d54c:	2000862c 	.word	0x2000862c
 800d550:	20008626 	.word	0x20008626
 800d554:	20008628 	.word	0x20008628
 800d558:	20008650 	.word	0x20008650
 800d55c:	20008648 	.word	0x20008648
 800d560:	2000864c 	.word	0x2000864c
 800d564:	20008644 	.word	0x20008644
 800d568:	200086ac 	.word	0x200086ac
 800d56c:	200086a4 	.word	0x200086a4
 800d570:	200086a8 	.word	0x200086a8
 800d574:	200086a0 	.word	0x200086a0
 800d578:	20008690 	.word	0x20008690
 800d57c:	20008688 	.word	0x20008688
 800d580:	2000868c 	.word	0x2000868c
 800d584:	20008684 	.word	0x20008684
 800d588:	20008640 	.word	0x20008640
 800d58c:	20008638 	.word	0x20008638
 800d590:	2000863c 	.word	0x2000863c
 800d594:	2000869c 	.word	0x2000869c
 800d598:	20008694 	.word	0x20008694
 800d59c:	20008698 	.word	0x20008698
 800d5a0:	20008680 	.word	0x20008680
 800d5a4:	20008678 	.word	0x20008678
 800d5a8:	2000867c 	.word	0x2000867c
 800d5ac:	20008630 	.word	0x20008630
 800d5b0:	20008634 	.word	0x20008634
 800d5b4:	2000866c 	.word	0x2000866c
 800d5b8:	20008674 	.word	0x20008674
 800d5bc:	20008670 	.word	0x20008670
 800d5c0:	20008660 	.word	0x20008660
 800d5c4:	20008668 	.word	0x20008668
 800d5c8:	20008664 	.word	0x20008664
 800d5cc:	20008654 	.word	0x20008654
 800d5d0:	2000865c 	.word	0x2000865c
 800d5d4:	20008658 	.word	0x20008658

0800d5d8 <pdoReceiveEventTimer>:
 800d5d8:	4b06      	ldr	r3, [pc, #24]	; (800d5f4 <pdoReceiveEventTimer+0x1c>)
 800d5da:	b570      	push	{r4, r5, r6, lr}
 800d5dc:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
 800d5de:	881c      	ldrh	r4, [r3, #0]
 800d5e0:	4e05      	ldr	r6, [pc, #20]	; (800d5f8 <pdoReceiveEventTimer+0x20>)
 800d5e2:	b904      	cbnz	r4, 800d5e6 <pdoReceiveEventTimer+0xe>
 800d5e4:	bd70      	pop	{r4, r5, r6, pc}
 800d5e6:	3c01      	subs	r4, #1
 800d5e8:	b2a4      	uxth	r4, r4
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800d5f0:	4798      	blx	r3
 800d5f2:	e7f6      	b.n	800d5e2 <pdoReceiveEventTimer+0xa>
 800d5f4:	200089f0 	.word	0x200089f0
 800d5f8:	200089ec 	.word	0x200089ec

0800d5fc <searchRecPdo>:
 800d5fc:	4907      	ldr	r1, [pc, #28]	; (800d61c <searchRecPdo+0x20>)
 800d5fe:	b530      	push	{r4, r5, lr}
 800d600:	2200      	movs	r2, #0
 800d602:	243c      	movs	r4, #60	; 0x3c
 800d604:	fb04 1302 	mla	r3, r4, r2, r1
 800d608:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
 800d60a:	4285      	cmp	r5, r0
 800d60c:	d101      	bne.n	800d612 <searchRecPdo+0x16>
 800d60e:	4618      	mov	r0, r3
 800d610:	bd30      	pop	{r4, r5, pc}
 800d612:	3201      	adds	r2, #1
 800d614:	2a04      	cmp	r2, #4
 800d616:	d1f5      	bne.n	800d604 <searchRecPdo+0x8>
 800d618:	2000      	movs	r0, #0
 800d61a:	e7f9      	b.n	800d610 <searchRecPdo+0x14>
 800d61c:	200089f4 	.word	0x200089f4

0800d620 <pdoReceiveData>:
 800d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d624:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800d6f8 <pdoReceiveData+0xd8>
 800d628:	b087      	sub	sp, #28
 800d62a:	263c      	movs	r6, #60	; 0x3c
 800d62c:	2500      	movs	r5, #0
 800d62e:	4346      	muls	r6, r0
 800d630:	9102      	str	r1, [sp, #8]
 800d632:	46a8      	mov	r8, r5
 800d634:	eb09 0a06 	add.w	sl, r9, r6
 800d638:	eb09 0406 	add.w	r4, r9, r6
 800d63c:	b2ef      	uxtb	r7, r5
 800d63e:	6862      	ldr	r2, [r4, #4]
 800d640:	7813      	ldrb	r3, [r2, #0]
 800d642:	42bb      	cmp	r3, r7
 800d644:	d80c      	bhi.n	800d660 <pdoReceiveData+0x40>
 800d646:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800d64a:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
 800d64c:	2bf0      	cmp	r3, #240	; 0xf0
 800d64e:	d93e      	bls.n	800d6ce <pdoReceiveData+0xae>
 800d650:	4b25      	ldr	r3, [pc, #148]	; (800d6e8 <pdoReceiveData+0xc8>)
 800d652:	4e26      	ldr	r6, [pc, #152]	; (800d6ec <pdoReceiveData+0xcc>)
 800d654:	881c      	ldrh	r4, [r3, #0]
 800d656:	bb9c      	cbnz	r4, 800d6c0 <pdoReceiveData+0xa0>
 800d658:	2000      	movs	r0, #0
 800d65a:	b007      	add	sp, #28
 800d65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d660:	f04f 0b0c 	mov.w	fp, #12
 800d664:	fb0b fb07 	mul.w	fp, fp, r7
 800d668:	445a      	add	r2, fp
 800d66a:	6850      	ldr	r0, [r2, #4]
 800d66c:	b1e8      	cbz	r0, 800d6aa <pdoReceiveData+0x8a>
 800d66e:	2100      	movs	r1, #0
 800d670:	7a53      	ldrb	r3, [r2, #9]
 800d672:	7a12      	ldrb	r2, [r2, #8]
 800d674:	9100      	str	r1, [sp, #0]
 800d676:	9902      	ldr	r1, [sp, #8]
 800d678:	4441      	add	r1, r8
 800d67a:	f7ff f8fd 	bl	800c878 <coNumMemcpyPack>
 800d67e:	2801      	cmp	r0, #1
 800d680:	d113      	bne.n	800d6aa <pdoReceiveData+0x8a>
 800d682:	6862      	ldr	r2, [r4, #4]
 800d684:	9003      	str	r0, [sp, #12]
 800d686:	4493      	add	fp, r2
 800d688:	aa05      	add	r2, sp, #20
 800d68a:	f8db 400c 	ldr.w	r4, [fp, #12]
 800d68e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800d692:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d696:	4621      	mov	r1, r4
 800d698:	4658      	mov	r0, fp
 800d69a:	f7ff fac7 	bl	800cc2c <coOdGetObjDescPtr>
 800d69e:	9b03      	ldr	r3, [sp, #12]
 800d6a0:	9805      	ldr	r0, [sp, #20]
 800d6a2:	4622      	mov	r2, r4
 800d6a4:	4659      	mov	r1, fp
 800d6a6:	f7ff fc69 	bl	800cf7c <icoEventObjectChanged>
 800d6aa:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d6ae:	230c      	movs	r3, #12
 800d6b0:	fb03 2707 	mla	r7, r3, r7, r2
 800d6b4:	3501      	adds	r5, #1
 800d6b6:	7a3b      	ldrb	r3, [r7, #8]
 800d6b8:	4498      	add	r8, r3
 800d6ba:	fa5f f888 	uxtb.w	r8, r8
 800d6be:	e7bb      	b.n	800d638 <pdoReceiveData+0x18>
 800d6c0:	3c01      	subs	r4, #1
 800d6c2:	b2a4      	uxth	r4, r4
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800d6ca:	4798      	blx	r3
 800d6cc:	e7c3      	b.n	800d656 <pdoReceiveData+0x36>
 800d6ce:	4b08      	ldr	r3, [pc, #32]	; (800d6f0 <pdoReceiveData+0xd0>)
 800d6d0:	4e08      	ldr	r6, [pc, #32]	; (800d6f4 <pdoReceiveData+0xd4>)
 800d6d2:	881c      	ldrh	r4, [r3, #0]
 800d6d4:	2c00      	cmp	r4, #0
 800d6d6:	d0bf      	beq.n	800d658 <pdoReceiveData+0x38>
 800d6d8:	3c01      	subs	r4, #1
 800d6da:	b2a4      	uxth	r4, r4
 800d6dc:	4628      	mov	r0, r5
 800d6de:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800d6e2:	4798      	blx	r3
 800d6e4:	e7f6      	b.n	800d6d4 <pdoReceiveData+0xb4>
 800d6e6:	bf00      	nop
 800d6e8:	200089e0 	.word	0x200089e0
 800d6ec:	200089dc 	.word	0x200089dc
 800d6f0:	200089d8 	.word	0x200089d8
 800d6f4:	200089d4 	.word	0x200089d4
 800d6f8:	200089f4 	.word	0x200089f4

0800d6fc <checkTrPdoMappingTable>:
 800d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	4681      	mov	r9, r0
 800d702:	b09d      	sub	sp, #116	; 0x74
 800d704:	4688      	mov	r8, r1
 800d706:	b911      	cbnz	r1, 800d70e <checkTrPdoMappingTable+0x12>
 800d708:	6843      	ldr	r3, [r0, #4]
 800d70a:	f893 8000 	ldrb.w	r8, [r3]
 800d70e:	f8b9 002a 	ldrh.w	r0, [r9, #42]	; 0x2a
 800d712:	f500 50cf 	add.w	r0, r0, #6624	; 0x19e0
 800d716:	301f      	adds	r0, #31
 800d718:	b280      	uxth	r0, r0
 800d71a:	f7ff fcd1 	bl	800d0c0 <icoOdGetNumberOfSubs>
 800d71e:	4540      	cmp	r0, r8
 800d720:	d230      	bcs.n	800d784 <checkTrPdoMappingTable+0x88>
 800d722:	27ff      	movs	r7, #255	; 0xff
 800d724:	4638      	mov	r0, r7
 800d726:	b01d      	add	sp, #116	; 0x74
 800d728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72c:	f8b9 4030 	ldrh.w	r4, [r9, #48]	; 0x30
 800d730:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d734:	f04f 0a0c 	mov.w	sl, #12
 800d738:	455c      	cmp	r4, fp
 800d73a:	fb0a fa05 	mul.w	sl, sl, r5
 800d73e:	bf18      	it	ne
 800d740:	4913      	ldrne	r1, [pc, #76]	; (800d790 <checkTrPdoMappingTable+0x94>)
 800d742:	4453      	add	r3, sl
 800d744:	bf18      	it	ne
 800d746:	2264      	movne	r2, #100	; 0x64
 800d748:	68d8      	ldr	r0, [r3, #12]
 800d74a:	bf14      	ite	ne
 800d74c:	fb02 1404 	mlane	r4, r2, r4, r1
 800d750:	ac03      	addeq	r4, sp, #12
 800d752:	1d73      	adds	r3, r6, #5
 800d754:	4423      	add	r3, r4
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	1d33      	adds	r3, r6, #4
 800d75a:	4423      	add	r3, r4
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	b2c2      	uxtb	r2, r0
 800d760:	19a3      	adds	r3, r4, r6
 800d762:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d766:	0c00      	lsrs	r0, r0, #16
 800d768:	f7ff fb2d 	bl	800cdc6 <icoOdGetObjTrMapData>
 800d76c:	3501      	adds	r5, #1
 800d76e:	360c      	adds	r6, #12
 800d770:	2800      	cmp	r0, #0
 800d772:	d1d6      	bne.n	800d722 <checkTrPdoMappingTable+0x26>
 800d774:	4454      	add	r4, sl
 800d776:	7a23      	ldrb	r3, [r4, #8]
 800d778:	441f      	add	r7, r3
 800d77a:	b2ff      	uxtb	r7, r7
 800d77c:	b2eb      	uxtb	r3, r5
 800d77e:	4598      	cmp	r8, r3
 800d780:	d8d4      	bhi.n	800d72c <checkTrPdoMappingTable+0x30>
 800d782:	e7cf      	b.n	800d724 <checkTrPdoMappingTable+0x28>
 800d784:	2500      	movs	r5, #0
 800d786:	2604      	movs	r6, #4
 800d788:	462f      	mov	r7, r5
 800d78a:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800d78e:	e7f5      	b.n	800d77c <checkTrPdoMappingTable+0x80>
 800d790:	20008844 	.word	0x20008844

0800d794 <setupTrPdoTimer>:
 800d794:	b513      	push	{r0, r1, r4, lr}
 800d796:	4604      	mov	r4, r0
 800d798:	f7fe fe18 	bl	800c3cc <coNmtGetState>
 800d79c:	6822      	ldr	r2, [r4, #0]
 800d79e:	2a00      	cmp	r2, #0
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	f104 000c 	add.w	r0, r4, #12
 800d7a6:	db07      	blt.n	800d7b8 <setupTrPdoTimer+0x24>
 800d7a8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800d7aa:	b129      	cbz	r1, 800d7b8 <setupTrPdoTimer+0x24>
 800d7ac:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800d7b0:	2afd      	cmp	r2, #253	; 0xfd
 800d7b2:	d901      	bls.n	800d7b8 <setupTrPdoTimer+0x24>
 800d7b4:	2b05      	cmp	r3, #5
 800d7b6:	d004      	beq.n	800d7c2 <setupTrPdoTimer+0x2e>
 800d7b8:	f002 f9d8 	bl	800fb6c <coTimerStop>
 800d7bc:	2000      	movs	r0, #0
 800d7be:	b002      	add	sp, #8
 800d7c0:	bd10      	pop	{r4, pc}
 800d7c2:	2303      	movs	r3, #3
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	4623      	mov	r3, r4
 800d7c8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800d7cc:	4a02      	ldr	r2, [pc, #8]	; (800d7d8 <setupTrPdoTimer+0x44>)
 800d7ce:	4361      	muls	r1, r4
 800d7d0:	f002 f9e2 	bl	800fb98 <coTimerStart>
 800d7d4:	e7f3      	b.n	800d7be <setupTrPdoTimer+0x2a>
 800d7d6:	bf00      	nop
 800d7d8:	0800df11 	.word	0x0800df11

0800d7dc <checkRecPdoMappingTable>:
 800d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	b09d      	sub	sp, #116	; 0x74
 800d7e4:	4688      	mov	r8, r1
 800d7e6:	b911      	cbnz	r1, 800d7ee <checkRecPdoMappingTable+0x12>
 800d7e8:	6843      	ldr	r3, [r0, #4]
 800d7ea:	f893 8000 	ldrb.w	r8, [r3]
 800d7ee:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 800d7f0:	f500 50af 	add.w	r0, r0, #5600	; 0x15e0
 800d7f4:	301f      	adds	r0, #31
 800d7f6:	b280      	uxth	r0, r0
 800d7f8:	f7ff fc62 	bl	800d0c0 <icoOdGetNumberOfSubs>
 800d7fc:	4540      	cmp	r0, r8
 800d7fe:	d22d      	bcs.n	800d85c <checkRecPdoMappingTable+0x80>
 800d800:	27ff      	movs	r7, #255	; 0xff
 800d802:	4638      	mov	r0, r7
 800d804:	b01d      	add	sp, #116	; 0x74
 800d806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80a:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800d80c:	6872      	ldr	r2, [r6, #4]
 800d80e:	f04f 090c 	mov.w	r9, #12
 800d812:	fb09 f904 	mul.w	r9, r9, r4
 800d816:	4553      	cmp	r3, sl
 800d818:	444a      	add	r2, r9
 800d81a:	bf18      	it	ne
 800d81c:	2164      	movne	r1, #100	; 0x64
 800d81e:	68d0      	ldr	r0, [r2, #12]
 800d820:	bf14      	ite	ne
 800d822:	fb01 b303 	mlane	r3, r1, r3, fp
 800d826:	ab03      	addeq	r3, sp, #12
 800d828:	1d6a      	adds	r2, r5, #5
 800d82a:	441a      	add	r2, r3
 800d82c:	9201      	str	r2, [sp, #4]
 800d82e:	1d2a      	adds	r2, r5, #4
 800d830:	441a      	add	r2, r3
 800d832:	9200      	str	r2, [sp, #0]
 800d834:	442b      	add	r3, r5
 800d836:	b2c2      	uxtb	r2, r0
 800d838:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d83c:	0c00      	lsrs	r0, r0, #16
 800d83e:	f7ff fa85 	bl	800cd4c <icoOdGetObjRecMapData>
 800d842:	3401      	adds	r4, #1
 800d844:	350c      	adds	r5, #12
 800d846:	2800      	cmp	r0, #0
 800d848:	d1da      	bne.n	800d800 <checkRecPdoMappingTable+0x24>
 800d84a:	6873      	ldr	r3, [r6, #4]
 800d84c:	444b      	add	r3, r9
 800d84e:	7a1b      	ldrb	r3, [r3, #8]
 800d850:	441f      	add	r7, r3
 800d852:	b2ff      	uxtb	r7, r7
 800d854:	b2e3      	uxtb	r3, r4
 800d856:	4598      	cmp	r8, r3
 800d858:	d8d7      	bhi.n	800d80a <checkRecPdoMappingTable+0x2e>
 800d85a:	e7d2      	b.n	800d802 <checkRecPdoMappingTable+0x26>
 800d85c:	2400      	movs	r4, #0
 800d85e:	2504      	movs	r5, #4
 800d860:	4627      	mov	r7, r4
 800d862:	f64f 7aff 	movw	sl, #65535	; 0xffff
 800d866:	f8df b004 	ldr.w	fp, [pc, #4]	; 800d86c <checkRecPdoMappingTable+0x90>
 800d86a:	e7f3      	b.n	800d854 <checkRecPdoMappingTable+0x78>
 800d86c:	200086b4 	.word	0x200086b4

0800d870 <setupPdoTrMapTable>:
 800d870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d874:	2564      	movs	r5, #100	; 0x64
 800d876:	4c1d      	ldr	r4, [pc, #116]	; (800d8ec <setupPdoTrMapTable+0x7c>)
 800d878:	4345      	muls	r5, r0
 800d87a:	4688      	mov	r8, r1
 800d87c:	1967      	adds	r7, r4, r5
 800d87e:	463a      	mov	r2, r7
 800d880:	2100      	movs	r1, #0
 800d882:	4640      	mov	r0, r8
 800d884:	f7ff fac8 	bl	800ce18 <coOdGetDefaultVal_u8>
 800d888:	4606      	mov	r6, r0
 800d88a:	b960      	cbnz	r0, 800d8a6 <setupPdoTrMapTable+0x36>
 800d88c:	4640      	mov	r0, r8
 800d88e:	f7ff fc17 	bl	800d0c0 <icoOdGetNumberOfSubs>
 800d892:	3504      	adds	r5, #4
 800d894:	442c      	add	r4, r5
 800d896:	4681      	mov	r9, r0
 800d898:	2501      	movs	r5, #1
 800d89a:	f105 3aff 	add.w	sl, r5, #4294967295
 800d89e:	45a9      	cmp	r9, r5
 800d8a0:	fa5f fa8a 	uxtb.w	sl, sl
 800d8a4:	d103      	bne.n	800d8ae <setupPdoTrMapTable+0x3e>
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	b004      	add	sp, #16
 800d8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ae:	aa03      	add	r2, sp, #12
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	f7ff fb08 	bl	800cec8 <coOdGetDefaultVal_u32>
 800d8b8:	b9a8      	cbnz	r0, 800d8e6 <setupPdoTrMapTable+0x76>
 800d8ba:	9803      	ldr	r0, [sp, #12]
 800d8bc:	60a0      	str	r0, [r4, #8]
 800d8be:	783b      	ldrb	r3, [r7, #0]
 800d8c0:	4553      	cmp	r3, sl
 800d8c2:	d803      	bhi.n	800d8cc <setupPdoTrMapTable+0x5c>
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	b2ed      	uxtb	r5, r5
 800d8c8:	340c      	adds	r4, #12
 800d8ca:	e7e6      	b.n	800d89a <setupPdoTrMapTable+0x2a>
 800d8cc:	1d63      	adds	r3, r4, #5
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	1d23      	adds	r3, r4, #4
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	b2c2      	uxtb	r2, r0
 800d8d6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d8da:	4623      	mov	r3, r4
 800d8dc:	0c00      	lsrs	r0, r0, #16
 800d8de:	f7ff fa72 	bl	800cdc6 <icoOdGetObjTrMapData>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	d0ee      	beq.n	800d8c4 <setupPdoTrMapTable+0x54>
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	e7dd      	b.n	800d8a6 <setupPdoTrMapTable+0x36>
 800d8ea:	bf00      	nop
 800d8ec:	20008844 	.word	0x20008844

0800d8f0 <setupPdoRecMapTable>:
 800d8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f4:	2564      	movs	r5, #100	; 0x64
 800d8f6:	4c1d      	ldr	r4, [pc, #116]	; (800d96c <setupPdoRecMapTable+0x7c>)
 800d8f8:	4345      	muls	r5, r0
 800d8fa:	4688      	mov	r8, r1
 800d8fc:	1967      	adds	r7, r4, r5
 800d8fe:	463a      	mov	r2, r7
 800d900:	2100      	movs	r1, #0
 800d902:	4640      	mov	r0, r8
 800d904:	f7ff fa88 	bl	800ce18 <coOdGetDefaultVal_u8>
 800d908:	4606      	mov	r6, r0
 800d90a:	b960      	cbnz	r0, 800d926 <setupPdoRecMapTable+0x36>
 800d90c:	4640      	mov	r0, r8
 800d90e:	f7ff fbd7 	bl	800d0c0 <icoOdGetNumberOfSubs>
 800d912:	3504      	adds	r5, #4
 800d914:	442c      	add	r4, r5
 800d916:	4681      	mov	r9, r0
 800d918:	2501      	movs	r5, #1
 800d91a:	f105 3aff 	add.w	sl, r5, #4294967295
 800d91e:	45a9      	cmp	r9, r5
 800d920:	fa5f fa8a 	uxtb.w	sl, sl
 800d924:	d103      	bne.n	800d92e <setupPdoRecMapTable+0x3e>
 800d926:	4630      	mov	r0, r6
 800d928:	b004      	add	sp, #16
 800d92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d92e:	aa03      	add	r2, sp, #12
 800d930:	4629      	mov	r1, r5
 800d932:	4640      	mov	r0, r8
 800d934:	f7ff fac8 	bl	800cec8 <coOdGetDefaultVal_u32>
 800d938:	b9a8      	cbnz	r0, 800d966 <setupPdoRecMapTable+0x76>
 800d93a:	9803      	ldr	r0, [sp, #12]
 800d93c:	60a0      	str	r0, [r4, #8]
 800d93e:	783b      	ldrb	r3, [r7, #0]
 800d940:	4553      	cmp	r3, sl
 800d942:	d803      	bhi.n	800d94c <setupPdoRecMapTable+0x5c>
 800d944:	3501      	adds	r5, #1
 800d946:	b2ed      	uxtb	r5, r5
 800d948:	340c      	adds	r4, #12
 800d94a:	e7e6      	b.n	800d91a <setupPdoRecMapTable+0x2a>
 800d94c:	1d63      	adds	r3, r4, #5
 800d94e:	9301      	str	r3, [sp, #4]
 800d950:	1d23      	adds	r3, r4, #4
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	b2c2      	uxtb	r2, r0
 800d956:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d95a:	4623      	mov	r3, r4
 800d95c:	0c00      	lsrs	r0, r0, #16
 800d95e:	f7ff f9f5 	bl	800cd4c <icoOdGetObjRecMapData>
 800d962:	2800      	cmp	r0, #0
 800d964:	d0ee      	beq.n	800d944 <setupPdoRecMapTable+0x54>
 800d966:	4606      	mov	r6, r0
 800d968:	e7dd      	b.n	800d926 <setupPdoRecMapTable+0x36>
 800d96a:	bf00      	nop
 800d96c:	200086b4 	.word	0x200086b4

0800d970 <pdoTransmitData>:
 800d970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d974:	6843      	ldr	r3, [r0, #4]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	b085      	sub	sp, #20
 800d97a:	4606      	mov	r6, r0
 800d97c:	4689      	mov	r9, r1
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d03b      	beq.n	800d9fa <pdoTransmitData+0x8a>
 800d982:	2400      	movs	r4, #0
 800d984:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800d988:	4627      	mov	r7, r4
 800d98a:	6873      	ldr	r3, [r6, #4]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	b2e5      	uxtb	r5, r4
 800d990:	42ab      	cmp	r3, r5
 800d992:	d82c      	bhi.n	800d9ee <pdoTransmitData+0x7e>
 800d994:	464a      	mov	r2, r9
 800d996:	a902      	add	r1, sp, #8
 800d998:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
 800d99a:	f001 f865 	bl	800ea68 <icoTransmitMessage>
 800d99e:	b005      	add	sp, #20
 800d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a4:	4451      	add	r1, sl
 800d9a6:	4b16      	ldr	r3, [pc, #88]	; (800da00 <pdoTransmitData+0x90>)
 800d9a8:	68c8      	ldr	r0, [r1, #12]
 800d9aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d9ae:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d9b2:	0c00      	lsrs	r0, r0, #16
 800d9b4:	4790      	blx	r2
 800d9b6:	465a      	mov	r2, fp
 800d9b8:	4b12      	ldr	r3, [pc, #72]	; (800da04 <pdoTransmitData+0x94>)
 800d9ba:	6871      	ldr	r1, [r6, #4]
 800d9bc:	8818      	ldrh	r0, [r3, #0]
 800d9be:	f102 0b01 	add.w	fp, r2, #1
 800d9c2:	b2d2      	uxtb	r2, r2
 800d9c4:	4282      	cmp	r2, r0
 800d9c6:	d3ed      	bcc.n	800d9a4 <pdoTransmitData+0x34>
 800d9c8:	fb08 f505 	mul.w	r5, r8, r5
 800d9cc:	4429      	add	r1, r5
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	7a4b      	ldrb	r3, [r1, #9]
 800d9d2:	7a0a      	ldrb	r2, [r1, #8]
 800d9d4:	9000      	str	r0, [sp, #0]
 800d9d6:	a802      	add	r0, sp, #8
 800d9d8:	4438      	add	r0, r7
 800d9da:	6849      	ldr	r1, [r1, #4]
 800d9dc:	f7fe ff5c 	bl	800c898 <coNumMemcpyUnpack>
 800d9e0:	6873      	ldr	r3, [r6, #4]
 800d9e2:	441d      	add	r5, r3
 800d9e4:	3401      	adds	r4, #1
 800d9e6:	7a2b      	ldrb	r3, [r5, #8]
 800d9e8:	441f      	add	r7, r3
 800d9ea:	b2ff      	uxtb	r7, r7
 800d9ec:	e7cd      	b.n	800d98a <pdoTransmitData+0x1a>
 800d9ee:	f04f 080c 	mov.w	r8, #12
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	fb08 fa05 	mul.w	sl, r8, r5
 800d9f8:	e7de      	b.n	800d9b8 <pdoTransmitData+0x48>
 800d9fa:	2047      	movs	r0, #71	; 0x47
 800d9fc:	e7cf      	b.n	800d99e <pdoTransmitData+0x2e>
 800d9fe:	bf00      	nop
 800da00:	200089e4 	.word	0x200089e4
 800da04:	200089e8 	.word	0x200089e8

0800da08 <setPdoCob>:
 800da08:	4613      	mov	r3, r2
 800da0a:	004a      	lsls	r2, r1, #1
 800da0c:	bf4c      	ite	mi
 800da0e:	2200      	movmi	r2, #0
 800da10:	2201      	movpl	r2, #1
 800da12:	f002 b9eb 	b.w	800fdec <icoCobSet>
	...

0800da18 <icoPdoRtrHandler>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	4604      	mov	r4, r0
 800da1c:	f7fe fcd6 	bl	800c3cc <coNmtGetState>
 800da20:	2805      	cmp	r0, #5
 800da22:	d110      	bne.n	800da46 <icoPdoRtrHandler+0x2e>
 800da24:	4b0b      	ldr	r3, [pc, #44]	; (800da54 <icoPdoRtrHandler+0x3c>)
 800da26:	8860      	ldrh	r0, [r4, #2]
 800da28:	881b      	ldrh	r3, [r3, #0]
 800da2a:	4283      	cmp	r3, r0
 800da2c:	d30b      	bcc.n	800da46 <icoPdoRtrHandler+0x2e>
 800da2e:	4b0a      	ldr	r3, [pc, #40]	; (800da58 <icoPdoRtrHandler+0x40>)
 800da30:	2238      	movs	r2, #56	; 0x38
 800da32:	fb02 3000 	mla	r0, r2, r0, r3
 800da36:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800da3a:	2bf0      	cmp	r3, #240	; 0xf0
 800da3c:	d804      	bhi.n	800da48 <icoPdoRtrHandler+0x30>
 800da3e:	b913      	cbnz	r3, 800da46 <icoPdoRtrHandler+0x2e>
 800da40:	2301      	movs	r3, #1
 800da42:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800da46:	bd10      	pop	{r4, pc}
 800da48:	2100      	movs	r1, #0
 800da4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da4e:	f7ff bf8f 	b.w	800d970 <pdoTransmitData>
 800da52:	bf00      	nop
 800da54:	20008ae4 	.word	0x20008ae4
 800da58:	20008ae8 	.word	0x20008ae8

0800da5c <icoPdoReceiveHandler>:
 800da5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da5e:	b085      	sub	sp, #20
 800da60:	4607      	mov	r7, r0
 800da62:	f7fe fcb3 	bl	800c3cc <coNmtGetState>
 800da66:	2805      	cmp	r0, #5
 800da68:	d11d      	bne.n	800daa6 <icoPdoReceiveHandler+0x4a>
 800da6a:	4b22      	ldr	r3, [pc, #136]	; (800daf4 <icoPdoReceiveHandler+0x98>)
 800da6c:	887d      	ldrh	r5, [r7, #2]
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	42ab      	cmp	r3, r5
 800da72:	d318      	bcc.n	800daa6 <icoPdoReceiveHandler+0x4a>
 800da74:	4e20      	ldr	r6, [pc, #128]	; (800daf8 <icoPdoReceiveHandler+0x9c>)
 800da76:	7a79      	ldrb	r1, [r7, #9]
 800da78:	243c      	movs	r4, #60	; 0x3c
 800da7a:	436c      	muls	r4, r5
 800da7c:	1933      	adds	r3, r6, r4
 800da7e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800da82:	4291      	cmp	r1, r2
 800da84:	d211      	bcs.n	800daaa <icoPdoReceiveHandler+0x4e>
 800da86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da88:	f88d 3008 	strb.w	r3, [sp, #8]
 800da8c:	2200      	movs	r2, #0
 800da8e:	0a1b      	lsrs	r3, r3, #8
 800da90:	a902      	add	r1, sp, #8
 800da92:	f248 2010 	movw	r0, #33296	; 0x8210
 800da96:	f8ad 200a 	strh.w	r2, [sp, #10]
 800da9a:	f88d 200c 	strb.w	r2, [sp, #12]
 800da9e:	f88d 3009 	strb.w	r3, [sp, #9]
 800daa2:	f7fd faef 	bl	800b084 <icoEmcyWriteReq>
 800daa6:	b005      	add	sp, #20
 800daa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daaa:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 800daac:	b159      	cbz	r1, 800dac6 <icoPdoReceiveHandler+0x6a>
 800daae:	2202      	movs	r2, #2
 800dab0:	f104 000c 	add.w	r0, r4, #12
 800dab4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800dab8:	9200      	str	r2, [sp, #0]
 800daba:	fb0c f101 	mul.w	r1, ip, r1
 800dabe:	4a0f      	ldr	r2, [pc, #60]	; (800dafc <icoPdoReceiveHandler+0xa0>)
 800dac0:	4430      	add	r0, r6
 800dac2:	f002 f869 	bl	800fb98 <coTimerStart>
 800dac6:	233c      	movs	r3, #60	; 0x3c
 800dac8:	fb03 6505 	mla	r5, r3, r5, r6
 800dacc:	f107 010a 	add.w	r1, r7, #10
 800dad0:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
 800dad4:	2bf0      	cmp	r3, #240	; 0xf0
 800dad6:	d809      	bhi.n	800daec <icoPdoReceiveHandler+0x90>
 800dad8:	3432      	adds	r4, #50	; 0x32
 800dada:	680b      	ldr	r3, [r1, #0]
 800dadc:	5133      	str	r3, [r6, r4]
 800dade:	1932      	adds	r2, r6, r4
 800dae0:	684b      	ldr	r3, [r1, #4]
 800dae2:	6053      	str	r3, [r2, #4]
 800dae4:	2302      	movs	r3, #2
 800dae6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800daea:	e7dc      	b.n	800daa6 <icoPdoReceiveHandler+0x4a>
 800daec:	8878      	ldrh	r0, [r7, #2]
 800daee:	f7ff fd97 	bl	800d620 <pdoReceiveData>
 800daf2:	e7d8      	b.n	800daa6 <icoPdoReceiveHandler+0x4a>
 800daf4:	200089ea 	.word	0x200089ea
 800daf8:	200089f4 	.word	0x200089f4
 800dafc:	0800d5d9 	.word	0x0800d5d9

0800db00 <icoPdoSyncHandling>:
 800db00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db04:	4607      	mov	r7, r0
 800db06:	f7fe fc61 	bl	800c3cc <coNmtGetState>
 800db0a:	2805      	cmp	r0, #5
 800db0c:	d12c      	bne.n	800db68 <icoPdoSyncHandling+0x68>
 800db0e:	2600      	movs	r6, #0
 800db10:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800dbe0 <icoPdoSyncHandling+0xe0>
 800db14:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800dbe4 <icoPdoSyncHandling+0xe4>
 800db18:	e018      	b.n	800db4c <icoPdoSyncHandling+0x4c>
 800db1a:	b2b3      	uxth	r3, r6
 800db1c:	2238      	movs	r2, #56	; 0x38
 800db1e:	435a      	muls	r2, r3
 800db20:	eb08 0402 	add.w	r4, r8, r2
 800db24:	f858 2002 	ldr.w	r2, [r8, r2]
 800db28:	2a00      	cmp	r2, #0
 800db2a:	db0e      	blt.n	800db4a <icoPdoSyncHandling+0x4a>
 800db2c:	f894 5032 	ldrb.w	r5, [r4, #50]	; 0x32
 800db30:	2df0      	cmp	r5, #240	; 0xf0
 800db32:	d80a      	bhi.n	800db4a <icoPdoSyncHandling+0x4a>
 800db34:	b9d5      	cbnz	r5, 800db6c <icoPdoSyncHandling+0x6c>
 800db36:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d105      	bne.n	800db4a <icoPdoSyncHandling+0x4a>
 800db3e:	4629      	mov	r1, r5
 800db40:	4620      	mov	r0, r4
 800db42:	f7ff ff15 	bl	800d970 <pdoTransmitData>
 800db46:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 800db4a:	3601      	adds	r6, #1
 800db4c:	f8b9 2000 	ldrh.w	r2, [r9]
 800db50:	b2b3      	uxth	r3, r6
 800db52:	429a      	cmp	r2, r3
 800db54:	d8e1      	bhi.n	800db1a <icoPdoSyncHandling+0x1a>
 800db56:	4f20      	ldr	r7, [pc, #128]	; (800dbd8 <icoPdoSyncHandling+0xd8>)
 800db58:	4e20      	ldr	r6, [pc, #128]	; (800dbdc <icoPdoSyncHandling+0xdc>)
 800db5a:	2400      	movs	r4, #0
 800db5c:	f04f 083c 	mov.w	r8, #60	; 0x3c
 800db60:	883b      	ldrh	r3, [r7, #0]
 800db62:	b2a0      	uxth	r0, r4
 800db64:	4283      	cmp	r3, r0
 800db66:	d821      	bhi.n	800dbac <icoPdoSyncHandling+0xac>
 800db68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db6c:	f894 c033 	ldrb.w	ip, [r4, #51]	; 0x33
 800db70:	45bc      	cmp	ip, r7
 800db72:	d901      	bls.n	800db78 <icoPdoSyncHandling+0x78>
 800db74:	2f00      	cmp	r7, #0
 800db76:	d1e8      	bne.n	800db4a <icoPdoSyncHandling+0x4a>
 800db78:	2238      	movs	r2, #56	; 0x38
 800db7a:	fb02 8103 	mla	r1, r2, r3, r8
 800db7e:	f891 0034 	ldrb.w	r0, [r1, #52]	; 0x34
 800db82:	3801      	subs	r0, #1
 800db84:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 800db88:	b127      	cbz	r7, 800db94 <icoPdoSyncHandling+0x94>
 800db8a:	45bc      	cmp	ip, r7
 800db8c:	bf04      	itt	eq
 800db8e:	2000      	moveq	r0, #0
 800db90:	f881 0034 	strbeq.w	r0, [r1, #52]	; 0x34
 800db94:	fb02 8303 	mla	r3, r2, r3, r8
 800db98:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800db9c:	2900      	cmp	r1, #0
 800db9e:	d1d4      	bne.n	800db4a <icoPdoSyncHandling+0x4a>
 800dba0:	f883 5034 	strb.w	r5, [r3, #52]	; 0x34
 800dba4:	4620      	mov	r0, r4
 800dba6:	f7ff fee3 	bl	800d970 <pdoTransmitData>
 800dbaa:	e7ce      	b.n	800db4a <icoPdoSyncHandling+0x4a>
 800dbac:	b2a1      	uxth	r1, r4
 800dbae:	fb08 f101 	mul.w	r1, r8, r1
 800dbb2:	1875      	adds	r5, r6, r1
 800dbb4:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
 800dbb8:	2bf0      	cmp	r3, #240	; 0xf0
 800dbba:	d80a      	bhi.n	800dbd2 <icoPdoSyncHandling+0xd2>
 800dbbc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800dbc0:	2b02      	cmp	r3, #2
 800dbc2:	d106      	bne.n	800dbd2 <icoPdoSyncHandling+0xd2>
 800dbc4:	3132      	adds	r1, #50	; 0x32
 800dbc6:	4431      	add	r1, r6
 800dbc8:	f7ff fd2a 	bl	800d620 <pdoReceiveData>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800dbd2:	3401      	adds	r4, #1
 800dbd4:	e7c4      	b.n	800db60 <icoPdoSyncHandling+0x60>
 800dbd6:	bf00      	nop
 800dbd8:	200089ea 	.word	0x200089ea
 800dbdc:	200089f4 	.word	0x200089f4
 800dbe0:	20008ae4 	.word	0x20008ae4
 800dbe4:	20008ae8 	.word	0x20008ae8

0800dbe8 <icoRecPdoGetObjectAddr>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	460c      	mov	r4, r1
 800dbec:	f7ff fd06 	bl	800d5fc <searchRecPdo>
 800dbf0:	b140      	cbz	r0, 800dc04 <icoRecPdoGetObjectAddr+0x1c>
 800dbf2:	1e61      	subs	r1, r4, #1
 800dbf4:	2904      	cmp	r1, #4
 800dbf6:	d80a      	bhi.n	800dc0e <icoRecPdoGetObjectAddr+0x26>
 800dbf8:	e8df f001 	tbb	[pc, r1]
 800dbfc:	09050304 	.word	0x09050304
 800dc00:	07          	.byte	0x07
 800dc01:	00          	.byte	0x00
 800dc02:	303a      	adds	r0, #58	; 0x3a
 800dc04:	bd10      	pop	{r4, pc}
 800dc06:	302c      	adds	r0, #44	; 0x2c
 800dc08:	e7fc      	b.n	800dc04 <icoRecPdoGetObjectAddr+0x1c>
 800dc0a:	302e      	adds	r0, #46	; 0x2e
 800dc0c:	e7fa      	b.n	800dc04 <icoRecPdoGetObjectAddr+0x1c>
 800dc0e:	2000      	movs	r0, #0
 800dc10:	e7f8      	b.n	800dc04 <icoRecPdoGetObjectAddr+0x1c>

0800dc12 <icoRecMapGetObjectAddr>:
 800dc12:	b510      	push	{r4, lr}
 800dc14:	460c      	mov	r4, r1
 800dc16:	f7ff fcf1 	bl	800d5fc <searchRecPdo>
 800dc1a:	b128      	cbz	r0, 800dc28 <icoRecMapGetObjectAddr+0x16>
 800dc1c:	6880      	ldr	r0, [r0, #8]
 800dc1e:	b11c      	cbz	r4, 800dc28 <icoRecMapGetObjectAddr+0x16>
 800dc20:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800dc24:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800dc28:	bd10      	pop	{r4, pc}

0800dc2a <icoRecMapGetObjectAddr_R>:
 800dc2a:	b510      	push	{r4, lr}
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	f7ff fce5 	bl	800d5fc <searchRecPdo>
 800dc32:	b128      	cbz	r0, 800dc40 <icoRecMapGetObjectAddr_R+0x16>
 800dc34:	6840      	ldr	r0, [r0, #4]
 800dc36:	b11c      	cbz	r4, 800dc40 <icoRecMapGetObjectAddr_R+0x16>
 800dc38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800dc3c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800dc40:	bd10      	pop	{r4, pc}

0800dc42 <icoRecPdoCheckObjLimit_u8>:
 800dc42:	b538      	push	{r3, r4, r5, lr}
 800dc44:	460d      	mov	r5, r1
 800dc46:	4614      	mov	r4, r2
 800dc48:	f7ff fcd8 	bl	800d5fc <searchRecPdo>
 800dc4c:	b140      	cbz	r0, 800dc60 <icoRecPdoCheckObjLimit_u8+0x1e>
 800dc4e:	2d02      	cmp	r5, #2
 800dc50:	d108      	bne.n	800dc64 <icoRecPdoCheckObjLimit_u8+0x22>
 800dc52:	340f      	adds	r4, #15
 800dc54:	b2e4      	uxtb	r4, r4
 800dc56:	2c0d      	cmp	r4, #13
 800dc58:	bf34      	ite	cc
 800dc5a:	2020      	movcc	r0, #32
 800dc5c:	2000      	movcs	r0, #0
 800dc5e:	bd38      	pop	{r3, r4, r5, pc}
 800dc60:	2021      	movs	r0, #33	; 0x21
 800dc62:	e7fc      	b.n	800dc5e <icoRecPdoCheckObjLimit_u8+0x1c>
 800dc64:	2015      	movs	r0, #21
 800dc66:	e7fa      	b.n	800dc5e <icoRecPdoCheckObjLimit_u8+0x1c>

0800dc68 <icoRecPdoCheckObjLimit_u16>:
 800dc68:	b510      	push	{r4, lr}
 800dc6a:	460c      	mov	r4, r1
 800dc6c:	f7ff fcc6 	bl	800d5fc <searchRecPdo>
 800dc70:	b160      	cbz	r0, 800dc8c <icoRecPdoCheckObjLimit_u16+0x24>
 800dc72:	2c03      	cmp	r4, #3
 800dc74:	d105      	bne.n	800dc82 <icoRecPdoCheckObjLimit_u16+0x1a>
 800dc76:	6803      	ldr	r3, [r0, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	bfb4      	ite	lt
 800dc7c:	2000      	movlt	r0, #0
 800dc7e:	2020      	movge	r0, #32
 800dc80:	bd10      	pop	{r4, pc}
 800dc82:	2c05      	cmp	r4, #5
 800dc84:	bf0c      	ite	eq
 800dc86:	2000      	moveq	r0, #0
 800dc88:	2015      	movne	r0, #21
 800dc8a:	e7f9      	b.n	800dc80 <icoRecPdoCheckObjLimit_u16+0x18>
 800dc8c:	2021      	movs	r0, #33	; 0x21
 800dc8e:	e7f7      	b.n	800dc80 <icoRecPdoCheckObjLimit_u16+0x18>

0800dc90 <icoRecPdoCheckObjLimitCobid>:
 800dc90:	b510      	push	{r4, lr}
 800dc92:	460c      	mov	r4, r1
 800dc94:	f7ff fcb2 	bl	800d5fc <searchRecPdo>
 800dc98:	b190      	cbz	r0, 800dcc0 <icoRecPdoCheckObjLimitCobid+0x30>
 800dc9a:	2c00      	cmp	r4, #0
 800dc9c:	db0e      	blt.n	800dcbc <icoRecPdoCheckObjLimitCobid+0x2c>
 800dc9e:	6803      	ldr	r3, [r0, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	db03      	blt.n	800dcac <icoRecPdoCheckObjLimitCobid+0x1c>
 800dca4:	42a3      	cmp	r3, r4
 800dca6:	d001      	beq.n	800dcac <icoRecPdoCheckObjLimitCobid+0x1c>
 800dca8:	2020      	movs	r0, #32
 800dcaa:	bd10      	pop	{r4, pc}
 800dcac:	f240 1281 	movw	r2, #385	; 0x181
 800dcb0:	4611      	mov	r1, r2
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f002 f966 	bl	800ff84 <icoCheckRestrictedCobs>
 800dcb8:	2801      	cmp	r0, #1
 800dcba:	d0f5      	beq.n	800dca8 <icoRecPdoCheckObjLimitCobid+0x18>
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	e7f4      	b.n	800dcaa <icoRecPdoCheckObjLimitCobid+0x1a>
 800dcc0:	2021      	movs	r0, #33	; 0x21
 800dcc2:	e7f2      	b.n	800dcaa <icoRecPdoCheckObjLimitCobid+0x1a>

0800dcc4 <icoRecMapCheckObjLimitMapTable>:
 800dcc4:	b530      	push	{r4, r5, lr}
 800dcc6:	b085      	sub	sp, #20
 800dcc8:	460c      	mov	r4, r1
 800dcca:	4615      	mov	r5, r2
 800dccc:	f7ff fc96 	bl	800d5fc <searchRecPdo>
 800dcd0:	b310      	cbz	r0, 800dd18 <icoRecMapCheckObjLimitMapTable+0x54>
 800dcd2:	6802      	ldr	r2, [r0, #0]
 800dcd4:	2a00      	cmp	r2, #0
 800dcd6:	da21      	bge.n	800dd1c <icoRecMapCheckObjLimitMapTable+0x58>
 800dcd8:	b1b4      	cbz	r4, 800dd08 <icoRecMapCheckObjLimitMapTable+0x44>
 800dcda:	6841      	ldr	r1, [r0, #4]
 800dcdc:	780b      	ldrb	r3, [r1, #0]
 800dcde:	b9eb      	cbnz	r3, 800dd1c <icoRecMapCheckObjLimitMapTable+0x58>
 800dce0:	230c      	movs	r3, #12
 800dce2:	3c01      	subs	r4, #1
 800dce4:	fb03 1404 	mla	r4, r3, r4, r1
 800dce8:	f10d 030b 	add.w	r3, sp, #11
 800dcec:	68e0      	ldr	r0, [r4, #12]
 800dcee:	9301      	str	r3, [sp, #4]
 800dcf0:	f10d 030a 	add.w	r3, sp, #10
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	b2c2      	uxtb	r2, r0
 800dcf8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800dcfc:	ab03      	add	r3, sp, #12
 800dcfe:	0c00      	lsrs	r0, r0, #16
 800dd00:	f7ff f824 	bl	800cd4c <icoOdGetObjRecMapData>
 800dd04:	b005      	add	sp, #20
 800dd06:	bd30      	pop	{r4, r5, pc}
 800dd08:	b125      	cbz	r5, 800dd14 <icoRecMapCheckObjLimitMapTable+0x50>
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	f7ff fd66 	bl	800d7dc <checkRecPdoMappingTable>
 800dd10:	2808      	cmp	r0, #8
 800dd12:	d805      	bhi.n	800dd20 <icoRecMapCheckObjLimitMapTable+0x5c>
 800dd14:	2000      	movs	r0, #0
 800dd16:	e7f5      	b.n	800dd04 <icoRecMapCheckObjLimitMapTable+0x40>
 800dd18:	2021      	movs	r0, #33	; 0x21
 800dd1a:	e7f3      	b.n	800dd04 <icoRecMapCheckObjLimitMapTable+0x40>
 800dd1c:	2046      	movs	r0, #70	; 0x46
 800dd1e:	e7f1      	b.n	800dd04 <icoRecMapCheckObjLimitMapTable+0x40>
 800dd20:	2047      	movs	r0, #71	; 0x47
 800dd22:	e7ef      	b.n	800dd04 <icoRecMapCheckObjLimitMapTable+0x40>

0800dd24 <icoRecMapCheckObjLimitMapEntry>:
 800dd24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd26:	460c      	mov	r4, r1
 800dd28:	f7ff fc68 	bl	800d5fc <searchRecPdo>
 800dd2c:	b1c8      	cbz	r0, 800dd62 <icoRecMapCheckObjLimitMapEntry+0x3e>
 800dd2e:	6803      	ldr	r3, [r0, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	db02      	blt.n	800dd3a <icoRecMapCheckObjLimitMapEntry+0x16>
 800dd34:	2046      	movs	r0, #70	; 0x46
 800dd36:	b004      	add	sp, #16
 800dd38:	bd10      	pop	{r4, pc}
 800dd3a:	6843      	ldr	r3, [r0, #4]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1f8      	bne.n	800dd34 <icoRecMapCheckObjLimitMapEntry+0x10>
 800dd42:	f10d 030b 	add.w	r3, sp, #11
 800dd46:	9301      	str	r3, [sp, #4]
 800dd48:	f10d 030a 	add.w	r3, sp, #10
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	b2e2      	uxtb	r2, r4
 800dd50:	ab03      	add	r3, sp, #12
 800dd52:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800dd56:	0c20      	lsrs	r0, r4, #16
 800dd58:	f7fe fff8 	bl	800cd4c <icoOdGetObjRecMapData>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d0ea      	beq.n	800dd36 <icoRecMapCheckObjLimitMapEntry+0x12>
 800dd60:	e7e8      	b.n	800dd34 <icoRecMapCheckObjLimitMapEntry+0x10>
 800dd62:	2021      	movs	r0, #33	; 0x21
 800dd64:	e7e7      	b.n	800dd36 <icoRecMapCheckObjLimitMapEntry+0x12>

0800dd66 <icoRecPdoObjChanged>:
 800dd66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd68:	460c      	mov	r4, r1
 800dd6a:	f7ff fc47 	bl	800d5fc <searchRecPdo>
 800dd6e:	4605      	mov	r5, r0
 800dd70:	b1e8      	cbz	r0, 800ddae <icoRecPdoObjChanged+0x48>
 800dd72:	2c01      	cmp	r4, #1
 800dd74:	d003      	beq.n	800dd7e <icoRecPdoObjChanged+0x18>
 800dd76:	2c05      	cmp	r4, #5
 800dd78:	d015      	beq.n	800dda6 <icoRecPdoObjChanged+0x40>
 800dd7a:	2400      	movs	r4, #0
 800dd7c:	e011      	b.n	800dda2 <icoRecPdoObjChanged+0x3c>
 800dd7e:	2100      	movs	r1, #0
 800dd80:	f7ff fd2c 	bl	800d7dc <checkRecPdoMappingTable>
 800dd84:	462e      	mov	r6, r5
 800dd86:	4602      	mov	r2, r0
 800dd88:	f856 1b0c 	ldr.w	r1, [r6], #12
 800dd8c:	4607      	mov	r7, r0
 800dd8e:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 800dd90:	f7ff fe3a 	bl	800da08 <setPdoCob>
 800dd94:	4604      	mov	r4, r0
 800dd96:	4630      	mov	r0, r6
 800dd98:	f001 fee8 	bl	800fb6c <coTimerStop>
 800dd9c:	b90c      	cbnz	r4, 800dda2 <icoRecPdoObjChanged+0x3c>
 800dd9e:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
 800dda2:	4620      	mov	r0, r4
 800dda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dda6:	300c      	adds	r0, #12
 800dda8:	f001 fee0 	bl	800fb6c <coTimerStop>
 800ddac:	e7e5      	b.n	800dd7a <icoRecPdoObjChanged+0x14>
 800ddae:	2421      	movs	r4, #33	; 0x21
 800ddb0:	e7f7      	b.n	800dda2 <icoRecPdoObjChanged+0x3c>
	...

0800ddb4 <icoRecPdoMapChanged>:
 800ddb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ddb8:	f7ff fc20 	bl	800d5fc <searchRecPdo>
 800ddbc:	b360      	cbz	r0, 800de18 <icoRecPdoMapChanged+0x64>
 800ddbe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d003      	beq.n	800ddce <icoRecPdoMapChanged+0x1a>
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	b002      	add	sp, #8
 800ddca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800ddd0:	4d12      	ldr	r5, [pc, #72]	; (800de1c <icoRecPdoMapChanged+0x68>)
 800ddd2:	2464      	movs	r4, #100	; 0x64
 800ddd4:	435c      	muls	r4, r3
 800ddd6:	2600      	movs	r6, #0
 800ddd8:	46a0      	mov	r8, r4
 800ddda:	192f      	adds	r7, r5, r4
 800dddc:	783a      	ldrb	r2, [r7, #0]
 800ddde:	b2f3      	uxtb	r3, r6
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d9f0      	bls.n	800ddc6 <icoRecPdoMapChanged+0x12>
 800dde4:	220c      	movs	r2, #12
 800dde6:	435a      	muls	r2, r3
 800dde8:	eb02 0308 	add.w	r3, r2, r8
 800ddec:	442b      	add	r3, r5
 800ddee:	4422      	add	r2, r4
 800ddf0:	68d8      	ldr	r0, [r3, #12]
 800ddf2:	f102 0109 	add.w	r1, r2, #9
 800ddf6:	1d13      	adds	r3, r2, #4
 800ddf8:	3208      	adds	r2, #8
 800ddfa:	4429      	add	r1, r5
 800ddfc:	442a      	add	r2, r5
 800ddfe:	9101      	str	r1, [sp, #4]
 800de00:	9200      	str	r2, [sp, #0]
 800de02:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800de06:	b2c2      	uxtb	r2, r0
 800de08:	442b      	add	r3, r5
 800de0a:	0c00      	lsrs	r0, r0, #16
 800de0c:	f7fe ff9e 	bl	800cd4c <icoOdGetObjRecMapData>
 800de10:	3601      	adds	r6, #1
 800de12:	2800      	cmp	r0, #0
 800de14:	d0e2      	beq.n	800dddc <icoRecPdoMapChanged+0x28>
 800de16:	e7d7      	b.n	800ddc8 <icoRecPdoMapChanged+0x14>
 800de18:	2021      	movs	r0, #33	; 0x21
 800de1a:	e7d5      	b.n	800ddc8 <icoRecPdoMapChanged+0x14>
 800de1c:	200086b4 	.word	0x200086b4

0800de20 <coEventRegister_PDO>:
 800de20:	4a05      	ldr	r2, [pc, #20]	; (800de38 <coEventRegister_PDO+0x18>)
 800de22:	8813      	ldrh	r3, [r2, #0]
 800de24:	b92b      	cbnz	r3, 800de32 <coEventRegister_PDO+0x12>
 800de26:	4905      	ldr	r1, [pc, #20]	; (800de3c <coEventRegister_PDO+0x1c>)
 800de28:	6008      	str	r0, [r1, #0]
 800de2a:	2101      	movs	r1, #1
 800de2c:	8011      	strh	r1, [r2, #0]
 800de2e:	4618      	mov	r0, r3
 800de30:	4770      	bx	lr
 800de32:	200d      	movs	r0, #13
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	200089e0 	.word	0x200089e0
 800de3c:	200089dc 	.word	0x200089dc

0800de40 <coEventRegister_PDO_REC_EVENT>:
 800de40:	4a05      	ldr	r2, [pc, #20]	; (800de58 <coEventRegister_PDO_REC_EVENT+0x18>)
 800de42:	8813      	ldrh	r3, [r2, #0]
 800de44:	b92b      	cbnz	r3, 800de52 <coEventRegister_PDO_REC_EVENT+0x12>
 800de46:	4905      	ldr	r1, [pc, #20]	; (800de5c <coEventRegister_PDO_REC_EVENT+0x1c>)
 800de48:	6008      	str	r0, [r1, #0]
 800de4a:	2101      	movs	r1, #1
 800de4c:	8011      	strh	r1, [r2, #0]
 800de4e:	4618      	mov	r0, r3
 800de50:	4770      	bx	lr
 800de52:	200d      	movs	r0, #13
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	200089f0 	.word	0x200089f0
 800de5c:	200089ec 	.word	0x200089ec

0800de60 <icoPdoSearchTrPdoIndex>:
 800de60:	4907      	ldr	r1, [pc, #28]	; (800de80 <icoPdoSearchTrPdoIndex+0x20>)
 800de62:	b530      	push	{r4, r5, lr}
 800de64:	2200      	movs	r2, #0
 800de66:	2438      	movs	r4, #56	; 0x38
 800de68:	fb04 1302 	mla	r3, r4, r2, r1
 800de6c:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
 800de6e:	4285      	cmp	r5, r0
 800de70:	d101      	bne.n	800de76 <icoPdoSearchTrPdoIndex+0x16>
 800de72:	4618      	mov	r0, r3
 800de74:	bd30      	pop	{r4, r5, pc}
 800de76:	3201      	adds	r2, #1
 800de78:	2a04      	cmp	r2, #4
 800de7a:	d1f5      	bne.n	800de68 <icoPdoSearchTrPdoIndex+0x8>
 800de7c:	2000      	movs	r0, #0
 800de7e:	e7f9      	b.n	800de74 <icoPdoSearchTrPdoIndex+0x14>
 800de80:	20008ae8 	.word	0x20008ae8

0800de84 <coPdoReqNr>:
 800de84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de86:	4604      	mov	r4, r0
 800de88:	460e      	mov	r6, r1
 800de8a:	f7fe fa9f 	bl	800c3cc <coNmtGetState>
 800de8e:	2805      	cmp	r0, #5
 800de90:	d132      	bne.n	800def8 <coPdoReqNr+0x74>
 800de92:	4620      	mov	r0, r4
 800de94:	f7ff ffe4 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800de98:	4605      	mov	r5, r0
 800de9a:	b378      	cbz	r0, 800defc <coPdoReqNr+0x78>
 800de9c:	6803      	ldr	r3, [r0, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	db2e      	blt.n	800df00 <coPdoReqNr+0x7c>
 800dea2:	f890 4032 	ldrb.w	r4, [r0, #50]	; 0x32
 800dea6:	2cf0      	cmp	r4, #240	; 0xf0
 800dea8:	d806      	bhi.n	800deb8 <coPdoReqNr+0x34>
 800deaa:	bb5c      	cbnz	r4, 800df04 <coPdoReqNr+0x80>
 800deac:	2301      	movs	r3, #1
 800deae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800deb2:	4620      	mov	r0, r4
 800deb4:	b002      	add	sp, #8
 800deb6:	bd70      	pop	{r4, r5, r6, pc}
 800deb8:	2cfd      	cmp	r4, #253	; 0xfd
 800deba:	d025      	beq.n	800df08 <coPdoReqNr+0x84>
 800debc:	4631      	mov	r1, r6
 800debe:	f7ff fd57 	bl	800d970 <pdoTransmitData>
 800dec2:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 800dec4:	4604      	mov	r4, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d0f3      	beq.n	800deb2 <coPdoReqNr+0x2e>
 800deca:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800dece:	2bfd      	cmp	r3, #253	; 0xfd
 800ded0:	d9ef      	bls.n	800deb2 <coPdoReqNr+0x2e>
 800ded2:	f105 060c 	add.w	r6, r5, #12
 800ded6:	4630      	mov	r0, r6
 800ded8:	f001 fe88 	bl	800fbec <coTimerIsActive>
 800dedc:	2801      	cmp	r0, #1
 800dede:	d1e8      	bne.n	800deb2 <coPdoReqNr+0x2e>
 800dee0:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 800dee2:	4a0a      	ldr	r2, [pc, #40]	; (800df0c <coPdoReqNr+0x88>)
 800dee4:	2303      	movs	r3, #3
 800dee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	4341      	muls	r1, r0
 800deee:	462b      	mov	r3, r5
 800def0:	4630      	mov	r0, r6
 800def2:	f001 fe51 	bl	800fb98 <coTimerStart>
 800def6:	e7dc      	b.n	800deb2 <coPdoReqNr+0x2e>
 800def8:	240e      	movs	r4, #14
 800defa:	e7da      	b.n	800deb2 <coPdoReqNr+0x2e>
 800defc:	240a      	movs	r4, #10
 800defe:	e7d8      	b.n	800deb2 <coPdoReqNr+0x2e>
 800df00:	2433      	movs	r4, #51	; 0x33
 800df02:	e7d6      	b.n	800deb2 <coPdoReqNr+0x2e>
 800df04:	2400      	movs	r4, #0
 800df06:	e7d4      	b.n	800deb2 <coPdoReqNr+0x2e>
 800df08:	240b      	movs	r4, #11
 800df0a:	e7d2      	b.n	800deb2 <coPdoReqNr+0x2e>
 800df0c:	0800df11 	.word	0x0800df11

0800df10 <pdoEventTimer>:
 800df10:	2100      	movs	r1, #0
 800df12:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
 800df14:	f7ff bfb6 	b.w	800de84 <coPdoReqNr>

0800df18 <icoTrPdoGetObjectAddr>:
 800df18:	b510      	push	{r4, lr}
 800df1a:	460c      	mov	r4, r1
 800df1c:	f7ff ffa0 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800df20:	b140      	cbz	r0, 800df34 <icoTrPdoGetObjectAddr+0x1c>
 800df22:	1e61      	subs	r1, r4, #1
 800df24:	2905      	cmp	r1, #5
 800df26:	d80c      	bhi.n	800df42 <icoTrPdoGetObjectAddr+0x2a>
 800df28:	e8df f001 	tbb	[pc, r1]
 800df2c:	0b050304 	.word	0x0b050304
 800df30:	0907      	.short	0x0907
 800df32:	3032      	adds	r0, #50	; 0x32
 800df34:	bd10      	pop	{r4, pc}
 800df36:	302c      	adds	r0, #44	; 0x2c
 800df38:	e7fc      	b.n	800df34 <icoTrPdoGetObjectAddr+0x1c>
 800df3a:	302e      	adds	r0, #46	; 0x2e
 800df3c:	e7fa      	b.n	800df34 <icoTrPdoGetObjectAddr+0x1c>
 800df3e:	3033      	adds	r0, #51	; 0x33
 800df40:	e7f8      	b.n	800df34 <icoTrPdoGetObjectAddr+0x1c>
 800df42:	2000      	movs	r0, #0
 800df44:	e7f6      	b.n	800df34 <icoTrPdoGetObjectAddr+0x1c>

0800df46 <icoTrMapGetObjectAddr>:
 800df46:	b510      	push	{r4, lr}
 800df48:	460c      	mov	r4, r1
 800df4a:	f7ff ff89 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800df4e:	b128      	cbz	r0, 800df5c <icoTrMapGetObjectAddr+0x16>
 800df50:	6880      	ldr	r0, [r0, #8]
 800df52:	b11c      	cbz	r4, 800df5c <icoTrMapGetObjectAddr+0x16>
 800df54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800df58:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800df5c:	bd10      	pop	{r4, pc}

0800df5e <icoTrMapGetObjectAddr_R>:
 800df5e:	b510      	push	{r4, lr}
 800df60:	460c      	mov	r4, r1
 800df62:	f7ff ff7d 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800df66:	b128      	cbz	r0, 800df74 <icoTrMapGetObjectAddr_R+0x16>
 800df68:	6840      	ldr	r0, [r0, #4]
 800df6a:	b11c      	cbz	r4, 800df74 <icoTrMapGetObjectAddr_R+0x16>
 800df6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800df70:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800df74:	bd10      	pop	{r4, pc}

0800df76 <icoTrPdoCheckObjLimit_u8>:
 800df76:	b538      	push	{r3, r4, r5, lr}
 800df78:	460d      	mov	r5, r1
 800df7a:	4614      	mov	r4, r2
 800df7c:	f7ff ff70 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800df80:	b180      	cbz	r0, 800dfa4 <icoTrPdoCheckObjLimit_u8+0x2e>
 800df82:	2d02      	cmp	r5, #2
 800df84:	d106      	bne.n	800df94 <icoTrPdoCheckObjLimit_u8+0x1e>
 800df86:	340f      	adds	r4, #15
 800df88:	b2e4      	uxtb	r4, r4
 800df8a:	2c0a      	cmp	r4, #10
 800df8c:	bf8c      	ite	hi
 800df8e:	2000      	movhi	r0, #0
 800df90:	2020      	movls	r0, #32
 800df92:	bd38      	pop	{r3, r4, r5, pc}
 800df94:	2d06      	cmp	r5, #6
 800df96:	d107      	bne.n	800dfa8 <icoTrPdoCheckObjLimit_u8+0x32>
 800df98:	6803      	ldr	r3, [r0, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	bfb4      	ite	lt
 800df9e:	2000      	movlt	r0, #0
 800dfa0:	2020      	movge	r0, #32
 800dfa2:	e7f6      	b.n	800df92 <icoTrPdoCheckObjLimit_u8+0x1c>
 800dfa4:	2021      	movs	r0, #33	; 0x21
 800dfa6:	e7f4      	b.n	800df92 <icoTrPdoCheckObjLimit_u8+0x1c>
 800dfa8:	2015      	movs	r0, #21
 800dfaa:	e7f2      	b.n	800df92 <icoTrPdoCheckObjLimit_u8+0x1c>

0800dfac <icoTrPdoCheckObjLimit_u16>:
 800dfac:	b510      	push	{r4, lr}
 800dfae:	460c      	mov	r4, r1
 800dfb0:	f7ff ff56 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800dfb4:	b160      	cbz	r0, 800dfd0 <icoTrPdoCheckObjLimit_u16+0x24>
 800dfb6:	2c03      	cmp	r4, #3
 800dfb8:	d004      	beq.n	800dfc4 <icoTrPdoCheckObjLimit_u16+0x18>
 800dfba:	2c05      	cmp	r4, #5
 800dfbc:	bf0c      	ite	eq
 800dfbe:	2000      	moveq	r0, #0
 800dfc0:	2015      	movne	r0, #21
 800dfc2:	bd10      	pop	{r4, pc}
 800dfc4:	6803      	ldr	r3, [r0, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	bfb4      	ite	lt
 800dfca:	2000      	movlt	r0, #0
 800dfcc:	2020      	movge	r0, #32
 800dfce:	e7f8      	b.n	800dfc2 <icoTrPdoCheckObjLimit_u16+0x16>
 800dfd0:	2021      	movs	r0, #33	; 0x21
 800dfd2:	e7f6      	b.n	800dfc2 <icoTrPdoCheckObjLimit_u16+0x16>

0800dfd4 <icoTrPdoCheckObjLimitCobid>:
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	f7ff ff42 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800dfdc:	b190      	cbz	r0, 800e004 <icoTrPdoCheckObjLimitCobid+0x30>
 800dfde:	2c00      	cmp	r4, #0
 800dfe0:	db0e      	blt.n	800e000 <icoTrPdoCheckObjLimitCobid+0x2c>
 800dfe2:	6803      	ldr	r3, [r0, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	db03      	blt.n	800dff0 <icoTrPdoCheckObjLimitCobid+0x1c>
 800dfe8:	42a3      	cmp	r3, r4
 800dfea:	d001      	beq.n	800dff0 <icoTrPdoCheckObjLimitCobid+0x1c>
 800dfec:	2020      	movs	r0, #32
 800dfee:	bd10      	pop	{r4, pc}
 800dff0:	f240 1281 	movw	r2, #385	; 0x181
 800dff4:	4611      	mov	r1, r2
 800dff6:	4620      	mov	r0, r4
 800dff8:	f001 ffc4 	bl	800ff84 <icoCheckRestrictedCobs>
 800dffc:	2801      	cmp	r0, #1
 800dffe:	d0f5      	beq.n	800dfec <icoTrPdoCheckObjLimitCobid+0x18>
 800e000:	2000      	movs	r0, #0
 800e002:	e7f4      	b.n	800dfee <icoTrPdoCheckObjLimitCobid+0x1a>
 800e004:	2021      	movs	r0, #33	; 0x21
 800e006:	e7f2      	b.n	800dfee <icoTrPdoCheckObjLimitCobid+0x1a>

0800e008 <icoTrMapCheckObjLimitMapTable>:
 800e008:	b538      	push	{r3, r4, r5, lr}
 800e00a:	460d      	mov	r5, r1
 800e00c:	4614      	mov	r4, r2
 800e00e:	f7ff ff27 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800e012:	b158      	cbz	r0, 800e02c <icoTrMapCheckObjLimitMapTable+0x24>
 800e014:	6803      	ldr	r3, [r0, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	da0a      	bge.n	800e030 <icoTrMapCheckObjLimitMapTable+0x28>
 800e01a:	b92d      	cbnz	r5, 800e028 <icoTrMapCheckObjLimitMapTable+0x20>
 800e01c:	b124      	cbz	r4, 800e028 <icoTrMapCheckObjLimitMapTable+0x20>
 800e01e:	4621      	mov	r1, r4
 800e020:	f7ff fb6c 	bl	800d6fc <checkTrPdoMappingTable>
 800e024:	2808      	cmp	r0, #8
 800e026:	d805      	bhi.n	800e034 <icoTrMapCheckObjLimitMapTable+0x2c>
 800e028:	2000      	movs	r0, #0
 800e02a:	bd38      	pop	{r3, r4, r5, pc}
 800e02c:	2021      	movs	r0, #33	; 0x21
 800e02e:	e7fc      	b.n	800e02a <icoTrMapCheckObjLimitMapTable+0x22>
 800e030:	2046      	movs	r0, #70	; 0x46
 800e032:	e7fa      	b.n	800e02a <icoTrMapCheckObjLimitMapTable+0x22>
 800e034:	2047      	movs	r0, #71	; 0x47
 800e036:	e7f8      	b.n	800e02a <icoTrMapCheckObjLimitMapTable+0x22>

0800e038 <icoTrMapCheckObjLimitMapEntry>:
 800e038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e03a:	460c      	mov	r4, r1
 800e03c:	f7ff ff10 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800e040:	b1a0      	cbz	r0, 800e06c <icoTrMapCheckObjLimitMapEntry+0x34>
 800e042:	6803      	ldr	r3, [r0, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	da13      	bge.n	800e070 <icoTrMapCheckObjLimitMapEntry+0x38>
 800e048:	6843      	ldr	r3, [r0, #4]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	b983      	cbnz	r3, 800e070 <icoTrMapCheckObjLimitMapEntry+0x38>
 800e04e:	f10d 030b 	add.w	r3, sp, #11
 800e052:	9301      	str	r3, [sp, #4]
 800e054:	f10d 030a 	add.w	r3, sp, #10
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	b2e2      	uxtb	r2, r4
 800e05c:	ab03      	add	r3, sp, #12
 800e05e:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800e062:	0c20      	lsrs	r0, r4, #16
 800e064:	f7fe feaf 	bl	800cdc6 <icoOdGetObjTrMapData>
 800e068:	b004      	add	sp, #16
 800e06a:	bd10      	pop	{r4, pc}
 800e06c:	2021      	movs	r0, #33	; 0x21
 800e06e:	e7fb      	b.n	800e068 <icoTrMapCheckObjLimitMapEntry+0x30>
 800e070:	2046      	movs	r0, #70	; 0x46
 800e072:	e7f9      	b.n	800e068 <icoTrMapCheckObjLimitMapEntry+0x30>

0800e074 <icoTrPdoObjChanged>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	460d      	mov	r5, r1
 800e078:	f7ff fef2 	bl	800de60 <icoPdoSearchTrPdoIndex>
 800e07c:	4604      	mov	r4, r0
 800e07e:	b338      	cbz	r0, 800e0d0 <icoTrPdoObjChanged+0x5c>
 800e080:	2d02      	cmp	r5, #2
 800e082:	d01d      	beq.n	800e0c0 <icoTrPdoObjChanged+0x4c>
 800e084:	2d05      	cmp	r5, #5
 800e086:	d01f      	beq.n	800e0c8 <icoTrPdoObjChanged+0x54>
 800e088:	2d01      	cmp	r5, #1
 800e08a:	f04f 0100 	mov.w	r1, #0
 800e08e:	d120      	bne.n	800e0d2 <icoTrPdoObjChanged+0x5e>
 800e090:	f7ff fb34 	bl	800d6fc <checkTrPdoMappingTable>
 800e094:	6821      	ldr	r1, [r4, #0]
 800e096:	4602      	mov	r2, r0
 800e098:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 800e09a:	f7ff fcb5 	bl	800da08 <setPdoCob>
 800e09e:	4601      	mov	r1, r0
 800e0a0:	b9b8      	cbnz	r0, 800e0d2 <icoTrPdoObjChanged+0x5e>
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7ff fb76 	bl	800d794 <setupTrPdoTimer>
 800e0a8:	4601      	mov	r1, r0
 800e0aa:	b990      	cbnz	r0, 800e0d2 <icoTrPdoObjChanged+0x5e>
 800e0ac:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800e0b0:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 800e0b2:	2bfd      	cmp	r3, #253	; 0xfd
 800e0b4:	bf88      	it	hi
 800e0b6:	8da1      	ldrhhi	r1, [r4, #44]	; 0x2c
 800e0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0bc:	f001 bef0 	b.w	800fea0 <icoCobSetInhibit>
 800e0c0:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800e0c4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 800e0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0cc:	f7ff bb62 	b.w	800d794 <setupTrPdoTimer>
 800e0d0:	2121      	movs	r1, #33	; 0x21
 800e0d2:	4608      	mov	r0, r1
 800e0d4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e0d8 <icoPdoOperational>:
 800e0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0dc:	4d0c      	ldr	r5, [pc, #48]	; (800e110 <icoPdoOperational+0x38>)
 800e0de:	4f0d      	ldr	r7, [pc, #52]	; (800e114 <icoPdoOperational+0x3c>)
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	f04f 0838 	mov.w	r8, #56	; 0x38
 800e0e6:	882a      	ldrh	r2, [r5, #0]
 800e0e8:	b283      	uxth	r3, r0
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	f100 0601 	add.w	r6, r0, #1
 800e0f0:	d801      	bhi.n	800e0f6 <icoPdoOperational+0x1e>
 800e0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f6:	b280      	uxth	r0, r0
 800e0f8:	fb08 7400 	mla	r4, r8, r0, r7
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e100:	f7ff fec0 	bl	800de84 <coPdoReqNr>
 800e104:	4620      	mov	r0, r4
 800e106:	f7ff fb45 	bl	800d794 <setupTrPdoTimer>
 800e10a:	4630      	mov	r0, r6
 800e10c:	e7eb      	b.n	800e0e6 <icoPdoOperational+0xe>
 800e10e:	bf00      	nop
 800e110:	20008ae4 	.word	0x20008ae4
 800e114:	20008ae8 	.word	0x20008ae8

0800e118 <icoPdoPreOperational>:
 800e118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11a:	4c09      	ldr	r4, [pc, #36]	; (800e140 <icoPdoPreOperational+0x28>)
 800e11c:	4e09      	ldr	r6, [pc, #36]	; (800e144 <icoPdoPreOperational+0x2c>)
 800e11e:	2000      	movs	r0, #0
 800e120:	2738      	movs	r7, #56	; 0x38
 800e122:	8822      	ldrh	r2, [r4, #0]
 800e124:	b283      	uxth	r3, r0
 800e126:	429a      	cmp	r2, r3
 800e128:	f100 0501 	add.w	r5, r0, #1
 800e12c:	d800      	bhi.n	800e130 <icoPdoPreOperational+0x18>
 800e12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e130:	b280      	uxth	r0, r0
 800e132:	fb07 6000 	mla	r0, r7, r0, r6
 800e136:	f7ff fb2d 	bl	800d794 <setupTrPdoTimer>
 800e13a:	4628      	mov	r0, r5
 800e13c:	e7f1      	b.n	800e122 <icoPdoPreOperational+0xa>
 800e13e:	bf00      	nop
 800e140:	20008ae4 	.word	0x20008ae4
 800e144:	20008ae8 	.word	0x20008ae8

0800e148 <icoPdoReset>:
 800e148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e14c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800e204 <icoPdoReset+0xbc>
 800e150:	4e2a      	ldr	r6, [pc, #168]	; (800e1fc <icoPdoReset+0xb4>)
 800e152:	2500      	movs	r5, #0
 800e154:	f8b8 2000 	ldrh.w	r2, [r8]
 800e158:	b2ab      	uxth	r3, r5
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d80a      	bhi.n	800e174 <icoPdoReset+0x2c>
 800e15e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800e208 <icoPdoReset+0xc0>
 800e162:	4d27      	ldr	r5, [pc, #156]	; (800e200 <icoPdoReset+0xb8>)
 800e164:	2600      	movs	r6, #0
 800e166:	f8b9 2000 	ldrh.w	r2, [r9]
 800e16a:	b2b3      	uxth	r3, r6
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d81f      	bhi.n	800e1b0 <icoPdoReset+0x68>
 800e170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e174:	b2ac      	uxth	r4, r5
 800e176:	2338      	movs	r3, #56	; 0x38
 800e178:	4363      	muls	r3, r4
 800e17a:	18f7      	adds	r7, r6, r3
 800e17c:	58f3      	ldr	r3, [r6, r3]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	da11      	bge.n	800e1a6 <icoPdoReset+0x5e>
 800e182:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800e184:	f001 fea2 	bl	800fecc <icoCobDisable>
 800e188:	2338      	movs	r3, #56	; 0x38
 800e18a:	fb03 6304 	mla	r3, r3, r4, r6
 800e18e:	4638      	mov	r0, r7
 800e190:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800e194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e198:	2200      	movs	r2, #0
 800e19a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e19e:	f7ff faf9 	bl	800d794 <setupTrPdoTimer>
 800e1a2:	3501      	adds	r5, #1
 800e1a4:	e7d6      	b.n	800e154 <icoPdoReset+0xc>
 800e1a6:	2101      	movs	r1, #1
 800e1a8:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 800e1aa:	f7ff ff63 	bl	800e074 <icoTrPdoObjChanged>
 800e1ae:	e7eb      	b.n	800e188 <icoPdoReset+0x40>
 800e1b0:	b2b7      	uxth	r7, r6
 800e1b2:	243c      	movs	r4, #60	; 0x3c
 800e1b4:	437c      	muls	r4, r7
 800e1b6:	eb05 0804 	add.w	r8, r5, r4
 800e1ba:	592b      	ldr	r3, [r5, r4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	da10      	bge.n	800e1e2 <icoPdoReset+0x9a>
 800e1c0:	f8b8 0026 	ldrh.w	r0, [r8, #38]	; 0x26
 800e1c4:	f001 fe82 	bl	800fecc <icoCobDisable>
 800e1c8:	233c      	movs	r3, #60	; 0x3c
 800e1ca:	fb03 5707 	mla	r7, r3, r7, r5
 800e1ce:	f104 000c 	add.w	r0, r4, #12
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800e1d8:	4428      	add	r0, r5
 800e1da:	f001 fcc7 	bl	800fb6c <coTimerStop>
 800e1de:	3601      	adds	r6, #1
 800e1e0:	e7c1      	b.n	800e166 <icoPdoReset+0x1e>
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	f7ff faf9 	bl	800d7dc <checkRecPdoMappingTable>
 800e1ea:	5929      	ldr	r1, [r5, r4]
 800e1ec:	f888 003b 	strb.w	r0, [r8, #59]	; 0x3b
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	f8b8 0026 	ldrh.w	r0, [r8, #38]	; 0x26
 800e1f6:	f7ff fc07 	bl	800da08 <setPdoCob>
 800e1fa:	e7e5      	b.n	800e1c8 <icoPdoReset+0x80>
 800e1fc:	20008ae8 	.word	0x20008ae8
 800e200:	200089f4 	.word	0x200089f4
 800e204:	20008ae4 	.word	0x20008ae4
 800e208:	200089ea 	.word	0x200089ea

0800e20c <icoPdoSetDefaultValue>:
 800e20c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e210:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800e43c <icoPdoSetDefaultValue+0x230>
 800e214:	4e87      	ldr	r6, [pc, #540]	; (800e434 <icoPdoSetDefaultValue+0x228>)
 800e216:	2700      	movs	r7, #0
 800e218:	f8b8 2000 	ldrh.w	r2, [r8]
 800e21c:	b2bb      	uxth	r3, r7
 800e21e:	429a      	cmp	r2, r3
 800e220:	d80c      	bhi.n	800e23c <icoPdoSetDefaultValue+0x30>
 800e222:	f8df 821c 	ldr.w	r8, [pc, #540]	; 800e440 <icoPdoSetDefaultValue+0x234>
 800e226:	4e84      	ldr	r6, [pc, #528]	; (800e438 <icoPdoSetDefaultValue+0x22c>)
 800e228:	2700      	movs	r7, #0
 800e22a:	f8b8 2000 	ldrh.w	r2, [r8]
 800e22e:	b2bb      	uxth	r3, r7
 800e230:	429a      	cmp	r2, r3
 800e232:	f200 808a 	bhi.w	800e34a <icoPdoSetDefaultValue+0x13e>
 800e236:	b003      	add	sp, #12
 800e238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e23c:	b2bd      	uxth	r5, r7
 800e23e:	2338      	movs	r3, #56	; 0x38
 800e240:	fb03 6305 	mla	r3, r3, r5, r6
 800e244:	aa01      	add	r2, sp, #4
 800e246:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 800e248:	f500 50bf 	add.w	r0, r0, #6112	; 0x17e0
 800e24c:	301f      	adds	r0, #31
 800e24e:	2101      	movs	r1, #1
 800e250:	b280      	uxth	r0, r0
 800e252:	f7fe fe39 	bl	800cec8 <coOdGetDefaultVal_u32>
 800e256:	2800      	cmp	r0, #0
 800e258:	d16f      	bne.n	800e33a <icoPdoSetDefaultValue+0x12e>
 800e25a:	9b01      	ldr	r3, [sp, #4]
 800e25c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e260:	f04f 0938 	mov.w	r9, #56	; 0x38
 800e264:	fb09 f905 	mul.w	r9, r9, r5
 800e268:	9301      	str	r3, [sp, #4]
 800e26a:	eb06 0309 	add.w	r3, r6, r9
 800e26e:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 800e270:	3c01      	subs	r4, #1
 800e272:	b2a4      	uxth	r4, r4
 800e274:	2c03      	cmp	r4, #3
 800e276:	d862      	bhi.n	800e33e <icoPdoSetDefaultValue+0x132>
 800e278:	f7fe f8a2 	bl	800c3c0 <coNmtGetNodeId>
 800e27c:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 800e280:	9c01      	ldr	r4, [sp, #4]
 800e282:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800e286:	4320      	orrs	r0, r4
 800e288:	f846 0009 	str.w	r0, [r6, r9]
 800e28c:	2438      	movs	r4, #56	; 0x38
 800e28e:	fb04 6405 	mla	r4, r4, r5, r6
 800e292:	f10d 0201 	add.w	r2, sp, #1
 800e296:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e298:	f500 50bf 	add.w	r0, r0, #6112	; 0x17e0
 800e29c:	301f      	adds	r0, #31
 800e29e:	2102      	movs	r1, #2
 800e2a0:	b280      	uxth	r0, r0
 800e2a2:	f7fe fdb9 	bl	800ce18 <coOdGetDefaultVal_u8>
 800e2a6:	b918      	cbnz	r0, 800e2b0 <icoPdoSetDefaultValue+0xa4>
 800e2a8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e2ac:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 800e2b0:	2438      	movs	r4, #56	; 0x38
 800e2b2:	fb04 6405 	mla	r4, r4, r5, r6
 800e2b6:	f10d 0202 	add.w	r2, sp, #2
 800e2ba:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e2bc:	f500 50bf 	add.w	r0, r0, #6112	; 0x17e0
 800e2c0:	301f      	adds	r0, #31
 800e2c2:	2103      	movs	r1, #3
 800e2c4:	b280      	uxth	r0, r0
 800e2c6:	f7fe fdd5 	bl	800ce74 <coOdGetDefaultVal_u16>
 800e2ca:	b910      	cbnz	r0, 800e2d2 <icoPdoSetDefaultValue+0xc6>
 800e2cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e2d0:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800e2d2:	2438      	movs	r4, #56	; 0x38
 800e2d4:	fb04 6405 	mla	r4, r4, r5, r6
 800e2d8:	f10d 0202 	add.w	r2, sp, #2
 800e2dc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e2de:	f500 50bf 	add.w	r0, r0, #6112	; 0x17e0
 800e2e2:	301f      	adds	r0, #31
 800e2e4:	2105      	movs	r1, #5
 800e2e6:	b280      	uxth	r0, r0
 800e2e8:	f7fe fdc4 	bl	800ce74 <coOdGetDefaultVal_u16>
 800e2ec:	b910      	cbnz	r0, 800e2f4 <icoPdoSetDefaultValue+0xe8>
 800e2ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e2f2:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800e2f4:	2438      	movs	r4, #56	; 0x38
 800e2f6:	fb04 6405 	mla	r4, r4, r5, r6
 800e2fa:	f10d 0201 	add.w	r2, sp, #1
 800e2fe:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e300:	f500 50bf 	add.w	r0, r0, #6112	; 0x17e0
 800e304:	301f      	adds	r0, #31
 800e306:	2106      	movs	r1, #6
 800e308:	b280      	uxth	r0, r0
 800e30a:	f7fe fd85 	bl	800ce18 <coOdGetDefaultVal_u8>
 800e30e:	b918      	cbnz	r0, 800e318 <icoPdoSetDefaultValue+0x10c>
 800e310:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e314:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 800e318:	2338      	movs	r3, #56	; 0x38
 800e31a:	fb03 6505 	mla	r5, r3, r5, r6
 800e31e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800e322:	2b01      	cmp	r3, #1
 800e324:	d107      	bne.n	800e336 <icoPdoSetDefaultValue+0x12a>
 800e326:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
 800e328:	8e28      	ldrh	r0, [r5, #48]	; 0x30
 800e32a:	f501 51cf 	add.w	r1, r1, #6624	; 0x19e0
 800e32e:	311f      	adds	r1, #31
 800e330:	b289      	uxth	r1, r1
 800e332:	f7ff fa9d 	bl	800d870 <setupPdoTrMapTable>
 800e336:	3701      	adds	r7, #1
 800e338:	e76e      	b.n	800e218 <icoPdoSetDefaultValue+0xc>
 800e33a:	2300      	movs	r3, #0
 800e33c:	e790      	b.n	800e260 <icoPdoSetDefaultValue+0x54>
 800e33e:	9b01      	ldr	r3, [sp, #4]
 800e340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e344:	f846 3009 	str.w	r3, [r6, r9]
 800e348:	e7a0      	b.n	800e28c <icoPdoSetDefaultValue+0x80>
 800e34a:	b2bd      	uxth	r5, r7
 800e34c:	233c      	movs	r3, #60	; 0x3c
 800e34e:	fb03 6305 	mla	r3, r3, r5, r6
 800e352:	aa01      	add	r2, sp, #4
 800e354:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 800e356:	f500 509f 	add.w	r0, r0, #5088	; 0x13e0
 800e35a:	301f      	adds	r0, #31
 800e35c:	2101      	movs	r1, #1
 800e35e:	b280      	uxth	r0, r0
 800e360:	f7fe fdb2 	bl	800cec8 <coOdGetDefaultVal_u32>
 800e364:	2800      	cmp	r0, #0
 800e366:	d15c      	bne.n	800e422 <icoPdoSetDefaultValue+0x216>
 800e368:	9b01      	ldr	r3, [sp, #4]
 800e36a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e36e:	f04f 093c 	mov.w	r9, #60	; 0x3c
 800e372:	fb09 f905 	mul.w	r9, r9, r5
 800e376:	9301      	str	r3, [sp, #4]
 800e378:	eb06 0309 	add.w	r3, r6, r9
 800e37c:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 800e37e:	3c01      	subs	r4, #1
 800e380:	b2a4      	uxth	r4, r4
 800e382:	2c03      	cmp	r4, #3
 800e384:	d84f      	bhi.n	800e426 <icoPdoSetDefaultValue+0x21a>
 800e386:	f7fe f81b 	bl	800c3c0 <coNmtGetNodeId>
 800e38a:	3402      	adds	r4, #2
 800e38c:	eb00 2404 	add.w	r4, r0, r4, lsl #8
 800e390:	9801      	ldr	r0, [sp, #4]
 800e392:	4304      	orrs	r4, r0
 800e394:	f846 4009 	str.w	r4, [r6, r9]
 800e398:	243c      	movs	r4, #60	; 0x3c
 800e39a:	fb04 6405 	mla	r4, r4, r5, r6
 800e39e:	f10d 0201 	add.w	r2, sp, #1
 800e3a2:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e3a4:	f500 509f 	add.w	r0, r0, #5088	; 0x13e0
 800e3a8:	301f      	adds	r0, #31
 800e3aa:	2102      	movs	r1, #2
 800e3ac:	b280      	uxth	r0, r0
 800e3ae:	f7fe fd33 	bl	800ce18 <coOdGetDefaultVal_u8>
 800e3b2:	b918      	cbnz	r0, 800e3bc <icoPdoSetDefaultValue+0x1b0>
 800e3b4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e3b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800e3bc:	243c      	movs	r4, #60	; 0x3c
 800e3be:	fb04 6405 	mla	r4, r4, r5, r6
 800e3c2:	f10d 0202 	add.w	r2, sp, #2
 800e3c6:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e3c8:	f500 509f 	add.w	r0, r0, #5088	; 0x13e0
 800e3cc:	301f      	adds	r0, #31
 800e3ce:	2103      	movs	r1, #3
 800e3d0:	b280      	uxth	r0, r0
 800e3d2:	f7fe fd4f 	bl	800ce74 <coOdGetDefaultVal_u16>
 800e3d6:	b910      	cbnz	r0, 800e3de <icoPdoSetDefaultValue+0x1d2>
 800e3d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e3dc:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800e3de:	243c      	movs	r4, #60	; 0x3c
 800e3e0:	fb04 6405 	mla	r4, r4, r5, r6
 800e3e4:	f10d 0202 	add.w	r2, sp, #2
 800e3e8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e3ea:	f500 509f 	add.w	r0, r0, #5088	; 0x13e0
 800e3ee:	301f      	adds	r0, #31
 800e3f0:	2105      	movs	r1, #5
 800e3f2:	b280      	uxth	r0, r0
 800e3f4:	f7fe fd3e 	bl	800ce74 <coOdGetDefaultVal_u16>
 800e3f8:	b910      	cbnz	r0, 800e400 <icoPdoSetDefaultValue+0x1f4>
 800e3fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e3fe:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800e400:	233c      	movs	r3, #60	; 0x3c
 800e402:	fb03 6505 	mla	r5, r3, r5, r6
 800e406:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d107      	bne.n	800e41e <icoPdoSetDefaultValue+0x212>
 800e40e:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
 800e410:	8e28      	ldrh	r0, [r5, #48]	; 0x30
 800e412:	f501 51af 	add.w	r1, r1, #5600	; 0x15e0
 800e416:	311f      	adds	r1, #31
 800e418:	b289      	uxth	r1, r1
 800e41a:	f7ff fa69 	bl	800d8f0 <setupPdoRecMapTable>
 800e41e:	3701      	adds	r7, #1
 800e420:	e703      	b.n	800e22a <icoPdoSetDefaultValue+0x1e>
 800e422:	2300      	movs	r3, #0
 800e424:	e7a3      	b.n	800e36e <icoPdoSetDefaultValue+0x162>
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e42c:	f846 3009 	str.w	r3, [r6, r9]
 800e430:	e7b2      	b.n	800e398 <icoPdoSetDefaultValue+0x18c>
 800e432:	bf00      	nop
 800e434:	20008ae8 	.word	0x20008ae8
 800e438:	200089f4 	.word	0x200089f4
 800e43c:	20008ae4 	.word	0x20008ae4
 800e440:	200089ea 	.word	0x200089ea

0800e444 <icoPdoVarInit>:
 800e444:	4a08      	ldr	r2, [pc, #32]	; (800e468 <icoPdoVarInit+0x24>)
 800e446:	2300      	movs	r3, #0
 800e448:	8013      	strh	r3, [r2, #0]
 800e44a:	4a08      	ldr	r2, [pc, #32]	; (800e46c <icoPdoVarInit+0x28>)
 800e44c:	8013      	strh	r3, [r2, #0]
 800e44e:	4a08      	ldr	r2, [pc, #32]	; (800e470 <icoPdoVarInit+0x2c>)
 800e450:	8013      	strh	r3, [r2, #0]
 800e452:	4a08      	ldr	r2, [pc, #32]	; (800e474 <icoPdoVarInit+0x30>)
 800e454:	8013      	strh	r3, [r2, #0]
 800e456:	4a08      	ldr	r2, [pc, #32]	; (800e478 <icoPdoVarInit+0x34>)
 800e458:	8013      	strh	r3, [r2, #0]
 800e45a:	4a08      	ldr	r2, [pc, #32]	; (800e47c <icoPdoVarInit+0x38>)
 800e45c:	8013      	strh	r3, [r2, #0]
 800e45e:	4a08      	ldr	r2, [pc, #32]	; (800e480 <icoPdoVarInit+0x3c>)
 800e460:	8013      	strh	r3, [r2, #0]
 800e462:	4a08      	ldr	r2, [pc, #32]	; (800e484 <icoPdoVarInit+0x40>)
 800e464:	8013      	strh	r3, [r2, #0]
 800e466:	4770      	bx	lr
 800e468:	20008ae4 	.word	0x20008ae4
 800e46c:	200086b2 	.word	0x200086b2
 800e470:	200089e8 	.word	0x200089e8
 800e474:	200089ea 	.word	0x200089ea
 800e478:	200086b0 	.word	0x200086b0
 800e47c:	200089e0 	.word	0x200089e0
 800e480:	200089f0 	.word	0x200089f0
 800e484:	200089d8 	.word	0x200089d8

0800e488 <coPdoTransmitInit>:
 800e488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48c:	4f41      	ldr	r7, [pc, #260]	; (800e594 <coPdoTransmitInit+0x10c>)
 800e48e:	883d      	ldrh	r5, [r7, #0]
 800e490:	2d03      	cmp	r5, #3
 800e492:	4681      	mov	r9, r0
 800e494:	4688      	mov	r8, r1
 800e496:	4693      	mov	fp, r2
 800e498:	469a      	mov	sl, r3
 800e49a:	d877      	bhi.n	800e58c <coPdoTransmitInit+0x104>
 800e49c:	4e3e      	ldr	r6, [pc, #248]	; (800e598 <coPdoTransmitInit+0x110>)
 800e49e:	2438      	movs	r4, #56	; 0x38
 800e4a0:	fb04 6405 	mla	r4, r4, r5, r6
 800e4a4:	462a      	mov	r2, r5
 800e4a6:	8560      	strh	r0, [r4, #42]	; 0x2a
 800e4a8:	2104      	movs	r1, #4
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	f001 fc72 	bl	800fd94 <icoCobCreate>
 800e4b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4b4:	4290      	cmp	r0, r2
 800e4b6:	84e0      	strh	r0, [r4, #38]	; 0x26
 800e4b8:	d06a      	beq.n	800e590 <coPdoTransmitInit+0x108>
 800e4ba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e4be:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e4c0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	f884 8032 	strb.w	r8, [r4, #50]	; 0x32
 800e4ca:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
 800e4ce:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
 800e4d2:	f8a4 a02e 	strh.w	sl, [r4, #46]	; 0x2e
 800e4d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800e4da:	2900      	cmp	r1, #0
 800e4dc:	d147      	bne.n	800e56e <coPdoTransmitInit+0xe6>
 800e4de:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800e5a0 <coPdoTransmitInit+0x118>
 800e4e2:	f8bb a000 	ldrh.w	sl, [fp]
 800e4e6:	f1ba 0f04 	cmp.w	sl, #4
 800e4ea:	d104      	bne.n	800e4f6 <coPdoTransmitInit+0x6e>
 800e4ec:	2447      	movs	r4, #71	; 0x47
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	b003      	add	sp, #12
 800e4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f6:	f509 51cf 	add.w	r1, r9, #6624	; 0x19e0
 800e4fa:	311f      	adds	r1, #31
 800e4fc:	b289      	uxth	r1, r1
 800e4fe:	4650      	mov	r0, sl
 800e500:	9201      	str	r2, [sp, #4]
 800e502:	f7ff f9b5 	bl	800d870 <setupPdoTrMapTable>
 800e506:	2800      	cmp	r0, #0
 800e508:	d1f0      	bne.n	800e4ec <coPdoTransmitInit+0x64>
 800e50a:	f8bb 3000 	ldrh.w	r3, [fp]
 800e50e:	9a01      	ldr	r2, [sp, #4]
 800e510:	3301      	adds	r3, #1
 800e512:	4592      	cmp	sl, r2
 800e514:	f8ab 3000 	strh.w	r3, [fp]
 800e518:	d0e8      	beq.n	800e4ec <coPdoTransmitInit+0x64>
 800e51a:	4a20      	ldr	r2, [pc, #128]	; (800e59c <coPdoTransmitInit+0x114>)
 800e51c:	f8a4 a030 	strh.w	sl, [r4, #48]	; 0x30
 800e520:	2364      	movs	r3, #100	; 0x64
 800e522:	fb03 230a 	mla	r3, r3, sl, r2
 800e526:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800e52a:	2301      	movs	r3, #1
 800e52c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800e530:	2100      	movs	r1, #0
 800e532:	4620      	mov	r0, r4
 800e534:	f7ff f8e2 	bl	800d6fc <checkTrPdoMappingTable>
 800e538:	2338      	movs	r3, #56	; 0x38
 800e53a:	2808      	cmp	r0, #8
 800e53c:	4602      	mov	r2, r0
 800e53e:	fb03 6305 	mla	r3, r3, r5, r6
 800e542:	d81b      	bhi.n	800e57c <coPdoTransmitInit+0xf4>
 800e544:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e548:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800e54a:	f7ff fa5d 	bl	800da08 <setPdoCob>
 800e54e:	4604      	mov	r4, r0
 800e550:	2338      	movs	r3, #56	; 0x38
 800e552:	fb03 6505 	mla	r5, r3, r5, r6
 800e556:	f1b8 0ffd 	cmp.w	r8, #253	; 0xfd
 800e55a:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 800e55c:	bf8c      	ite	hi
 800e55e:	8da9      	ldrhhi	r1, [r5, #44]	; 0x2c
 800e560:	2100      	movls	r1, #0
 800e562:	f001 fc9d 	bl	800fea0 <icoCobSetInhibit>
 800e566:	883b      	ldrh	r3, [r7, #0]
 800e568:	3301      	adds	r3, #1
 800e56a:	803b      	strh	r3, [r7, #0]
 800e56c:	e7bf      	b.n	800e4ee <coPdoTransmitInit+0x66>
 800e56e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e570:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800e574:	e9c4 1301 	strd	r1, r3, [r4, #4]
 800e578:	8622      	strh	r2, [r4, #48]	; 0x30
 800e57a:	e7d9      	b.n	800e530 <coPdoTransmitInit+0xa8>
 800e57c:	2200      	movs	r2, #0
 800e57e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e582:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800e584:	f7ff fa40 	bl	800da08 <setPdoCob>
 800e588:	2447      	movs	r4, #71	; 0x47
 800e58a:	e7e1      	b.n	800e550 <coPdoTransmitInit+0xc8>
 800e58c:	240a      	movs	r4, #10
 800e58e:	e7ae      	b.n	800e4ee <coPdoTransmitInit+0x66>
 800e590:	2432      	movs	r4, #50	; 0x32
 800e592:	e7ac      	b.n	800e4ee <coPdoTransmitInit+0x66>
 800e594:	20008ae4 	.word	0x20008ae4
 800e598:	20008ae8 	.word	0x20008ae8
 800e59c:	20008844 	.word	0x20008844
 800e5a0:	200086b2 	.word	0x200086b2

0800e5a4 <coPdoReceiveInit>:
 800e5a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	4f38      	ldr	r7, [pc, #224]	; (800e68c <coPdoReceiveInit+0xe8>)
 800e5aa:	883d      	ldrh	r5, [r7, #0]
 800e5ac:	2d03      	cmp	r5, #3
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	468b      	mov	fp, r1
 800e5b2:	4692      	mov	sl, r2
 800e5b4:	4699      	mov	r9, r3
 800e5b6:	d865      	bhi.n	800e684 <coPdoReceiveInit+0xe0>
 800e5b8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800e694 <coPdoReceiveInit+0xf0>
 800e5bc:	243c      	movs	r4, #60	; 0x3c
 800e5be:	fb04 8405 	mla	r4, r4, r5, r8
 800e5c2:	462a      	mov	r2, r5
 800e5c4:	8560      	strh	r0, [r4, #42]	; 0x2a
 800e5c6:	2105      	movs	r1, #5
 800e5c8:	2001      	movs	r0, #1
 800e5ca:	f001 fbe3 	bl	800fd94 <icoCobCreate>
 800e5ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5d2:	4290      	cmp	r0, r2
 800e5d4:	84e0      	strh	r0, [r4, #38]	; 0x26
 800e5d6:	d057      	beq.n	800e688 <coPdoReceiveInit+0xe4>
 800e5d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5da:	f884 b03a 	strb.w	fp, [r4, #58]	; 0x3a
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f8a4 a02c 	strh.w	sl, [r4, #44]	; 0x2c
 800e5e4:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
 800e5e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800e5ec:	2900      	cmp	r1, #0
 800e5ee:	d13a      	bne.n	800e666 <coPdoReceiveInit+0xc2>
 800e5f0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800e698 <coPdoReceiveInit+0xf4>
 800e5f4:	f8ba 9000 	ldrh.w	r9, [sl]
 800e5f8:	f1b9 0f04 	cmp.w	r9, #4
 800e5fc:	d103      	bne.n	800e606 <coPdoReceiveInit+0x62>
 800e5fe:	2047      	movs	r0, #71	; 0x47
 800e600:	b003      	add	sp, #12
 800e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e606:	f506 51af 	add.w	r1, r6, #5600	; 0x15e0
 800e60a:	311f      	adds	r1, #31
 800e60c:	b289      	uxth	r1, r1
 800e60e:	4648      	mov	r0, r9
 800e610:	9201      	str	r2, [sp, #4]
 800e612:	f7ff f96d 	bl	800d8f0 <setupPdoRecMapTable>
 800e616:	2800      	cmp	r0, #0
 800e618:	d1f1      	bne.n	800e5fe <coPdoReceiveInit+0x5a>
 800e61a:	f8ba 3000 	ldrh.w	r3, [sl]
 800e61e:	9a01      	ldr	r2, [sp, #4]
 800e620:	3301      	adds	r3, #1
 800e622:	4591      	cmp	r9, r2
 800e624:	f8aa 3000 	strh.w	r3, [sl]
 800e628:	d0e9      	beq.n	800e5fe <coPdoReceiveInit+0x5a>
 800e62a:	4a19      	ldr	r2, [pc, #100]	; (800e690 <coPdoReceiveInit+0xec>)
 800e62c:	f8a4 9030 	strh.w	r9, [r4, #48]	; 0x30
 800e630:	2364      	movs	r3, #100	; 0x64
 800e632:	fb03 2309 	mla	r3, r3, r9, r2
 800e636:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800e63a:	2301      	movs	r3, #1
 800e63c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800e640:	2100      	movs	r1, #0
 800e642:	4620      	mov	r0, r4
 800e644:	f7ff f8ca 	bl	800d7dc <checkRecPdoMappingTable>
 800e648:	233c      	movs	r3, #60	; 0x3c
 800e64a:	2808      	cmp	r0, #8
 800e64c:	4602      	mov	r2, r0
 800e64e:	fb03 8505 	mla	r5, r3, r5, r8
 800e652:	d80f      	bhi.n	800e674 <coPdoReceiveInit+0xd0>
 800e654:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e658:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 800e65a:	f7ff f9d5 	bl	800da08 <setPdoCob>
 800e65e:	883b      	ldrh	r3, [r7, #0]
 800e660:	3301      	adds	r3, #1
 800e662:	803b      	strh	r3, [r7, #0]
 800e664:	e7cc      	b.n	800e600 <coPdoReceiveInit+0x5c>
 800e666:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e668:	60a3      	str	r3, [r4, #8]
 800e66a:	6061      	str	r1, [r4, #4]
 800e66c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800e670:	8622      	strh	r2, [r4, #48]	; 0x30
 800e672:	e7e5      	b.n	800e640 <coPdoReceiveInit+0x9c>
 800e674:	2200      	movs	r2, #0
 800e676:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e67a:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 800e67c:	f7ff f9c4 	bl	800da08 <setPdoCob>
 800e680:	2047      	movs	r0, #71	; 0x47
 800e682:	e7ec      	b.n	800e65e <coPdoReceiveInit+0xba>
 800e684:	200a      	movs	r0, #10
 800e686:	e7bb      	b.n	800e600 <coPdoReceiveInit+0x5c>
 800e688:	2032      	movs	r0, #50	; 0x32
 800e68a:	e7b9      	b.n	800e600 <coPdoReceiveInit+0x5c>
 800e68c:	200089ea 	.word	0x200089ea
 800e690:	200086b4 	.word	0x200086b4
 800e694:	200089f4 	.word	0x200089f4
 800e698:	200086b0 	.word	0x200086b0
 800e69c:	00000000 	.word	0x00000000

0800e6a0 <demoTimerFct>:
 800e6a0:	b508      	push	{r3, lr}
 800e6a2:	b908      	cbnz	r0, 800e6a8 <demoTimerFct+0x8>
 800e6a4:	4b0c      	ldr	r3, [pc, #48]	; (800e6d8 <demoTimerFct+0x38>)
 800e6a6:	6018      	str	r0, [r3, #0]
 800e6a8:	4b0c      	ldr	r3, [pc, #48]	; (800e6dc <demoTimerFct+0x3c>)
 800e6aa:	6818      	ldr	r0, [r3, #0]
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	6018      	str	r0, [r3, #0]
 800e6b0:	f7f1 ff28 	bl	8000504 <__aeabi_ui2d>
 800e6b4:	a306      	add	r3, pc, #24	; (adr r3, 800e6d0 <demoTimerFct+0x30>)
 800e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ba:	f7f2 fa2d 	bl	8000b18 <__aeabi_dcmpgt>
 800e6be:	b128      	cbz	r0, 800e6cc <demoTimerFct+0x2c>
 800e6c0:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <demoTimerFct+0x40>)
 800e6c2:	4a08      	ldr	r2, [pc, #32]	; (800e6e4 <demoTimerFct+0x44>)
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	4b08      	ldr	r3, [pc, #32]	; (800e6e8 <demoTimerFct+0x48>)
 800e6c8:	4a08      	ldr	r2, [pc, #32]	; (800e6ec <demoTimerFct+0x4c>)
 800e6ca:	601a      	str	r2, [r3, #0]
 800e6cc:	bd08      	pop	{r3, pc}
 800e6ce:	bf00      	nop
 800e6d0:	7eeb9b3b 	.word	0x7eeb9b3b
 800e6d4:	40c6c74d 	.word	0x40c6c74d
 800e6d8:	20008be8 	.word	0x20008be8
 800e6dc:	20008bc8 	.word	0x20008bc8
 800e6e0:	20008bec 	.word	0x20008bec
 800e6e4:	00017835 	.word	0x00017835
 800e6e8:	20008bf4 	.word	0x20008bf4
 800e6ec:	00084653 	.word	0x00084653

0800e6f0 <addToTransmitList>:
 800e6f0:	4a07      	ldr	r2, [pc, #28]	; (800e710 <addToTransmitList+0x20>)
 800e6f2:	6813      	ldr	r3, [r2, #0]
 800e6f4:	b933      	cbnz	r3, 800e704 <addToTransmitList+0x14>
 800e6f6:	6010      	str	r0, [r2, #0]
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	6183      	str	r3, [r0, #24]
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	7583      	strb	r3, [r0, #22]
 800e700:	4770      	bx	lr
 800e702:	4613      	mov	r3, r2
 800e704:	699a      	ldr	r2, [r3, #24]
 800e706:	2a00      	cmp	r2, #0
 800e708:	d1fb      	bne.n	800e702 <addToTransmitList+0x12>
 800e70a:	6198      	str	r0, [r3, #24]
 800e70c:	e7f4      	b.n	800e6f8 <addToTransmitList+0x8>
 800e70e:	bf00      	nop
 800e710:	20008bf4 	.word	0x20008bf4

0800e714 <moveInhibitToTransmitList>:
 800e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e716:	4e12      	ldr	r6, [pc, #72]	; (800e760 <moveInhibitToTransmitList+0x4c>)
 800e718:	6835      	ldr	r5, [r6, #0]
 800e71a:	4607      	mov	r7, r0
 800e71c:	2400      	movs	r4, #0
 800e71e:	b985      	cbnz	r5, 800e742 <moveInhibitToTransmitList+0x2e>
 800e720:	b16c      	cbz	r4, 800e73e <moveInhibitToTransmitList+0x2a>
 800e722:	6832      	ldr	r2, [r6, #0]
 800e724:	490f      	ldr	r1, [pc, #60]	; (800e764 <moveInhibitToTransmitList+0x50>)
 800e726:	69a0      	ldr	r0, [r4, #24]
 800e728:	700d      	strb	r5, [r1, #0]
 800e72a:	42a2      	cmp	r2, r4
 800e72c:	d112      	bne.n	800e754 <moveInhibitToTransmitList+0x40>
 800e72e:	6030      	str	r0, [r6, #0]
 800e730:	4620      	mov	r0, r4
 800e732:	f7ff ffdd 	bl	800e6f0 <addToTransmitList>
 800e736:	2301      	movs	r3, #1
 800e738:	700b      	strb	r3, [r1, #0]
 800e73a:	f7fc f9bb 	bl	800aab4 <codrvCanStartTransmission>
 800e73e:	4620      	mov	r0, r4
 800e740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e742:	8aa8      	ldrh	r0, [r5, #20]
 800e744:	f001 fbd6 	bl	800fef4 <icoCobGetPointer>
 800e748:	4287      	cmp	r7, r0
 800e74a:	bf08      	it	eq
 800e74c:	462c      	moveq	r4, r5
 800e74e:	69ad      	ldr	r5, [r5, #24]
 800e750:	e7e5      	b.n	800e71e <moveInhibitToTransmitList+0xa>
 800e752:	461a      	mov	r2, r3
 800e754:	6993      	ldr	r3, [r2, #24]
 800e756:	42a3      	cmp	r3, r4
 800e758:	d1fb      	bne.n	800e752 <moveInhibitToTransmitList+0x3e>
 800e75a:	6190      	str	r0, [r2, #24]
 800e75c:	e7e8      	b.n	800e730 <moveInhibitToTransmitList+0x1c>
 800e75e:	bf00      	nop
 800e760:	20008bec 	.word	0x20008bec
 800e764:	20000018 	.word	0x20000018

0800e768 <inhibitTimer>:
 800e768:	f7ff bfd4 	b.w	800e714 <moveInhibitToTransmitList>

0800e76c <searchLastMessage>:
 800e76c:	b510      	push	{r4, lr}
 800e76e:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <searchLastMessage+0x3c>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	b923      	cbnz	r3, 800e77e <searchLastMessage+0x12>
 800e774:	4a0d      	ldr	r2, [pc, #52]	; (800e7ac <searchLastMessage+0x40>)
 800e776:	6812      	ldr	r2, [r2, #0]
 800e778:	b932      	cbnz	r2, 800e788 <searchLastMessage+0x1c>
 800e77a:	4618      	mov	r0, r3
 800e77c:	bd10      	pop	{r4, pc}
 800e77e:	8a9a      	ldrh	r2, [r3, #20]
 800e780:	4282      	cmp	r2, r0
 800e782:	d0fa      	beq.n	800e77a <searchLastMessage+0xe>
 800e784:	699b      	ldr	r3, [r3, #24]
 800e786:	e7f4      	b.n	800e772 <searchLastMessage+0x6>
 800e788:	8a94      	ldrh	r4, [r2, #20]
 800e78a:	4284      	cmp	r4, r0
 800e78c:	d105      	bne.n	800e79a <searchLastMessage+0x2e>
 800e78e:	2901      	cmp	r1, #1
 800e790:	7d94      	ldrb	r4, [r2, #22]
 800e792:	d104      	bne.n	800e79e <searchLastMessage+0x32>
 800e794:	2c00      	cmp	r4, #0
 800e796:	bf18      	it	ne
 800e798:	4613      	movne	r3, r2
 800e79a:	6992      	ldr	r2, [r2, #24]
 800e79c:	e7ec      	b.n	800e778 <searchLastMessage+0xc>
 800e79e:	2c02      	cmp	r4, #2
 800e7a0:	bf08      	it	eq
 800e7a2:	4613      	moveq	r3, r2
 800e7a4:	e7f9      	b.n	800e79a <searchLastMessage+0x2e>
 800e7a6:	bf00      	nop
 800e7a8:	20008bec 	.word	0x20008bec
 800e7ac:	20008bf4 	.word	0x20008bf4

0800e7b0 <icoQueueGetReceiveMessage>:
 800e7b0:	4b40      	ldr	r3, [pc, #256]	; (800e8b4 <icoQueueGetReceiveMessage+0x104>)
 800e7b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b6:	795a      	ldrb	r2, [r3, #5]
 800e7b8:	2a02      	cmp	r2, #2
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	d00d      	beq.n	800e7da <icoQueueGetReceiveMessage+0x2a>
 800e7be:	2a04      	cmp	r2, #4
 800e7c0:	d00b      	beq.n	800e7da <icoQueueGetReceiveMessage+0x2a>
 800e7c2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800e8c4 <icoQueueGetReceiveMessage+0x114>
 800e7c6:	4647      	mov	r7, r8
 800e7c8:	4b3b      	ldr	r3, [pc, #236]	; (800e8b8 <icoQueueGetReceiveMessage+0x108>)
 800e7ca:	f8b3 9000 	ldrh.w	r9, [r3]
 800e7ce:	f8b8 3000 	ldrh.w	r3, [r8]
 800e7d2:	4599      	cmp	r9, r3
 800e7d4:	d118      	bne.n	800e808 <icoQueueGetReceiveMessage+0x58>
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	e013      	b.n	800e802 <icoQueueGetReceiveMessage+0x52>
 800e7da:	2107      	movs	r1, #7
 800e7dc:	2a04      	cmp	r2, #4
 800e7de:	7021      	strb	r1, [r4, #0]
 800e7e0:	6818      	ldr	r0, [r3, #0]
 800e7e2:	6060      	str	r0, [r4, #4]
 800e7e4:	f04f 0100 	mov.w	r1, #0
 800e7e8:	bf08      	it	eq
 800e7ea:	2201      	moveq	r2, #1
 800e7ec:	8061      	strh	r1, [r4, #2]
 800e7ee:	bf02      	ittt	eq
 800e7f0:	7262      	strbeq	r2, [r4, #9]
 800e7f2:	791a      	ldrbeq	r2, [r3, #4]
 800e7f4:	72a2      	strbeq	r2, [r4, #10]
 800e7f6:	f04f 0200 	mov.w	r2, #0
 800e7fa:	bf18      	it	ne
 800e7fc:	7261      	strbne	r1, [r4, #9]
 800e7fe:	715a      	strb	r2, [r3, #5]
 800e800:	2001      	movs	r0, #1
 800e802:	b003      	add	sp, #12
 800e804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e808:	4a2c      	ldr	r2, [pc, #176]	; (800e8bc <icoQueueGetReceiveMessage+0x10c>)
 800e80a:	8815      	ldrh	r5, [r2, #0]
 800e80c:	f103 0208 	add.w	r2, r3, #8
 800e810:	42aa      	cmp	r2, r5
 800e812:	4a2b      	ldr	r2, [pc, #172]	; (800e8c0 <icoQueueGetReceiveMessage+0x110>)
 800e814:	f8d2 b000 	ldr.w	fp, [r2]
 800e818:	bf88      	it	hi
 800e81a:	2300      	movhi	r3, #0
 800e81c:	eb0b 0103 	add.w	r1, fp, r3
 800e820:	466a      	mov	r2, sp
 800e822:	6808      	ldr	r0, [r1, #0]
 800e824:	6849      	ldr	r1, [r1, #4]
 800e826:	bf88      	it	hi
 800e828:	f8a8 3000 	strhhi.w	r3, [r8]
 800e82c:	c203      	stmia	r2!, {r0, r1}
 800e82e:	3308      	adds	r3, #8
 800e830:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800e834:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e838:	7222      	strb	r2, [r4, #8]
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	199a      	adds	r2, r3, r6
 800e83e:	42aa      	cmp	r2, r5
 800e840:	6060      	str	r0, [r4, #4]
 800e842:	7266      	strb	r6, [r4, #9]
 800e844:	f104 000a 	add.w	r0, r4, #10
 800e848:	eb0b 0103 	add.w	r1, fp, r3
 800e84c:	dd25      	ble.n	800e89a <icoQueueGetReceiveMessage+0xea>
 800e84e:	1aeb      	subs	r3, r5, r3
 800e850:	fa1f fa83 	uxth.w	sl, r3
 800e854:	4652      	mov	r2, sl
 800e856:	f001 fbeb 	bl	8010030 <memcpy>
 800e85a:	f10a 000a 	add.w	r0, sl, #10
 800e85e:	eba6 020a 	sub.w	r2, r6, sl
 800e862:	b292      	uxth	r2, r2
 800e864:	4659      	mov	r1, fp
 800e866:	4420      	add	r0, r4
 800e868:	f001 fbe2 	bl	8010030 <memcpy>
 800e86c:	883b      	ldrh	r3, [r7, #0]
 800e86e:	3308      	adds	r3, #8
 800e870:	441e      	add	r6, r3
 800e872:	b2b6      	uxth	r6, r6
 800e874:	42b5      	cmp	r5, r6
 800e876:	bf98      	it	ls
 800e878:	1b76      	subls	r6, r6, r5
 800e87a:	803e      	strh	r6, [r7, #0]
 800e87c:	883b      	ldrh	r3, [r7, #0]
 800e87e:	454b      	cmp	r3, r9
 800e880:	d102      	bne.n	800e888 <icoQueueGetReceiveMessage+0xd8>
 800e882:	2009      	movs	r0, #9
 800e884:	f7fc faee 	bl	800ae64 <coCommStateEvent>
 800e888:	1d20      	adds	r0, r4, #4
 800e88a:	f001 fb41 	bl	800ff10 <icoCobCheck>
 800e88e:	b130      	cbz	r0, 800e89e <icoQueueGetReceiveMessage+0xee>
 800e890:	7c03      	ldrb	r3, [r0, #16]
 800e892:	7023      	strb	r3, [r4, #0]
 800e894:	8a43      	ldrh	r3, [r0, #18]
 800e896:	8063      	strh	r3, [r4, #2]
 800e898:	e7b2      	b.n	800e800 <icoQueueGetReceiveMessage+0x50>
 800e89a:	4632      	mov	r2, r6
 800e89c:	e7e4      	b.n	800e868 <icoQueueGetReceiveMessage+0xb8>
 800e89e:	6863      	ldr	r3, [r4, #4]
 800e8a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e8a8:	d18e      	bne.n	800e7c8 <icoQueueGetReceiveMessage+0x18>
 800e8aa:	2302      	movs	r3, #2
 800e8ac:	7023      	strb	r3, [r4, #0]
 800e8ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e8b2:	e7f0      	b.n	800e896 <icoQueueGetReceiveMessage+0xe6>
 800e8b4:	20008cb8 	.word	0x20008cb8
 800e8b8:	20008cb6 	.word	0x20008cb6
 800e8bc:	20008cb4 	.word	0x20008cb4
 800e8c0:	20008bf0 	.word	0x20008bf0
 800e8c4:	20008cb2 	.word	0x20008cb2

0800e8c8 <coQueueReceiveMessageAvailable>:
 800e8c8:	4b07      	ldr	r3, [pc, #28]	; (800e8e8 <coQueueReceiveMessageAvailable+0x20>)
 800e8ca:	881a      	ldrh	r2, [r3, #0]
 800e8cc:	4b07      	ldr	r3, [pc, #28]	; (800e8ec <coQueueReceiveMessageAvailable+0x24>)
 800e8ce:	881b      	ldrh	r3, [r3, #0]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d107      	bne.n	800e8e4 <coQueueReceiveMessageAvailable+0x1c>
 800e8d4:	4b06      	ldr	r3, [pc, #24]	; (800e8f0 <coQueueReceiveMessageAvailable+0x28>)
 800e8d6:	7958      	ldrb	r0, [r3, #5]
 800e8d8:	2802      	cmp	r0, #2
 800e8da:	d003      	beq.n	800e8e4 <coQueueReceiveMessageAvailable+0x1c>
 800e8dc:	1f03      	subs	r3, r0, #4
 800e8de:	4258      	negs	r0, r3
 800e8e0:	4158      	adcs	r0, r3
 800e8e2:	4770      	bx	lr
 800e8e4:	2001      	movs	r0, #1
 800e8e6:	4770      	bx	lr
 800e8e8:	20008cb6 	.word	0x20008cb6
 800e8ec:	20008cb2 	.word	0x20008cb2
 800e8f0:	20008cb8 	.word	0x20008cb8

0800e8f4 <coQueueReceiveBufferIsFilled>:
 800e8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f6:	4b1a      	ldr	r3, [pc, #104]	; (800e960 <coQueueReceiveBufferIsFilled+0x6c>)
 800e8f8:	7958      	ldrb	r0, [r3, #5]
 800e8fa:	2801      	cmp	r0, #1
 800e8fc:	d105      	bne.n	800e90a <coQueueReceiveBufferIsFilled+0x16>
 800e8fe:	2202      	movs	r2, #2
 800e900:	715a      	strb	r2, [r3, #5]
 800e902:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e906:	f7fc ba97 	b.w	800ae38 <coCommTaskSet>
 800e90a:	2803      	cmp	r0, #3
 800e90c:	d103      	bne.n	800e916 <coQueueReceiveBufferIsFilled+0x22>
 800e90e:	2204      	movs	r2, #4
 800e910:	715a      	strb	r2, [r3, #5]
 800e912:	2001      	movs	r0, #1
 800e914:	e7f5      	b.n	800e902 <coQueueReceiveBufferIsFilled+0xe>
 800e916:	4b13      	ldr	r3, [pc, #76]	; (800e964 <coQueueReceiveBufferIsFilled+0x70>)
 800e918:	4c13      	ldr	r4, [pc, #76]	; (800e968 <coQueueReceiveBufferIsFilled+0x74>)
 800e91a:	881e      	ldrh	r6, [r3, #0]
 800e91c:	7b23      	ldrb	r3, [r4, #12]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d115      	bne.n	800e94e <coQueueReceiveBufferIsFilled+0x5a>
 800e922:	8920      	ldrh	r0, [r4, #8]
 800e924:	4b11      	ldr	r3, [pc, #68]	; (800e96c <coQueueReceiveBufferIsFilled+0x78>)
 800e926:	f1a6 0508 	sub.w	r5, r6, #8
 800e92a:	681f      	ldr	r7, [r3, #0]
 800e92c:	1a2d      	subs	r5, r5, r0
 800e92e:	b2ad      	uxth	r5, r5
 800e930:	3008      	adds	r0, #8
 800e932:	462a      	mov	r2, r5
 800e934:	f104 010d 	add.w	r1, r4, #13
 800e938:	4438      	add	r0, r7
 800e93a:	f001 fb79 	bl	8010030 <memcpy>
 800e93e:	8962      	ldrh	r2, [r4, #10]
 800e940:	f105 010d 	add.w	r1, r5, #13
 800e944:	3201      	adds	r2, #1
 800e946:	4421      	add	r1, r4
 800e948:	4638      	mov	r0, r7
 800e94a:	f001 fb71 	bl	8010030 <memcpy>
 800e94e:	8963      	ldrh	r3, [r4, #10]
 800e950:	4a07      	ldr	r2, [pc, #28]	; (800e970 <coQueueReceiveBufferIsFilled+0x7c>)
 800e952:	3301      	adds	r3, #1
 800e954:	b29b      	uxth	r3, r3
 800e956:	42b3      	cmp	r3, r6
 800e958:	bf28      	it	cs
 800e95a:	2300      	movcs	r3, #0
 800e95c:	8013      	strh	r3, [r2, #0]
 800e95e:	e7d8      	b.n	800e912 <coQueueReceiveBufferIsFilled+0x1e>
 800e960:	20008cb8 	.word	0x20008cb8
 800e964:	20008cb4 	.word	0x20008cb4
 800e968:	20008bf8 	.word	0x20008bf8
 800e96c:	20008bf0 	.word	0x20008bf0
 800e970:	20008cb6 	.word	0x20008cb6

0800e974 <coQueueGetReceiveBuffer>:
 800e974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e976:	4b35      	ldr	r3, [pc, #212]	; (800ea4c <coQueueGetReceiveBuffer+0xd8>)
 800e978:	460c      	mov	r4, r1
 800e97a:	6819      	ldr	r1, [r3, #0]
 800e97c:	4281      	cmp	r1, r0
 800e97e:	d110      	bne.n	800e9a2 <coQueueGetReceiveBuffer+0x2e>
 800e980:	799d      	ldrb	r5, [r3, #6]
 800e982:	f002 010a 	and.w	r1, r2, #10
 800e986:	428d      	cmp	r5, r1
 800e988:	d10b      	bne.n	800e9a2 <coQueueGetReceiveBuffer+0x2e>
 800e98a:	b924      	cbnz	r4, 800e996 <coQueueGetReceiveBuffer+0x22>
 800e98c:	2201      	movs	r2, #1
 800e98e:	715a      	strb	r2, [r3, #5]
 800e990:	f7ff ffb0 	bl	800e8f4 <coQueueReceiveBufferIsFilled>
 800e994:	e027      	b.n	800e9e6 <coQueueGetReceiveBuffer+0x72>
 800e996:	2c01      	cmp	r4, #1
 800e998:	d103      	bne.n	800e9a2 <coQueueGetReceiveBuffer+0x2e>
 800e99a:	2203      	movs	r2, #3
 800e99c:	715a      	strb	r2, [r3, #5]
 800e99e:	1d18      	adds	r0, r3, #4
 800e9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9a2:	4b2b      	ldr	r3, [pc, #172]	; (800ea50 <coQueueGetReceiveBuffer+0xdc>)
 800e9a4:	492b      	ldr	r1, [pc, #172]	; (800ea54 <coQueueGetReceiveBuffer+0xe0>)
 800e9a6:	6018      	str	r0, [r3, #0]
 800e9a8:	8808      	ldrh	r0, [r1, #0]
 800e9aa:	492b      	ldr	r1, [pc, #172]	; (800ea58 <coQueueGetReceiveBuffer+0xe4>)
 800e9ac:	715a      	strb	r2, [r3, #5]
 800e9ae:	880d      	ldrh	r5, [r1, #0]
 800e9b0:	492a      	ldr	r1, [pc, #168]	; (800ea5c <coQueueGetReceiveBuffer+0xe8>)
 800e9b2:	8118      	strh	r0, [r3, #8]
 800e9b4:	f012 0f08 	tst.w	r2, #8
 800e9b8:	f04f 0700 	mov.w	r7, #0
 800e9bc:	f100 0c08 	add.w	ip, r0, #8
 800e9c0:	bf18      	it	ne
 800e9c2:	463c      	movne	r4, r7
 800e9c4:	45ac      	cmp	ip, r5
 800e9c6:	731f      	strb	r7, [r3, #12]
 800e9c8:	711c      	strb	r4, [r3, #4]
 800e9ca:	b2a2      	uxth	r2, r4
 800e9cc:	f104 0608 	add.w	r6, r4, #8
 800e9d0:	8809      	ldrh	r1, [r1, #0]
 800e9d2:	d90a      	bls.n	800e9ea <coQueueGetReceiveBuffer+0x76>
 800e9d4:	3207      	adds	r2, #7
 800e9d6:	b292      	uxth	r2, r2
 800e9d8:	811f      	strh	r7, [r3, #8]
 800e9da:	815a      	strh	r2, [r3, #10]
 800e9dc:	428a      	cmp	r2, r1
 800e9de:	d312      	bcc.n	800ea06 <coQueueGetReceiveBuffer+0x92>
 800e9e0:	4b1f      	ldr	r3, [pc, #124]	; (800ea60 <coQueueGetReceiveBuffer+0xec>)
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	701a      	strb	r2, [r3, #0]
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	e7da      	b.n	800e9a0 <coQueueGetReceiveBuffer+0x2c>
 800e9ea:	1e42      	subs	r2, r0, #1
 800e9ec:	4432      	add	r2, r6
 800e9ee:	b292      	uxth	r2, r2
 800e9f0:	4295      	cmp	r5, r2
 800e9f2:	815a      	strh	r2, [r3, #10]
 800e9f4:	d805      	bhi.n	800ea02 <coQueueGetReceiveBuffer+0x8e>
 800e9f6:	1b52      	subs	r2, r2, r5
 800e9f8:	b292      	uxth	r2, r2
 800e9fa:	4288      	cmp	r0, r1
 800e9fc:	815a      	strh	r2, [r3, #10]
 800e9fe:	d2ed      	bcs.n	800e9dc <coQueueGetReceiveBuffer+0x68>
 800ea00:	e7ee      	b.n	800e9e0 <coQueueGetReceiveBuffer+0x6c>
 800ea02:	4288      	cmp	r0, r1
 800ea04:	d3ea      	bcc.n	800e9dc <coQueueGetReceiveBuffer+0x68>
 800ea06:	895a      	ldrh	r2, [r3, #10]
 800ea08:	3201      	adds	r2, #1
 800ea0a:	b292      	uxth	r2, r2
 800ea0c:	4295      	cmp	r5, r2
 800ea0e:	bf98      	it	ls
 800ea10:	2200      	movls	r2, #0
 800ea12:	428a      	cmp	r2, r1
 800ea14:	d0e4      	beq.n	800e9e0 <coQueueGetReceiveBuffer+0x6c>
 800ea16:	4a13      	ldr	r2, [pc, #76]	; (800ea64 <coQueueGetReceiveBuffer+0xf0>)
 800ea18:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800ea1c:	6817      	ldr	r7, [r2, #0]
 800ea1e:	4a0c      	ldr	r2, [pc, #48]	; (800ea50 <coQueueGetReceiveBuffer+0xdc>)
 800ea20:	ca03      	ldmia	r2!, {r0, r1}
 800ea22:	eb07 0e0c 	add.w	lr, r7, ip
 800ea26:	f847 000c 	str.w	r0, [r7, ip]
 800ea2a:	f8ce 1004 	str.w	r1, [lr, #4]
 800ea2e:	2c00      	cmp	r4, #0
 800ea30:	d0ae      	beq.n	800e990 <coQueueGetReceiveBuffer+0x1c>
 800ea32:	8918      	ldrh	r0, [r3, #8]
 800ea34:	4406      	add	r6, r0
 800ea36:	42ae      	cmp	r6, r5
 800ea38:	bfcd      	iteet	gt
 800ea3a:	2101      	movgt	r1, #1
 800ea3c:	2200      	movle	r2, #0
 800ea3e:	3008      	addle	r0, #8
 800ea40:	7319      	strbgt	r1, [r3, #12]
 800ea42:	bfce      	itee	gt
 800ea44:	1d50      	addgt	r0, r2, #5
 800ea46:	731a      	strble	r2, [r3, #12]
 800ea48:	19c0      	addle	r0, r0, r7
 800ea4a:	e7a9      	b.n	800e9a0 <coQueueGetReceiveBuffer+0x2c>
 800ea4c:	20008cb8 	.word	0x20008cb8
 800ea50:	20008bf8 	.word	0x20008bf8
 800ea54:	20008cb6 	.word	0x20008cb6
 800ea58:	20008cb4 	.word	0x20008cb4
 800ea5c:	20008cb2 	.word	0x20008cb2
 800ea60:	20008c10 	.word	0x20008c10
 800ea64:	20008bf0 	.word	0x20008bf0

0800ea68 <icoTransmitMessage>:
 800ea68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	4689      	mov	r9, r1
 800ea70:	4690      	mov	r8, r2
 800ea72:	f001 fa3f 	bl	800fef4 <icoCobGetPointer>
 800ea76:	4605      	mov	r5, r0
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	f000 80e8 	beq.w	800ec4e <icoTransmitMessage+0x1e6>
 800ea7e:	7b83      	ldrb	r3, [r0, #14]
 800ea80:	07da      	lsls	r2, r3, #31
 800ea82:	f140 80e6 	bpl.w	800ec52 <icoTransmitMessage+0x1ea>
 800ea86:	3018      	adds	r0, #24
 800ea88:	f001 f8b0 	bl	800fbec <coTimerIsActive>
 800ea8c:	f018 0f02 	tst.w	r8, #2
 800ea90:	4682      	mov	sl, r0
 800ea92:	d009      	beq.n	800eaa8 <icoTransmitMessage+0x40>
 800ea94:	2801      	cmp	r0, #1
 800ea96:	f000 80de 	beq.w	800ec56 <icoTransmitMessage+0x1ee>
 800ea9a:	2101      	movs	r1, #1
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	f7ff fe65 	bl	800e76c <searchLastMessage>
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	f040 80d7 	bne.w	800ec56 <icoTransmitMessage+0x1ee>
 800eaa8:	4f6d      	ldr	r7, [pc, #436]	; (800ec60 <icoTransmitMessage+0x1f8>)
 800eaaa:	2100      	movs	r1, #0
 800eaac:	f018 0401 	ands.w	r4, r8, #1
 800eab0:	7039      	strb	r1, [r7, #0]
 800eab2:	d047      	beq.n	800eb44 <icoTransmitMessage+0xdc>
 800eab4:	4630      	mov	r0, r6
 800eab6:	f7ff fe59 	bl	800e76c <searchLastMessage>
 800eaba:	4604      	mov	r4, r0
 800eabc:	2800      	cmp	r0, #0
 800eabe:	f040 80cc 	bne.w	800ec5a <icoTransmitMessage+0x1f2>
 800eac2:	4b68      	ldr	r3, [pc, #416]	; (800ec64 <icoTransmitMessage+0x1fc>)
 800eac4:	221c      	movs	r2, #28
 800eac6:	469b      	mov	fp, r3
 800eac8:	fb02 3c04 	mla	ip, r2, r4, r3
 800eacc:	b2a0      	uxth	r0, r4
 800eace:	f89c 1016 	ldrb.w	r1, [ip, #22]
 800ead2:	2900      	cmp	r1, #0
 800ead4:	d15f      	bne.n	800eb96 <icoTransmitMessage+0x12e>
 800ead6:	2809      	cmp	r0, #9
 800ead8:	d102      	bne.n	800eae0 <icoTransmitMessage+0x78>
 800eada:	200a      	movs	r0, #10
 800eadc:	f7fc f9c2 	bl	800ae64 <coCommStateEvent>
 800eae0:	231c      	movs	r3, #28
 800eae2:	fb03 b404 	mla	r4, r3, r4, fp
 800eae6:	2100      	movs	r1, #0
 800eae8:	2300      	movs	r3, #0
 800eaea:	72a3      	strb	r3, [r4, #10]
 800eaec:	82a6      	strh	r6, [r4, #20]
 800eaee:	7da8      	ldrb	r0, [r5, #22]
 800eaf0:	72e0      	strb	r0, [r4, #11]
 800eaf2:	686b      	ldr	r3, [r5, #4]
 800eaf4:	6063      	str	r3, [r4, #4]
 800eaf6:	7bab      	ldrb	r3, [r5, #14]
 800eaf8:	079b      	lsls	r3, r3, #30
 800eafa:	d501      	bpl.n	800eb00 <icoTransmitMessage+0x98>
 800eafc:	2302      	movs	r3, #2
 800eafe:	72a3      	strb	r3, [r4, #10]
 800eb00:	78ab      	ldrb	r3, [r5, #2]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	bf02      	ittt	eq
 800eb06:	7aa3      	ldrbeq	r3, [r4, #10]
 800eb08:	f043 0308 	orreq.w	r3, r3, #8
 800eb0c:	72a3      	strbeq	r3, [r4, #10]
 800eb0e:	89ab      	ldrh	r3, [r5, #12]
 800eb10:	8123      	strh	r3, [r4, #8]
 800eb12:	f1b9 0f00 	cmp.w	r9, #0
 800eb16:	d007      	beq.n	800eb28 <icoTransmitMessage+0xc0>
 800eb18:	f104 020c 	add.w	r2, r4, #12
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	b280      	uxth	r0, r0
 800eb20:	fa1f fc83 	uxth.w	ip, r3
 800eb24:	4560      	cmp	r0, ip
 800eb26:	d842      	bhi.n	800ebae <icoTransmitMessage+0x146>
 800eb28:	f018 0f04 	tst.w	r8, #4
 800eb2c:	d145      	bne.n	800ebba <icoTransmitMessage+0x152>
 800eb2e:	b9f1      	cbnz	r1, 800eb6e <icoTransmitMessage+0x106>
 800eb30:	f1ba 0f01 	cmp.w	sl, #1
 800eb34:	d146      	bne.n	800ebc4 <icoTransmitMessage+0x15c>
 800eb36:	4b4c      	ldr	r3, [pc, #304]	; (800ec68 <icoTransmitMessage+0x200>)
 800eb38:	f884 a016 	strb.w	sl, [r4, #22]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	61a2      	str	r2, [r4, #24]
 800eb40:	601c      	str	r4, [r3, #0]
 800eb42:	e014      	b.n	800eb6e <icoTransmitMessage+0x106>
 800eb44:	7c2b      	ldrb	r3, [r5, #16]
 800eb46:	2b10      	cmp	r3, #16
 800eb48:	d8bb      	bhi.n	800eac2 <icoTransmitMessage+0x5a>
 800eb4a:	4948      	ldr	r1, [pc, #288]	; (800ec6c <icoTransmitMessage+0x204>)
 800eb4c:	40d9      	lsrs	r1, r3
 800eb4e:	43c9      	mvns	r1, r1
 800eb50:	f011 0101 	ands.w	r1, r1, #1
 800eb54:	d1b5      	bne.n	800eac2 <icoTransmitMessage+0x5a>
 800eb56:	4630      	mov	r0, r6
 800eb58:	f7ff fe08 	bl	800e76c <searchLastMessage>
 800eb5c:	b1c8      	cbz	r0, 800eb92 <icoTransmitMessage+0x12a>
 800eb5e:	7ac2      	ldrb	r2, [r0, #11]
 800eb60:	f100 030c 	add.w	r3, r0, #12
 800eb64:	f109 31ff 	add.w	r1, r9, #4294967295
 800eb68:	441a      	add	r2, r3
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d10b      	bne.n	800eb86 <icoTransmitMessage+0x11e>
 800eb6e:	2401      	movs	r4, #1
 800eb70:	703c      	strb	r4, [r7, #0]
 800eb72:	f7fb ff9f 	bl	800aab4 <codrvCanStartTransmission>
 800eb76:	4b3e      	ldr	r3, [pc, #248]	; (800ec70 <icoTransmitMessage+0x208>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d14e      	bne.n	800ec1c <icoTransmitMessage+0x1b4>
 800eb7e:	2000      	movs	r0, #0
 800eb80:	b003      	add	sp, #12
 800eb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb86:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb8e:	4284      	cmp	r4, r0
 800eb90:	d0eb      	beq.n	800eb6a <icoTransmitMessage+0x102>
 800eb92:	2400      	movs	r4, #0
 800eb94:	e795      	b.n	800eac2 <icoTransmitMessage+0x5a>
 800eb96:	3401      	adds	r4, #1
 800eb98:	2c0a      	cmp	r4, #10
 800eb9a:	d195      	bne.n	800eac8 <icoTransmitMessage+0x60>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	703b      	strb	r3, [r7, #0]
 800eba0:	f7fb ff88 	bl	800aab4 <codrvCanStartTransmission>
 800eba4:	200b      	movs	r0, #11
 800eba6:	f7fc f95d 	bl	800ae64 <coCommStateEvent>
 800ebaa:	203e      	movs	r0, #62	; 0x3e
 800ebac:	e7e8      	b.n	800eb80 <icoTransmitMessage+0x118>
 800ebae:	f819 c003 	ldrb.w	ip, [r9, r3]
 800ebb2:	f802 cb01 	strb.w	ip, [r2], #1
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	e7b2      	b.n	800eb20 <icoTransmitMessage+0xb8>
 800ebba:	7aa3      	ldrb	r3, [r4, #10]
 800ebbc:	f043 0310 	orr.w	r3, r3, #16
 800ebc0:	72a3      	strb	r3, [r4, #10]
 800ebc2:	e7b4      	b.n	800eb2e <icoTransmitMessage+0xc6>
 800ebc4:	2101      	movs	r1, #1
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f7ff fdd0 	bl	800e76c <searchLastMessage>
 800ebcc:	b140      	cbz	r0, 800ebe0 <icoTransmitMessage+0x178>
 800ebce:	8aab      	ldrh	r3, [r5, #20]
 800ebd0:	b133      	cbz	r3, 800ebe0 <icoTransmitMessage+0x178>
 800ebd2:	4b25      	ldr	r3, [pc, #148]	; (800ec68 <icoTransmitMessage+0x200>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	61a2      	str	r2, [r4, #24]
 800ebd8:	601c      	str	r4, [r3, #0]
 800ebda:	2301      	movs	r3, #1
 800ebdc:	75a3      	strb	r3, [r4, #22]
 800ebde:	e7c6      	b.n	800eb6e <icoTransmitMessage+0x106>
 800ebe0:	7c2b      	ldrb	r3, [r5, #16]
 800ebe2:	2b06      	cmp	r3, #6
 800ebe4:	d116      	bne.n	800ec14 <icoTransmitMessage+0x1ac>
 800ebe6:	4a23      	ldr	r2, [pc, #140]	; (800ec74 <icoTransmitMessage+0x20c>)
 800ebe8:	6813      	ldr	r3, [r2, #0]
 800ebea:	b91b      	cbnz	r3, 800ebf4 <icoTransmitMessage+0x18c>
 800ebec:	6014      	str	r4, [r2, #0]
 800ebee:	61a3      	str	r3, [r4, #24]
 800ebf0:	2302      	movs	r3, #2
 800ebf2:	e7f3      	b.n	800ebdc <icoTransmitMessage+0x174>
 800ebf4:	7d99      	ldrb	r1, [r3, #22]
 800ebf6:	2902      	cmp	r1, #2
 800ebf8:	d106      	bne.n	800ec08 <icoTransmitMessage+0x1a0>
 800ebfa:	61a3      	str	r3, [r4, #24]
 800ebfc:	6014      	str	r4, [r2, #0]
 800ebfe:	e7f7      	b.n	800ebf0 <icoTransmitMessage+0x188>
 800ec00:	7d91      	ldrb	r1, [r2, #22]
 800ec02:	2902      	cmp	r1, #2
 800ec04:	d003      	beq.n	800ec0e <icoTransmitMessage+0x1a6>
 800ec06:	4613      	mov	r3, r2
 800ec08:	699a      	ldr	r2, [r3, #24]
 800ec0a:	2a00      	cmp	r2, #0
 800ec0c:	d1f8      	bne.n	800ec00 <icoTransmitMessage+0x198>
 800ec0e:	61a2      	str	r2, [r4, #24]
 800ec10:	619c      	str	r4, [r3, #24]
 800ec12:	e7ed      	b.n	800ebf0 <icoTransmitMessage+0x188>
 800ec14:	4620      	mov	r0, r4
 800ec16:	f7ff fd6b 	bl	800e6f0 <addToTransmitList>
 800ec1a:	e7a8      	b.n	800eb6e <icoTransmitMessage+0x106>
 800ec1c:	4816      	ldr	r0, [pc, #88]	; (800ec78 <icoTransmitMessage+0x210>)
 800ec1e:	f000 ffe5 	bl	800fbec <coTimerIsActive>
 800ec22:	2801      	cmp	r0, #1
 800ec24:	d10b      	bne.n	800ec3e <icoTransmitMessage+0x1d6>
 800ec26:	4a15      	ldr	r2, [pc, #84]	; (800ec7c <icoTransmitMessage+0x214>)
 800ec28:	6813      	ldr	r3, [r2, #0]
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	6013      	str	r3, [r2, #0]
 800ec2e:	f640 4281 	movw	r2, #3201	; 0xc81
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d9a3      	bls.n	800eb7e <icoTransmitMessage+0x116>
 800ec36:	4812      	ldr	r0, [pc, #72]	; (800ec80 <icoTransmitMessage+0x218>)
 800ec38:	f7ff fd32 	bl	800e6a0 <demoTimerFct>
 800ec3c:	e79f      	b.n	800eb7e <icoTransmitMessage+0x116>
 800ec3e:	9400      	str	r4, [sp, #0]
 800ec40:	2300      	movs	r3, #0
 800ec42:	4a10      	ldr	r2, [pc, #64]	; (800ec84 <icoTransmitMessage+0x21c>)
 800ec44:	4910      	ldr	r1, [pc, #64]	; (800ec88 <icoTransmitMessage+0x220>)
 800ec46:	480c      	ldr	r0, [pc, #48]	; (800ec78 <icoTransmitMessage+0x210>)
 800ec48:	f000 ffa6 	bl	800fb98 <coTimerStart>
 800ec4c:	e797      	b.n	800eb7e <icoTransmitMessage+0x116>
 800ec4e:	200d      	movs	r0, #13
 800ec50:	e796      	b.n	800eb80 <icoTransmitMessage+0x118>
 800ec52:	2033      	movs	r0, #51	; 0x33
 800ec54:	e794      	b.n	800eb80 <icoTransmitMessage+0x118>
 800ec56:	2048      	movs	r0, #72	; 0x48
 800ec58:	e792      	b.n	800eb80 <icoTransmitMessage+0x118>
 800ec5a:	2101      	movs	r1, #1
 800ec5c:	e744      	b.n	800eae8 <icoTransmitMessage+0x80>
 800ec5e:	bf00      	nop
 800ec60:	20000018 	.word	0x20000018
 800ec64:	20008cc0 	.word	0x20008cc0
 800ec68:	20008bec 	.word	0x20008bec
 800ec6c:	00010118 	.word	0x00010118
 800ec70:	20008be4 	.word	0x20008be4
 800ec74:	20008bf4 	.word	0x20008bf4
 800ec78:	20008bcc 	.word	0x20008bcc
 800ec7c:	20008be8 	.word	0x20008be8
 800ec80:	00012735 	.word	0x00012735
 800ec84:	0800e6a1 	.word	0x0800e6a1
 800ec88:	0004e264 	.word	0x0004e264

0800ec8c <coQueueGetNextTransmitMessage>:
 800ec8c:	4b09      	ldr	r3, [pc, #36]	; (800ecb4 <coQueueGetNextTransmitMessage+0x28>)
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d10c      	bne.n	800ecae <coQueueGetNextTransmitMessage+0x22>
 800ec94:	4b08      	ldr	r3, [pc, #32]	; (800ecb8 <coQueueGetNextTransmitMessage+0x2c>)
 800ec96:	6818      	ldr	r0, [r3, #0]
 800ec98:	b900      	cbnz	r0, 800ec9c <coQueueGetNextTransmitMessage+0x10>
 800ec9a:	4770      	bx	lr
 800ec9c:	7d83      	ldrb	r3, [r0, #22]
 800ec9e:	2b02      	cmp	r3, #2
 800eca0:	d103      	bne.n	800ecaa <coQueueGetNextTransmitMessage+0x1e>
 800eca2:	2303      	movs	r3, #3
 800eca4:	7583      	strb	r3, [r0, #22]
 800eca6:	6000      	str	r0, [r0, #0]
 800eca8:	4770      	bx	lr
 800ecaa:	6980      	ldr	r0, [r0, #24]
 800ecac:	e7f4      	b.n	800ec98 <coQueueGetNextTransmitMessage+0xc>
 800ecae:	2000      	movs	r0, #0
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	20000018 	.word	0x20000018
 800ecb8:	20008bf4 	.word	0x20008bf4

0800ecbc <coQueueMsgTransmitted>:
 800ecbc:	6803      	ldr	r3, [r0, #0]
 800ecbe:	2204      	movs	r2, #4
 800ecc0:	759a      	strb	r2, [r3, #22]
 800ecc2:	4770      	bx	lr

0800ecc4 <icoQueueHandler>:
 800ecc4:	4b1d      	ldr	r3, [pc, #116]	; (800ed3c <icoQueueHandler+0x78>)
 800ecc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecc8:	781a      	ldrb	r2, [r3, #0]
 800ecca:	2a01      	cmp	r2, #1
 800eccc:	d104      	bne.n	800ecd8 <icoQueueHandler+0x14>
 800ecce:	2200      	movs	r2, #0
 800ecd0:	2008      	movs	r0, #8
 800ecd2:	701a      	strb	r2, [r3, #0]
 800ecd4:	f7fc f8c6 	bl	800ae64 <coCommStateEvent>
 800ecd8:	4c19      	ldr	r4, [pc, #100]	; (800ed40 <icoQueueHandler+0x7c>)
 800ecda:	6823      	ldr	r3, [r4, #0]
 800ecdc:	b363      	cbz	r3, 800ed38 <icoQueueHandler+0x74>
 800ecde:	4f19      	ldr	r7, [pc, #100]	; (800ed44 <icoQueueHandler+0x80>)
 800ece0:	2664      	movs	r6, #100	; 0x64
 800ece2:	2500      	movs	r5, #0
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	7d9a      	ldrb	r2, [r3, #22]
 800ece8:	2a04      	cmp	r2, #4
 800ecea:	d112      	bne.n	800ed12 <icoQueueHandler+0x4e>
 800ecec:	8a98      	ldrh	r0, [r3, #20]
 800ecee:	f001 f901 	bl	800fef4 <icoCobGetPointer>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	b138      	cbz	r0, 800ed06 <icoQueueHandler+0x42>
 800ecf6:	8a81      	ldrh	r1, [r0, #20]
 800ecf8:	b129      	cbz	r1, 800ed06 <icoQueueHandler+0x42>
 800ecfa:	9500      	str	r5, [sp, #0]
 800ecfc:	463a      	mov	r2, r7
 800ecfe:	4371      	muls	r1, r6
 800ed00:	3018      	adds	r0, #24
 800ed02:	f000 ff49 	bl	800fb98 <coTimerStart>
 800ed06:	6823      	ldr	r3, [r4, #0]
 800ed08:	759d      	strb	r5, [r3, #22]
 800ed0a:	699b      	ldr	r3, [r3, #24]
 800ed0c:	6023      	str	r3, [r4, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1e8      	bne.n	800ece4 <icoQueueHandler+0x20>
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	b943      	cbnz	r3, 800ed28 <icoQueueHandler+0x64>
 800ed16:	4b0c      	ldr	r3, [pc, #48]	; (800ed48 <icoQueueHandler+0x84>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	b96b      	cbnz	r3, 800ed38 <icoQueueHandler+0x74>
 800ed1c:	200c      	movs	r0, #12
 800ed1e:	b003      	add	sp, #12
 800ed20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ed24:	f7fc b89e 	b.w	800ae64 <coCommStateEvent>
 800ed28:	7d9b      	ldrb	r3, [r3, #22]
 800ed2a:	2b02      	cmp	r3, #2
 800ed2c:	d104      	bne.n	800ed38 <icoQueueHandler+0x74>
 800ed2e:	b003      	add	sp, #12
 800ed30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ed34:	f7fb bebe 	b.w	800aab4 <codrvCanStartTransmission>
 800ed38:	b003      	add	sp, #12
 800ed3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed3c:	20008c10 	.word	0x20008c10
 800ed40:	20008bf4 	.word	0x20008bf4
 800ed44:	0800e769 	.word	0x0800e769
 800ed48:	20008bec 	.word	0x20008bec

0800ed4c <icoQueueDeleteInhibit>:
 800ed4c:	b510      	push	{r4, lr}
 800ed4e:	f001 f8d1 	bl	800fef4 <icoCobGetPointer>
 800ed52:	4604      	mov	r4, r0
 800ed54:	b120      	cbz	r0, 800ed60 <icoQueueDeleteInhibit+0x14>
 800ed56:	4620      	mov	r0, r4
 800ed58:	f7ff fcdc 	bl	800e714 <moveInhibitToTransmitList>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	d1fa      	bne.n	800ed56 <icoQueueDeleteInhibit+0xa>
 800ed60:	bd10      	pop	{r4, pc}
	...

0800ed64 <coQueueInit>:
 800ed64:	2200      	movs	r2, #0
 800ed66:	480b      	ldr	r0, [pc, #44]	; (800ed94 <coQueueInit+0x30>)
 800ed68:	4613      	mov	r3, r2
 800ed6a:	1881      	adds	r1, r0, r2
 800ed6c:	321c      	adds	r2, #28
 800ed6e:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 800ed72:	758b      	strb	r3, [r1, #22]
 800ed74:	d1f9      	bne.n	800ed6a <coQueueInit+0x6>
 800ed76:	4a08      	ldr	r2, [pc, #32]	; (800ed98 <coQueueInit+0x34>)
 800ed78:	2101      	movs	r1, #1
 800ed7a:	7011      	strb	r1, [r2, #0]
 800ed7c:	4a07      	ldr	r2, [pc, #28]	; (800ed9c <coQueueInit+0x38>)
 800ed7e:	6013      	str	r3, [r2, #0]
 800ed80:	4a07      	ldr	r2, [pc, #28]	; (800eda0 <coQueueInit+0x3c>)
 800ed82:	6013      	str	r3, [r2, #0]
 800ed84:	4a07      	ldr	r2, [pc, #28]	; (800eda4 <coQueueInit+0x40>)
 800ed86:	8013      	strh	r3, [r2, #0]
 800ed88:	4a07      	ldr	r2, [pc, #28]	; (800eda8 <coQueueInit+0x44>)
 800ed8a:	8013      	strh	r3, [r2, #0]
 800ed8c:	4a07      	ldr	r2, [pc, #28]	; (800edac <coQueueInit+0x48>)
 800ed8e:	7013      	strb	r3, [r2, #0]
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	20008cc0 	.word	0x20008cc0
 800ed98:	20000018 	.word	0x20000018
 800ed9c:	20008bec 	.word	0x20008bec
 800eda0:	20008bf4 	.word	0x20008bf4
 800eda4:	20008cb6 	.word	0x20008cb6
 800eda8:	20008cb2 	.word	0x20008cb2
 800edac:	20008c10 	.word	0x20008c10

0800edb0 <icoQueueSetSyncId>:
 800edb0:	2a01      	cmp	r2, #1
 800edb2:	4b06      	ldr	r3, [pc, #24]	; (800edcc <icoQueueSetSyncId+0x1c>)
 800edb4:	bf17      	itett	ne
 800edb6:	f04f 32ff 	movne.w	r2, #4294967295
 800edba:	f001 010a 	andeq.w	r1, r1, #10
 800edbe:	601a      	strne	r2, [r3, #0]
 800edc0:	2200      	movne	r2, #0
 800edc2:	bf06      	itte	eq
 800edc4:	6018      	streq	r0, [r3, #0]
 800edc6:	7199      	strbeq	r1, [r3, #6]
 800edc8:	715a      	strbne	r2, [r3, #5]
 800edca:	4770      	bx	lr
 800edcc:	20008cb8 	.word	0x20008cb8

0800edd0 <icoQueueVarInit>:
 800edd0:	8803      	ldrh	r3, [r0, #0]
 800edd2:	4a0f      	ldr	r2, [pc, #60]	; (800ee10 <icoQueueVarInit+0x40>)
 800edd4:	490f      	ldr	r1, [pc, #60]	; (800ee14 <icoQueueVarInit+0x44>)
 800edd6:	011b      	lsls	r3, r3, #4
 800edd8:	8013      	strh	r3, [r2, #0]
 800edda:	4b0f      	ldr	r3, [pc, #60]	; (800ee18 <icoQueueVarInit+0x48>)
 800eddc:	4a0f      	ldr	r2, [pc, #60]	; (800ee1c <icoQueueVarInit+0x4c>)
 800edde:	601a      	str	r2, [r3, #0]
 800ede0:	4a0f      	ldr	r2, [pc, #60]	; (800ee20 <icoQueueVarInit+0x50>)
 800ede2:	2300      	movs	r3, #0
 800ede4:	8013      	strh	r3, [r2, #0]
 800ede6:	4a0f      	ldr	r2, [pc, #60]	; (800ee24 <icoQueueVarInit+0x54>)
 800ede8:	8013      	strh	r3, [r2, #0]
 800edea:	2201      	movs	r2, #1
 800edec:	700a      	strb	r2, [r1, #0]
 800edee:	490e      	ldr	r1, [pc, #56]	; (800ee28 <icoQueueVarInit+0x58>)
 800edf0:	600b      	str	r3, [r1, #0]
 800edf2:	490e      	ldr	r1, [pc, #56]	; (800ee2c <icoQueueVarInit+0x5c>)
 800edf4:	600b      	str	r3, [r1, #0]
 800edf6:	490e      	ldr	r1, [pc, #56]	; (800ee30 <icoQueueVarInit+0x60>)
 800edf8:	700b      	strb	r3, [r1, #0]
 800edfa:	490e      	ldr	r1, [pc, #56]	; (800ee34 <icoQueueVarInit+0x64>)
 800edfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ee00:	6008      	str	r0, [r1, #0]
 800ee02:	714b      	strb	r3, [r1, #5]
 800ee04:	490c      	ldr	r1, [pc, #48]	; (800ee38 <icoQueueVarInit+0x68>)
 800ee06:	600b      	str	r3, [r1, #0]
 800ee08:	4b0c      	ldr	r3, [pc, #48]	; (800ee3c <icoQueueVarInit+0x6c>)
 800ee0a:	601a      	str	r2, [r3, #0]
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop
 800ee10:	20008cb4 	.word	0x20008cb4
 800ee14:	20000018 	.word	0x20000018
 800ee18:	20008bf0 	.word	0x20008bf0
 800ee1c:	20008c11 	.word	0x20008c11
 800ee20:	20008cb6 	.word	0x20008cb6
 800ee24:	20008cb2 	.word	0x20008cb2
 800ee28:	20008bec 	.word	0x20008bec
 800ee2c:	20008bf4 	.word	0x20008bf4
 800ee30:	20008c10 	.word	0x20008c10
 800ee34:	20008cb8 	.word	0x20008cb8
 800ee38:	20008be8 	.word	0x20008be8
 800ee3c:	20008be4 	.word	0x20008be4

0800ee40 <searchSdoServerIndex>:
 800ee40:	4b07      	ldr	r3, [pc, #28]	; (800ee60 <searchSdoServerIndex+0x20>)
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	b143      	cbz	r3, 800ee58 <searchSdoServerIndex+0x18>
 800ee46:	4b07      	ldr	r3, [pc, #28]	; (800ee64 <searchSdoServerIndex+0x24>)
 800ee48:	7e9a      	ldrb	r2, [r3, #26]
 800ee4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee4e:	4282      	cmp	r2, r0
 800ee50:	bf14      	ite	ne
 800ee52:	4618      	movne	r0, r3
 800ee54:	2000      	moveq	r0, #0
 800ee56:	4770      	bx	lr
 800ee58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	20008e01 	.word	0x20008e01
 800ee64:	20008dd8 	.word	0x20008dd8

0800ee68 <sdoServerWriteIndCont>:
 800ee68:	b513      	push	{r0, r1, r4, lr}
 800ee6a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800ee6e:	7ec2      	ldrb	r2, [r0, #27]
 800ee70:	8a81      	ldrh	r1, [r0, #20]
 800ee72:	4604      	mov	r4, r0
 800ee74:	6800      	ldr	r0, [r0, #0]
 800ee76:	f7fe f881 	bl	800cf7c <icoEventObjectChanged>
 800ee7a:	b9c0      	cbnz	r0, 800eeae <sdoServerWriteIndCont+0x46>
 800ee7c:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800ee80:	2a0e      	cmp	r2, #14
 800ee82:	d116      	bne.n	800eeb2 <sdoServerWriteIndCont+0x4a>
 800ee84:	2260      	movs	r2, #96	; 0x60
 800ee86:	f88d 2000 	strb.w	r2, [sp]
 800ee8a:	8aa2      	ldrh	r2, [r4, #20]
 800ee8c:	f88d 2001 	strb.w	r2, [sp, #1]
 800ee90:	0a12      	lsrs	r2, r2, #8
 800ee92:	f88d 2002 	strb.w	r2, [sp, #2]
 800ee96:	7ee2      	ldrb	r2, [r4, #27]
 800ee98:	f88d 2003 	strb.w	r2, [sp, #3]
 800ee9c:	9001      	str	r0, [sp, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	4669      	mov	r1, sp
 800eea2:	8be0      	ldrh	r0, [r4, #30]
 800eea4:	f7ff fde0 	bl	800ea68 <icoTransmitMessage>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800eeae:	b002      	add	sp, #8
 800eeb0:	bd10      	pop	{r4, pc}
 800eeb2:	7f62      	ldrb	r2, [r4, #29]
 800eeb4:	f8cd 0001 	str.w	r0, [sp, #1]
 800eeb8:	2a00      	cmp	r2, #0
 800eeba:	bf14      	ite	ne
 800eebc:	2220      	movne	r2, #32
 800eebe:	2230      	moveq	r2, #48	; 0x30
 800eec0:	f88d 2000 	strb.w	r2, [sp]
 800eec4:	9001      	str	r0, [sp, #4]
 800eec6:	e7ea      	b.n	800ee9e <sdoServerWriteIndCont+0x36>

0800eec8 <icoSdoDeCodeMultiplexer>:
 800eec8:	8803      	ldrh	r3, [r0, #0]
 800eeca:	828b      	strh	r3, [r1, #20]
 800eecc:	7883      	ldrb	r3, [r0, #2]
 800eece:	76cb      	strb	r3, [r1, #27]
 800eed0:	4770      	bx	lr
	...

0800eed4 <icoSdoServerAbort>:
 800eed4:	b530      	push	{r4, r5, lr}
 800eed6:	b087      	sub	sp, #28
 800eed8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eedc:	2a01      	cmp	r2, #1
 800eede:	4604      	mov	r4, r0
 800eee0:	9303      	str	r3, [sp, #12]
 800eee2:	d023      	beq.n	800ef2c <icoSdoServerAbort+0x58>
 800eee4:	4a16      	ldr	r2, [pc, #88]	; (800ef40 <icoSdoServerAbort+0x6c>)
 800eee6:	2300      	movs	r3, #0
 800eee8:	f812 5033 	ldrb.w	r5, [r2, r3, lsl #3]
 800eeec:	428d      	cmp	r5, r1
 800eeee:	ea4f 00c3 	mov.w	r0, r3, lsl #3
 800eef2:	d120      	bne.n	800ef36 <icoSdoServerAbort+0x62>
 800eef4:	4402      	add	r2, r0
 800eef6:	6853      	ldr	r3, [r2, #4]
 800eef8:	9303      	str	r3, [sp, #12]
 800eefa:	2380      	movs	r3, #128	; 0x80
 800eefc:	f88d 3010 	strb.w	r3, [sp, #16]
 800ef00:	8aa3      	ldrh	r3, [r4, #20]
 800ef02:	f88d 3011 	strb.w	r3, [sp, #17]
 800ef06:	0a1b      	lsrs	r3, r3, #8
 800ef08:	f88d 3012 	strb.w	r3, [sp, #18]
 800ef0c:	7ee3      	ldrb	r3, [r4, #27]
 800ef0e:	f88d 3013 	strb.w	r3, [sp, #19]
 800ef12:	2500      	movs	r5, #0
 800ef14:	2304      	movs	r3, #4
 800ef16:	461a      	mov	r2, r3
 800ef18:	a903      	add	r1, sp, #12
 800ef1a:	a805      	add	r0, sp, #20
 800ef1c:	9500      	str	r5, [sp, #0]
 800ef1e:	f7fd fcbb 	bl	800c898 <coNumMemcpyUnpack>
 800ef22:	462a      	mov	r2, r5
 800ef24:	a904      	add	r1, sp, #16
 800ef26:	8be0      	ldrh	r0, [r4, #30]
 800ef28:	f7ff fd9e 	bl	800ea68 <icoTransmitMessage>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800ef32:	b007      	add	sp, #28
 800ef34:	bd30      	pop	{r4, r5, pc}
 800ef36:	3301      	adds	r3, #1
 800ef38:	2b1a      	cmp	r3, #26
 800ef3a:	d1d5      	bne.n	800eee8 <icoSdoServerAbort+0x14>
 800ef3c:	e7dd      	b.n	800eefa <icoSdoServerAbort+0x26>
 800ef3e:	bf00      	nop
 800ef40:	08013394 	.word	0x08013394

0800ef44 <coEventRegister_SDO_SERVER_READ>:
 800ef44:	4a05      	ldr	r2, [pc, #20]	; (800ef5c <coEventRegister_SDO_SERVER_READ+0x18>)
 800ef46:	7813      	ldrb	r3, [r2, #0]
 800ef48:	b92b      	cbnz	r3, 800ef56 <coEventRegister_SDO_SERVER_READ+0x12>
 800ef4a:	4905      	ldr	r1, [pc, #20]	; (800ef60 <coEventRegister_SDO_SERVER_READ+0x1c>)
 800ef4c:	6008      	str	r0, [r1, #0]
 800ef4e:	2101      	movs	r1, #1
 800ef50:	7011      	strb	r1, [r2, #0]
 800ef52:	4618      	mov	r0, r3
 800ef54:	4770      	bx	lr
 800ef56:	200d      	movs	r0, #13
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	20008e08 	.word	0x20008e08
 800ef60:	20008e04 	.word	0x20008e04

0800ef64 <coEventRegister_SDO_SERVER_CHECK_WRITE>:
 800ef64:	4a05      	ldr	r2, [pc, #20]	; (800ef7c <coEventRegister_SDO_SERVER_CHECK_WRITE+0x18>)
 800ef66:	7813      	ldrb	r3, [r2, #0]
 800ef68:	b92b      	cbnz	r3, 800ef76 <coEventRegister_SDO_SERVER_CHECK_WRITE+0x12>
 800ef6a:	4905      	ldr	r1, [pc, #20]	; (800ef80 <coEventRegister_SDO_SERVER_CHECK_WRITE+0x1c>)
 800ef6c:	6008      	str	r0, [r1, #0]
 800ef6e:	2101      	movs	r1, #1
 800ef70:	7011      	strb	r1, [r2, #0]
 800ef72:	4618      	mov	r0, r3
 800ef74:	4770      	bx	lr
 800ef76:	200d      	movs	r0, #13
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	20008e00 	.word	0x20008e00
 800ef80:	20008dfc 	.word	0x20008dfc

0800ef84 <coEventRegister_SDO_SERVER_WRITE>:
 800ef84:	4a05      	ldr	r2, [pc, #20]	; (800ef9c <coEventRegister_SDO_SERVER_WRITE+0x18>)
 800ef86:	7813      	ldrb	r3, [r2, #0]
 800ef88:	b92b      	cbnz	r3, 800ef96 <coEventRegister_SDO_SERVER_WRITE+0x12>
 800ef8a:	4905      	ldr	r1, [pc, #20]	; (800efa0 <coEventRegister_SDO_SERVER_WRITE+0x1c>)
 800ef8c:	6008      	str	r0, [r1, #0]
 800ef8e:	2101      	movs	r1, #1
 800ef90:	7011      	strb	r1, [r2, #0]
 800ef92:	4618      	mov	r0, r3
 800ef94:	4770      	bx	lr
 800ef96:	200d      	movs	r0, #13
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	20008e10 	.word	0x20008e10
 800efa0:	20008e0c 	.word	0x20008e0c

0800efa4 <icoSdoCheckUserReadInd>:
 800efa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa8:	4b16      	ldr	r3, [pc, #88]	; (800f004 <icoSdoCheckUserReadInd+0x60>)
 800efaa:	4c17      	ldr	r4, [pc, #92]	; (800f008 <icoSdoCheckUserReadInd+0x64>)
 800efac:	781f      	ldrb	r7, [r3, #0]
 800efae:	4683      	mov	fp, r0
 800efb0:	4688      	mov	r8, r1
 800efb2:	4691      	mov	r9, r2
 800efb4:	2500      	movs	r5, #0
 800efb6:	469a      	mov	sl, r3
 800efb8:	b94f      	cbnz	r7, 800efce <icoSdoCheckUserReadInd+0x2a>
 800efba:	f89a 4000 	ldrb.w	r4, [sl]
 800efbe:	4f12      	ldr	r7, [pc, #72]	; (800f008 <icoSdoCheckUserReadInd+0x64>)
 800efc0:	b9ac      	cbnz	r4, 800efee <icoSdoCheckUserReadInd+0x4a>
 800efc2:	2d00      	cmp	r5, #0
 800efc4:	bf14      	ite	ne
 800efc6:	2029      	movne	r0, #41	; 0x29
 800efc8:	2000      	moveq	r0, #0
 800efca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efce:	3f01      	subs	r7, #1
 800efd0:	b2ff      	uxtb	r7, r7
 800efd2:	464b      	mov	r3, r9
 800efd4:	4642      	mov	r2, r8
 800efd6:	4659      	mov	r1, fp
 800efd8:	2000      	movs	r0, #0
 800efda:	f854 6027 	ldr.w	r6, [r4, r7, lsl #2]
 800efde:	47b0      	blx	r6
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d0e9      	beq.n	800efb8 <icoSdoCheckUserReadInd+0x14>
 800efe4:	2829      	cmp	r0, #41	; 0x29
 800efe6:	d1f0      	bne.n	800efca <icoSdoCheckUserReadInd+0x26>
 800efe8:	3501      	adds	r5, #1
 800efea:	b2ed      	uxtb	r5, r5
 800efec:	e7e4      	b.n	800efb8 <icoSdoCheckUserReadInd+0x14>
 800efee:	3c01      	subs	r4, #1
 800eff0:	b2e4      	uxtb	r4, r4
 800eff2:	464b      	mov	r3, r9
 800eff4:	4642      	mov	r2, r8
 800eff6:	4659      	mov	r1, fp
 800eff8:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 800effc:	2001      	movs	r0, #1
 800effe:	47b0      	blx	r6
 800f000:	e7de      	b.n	800efc0 <icoSdoCheckUserReadInd+0x1c>
 800f002:	bf00      	nop
 800f004:	20008e08 	.word	0x20008e08
 800f008:	20008e04 	.word	0x20008e04

0800f00c <icoSdoCheckUserCheckWriteInd>:
 800f00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f010:	4699      	mov	r9, r3
 800f012:	4b15      	ldr	r3, [pc, #84]	; (800f068 <icoSdoCheckUserCheckWriteInd+0x5c>)
 800f014:	4c15      	ldr	r4, [pc, #84]	; (800f06c <icoSdoCheckUserCheckWriteInd+0x60>)
 800f016:	781d      	ldrb	r5, [r3, #0]
 800f018:	4683      	mov	fp, r0
 800f01a:	460f      	mov	r7, r1
 800f01c:	4690      	mov	r8, r2
 800f01e:	469a      	mov	sl, r3
 800f020:	b91d      	cbnz	r5, 800f02a <icoSdoCheckUserCheckWriteInd+0x1e>
 800f022:	f89a 4000 	ldrb.w	r4, [sl]
 800f026:	4d11      	ldr	r5, [pc, #68]	; (800f06c <icoSdoCheckUserCheckWriteInd+0x60>)
 800f028:	e01a      	b.n	800f060 <icoSdoCheckUserCheckWriteInd+0x54>
 800f02a:	3d01      	subs	r5, #1
 800f02c:	b2ed      	uxtb	r5, r5
 800f02e:	f8cd 9000 	str.w	r9, [sp]
 800f032:	4643      	mov	r3, r8
 800f034:	463a      	mov	r2, r7
 800f036:	4659      	mov	r1, fp
 800f038:	2000      	movs	r0, #0
 800f03a:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 800f03e:	47b0      	blx	r6
 800f040:	2800      	cmp	r0, #0
 800f042:	d0ed      	beq.n	800f020 <icoSdoCheckUserCheckWriteInd+0x14>
 800f044:	b003      	add	sp, #12
 800f046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04a:	3c01      	subs	r4, #1
 800f04c:	b2e4      	uxtb	r4, r4
 800f04e:	f8cd 9000 	str.w	r9, [sp]
 800f052:	4643      	mov	r3, r8
 800f054:	463a      	mov	r2, r7
 800f056:	4659      	mov	r1, fp
 800f058:	2001      	movs	r0, #1
 800f05a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 800f05e:	47b0      	blx	r6
 800f060:	2c00      	cmp	r4, #0
 800f062:	d1f2      	bne.n	800f04a <icoSdoCheckUserCheckWriteInd+0x3e>
 800f064:	4620      	mov	r0, r4
 800f066:	e7ed      	b.n	800f044 <icoSdoCheckUserCheckWriteInd+0x38>
 800f068:	20008e00 	.word	0x20008e00
 800f06c:	20008dfc 	.word	0x20008dfc

0800f070 <icoSdoCheckUserWriteInd>:
 800f070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f074:	4f1a      	ldr	r7, [pc, #104]	; (800f0e0 <icoSdoCheckUserWriteInd+0x70>)
 800f076:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800f0e4 <icoSdoCheckUserWriteInd+0x74>
 800f07a:	783e      	ldrb	r6, [r7, #0]
 800f07c:	f04f 0a00 	mov.w	sl, #0
 800f080:	4680      	mov	r8, r0
 800f082:	4654      	mov	r4, sl
 800f084:	b94e      	cbnz	r6, 800f09a <icoSdoCheckUserWriteInd+0x2a>
 800f086:	783e      	ldrb	r6, [r7, #0]
 800f088:	4f16      	ldr	r7, [pc, #88]	; (800f0e4 <icoSdoCheckUserWriteInd+0x74>)
 800f08a:	b9e6      	cbnz	r6, 800f0c6 <icoSdoCheckUserWriteInd+0x56>
 800f08c:	f1ba 0f00 	cmp.w	sl, #0
 800f090:	bf18      	it	ne
 800f092:	2429      	movne	r4, #41	; 0x29
 800f094:	4620      	mov	r0, r4
 800f096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f09a:	3e01      	subs	r6, #1
 800f09c:	b2f6      	uxtb	r6, r6
 800f09e:	f898 301b 	ldrb.w	r3, [r8, #27]
 800f0a2:	f859 4026 	ldr.w	r4, [r9, r6, lsl #2]
 800f0a6:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800f0aa:	f898 101a 	ldrb.w	r1, [r8, #26]
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	47a0      	blx	r4
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d0e5      	beq.n	800f084 <icoSdoCheckUserWriteInd+0x14>
 800f0b8:	2829      	cmp	r0, #41	; 0x29
 800f0ba:	d1eb      	bne.n	800f094 <icoSdoCheckUserWriteInd+0x24>
 800f0bc:	f10a 0501 	add.w	r5, sl, #1
 800f0c0:	fa5f fa85 	uxtb.w	sl, r5
 800f0c4:	e7de      	b.n	800f084 <icoSdoCheckUserWriteInd+0x14>
 800f0c6:	3e01      	subs	r6, #1
 800f0c8:	b2f6      	uxtb	r6, r6
 800f0ca:	f898 301b 	ldrb.w	r3, [r8, #27]
 800f0ce:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800f0d2:	f898 101a 	ldrb.w	r1, [r8, #26]
 800f0d6:	f857 5026 	ldr.w	r5, [r7, r6, lsl #2]
 800f0da:	2001      	movs	r0, #1
 800f0dc:	47a8      	blx	r5
 800f0de:	e7d4      	b.n	800f08a <icoSdoCheckUserWriteInd+0x1a>
 800f0e0:	20008e10 	.word	0x20008e10
 800f0e4:	20008e0c 	.word	0x20008e0c

0800f0e8 <icoSdoServerHandler>:
 800f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	b08b      	sub	sp, #44	; 0x2c
 800f0ee:	4680      	mov	r8, r0
 800f0f0:	f7fd f96c 	bl	800c3cc <coNmtGetState>
 800f0f4:	287f      	cmp	r0, #127	; 0x7f
 800f0f6:	d002      	beq.n	800f0fe <icoSdoServerHandler+0x16>
 800f0f8:	2805      	cmp	r0, #5
 800f0fa:	f040 80f4 	bne.w	800f2e6 <icoSdoServerHandler+0x1fe>
 800f0fe:	4bcc      	ldr	r3, [pc, #816]	; (800f430 <icoSdoServerHandler+0x348>)
 800f100:	f8b8 9002 	ldrh.w	r9, [r8, #2]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	454b      	cmp	r3, r9
 800f108:	f240 80ed 	bls.w	800f2e6 <icoSdoServerHandler+0x1fe>
 800f10c:	f898 3009 	ldrb.w	r3, [r8, #9]
 800f110:	2b08      	cmp	r3, #8
 800f112:	f040 80e8 	bne.w	800f2e6 <icoSdoServerHandler+0x1fe>
 800f116:	f898 100a 	ldrb.w	r1, [r8, #10]
 800f11a:	f8df a318 	ldr.w	sl, [pc, #792]	; 800f434 <icoSdoServerHandler+0x34c>
 800f11e:	2424      	movs	r4, #36	; 0x24
 800f120:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 800f124:	fb04 f709 	mul.w	r7, r4, r9
 800f128:	2b40      	cmp	r3, #64	; 0x40
 800f12a:	eb0a 0507 	add.w	r5, sl, r7
 800f12e:	4656      	mov	r6, sl
 800f130:	f000 8182 	beq.w	800f438 <icoSdoServerHandler+0x350>
 800f134:	d80a      	bhi.n	800f14c <icoSdoServerHandler+0x64>
 800f136:	2b00      	cmp	r3, #0
 800f138:	f000 8111 	beq.w	800f35e <icoSdoServerHandler+0x276>
 800f13c:	2b20      	cmp	r3, #32
 800f13e:	d00e      	beq.n	800f15e <icoSdoServerHandler+0x76>
 800f140:	4629      	mov	r1, r5
 800f142:	f108 000b 	add.w	r0, r8, #11
 800f146:	f7ff febf 	bl	800eec8 <icoSdoDeCodeMultiplexer>
 800f14a:	e03b      	b.n	800f1c4 <icoSdoServerHandler+0xdc>
 800f14c:	2b60      	cmp	r3, #96	; 0x60
 800f14e:	f000 81d8 	beq.w	800f502 <icoSdoServerHandler+0x41a>
 800f152:	2b80      	cmp	r3, #128	; 0x80
 800f154:	d1f4      	bne.n	800f140 <icoSdoServerHandler+0x58>
 800f156:	2300      	movs	r3, #0
 800f158:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800f15c:	e0c3      	b.n	800f2e6 <icoSdoServerHandler+0x1fe>
 800f15e:	2300      	movs	r3, #0
 800f160:	9307      	str	r3, [sp, #28]
 800f162:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800f166:	b10b      	cbz	r3, 800f16c <icoSdoServerHandler+0x84>
 800f168:	245c      	movs	r4, #92	; 0x5c
 800f16a:	e018      	b.n	800f19e <icoSdoServerHandler+0xb6>
 800f16c:	4629      	mov	r1, r5
 800f16e:	f108 000b 	add.w	r0, r8, #11
 800f172:	f7ff fea9 	bl	800eec8 <icoSdoDeCodeMultiplexer>
 800f176:	462a      	mov	r2, r5
 800f178:	7ee9      	ldrb	r1, [r5, #27]
 800f17a:	8aa8      	ldrh	r0, [r5, #20]
 800f17c:	f7fd fd56 	bl	800cc2c <coOdGetObjDescPtr>
 800f180:	4604      	mov	r4, r0
 800f182:	b960      	cbnz	r0, 800f19e <icoSdoServerHandler+0xb6>
 800f184:	f85a 0007 	ldr.w	r0, [sl, r7]
 800f188:	f7fd fcea 	bl	800cb60 <coOdGetObjMaxSize>
 800f18c:	60e8      	str	r0, [r5, #12]
 800f18e:	f85a 0007 	ldr.w	r0, [sl, r7]
 800f192:	f7fd fb93 	bl	800c8bc <coOdGetObjAttribute>
 800f196:	0782      	lsls	r2, r0, #30
 800f198:	4604      	mov	r4, r0
 800f19a:	d406      	bmi.n	800f1aa <icoSdoServerHandler+0xc2>
 800f19c:	2418      	movs	r4, #24
 800f19e:	2200      	movs	r2, #0
 800f1a0:	4621      	mov	r1, r4
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	f7ff fe96 	bl	800eed4 <icoSdoServerAbort>
 800f1a8:	e09d      	b.n	800f2e6 <icoSdoServerHandler+0x1fe>
 800f1aa:	f898 300a 	ldrb.w	r3, [r8, #10]
 800f1ae:	f003 0b03 	and.w	fp, r3, #3
 800f1b2:	f1bb 0f02 	cmp.w	fp, #2
 800f1b6:	d022      	beq.n	800f1fe <icoSdoServerHandler+0x116>
 800f1b8:	f1bb 0f03 	cmp.w	fp, #3
 800f1bc:	d017      	beq.n	800f1ee <icoSdoServerHandler+0x106>
 800f1be:	f1bb 0f01 	cmp.w	fp, #1
 800f1c2:	d001      	beq.n	800f1c8 <icoSdoServerHandler+0xe0>
 800f1c4:	241e      	movs	r4, #30
 800f1c6:	e7ea      	b.n	800f19e <icoSdoServerHandler+0xb6>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	9300      	str	r3, [sp, #0]
 800f1cc:	2304      	movs	r3, #4
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	f108 010e 	add.w	r1, r8, #14
 800f1d4:	a807      	add	r0, sp, #28
 800f1d6:	f7fd fb4f 	bl	800c878 <coNumMemcpyPack>
 800f1da:	2324      	movs	r3, #36	; 0x24
 800f1dc:	fb03 6309 	mla	r3, r3, r9, r6
 800f1e0:	68da      	ldr	r2, [r3, #12]
 800f1e2:	9b07      	ldr	r3, [sp, #28]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d011      	beq.n	800f20c <icoSdoServerHandler+0x124>
 800f1e8:	d20e      	bcs.n	800f208 <icoSdoServerHandler+0x120>
 800f1ea:	241f      	movs	r4, #31
 800f1ec:	e7d7      	b.n	800f19e <icoSdoServerHandler+0xb6>
 800f1ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f1f2:	f1c3 0304 	rsb	r3, r3, #4
 800f1f6:	9307      	str	r3, [sp, #28]
 800f1f8:	f04f 0b00 	mov.w	fp, #0
 800f1fc:	e7ed      	b.n	800f1da <icoSdoServerHandler+0xf2>
 800f1fe:	2324      	movs	r3, #36	; 0x24
 800f200:	fb03 a309 	mla	r3, r3, r9, sl
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	e7f6      	b.n	800f1f6 <icoSdoServerHandler+0x10e>
 800f208:	0763      	lsls	r3, r4, #29
 800f20a:	d4ee      	bmi.n	800f1ea <icoSdoServerHandler+0x102>
 800f20c:	2324      	movs	r3, #36	; 0x24
 800f20e:	fb03 f309 	mul.w	r3, r3, r9
 800f212:	f108 080e 	add.w	r8, r8, #14
 800f216:	4641      	mov	r1, r8
 800f218:	58f0      	ldr	r0, [r6, r3]
 800f21a:	9305      	str	r3, [sp, #20]
 800f21c:	eb06 0a03 	add.w	sl, r6, r3
 800f220:	f7fd fb4e 	bl	800c8c0 <icoOdCheckObjLimits>
 800f224:	4604      	mov	r4, r0
 800f226:	2800      	cmp	r0, #0
 800f228:	d1b9      	bne.n	800f19e <icoSdoServerHandler+0xb6>
 800f22a:	4643      	mov	r3, r8
 800f22c:	f89a 201b 	ldrb.w	r2, [sl, #27]
 800f230:	f8ba 1014 	ldrh.w	r1, [sl, #20]
 800f234:	f89a 001a 	ldrb.w	r0, [sl, #26]
 800f238:	f7ff fee8 	bl	800f00c <icoSdoCheckUserCheckWriteInd>
 800f23c:	4604      	mov	r4, r0
 800f23e:	2800      	cmp	r0, #0
 800f240:	d1ad      	bne.n	800f19e <icoSdoServerHandler+0xb6>
 800f242:	f89a 101b 	ldrb.w	r1, [sl, #27]
 800f246:	f1bb 0f00 	cmp.w	fp, #0
 800f24a:	d01e      	beq.n	800f28a <icoSdoServerHandler+0x1a2>
 800f24c:	2260      	movs	r2, #96	; 0x60
 800f24e:	f88d 2020 	strb.w	r2, [sp, #32]
 800f252:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 800f256:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 800f25a:	0a12      	lsrs	r2, r2, #8
 800f25c:	9005      	str	r0, [sp, #20]
 800f25e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 800f262:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 800f266:	9009      	str	r0, [sp, #36]	; 0x24
 800f268:	4602      	mov	r2, r0
 800f26a:	a908      	add	r1, sp, #32
 800f26c:	f8ba 001e 	ldrh.w	r0, [sl, #30]
 800f270:	f7ff fbfa 	bl	800ea68 <icoTransmitMessage>
 800f274:	9b05      	ldr	r3, [sp, #20]
 800f276:	f8ca 3010 	str.w	r3, [sl, #16]
 800f27a:	f88a 301d 	strb.w	r3, [sl, #29]
 800f27e:	2302      	movs	r3, #2
 800f280:	4604      	mov	r4, r0
 800f282:	f88a 3022 	strb.w	r3, [sl, #34]	; 0x22
 800f286:	b374      	cbz	r4, 800f2e6 <icoSdoServerHandler+0x1fe>
 800f288:	e789      	b.n	800f19e <icoSdoServerHandler+0xb6>
 800f28a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f28e:	2b04      	cmp	r3, #4
 800f290:	d92c      	bls.n	800f2ec <icoSdoServerHandler+0x204>
 800f292:	f04f 0a24 	mov.w	sl, #36	; 0x24
 800f296:	fb0a fa09 	mul.w	sl, sl, r9
 800f29a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800f29e:	eb06 0b0a 	add.w	fp, r6, sl
 800f2a2:	18f3      	adds	r3, r6, r3
 800f2a4:	f89b 101b 	ldrb.w	r1, [fp, #27]
 800f2a8:	9a07      	ldr	r2, [sp, #28]
 800f2aa:	9302      	str	r3, [sp, #8]
 800f2ac:	9305      	str	r3, [sp, #20]
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	9200      	str	r2, [sp, #0]
 800f2b2:	9301      	str	r3, [sp, #4]
 800f2b4:	4642      	mov	r2, r8
 800f2b6:	f856 000a 	ldr.w	r0, [r6, sl]
 800f2ba:	f7fd fc6d 	bl	800cb98 <icoOdPutObj>
 800f2be:	4604      	mov	r4, r0
 800f2c0:	4680      	mov	r8, r0
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	f47f af6b 	bne.w	800f19e <icoSdoServerHandler+0xb6>
 800f2c8:	9907      	ldr	r1, [sp, #28]
 800f2ca:	f856 000a 	ldr.w	r0, [r6, sl]
 800f2ce:	f7fd fb51 	bl	800c974 <coOdSetObjSize>
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	f7ff fecc 	bl	800f070 <icoSdoCheckUserWriteInd>
 800f2d8:	4604      	mov	r4, r0
 800f2da:	b3c0      	cbz	r0, 800f34e <icoSdoServerHandler+0x266>
 800f2dc:	2829      	cmp	r0, #41	; 0x29
 800f2de:	d117      	bne.n	800f310 <icoSdoServerHandler+0x228>
 800f2e0:	230e      	movs	r3, #14
 800f2e2:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 800f2e6:	b00b      	add	sp, #44	; 0x2c
 800f2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ec:	2304      	movs	r3, #4
 800f2ee:	f04f 0c01 	mov.w	ip, #1
 800f2f2:	e9cd 3c00 	strd	r3, ip, [sp]
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	9805      	ldr	r0, [sp, #20]
 800f2fa:	f107 0216 	add.w	r2, r7, #22
 800f2fe:	4432      	add	r2, r6
 800f300:	5830      	ldr	r0, [r6, r0]
 800f302:	f7fd fbff 	bl	800cb04 <icoOdGetObj>
 800f306:	4604      	mov	r4, r0
 800f308:	2800      	cmp	r0, #0
 800f30a:	f47f af48 	bne.w	800f19e <icoSdoServerHandler+0xb6>
 800f30e:	e7c0      	b.n	800f292 <icoSdoServerHandler+0x1aa>
 800f310:	f8db 300c 	ldr.w	r3, [fp, #12]
 800f314:	f856 000a 	ldr.w	r0, [r6, sl]
 800f318:	2b04      	cmp	r3, #4
 800f31a:	d80d      	bhi.n	800f338 <icoSdoServerHandler+0x250>
 800f31c:	9b05      	ldr	r3, [sp, #20]
 800f31e:	f89b 101b 	ldrb.w	r1, [fp, #27]
 800f322:	9302      	str	r3, [sp, #8]
 800f324:	f107 0216 	add.w	r2, r7, #22
 800f328:	2304      	movs	r3, #4
 800f32a:	2701      	movs	r7, #1
 800f32c:	e9cd 3700 	strd	r3, r7, [sp]
 800f330:	4432      	add	r2, r6
 800f332:	4643      	mov	r3, r8
 800f334:	f7fd fc30 	bl	800cb98 <icoOdPutObj>
 800f338:	2324      	movs	r3, #36	; 0x24
 800f33a:	fb03 f909 	mul.w	r9, r3, r9
 800f33e:	eb06 0309 	add.w	r3, r6, r9
 800f342:	f856 0009 	ldr.w	r0, [r6, r9]
 800f346:	68d9      	ldr	r1, [r3, #12]
 800f348:	f7fd fb14 	bl	800c974 <coOdSetObjSize>
 800f34c:	e79b      	b.n	800f286 <icoSdoServerHandler+0x19e>
 800f34e:	230e      	movs	r3, #14
 800f350:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 800f354:	4628      	mov	r0, r5
 800f356:	f7ff fd87 	bl	800ee68 <sdoServerWriteIndCont>
 800f35a:	4604      	mov	r4, r0
 800f35c:	e793      	b.n	800f286 <icoSdoServerHandler+0x19e>
 800f35e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800f362:	2b02      	cmp	r3, #2
 800f364:	d002      	beq.n	800f36c <icoSdoServerHandler+0x284>
 800f366:	2b0b      	cmp	r3, #11
 800f368:	f47f aefe 	bne.w	800f168 <icoSdoServerHandler+0x80>
 800f36c:	f001 0310 	and.w	r3, r1, #16
 800f370:	2424      	movs	r4, #36	; 0x24
 800f372:	9305      	str	r3, [sp, #20]
 800f374:	fb04 6309 	mla	r3, r4, r9, r6
 800f378:	9805      	ldr	r0, [sp, #20]
 800f37a:	7f5a      	ldrb	r2, [r3, #29]
 800f37c:	4282      	cmp	r2, r0
 800f37e:	f47f af0e 	bne.w	800f19e <icoSdoServerHandler+0xb6>
 800f382:	b980      	cbnz	r0, 800f3a6 <icoSdoServerHandler+0x2be>
 800f384:	2210      	movs	r2, #16
 800f386:	775a      	strb	r2, [r3, #29]
 800f388:	2324      	movs	r3, #36	; 0x24
 800f38a:	fb03 f909 	mul.w	r9, r3, r9
 800f38e:	eb06 0b09 	add.w	fp, r6, r9
 800f392:	f3c1 0142 	ubfx	r1, r1, #1, #3
 800f396:	f8db 300c 	ldr.w	r3, [fp, #12]
 800f39a:	f1c1 0a07 	rsb	sl, r1, #7
 800f39e:	459a      	cmp	sl, r3
 800f3a0:	d903      	bls.n	800f3aa <icoSdoServerHandler+0x2c2>
 800f3a2:	2422      	movs	r4, #34	; 0x22
 800f3a4:	e6fb      	b.n	800f19e <icoSdoServerHandler+0xb6>
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	e7ed      	b.n	800f386 <icoSdoServerHandler+0x29e>
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	f89b 101b 	ldrb.w	r1, [fp, #27]
 800f3b0:	3723      	adds	r7, #35	; 0x23
 800f3b2:	e9cd a300 	strd	sl, r3, [sp]
 800f3b6:	4437      	add	r7, r6
 800f3b8:	9702      	str	r7, [sp, #8]
 800f3ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f3be:	f856 0009 	ldr.w	r0, [r6, r9]
 800f3c2:	f108 020b 	add.w	r2, r8, #11
 800f3c6:	f7fd fbe7 	bl	800cb98 <icoOdPutObj>
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	f47f aee6 	bne.w	800f19e <icoSdoServerHandler+0xb6>
 800f3d2:	f8db 300c 	ldr.w	r3, [fp, #12]
 800f3d6:	f8db 1010 	ldr.w	r1, [fp, #16]
 800f3da:	eba3 030a 	sub.w	r3, r3, sl
 800f3de:	4451      	add	r1, sl
 800f3e0:	f8cb 300c 	str.w	r3, [fp, #12]
 800f3e4:	f8cb 1010 	str.w	r1, [fp, #16]
 800f3e8:	f898 300a 	ldrb.w	r3, [r8, #10]
 800f3ec:	07da      	lsls	r2, r3, #31
 800f3ee:	d50f      	bpl.n	800f410 <icoSdoServerHandler+0x328>
 800f3f0:	f856 0009 	ldr.w	r0, [r6, r9]
 800f3f4:	f7fd fabe 	bl	800c974 <coOdSetObjSize>
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	f7ff fe39 	bl	800f070 <icoSdoCheckUserWriteInd>
 800f3fe:	4604      	mov	r4, r0
 800f400:	b120      	cbz	r0, 800f40c <icoSdoServerHandler+0x324>
 800f402:	2829      	cmp	r0, #41	; 0x29
 800f404:	f47f af3f 	bne.w	800f286 <icoSdoServerHandler+0x19e>
 800f408:	230f      	movs	r3, #15
 800f40a:	e76a      	b.n	800f2e2 <icoSdoServerHandler+0x1fa>
 800f40c:	230f      	movs	r3, #15
 800f40e:	e79f      	b.n	800f350 <icoSdoServerHandler+0x268>
 800f410:	9b05      	ldr	r3, [sp, #20]
 800f412:	a90a      	add	r1, sp, #40	; 0x28
 800f414:	f043 0320 	orr.w	r3, r3, #32
 800f418:	f801 3d08 	strb.w	r3, [r1, #-8]!
 800f41c:	4602      	mov	r2, r0
 800f41e:	f8cd 0021 	str.w	r0, [sp, #33]	; 0x21
 800f422:	9009      	str	r0, [sp, #36]	; 0x24
 800f424:	f8bb 001e 	ldrh.w	r0, [fp, #30]
 800f428:	f7ff fb1e 	bl	800ea68 <icoTransmitMessage>
 800f42c:	e795      	b.n	800f35a <icoSdoServerHandler+0x272>
 800f42e:	bf00      	nop
 800f430:	20008e01 	.word	0x20008e01
 800f434:	20008dd8 	.word	0x20008dd8
 800f438:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f47f ae93 	bne.w	800f168 <icoSdoServerHandler+0x80>
 800f442:	4629      	mov	r1, r5
 800f444:	f108 000b 	add.w	r0, r8, #11
 800f448:	f7ff fd3e 	bl	800eec8 <icoSdoDeCodeMultiplexer>
 800f44c:	462a      	mov	r2, r5
 800f44e:	7ee9      	ldrb	r1, [r5, #27]
 800f450:	8aa8      	ldrh	r0, [r5, #20]
 800f452:	f7fd fbeb 	bl	800cc2c <coOdGetObjDescPtr>
 800f456:	4604      	mov	r4, r0
 800f458:	2800      	cmp	r0, #0
 800f45a:	f47f aea0 	bne.w	800f19e <icoSdoServerHandler+0xb6>
 800f45e:	f85a 0007 	ldr.w	r0, [sl, r7]
 800f462:	f7fd fa2b 	bl	800c8bc <coOdGetObjAttribute>
 800f466:	07c3      	lsls	r3, r0, #31
 800f468:	f140 809c 	bpl.w	800f5a4 <icoSdoServerHandler+0x4bc>
 800f46c:	7eea      	ldrb	r2, [r5, #27]
 800f46e:	8aa9      	ldrh	r1, [r5, #20]
 800f470:	7ea8      	ldrb	r0, [r5, #26]
 800f472:	f7ff fd97 	bl	800efa4 <icoSdoCheckUserReadInd>
 800f476:	4604      	mov	r4, r0
 800f478:	b120      	cbz	r0, 800f484 <icoSdoServerHandler+0x39c>
 800f47a:	2829      	cmp	r0, #41	; 0x29
 800f47c:	f47f ae8f 	bne.w	800f19e <icoSdoServerHandler+0xb6>
 800f480:	230d      	movs	r3, #13
 800f482:	e669      	b.n	800f158 <icoSdoServerHandler+0x70>
 800f484:	f85a 0007 	ldr.w	r0, [sl, r7]
 800f488:	f7fd fa8e 	bl	800c9a8 <coOdGetObjSize>
 800f48c:	8aab      	ldrh	r3, [r5, #20]
 800f48e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800f492:	7ee9      	ldrb	r1, [r5, #27]
 800f494:	60e8      	str	r0, [r5, #12]
 800f496:	0a1b      	lsrs	r3, r3, #8
 800f498:	2804      	cmp	r0, #4
 800f49a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800f49e:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 800f4a2:	9409      	str	r4, [sp, #36]	; 0x24
 800f4a4:	d917      	bls.n	800f4d6 <icoSdoServerHandler+0x3ee>
 800f4a6:	2341      	movs	r3, #65	; 0x41
 800f4a8:	f88d 3020 	strb.w	r3, [sp, #32]
 800f4ac:	f107 010c 	add.w	r1, r7, #12
 800f4b0:	2304      	movs	r3, #4
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	9400      	str	r4, [sp, #0]
 800f4b6:	4451      	add	r1, sl
 800f4b8:	a809      	add	r0, sp, #36	; 0x24
 800f4ba:	f7fd f9ed 	bl	800c898 <coNumMemcpyUnpack>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	612c      	str	r4, [r5, #16]
 800f4c2:	776c      	strb	r4, [r5, #29]
 800f4c4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800f4c8:	2324      	movs	r3, #36	; 0x24
 800f4ca:	fb03 6609 	mla	r6, r3, r9, r6
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	a908      	add	r1, sp, #32
 800f4d2:	8bf0      	ldrh	r0, [r6, #30]
 800f4d4:	e7a8      	b.n	800f428 <icoSdoServerHandler+0x340>
 800f4d6:	f1c0 0004 	rsb	r0, r0, #4
 800f4da:	2304      	movs	r3, #4
 800f4dc:	0080      	lsls	r0, r0, #2
 800f4de:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
 800f4e2:	f040 0043 	orr.w	r0, r0, #67	; 0x43
 800f4e6:	9401      	str	r4, [sp, #4]
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	f88d 0020 	strb.w	r0, [sp, #32]
 800f4ee:	4623      	mov	r3, r4
 800f4f0:	aa09      	add	r2, sp, #36	; 0x24
 800f4f2:	f85a 0007 	ldr.w	r0, [sl, r7]
 800f4f6:	f7fd fb05 	bl	800cb04 <icoOdGetObj>
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d0e3      	beq.n	800f4c8 <icoSdoServerHandler+0x3e0>
 800f500:	e64d      	b.n	800f19e <icoSdoServerHandler+0xb6>
 800f502:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800f506:	2b01      	cmp	r3, #1
 800f508:	f47f ae5c 	bne.w	800f1c4 <icoSdoServerHandler+0xdc>
 800f50c:	7f6a      	ldrb	r2, [r5, #29]
 800f50e:	f001 0110 	and.w	r1, r1, #16
 800f512:	2300      	movs	r3, #0
 800f514:	428a      	cmp	r2, r1
 800f516:	f8cd 3021 	str.w	r3, [sp, #33]	; 0x21
 800f51a:	9309      	str	r3, [sp, #36]	; 0x24
 800f51c:	f47f ae3f 	bne.w	800f19e <icoSdoServerHandler+0xb6>
 800f520:	b901      	cbnz	r1, 800f524 <icoSdoServerHandler+0x43c>
 800f522:	2310      	movs	r3, #16
 800f524:	776b      	strb	r3, [r5, #29]
 800f526:	2324      	movs	r3, #36	; 0x24
 800f528:	fb03 6309 	mla	r3, r3, r9, r6
 800f52c:	f88d 1020 	strb.w	r1, [sp, #32]
 800f530:	68df      	ldr	r7, [r3, #12]
 800f532:	2f07      	cmp	r7, #7
 800f534:	bf9f      	itttt	ls
 800f536:	f1c7 0207 	rsbls	r2, r7, #7
 800f53a:	f041 0a01 	orrls.w	sl, r1, #1
 800f53e:	4611      	movls	r1, r2
 800f540:	2200      	movls	r2, #0
 800f542:	bf98      	it	ls
 800f544:	f883 2022 	strbls.w	r2, [r3, #34]	; 0x22
 800f548:	f04f 0324 	mov.w	r3, #36	; 0x24
 800f54c:	fb03 f909 	mul.w	r9, r3, r9
 800f550:	eb06 0809 	add.w	r8, r6, r9
 800f554:	bf94      	ite	ls
 800f556:	ea4a 0141 	orrls.w	r1, sl, r1, lsl #1
 800f55a:	2707      	movhi	r7, #7
 800f55c:	f04f 0300 	mov.w	r3, #0
 800f560:	bf98      	it	ls
 800f562:	f88d 1020 	strbls.w	r1, [sp, #32]
 800f566:	f898 101b 	ldrb.w	r1, [r8, #27]
 800f56a:	e9cd 7300 	strd	r7, r3, [sp]
 800f56e:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 800f572:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f576:	f856 0009 	ldr.w	r0, [r6, r9]
 800f57a:	f7fd fac3 	bl	800cb04 <icoOdGetObj>
 800f57e:	4604      	mov	r4, r0
 800f580:	2800      	cmp	r0, #0
 800f582:	f47f ae0c 	bne.w	800f19e <icoSdoServerHandler+0xb6>
 800f586:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f58a:	1bdb      	subs	r3, r3, r7
 800f58c:	f8c8 300c 	str.w	r3, [r8, #12]
 800f590:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f594:	441f      	add	r7, r3
 800f596:	4602      	mov	r2, r0
 800f598:	f8c8 7010 	str.w	r7, [r8, #16]
 800f59c:	a908      	add	r1, sp, #32
 800f59e:	f8b8 001e 	ldrh.w	r0, [r8, #30]
 800f5a2:	e741      	b.n	800f428 <icoSdoServerHandler+0x340>
 800f5a4:	2417      	movs	r4, #23
 800f5a6:	e5fa      	b.n	800f19e <icoSdoServerHandler+0xb6>

0800f5a8 <icoSdoGetObjectAddr>:
 800f5a8:	b508      	push	{r3, lr}
 800f5aa:	f7ff fc49 	bl	800ee40 <searchSdoServerIndex>
 800f5ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5b2:	4298      	cmp	r0, r3
 800f5b4:	d017      	beq.n	800f5e6 <icoSdoGetObjectAddr+0x3e>
 800f5b6:	2902      	cmp	r1, #2
 800f5b8:	d009      	beq.n	800f5ce <icoSdoGetObjectAddr+0x26>
 800f5ba:	2903      	cmp	r1, #3
 800f5bc:	d00d      	beq.n	800f5da <icoSdoGetObjectAddr+0x32>
 800f5be:	2901      	cmp	r1, #1
 800f5c0:	d111      	bne.n	800f5e6 <icoSdoGetObjectAddr+0x3e>
 800f5c2:	4b0a      	ldr	r3, [pc, #40]	; (800f5ec <icoSdoGetObjectAddr+0x44>)
 800f5c4:	2224      	movs	r2, #36	; 0x24
 800f5c6:	fb02 3000 	mla	r0, r2, r0, r3
 800f5ca:	3008      	adds	r0, #8
 800f5cc:	bd08      	pop	{r3, pc}
 800f5ce:	4b07      	ldr	r3, [pc, #28]	; (800f5ec <icoSdoGetObjectAddr+0x44>)
 800f5d0:	2224      	movs	r2, #36	; 0x24
 800f5d2:	fb02 3000 	mla	r0, r2, r0, r3
 800f5d6:	3004      	adds	r0, #4
 800f5d8:	e7f8      	b.n	800f5cc <icoSdoGetObjectAddr+0x24>
 800f5da:	4b04      	ldr	r3, [pc, #16]	; (800f5ec <icoSdoGetObjectAddr+0x44>)
 800f5dc:	2224      	movs	r2, #36	; 0x24
 800f5de:	fb02 3000 	mla	r0, r2, r0, r3
 800f5e2:	301c      	adds	r0, #28
 800f5e4:	e7f2      	b.n	800f5cc <icoSdoGetObjectAddr+0x24>
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	e7f0      	b.n	800f5cc <icoSdoGetObjectAddr+0x24>
 800f5ea:	bf00      	nop
 800f5ec:	20008dd8 	.word	0x20008dd8

0800f5f0 <icoSdoCheckObjLimitNode>:
 800f5f0:	b508      	push	{r3, lr}
 800f5f2:	f7ff fc25 	bl	800ee40 <searchSdoServerIndex>
 800f5f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5fa:	4298      	cmp	r0, r3
 800f5fc:	bf0c      	ite	eq
 800f5fe:	2021      	moveq	r0, #33	; 0x21
 800f600:	2000      	movne	r0, #0
 800f602:	bd08      	pop	{r3, pc}

0800f604 <icoSdoCheckObjLimitCobId>:
 800f604:	b510      	push	{r4, lr}
 800f606:	4614      	mov	r4, r2
 800f608:	f7ff fc1a 	bl	800ee40 <searchSdoServerIndex>
 800f60c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f610:	4298      	cmp	r0, r3
 800f612:	d024      	beq.n	800f65e <icoSdoCheckObjLimitCobId+0x5a>
 800f614:	2901      	cmp	r1, #1
 800f616:	d114      	bne.n	800f642 <icoSdoCheckObjLimitCobId+0x3e>
 800f618:	2c00      	cmp	r4, #0
 800f61a:	db10      	blt.n	800f63e <icoSdoCheckObjLimitCobId+0x3a>
 800f61c:	4b12      	ldr	r3, [pc, #72]	; (800f668 <icoSdoCheckObjLimitCobId+0x64>)
 800f61e:	2224      	movs	r2, #36	; 0x24
 800f620:	fb02 3000 	mla	r0, r2, r0, r3
 800f624:	6883      	ldr	r3, [r0, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	db01      	blt.n	800f62e <icoSdoCheckObjLimitCobId+0x2a>
 800f62a:	2020      	movs	r0, #32
 800f62c:	bd10      	pop	{r4, pc}
 800f62e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f632:	4611      	mov	r1, r2
 800f634:	4620      	mov	r0, r4
 800f636:	f000 fca5 	bl	800ff84 <icoCheckRestrictedCobs>
 800f63a:	2801      	cmp	r0, #1
 800f63c:	d0f5      	beq.n	800f62a <icoSdoCheckObjLimitCobId+0x26>
 800f63e:	2000      	movs	r0, #0
 800f640:	e7f4      	b.n	800f62c <icoSdoCheckObjLimitCobId+0x28>
 800f642:	2902      	cmp	r1, #2
 800f644:	d10d      	bne.n	800f662 <icoSdoCheckObjLimitCobId+0x5e>
 800f646:	2c00      	cmp	r4, #0
 800f648:	dbf9      	blt.n	800f63e <icoSdoCheckObjLimitCobId+0x3a>
 800f64a:	4b07      	ldr	r3, [pc, #28]	; (800f668 <icoSdoCheckObjLimitCobId+0x64>)
 800f64c:	2224      	movs	r2, #36	; 0x24
 800f64e:	fb02 3000 	mla	r0, r2, r0, r3
 800f652:	6843      	ldr	r3, [r0, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	dae8      	bge.n	800f62a <icoSdoCheckObjLimitCobId+0x26>
 800f658:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800f65c:	e7e9      	b.n	800f632 <icoSdoCheckObjLimitCobId+0x2e>
 800f65e:	2021      	movs	r0, #33	; 0x21
 800f660:	e7e4      	b.n	800f62c <icoSdoCheckObjLimitCobId+0x28>
 800f662:	2015      	movs	r0, #21
 800f664:	e7e2      	b.n	800f62c <icoSdoCheckObjLimitCobId+0x28>
 800f666:	bf00      	nop
 800f668:	20008dd8 	.word	0x20008dd8

0800f66c <icoSdoObjChanged>:
 800f66c:	b510      	push	{r4, lr}
 800f66e:	f7ff fbe7 	bl	800ee40 <searchSdoServerIndex>
 800f672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f676:	4298      	cmp	r0, r3
 800f678:	d01a      	beq.n	800f6b0 <icoSdoObjChanged+0x44>
 800f67a:	2901      	cmp	r1, #1
 800f67c:	d003      	beq.n	800f686 <icoSdoObjChanged+0x1a>
 800f67e:	2902      	cmp	r1, #2
 800f680:	d00d      	beq.n	800f69e <icoSdoObjChanged+0x32>
 800f682:	2000      	movs	r0, #0
 800f684:	e015      	b.n	800f6b2 <icoSdoObjChanged+0x46>
 800f686:	4b0b      	ldr	r3, [pc, #44]	; (800f6b4 <icoSdoObjChanged+0x48>)
 800f688:	2224      	movs	r2, #36	; 0x24
 800f68a:	fb02 3000 	mla	r0, r2, r0, r3
 800f68e:	2308      	movs	r3, #8
 800f690:	6881      	ldr	r1, [r0, #8]
 800f692:	8c00      	ldrh	r0, [r0, #32]
 800f694:	2200      	movs	r2, #0
 800f696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f69a:	f000 bba7 	b.w	800fdec <icoCobSet>
 800f69e:	4b05      	ldr	r3, [pc, #20]	; (800f6b4 <icoSdoObjChanged+0x48>)
 800f6a0:	2224      	movs	r2, #36	; 0x24
 800f6a2:	fb02 3000 	mla	r0, r2, r0, r3
 800f6a6:	2308      	movs	r3, #8
 800f6a8:	6841      	ldr	r1, [r0, #4]
 800f6aa:	8bc0      	ldrh	r0, [r0, #30]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	e7f2      	b.n	800f696 <icoSdoObjChanged+0x2a>
 800f6b0:	2021      	movs	r0, #33	; 0x21
 800f6b2:	bd10      	pop	{r4, pc}
 800f6b4:	20008dd8 	.word	0x20008dd8

0800f6b8 <icoSdoServerReset>:
 800f6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6bc:	2500      	movs	r5, #0
 800f6be:	4c10      	ldr	r4, [pc, #64]	; (800f700 <icoSdoServerReset+0x48>)
 800f6c0:	4f10      	ldr	r7, [pc, #64]	; (800f704 <icoSdoServerReset+0x4c>)
 800f6c2:	46a8      	mov	r8, r5
 800f6c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f6c8:	783a      	ldrb	r2, [r7, #0]
 800f6ca:	b2ab      	uxth	r3, r5
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d801      	bhi.n	800f6d4 <icoSdoServerReset+0x1c>
 800f6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d4:	68a3      	ldr	r3, [r4, #8]
 800f6d6:	8c20      	ldrh	r0, [r4, #32]
 800f6d8:	f884 8022 	strb.w	r8, [r4, #34]	; 0x22
 800f6dc:	005b      	lsls	r3, r3, #1
 800f6de:	bf48      	it	mi
 800f6e0:	e9c4 6601 	strdmi	r6, r6, [r4, #4]
 800f6e4:	2308      	movs	r3, #8
 800f6e6:	68a1      	ldr	r1, [r4, #8]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f000 fb7f 	bl	800fdec <icoCobSet>
 800f6ee:	6861      	ldr	r1, [r4, #4]
 800f6f0:	8be0      	ldrh	r0, [r4, #30]
 800f6f2:	2308      	movs	r3, #8
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f000 fb79 	bl	800fdec <icoCobSet>
 800f6fa:	3501      	adds	r5, #1
 800f6fc:	3424      	adds	r4, #36	; 0x24
 800f6fe:	e7e3      	b.n	800f6c8 <icoSdoServerReset+0x10>
 800f700:	20008dd8 	.word	0x20008dd8
 800f704:	20008e01 	.word	0x20008e01

0800f708 <icoSdoServerSetDefaultValue>:
 800f708:	b570      	push	{r4, r5, r6, lr}
 800f70a:	4c10      	ldr	r4, [pc, #64]	; (800f74c <icoSdoServerSetDefaultValue+0x44>)
 800f70c:	4e10      	ldr	r6, [pc, #64]	; (800f750 <icoSdoServerSetDefaultValue+0x48>)
 800f70e:	2500      	movs	r5, #0
 800f710:	7832      	ldrb	r2, [r6, #0]
 800f712:	b2ab      	uxth	r3, r5
 800f714:	429a      	cmp	r2, r3
 800f716:	d800      	bhi.n	800f71a <icoSdoServerSetDefaultValue+0x12>
 800f718:	bd70      	pop	{r4, r5, r6, pc}
 800f71a:	7ea3      	ldrb	r3, [r4, #26]
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d10c      	bne.n	800f73a <icoSdoServerSetDefaultValue+0x32>
 800f720:	f7fc fe4e 	bl	800c3c0 <coNmtGetNodeId>
 800f724:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
 800f728:	60a0      	str	r0, [r4, #8]
 800f72a:	f7fc fe49 	bl	800c3c0 <coNmtGetNodeId>
 800f72e:	f500 60b0 	add.w	r0, r0, #1408	; 0x580
 800f732:	6060      	str	r0, [r4, #4]
 800f734:	3501      	adds	r5, #1
 800f736:	3424      	adds	r4, #36	; 0x24
 800f738:	e7ea      	b.n	800f710 <icoSdoServerSetDefaultValue+0x8>
 800f73a:	68a3      	ldr	r3, [r4, #8]
 800f73c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f740:	60a3      	str	r3, [r4, #8]
 800f742:	6863      	ldr	r3, [r4, #4]
 800f744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f748:	6063      	str	r3, [r4, #4]
 800f74a:	e7f3      	b.n	800f734 <icoSdoServerSetDefaultValue+0x2c>
 800f74c:	20008dd8 	.word	0x20008dd8
 800f750:	20008e01 	.word	0x20008e01

0800f754 <icoSdoServerVarInit>:
 800f754:	b510      	push	{r4, lr}
 800f756:	4b07      	ldr	r3, [pc, #28]	; (800f774 <icoSdoServerVarInit+0x20>)
 800f758:	4807      	ldr	r0, [pc, #28]	; (800f778 <icoSdoServerVarInit+0x24>)
 800f75a:	2400      	movs	r4, #0
 800f75c:	2224      	movs	r2, #36	; 0x24
 800f75e:	4621      	mov	r1, r4
 800f760:	701c      	strb	r4, [r3, #0]
 800f762:	f000 fc73 	bl	801004c <memset>
 800f766:	4b05      	ldr	r3, [pc, #20]	; (800f77c <icoSdoServerVarInit+0x28>)
 800f768:	701c      	strb	r4, [r3, #0]
 800f76a:	4b05      	ldr	r3, [pc, #20]	; (800f780 <icoSdoServerVarInit+0x2c>)
 800f76c:	701c      	strb	r4, [r3, #0]
 800f76e:	4b05      	ldr	r3, [pc, #20]	; (800f784 <icoSdoServerVarInit+0x30>)
 800f770:	701c      	strb	r4, [r3, #0]
 800f772:	bd10      	pop	{r4, pc}
 800f774:	20008e01 	.word	0x20008e01
 800f778:	20008dd8 	.word	0x20008dd8
 800f77c:	20008e08 	.word	0x20008e08
 800f780:	20008e10 	.word	0x20008e10
 800f784:	20008e00 	.word	0x20008e00

0800f788 <coSdoServerInit>:
 800f788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78a:	4d10      	ldr	r5, [pc, #64]	; (800f7cc <coSdoServerInit+0x44>)
 800f78c:	782c      	ldrb	r4, [r5, #0]
 800f78e:	b9d4      	cbnz	r4, 800f7c6 <coSdoServerInit+0x3e>
 800f790:	4e0f      	ldr	r6, [pc, #60]	; (800f7d0 <coSdoServerInit+0x48>)
 800f792:	4622      	mov	r2, r4
 800f794:	76b0      	strb	r0, [r6, #26]
 800f796:	4621      	mov	r1, r4
 800f798:	4620      	mov	r0, r4
 800f79a:	f000 fafb 	bl	800fd94 <icoCobCreate>
 800f79e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800f7a2:	42b8      	cmp	r0, r7
 800f7a4:	83f0      	strh	r0, [r6, #30]
 800f7a6:	d101      	bne.n	800f7ac <coSdoServerInit+0x24>
 800f7a8:	2032      	movs	r0, #50	; 0x32
 800f7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ac:	782a      	ldrb	r2, [r5, #0]
 800f7ae:	4621      	mov	r1, r4
 800f7b0:	2001      	movs	r0, #1
 800f7b2:	f000 faef 	bl	800fd94 <icoCobCreate>
 800f7b6:	42b8      	cmp	r0, r7
 800f7b8:	8430      	strh	r0, [r6, #32]
 800f7ba:	d0f5      	beq.n	800f7a8 <coSdoServerInit+0x20>
 800f7bc:	782b      	ldrb	r3, [r5, #0]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	702b      	strb	r3, [r5, #0]
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	e7f1      	b.n	800f7aa <coSdoServerInit+0x22>
 800f7c6:	200a      	movs	r0, #10
 800f7c8:	e7ef      	b.n	800f7aa <coSdoServerInit+0x22>
 800f7ca:	bf00      	nop
 800f7cc:	20008e01 	.word	0x20008e01
 800f7d0:	20008dd8 	.word	0x20008dd8

0800f7d4 <coCanOpenStackVarInit>:
 800f7d4:	8803      	ldrh	r3, [r0, #0]
 800f7d6:	2b04      	cmp	r3, #4
 800f7d8:	b510      	push	{r4, lr}
 800f7da:	4604      	mov	r4, r0
 800f7dc:	d12f      	bne.n	800f83e <coCanOpenStackVarInit+0x6a>
 800f7de:	f000 fbe9 	bl	800ffb4 <icoCobHandlerVarInit>
 800f7e2:	f7fb fbb9 	bl	800af58 <icoCommTaskVarInit>
 800f7e6:	f104 0213 	add.w	r2, r4, #19
 800f7ea:	f104 0112 	add.w	r1, r4, #18
 800f7ee:	f104 0011 	add.w	r0, r4, #17
 800f7f2:	f7fb fd5d 	bl	800b2b0 <icoEmcyVarInit>
 800f7f6:	f104 0010 	add.w	r0, r4, #16
 800f7fa:	f7fb ffa3 	bl	800b744 <icoErrorCtrlVarInit>
 800f7fe:	f7fc f80b 	bl	800b818 <icoEventInit>
 800f802:	f7fc f971 	bl	800bae8 <icoLedVarInit>
 800f806:	f7fc fc97 	bl	800c138 <icoLssVarInit>
 800f80a:	f104 0118 	add.w	r1, r4, #24
 800f80e:	f104 0016 	add.w	r0, r4, #22
 800f812:	f7fc fde1 	bl	800c3d8 <icoNmtVarInit>
 800f816:	f7fd fda3 	bl	800d360 <icoOdAccessVarInit>
 800f81a:	f104 010c 	add.w	r1, r4, #12
 800f81e:	f104 000a 	add.w	r0, r4, #10
 800f822:	f7fe fe0f 	bl	800e444 <icoPdoVarInit>
 800f826:	1d21      	adds	r1, r4, #4
 800f828:	1ca0      	adds	r0, r4, #2
 800f82a:	f7ff fad1 	bl	800edd0 <icoQueueVarInit>
 800f82e:	f104 000e 	add.w	r0, r4, #14
 800f832:	f7ff ff8f 	bl	800f754 <icoSdoServerVarInit>
 800f836:	f000 f8f9 	bl	800fa2c <icoSyncVarInit>
 800f83a:	2000      	movs	r0, #0
 800f83c:	bd10      	pop	{r4, pc}
 800f83e:	200b      	movs	r0, #11
 800f840:	e7fc      	b.n	800f83c <coCanOpenStackVarInit+0x68>

0800f842 <icoStoreLoadReq>:
 800f842:	2000      	movs	r0, #0
 800f844:	4770      	bx	lr
	...

0800f848 <icoSyncObjChanged.part.1>:
 800f848:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f84c:	4f22      	ldr	r7, [pc, #136]	; (800f8d8 <icoSyncObjChanged.part.1+0x90>)
 800f84e:	4d23      	ldr	r5, [pc, #140]	; (800f8dc <icoSyncObjChanged.part.1+0x94>)
 800f850:	683a      	ldr	r2, [r7, #0]
 800f852:	8828      	ldrh	r0, [r5, #0]
 800f854:	46a8      	mov	r8, r5
 800f856:	b31a      	cbz	r2, 800f8a0 <icoSyncObjChanged.part.1+0x58>
 800f858:	4e21      	ldr	r6, [pc, #132]	; (800f8e0 <icoSyncObjChanged.part.1+0x98>)
 800f85a:	6833      	ldr	r3, [r6, #0]
 800f85c:	005b      	lsls	r3, r3, #1
 800f85e:	d51f      	bpl.n	800f8a0 <icoSyncObjChanged.part.1+0x58>
 800f860:	2100      	movs	r1, #0
 800f862:	f000 fb07 	bl	800fe74 <icoCobChangeType>
 800f866:	4604      	mov	r4, r0
 800f868:	b998      	cbnz	r0, 800f892 <icoSyncObjChanged.part.1+0x4a>
 800f86a:	4b1e      	ldr	r3, [pc, #120]	; (800f8e4 <icoSyncObjChanged.part.1+0x9c>)
 800f86c:	8828      	ldrh	r0, [r5, #0]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	6831      	ldr	r1, [r6, #0]
 800f872:	b193      	cbz	r3, 800f89a <icoSyncObjChanged.part.1+0x52>
 800f874:	2301      	movs	r3, #1
 800f876:	4622      	mov	r2, r4
 800f878:	f000 fab8 	bl	800fdec <icoCobSet>
 800f87c:	4604      	mov	r4, r0
 800f87e:	b940      	cbnz	r0, 800f892 <icoSyncObjChanged.part.1+0x4a>
 800f880:	2303      	movs	r3, #3
 800f882:	9300      	str	r3, [sp, #0]
 800f884:	4a18      	ldr	r2, [pc, #96]	; (800f8e8 <icoSyncObjChanged.part.1+0xa0>)
 800f886:	6839      	ldr	r1, [r7, #0]
 800f888:	4603      	mov	r3, r0
 800f88a:	4818      	ldr	r0, [pc, #96]	; (800f8ec <icoSyncObjChanged.part.1+0xa4>)
 800f88c:	f000 f984 	bl	800fb98 <coTimerStart>
 800f890:	4604      	mov	r4, r0
 800f892:	4620      	mov	r0, r4
 800f894:	b002      	add	sp, #8
 800f896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f89a:	4623      	mov	r3, r4
 800f89c:	4622      	mov	r2, r4
 800f89e:	e7eb      	b.n	800f878 <icoSyncObjChanged.part.1+0x30>
 800f8a0:	2101      	movs	r1, #1
 800f8a2:	f000 fae7 	bl	800fe74 <icoCobChangeType>
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d1f2      	bne.n	800f892 <icoSyncObjChanged.part.1+0x4a>
 800f8ac:	4b0c      	ldr	r3, [pc, #48]	; (800f8e0 <icoSyncObjChanged.part.1+0x98>)
 800f8ae:	f8b8 0000 	ldrh.w	r0, [r8]
 800f8b2:	6819      	ldr	r1, [r3, #0]
 800f8b4:	4b0b      	ldr	r3, [pc, #44]	; (800f8e4 <icoSyncObjChanged.part.1+0x9c>)
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	b153      	cbz	r3, 800f8d0 <icoSyncObjChanged.part.1+0x88>
 800f8ba:	4a0d      	ldr	r2, [pc, #52]	; (800f8f0 <icoSyncObjChanged.part.1+0xa8>)
 800f8bc:	2301      	movs	r3, #1
 800f8be:	7013      	strb	r3, [r2, #0]
 800f8c0:	4622      	mov	r2, r4
 800f8c2:	f000 fa93 	bl	800fdec <icoCobSet>
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	4808      	ldr	r0, [pc, #32]	; (800f8ec <icoSyncObjChanged.part.1+0xa4>)
 800f8ca:	f000 f94f 	bl	800fb6c <coTimerStop>
 800f8ce:	e7e0      	b.n	800f892 <icoSyncObjChanged.part.1+0x4a>
 800f8d0:	4623      	mov	r3, r4
 800f8d2:	4622      	mov	r2, r4
 800f8d4:	e7f5      	b.n	800f8c2 <icoSyncObjChanged.part.1+0x7a>
 800f8d6:	bf00      	nop
 800f8d8:	20008e14 	.word	0x20008e14
 800f8dc:	20008e18 	.word	0x20008e18
 800f8e0:	2000001c 	.word	0x2000001c
 800f8e4:	20008e11 	.word	0x20008e11
 800f8e8:	0800f93d 	.word	0x0800f93d
 800f8ec:	20008e2c 	.word	0x20008e2c
 800f8f0:	20000019 	.word	0x20000019

0800f8f4 <icoSyncHandler>:
 800f8f4:	4b0d      	ldr	r3, [pc, #52]	; (800f92c <icoSyncHandler+0x38>)
 800f8f6:	b570      	push	{r4, r5, r6, lr}
 800f8f8:	881c      	ldrh	r4, [r3, #0]
 800f8fa:	4e0d      	ldr	r6, [pc, #52]	; (800f930 <icoSyncHandler+0x3c>)
 800f8fc:	4605      	mov	r5, r0
 800f8fe:	b93c      	cbnz	r4, 800f910 <icoSyncHandler+0x1c>
 800f900:	4628      	mov	r0, r5
 800f902:	f7fe f8fd 	bl	800db00 <icoPdoSyncHandling>
 800f906:	4b0b      	ldr	r3, [pc, #44]	; (800f934 <icoSyncHandler+0x40>)
 800f908:	4e0b      	ldr	r6, [pc, #44]	; (800f938 <icoSyncHandler+0x44>)
 800f90a:	881c      	ldrh	r4, [r3, #0]
 800f90c:	b93c      	cbnz	r4, 800f91e <icoSyncHandler+0x2a>
 800f90e:	bd70      	pop	{r4, r5, r6, pc}
 800f910:	3c01      	subs	r4, #1
 800f912:	b2a4      	uxth	r4, r4
 800f914:	4628      	mov	r0, r5
 800f916:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800f91a:	4798      	blx	r3
 800f91c:	e7ef      	b.n	800f8fe <icoSyncHandler+0xa>
 800f91e:	3c01      	subs	r4, #1
 800f920:	b2a4      	uxth	r4, r4
 800f922:	4628      	mov	r0, r5
 800f924:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800f928:	4798      	blx	r3
 800f92a:	e7ef      	b.n	800f90c <icoSyncHandler+0x18>
 800f92c:	20008e20 	.word	0x20008e20
 800f930:	20008e1c 	.word	0x20008e1c
 800f934:	20008e28 	.word	0x20008e28
 800f938:	20008e24 	.word	0x20008e24

0800f93c <syncEventTimer>:
 800f93c:	b513      	push	{r0, r1, r4, lr}
 800f93e:	f7fc fd45 	bl	800c3cc <coNmtGetState>
 800f942:	287f      	cmp	r0, #127	; 0x7f
 800f944:	d001      	beq.n	800f94a <syncEventTimer+0xe>
 800f946:	2805      	cmp	r0, #5
 800f948:	d118      	bne.n	800f97c <syncEventTimer+0x40>
 800f94a:	490d      	ldr	r1, [pc, #52]	; (800f980 <syncEventTimer+0x44>)
 800f94c:	4c0d      	ldr	r4, [pc, #52]	; (800f984 <syncEventTimer+0x48>)
 800f94e:	780b      	ldrb	r3, [r1, #0]
 800f950:	7820      	ldrb	r0, [r4, #0]
 800f952:	f88d 3000 	strb.w	r3, [sp]
 800f956:	3301      	adds	r3, #1
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	4298      	cmp	r0, r3
 800f95c:	700b      	strb	r3, [r1, #0]
 800f95e:	bf3c      	itt	cc
 800f960:	2301      	movcc	r3, #1
 800f962:	700b      	strbcc	r3, [r1, #0]
 800f964:	4b08      	ldr	r3, [pc, #32]	; (800f988 <syncEventTimer+0x4c>)
 800f966:	2201      	movs	r2, #1
 800f968:	4669      	mov	r1, sp
 800f96a:	8818      	ldrh	r0, [r3, #0]
 800f96c:	f7ff f87c 	bl	800ea68 <icoTransmitMessage>
 800f970:	7820      	ldrb	r0, [r4, #0]
 800f972:	b108      	cbz	r0, 800f978 <syncEventTimer+0x3c>
 800f974:	f89d 0000 	ldrb.w	r0, [sp]
 800f978:	f7ff ffbc 	bl	800f8f4 <icoSyncHandler>
 800f97c:	b002      	add	sp, #8
 800f97e:	bd10      	pop	{r4, pc}
 800f980:	20000019 	.word	0x20000019
 800f984:	20008e11 	.word	0x20008e11
 800f988:	20008e18 	.word	0x20008e18

0800f98c <icoSyncGetObjectAddr>:
 800f98c:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 800f990:	3805      	subs	r0, #5
 800f992:	b280      	uxth	r0, r0
 800f994:	2814      	cmp	r0, #20
 800f996:	bf9a      	itte	ls
 800f998:	4b02      	ldrls	r3, [pc, #8]	; (800f9a4 <icoSyncGetObjectAddr+0x18>)
 800f99a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f99e:	2000      	movhi	r0, #0
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	08013464 	.word	0x08013464

0800f9a8 <icoSyncCheckObjLimit_u8>:
 800f9a8:	f241 0319 	movw	r3, #4121	; 0x1019
 800f9ac:	4298      	cmp	r0, r3
 800f9ae:	d10a      	bne.n	800f9c6 <icoSyncCheckObjLimit_u8+0x1e>
 800f9b0:	2901      	cmp	r1, #1
 800f9b2:	d00a      	beq.n	800f9ca <icoSyncCheckObjLimit_u8+0x22>
 800f9b4:	29f0      	cmp	r1, #240	; 0xf0
 800f9b6:	d808      	bhi.n	800f9ca <icoSyncCheckObjLimit_u8+0x22>
 800f9b8:	4b05      	ldr	r3, [pc, #20]	; (800f9d0 <icoSyncCheckObjLimit_u8+0x28>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	bf0c      	ite	eq
 800f9c0:	2000      	moveq	r0, #0
 800f9c2:	2052      	movne	r0, #82	; 0x52
 800f9c4:	4770      	bx	lr
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	4770      	bx	lr
 800f9ca:	2020      	movs	r0, #32
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	20008e14 	.word	0x20008e14

0800f9d4 <icoSyncCheckObjLimit_u32>:
 800f9d4:	f241 0305 	movw	r3, #4101	; 0x1005
 800f9d8:	4298      	cmp	r0, r3
 800f9da:	b513      	push	{r0, r1, r4, lr}
 800f9dc:	460c      	mov	r4, r1
 800f9de:	d117      	bne.n	800fa10 <icoSyncCheckObjLimit_u32+0x3c>
 800f9e0:	004b      	lsls	r3, r1, #1
 800f9e2:	d405      	bmi.n	800f9f0 <icoSyncCheckObjLimit_u32+0x1c>
 800f9e4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800f9e8:	d30b      	bcc.n	800fa02 <icoSyncCheckObjLimit_u32+0x2e>
 800f9ea:	2020      	movs	r0, #32
 800f9ec:	b002      	add	sp, #8
 800f9ee:	bd10      	pop	{r4, pc}
 800f9f0:	aa01      	add	r2, sp, #4
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	f241 0006 	movw	r0, #4102	; 0x1006
 800f9f8:	f7fd f918 	bl	800cc2c <coOdGetObjDescPtr>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	d0f1      	beq.n	800f9e4 <icoSyncCheckObjLimit_u32+0x10>
 800fa00:	e7f3      	b.n	800f9ea <icoSyncCheckObjLimit_u32+0x16>
 800fa02:	2280      	movs	r2, #128	; 0x80
 800fa04:	4611      	mov	r1, r2
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 fabc 	bl	800ff84 <icoCheckRestrictedCobs>
 800fa0c:	2801      	cmp	r0, #1
 800fa0e:	d0ec      	beq.n	800f9ea <icoSyncCheckObjLimit_u32+0x16>
 800fa10:	2000      	movs	r0, #0
 800fa12:	e7eb      	b.n	800f9ec <icoSyncCheckObjLimit_u32+0x18>

0800fa14 <icoSyncObjChanged>:
 800fa14:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 800fa18:	3805      	subs	r0, #5
 800fa1a:	2801      	cmp	r0, #1
 800fa1c:	d801      	bhi.n	800fa22 <icoSyncObjChanged+0xe>
 800fa1e:	f7ff bf13 	b.w	800f848 <icoSyncObjChanged.part.1>
 800fa22:	2000      	movs	r0, #0
 800fa24:	4770      	bx	lr

0800fa26 <icoSyncReset>:
 800fa26:	f7ff bf0f 	b.w	800f848 <icoSyncObjChanged.part.1>
	...

0800fa2c <icoSyncVarInit>:
 800fa2c:	4b0a      	ldr	r3, [pc, #40]	; (800fa58 <icoSyncVarInit+0x2c>)
 800fa2e:	2280      	movs	r2, #128	; 0x80
 800fa30:	601a      	str	r2, [r3, #0]
 800fa32:	4a0a      	ldr	r2, [pc, #40]	; (800fa5c <icoSyncVarInit+0x30>)
 800fa34:	2300      	movs	r3, #0
 800fa36:	6013      	str	r3, [r2, #0]
 800fa38:	4a09      	ldr	r2, [pc, #36]	; (800fa60 <icoSyncVarInit+0x34>)
 800fa3a:	7013      	strb	r3, [r2, #0]
 800fa3c:	4a09      	ldr	r2, [pc, #36]	; (800fa64 <icoSyncVarInit+0x38>)
 800fa3e:	2101      	movs	r1, #1
 800fa40:	7011      	strb	r1, [r2, #0]
 800fa42:	4a09      	ldr	r2, [pc, #36]	; (800fa68 <icoSyncVarInit+0x3c>)
 800fa44:	6013      	str	r3, [r2, #0]
 800fa46:	4a09      	ldr	r2, [pc, #36]	; (800fa6c <icoSyncVarInit+0x40>)
 800fa48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fa4c:	8011      	strh	r1, [r2, #0]
 800fa4e:	4a08      	ldr	r2, [pc, #32]	; (800fa70 <icoSyncVarInit+0x44>)
 800fa50:	8013      	strh	r3, [r2, #0]
 800fa52:	4a08      	ldr	r2, [pc, #32]	; (800fa74 <icoSyncVarInit+0x48>)
 800fa54:	8013      	strh	r3, [r2, #0]
 800fa56:	4770      	bx	lr
 800fa58:	2000001c 	.word	0x2000001c
 800fa5c:	20008e14 	.word	0x20008e14
 800fa60:	20008e11 	.word	0x20008e11
 800fa64:	20000019 	.word	0x20000019
 800fa68:	20008e44 	.word	0x20008e44
 800fa6c:	20008e18 	.word	0x20008e18
 800fa70:	20008e20 	.word	0x20008e20
 800fa74:	20008e28 	.word	0x20008e28

0800fa78 <icoSyncSetDefaultValue>:
 800fa78:	b507      	push	{r0, r1, r2, lr}
 800fa7a:	2100      	movs	r1, #0
 800fa7c:	aa01      	add	r2, sp, #4
 800fa7e:	f241 0005 	movw	r0, #4101	; 0x1005
 800fa82:	f7fd fa21 	bl	800cec8 <coOdGetDefaultVal_u32>
 800fa86:	4b14      	ldr	r3, [pc, #80]	; (800fad8 <icoSyncSetDefaultValue+0x60>)
 800fa88:	bb20      	cbnz	r0, 800fad4 <icoSyncSetDefaultValue+0x5c>
 800fa8a:	9a01      	ldr	r2, [sp, #4]
 800fa8c:	601a      	str	r2, [r3, #0]
 800fa8e:	2100      	movs	r1, #0
 800fa90:	aa01      	add	r2, sp, #4
 800fa92:	f241 0006 	movw	r0, #4102	; 0x1006
 800fa96:	f7fd fa17 	bl	800cec8 <coOdGetDefaultVal_u32>
 800fa9a:	b910      	cbnz	r0, 800faa2 <icoSyncSetDefaultValue+0x2a>
 800fa9c:	4b0f      	ldr	r3, [pc, #60]	; (800fadc <icoSyncSetDefaultValue+0x64>)
 800fa9e:	9a01      	ldr	r2, [sp, #4]
 800faa0:	601a      	str	r2, [r3, #0]
 800faa2:	aa01      	add	r2, sp, #4
 800faa4:	2100      	movs	r1, #0
 800faa6:	f241 0007 	movw	r0, #4103	; 0x1007
 800faaa:	f7fd fa0d 	bl	800cec8 <coOdGetDefaultVal_u32>
 800faae:	b910      	cbnz	r0, 800fab6 <icoSyncSetDefaultValue+0x3e>
 800fab0:	4b0b      	ldr	r3, [pc, #44]	; (800fae0 <icoSyncSetDefaultValue+0x68>)
 800fab2:	9a01      	ldr	r2, [sp, #4]
 800fab4:	601a      	str	r2, [r3, #0]
 800fab6:	f10d 0203 	add.w	r2, sp, #3
 800faba:	2100      	movs	r1, #0
 800fabc:	f241 0019 	movw	r0, #4121	; 0x1019
 800fac0:	f7fd f9aa 	bl	800ce18 <coOdGetDefaultVal_u8>
 800fac4:	b918      	cbnz	r0, 800face <icoSyncSetDefaultValue+0x56>
 800fac6:	4b07      	ldr	r3, [pc, #28]	; (800fae4 <icoSyncSetDefaultValue+0x6c>)
 800fac8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800facc:	701a      	strb	r2, [r3, #0]
 800face:	b003      	add	sp, #12
 800fad0:	f85d fb04 	ldr.w	pc, [sp], #4
 800fad4:	2280      	movs	r2, #128	; 0x80
 800fad6:	e7d9      	b.n	800fa8c <icoSyncSetDefaultValue+0x14>
 800fad8:	2000001c 	.word	0x2000001c
 800fadc:	20008e14 	.word	0x20008e14
 800fae0:	20008e44 	.word	0x20008e44
 800fae4:	20008e11 	.word	0x20008e11

0800fae8 <coSyncInit>:
 800fae8:	f010 4280 	ands.w	r2, r0, #1073741824	; 0x40000000
 800faec:	bf18      	it	ne
 800faee:	2200      	movne	r2, #0
 800faf0:	b510      	push	{r4, lr}
 800faf2:	bf19      	ittee	ne
 800faf4:	2106      	movne	r1, #6
 800faf6:	4610      	movne	r0, r2
 800faf8:	2107      	moveq	r1, #7
 800fafa:	2001      	moveq	r0, #1
 800fafc:	f000 f94a 	bl	800fd94 <icoCobCreate>
 800fb00:	4c04      	ldr	r4, [pc, #16]	; (800fb14 <coSyncInit+0x2c>)
 800fb02:	8020      	strh	r0, [r4, #0]
 800fb04:	8820      	ldrh	r0, [r4, #0]
 800fb06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb0a:	4298      	cmp	r0, r3
 800fb0c:	bf0c      	ite	eq
 800fb0e:	2032      	moveq	r0, #50	; 0x32
 800fb10:	2000      	movne	r0, #0
 800fb12:	bd10      	pop	{r4, pc}
 800fb14:	20008e18 	.word	0x20008e18

0800fb18 <addTimer>:
 800fb18:	4b12      	ldr	r3, [pc, #72]	; (800fb64 <addTimer+0x4c>)
 800fb1a:	4913      	ldr	r1, [pc, #76]	; (800fb68 <addTimer+0x50>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	6882      	ldr	r2, [r0, #8]
 800fb20:	441a      	add	r2, r3
 800fb22:	680b      	ldr	r3, [r1, #0]
 800fb24:	b530      	push	{r4, r5, lr}
 800fb26:	6042      	str	r2, [r0, #4]
 800fb28:	460d      	mov	r5, r1
 800fb2a:	b90b      	cbnz	r3, 800fb30 <addTimer+0x18>
 800fb2c:	6008      	str	r0, [r1, #0]
 800fb2e:	e00f      	b.n	800fb50 <addTimer+0x38>
 800fb30:	2100      	movs	r1, #0
 800fb32:	685c      	ldr	r4, [r3, #4]
 800fb34:	42a2      	cmp	r2, r4
 800fb36:	d907      	bls.n	800fb48 <addTimer+0x30>
 800fb38:	681c      	ldr	r4, [r3, #0]
 800fb3a:	b914      	cbnz	r4, 800fb42 <addTimer+0x2a>
 800fb3c:	6018      	str	r0, [r3, #0]
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e006      	b.n	800fb50 <addTimer+0x38>
 800fb42:	4619      	mov	r1, r3
 800fb44:	4623      	mov	r3, r4
 800fb46:	e7f4      	b.n	800fb32 <addTimer+0x1a>
 800fb48:	d205      	bcs.n	800fb56 <addTimer+0x3e>
 800fb4a:	2900      	cmp	r1, #0
 800fb4c:	d1ee      	bne.n	800fb2c <addTimer+0x14>
 800fb4e:	6028      	str	r0, [r5, #0]
 800fb50:	6003      	str	r3, [r0, #0]
 800fb52:	2000      	movs	r0, #0
 800fb54:	bd30      	pop	{r4, r5, pc}
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	2a00      	cmp	r2, #0
 800fb5a:	d0ef      	beq.n	800fb3c <addTimer+0x24>
 800fb5c:	6002      	str	r2, [r0, #0]
 800fb5e:	6018      	str	r0, [r3, #0]
 800fb60:	e7f7      	b.n	800fb52 <addTimer+0x3a>
 800fb62:	bf00      	nop
 800fb64:	20008e48 	.word	0x20008e48
 800fb68:	20008e4c 	.word	0x20008e4c

0800fb6c <coTimerStop>:
 800fb6c:	b510      	push	{r4, lr}
 800fb6e:	4a09      	ldr	r2, [pc, #36]	; (800fb94 <coTimerStop+0x28>)
 800fb70:	6813      	ldr	r3, [r2, #0]
 800fb72:	2100      	movs	r1, #0
 800fb74:	b90b      	cbnz	r3, 800fb7a <coTimerStop+0xe>
 800fb76:	200a      	movs	r0, #10
 800fb78:	e006      	b.n	800fb88 <coTimerStop+0x1c>
 800fb7a:	4283      	cmp	r3, r0
 800fb7c:	681c      	ldr	r4, [r3, #0]
 800fb7e:	d106      	bne.n	800fb8e <coTimerStop+0x22>
 800fb80:	b919      	cbnz	r1, 800fb8a <coTimerStop+0x1e>
 800fb82:	6014      	str	r4, [r2, #0]
 800fb84:	2000      	movs	r0, #0
 800fb86:	6018      	str	r0, [r3, #0]
 800fb88:	bd10      	pop	{r4, pc}
 800fb8a:	600c      	str	r4, [r1, #0]
 800fb8c:	e7fa      	b.n	800fb84 <coTimerStop+0x18>
 800fb8e:	4619      	mov	r1, r3
 800fb90:	4623      	mov	r3, r4
 800fb92:	e7ef      	b.n	800fb74 <coTimerStop+0x8>
 800fb94:	20008e4c 	.word	0x20008e4c

0800fb98 <coTimerStart>:
 800fb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	4691      	mov	r9, r2
 800fba0:	4698      	mov	r8, r3
 800fba2:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800fba6:	460e      	mov	r6, r1
 800fba8:	b1d9      	cbz	r1, 800fbe2 <coTimerStart+0x4a>
 800fbaa:	f7ff ffdf 	bl	800fb6c <coTimerStop>
 800fbae:	4b0e      	ldr	r3, [pc, #56]	; (800fbe8 <coTimerStart+0x50>)
 800fbb0:	2f01      	cmp	r7, #1
 800fbb2:	681d      	ldr	r5, [r3, #0]
 800fbb4:	fbb6 f0f5 	udiv	r0, r6, r5
 800fbb8:	60a0      	str	r0, [r4, #8]
 800fbba:	d804      	bhi.n	800fbc6 <coTimerStart+0x2e>
 800fbbc:	fb05 6510 	mls	r5, r5, r0, r6
 800fbc0:	b10d      	cbz	r5, 800fbc6 <coTimerStart+0x2e>
 800fbc2:	3001      	adds	r0, #1
 800fbc4:	60a0      	str	r0, [r4, #8]
 800fbc6:	68a3      	ldr	r3, [r4, #8]
 800fbc8:	b90b      	cbnz	r3, 800fbce <coTimerStart+0x36>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	60a3      	str	r3, [r4, #8]
 800fbce:	f8c4 900c 	str.w	r9, [r4, #12]
 800fbd2:	7527      	strb	r7, [r4, #20]
 800fbd4:	f8c4 8010 	str.w	r8, [r4, #16]
 800fbd8:	4620      	mov	r0, r4
 800fbda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbde:	f7ff bf9b 	b.w	800fb18 <addTimer>
 800fbe2:	200a      	movs	r0, #10
 800fbe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbe8:	20008e50 	.word	0x20008e50

0800fbec <coTimerIsActive>:
 800fbec:	4b04      	ldr	r3, [pc, #16]	; (800fc00 <coTimerIsActive+0x14>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	b90b      	cbnz	r3, 800fbf6 <coTimerIsActive+0xa>
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	4770      	bx	lr
 800fbf6:	4283      	cmp	r3, r0
 800fbf8:	d1f9      	bne.n	800fbee <coTimerIsActive+0x2>
 800fbfa:	2001      	movs	r0, #1
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	20008e4c 	.word	0x20008e4c

0800fc04 <icoTimerCheck>:
 800fc04:	b538      	push	{r3, r4, r5, lr}
 800fc06:	4b14      	ldr	r3, [pc, #80]	; (800fc58 <icoTimerCheck+0x54>)
 800fc08:	681c      	ldr	r4, [r3, #0]
 800fc0a:	4b14      	ldr	r3, [pc, #80]	; (800fc5c <icoTimerCheck+0x58>)
 800fc0c:	b90c      	cbnz	r4, 800fc12 <icoTimerCheck+0xe>
 800fc0e:	601c      	str	r4, [r3, #0]
 800fc10:	bd38      	pop	{r3, r4, r5, pc}
 800fc12:	6861      	ldr	r1, [r4, #4]
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	4291      	cmp	r1, r2
 800fc18:	d8fa      	bhi.n	800fc10 <icoTimerCheck+0xc>
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	4623      	mov	r3, r4
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	1a52      	subs	r2, r2, r1
 800fc24:	605a      	str	r2, [r3, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d1f9      	bne.n	800fc20 <icoTimerCheck+0x1c>
 800fc2c:	e9d4 5300 	ldrd	r5, r3, [r4]
 800fc30:	b973      	cbnz	r3, 800fc50 <icoTimerCheck+0x4c>
 800fc32:	4620      	mov	r0, r4
 800fc34:	f7ff ff9a 	bl	800fb6c <coTimerStop>
 800fc38:	68e3      	ldr	r3, [r4, #12]
 800fc3a:	b10b      	cbz	r3, 800fc40 <icoTimerCheck+0x3c>
 800fc3c:	6920      	ldr	r0, [r4, #16]
 800fc3e:	4798      	blx	r3
 800fc40:	7d23      	ldrb	r3, [r4, #20]
 800fc42:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d102      	bne.n	800fc50 <icoTimerCheck+0x4c>
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f7ff ff64 	bl	800fb18 <addTimer>
 800fc50:	462c      	mov	r4, r5
 800fc52:	2d00      	cmp	r5, #0
 800fc54:	d1ea      	bne.n	800fc2c <icoTimerCheck+0x28>
 800fc56:	e7db      	b.n	800fc10 <icoTimerCheck+0xc>
 800fc58:	20008e4c 	.word	0x20008e4c
 800fc5c:	20008e48 	.word	0x20008e48

0800fc60 <coTimerInit>:
 800fc60:	4b03      	ldr	r3, [pc, #12]	; (800fc70 <coTimerInit+0x10>)
 800fc62:	4a04      	ldr	r2, [pc, #16]	; (800fc74 <coTimerInit+0x14>)
 800fc64:	6018      	str	r0, [r3, #0]
 800fc66:	2300      	movs	r3, #0
 800fc68:	6013      	str	r3, [r2, #0]
 800fc6a:	4a03      	ldr	r2, [pc, #12]	; (800fc78 <coTimerInit+0x18>)
 800fc6c:	6013      	str	r3, [r2, #0]
 800fc6e:	4770      	bx	lr
 800fc70:	20008e50 	.word	0x20008e50
 800fc74:	20008e4c 	.word	0x20008e4c
 800fc78:	20008e48 	.word	0x20008e48

0800fc7c <codrvCanErrorGetFlags>:
 800fc7c:	4800      	ldr	r0, [pc, #0]	; (800fc80 <codrvCanErrorGetFlags+0x4>)
 800fc7e:	4770      	bx	lr
 800fc80:	20008e54 	.word	0x20008e54

0800fc84 <codrvCanErrorInit>:
 800fc84:	4b04      	ldr	r3, [pc, #16]	; (800fc98 <codrvCanErrorInit+0x14>)
 800fc86:	2200      	movs	r2, #0
 800fc88:	701a      	strb	r2, [r3, #0]
 800fc8a:	705a      	strb	r2, [r3, #1]
 800fc8c:	709a      	strb	r2, [r3, #2]
 800fc8e:	70da      	strb	r2, [r3, #3]
 800fc90:	711a      	strb	r2, [r3, #4]
 800fc92:	715a      	strb	r2, [r3, #5]
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop
 800fc98:	20008e54 	.word	0x20008e54

0800fc9c <codrvCanErrorInformStack>:
 800fc9c:	b510      	push	{r4, lr}
 800fc9e:	4c30      	ldr	r4, [pc, #192]	; (800fd60 <codrvCanErrorInformStack+0xc4>)
 800fca0:	7823      	ldrb	r3, [r4, #0]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d104      	bne.n	800fcb0 <codrvCanErrorInformStack+0x14>
 800fca6:	2300      	movs	r3, #0
 800fca8:	2006      	movs	r0, #6
 800fcaa:	7023      	strb	r3, [r4, #0]
 800fcac:	f7fb f8da 	bl	800ae64 <coCommStateEvent>
 800fcb0:	7923      	ldrb	r3, [r4, #4]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d104      	bne.n	800fcc0 <codrvCanErrorInformStack+0x24>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	200d      	movs	r0, #13
 800fcba:	7123      	strb	r3, [r4, #4]
 800fcbc:	f7fb f8d2 	bl	800ae64 <coCommStateEvent>
 800fcc0:	79a3      	ldrb	r3, [r4, #6]
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	d002      	beq.n	800fccc <codrvCanErrorInformStack+0x30>
 800fcc6:	78e3      	ldrb	r3, [r4, #3]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d10b      	bne.n	800fce4 <codrvCanErrorInformStack+0x48>
 800fccc:	7963      	ldrb	r3, [r4, #5]
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d102      	bne.n	800fcd8 <codrvCanErrorInformStack+0x3c>
 800fcd2:	2004      	movs	r0, #4
 800fcd4:	f7fb f8c6 	bl	800ae64 <coCommStateEvent>
 800fcd8:	7963      	ldrb	r3, [r4, #5]
 800fcda:	2b03      	cmp	r3, #3
 800fcdc:	d002      	beq.n	800fce4 <codrvCanErrorInformStack+0x48>
 800fcde:	2001      	movs	r0, #1
 800fce0:	f7fb f8c0 	bl	800ae64 <coCommStateEvent>
 800fce4:	7963      	ldrb	r3, [r4, #5]
 800fce6:	2b03      	cmp	r3, #3
 800fce8:	d003      	beq.n	800fcf2 <codrvCanErrorInformStack+0x56>
 800fcea:	b113      	cbz	r3, 800fcf2 <codrvCanErrorInformStack+0x56>
 800fcec:	78e3      	ldrb	r3, [r4, #3]
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d108      	bne.n	800fd04 <codrvCanErrorInformStack+0x68>
 800fcf2:	79a3      	ldrb	r3, [r4, #6]
 800fcf4:	2b02      	cmp	r3, #2
 800fcf6:	d105      	bne.n	800fd04 <codrvCanErrorInformStack+0x68>
 800fcf8:	2005      	movs	r0, #5
 800fcfa:	f7fb f8b3 	bl	800ae64 <coCommStateEvent>
 800fcfe:	2004      	movs	r0, #4
 800fd00:	f7fb f8b0 	bl	800ae64 <coCommStateEvent>
 800fd04:	7963      	ldrb	r3, [r4, #5]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d107      	bne.n	800fd1a <codrvCanErrorInformStack+0x7e>
 800fd0a:	79a3      	ldrb	r3, [r4, #6]
 800fd0c:	2b02      	cmp	r3, #2
 800fd0e:	d104      	bne.n	800fd1a <codrvCanErrorInformStack+0x7e>
 800fd10:	78e3      	ldrb	r3, [r4, #3]
 800fd12:	b913      	cbnz	r3, 800fd1a <codrvCanErrorInformStack+0x7e>
 800fd14:	2004      	movs	r0, #4
 800fd16:	f7fb f8a5 	bl	800ae64 <coCommStateEvent>
 800fd1a:	7963      	ldrb	r3, [r4, #5]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d108      	bne.n	800fd32 <codrvCanErrorInformStack+0x96>
 800fd20:	79a3      	ldrb	r3, [r4, #6]
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d105      	bne.n	800fd32 <codrvCanErrorInformStack+0x96>
 800fd26:	78e3      	ldrb	r3, [r4, #3]
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d112      	bne.n	800fd52 <codrvCanErrorInformStack+0xb6>
 800fd2c:	2005      	movs	r0, #5
 800fd2e:	f7fb f899 	bl	800ae64 <coCommStateEvent>
 800fd32:	7963      	ldrb	r3, [r4, #5]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d005      	beq.n	800fd44 <codrvCanErrorInformStack+0xa8>
 800fd38:	79a3      	ldrb	r3, [r4, #6]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d102      	bne.n	800fd44 <codrvCanErrorInformStack+0xa8>
 800fd3e:	2005      	movs	r0, #5
 800fd40:	f7fb f890 	bl	800ae64 <coCommStateEvent>
 800fd44:	2000      	movs	r0, #0
 800fd46:	79a3      	ldrb	r3, [r4, #6]
 800fd48:	7060      	strb	r0, [r4, #1]
 800fd4a:	70a0      	strb	r0, [r4, #2]
 800fd4c:	70e0      	strb	r0, [r4, #3]
 800fd4e:	7163      	strb	r3, [r4, #5]
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	7863      	ldrb	r3, [r4, #1]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d1ec      	bne.n	800fd32 <codrvCanErrorInformStack+0x96>
 800fd58:	2004      	movs	r0, #4
 800fd5a:	f7fb f883 	bl	800ae64 <coCommStateEvent>
 800fd5e:	e7e5      	b.n	800fd2c <codrvCanErrorInformStack+0x90>
 800fd60:	20008e54 	.word	0x20008e54

0800fd64 <cobFilterSet>:
 800fd64:	4a0a      	ldr	r2, [pc, #40]	; (800fd90 <cobFilterSet+0x2c>)
 800fd66:	b508      	push	{r3, lr}
 800fd68:	2330      	movs	r3, #48	; 0x30
 800fd6a:	fb03 2300 	mla	r3, r3, r0, r2
 800fd6e:	7c1a      	ldrb	r2, [r3, #16]
 800fd70:	3a06      	subs	r2, #6
 800fd72:	2a01      	cmp	r2, #1
 800fd74:	d808      	bhi.n	800fd88 <cobFilterSet+0x24>
 800fd76:	7b99      	ldrb	r1, [r3, #14]
 800fd78:	6858      	ldr	r0, [r3, #4]
 800fd7a:	07ca      	lsls	r2, r1, #31
 800fd7c:	d506      	bpl.n	800fd8c <cobFilterSet+0x28>
 800fd7e:	789a      	ldrb	r2, [r3, #2]
 800fd80:	2a01      	cmp	r2, #1
 800fd82:	d103      	bne.n	800fd8c <cobFilterSet+0x28>
 800fd84:	f7ff f814 	bl	800edb0 <icoQueueSetSyncId>
 800fd88:	2000      	movs	r0, #0
 800fd8a:	bd08      	pop	{r3, pc}
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	e7f9      	b.n	800fd84 <cobFilterSet+0x20>
 800fd90:	20008e5c 	.word	0x20008e5c

0800fd94 <icoCobCreate>:
 800fd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd96:	4b13      	ldr	r3, [pc, #76]	; (800fde4 <icoCobCreate+0x50>)
 800fd98:	881c      	ldrh	r4, [r3, #0]
 800fd9a:	2c15      	cmp	r4, #21
 800fd9c:	4694      	mov	ip, r2
 800fd9e:	d81d      	bhi.n	800fddc <icoCobCreate+0x48>
 800fda0:	4f11      	ldr	r7, [pc, #68]	; (800fde8 <icoCobCreate+0x54>)
 800fda2:	1c66      	adds	r6, r4, #1
 800fda4:	2530      	movs	r5, #48	; 0x30
 800fda6:	4365      	muls	r5, r4
 800fda8:	b2b6      	uxth	r6, r6
 800fdaa:	801e      	strh	r6, [r3, #0]
 800fdac:	197b      	adds	r3, r7, r5
 800fdae:	2200      	movs	r2, #0
 800fdb0:	7419      	strb	r1, [r3, #16]
 800fdb2:	3906      	subs	r1, #6
 800fdb4:	537e      	strh	r6, [r7, r5]
 800fdb6:	7098      	strb	r0, [r3, #2]
 800fdb8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800fdbc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800fdc0:	2901      	cmp	r1, #1
 800fdc2:	739a      	strb	r2, [r3, #14]
 800fdc4:	e9c3 0201 	strd	r0, r2, [r3, #4]
 800fdc8:	819d      	strh	r5, [r3, #12]
 800fdca:	f8a3 c012 	strh.w	ip, [r3, #18]
 800fdce:	829a      	strh	r2, [r3, #20]
 800fdd0:	d802      	bhi.n	800fdd8 <icoCobCreate+0x44>
 800fdd2:	4611      	mov	r1, r2
 800fdd4:	f7fe ffec 	bl	800edb0 <icoQueueSetSyncId>
 800fdd8:	4620      	mov	r0, r4
 800fdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fddc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fde0:	e7fa      	b.n	800fdd8 <icoCobCreate+0x44>
 800fde2:	bf00      	nop
 800fde4:	2000927c 	.word	0x2000927c
 800fde8:	20008e5c 	.word	0x20008e5c

0800fdec <icoCobSet>:
 800fdec:	b470      	push	{r4, r5, r6}
 800fdee:	4c1f      	ldr	r4, [pc, #124]	; (800fe6c <icoCobSet+0x80>)
 800fdf0:	8824      	ldrh	r4, [r4, #0]
 800fdf2:	4284      	cmp	r4, r0
 800fdf4:	d334      	bcc.n	800fe60 <icoCobSet+0x74>
 800fdf6:	2900      	cmp	r1, #0
 800fdf8:	da25      	bge.n	800fe46 <icoCobSet+0x5a>
 800fdfa:	4d1d      	ldr	r5, [pc, #116]	; (800fe70 <icoCobSet+0x84>)
 800fdfc:	2430      	movs	r4, #48	; 0x30
 800fdfe:	fb04 5400 	mla	r4, r4, r0, r5
 800fe02:	7ba5      	ldrb	r5, [r4, #14]
 800fe04:	f025 0501 	bic.w	r5, r5, #1
 800fe08:	4e19      	ldr	r6, [pc, #100]	; (800fe70 <icoCobSet+0x84>)
 800fe0a:	73a5      	strb	r5, [r4, #14]
 800fe0c:	2430      	movs	r4, #48	; 0x30
 800fe0e:	fb04 6400 	mla	r4, r4, r0, r6
 800fe12:	f021 4560 	bic.w	r5, r1, #3758096384	; 0xe0000000
 800fe16:	6065      	str	r5, [r4, #4]
 800fe18:	7ba5      	ldrb	r5, [r4, #14]
 800fe1a:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800fe1e:	bf14      	ite	ne
 800fe20:	f045 0502 	orrne.w	r5, r5, #2
 800fe24:	f025 0502 	biceq.w	r5, r5, #2
 800fe28:	2130      	movs	r1, #48	; 0x30
 800fe2a:	73a5      	strb	r5, [r4, #14]
 800fe2c:	fb01 6500 	mla	r5, r1, r0, r6
 800fe30:	7bac      	ldrb	r4, [r5, #14]
 800fe32:	b992      	cbnz	r2, 800fe5a <icoCobSet+0x6e>
 800fe34:	f024 0408 	bic.w	r4, r4, #8
 800fe38:	fb01 6100 	mla	r1, r1, r0, r6
 800fe3c:	73ac      	strb	r4, [r5, #14]
 800fe3e:	758b      	strb	r3, [r1, #22]
 800fe40:	bc70      	pop	{r4, r5, r6}
 800fe42:	f7ff bf8f 	b.w	800fd64 <cobFilterSet>
 800fe46:	2b08      	cmp	r3, #8
 800fe48:	d80d      	bhi.n	800fe66 <icoCobSet+0x7a>
 800fe4a:	4d09      	ldr	r5, [pc, #36]	; (800fe70 <icoCobSet+0x84>)
 800fe4c:	2430      	movs	r4, #48	; 0x30
 800fe4e:	fb04 5400 	mla	r4, r4, r0, r5
 800fe52:	7ba5      	ldrb	r5, [r4, #14]
 800fe54:	f045 0501 	orr.w	r5, r5, #1
 800fe58:	e7d6      	b.n	800fe08 <icoCobSet+0x1c>
 800fe5a:	f044 0408 	orr.w	r4, r4, #8
 800fe5e:	e7eb      	b.n	800fe38 <icoCobSet+0x4c>
 800fe60:	2032      	movs	r0, #50	; 0x32
 800fe62:	bc70      	pop	{r4, r5, r6}
 800fe64:	4770      	bx	lr
 800fe66:	2020      	movs	r0, #32
 800fe68:	e7fb      	b.n	800fe62 <icoCobSet+0x76>
 800fe6a:	bf00      	nop
 800fe6c:	2000927c 	.word	0x2000927c
 800fe70:	20008e5c 	.word	0x20008e5c

0800fe74 <icoCobChangeType>:
 800fe74:	4a08      	ldr	r2, [pc, #32]	; (800fe98 <icoCobChangeType+0x24>)
 800fe76:	8812      	ldrh	r2, [r2, #0]
 800fe78:	4282      	cmp	r2, r0
 800fe7a:	b410      	push	{r4}
 800fe7c:	d308      	bcc.n	800fe90 <icoCobChangeType+0x1c>
 800fe7e:	4a07      	ldr	r2, [pc, #28]	; (800fe9c <icoCobChangeType+0x28>)
 800fe80:	2430      	movs	r4, #48	; 0x30
 800fe82:	fb04 2300 	mla	r3, r4, r0, r2
 800fe86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe8a:	7099      	strb	r1, [r3, #2]
 800fe8c:	f7ff bf6a 	b.w	800fd64 <cobFilterSet>
 800fe90:	2032      	movs	r0, #50	; 0x32
 800fe92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe96:	4770      	bx	lr
 800fe98:	2000927c 	.word	0x2000927c
 800fe9c:	20008e5c 	.word	0x20008e5c

0800fea0 <icoCobSetInhibit>:
 800fea0:	4a08      	ldr	r2, [pc, #32]	; (800fec4 <icoCobSetInhibit+0x24>)
 800fea2:	8812      	ldrh	r2, [r2, #0]
 800fea4:	4282      	cmp	r2, r0
 800fea6:	b510      	push	{r4, lr}
 800fea8:	460c      	mov	r4, r1
 800feaa:	d309      	bcc.n	800fec0 <icoCobSetInhibit+0x20>
 800feac:	4a06      	ldr	r2, [pc, #24]	; (800fec8 <icoCobSetInhibit+0x28>)
 800feae:	2130      	movs	r1, #48	; 0x30
 800feb0:	fb01 2300 	mla	r3, r1, r0, r2
 800feb4:	829c      	strh	r4, [r3, #20]
 800feb6:	b90c      	cbnz	r4, 800febc <icoCobSetInhibit+0x1c>
 800feb8:	f7fe ff48 	bl	800ed4c <icoQueueDeleteInhibit>
 800febc:	2000      	movs	r0, #0
 800febe:	e000      	b.n	800fec2 <icoCobSetInhibit+0x22>
 800fec0:	2032      	movs	r0, #50	; 0x32
 800fec2:	bd10      	pop	{r4, pc}
 800fec4:	2000927c 	.word	0x2000927c
 800fec8:	20008e5c 	.word	0x20008e5c

0800fecc <icoCobDisable>:
 800fecc:	4a07      	ldr	r2, [pc, #28]	; (800feec <icoCobDisable+0x20>)
 800fece:	8812      	ldrh	r2, [r2, #0]
 800fed0:	4282      	cmp	r2, r0
 800fed2:	d309      	bcc.n	800fee8 <icoCobDisable+0x1c>
 800fed4:	4a06      	ldr	r2, [pc, #24]	; (800fef0 <icoCobDisable+0x24>)
 800fed6:	2130      	movs	r1, #48	; 0x30
 800fed8:	fb01 2300 	mla	r3, r1, r0, r2
 800fedc:	7b9a      	ldrb	r2, [r3, #14]
 800fede:	f022 0201 	bic.w	r2, r2, #1
 800fee2:	739a      	strb	r2, [r3, #14]
 800fee4:	f7ff bf3e 	b.w	800fd64 <cobFilterSet>
 800fee8:	2032      	movs	r0, #50	; 0x32
 800feea:	4770      	bx	lr
 800feec:	2000927c 	.word	0x2000927c
 800fef0:	20008e5c 	.word	0x20008e5c

0800fef4 <icoCobGetPointer>:
 800fef4:	4b04      	ldr	r3, [pc, #16]	; (800ff08 <icoCobGetPointer+0x14>)
 800fef6:	881b      	ldrh	r3, [r3, #0]
 800fef8:	4283      	cmp	r3, r0
 800fefa:	bf23      	ittte	cs
 800fefc:	4b03      	ldrcs	r3, [pc, #12]	; (800ff0c <icoCobGetPointer+0x18>)
 800fefe:	2230      	movcs	r2, #48	; 0x30
 800ff00:	fb02 3000 	mlacs	r0, r2, r0, r3
 800ff04:	2000      	movcc	r0, #0
 800ff06:	4770      	bx	lr
 800ff08:	2000927c 	.word	0x2000927c
 800ff0c:	20008e5c 	.word	0x20008e5c

0800ff10 <icoCobCheck>:
 800ff10:	4a12      	ldr	r2, [pc, #72]	; (800ff5c <icoCobCheck+0x4c>)
 800ff12:	4b13      	ldr	r3, [pc, #76]	; (800ff60 <icoCobCheck+0x50>)
 800ff14:	8812      	ldrh	r2, [r2, #0]
 800ff16:	2130      	movs	r1, #48	; 0x30
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	fb01 3202 	mla	r2, r1, r2, r3
 800ff1e:	4604      	mov	r4, r0
 800ff20:	4293      	cmp	r3, r2
 800ff22:	d101      	bne.n	800ff28 <icoCobCheck+0x18>
 800ff24:	2000      	movs	r0, #0
 800ff26:	bd70      	pop	{r4, r5, r6, pc}
 800ff28:	685d      	ldr	r5, [r3, #4]
 800ff2a:	6821      	ldr	r1, [r4, #0]
 800ff2c:	4069      	eors	r1, r5
 800ff2e:	689d      	ldr	r5, [r3, #8]
 800ff30:	43a9      	bics	r1, r5
 800ff32:	4618      	mov	r0, r3
 800ff34:	d110      	bne.n	800ff58 <icoCobCheck+0x48>
 800ff36:	7925      	ldrb	r5, [r4, #4]
 800ff38:	7b9e      	ldrb	r6, [r3, #14]
 800ff3a:	ea85 0106 	eor.w	r1, r5, r6
 800ff3e:	f011 0f02 	tst.w	r1, #2
 800ff42:	d109      	bne.n	800ff58 <icoCobCheck+0x48>
 800ff44:	07f6      	lsls	r6, r6, #31
 800ff46:	d507      	bpl.n	800ff58 <icoCobCheck+0x48>
 800ff48:	789e      	ldrb	r6, [r3, #2]
 800ff4a:	2e01      	cmp	r6, #1
 800ff4c:	d0eb      	beq.n	800ff26 <icoCobCheck+0x16>
 800ff4e:	b91e      	cbnz	r6, 800ff58 <icoCobCheck+0x48>
 800ff50:	072d      	lsls	r5, r5, #28
 800ff52:	d501      	bpl.n	800ff58 <icoCobCheck+0x48>
 800ff54:	0709      	lsls	r1, r1, #28
 800ff56:	d5e6      	bpl.n	800ff26 <icoCobCheck+0x16>
 800ff58:	3330      	adds	r3, #48	; 0x30
 800ff5a:	e7e1      	b.n	800ff20 <icoCobCheck+0x10>
 800ff5c:	2000927c 	.word	0x2000927c
 800ff60:	20008e5c 	.word	0x20008e5c

0800ff64 <icoCobDisableAll>:
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	4d06      	ldr	r5, [pc, #24]	; (800ff80 <icoCobDisableAll+0x1c>)
 800ff68:	2400      	movs	r4, #0
 800ff6a:	882b      	ldrh	r3, [r5, #0]
 800ff6c:	b2a0      	uxth	r0, r4
 800ff6e:	4283      	cmp	r3, r0
 800ff70:	f104 0401 	add.w	r4, r4, #1
 800ff74:	d800      	bhi.n	800ff78 <icoCobDisableAll+0x14>
 800ff76:	bd38      	pop	{r3, r4, r5, pc}
 800ff78:	f7ff ffa8 	bl	800fecc <icoCobDisable>
 800ff7c:	e7f5      	b.n	800ff6a <icoCobDisableAll+0x6>
 800ff7e:	bf00      	nop
 800ff80:	2000927c 	.word	0x2000927c

0800ff84 <icoCheckRestrictedCobs>:
 800ff84:	b530      	push	{r4, r5, lr}
 800ff86:	4c0a      	ldr	r4, [pc, #40]	; (800ffb0 <icoCheckRestrictedCobs+0x2c>)
 800ff88:	2300      	movs	r3, #0
 800ff8a:	591d      	ldr	r5, [r3, r4]
 800ff8c:	4285      	cmp	r5, r0
 800ff8e:	d807      	bhi.n	800ffa0 <icoCheckRestrictedCobs+0x1c>
 800ff90:	18e5      	adds	r5, r4, r3
 800ff92:	686d      	ldr	r5, [r5, #4]
 800ff94:	4285      	cmp	r5, r0
 800ff96:	d303      	bcc.n	800ffa0 <icoCheckRestrictedCobs+0x1c>
 800ff98:	4288      	cmp	r0, r1
 800ff9a:	d306      	bcc.n	800ffaa <icoCheckRestrictedCobs+0x26>
 800ff9c:	4290      	cmp	r0, r2
 800ff9e:	d804      	bhi.n	800ffaa <icoCheckRestrictedCobs+0x26>
 800ffa0:	3308      	adds	r3, #8
 800ffa2:	2b40      	cmp	r3, #64	; 0x40
 800ffa4:	d1f1      	bne.n	800ff8a <icoCheckRestrictedCobs+0x6>
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	bd30      	pop	{r4, r5, pc}
 800ffaa:	2001      	movs	r0, #1
 800ffac:	e7fc      	b.n	800ffa8 <icoCheckRestrictedCobs+0x24>
 800ffae:	bf00      	nop
 800ffb0:	080134b8 	.word	0x080134b8

0800ffb4 <icoCobHandlerVarInit>:
 800ffb4:	4b01      	ldr	r3, [pc, #4]	; (800ffbc <icoCobHandlerVarInit+0x8>)
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	801a      	strh	r2, [r3, #0]
 800ffba:	4770      	bx	lr
 800ffbc:	2000927c 	.word	0x2000927c

0800ffc0 <__errno>:
 800ffc0:	4b01      	ldr	r3, [pc, #4]	; (800ffc8 <__errno+0x8>)
 800ffc2:	6818      	ldr	r0, [r3, #0]
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	20000020 	.word	0x20000020

0800ffcc <__libc_init_array>:
 800ffcc:	b570      	push	{r4, r5, r6, lr}
 800ffce:	4d0d      	ldr	r5, [pc, #52]	; (8010004 <__libc_init_array+0x38>)
 800ffd0:	4c0d      	ldr	r4, [pc, #52]	; (8010008 <__libc_init_array+0x3c>)
 800ffd2:	1b64      	subs	r4, r4, r5
 800ffd4:	10a4      	asrs	r4, r4, #2
 800ffd6:	2600      	movs	r6, #0
 800ffd8:	42a6      	cmp	r6, r4
 800ffda:	d109      	bne.n	800fff0 <__libc_init_array+0x24>
 800ffdc:	4d0b      	ldr	r5, [pc, #44]	; (801000c <__libc_init_array+0x40>)
 800ffde:	4c0c      	ldr	r4, [pc, #48]	; (8010010 <__libc_init_array+0x44>)
 800ffe0:	f002 fec2 	bl	8012d68 <_init>
 800ffe4:	1b64      	subs	r4, r4, r5
 800ffe6:	10a4      	asrs	r4, r4, #2
 800ffe8:	2600      	movs	r6, #0
 800ffea:	42a6      	cmp	r6, r4
 800ffec:	d105      	bne.n	800fffa <__libc_init_array+0x2e>
 800ffee:	bd70      	pop	{r4, r5, r6, pc}
 800fff0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fff4:	4798      	blx	r3
 800fff6:	3601      	adds	r6, #1
 800fff8:	e7ee      	b.n	800ffd8 <__libc_init_array+0xc>
 800fffa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fffe:	4798      	blx	r3
 8010000:	3601      	adds	r6, #1
 8010002:	e7f2      	b.n	800ffea <__libc_init_array+0x1e>
 8010004:	080138e4 	.word	0x080138e4
 8010008:	080138e4 	.word	0x080138e4
 801000c:	080138e4 	.word	0x080138e4
 8010010:	080138e8 	.word	0x080138e8

08010014 <memcmp>:
 8010014:	b530      	push	{r4, r5, lr}
 8010016:	3901      	subs	r1, #1
 8010018:	2400      	movs	r4, #0
 801001a:	42a2      	cmp	r2, r4
 801001c:	d101      	bne.n	8010022 <memcmp+0xe>
 801001e:	2000      	movs	r0, #0
 8010020:	e005      	b.n	801002e <memcmp+0x1a>
 8010022:	5d03      	ldrb	r3, [r0, r4]
 8010024:	3401      	adds	r4, #1
 8010026:	5d0d      	ldrb	r5, [r1, r4]
 8010028:	42ab      	cmp	r3, r5
 801002a:	d0f6      	beq.n	801001a <memcmp+0x6>
 801002c:	1b58      	subs	r0, r3, r5
 801002e:	bd30      	pop	{r4, r5, pc}

08010030 <memcpy>:
 8010030:	440a      	add	r2, r1
 8010032:	4291      	cmp	r1, r2
 8010034:	f100 33ff 	add.w	r3, r0, #4294967295
 8010038:	d100      	bne.n	801003c <memcpy+0xc>
 801003a:	4770      	bx	lr
 801003c:	b510      	push	{r4, lr}
 801003e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010046:	4291      	cmp	r1, r2
 8010048:	d1f9      	bne.n	801003e <memcpy+0xe>
 801004a:	bd10      	pop	{r4, pc}

0801004c <memset>:
 801004c:	4402      	add	r2, r0
 801004e:	4603      	mov	r3, r0
 8010050:	4293      	cmp	r3, r2
 8010052:	d100      	bne.n	8010056 <memset+0xa>
 8010054:	4770      	bx	lr
 8010056:	f803 1b01 	strb.w	r1, [r3], #1
 801005a:	e7f9      	b.n	8010050 <memset+0x4>

0801005c <__cvt>:
 801005c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010060:	ec55 4b10 	vmov	r4, r5, d0
 8010064:	2d00      	cmp	r5, #0
 8010066:	460e      	mov	r6, r1
 8010068:	4619      	mov	r1, r3
 801006a:	462b      	mov	r3, r5
 801006c:	bfbb      	ittet	lt
 801006e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010072:	461d      	movlt	r5, r3
 8010074:	2300      	movge	r3, #0
 8010076:	232d      	movlt	r3, #45	; 0x2d
 8010078:	700b      	strb	r3, [r1, #0]
 801007a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801007c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010080:	4691      	mov	r9, r2
 8010082:	f023 0820 	bic.w	r8, r3, #32
 8010086:	bfbc      	itt	lt
 8010088:	4622      	movlt	r2, r4
 801008a:	4614      	movlt	r4, r2
 801008c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010090:	d005      	beq.n	801009e <__cvt+0x42>
 8010092:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010096:	d100      	bne.n	801009a <__cvt+0x3e>
 8010098:	3601      	adds	r6, #1
 801009a:	2102      	movs	r1, #2
 801009c:	e000      	b.n	80100a0 <__cvt+0x44>
 801009e:	2103      	movs	r1, #3
 80100a0:	ab03      	add	r3, sp, #12
 80100a2:	9301      	str	r3, [sp, #4]
 80100a4:	ab02      	add	r3, sp, #8
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	ec45 4b10 	vmov	d0, r4, r5
 80100ac:	4653      	mov	r3, sl
 80100ae:	4632      	mov	r2, r6
 80100b0:	f000 fcea 	bl	8010a88 <_dtoa_r>
 80100b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80100b8:	4607      	mov	r7, r0
 80100ba:	d102      	bne.n	80100c2 <__cvt+0x66>
 80100bc:	f019 0f01 	tst.w	r9, #1
 80100c0:	d022      	beq.n	8010108 <__cvt+0xac>
 80100c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80100c6:	eb07 0906 	add.w	r9, r7, r6
 80100ca:	d110      	bne.n	80100ee <__cvt+0x92>
 80100cc:	783b      	ldrb	r3, [r7, #0]
 80100ce:	2b30      	cmp	r3, #48	; 0x30
 80100d0:	d10a      	bne.n	80100e8 <__cvt+0x8c>
 80100d2:	2200      	movs	r2, #0
 80100d4:	2300      	movs	r3, #0
 80100d6:	4620      	mov	r0, r4
 80100d8:	4629      	mov	r1, r5
 80100da:	f7f0 fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80100de:	b918      	cbnz	r0, 80100e8 <__cvt+0x8c>
 80100e0:	f1c6 0601 	rsb	r6, r6, #1
 80100e4:	f8ca 6000 	str.w	r6, [sl]
 80100e8:	f8da 3000 	ldr.w	r3, [sl]
 80100ec:	4499      	add	r9, r3
 80100ee:	2200      	movs	r2, #0
 80100f0:	2300      	movs	r3, #0
 80100f2:	4620      	mov	r0, r4
 80100f4:	4629      	mov	r1, r5
 80100f6:	f7f0 fce7 	bl	8000ac8 <__aeabi_dcmpeq>
 80100fa:	b108      	cbz	r0, 8010100 <__cvt+0xa4>
 80100fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8010100:	2230      	movs	r2, #48	; 0x30
 8010102:	9b03      	ldr	r3, [sp, #12]
 8010104:	454b      	cmp	r3, r9
 8010106:	d307      	bcc.n	8010118 <__cvt+0xbc>
 8010108:	9b03      	ldr	r3, [sp, #12]
 801010a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801010c:	1bdb      	subs	r3, r3, r7
 801010e:	4638      	mov	r0, r7
 8010110:	6013      	str	r3, [r2, #0]
 8010112:	b004      	add	sp, #16
 8010114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010118:	1c59      	adds	r1, r3, #1
 801011a:	9103      	str	r1, [sp, #12]
 801011c:	701a      	strb	r2, [r3, #0]
 801011e:	e7f0      	b.n	8010102 <__cvt+0xa6>

08010120 <__exponent>:
 8010120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010122:	4603      	mov	r3, r0
 8010124:	2900      	cmp	r1, #0
 8010126:	bfb8      	it	lt
 8010128:	4249      	neglt	r1, r1
 801012a:	f803 2b02 	strb.w	r2, [r3], #2
 801012e:	bfb4      	ite	lt
 8010130:	222d      	movlt	r2, #45	; 0x2d
 8010132:	222b      	movge	r2, #43	; 0x2b
 8010134:	2909      	cmp	r1, #9
 8010136:	7042      	strb	r2, [r0, #1]
 8010138:	dd2a      	ble.n	8010190 <__exponent+0x70>
 801013a:	f10d 0407 	add.w	r4, sp, #7
 801013e:	46a4      	mov	ip, r4
 8010140:	270a      	movs	r7, #10
 8010142:	46a6      	mov	lr, r4
 8010144:	460a      	mov	r2, r1
 8010146:	fb91 f6f7 	sdiv	r6, r1, r7
 801014a:	fb07 1516 	mls	r5, r7, r6, r1
 801014e:	3530      	adds	r5, #48	; 0x30
 8010150:	2a63      	cmp	r2, #99	; 0x63
 8010152:	f104 34ff 	add.w	r4, r4, #4294967295
 8010156:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801015a:	4631      	mov	r1, r6
 801015c:	dcf1      	bgt.n	8010142 <__exponent+0x22>
 801015e:	3130      	adds	r1, #48	; 0x30
 8010160:	f1ae 0502 	sub.w	r5, lr, #2
 8010164:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010168:	1c44      	adds	r4, r0, #1
 801016a:	4629      	mov	r1, r5
 801016c:	4561      	cmp	r1, ip
 801016e:	d30a      	bcc.n	8010186 <__exponent+0x66>
 8010170:	f10d 0209 	add.w	r2, sp, #9
 8010174:	eba2 020e 	sub.w	r2, r2, lr
 8010178:	4565      	cmp	r5, ip
 801017a:	bf88      	it	hi
 801017c:	2200      	movhi	r2, #0
 801017e:	4413      	add	r3, r2
 8010180:	1a18      	subs	r0, r3, r0
 8010182:	b003      	add	sp, #12
 8010184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010186:	f811 2b01 	ldrb.w	r2, [r1], #1
 801018a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801018e:	e7ed      	b.n	801016c <__exponent+0x4c>
 8010190:	2330      	movs	r3, #48	; 0x30
 8010192:	3130      	adds	r1, #48	; 0x30
 8010194:	7083      	strb	r3, [r0, #2]
 8010196:	70c1      	strb	r1, [r0, #3]
 8010198:	1d03      	adds	r3, r0, #4
 801019a:	e7f1      	b.n	8010180 <__exponent+0x60>

0801019c <_printf_float>:
 801019c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a0:	ed2d 8b02 	vpush	{d8}
 80101a4:	b08d      	sub	sp, #52	; 0x34
 80101a6:	460c      	mov	r4, r1
 80101a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80101ac:	4616      	mov	r6, r2
 80101ae:	461f      	mov	r7, r3
 80101b0:	4605      	mov	r5, r0
 80101b2:	f001 fa55 	bl	8011660 <_localeconv_r>
 80101b6:	f8d0 a000 	ldr.w	sl, [r0]
 80101ba:	4650      	mov	r0, sl
 80101bc:	f7f0 f808 	bl	80001d0 <strlen>
 80101c0:	2300      	movs	r3, #0
 80101c2:	930a      	str	r3, [sp, #40]	; 0x28
 80101c4:	6823      	ldr	r3, [r4, #0]
 80101c6:	9305      	str	r3, [sp, #20]
 80101c8:	f8d8 3000 	ldr.w	r3, [r8]
 80101cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80101d0:	3307      	adds	r3, #7
 80101d2:	f023 0307 	bic.w	r3, r3, #7
 80101d6:	f103 0208 	add.w	r2, r3, #8
 80101da:	f8c8 2000 	str.w	r2, [r8]
 80101de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80101e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80101ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80101ee:	9307      	str	r3, [sp, #28]
 80101f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80101f4:	ee08 0a10 	vmov	s16, r0
 80101f8:	4b9f      	ldr	r3, [pc, #636]	; (8010478 <_printf_float+0x2dc>)
 80101fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010202:	f7f0 fc93 	bl	8000b2c <__aeabi_dcmpun>
 8010206:	bb88      	cbnz	r0, 801026c <_printf_float+0xd0>
 8010208:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801020c:	4b9a      	ldr	r3, [pc, #616]	; (8010478 <_printf_float+0x2dc>)
 801020e:	f04f 32ff 	mov.w	r2, #4294967295
 8010212:	f7f0 fc6d 	bl	8000af0 <__aeabi_dcmple>
 8010216:	bb48      	cbnz	r0, 801026c <_printf_float+0xd0>
 8010218:	2200      	movs	r2, #0
 801021a:	2300      	movs	r3, #0
 801021c:	4640      	mov	r0, r8
 801021e:	4649      	mov	r1, r9
 8010220:	f7f0 fc5c 	bl	8000adc <__aeabi_dcmplt>
 8010224:	b110      	cbz	r0, 801022c <_printf_float+0x90>
 8010226:	232d      	movs	r3, #45	; 0x2d
 8010228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801022c:	4b93      	ldr	r3, [pc, #588]	; (801047c <_printf_float+0x2e0>)
 801022e:	4894      	ldr	r0, [pc, #592]	; (8010480 <_printf_float+0x2e4>)
 8010230:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010234:	bf94      	ite	ls
 8010236:	4698      	movls	r8, r3
 8010238:	4680      	movhi	r8, r0
 801023a:	2303      	movs	r3, #3
 801023c:	6123      	str	r3, [r4, #16]
 801023e:	9b05      	ldr	r3, [sp, #20]
 8010240:	f023 0204 	bic.w	r2, r3, #4
 8010244:	6022      	str	r2, [r4, #0]
 8010246:	f04f 0900 	mov.w	r9, #0
 801024a:	9700      	str	r7, [sp, #0]
 801024c:	4633      	mov	r3, r6
 801024e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010250:	4621      	mov	r1, r4
 8010252:	4628      	mov	r0, r5
 8010254:	f000 f9d8 	bl	8010608 <_printf_common>
 8010258:	3001      	adds	r0, #1
 801025a:	f040 8090 	bne.w	801037e <_printf_float+0x1e2>
 801025e:	f04f 30ff 	mov.w	r0, #4294967295
 8010262:	b00d      	add	sp, #52	; 0x34
 8010264:	ecbd 8b02 	vpop	{d8}
 8010268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801026c:	4642      	mov	r2, r8
 801026e:	464b      	mov	r3, r9
 8010270:	4640      	mov	r0, r8
 8010272:	4649      	mov	r1, r9
 8010274:	f7f0 fc5a 	bl	8000b2c <__aeabi_dcmpun>
 8010278:	b140      	cbz	r0, 801028c <_printf_float+0xf0>
 801027a:	464b      	mov	r3, r9
 801027c:	2b00      	cmp	r3, #0
 801027e:	bfbc      	itt	lt
 8010280:	232d      	movlt	r3, #45	; 0x2d
 8010282:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010286:	487f      	ldr	r0, [pc, #508]	; (8010484 <_printf_float+0x2e8>)
 8010288:	4b7f      	ldr	r3, [pc, #508]	; (8010488 <_printf_float+0x2ec>)
 801028a:	e7d1      	b.n	8010230 <_printf_float+0x94>
 801028c:	6863      	ldr	r3, [r4, #4]
 801028e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010292:	9206      	str	r2, [sp, #24]
 8010294:	1c5a      	adds	r2, r3, #1
 8010296:	d13f      	bne.n	8010318 <_printf_float+0x17c>
 8010298:	2306      	movs	r3, #6
 801029a:	6063      	str	r3, [r4, #4]
 801029c:	9b05      	ldr	r3, [sp, #20]
 801029e:	6861      	ldr	r1, [r4, #4]
 80102a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80102a4:	2300      	movs	r3, #0
 80102a6:	9303      	str	r3, [sp, #12]
 80102a8:	ab0a      	add	r3, sp, #40	; 0x28
 80102aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80102ae:	ab09      	add	r3, sp, #36	; 0x24
 80102b0:	ec49 8b10 	vmov	d0, r8, r9
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	6022      	str	r2, [r4, #0]
 80102b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80102bc:	4628      	mov	r0, r5
 80102be:	f7ff fecd 	bl	801005c <__cvt>
 80102c2:	9b06      	ldr	r3, [sp, #24]
 80102c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102c6:	2b47      	cmp	r3, #71	; 0x47
 80102c8:	4680      	mov	r8, r0
 80102ca:	d108      	bne.n	80102de <_printf_float+0x142>
 80102cc:	1cc8      	adds	r0, r1, #3
 80102ce:	db02      	blt.n	80102d6 <_printf_float+0x13a>
 80102d0:	6863      	ldr	r3, [r4, #4]
 80102d2:	4299      	cmp	r1, r3
 80102d4:	dd41      	ble.n	801035a <_printf_float+0x1be>
 80102d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80102da:	fa5f fb8b 	uxtb.w	fp, fp
 80102de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102e2:	d820      	bhi.n	8010326 <_printf_float+0x18a>
 80102e4:	3901      	subs	r1, #1
 80102e6:	465a      	mov	r2, fp
 80102e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80102ec:	9109      	str	r1, [sp, #36]	; 0x24
 80102ee:	f7ff ff17 	bl	8010120 <__exponent>
 80102f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102f4:	1813      	adds	r3, r2, r0
 80102f6:	2a01      	cmp	r2, #1
 80102f8:	4681      	mov	r9, r0
 80102fa:	6123      	str	r3, [r4, #16]
 80102fc:	dc02      	bgt.n	8010304 <_printf_float+0x168>
 80102fe:	6822      	ldr	r2, [r4, #0]
 8010300:	07d2      	lsls	r2, r2, #31
 8010302:	d501      	bpl.n	8010308 <_printf_float+0x16c>
 8010304:	3301      	adds	r3, #1
 8010306:	6123      	str	r3, [r4, #16]
 8010308:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801030c:	2b00      	cmp	r3, #0
 801030e:	d09c      	beq.n	801024a <_printf_float+0xae>
 8010310:	232d      	movs	r3, #45	; 0x2d
 8010312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010316:	e798      	b.n	801024a <_printf_float+0xae>
 8010318:	9a06      	ldr	r2, [sp, #24]
 801031a:	2a47      	cmp	r2, #71	; 0x47
 801031c:	d1be      	bne.n	801029c <_printf_float+0x100>
 801031e:	2b00      	cmp	r3, #0
 8010320:	d1bc      	bne.n	801029c <_printf_float+0x100>
 8010322:	2301      	movs	r3, #1
 8010324:	e7b9      	b.n	801029a <_printf_float+0xfe>
 8010326:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801032a:	d118      	bne.n	801035e <_printf_float+0x1c2>
 801032c:	2900      	cmp	r1, #0
 801032e:	6863      	ldr	r3, [r4, #4]
 8010330:	dd0b      	ble.n	801034a <_printf_float+0x1ae>
 8010332:	6121      	str	r1, [r4, #16]
 8010334:	b913      	cbnz	r3, 801033c <_printf_float+0x1a0>
 8010336:	6822      	ldr	r2, [r4, #0]
 8010338:	07d0      	lsls	r0, r2, #31
 801033a:	d502      	bpl.n	8010342 <_printf_float+0x1a6>
 801033c:	3301      	adds	r3, #1
 801033e:	440b      	add	r3, r1
 8010340:	6123      	str	r3, [r4, #16]
 8010342:	65a1      	str	r1, [r4, #88]	; 0x58
 8010344:	f04f 0900 	mov.w	r9, #0
 8010348:	e7de      	b.n	8010308 <_printf_float+0x16c>
 801034a:	b913      	cbnz	r3, 8010352 <_printf_float+0x1b6>
 801034c:	6822      	ldr	r2, [r4, #0]
 801034e:	07d2      	lsls	r2, r2, #31
 8010350:	d501      	bpl.n	8010356 <_printf_float+0x1ba>
 8010352:	3302      	adds	r3, #2
 8010354:	e7f4      	b.n	8010340 <_printf_float+0x1a4>
 8010356:	2301      	movs	r3, #1
 8010358:	e7f2      	b.n	8010340 <_printf_float+0x1a4>
 801035a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801035e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010360:	4299      	cmp	r1, r3
 8010362:	db05      	blt.n	8010370 <_printf_float+0x1d4>
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	6121      	str	r1, [r4, #16]
 8010368:	07d8      	lsls	r0, r3, #31
 801036a:	d5ea      	bpl.n	8010342 <_printf_float+0x1a6>
 801036c:	1c4b      	adds	r3, r1, #1
 801036e:	e7e7      	b.n	8010340 <_printf_float+0x1a4>
 8010370:	2900      	cmp	r1, #0
 8010372:	bfd4      	ite	le
 8010374:	f1c1 0202 	rsble	r2, r1, #2
 8010378:	2201      	movgt	r2, #1
 801037a:	4413      	add	r3, r2
 801037c:	e7e0      	b.n	8010340 <_printf_float+0x1a4>
 801037e:	6823      	ldr	r3, [r4, #0]
 8010380:	055a      	lsls	r2, r3, #21
 8010382:	d407      	bmi.n	8010394 <_printf_float+0x1f8>
 8010384:	6923      	ldr	r3, [r4, #16]
 8010386:	4642      	mov	r2, r8
 8010388:	4631      	mov	r1, r6
 801038a:	4628      	mov	r0, r5
 801038c:	47b8      	blx	r7
 801038e:	3001      	adds	r0, #1
 8010390:	d12c      	bne.n	80103ec <_printf_float+0x250>
 8010392:	e764      	b.n	801025e <_printf_float+0xc2>
 8010394:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010398:	f240 80e0 	bls.w	801055c <_printf_float+0x3c0>
 801039c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80103a0:	2200      	movs	r2, #0
 80103a2:	2300      	movs	r3, #0
 80103a4:	f7f0 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 80103a8:	2800      	cmp	r0, #0
 80103aa:	d034      	beq.n	8010416 <_printf_float+0x27a>
 80103ac:	4a37      	ldr	r2, [pc, #220]	; (801048c <_printf_float+0x2f0>)
 80103ae:	2301      	movs	r3, #1
 80103b0:	4631      	mov	r1, r6
 80103b2:	4628      	mov	r0, r5
 80103b4:	47b8      	blx	r7
 80103b6:	3001      	adds	r0, #1
 80103b8:	f43f af51 	beq.w	801025e <_printf_float+0xc2>
 80103bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103c0:	429a      	cmp	r2, r3
 80103c2:	db02      	blt.n	80103ca <_printf_float+0x22e>
 80103c4:	6823      	ldr	r3, [r4, #0]
 80103c6:	07d8      	lsls	r0, r3, #31
 80103c8:	d510      	bpl.n	80103ec <_printf_float+0x250>
 80103ca:	ee18 3a10 	vmov	r3, s16
 80103ce:	4652      	mov	r2, sl
 80103d0:	4631      	mov	r1, r6
 80103d2:	4628      	mov	r0, r5
 80103d4:	47b8      	blx	r7
 80103d6:	3001      	adds	r0, #1
 80103d8:	f43f af41 	beq.w	801025e <_printf_float+0xc2>
 80103dc:	f04f 0800 	mov.w	r8, #0
 80103e0:	f104 091a 	add.w	r9, r4, #26
 80103e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103e6:	3b01      	subs	r3, #1
 80103e8:	4543      	cmp	r3, r8
 80103ea:	dc09      	bgt.n	8010400 <_printf_float+0x264>
 80103ec:	6823      	ldr	r3, [r4, #0]
 80103ee:	079b      	lsls	r3, r3, #30
 80103f0:	f100 8105 	bmi.w	80105fe <_printf_float+0x462>
 80103f4:	68e0      	ldr	r0, [r4, #12]
 80103f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103f8:	4298      	cmp	r0, r3
 80103fa:	bfb8      	it	lt
 80103fc:	4618      	movlt	r0, r3
 80103fe:	e730      	b.n	8010262 <_printf_float+0xc6>
 8010400:	2301      	movs	r3, #1
 8010402:	464a      	mov	r2, r9
 8010404:	4631      	mov	r1, r6
 8010406:	4628      	mov	r0, r5
 8010408:	47b8      	blx	r7
 801040a:	3001      	adds	r0, #1
 801040c:	f43f af27 	beq.w	801025e <_printf_float+0xc2>
 8010410:	f108 0801 	add.w	r8, r8, #1
 8010414:	e7e6      	b.n	80103e4 <_printf_float+0x248>
 8010416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010418:	2b00      	cmp	r3, #0
 801041a:	dc39      	bgt.n	8010490 <_printf_float+0x2f4>
 801041c:	4a1b      	ldr	r2, [pc, #108]	; (801048c <_printf_float+0x2f0>)
 801041e:	2301      	movs	r3, #1
 8010420:	4631      	mov	r1, r6
 8010422:	4628      	mov	r0, r5
 8010424:	47b8      	blx	r7
 8010426:	3001      	adds	r0, #1
 8010428:	f43f af19 	beq.w	801025e <_printf_float+0xc2>
 801042c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010430:	4313      	orrs	r3, r2
 8010432:	d102      	bne.n	801043a <_printf_float+0x29e>
 8010434:	6823      	ldr	r3, [r4, #0]
 8010436:	07d9      	lsls	r1, r3, #31
 8010438:	d5d8      	bpl.n	80103ec <_printf_float+0x250>
 801043a:	ee18 3a10 	vmov	r3, s16
 801043e:	4652      	mov	r2, sl
 8010440:	4631      	mov	r1, r6
 8010442:	4628      	mov	r0, r5
 8010444:	47b8      	blx	r7
 8010446:	3001      	adds	r0, #1
 8010448:	f43f af09 	beq.w	801025e <_printf_float+0xc2>
 801044c:	f04f 0900 	mov.w	r9, #0
 8010450:	f104 0a1a 	add.w	sl, r4, #26
 8010454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010456:	425b      	negs	r3, r3
 8010458:	454b      	cmp	r3, r9
 801045a:	dc01      	bgt.n	8010460 <_printf_float+0x2c4>
 801045c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801045e:	e792      	b.n	8010386 <_printf_float+0x1ea>
 8010460:	2301      	movs	r3, #1
 8010462:	4652      	mov	r2, sl
 8010464:	4631      	mov	r1, r6
 8010466:	4628      	mov	r0, r5
 8010468:	47b8      	blx	r7
 801046a:	3001      	adds	r0, #1
 801046c:	f43f aef7 	beq.w	801025e <_printf_float+0xc2>
 8010470:	f109 0901 	add.w	r9, r9, #1
 8010474:	e7ee      	b.n	8010454 <_printf_float+0x2b8>
 8010476:	bf00      	nop
 8010478:	7fefffff 	.word	0x7fefffff
 801047c:	080134fc 	.word	0x080134fc
 8010480:	08013500 	.word	0x08013500
 8010484:	08013508 	.word	0x08013508
 8010488:	08013504 	.word	0x08013504
 801048c:	0801350c 	.word	0x0801350c
 8010490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010494:	429a      	cmp	r2, r3
 8010496:	bfa8      	it	ge
 8010498:	461a      	movge	r2, r3
 801049a:	2a00      	cmp	r2, #0
 801049c:	4691      	mov	r9, r2
 801049e:	dc37      	bgt.n	8010510 <_printf_float+0x374>
 80104a0:	f04f 0b00 	mov.w	fp, #0
 80104a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104a8:	f104 021a 	add.w	r2, r4, #26
 80104ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80104ae:	9305      	str	r3, [sp, #20]
 80104b0:	eba3 0309 	sub.w	r3, r3, r9
 80104b4:	455b      	cmp	r3, fp
 80104b6:	dc33      	bgt.n	8010520 <_printf_float+0x384>
 80104b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104bc:	429a      	cmp	r2, r3
 80104be:	db3b      	blt.n	8010538 <_printf_float+0x39c>
 80104c0:	6823      	ldr	r3, [r4, #0]
 80104c2:	07da      	lsls	r2, r3, #31
 80104c4:	d438      	bmi.n	8010538 <_printf_float+0x39c>
 80104c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104c8:	9b05      	ldr	r3, [sp, #20]
 80104ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	eba2 0901 	sub.w	r9, r2, r1
 80104d2:	4599      	cmp	r9, r3
 80104d4:	bfa8      	it	ge
 80104d6:	4699      	movge	r9, r3
 80104d8:	f1b9 0f00 	cmp.w	r9, #0
 80104dc:	dc35      	bgt.n	801054a <_printf_float+0x3ae>
 80104de:	f04f 0800 	mov.w	r8, #0
 80104e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104e6:	f104 0a1a 	add.w	sl, r4, #26
 80104ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104ee:	1a9b      	subs	r3, r3, r2
 80104f0:	eba3 0309 	sub.w	r3, r3, r9
 80104f4:	4543      	cmp	r3, r8
 80104f6:	f77f af79 	ble.w	80103ec <_printf_float+0x250>
 80104fa:	2301      	movs	r3, #1
 80104fc:	4652      	mov	r2, sl
 80104fe:	4631      	mov	r1, r6
 8010500:	4628      	mov	r0, r5
 8010502:	47b8      	blx	r7
 8010504:	3001      	adds	r0, #1
 8010506:	f43f aeaa 	beq.w	801025e <_printf_float+0xc2>
 801050a:	f108 0801 	add.w	r8, r8, #1
 801050e:	e7ec      	b.n	80104ea <_printf_float+0x34e>
 8010510:	4613      	mov	r3, r2
 8010512:	4631      	mov	r1, r6
 8010514:	4642      	mov	r2, r8
 8010516:	4628      	mov	r0, r5
 8010518:	47b8      	blx	r7
 801051a:	3001      	adds	r0, #1
 801051c:	d1c0      	bne.n	80104a0 <_printf_float+0x304>
 801051e:	e69e      	b.n	801025e <_printf_float+0xc2>
 8010520:	2301      	movs	r3, #1
 8010522:	4631      	mov	r1, r6
 8010524:	4628      	mov	r0, r5
 8010526:	9205      	str	r2, [sp, #20]
 8010528:	47b8      	blx	r7
 801052a:	3001      	adds	r0, #1
 801052c:	f43f ae97 	beq.w	801025e <_printf_float+0xc2>
 8010530:	9a05      	ldr	r2, [sp, #20]
 8010532:	f10b 0b01 	add.w	fp, fp, #1
 8010536:	e7b9      	b.n	80104ac <_printf_float+0x310>
 8010538:	ee18 3a10 	vmov	r3, s16
 801053c:	4652      	mov	r2, sl
 801053e:	4631      	mov	r1, r6
 8010540:	4628      	mov	r0, r5
 8010542:	47b8      	blx	r7
 8010544:	3001      	adds	r0, #1
 8010546:	d1be      	bne.n	80104c6 <_printf_float+0x32a>
 8010548:	e689      	b.n	801025e <_printf_float+0xc2>
 801054a:	9a05      	ldr	r2, [sp, #20]
 801054c:	464b      	mov	r3, r9
 801054e:	4442      	add	r2, r8
 8010550:	4631      	mov	r1, r6
 8010552:	4628      	mov	r0, r5
 8010554:	47b8      	blx	r7
 8010556:	3001      	adds	r0, #1
 8010558:	d1c1      	bne.n	80104de <_printf_float+0x342>
 801055a:	e680      	b.n	801025e <_printf_float+0xc2>
 801055c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801055e:	2a01      	cmp	r2, #1
 8010560:	dc01      	bgt.n	8010566 <_printf_float+0x3ca>
 8010562:	07db      	lsls	r3, r3, #31
 8010564:	d538      	bpl.n	80105d8 <_printf_float+0x43c>
 8010566:	2301      	movs	r3, #1
 8010568:	4642      	mov	r2, r8
 801056a:	4631      	mov	r1, r6
 801056c:	4628      	mov	r0, r5
 801056e:	47b8      	blx	r7
 8010570:	3001      	adds	r0, #1
 8010572:	f43f ae74 	beq.w	801025e <_printf_float+0xc2>
 8010576:	ee18 3a10 	vmov	r3, s16
 801057a:	4652      	mov	r2, sl
 801057c:	4631      	mov	r1, r6
 801057e:	4628      	mov	r0, r5
 8010580:	47b8      	blx	r7
 8010582:	3001      	adds	r0, #1
 8010584:	f43f ae6b 	beq.w	801025e <_printf_float+0xc2>
 8010588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801058c:	2200      	movs	r2, #0
 801058e:	2300      	movs	r3, #0
 8010590:	f7f0 fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010594:	b9d8      	cbnz	r0, 80105ce <_printf_float+0x432>
 8010596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010598:	f108 0201 	add.w	r2, r8, #1
 801059c:	3b01      	subs	r3, #1
 801059e:	4631      	mov	r1, r6
 80105a0:	4628      	mov	r0, r5
 80105a2:	47b8      	blx	r7
 80105a4:	3001      	adds	r0, #1
 80105a6:	d10e      	bne.n	80105c6 <_printf_float+0x42a>
 80105a8:	e659      	b.n	801025e <_printf_float+0xc2>
 80105aa:	2301      	movs	r3, #1
 80105ac:	4652      	mov	r2, sl
 80105ae:	4631      	mov	r1, r6
 80105b0:	4628      	mov	r0, r5
 80105b2:	47b8      	blx	r7
 80105b4:	3001      	adds	r0, #1
 80105b6:	f43f ae52 	beq.w	801025e <_printf_float+0xc2>
 80105ba:	f108 0801 	add.w	r8, r8, #1
 80105be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105c0:	3b01      	subs	r3, #1
 80105c2:	4543      	cmp	r3, r8
 80105c4:	dcf1      	bgt.n	80105aa <_printf_float+0x40e>
 80105c6:	464b      	mov	r3, r9
 80105c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80105cc:	e6dc      	b.n	8010388 <_printf_float+0x1ec>
 80105ce:	f04f 0800 	mov.w	r8, #0
 80105d2:	f104 0a1a 	add.w	sl, r4, #26
 80105d6:	e7f2      	b.n	80105be <_printf_float+0x422>
 80105d8:	2301      	movs	r3, #1
 80105da:	4642      	mov	r2, r8
 80105dc:	e7df      	b.n	801059e <_printf_float+0x402>
 80105de:	2301      	movs	r3, #1
 80105e0:	464a      	mov	r2, r9
 80105e2:	4631      	mov	r1, r6
 80105e4:	4628      	mov	r0, r5
 80105e6:	47b8      	blx	r7
 80105e8:	3001      	adds	r0, #1
 80105ea:	f43f ae38 	beq.w	801025e <_printf_float+0xc2>
 80105ee:	f108 0801 	add.w	r8, r8, #1
 80105f2:	68e3      	ldr	r3, [r4, #12]
 80105f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80105f6:	1a5b      	subs	r3, r3, r1
 80105f8:	4543      	cmp	r3, r8
 80105fa:	dcf0      	bgt.n	80105de <_printf_float+0x442>
 80105fc:	e6fa      	b.n	80103f4 <_printf_float+0x258>
 80105fe:	f04f 0800 	mov.w	r8, #0
 8010602:	f104 0919 	add.w	r9, r4, #25
 8010606:	e7f4      	b.n	80105f2 <_printf_float+0x456>

08010608 <_printf_common>:
 8010608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801060c:	4616      	mov	r6, r2
 801060e:	4699      	mov	r9, r3
 8010610:	688a      	ldr	r2, [r1, #8]
 8010612:	690b      	ldr	r3, [r1, #16]
 8010614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010618:	4293      	cmp	r3, r2
 801061a:	bfb8      	it	lt
 801061c:	4613      	movlt	r3, r2
 801061e:	6033      	str	r3, [r6, #0]
 8010620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010624:	4607      	mov	r7, r0
 8010626:	460c      	mov	r4, r1
 8010628:	b10a      	cbz	r2, 801062e <_printf_common+0x26>
 801062a:	3301      	adds	r3, #1
 801062c:	6033      	str	r3, [r6, #0]
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	0699      	lsls	r1, r3, #26
 8010632:	bf42      	ittt	mi
 8010634:	6833      	ldrmi	r3, [r6, #0]
 8010636:	3302      	addmi	r3, #2
 8010638:	6033      	strmi	r3, [r6, #0]
 801063a:	6825      	ldr	r5, [r4, #0]
 801063c:	f015 0506 	ands.w	r5, r5, #6
 8010640:	d106      	bne.n	8010650 <_printf_common+0x48>
 8010642:	f104 0a19 	add.w	sl, r4, #25
 8010646:	68e3      	ldr	r3, [r4, #12]
 8010648:	6832      	ldr	r2, [r6, #0]
 801064a:	1a9b      	subs	r3, r3, r2
 801064c:	42ab      	cmp	r3, r5
 801064e:	dc26      	bgt.n	801069e <_printf_common+0x96>
 8010650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010654:	1e13      	subs	r3, r2, #0
 8010656:	6822      	ldr	r2, [r4, #0]
 8010658:	bf18      	it	ne
 801065a:	2301      	movne	r3, #1
 801065c:	0692      	lsls	r2, r2, #26
 801065e:	d42b      	bmi.n	80106b8 <_printf_common+0xb0>
 8010660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010664:	4649      	mov	r1, r9
 8010666:	4638      	mov	r0, r7
 8010668:	47c0      	blx	r8
 801066a:	3001      	adds	r0, #1
 801066c:	d01e      	beq.n	80106ac <_printf_common+0xa4>
 801066e:	6823      	ldr	r3, [r4, #0]
 8010670:	68e5      	ldr	r5, [r4, #12]
 8010672:	6832      	ldr	r2, [r6, #0]
 8010674:	f003 0306 	and.w	r3, r3, #6
 8010678:	2b04      	cmp	r3, #4
 801067a:	bf08      	it	eq
 801067c:	1aad      	subeq	r5, r5, r2
 801067e:	68a3      	ldr	r3, [r4, #8]
 8010680:	6922      	ldr	r2, [r4, #16]
 8010682:	bf0c      	ite	eq
 8010684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010688:	2500      	movne	r5, #0
 801068a:	4293      	cmp	r3, r2
 801068c:	bfc4      	itt	gt
 801068e:	1a9b      	subgt	r3, r3, r2
 8010690:	18ed      	addgt	r5, r5, r3
 8010692:	2600      	movs	r6, #0
 8010694:	341a      	adds	r4, #26
 8010696:	42b5      	cmp	r5, r6
 8010698:	d11a      	bne.n	80106d0 <_printf_common+0xc8>
 801069a:	2000      	movs	r0, #0
 801069c:	e008      	b.n	80106b0 <_printf_common+0xa8>
 801069e:	2301      	movs	r3, #1
 80106a0:	4652      	mov	r2, sl
 80106a2:	4649      	mov	r1, r9
 80106a4:	4638      	mov	r0, r7
 80106a6:	47c0      	blx	r8
 80106a8:	3001      	adds	r0, #1
 80106aa:	d103      	bne.n	80106b4 <_printf_common+0xac>
 80106ac:	f04f 30ff 	mov.w	r0, #4294967295
 80106b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b4:	3501      	adds	r5, #1
 80106b6:	e7c6      	b.n	8010646 <_printf_common+0x3e>
 80106b8:	18e1      	adds	r1, r4, r3
 80106ba:	1c5a      	adds	r2, r3, #1
 80106bc:	2030      	movs	r0, #48	; 0x30
 80106be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106c2:	4422      	add	r2, r4
 80106c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106cc:	3302      	adds	r3, #2
 80106ce:	e7c7      	b.n	8010660 <_printf_common+0x58>
 80106d0:	2301      	movs	r3, #1
 80106d2:	4622      	mov	r2, r4
 80106d4:	4649      	mov	r1, r9
 80106d6:	4638      	mov	r0, r7
 80106d8:	47c0      	blx	r8
 80106da:	3001      	adds	r0, #1
 80106dc:	d0e6      	beq.n	80106ac <_printf_common+0xa4>
 80106de:	3601      	adds	r6, #1
 80106e0:	e7d9      	b.n	8010696 <_printf_common+0x8e>
	...

080106e4 <_printf_i>:
 80106e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106e8:	460c      	mov	r4, r1
 80106ea:	4691      	mov	r9, r2
 80106ec:	7e27      	ldrb	r7, [r4, #24]
 80106ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80106f0:	2f78      	cmp	r7, #120	; 0x78
 80106f2:	4680      	mov	r8, r0
 80106f4:	469a      	mov	sl, r3
 80106f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106fa:	d807      	bhi.n	801070c <_printf_i+0x28>
 80106fc:	2f62      	cmp	r7, #98	; 0x62
 80106fe:	d80a      	bhi.n	8010716 <_printf_i+0x32>
 8010700:	2f00      	cmp	r7, #0
 8010702:	f000 80d8 	beq.w	80108b6 <_printf_i+0x1d2>
 8010706:	2f58      	cmp	r7, #88	; 0x58
 8010708:	f000 80a3 	beq.w	8010852 <_printf_i+0x16e>
 801070c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010714:	e03a      	b.n	801078c <_printf_i+0xa8>
 8010716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801071a:	2b15      	cmp	r3, #21
 801071c:	d8f6      	bhi.n	801070c <_printf_i+0x28>
 801071e:	a001      	add	r0, pc, #4	; (adr r0, 8010724 <_printf_i+0x40>)
 8010720:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010724:	0801077d 	.word	0x0801077d
 8010728:	08010791 	.word	0x08010791
 801072c:	0801070d 	.word	0x0801070d
 8010730:	0801070d 	.word	0x0801070d
 8010734:	0801070d 	.word	0x0801070d
 8010738:	0801070d 	.word	0x0801070d
 801073c:	08010791 	.word	0x08010791
 8010740:	0801070d 	.word	0x0801070d
 8010744:	0801070d 	.word	0x0801070d
 8010748:	0801070d 	.word	0x0801070d
 801074c:	0801070d 	.word	0x0801070d
 8010750:	0801089d 	.word	0x0801089d
 8010754:	080107c1 	.word	0x080107c1
 8010758:	0801087f 	.word	0x0801087f
 801075c:	0801070d 	.word	0x0801070d
 8010760:	0801070d 	.word	0x0801070d
 8010764:	080108bf 	.word	0x080108bf
 8010768:	0801070d 	.word	0x0801070d
 801076c:	080107c1 	.word	0x080107c1
 8010770:	0801070d 	.word	0x0801070d
 8010774:	0801070d 	.word	0x0801070d
 8010778:	08010887 	.word	0x08010887
 801077c:	680b      	ldr	r3, [r1, #0]
 801077e:	1d1a      	adds	r2, r3, #4
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	600a      	str	r2, [r1, #0]
 8010784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801078c:	2301      	movs	r3, #1
 801078e:	e0a3      	b.n	80108d8 <_printf_i+0x1f4>
 8010790:	6825      	ldr	r5, [r4, #0]
 8010792:	6808      	ldr	r0, [r1, #0]
 8010794:	062e      	lsls	r6, r5, #24
 8010796:	f100 0304 	add.w	r3, r0, #4
 801079a:	d50a      	bpl.n	80107b2 <_printf_i+0xce>
 801079c:	6805      	ldr	r5, [r0, #0]
 801079e:	600b      	str	r3, [r1, #0]
 80107a0:	2d00      	cmp	r5, #0
 80107a2:	da03      	bge.n	80107ac <_printf_i+0xc8>
 80107a4:	232d      	movs	r3, #45	; 0x2d
 80107a6:	426d      	negs	r5, r5
 80107a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107ac:	485e      	ldr	r0, [pc, #376]	; (8010928 <_printf_i+0x244>)
 80107ae:	230a      	movs	r3, #10
 80107b0:	e019      	b.n	80107e6 <_printf_i+0x102>
 80107b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80107b6:	6805      	ldr	r5, [r0, #0]
 80107b8:	600b      	str	r3, [r1, #0]
 80107ba:	bf18      	it	ne
 80107bc:	b22d      	sxthne	r5, r5
 80107be:	e7ef      	b.n	80107a0 <_printf_i+0xbc>
 80107c0:	680b      	ldr	r3, [r1, #0]
 80107c2:	6825      	ldr	r5, [r4, #0]
 80107c4:	1d18      	adds	r0, r3, #4
 80107c6:	6008      	str	r0, [r1, #0]
 80107c8:	0628      	lsls	r0, r5, #24
 80107ca:	d501      	bpl.n	80107d0 <_printf_i+0xec>
 80107cc:	681d      	ldr	r5, [r3, #0]
 80107ce:	e002      	b.n	80107d6 <_printf_i+0xf2>
 80107d0:	0669      	lsls	r1, r5, #25
 80107d2:	d5fb      	bpl.n	80107cc <_printf_i+0xe8>
 80107d4:	881d      	ldrh	r5, [r3, #0]
 80107d6:	4854      	ldr	r0, [pc, #336]	; (8010928 <_printf_i+0x244>)
 80107d8:	2f6f      	cmp	r7, #111	; 0x6f
 80107da:	bf0c      	ite	eq
 80107dc:	2308      	moveq	r3, #8
 80107de:	230a      	movne	r3, #10
 80107e0:	2100      	movs	r1, #0
 80107e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80107e6:	6866      	ldr	r6, [r4, #4]
 80107e8:	60a6      	str	r6, [r4, #8]
 80107ea:	2e00      	cmp	r6, #0
 80107ec:	bfa2      	ittt	ge
 80107ee:	6821      	ldrge	r1, [r4, #0]
 80107f0:	f021 0104 	bicge.w	r1, r1, #4
 80107f4:	6021      	strge	r1, [r4, #0]
 80107f6:	b90d      	cbnz	r5, 80107fc <_printf_i+0x118>
 80107f8:	2e00      	cmp	r6, #0
 80107fa:	d04d      	beq.n	8010898 <_printf_i+0x1b4>
 80107fc:	4616      	mov	r6, r2
 80107fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8010802:	fb03 5711 	mls	r7, r3, r1, r5
 8010806:	5dc7      	ldrb	r7, [r0, r7]
 8010808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801080c:	462f      	mov	r7, r5
 801080e:	42bb      	cmp	r3, r7
 8010810:	460d      	mov	r5, r1
 8010812:	d9f4      	bls.n	80107fe <_printf_i+0x11a>
 8010814:	2b08      	cmp	r3, #8
 8010816:	d10b      	bne.n	8010830 <_printf_i+0x14c>
 8010818:	6823      	ldr	r3, [r4, #0]
 801081a:	07df      	lsls	r7, r3, #31
 801081c:	d508      	bpl.n	8010830 <_printf_i+0x14c>
 801081e:	6923      	ldr	r3, [r4, #16]
 8010820:	6861      	ldr	r1, [r4, #4]
 8010822:	4299      	cmp	r1, r3
 8010824:	bfde      	ittt	le
 8010826:	2330      	movle	r3, #48	; 0x30
 8010828:	f806 3c01 	strble.w	r3, [r6, #-1]
 801082c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010830:	1b92      	subs	r2, r2, r6
 8010832:	6122      	str	r2, [r4, #16]
 8010834:	f8cd a000 	str.w	sl, [sp]
 8010838:	464b      	mov	r3, r9
 801083a:	aa03      	add	r2, sp, #12
 801083c:	4621      	mov	r1, r4
 801083e:	4640      	mov	r0, r8
 8010840:	f7ff fee2 	bl	8010608 <_printf_common>
 8010844:	3001      	adds	r0, #1
 8010846:	d14c      	bne.n	80108e2 <_printf_i+0x1fe>
 8010848:	f04f 30ff 	mov.w	r0, #4294967295
 801084c:	b004      	add	sp, #16
 801084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010852:	4835      	ldr	r0, [pc, #212]	; (8010928 <_printf_i+0x244>)
 8010854:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010858:	6823      	ldr	r3, [r4, #0]
 801085a:	680e      	ldr	r6, [r1, #0]
 801085c:	061f      	lsls	r7, r3, #24
 801085e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010862:	600e      	str	r6, [r1, #0]
 8010864:	d514      	bpl.n	8010890 <_printf_i+0x1ac>
 8010866:	07d9      	lsls	r1, r3, #31
 8010868:	bf44      	itt	mi
 801086a:	f043 0320 	orrmi.w	r3, r3, #32
 801086e:	6023      	strmi	r3, [r4, #0]
 8010870:	b91d      	cbnz	r5, 801087a <_printf_i+0x196>
 8010872:	6823      	ldr	r3, [r4, #0]
 8010874:	f023 0320 	bic.w	r3, r3, #32
 8010878:	6023      	str	r3, [r4, #0]
 801087a:	2310      	movs	r3, #16
 801087c:	e7b0      	b.n	80107e0 <_printf_i+0xfc>
 801087e:	6823      	ldr	r3, [r4, #0]
 8010880:	f043 0320 	orr.w	r3, r3, #32
 8010884:	6023      	str	r3, [r4, #0]
 8010886:	2378      	movs	r3, #120	; 0x78
 8010888:	4828      	ldr	r0, [pc, #160]	; (801092c <_printf_i+0x248>)
 801088a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801088e:	e7e3      	b.n	8010858 <_printf_i+0x174>
 8010890:	065e      	lsls	r6, r3, #25
 8010892:	bf48      	it	mi
 8010894:	b2ad      	uxthmi	r5, r5
 8010896:	e7e6      	b.n	8010866 <_printf_i+0x182>
 8010898:	4616      	mov	r6, r2
 801089a:	e7bb      	b.n	8010814 <_printf_i+0x130>
 801089c:	680b      	ldr	r3, [r1, #0]
 801089e:	6826      	ldr	r6, [r4, #0]
 80108a0:	6960      	ldr	r0, [r4, #20]
 80108a2:	1d1d      	adds	r5, r3, #4
 80108a4:	600d      	str	r5, [r1, #0]
 80108a6:	0635      	lsls	r5, r6, #24
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	d501      	bpl.n	80108b0 <_printf_i+0x1cc>
 80108ac:	6018      	str	r0, [r3, #0]
 80108ae:	e002      	b.n	80108b6 <_printf_i+0x1d2>
 80108b0:	0671      	lsls	r1, r6, #25
 80108b2:	d5fb      	bpl.n	80108ac <_printf_i+0x1c8>
 80108b4:	8018      	strh	r0, [r3, #0]
 80108b6:	2300      	movs	r3, #0
 80108b8:	6123      	str	r3, [r4, #16]
 80108ba:	4616      	mov	r6, r2
 80108bc:	e7ba      	b.n	8010834 <_printf_i+0x150>
 80108be:	680b      	ldr	r3, [r1, #0]
 80108c0:	1d1a      	adds	r2, r3, #4
 80108c2:	600a      	str	r2, [r1, #0]
 80108c4:	681e      	ldr	r6, [r3, #0]
 80108c6:	6862      	ldr	r2, [r4, #4]
 80108c8:	2100      	movs	r1, #0
 80108ca:	4630      	mov	r0, r6
 80108cc:	f7ef fc88 	bl	80001e0 <memchr>
 80108d0:	b108      	cbz	r0, 80108d6 <_printf_i+0x1f2>
 80108d2:	1b80      	subs	r0, r0, r6
 80108d4:	6060      	str	r0, [r4, #4]
 80108d6:	6863      	ldr	r3, [r4, #4]
 80108d8:	6123      	str	r3, [r4, #16]
 80108da:	2300      	movs	r3, #0
 80108dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108e0:	e7a8      	b.n	8010834 <_printf_i+0x150>
 80108e2:	6923      	ldr	r3, [r4, #16]
 80108e4:	4632      	mov	r2, r6
 80108e6:	4649      	mov	r1, r9
 80108e8:	4640      	mov	r0, r8
 80108ea:	47d0      	blx	sl
 80108ec:	3001      	adds	r0, #1
 80108ee:	d0ab      	beq.n	8010848 <_printf_i+0x164>
 80108f0:	6823      	ldr	r3, [r4, #0]
 80108f2:	079b      	lsls	r3, r3, #30
 80108f4:	d413      	bmi.n	801091e <_printf_i+0x23a>
 80108f6:	68e0      	ldr	r0, [r4, #12]
 80108f8:	9b03      	ldr	r3, [sp, #12]
 80108fa:	4298      	cmp	r0, r3
 80108fc:	bfb8      	it	lt
 80108fe:	4618      	movlt	r0, r3
 8010900:	e7a4      	b.n	801084c <_printf_i+0x168>
 8010902:	2301      	movs	r3, #1
 8010904:	4632      	mov	r2, r6
 8010906:	4649      	mov	r1, r9
 8010908:	4640      	mov	r0, r8
 801090a:	47d0      	blx	sl
 801090c:	3001      	adds	r0, #1
 801090e:	d09b      	beq.n	8010848 <_printf_i+0x164>
 8010910:	3501      	adds	r5, #1
 8010912:	68e3      	ldr	r3, [r4, #12]
 8010914:	9903      	ldr	r1, [sp, #12]
 8010916:	1a5b      	subs	r3, r3, r1
 8010918:	42ab      	cmp	r3, r5
 801091a:	dcf2      	bgt.n	8010902 <_printf_i+0x21e>
 801091c:	e7eb      	b.n	80108f6 <_printf_i+0x212>
 801091e:	2500      	movs	r5, #0
 8010920:	f104 0619 	add.w	r6, r4, #25
 8010924:	e7f5      	b.n	8010912 <_printf_i+0x22e>
 8010926:	bf00      	nop
 8010928:	0801350e 	.word	0x0801350e
 801092c:	0801351f 	.word	0x0801351f

08010930 <siprintf>:
 8010930:	b40e      	push	{r1, r2, r3}
 8010932:	b500      	push	{lr}
 8010934:	b09c      	sub	sp, #112	; 0x70
 8010936:	ab1d      	add	r3, sp, #116	; 0x74
 8010938:	9002      	str	r0, [sp, #8]
 801093a:	9006      	str	r0, [sp, #24]
 801093c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010940:	4809      	ldr	r0, [pc, #36]	; (8010968 <siprintf+0x38>)
 8010942:	9107      	str	r1, [sp, #28]
 8010944:	9104      	str	r1, [sp, #16]
 8010946:	4909      	ldr	r1, [pc, #36]	; (801096c <siprintf+0x3c>)
 8010948:	f853 2b04 	ldr.w	r2, [r3], #4
 801094c:	9105      	str	r1, [sp, #20]
 801094e:	6800      	ldr	r0, [r0, #0]
 8010950:	9301      	str	r3, [sp, #4]
 8010952:	a902      	add	r1, sp, #8
 8010954:	f001 fb24 	bl	8011fa0 <_svfiprintf_r>
 8010958:	9b02      	ldr	r3, [sp, #8]
 801095a:	2200      	movs	r2, #0
 801095c:	701a      	strb	r2, [r3, #0]
 801095e:	b01c      	add	sp, #112	; 0x70
 8010960:	f85d eb04 	ldr.w	lr, [sp], #4
 8010964:	b003      	add	sp, #12
 8010966:	4770      	bx	lr
 8010968:	20000020 	.word	0x20000020
 801096c:	ffff0208 	.word	0xffff0208

08010970 <quorem>:
 8010970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010974:	6903      	ldr	r3, [r0, #16]
 8010976:	690c      	ldr	r4, [r1, #16]
 8010978:	42a3      	cmp	r3, r4
 801097a:	4607      	mov	r7, r0
 801097c:	f2c0 8081 	blt.w	8010a82 <quorem+0x112>
 8010980:	3c01      	subs	r4, #1
 8010982:	f101 0814 	add.w	r8, r1, #20
 8010986:	f100 0514 	add.w	r5, r0, #20
 801098a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801098e:	9301      	str	r3, [sp, #4]
 8010990:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010998:	3301      	adds	r3, #1
 801099a:	429a      	cmp	r2, r3
 801099c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80109a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80109a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80109a8:	d331      	bcc.n	8010a0e <quorem+0x9e>
 80109aa:	f04f 0e00 	mov.w	lr, #0
 80109ae:	4640      	mov	r0, r8
 80109b0:	46ac      	mov	ip, r5
 80109b2:	46f2      	mov	sl, lr
 80109b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80109b8:	b293      	uxth	r3, r2
 80109ba:	fb06 e303 	mla	r3, r6, r3, lr
 80109be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	ebaa 0303 	sub.w	r3, sl, r3
 80109c8:	0c12      	lsrs	r2, r2, #16
 80109ca:	f8dc a000 	ldr.w	sl, [ip]
 80109ce:	fb06 e202 	mla	r2, r6, r2, lr
 80109d2:	fa13 f38a 	uxtah	r3, r3, sl
 80109d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80109da:	fa1f fa82 	uxth.w	sl, r2
 80109de:	f8dc 2000 	ldr.w	r2, [ip]
 80109e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80109e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109f0:	4581      	cmp	r9, r0
 80109f2:	f84c 3b04 	str.w	r3, [ip], #4
 80109f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80109fa:	d2db      	bcs.n	80109b4 <quorem+0x44>
 80109fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a00:	b92b      	cbnz	r3, 8010a0e <quorem+0x9e>
 8010a02:	9b01      	ldr	r3, [sp, #4]
 8010a04:	3b04      	subs	r3, #4
 8010a06:	429d      	cmp	r5, r3
 8010a08:	461a      	mov	r2, r3
 8010a0a:	d32e      	bcc.n	8010a6a <quorem+0xfa>
 8010a0c:	613c      	str	r4, [r7, #16]
 8010a0e:	4638      	mov	r0, r7
 8010a10:	f001 f8b0 	bl	8011b74 <__mcmp>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	db24      	blt.n	8010a62 <quorem+0xf2>
 8010a18:	3601      	adds	r6, #1
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f04f 0c00 	mov.w	ip, #0
 8010a20:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a24:	f8d0 e000 	ldr.w	lr, [r0]
 8010a28:	b293      	uxth	r3, r2
 8010a2a:	ebac 0303 	sub.w	r3, ip, r3
 8010a2e:	0c12      	lsrs	r2, r2, #16
 8010a30:	fa13 f38e 	uxtah	r3, r3, lr
 8010a34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010a38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a42:	45c1      	cmp	r9, r8
 8010a44:	f840 3b04 	str.w	r3, [r0], #4
 8010a48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010a4c:	d2e8      	bcs.n	8010a20 <quorem+0xb0>
 8010a4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a56:	b922      	cbnz	r2, 8010a62 <quorem+0xf2>
 8010a58:	3b04      	subs	r3, #4
 8010a5a:	429d      	cmp	r5, r3
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	d30a      	bcc.n	8010a76 <quorem+0x106>
 8010a60:	613c      	str	r4, [r7, #16]
 8010a62:	4630      	mov	r0, r6
 8010a64:	b003      	add	sp, #12
 8010a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a6a:	6812      	ldr	r2, [r2, #0]
 8010a6c:	3b04      	subs	r3, #4
 8010a6e:	2a00      	cmp	r2, #0
 8010a70:	d1cc      	bne.n	8010a0c <quorem+0x9c>
 8010a72:	3c01      	subs	r4, #1
 8010a74:	e7c7      	b.n	8010a06 <quorem+0x96>
 8010a76:	6812      	ldr	r2, [r2, #0]
 8010a78:	3b04      	subs	r3, #4
 8010a7a:	2a00      	cmp	r2, #0
 8010a7c:	d1f0      	bne.n	8010a60 <quorem+0xf0>
 8010a7e:	3c01      	subs	r4, #1
 8010a80:	e7eb      	b.n	8010a5a <quorem+0xea>
 8010a82:	2000      	movs	r0, #0
 8010a84:	e7ee      	b.n	8010a64 <quorem+0xf4>
	...

08010a88 <_dtoa_r>:
 8010a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a8c:	ed2d 8b02 	vpush	{d8}
 8010a90:	ec57 6b10 	vmov	r6, r7, d0
 8010a94:	b095      	sub	sp, #84	; 0x54
 8010a96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010a98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010a9c:	9105      	str	r1, [sp, #20]
 8010a9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8010aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010aa8:	b975      	cbnz	r5, 8010ac8 <_dtoa_r+0x40>
 8010aaa:	2010      	movs	r0, #16
 8010aac:	f000 fddc 	bl	8011668 <malloc>
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	6260      	str	r0, [r4, #36]	; 0x24
 8010ab4:	b920      	cbnz	r0, 8010ac0 <_dtoa_r+0x38>
 8010ab6:	4bb2      	ldr	r3, [pc, #712]	; (8010d80 <_dtoa_r+0x2f8>)
 8010ab8:	21ea      	movs	r1, #234	; 0xea
 8010aba:	48b2      	ldr	r0, [pc, #712]	; (8010d84 <_dtoa_r+0x2fc>)
 8010abc:	f001 fb80 	bl	80121c0 <__assert_func>
 8010ac0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010ac4:	6005      	str	r5, [r0, #0]
 8010ac6:	60c5      	str	r5, [r0, #12]
 8010ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010aca:	6819      	ldr	r1, [r3, #0]
 8010acc:	b151      	cbz	r1, 8010ae4 <_dtoa_r+0x5c>
 8010ace:	685a      	ldr	r2, [r3, #4]
 8010ad0:	604a      	str	r2, [r1, #4]
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	4093      	lsls	r3, r2
 8010ad6:	608b      	str	r3, [r1, #8]
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f000 fe0d 	bl	80116f8 <_Bfree>
 8010ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	1e3b      	subs	r3, r7, #0
 8010ae6:	bfb9      	ittee	lt
 8010ae8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010aec:	9303      	strlt	r3, [sp, #12]
 8010aee:	2300      	movge	r3, #0
 8010af0:	f8c8 3000 	strge.w	r3, [r8]
 8010af4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010af8:	4ba3      	ldr	r3, [pc, #652]	; (8010d88 <_dtoa_r+0x300>)
 8010afa:	bfbc      	itt	lt
 8010afc:	2201      	movlt	r2, #1
 8010afe:	f8c8 2000 	strlt.w	r2, [r8]
 8010b02:	ea33 0309 	bics.w	r3, r3, r9
 8010b06:	d11b      	bne.n	8010b40 <_dtoa_r+0xb8>
 8010b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b0e:	6013      	str	r3, [r2, #0]
 8010b10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b14:	4333      	orrs	r3, r6
 8010b16:	f000 857a 	beq.w	801160e <_dtoa_r+0xb86>
 8010b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b1c:	b963      	cbnz	r3, 8010b38 <_dtoa_r+0xb0>
 8010b1e:	4b9b      	ldr	r3, [pc, #620]	; (8010d8c <_dtoa_r+0x304>)
 8010b20:	e024      	b.n	8010b6c <_dtoa_r+0xe4>
 8010b22:	4b9b      	ldr	r3, [pc, #620]	; (8010d90 <_dtoa_r+0x308>)
 8010b24:	9300      	str	r3, [sp, #0]
 8010b26:	3308      	adds	r3, #8
 8010b28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b2a:	6013      	str	r3, [r2, #0]
 8010b2c:	9800      	ldr	r0, [sp, #0]
 8010b2e:	b015      	add	sp, #84	; 0x54
 8010b30:	ecbd 8b02 	vpop	{d8}
 8010b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b38:	4b94      	ldr	r3, [pc, #592]	; (8010d8c <_dtoa_r+0x304>)
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	3303      	adds	r3, #3
 8010b3e:	e7f3      	b.n	8010b28 <_dtoa_r+0xa0>
 8010b40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b44:	2200      	movs	r2, #0
 8010b46:	ec51 0b17 	vmov	r0, r1, d7
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010b50:	f7ef ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b54:	4680      	mov	r8, r0
 8010b56:	b158      	cbz	r0, 8010b70 <_dtoa_r+0xe8>
 8010b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	6013      	str	r3, [r2, #0]
 8010b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f000 8551 	beq.w	8011608 <_dtoa_r+0xb80>
 8010b66:	488b      	ldr	r0, [pc, #556]	; (8010d94 <_dtoa_r+0x30c>)
 8010b68:	6018      	str	r0, [r3, #0]
 8010b6a:	1e43      	subs	r3, r0, #1
 8010b6c:	9300      	str	r3, [sp, #0]
 8010b6e:	e7dd      	b.n	8010b2c <_dtoa_r+0xa4>
 8010b70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010b74:	aa12      	add	r2, sp, #72	; 0x48
 8010b76:	a913      	add	r1, sp, #76	; 0x4c
 8010b78:	4620      	mov	r0, r4
 8010b7a:	f001 f89f 	bl	8011cbc <__d2b>
 8010b7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b82:	4683      	mov	fp, r0
 8010b84:	2d00      	cmp	r5, #0
 8010b86:	d07c      	beq.n	8010c82 <_dtoa_r+0x1fa>
 8010b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010b96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010b9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010b9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010ba2:	4b7d      	ldr	r3, [pc, #500]	; (8010d98 <_dtoa_r+0x310>)
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	4630      	mov	r0, r6
 8010ba8:	4639      	mov	r1, r7
 8010baa:	f7ef fb6d 	bl	8000288 <__aeabi_dsub>
 8010bae:	a36e      	add	r3, pc, #440	; (adr r3, 8010d68 <_dtoa_r+0x2e0>)
 8010bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb4:	f7ef fd20 	bl	80005f8 <__aeabi_dmul>
 8010bb8:	a36d      	add	r3, pc, #436	; (adr r3, 8010d70 <_dtoa_r+0x2e8>)
 8010bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbe:	f7ef fb65 	bl	800028c <__adddf3>
 8010bc2:	4606      	mov	r6, r0
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	460f      	mov	r7, r1
 8010bc8:	f7ef fcac 	bl	8000524 <__aeabi_i2d>
 8010bcc:	a36a      	add	r3, pc, #424	; (adr r3, 8010d78 <_dtoa_r+0x2f0>)
 8010bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd2:	f7ef fd11 	bl	80005f8 <__aeabi_dmul>
 8010bd6:	4602      	mov	r2, r0
 8010bd8:	460b      	mov	r3, r1
 8010bda:	4630      	mov	r0, r6
 8010bdc:	4639      	mov	r1, r7
 8010bde:	f7ef fb55 	bl	800028c <__adddf3>
 8010be2:	4606      	mov	r6, r0
 8010be4:	460f      	mov	r7, r1
 8010be6:	f7ef ffb7 	bl	8000b58 <__aeabi_d2iz>
 8010bea:	2200      	movs	r2, #0
 8010bec:	4682      	mov	sl, r0
 8010bee:	2300      	movs	r3, #0
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	4639      	mov	r1, r7
 8010bf4:	f7ef ff72 	bl	8000adc <__aeabi_dcmplt>
 8010bf8:	b148      	cbz	r0, 8010c0e <_dtoa_r+0x186>
 8010bfa:	4650      	mov	r0, sl
 8010bfc:	f7ef fc92 	bl	8000524 <__aeabi_i2d>
 8010c00:	4632      	mov	r2, r6
 8010c02:	463b      	mov	r3, r7
 8010c04:	f7ef ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c08:	b908      	cbnz	r0, 8010c0e <_dtoa_r+0x186>
 8010c0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c0e:	f1ba 0f16 	cmp.w	sl, #22
 8010c12:	d854      	bhi.n	8010cbe <_dtoa_r+0x236>
 8010c14:	4b61      	ldr	r3, [pc, #388]	; (8010d9c <_dtoa_r+0x314>)
 8010c16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010c22:	f7ef ff5b 	bl	8000adc <__aeabi_dcmplt>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d04b      	beq.n	8010cc2 <_dtoa_r+0x23a>
 8010c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c2e:	2300      	movs	r3, #0
 8010c30:	930e      	str	r3, [sp, #56]	; 0x38
 8010c32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c34:	1b5d      	subs	r5, r3, r5
 8010c36:	1e6b      	subs	r3, r5, #1
 8010c38:	9304      	str	r3, [sp, #16]
 8010c3a:	bf43      	ittte	mi
 8010c3c:	2300      	movmi	r3, #0
 8010c3e:	f1c5 0801 	rsbmi	r8, r5, #1
 8010c42:	9304      	strmi	r3, [sp, #16]
 8010c44:	f04f 0800 	movpl.w	r8, #0
 8010c48:	f1ba 0f00 	cmp.w	sl, #0
 8010c4c:	db3b      	blt.n	8010cc6 <_dtoa_r+0x23e>
 8010c4e:	9b04      	ldr	r3, [sp, #16]
 8010c50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010c54:	4453      	add	r3, sl
 8010c56:	9304      	str	r3, [sp, #16]
 8010c58:	2300      	movs	r3, #0
 8010c5a:	9306      	str	r3, [sp, #24]
 8010c5c:	9b05      	ldr	r3, [sp, #20]
 8010c5e:	2b09      	cmp	r3, #9
 8010c60:	d869      	bhi.n	8010d36 <_dtoa_r+0x2ae>
 8010c62:	2b05      	cmp	r3, #5
 8010c64:	bfc4      	itt	gt
 8010c66:	3b04      	subgt	r3, #4
 8010c68:	9305      	strgt	r3, [sp, #20]
 8010c6a:	9b05      	ldr	r3, [sp, #20]
 8010c6c:	f1a3 0302 	sub.w	r3, r3, #2
 8010c70:	bfcc      	ite	gt
 8010c72:	2500      	movgt	r5, #0
 8010c74:	2501      	movle	r5, #1
 8010c76:	2b03      	cmp	r3, #3
 8010c78:	d869      	bhi.n	8010d4e <_dtoa_r+0x2c6>
 8010c7a:	e8df f003 	tbb	[pc, r3]
 8010c7e:	4e2c      	.short	0x4e2c
 8010c80:	5a4c      	.short	0x5a4c
 8010c82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010c86:	441d      	add	r5, r3
 8010c88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010c8c:	2b20      	cmp	r3, #32
 8010c8e:	bfc1      	itttt	gt
 8010c90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010c94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010c98:	fa09 f303 	lslgt.w	r3, r9, r3
 8010c9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010ca0:	bfda      	itte	le
 8010ca2:	f1c3 0320 	rsble	r3, r3, #32
 8010ca6:	fa06 f003 	lslle.w	r0, r6, r3
 8010caa:	4318      	orrgt	r0, r3
 8010cac:	f7ef fc2a 	bl	8000504 <__aeabi_ui2d>
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	4606      	mov	r6, r0
 8010cb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010cb8:	3d01      	subs	r5, #1
 8010cba:	9310      	str	r3, [sp, #64]	; 0x40
 8010cbc:	e771      	b.n	8010ba2 <_dtoa_r+0x11a>
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	e7b6      	b.n	8010c30 <_dtoa_r+0x1a8>
 8010cc2:	900e      	str	r0, [sp, #56]	; 0x38
 8010cc4:	e7b5      	b.n	8010c32 <_dtoa_r+0x1aa>
 8010cc6:	f1ca 0300 	rsb	r3, sl, #0
 8010cca:	9306      	str	r3, [sp, #24]
 8010ccc:	2300      	movs	r3, #0
 8010cce:	eba8 080a 	sub.w	r8, r8, sl
 8010cd2:	930d      	str	r3, [sp, #52]	; 0x34
 8010cd4:	e7c2      	b.n	8010c5c <_dtoa_r+0x1d4>
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	9308      	str	r3, [sp, #32]
 8010cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	dc39      	bgt.n	8010d54 <_dtoa_r+0x2cc>
 8010ce0:	f04f 0901 	mov.w	r9, #1
 8010ce4:	f8cd 9004 	str.w	r9, [sp, #4]
 8010ce8:	464b      	mov	r3, r9
 8010cea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010cee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	6042      	str	r2, [r0, #4]
 8010cf4:	2204      	movs	r2, #4
 8010cf6:	f102 0614 	add.w	r6, r2, #20
 8010cfa:	429e      	cmp	r6, r3
 8010cfc:	6841      	ldr	r1, [r0, #4]
 8010cfe:	d92f      	bls.n	8010d60 <_dtoa_r+0x2d8>
 8010d00:	4620      	mov	r0, r4
 8010d02:	f000 fcb9 	bl	8011678 <_Balloc>
 8010d06:	9000      	str	r0, [sp, #0]
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	d14b      	bne.n	8010da4 <_dtoa_r+0x31c>
 8010d0c:	4b24      	ldr	r3, [pc, #144]	; (8010da0 <_dtoa_r+0x318>)
 8010d0e:	4602      	mov	r2, r0
 8010d10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010d14:	e6d1      	b.n	8010aba <_dtoa_r+0x32>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e7de      	b.n	8010cd8 <_dtoa_r+0x250>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	9308      	str	r3, [sp, #32]
 8010d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d20:	eb0a 0903 	add.w	r9, sl, r3
 8010d24:	f109 0301 	add.w	r3, r9, #1
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	bfb8      	it	lt
 8010d2e:	2301      	movlt	r3, #1
 8010d30:	e7dd      	b.n	8010cee <_dtoa_r+0x266>
 8010d32:	2301      	movs	r3, #1
 8010d34:	e7f2      	b.n	8010d1c <_dtoa_r+0x294>
 8010d36:	2501      	movs	r5, #1
 8010d38:	2300      	movs	r3, #0
 8010d3a:	9305      	str	r3, [sp, #20]
 8010d3c:	9508      	str	r5, [sp, #32]
 8010d3e:	f04f 39ff 	mov.w	r9, #4294967295
 8010d42:	2200      	movs	r2, #0
 8010d44:	f8cd 9004 	str.w	r9, [sp, #4]
 8010d48:	2312      	movs	r3, #18
 8010d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8010d4c:	e7cf      	b.n	8010cee <_dtoa_r+0x266>
 8010d4e:	2301      	movs	r3, #1
 8010d50:	9308      	str	r3, [sp, #32]
 8010d52:	e7f4      	b.n	8010d3e <_dtoa_r+0x2b6>
 8010d54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010d58:	f8cd 9004 	str.w	r9, [sp, #4]
 8010d5c:	464b      	mov	r3, r9
 8010d5e:	e7c6      	b.n	8010cee <_dtoa_r+0x266>
 8010d60:	3101      	adds	r1, #1
 8010d62:	6041      	str	r1, [r0, #4]
 8010d64:	0052      	lsls	r2, r2, #1
 8010d66:	e7c6      	b.n	8010cf6 <_dtoa_r+0x26e>
 8010d68:	636f4361 	.word	0x636f4361
 8010d6c:	3fd287a7 	.word	0x3fd287a7
 8010d70:	8b60c8b3 	.word	0x8b60c8b3
 8010d74:	3fc68a28 	.word	0x3fc68a28
 8010d78:	509f79fb 	.word	0x509f79fb
 8010d7c:	3fd34413 	.word	0x3fd34413
 8010d80:	0801353d 	.word	0x0801353d
 8010d84:	08013554 	.word	0x08013554
 8010d88:	7ff00000 	.word	0x7ff00000
 8010d8c:	08013539 	.word	0x08013539
 8010d90:	08013530 	.word	0x08013530
 8010d94:	0801350d 	.word	0x0801350d
 8010d98:	3ff80000 	.word	0x3ff80000
 8010d9c:	08013650 	.word	0x08013650
 8010da0:	080135b3 	.word	0x080135b3
 8010da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010da6:	9a00      	ldr	r2, [sp, #0]
 8010da8:	601a      	str	r2, [r3, #0]
 8010daa:	9b01      	ldr	r3, [sp, #4]
 8010dac:	2b0e      	cmp	r3, #14
 8010dae:	f200 80ad 	bhi.w	8010f0c <_dtoa_r+0x484>
 8010db2:	2d00      	cmp	r5, #0
 8010db4:	f000 80aa 	beq.w	8010f0c <_dtoa_r+0x484>
 8010db8:	f1ba 0f00 	cmp.w	sl, #0
 8010dbc:	dd36      	ble.n	8010e2c <_dtoa_r+0x3a4>
 8010dbe:	4ac3      	ldr	r2, [pc, #780]	; (80110cc <_dtoa_r+0x644>)
 8010dc0:	f00a 030f 	and.w	r3, sl, #15
 8010dc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010dc8:	ed93 7b00 	vldr	d7, [r3]
 8010dcc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010dd0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010dd4:	eeb0 8a47 	vmov.f32	s16, s14
 8010dd8:	eef0 8a67 	vmov.f32	s17, s15
 8010ddc:	d016      	beq.n	8010e0c <_dtoa_r+0x384>
 8010dde:	4bbc      	ldr	r3, [pc, #752]	; (80110d0 <_dtoa_r+0x648>)
 8010de0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010de4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010de8:	f7ef fd30 	bl	800084c <__aeabi_ddiv>
 8010dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010df0:	f007 070f 	and.w	r7, r7, #15
 8010df4:	2503      	movs	r5, #3
 8010df6:	4eb6      	ldr	r6, [pc, #728]	; (80110d0 <_dtoa_r+0x648>)
 8010df8:	b957      	cbnz	r7, 8010e10 <_dtoa_r+0x388>
 8010dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dfe:	ec53 2b18 	vmov	r2, r3, d8
 8010e02:	f7ef fd23 	bl	800084c <__aeabi_ddiv>
 8010e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e0a:	e029      	b.n	8010e60 <_dtoa_r+0x3d8>
 8010e0c:	2502      	movs	r5, #2
 8010e0e:	e7f2      	b.n	8010df6 <_dtoa_r+0x36e>
 8010e10:	07f9      	lsls	r1, r7, #31
 8010e12:	d508      	bpl.n	8010e26 <_dtoa_r+0x39e>
 8010e14:	ec51 0b18 	vmov	r0, r1, d8
 8010e18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e1c:	f7ef fbec 	bl	80005f8 <__aeabi_dmul>
 8010e20:	ec41 0b18 	vmov	d8, r0, r1
 8010e24:	3501      	adds	r5, #1
 8010e26:	107f      	asrs	r7, r7, #1
 8010e28:	3608      	adds	r6, #8
 8010e2a:	e7e5      	b.n	8010df8 <_dtoa_r+0x370>
 8010e2c:	f000 80a6 	beq.w	8010f7c <_dtoa_r+0x4f4>
 8010e30:	f1ca 0600 	rsb	r6, sl, #0
 8010e34:	4ba5      	ldr	r3, [pc, #660]	; (80110cc <_dtoa_r+0x644>)
 8010e36:	4fa6      	ldr	r7, [pc, #664]	; (80110d0 <_dtoa_r+0x648>)
 8010e38:	f006 020f 	and.w	r2, r6, #15
 8010e3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010e48:	f7ef fbd6 	bl	80005f8 <__aeabi_dmul>
 8010e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e50:	1136      	asrs	r6, r6, #4
 8010e52:	2300      	movs	r3, #0
 8010e54:	2502      	movs	r5, #2
 8010e56:	2e00      	cmp	r6, #0
 8010e58:	f040 8085 	bne.w	8010f66 <_dtoa_r+0x4de>
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d1d2      	bne.n	8010e06 <_dtoa_r+0x37e>
 8010e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	f000 808c 	beq.w	8010f80 <_dtoa_r+0x4f8>
 8010e68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010e6c:	4b99      	ldr	r3, [pc, #612]	; (80110d4 <_dtoa_r+0x64c>)
 8010e6e:	2200      	movs	r2, #0
 8010e70:	4630      	mov	r0, r6
 8010e72:	4639      	mov	r1, r7
 8010e74:	f7ef fe32 	bl	8000adc <__aeabi_dcmplt>
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	f000 8081 	beq.w	8010f80 <_dtoa_r+0x4f8>
 8010e7e:	9b01      	ldr	r3, [sp, #4]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d07d      	beq.n	8010f80 <_dtoa_r+0x4f8>
 8010e84:	f1b9 0f00 	cmp.w	r9, #0
 8010e88:	dd3c      	ble.n	8010f04 <_dtoa_r+0x47c>
 8010e8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010e8e:	9307      	str	r3, [sp, #28]
 8010e90:	2200      	movs	r2, #0
 8010e92:	4b91      	ldr	r3, [pc, #580]	; (80110d8 <_dtoa_r+0x650>)
 8010e94:	4630      	mov	r0, r6
 8010e96:	4639      	mov	r1, r7
 8010e98:	f7ef fbae 	bl	80005f8 <__aeabi_dmul>
 8010e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ea0:	3501      	adds	r5, #1
 8010ea2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010ea6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f7ef fb3a 	bl	8000524 <__aeabi_i2d>
 8010eb0:	4632      	mov	r2, r6
 8010eb2:	463b      	mov	r3, r7
 8010eb4:	f7ef fba0 	bl	80005f8 <__aeabi_dmul>
 8010eb8:	4b88      	ldr	r3, [pc, #544]	; (80110dc <_dtoa_r+0x654>)
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f7ef f9e6 	bl	800028c <__adddf3>
 8010ec0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ec8:	9303      	str	r3, [sp, #12]
 8010eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d15c      	bne.n	8010f8a <_dtoa_r+0x502>
 8010ed0:	4b83      	ldr	r3, [pc, #524]	; (80110e0 <_dtoa_r+0x658>)
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	4639      	mov	r1, r7
 8010ed8:	f7ef f9d6 	bl	8000288 <__aeabi_dsub>
 8010edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ee0:	4606      	mov	r6, r0
 8010ee2:	460f      	mov	r7, r1
 8010ee4:	f7ef fe18 	bl	8000b18 <__aeabi_dcmpgt>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	f040 8296 	bne.w	801141a <_dtoa_r+0x992>
 8010eee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ef8:	4639      	mov	r1, r7
 8010efa:	f7ef fdef 	bl	8000adc <__aeabi_dcmplt>
 8010efe:	2800      	cmp	r0, #0
 8010f00:	f040 8288 	bne.w	8011414 <_dtoa_r+0x98c>
 8010f04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010f08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	f2c0 8158 	blt.w	80111c4 <_dtoa_r+0x73c>
 8010f14:	f1ba 0f0e 	cmp.w	sl, #14
 8010f18:	f300 8154 	bgt.w	80111c4 <_dtoa_r+0x73c>
 8010f1c:	4b6b      	ldr	r3, [pc, #428]	; (80110cc <_dtoa_r+0x644>)
 8010f1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010f22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f280 80e3 	bge.w	80110f4 <_dtoa_r+0x66c>
 8010f2e:	9b01      	ldr	r3, [sp, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f300 80df 	bgt.w	80110f4 <_dtoa_r+0x66c>
 8010f36:	f040 826d 	bne.w	8011414 <_dtoa_r+0x98c>
 8010f3a:	4b69      	ldr	r3, [pc, #420]	; (80110e0 <_dtoa_r+0x658>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	4640      	mov	r0, r8
 8010f40:	4649      	mov	r1, r9
 8010f42:	f7ef fb59 	bl	80005f8 <__aeabi_dmul>
 8010f46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f4a:	f7ef fddb 	bl	8000b04 <__aeabi_dcmpge>
 8010f4e:	9e01      	ldr	r6, [sp, #4]
 8010f50:	4637      	mov	r7, r6
 8010f52:	2800      	cmp	r0, #0
 8010f54:	f040 8243 	bne.w	80113de <_dtoa_r+0x956>
 8010f58:	9d00      	ldr	r5, [sp, #0]
 8010f5a:	2331      	movs	r3, #49	; 0x31
 8010f5c:	f805 3b01 	strb.w	r3, [r5], #1
 8010f60:	f10a 0a01 	add.w	sl, sl, #1
 8010f64:	e23f      	b.n	80113e6 <_dtoa_r+0x95e>
 8010f66:	07f2      	lsls	r2, r6, #31
 8010f68:	d505      	bpl.n	8010f76 <_dtoa_r+0x4ee>
 8010f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f6e:	f7ef fb43 	bl	80005f8 <__aeabi_dmul>
 8010f72:	3501      	adds	r5, #1
 8010f74:	2301      	movs	r3, #1
 8010f76:	1076      	asrs	r6, r6, #1
 8010f78:	3708      	adds	r7, #8
 8010f7a:	e76c      	b.n	8010e56 <_dtoa_r+0x3ce>
 8010f7c:	2502      	movs	r5, #2
 8010f7e:	e76f      	b.n	8010e60 <_dtoa_r+0x3d8>
 8010f80:	9b01      	ldr	r3, [sp, #4]
 8010f82:	f8cd a01c 	str.w	sl, [sp, #28]
 8010f86:	930c      	str	r3, [sp, #48]	; 0x30
 8010f88:	e78d      	b.n	8010ea6 <_dtoa_r+0x41e>
 8010f8a:	9900      	ldr	r1, [sp, #0]
 8010f8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f90:	4b4e      	ldr	r3, [pc, #312]	; (80110cc <_dtoa_r+0x644>)
 8010f92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f96:	4401      	add	r1, r0
 8010f98:	9102      	str	r1, [sp, #8]
 8010f9a:	9908      	ldr	r1, [sp, #32]
 8010f9c:	eeb0 8a47 	vmov.f32	s16, s14
 8010fa0:	eef0 8a67 	vmov.f32	s17, s15
 8010fa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010fac:	2900      	cmp	r1, #0
 8010fae:	d045      	beq.n	801103c <_dtoa_r+0x5b4>
 8010fb0:	494c      	ldr	r1, [pc, #304]	; (80110e4 <_dtoa_r+0x65c>)
 8010fb2:	2000      	movs	r0, #0
 8010fb4:	f7ef fc4a 	bl	800084c <__aeabi_ddiv>
 8010fb8:	ec53 2b18 	vmov	r2, r3, d8
 8010fbc:	f7ef f964 	bl	8000288 <__aeabi_dsub>
 8010fc0:	9d00      	ldr	r5, [sp, #0]
 8010fc2:	ec41 0b18 	vmov	d8, r0, r1
 8010fc6:	4639      	mov	r1, r7
 8010fc8:	4630      	mov	r0, r6
 8010fca:	f7ef fdc5 	bl	8000b58 <__aeabi_d2iz>
 8010fce:	900c      	str	r0, [sp, #48]	; 0x30
 8010fd0:	f7ef faa8 	bl	8000524 <__aeabi_i2d>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	4630      	mov	r0, r6
 8010fda:	4639      	mov	r1, r7
 8010fdc:	f7ef f954 	bl	8000288 <__aeabi_dsub>
 8010fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fe2:	3330      	adds	r3, #48	; 0x30
 8010fe4:	f805 3b01 	strb.w	r3, [r5], #1
 8010fe8:	ec53 2b18 	vmov	r2, r3, d8
 8010fec:	4606      	mov	r6, r0
 8010fee:	460f      	mov	r7, r1
 8010ff0:	f7ef fd74 	bl	8000adc <__aeabi_dcmplt>
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	d165      	bne.n	80110c4 <_dtoa_r+0x63c>
 8010ff8:	4632      	mov	r2, r6
 8010ffa:	463b      	mov	r3, r7
 8010ffc:	4935      	ldr	r1, [pc, #212]	; (80110d4 <_dtoa_r+0x64c>)
 8010ffe:	2000      	movs	r0, #0
 8011000:	f7ef f942 	bl	8000288 <__aeabi_dsub>
 8011004:	ec53 2b18 	vmov	r2, r3, d8
 8011008:	f7ef fd68 	bl	8000adc <__aeabi_dcmplt>
 801100c:	2800      	cmp	r0, #0
 801100e:	f040 80b9 	bne.w	8011184 <_dtoa_r+0x6fc>
 8011012:	9b02      	ldr	r3, [sp, #8]
 8011014:	429d      	cmp	r5, r3
 8011016:	f43f af75 	beq.w	8010f04 <_dtoa_r+0x47c>
 801101a:	4b2f      	ldr	r3, [pc, #188]	; (80110d8 <_dtoa_r+0x650>)
 801101c:	ec51 0b18 	vmov	r0, r1, d8
 8011020:	2200      	movs	r2, #0
 8011022:	f7ef fae9 	bl	80005f8 <__aeabi_dmul>
 8011026:	4b2c      	ldr	r3, [pc, #176]	; (80110d8 <_dtoa_r+0x650>)
 8011028:	ec41 0b18 	vmov	d8, r0, r1
 801102c:	2200      	movs	r2, #0
 801102e:	4630      	mov	r0, r6
 8011030:	4639      	mov	r1, r7
 8011032:	f7ef fae1 	bl	80005f8 <__aeabi_dmul>
 8011036:	4606      	mov	r6, r0
 8011038:	460f      	mov	r7, r1
 801103a:	e7c4      	b.n	8010fc6 <_dtoa_r+0x53e>
 801103c:	ec51 0b17 	vmov	r0, r1, d7
 8011040:	f7ef fada 	bl	80005f8 <__aeabi_dmul>
 8011044:	9b02      	ldr	r3, [sp, #8]
 8011046:	9d00      	ldr	r5, [sp, #0]
 8011048:	930c      	str	r3, [sp, #48]	; 0x30
 801104a:	ec41 0b18 	vmov	d8, r0, r1
 801104e:	4639      	mov	r1, r7
 8011050:	4630      	mov	r0, r6
 8011052:	f7ef fd81 	bl	8000b58 <__aeabi_d2iz>
 8011056:	9011      	str	r0, [sp, #68]	; 0x44
 8011058:	f7ef fa64 	bl	8000524 <__aeabi_i2d>
 801105c:	4602      	mov	r2, r0
 801105e:	460b      	mov	r3, r1
 8011060:	4630      	mov	r0, r6
 8011062:	4639      	mov	r1, r7
 8011064:	f7ef f910 	bl	8000288 <__aeabi_dsub>
 8011068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801106a:	3330      	adds	r3, #48	; 0x30
 801106c:	f805 3b01 	strb.w	r3, [r5], #1
 8011070:	9b02      	ldr	r3, [sp, #8]
 8011072:	429d      	cmp	r5, r3
 8011074:	4606      	mov	r6, r0
 8011076:	460f      	mov	r7, r1
 8011078:	f04f 0200 	mov.w	r2, #0
 801107c:	d134      	bne.n	80110e8 <_dtoa_r+0x660>
 801107e:	4b19      	ldr	r3, [pc, #100]	; (80110e4 <_dtoa_r+0x65c>)
 8011080:	ec51 0b18 	vmov	r0, r1, d8
 8011084:	f7ef f902 	bl	800028c <__adddf3>
 8011088:	4602      	mov	r2, r0
 801108a:	460b      	mov	r3, r1
 801108c:	4630      	mov	r0, r6
 801108e:	4639      	mov	r1, r7
 8011090:	f7ef fd42 	bl	8000b18 <__aeabi_dcmpgt>
 8011094:	2800      	cmp	r0, #0
 8011096:	d175      	bne.n	8011184 <_dtoa_r+0x6fc>
 8011098:	ec53 2b18 	vmov	r2, r3, d8
 801109c:	4911      	ldr	r1, [pc, #68]	; (80110e4 <_dtoa_r+0x65c>)
 801109e:	2000      	movs	r0, #0
 80110a0:	f7ef f8f2 	bl	8000288 <__aeabi_dsub>
 80110a4:	4602      	mov	r2, r0
 80110a6:	460b      	mov	r3, r1
 80110a8:	4630      	mov	r0, r6
 80110aa:	4639      	mov	r1, r7
 80110ac:	f7ef fd16 	bl	8000adc <__aeabi_dcmplt>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	f43f af27 	beq.w	8010f04 <_dtoa_r+0x47c>
 80110b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80110b8:	1e6b      	subs	r3, r5, #1
 80110ba:	930c      	str	r3, [sp, #48]	; 0x30
 80110bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80110c0:	2b30      	cmp	r3, #48	; 0x30
 80110c2:	d0f8      	beq.n	80110b6 <_dtoa_r+0x62e>
 80110c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80110c8:	e04a      	b.n	8011160 <_dtoa_r+0x6d8>
 80110ca:	bf00      	nop
 80110cc:	08013650 	.word	0x08013650
 80110d0:	08013628 	.word	0x08013628
 80110d4:	3ff00000 	.word	0x3ff00000
 80110d8:	40240000 	.word	0x40240000
 80110dc:	401c0000 	.word	0x401c0000
 80110e0:	40140000 	.word	0x40140000
 80110e4:	3fe00000 	.word	0x3fe00000
 80110e8:	4baf      	ldr	r3, [pc, #700]	; (80113a8 <_dtoa_r+0x920>)
 80110ea:	f7ef fa85 	bl	80005f8 <__aeabi_dmul>
 80110ee:	4606      	mov	r6, r0
 80110f0:	460f      	mov	r7, r1
 80110f2:	e7ac      	b.n	801104e <_dtoa_r+0x5c6>
 80110f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80110f8:	9d00      	ldr	r5, [sp, #0]
 80110fa:	4642      	mov	r2, r8
 80110fc:	464b      	mov	r3, r9
 80110fe:	4630      	mov	r0, r6
 8011100:	4639      	mov	r1, r7
 8011102:	f7ef fba3 	bl	800084c <__aeabi_ddiv>
 8011106:	f7ef fd27 	bl	8000b58 <__aeabi_d2iz>
 801110a:	9002      	str	r0, [sp, #8]
 801110c:	f7ef fa0a 	bl	8000524 <__aeabi_i2d>
 8011110:	4642      	mov	r2, r8
 8011112:	464b      	mov	r3, r9
 8011114:	f7ef fa70 	bl	80005f8 <__aeabi_dmul>
 8011118:	4602      	mov	r2, r0
 801111a:	460b      	mov	r3, r1
 801111c:	4630      	mov	r0, r6
 801111e:	4639      	mov	r1, r7
 8011120:	f7ef f8b2 	bl	8000288 <__aeabi_dsub>
 8011124:	9e02      	ldr	r6, [sp, #8]
 8011126:	9f01      	ldr	r7, [sp, #4]
 8011128:	3630      	adds	r6, #48	; 0x30
 801112a:	f805 6b01 	strb.w	r6, [r5], #1
 801112e:	9e00      	ldr	r6, [sp, #0]
 8011130:	1bae      	subs	r6, r5, r6
 8011132:	42b7      	cmp	r7, r6
 8011134:	4602      	mov	r2, r0
 8011136:	460b      	mov	r3, r1
 8011138:	d137      	bne.n	80111aa <_dtoa_r+0x722>
 801113a:	f7ef f8a7 	bl	800028c <__adddf3>
 801113e:	4642      	mov	r2, r8
 8011140:	464b      	mov	r3, r9
 8011142:	4606      	mov	r6, r0
 8011144:	460f      	mov	r7, r1
 8011146:	f7ef fce7 	bl	8000b18 <__aeabi_dcmpgt>
 801114a:	b9c8      	cbnz	r0, 8011180 <_dtoa_r+0x6f8>
 801114c:	4642      	mov	r2, r8
 801114e:	464b      	mov	r3, r9
 8011150:	4630      	mov	r0, r6
 8011152:	4639      	mov	r1, r7
 8011154:	f7ef fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011158:	b110      	cbz	r0, 8011160 <_dtoa_r+0x6d8>
 801115a:	9b02      	ldr	r3, [sp, #8]
 801115c:	07d9      	lsls	r1, r3, #31
 801115e:	d40f      	bmi.n	8011180 <_dtoa_r+0x6f8>
 8011160:	4620      	mov	r0, r4
 8011162:	4659      	mov	r1, fp
 8011164:	f000 fac8 	bl	80116f8 <_Bfree>
 8011168:	2300      	movs	r3, #0
 801116a:	702b      	strb	r3, [r5, #0]
 801116c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801116e:	f10a 0001 	add.w	r0, sl, #1
 8011172:	6018      	str	r0, [r3, #0]
 8011174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011176:	2b00      	cmp	r3, #0
 8011178:	f43f acd8 	beq.w	8010b2c <_dtoa_r+0xa4>
 801117c:	601d      	str	r5, [r3, #0]
 801117e:	e4d5      	b.n	8010b2c <_dtoa_r+0xa4>
 8011180:	f8cd a01c 	str.w	sl, [sp, #28]
 8011184:	462b      	mov	r3, r5
 8011186:	461d      	mov	r5, r3
 8011188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801118c:	2a39      	cmp	r2, #57	; 0x39
 801118e:	d108      	bne.n	80111a2 <_dtoa_r+0x71a>
 8011190:	9a00      	ldr	r2, [sp, #0]
 8011192:	429a      	cmp	r2, r3
 8011194:	d1f7      	bne.n	8011186 <_dtoa_r+0x6fe>
 8011196:	9a07      	ldr	r2, [sp, #28]
 8011198:	9900      	ldr	r1, [sp, #0]
 801119a:	3201      	adds	r2, #1
 801119c:	9207      	str	r2, [sp, #28]
 801119e:	2230      	movs	r2, #48	; 0x30
 80111a0:	700a      	strb	r2, [r1, #0]
 80111a2:	781a      	ldrb	r2, [r3, #0]
 80111a4:	3201      	adds	r2, #1
 80111a6:	701a      	strb	r2, [r3, #0]
 80111a8:	e78c      	b.n	80110c4 <_dtoa_r+0x63c>
 80111aa:	4b7f      	ldr	r3, [pc, #508]	; (80113a8 <_dtoa_r+0x920>)
 80111ac:	2200      	movs	r2, #0
 80111ae:	f7ef fa23 	bl	80005f8 <__aeabi_dmul>
 80111b2:	2200      	movs	r2, #0
 80111b4:	2300      	movs	r3, #0
 80111b6:	4606      	mov	r6, r0
 80111b8:	460f      	mov	r7, r1
 80111ba:	f7ef fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 80111be:	2800      	cmp	r0, #0
 80111c0:	d09b      	beq.n	80110fa <_dtoa_r+0x672>
 80111c2:	e7cd      	b.n	8011160 <_dtoa_r+0x6d8>
 80111c4:	9a08      	ldr	r2, [sp, #32]
 80111c6:	2a00      	cmp	r2, #0
 80111c8:	f000 80c4 	beq.w	8011354 <_dtoa_r+0x8cc>
 80111cc:	9a05      	ldr	r2, [sp, #20]
 80111ce:	2a01      	cmp	r2, #1
 80111d0:	f300 80a8 	bgt.w	8011324 <_dtoa_r+0x89c>
 80111d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	f000 80a0 	beq.w	801131c <_dtoa_r+0x894>
 80111dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80111e0:	9e06      	ldr	r6, [sp, #24]
 80111e2:	4645      	mov	r5, r8
 80111e4:	9a04      	ldr	r2, [sp, #16]
 80111e6:	2101      	movs	r1, #1
 80111e8:	441a      	add	r2, r3
 80111ea:	4620      	mov	r0, r4
 80111ec:	4498      	add	r8, r3
 80111ee:	9204      	str	r2, [sp, #16]
 80111f0:	f000 fb3e 	bl	8011870 <__i2b>
 80111f4:	4607      	mov	r7, r0
 80111f6:	2d00      	cmp	r5, #0
 80111f8:	dd0b      	ble.n	8011212 <_dtoa_r+0x78a>
 80111fa:	9b04      	ldr	r3, [sp, #16]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	dd08      	ble.n	8011212 <_dtoa_r+0x78a>
 8011200:	42ab      	cmp	r3, r5
 8011202:	9a04      	ldr	r2, [sp, #16]
 8011204:	bfa8      	it	ge
 8011206:	462b      	movge	r3, r5
 8011208:	eba8 0803 	sub.w	r8, r8, r3
 801120c:	1aed      	subs	r5, r5, r3
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	9304      	str	r3, [sp, #16]
 8011212:	9b06      	ldr	r3, [sp, #24]
 8011214:	b1fb      	cbz	r3, 8011256 <_dtoa_r+0x7ce>
 8011216:	9b08      	ldr	r3, [sp, #32]
 8011218:	2b00      	cmp	r3, #0
 801121a:	f000 809f 	beq.w	801135c <_dtoa_r+0x8d4>
 801121e:	2e00      	cmp	r6, #0
 8011220:	dd11      	ble.n	8011246 <_dtoa_r+0x7be>
 8011222:	4639      	mov	r1, r7
 8011224:	4632      	mov	r2, r6
 8011226:	4620      	mov	r0, r4
 8011228:	f000 fbde 	bl	80119e8 <__pow5mult>
 801122c:	465a      	mov	r2, fp
 801122e:	4601      	mov	r1, r0
 8011230:	4607      	mov	r7, r0
 8011232:	4620      	mov	r0, r4
 8011234:	f000 fb32 	bl	801189c <__multiply>
 8011238:	4659      	mov	r1, fp
 801123a:	9007      	str	r0, [sp, #28]
 801123c:	4620      	mov	r0, r4
 801123e:	f000 fa5b 	bl	80116f8 <_Bfree>
 8011242:	9b07      	ldr	r3, [sp, #28]
 8011244:	469b      	mov	fp, r3
 8011246:	9b06      	ldr	r3, [sp, #24]
 8011248:	1b9a      	subs	r2, r3, r6
 801124a:	d004      	beq.n	8011256 <_dtoa_r+0x7ce>
 801124c:	4659      	mov	r1, fp
 801124e:	4620      	mov	r0, r4
 8011250:	f000 fbca 	bl	80119e8 <__pow5mult>
 8011254:	4683      	mov	fp, r0
 8011256:	2101      	movs	r1, #1
 8011258:	4620      	mov	r0, r4
 801125a:	f000 fb09 	bl	8011870 <__i2b>
 801125e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011260:	2b00      	cmp	r3, #0
 8011262:	4606      	mov	r6, r0
 8011264:	dd7c      	ble.n	8011360 <_dtoa_r+0x8d8>
 8011266:	461a      	mov	r2, r3
 8011268:	4601      	mov	r1, r0
 801126a:	4620      	mov	r0, r4
 801126c:	f000 fbbc 	bl	80119e8 <__pow5mult>
 8011270:	9b05      	ldr	r3, [sp, #20]
 8011272:	2b01      	cmp	r3, #1
 8011274:	4606      	mov	r6, r0
 8011276:	dd76      	ble.n	8011366 <_dtoa_r+0x8de>
 8011278:	2300      	movs	r3, #0
 801127a:	9306      	str	r3, [sp, #24]
 801127c:	6933      	ldr	r3, [r6, #16]
 801127e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011282:	6918      	ldr	r0, [r3, #16]
 8011284:	f000 faa4 	bl	80117d0 <__hi0bits>
 8011288:	f1c0 0020 	rsb	r0, r0, #32
 801128c:	9b04      	ldr	r3, [sp, #16]
 801128e:	4418      	add	r0, r3
 8011290:	f010 001f 	ands.w	r0, r0, #31
 8011294:	f000 8086 	beq.w	80113a4 <_dtoa_r+0x91c>
 8011298:	f1c0 0320 	rsb	r3, r0, #32
 801129c:	2b04      	cmp	r3, #4
 801129e:	dd7f      	ble.n	80113a0 <_dtoa_r+0x918>
 80112a0:	f1c0 001c 	rsb	r0, r0, #28
 80112a4:	9b04      	ldr	r3, [sp, #16]
 80112a6:	4403      	add	r3, r0
 80112a8:	4480      	add	r8, r0
 80112aa:	4405      	add	r5, r0
 80112ac:	9304      	str	r3, [sp, #16]
 80112ae:	f1b8 0f00 	cmp.w	r8, #0
 80112b2:	dd05      	ble.n	80112c0 <_dtoa_r+0x838>
 80112b4:	4659      	mov	r1, fp
 80112b6:	4642      	mov	r2, r8
 80112b8:	4620      	mov	r0, r4
 80112ba:	f000 fbef 	bl	8011a9c <__lshift>
 80112be:	4683      	mov	fp, r0
 80112c0:	9b04      	ldr	r3, [sp, #16]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	dd05      	ble.n	80112d2 <_dtoa_r+0x84a>
 80112c6:	4631      	mov	r1, r6
 80112c8:	461a      	mov	r2, r3
 80112ca:	4620      	mov	r0, r4
 80112cc:	f000 fbe6 	bl	8011a9c <__lshift>
 80112d0:	4606      	mov	r6, r0
 80112d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d069      	beq.n	80113ac <_dtoa_r+0x924>
 80112d8:	4631      	mov	r1, r6
 80112da:	4658      	mov	r0, fp
 80112dc:	f000 fc4a 	bl	8011b74 <__mcmp>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	da63      	bge.n	80113ac <_dtoa_r+0x924>
 80112e4:	2300      	movs	r3, #0
 80112e6:	4659      	mov	r1, fp
 80112e8:	220a      	movs	r2, #10
 80112ea:	4620      	mov	r0, r4
 80112ec:	f000 fa26 	bl	801173c <__multadd>
 80112f0:	9b08      	ldr	r3, [sp, #32]
 80112f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112f6:	4683      	mov	fp, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f000 818f 	beq.w	801161c <_dtoa_r+0xb94>
 80112fe:	4639      	mov	r1, r7
 8011300:	2300      	movs	r3, #0
 8011302:	220a      	movs	r2, #10
 8011304:	4620      	mov	r0, r4
 8011306:	f000 fa19 	bl	801173c <__multadd>
 801130a:	f1b9 0f00 	cmp.w	r9, #0
 801130e:	4607      	mov	r7, r0
 8011310:	f300 808e 	bgt.w	8011430 <_dtoa_r+0x9a8>
 8011314:	9b05      	ldr	r3, [sp, #20]
 8011316:	2b02      	cmp	r3, #2
 8011318:	dc50      	bgt.n	80113bc <_dtoa_r+0x934>
 801131a:	e089      	b.n	8011430 <_dtoa_r+0x9a8>
 801131c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801131e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011322:	e75d      	b.n	80111e0 <_dtoa_r+0x758>
 8011324:	9b01      	ldr	r3, [sp, #4]
 8011326:	1e5e      	subs	r6, r3, #1
 8011328:	9b06      	ldr	r3, [sp, #24]
 801132a:	42b3      	cmp	r3, r6
 801132c:	bfbf      	itttt	lt
 801132e:	9b06      	ldrlt	r3, [sp, #24]
 8011330:	9606      	strlt	r6, [sp, #24]
 8011332:	1af2      	sublt	r2, r6, r3
 8011334:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011336:	bfb6      	itet	lt
 8011338:	189b      	addlt	r3, r3, r2
 801133a:	1b9e      	subge	r6, r3, r6
 801133c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801133e:	9b01      	ldr	r3, [sp, #4]
 8011340:	bfb8      	it	lt
 8011342:	2600      	movlt	r6, #0
 8011344:	2b00      	cmp	r3, #0
 8011346:	bfb5      	itete	lt
 8011348:	eba8 0503 	sublt.w	r5, r8, r3
 801134c:	9b01      	ldrge	r3, [sp, #4]
 801134e:	2300      	movlt	r3, #0
 8011350:	4645      	movge	r5, r8
 8011352:	e747      	b.n	80111e4 <_dtoa_r+0x75c>
 8011354:	9e06      	ldr	r6, [sp, #24]
 8011356:	9f08      	ldr	r7, [sp, #32]
 8011358:	4645      	mov	r5, r8
 801135a:	e74c      	b.n	80111f6 <_dtoa_r+0x76e>
 801135c:	9a06      	ldr	r2, [sp, #24]
 801135e:	e775      	b.n	801124c <_dtoa_r+0x7c4>
 8011360:	9b05      	ldr	r3, [sp, #20]
 8011362:	2b01      	cmp	r3, #1
 8011364:	dc18      	bgt.n	8011398 <_dtoa_r+0x910>
 8011366:	9b02      	ldr	r3, [sp, #8]
 8011368:	b9b3      	cbnz	r3, 8011398 <_dtoa_r+0x910>
 801136a:	9b03      	ldr	r3, [sp, #12]
 801136c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011370:	b9a3      	cbnz	r3, 801139c <_dtoa_r+0x914>
 8011372:	9b03      	ldr	r3, [sp, #12]
 8011374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011378:	0d1b      	lsrs	r3, r3, #20
 801137a:	051b      	lsls	r3, r3, #20
 801137c:	b12b      	cbz	r3, 801138a <_dtoa_r+0x902>
 801137e:	9b04      	ldr	r3, [sp, #16]
 8011380:	3301      	adds	r3, #1
 8011382:	9304      	str	r3, [sp, #16]
 8011384:	f108 0801 	add.w	r8, r8, #1
 8011388:	2301      	movs	r3, #1
 801138a:	9306      	str	r3, [sp, #24]
 801138c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801138e:	2b00      	cmp	r3, #0
 8011390:	f47f af74 	bne.w	801127c <_dtoa_r+0x7f4>
 8011394:	2001      	movs	r0, #1
 8011396:	e779      	b.n	801128c <_dtoa_r+0x804>
 8011398:	2300      	movs	r3, #0
 801139a:	e7f6      	b.n	801138a <_dtoa_r+0x902>
 801139c:	9b02      	ldr	r3, [sp, #8]
 801139e:	e7f4      	b.n	801138a <_dtoa_r+0x902>
 80113a0:	d085      	beq.n	80112ae <_dtoa_r+0x826>
 80113a2:	4618      	mov	r0, r3
 80113a4:	301c      	adds	r0, #28
 80113a6:	e77d      	b.n	80112a4 <_dtoa_r+0x81c>
 80113a8:	40240000 	.word	0x40240000
 80113ac:	9b01      	ldr	r3, [sp, #4]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	dc38      	bgt.n	8011424 <_dtoa_r+0x99c>
 80113b2:	9b05      	ldr	r3, [sp, #20]
 80113b4:	2b02      	cmp	r3, #2
 80113b6:	dd35      	ble.n	8011424 <_dtoa_r+0x99c>
 80113b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80113bc:	f1b9 0f00 	cmp.w	r9, #0
 80113c0:	d10d      	bne.n	80113de <_dtoa_r+0x956>
 80113c2:	4631      	mov	r1, r6
 80113c4:	464b      	mov	r3, r9
 80113c6:	2205      	movs	r2, #5
 80113c8:	4620      	mov	r0, r4
 80113ca:	f000 f9b7 	bl	801173c <__multadd>
 80113ce:	4601      	mov	r1, r0
 80113d0:	4606      	mov	r6, r0
 80113d2:	4658      	mov	r0, fp
 80113d4:	f000 fbce 	bl	8011b74 <__mcmp>
 80113d8:	2800      	cmp	r0, #0
 80113da:	f73f adbd 	bgt.w	8010f58 <_dtoa_r+0x4d0>
 80113de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113e0:	9d00      	ldr	r5, [sp, #0]
 80113e2:	ea6f 0a03 	mvn.w	sl, r3
 80113e6:	f04f 0800 	mov.w	r8, #0
 80113ea:	4631      	mov	r1, r6
 80113ec:	4620      	mov	r0, r4
 80113ee:	f000 f983 	bl	80116f8 <_Bfree>
 80113f2:	2f00      	cmp	r7, #0
 80113f4:	f43f aeb4 	beq.w	8011160 <_dtoa_r+0x6d8>
 80113f8:	f1b8 0f00 	cmp.w	r8, #0
 80113fc:	d005      	beq.n	801140a <_dtoa_r+0x982>
 80113fe:	45b8      	cmp	r8, r7
 8011400:	d003      	beq.n	801140a <_dtoa_r+0x982>
 8011402:	4641      	mov	r1, r8
 8011404:	4620      	mov	r0, r4
 8011406:	f000 f977 	bl	80116f8 <_Bfree>
 801140a:	4639      	mov	r1, r7
 801140c:	4620      	mov	r0, r4
 801140e:	f000 f973 	bl	80116f8 <_Bfree>
 8011412:	e6a5      	b.n	8011160 <_dtoa_r+0x6d8>
 8011414:	2600      	movs	r6, #0
 8011416:	4637      	mov	r7, r6
 8011418:	e7e1      	b.n	80113de <_dtoa_r+0x956>
 801141a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801141c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011420:	4637      	mov	r7, r6
 8011422:	e599      	b.n	8010f58 <_dtoa_r+0x4d0>
 8011424:	9b08      	ldr	r3, [sp, #32]
 8011426:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801142a:	2b00      	cmp	r3, #0
 801142c:	f000 80fd 	beq.w	801162a <_dtoa_r+0xba2>
 8011430:	2d00      	cmp	r5, #0
 8011432:	dd05      	ble.n	8011440 <_dtoa_r+0x9b8>
 8011434:	4639      	mov	r1, r7
 8011436:	462a      	mov	r2, r5
 8011438:	4620      	mov	r0, r4
 801143a:	f000 fb2f 	bl	8011a9c <__lshift>
 801143e:	4607      	mov	r7, r0
 8011440:	9b06      	ldr	r3, [sp, #24]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d05c      	beq.n	8011500 <_dtoa_r+0xa78>
 8011446:	6879      	ldr	r1, [r7, #4]
 8011448:	4620      	mov	r0, r4
 801144a:	f000 f915 	bl	8011678 <_Balloc>
 801144e:	4605      	mov	r5, r0
 8011450:	b928      	cbnz	r0, 801145e <_dtoa_r+0x9d6>
 8011452:	4b80      	ldr	r3, [pc, #512]	; (8011654 <_dtoa_r+0xbcc>)
 8011454:	4602      	mov	r2, r0
 8011456:	f240 21ea 	movw	r1, #746	; 0x2ea
 801145a:	f7ff bb2e 	b.w	8010aba <_dtoa_r+0x32>
 801145e:	693a      	ldr	r2, [r7, #16]
 8011460:	3202      	adds	r2, #2
 8011462:	0092      	lsls	r2, r2, #2
 8011464:	f107 010c 	add.w	r1, r7, #12
 8011468:	300c      	adds	r0, #12
 801146a:	f7fe fde1 	bl	8010030 <memcpy>
 801146e:	2201      	movs	r2, #1
 8011470:	4629      	mov	r1, r5
 8011472:	4620      	mov	r0, r4
 8011474:	f000 fb12 	bl	8011a9c <__lshift>
 8011478:	9b00      	ldr	r3, [sp, #0]
 801147a:	3301      	adds	r3, #1
 801147c:	9301      	str	r3, [sp, #4]
 801147e:	9b00      	ldr	r3, [sp, #0]
 8011480:	444b      	add	r3, r9
 8011482:	9307      	str	r3, [sp, #28]
 8011484:	9b02      	ldr	r3, [sp, #8]
 8011486:	f003 0301 	and.w	r3, r3, #1
 801148a:	46b8      	mov	r8, r7
 801148c:	9306      	str	r3, [sp, #24]
 801148e:	4607      	mov	r7, r0
 8011490:	9b01      	ldr	r3, [sp, #4]
 8011492:	4631      	mov	r1, r6
 8011494:	3b01      	subs	r3, #1
 8011496:	4658      	mov	r0, fp
 8011498:	9302      	str	r3, [sp, #8]
 801149a:	f7ff fa69 	bl	8010970 <quorem>
 801149e:	4603      	mov	r3, r0
 80114a0:	3330      	adds	r3, #48	; 0x30
 80114a2:	9004      	str	r0, [sp, #16]
 80114a4:	4641      	mov	r1, r8
 80114a6:	4658      	mov	r0, fp
 80114a8:	9308      	str	r3, [sp, #32]
 80114aa:	f000 fb63 	bl	8011b74 <__mcmp>
 80114ae:	463a      	mov	r2, r7
 80114b0:	4681      	mov	r9, r0
 80114b2:	4631      	mov	r1, r6
 80114b4:	4620      	mov	r0, r4
 80114b6:	f000 fb79 	bl	8011bac <__mdiff>
 80114ba:	68c2      	ldr	r2, [r0, #12]
 80114bc:	9b08      	ldr	r3, [sp, #32]
 80114be:	4605      	mov	r5, r0
 80114c0:	bb02      	cbnz	r2, 8011504 <_dtoa_r+0xa7c>
 80114c2:	4601      	mov	r1, r0
 80114c4:	4658      	mov	r0, fp
 80114c6:	f000 fb55 	bl	8011b74 <__mcmp>
 80114ca:	9b08      	ldr	r3, [sp, #32]
 80114cc:	4602      	mov	r2, r0
 80114ce:	4629      	mov	r1, r5
 80114d0:	4620      	mov	r0, r4
 80114d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80114d6:	f000 f90f 	bl	80116f8 <_Bfree>
 80114da:	9b05      	ldr	r3, [sp, #20]
 80114dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114de:	9d01      	ldr	r5, [sp, #4]
 80114e0:	ea43 0102 	orr.w	r1, r3, r2
 80114e4:	9b06      	ldr	r3, [sp, #24]
 80114e6:	430b      	orrs	r3, r1
 80114e8:	9b08      	ldr	r3, [sp, #32]
 80114ea:	d10d      	bne.n	8011508 <_dtoa_r+0xa80>
 80114ec:	2b39      	cmp	r3, #57	; 0x39
 80114ee:	d029      	beq.n	8011544 <_dtoa_r+0xabc>
 80114f0:	f1b9 0f00 	cmp.w	r9, #0
 80114f4:	dd01      	ble.n	80114fa <_dtoa_r+0xa72>
 80114f6:	9b04      	ldr	r3, [sp, #16]
 80114f8:	3331      	adds	r3, #49	; 0x31
 80114fa:	9a02      	ldr	r2, [sp, #8]
 80114fc:	7013      	strb	r3, [r2, #0]
 80114fe:	e774      	b.n	80113ea <_dtoa_r+0x962>
 8011500:	4638      	mov	r0, r7
 8011502:	e7b9      	b.n	8011478 <_dtoa_r+0x9f0>
 8011504:	2201      	movs	r2, #1
 8011506:	e7e2      	b.n	80114ce <_dtoa_r+0xa46>
 8011508:	f1b9 0f00 	cmp.w	r9, #0
 801150c:	db06      	blt.n	801151c <_dtoa_r+0xa94>
 801150e:	9905      	ldr	r1, [sp, #20]
 8011510:	ea41 0909 	orr.w	r9, r1, r9
 8011514:	9906      	ldr	r1, [sp, #24]
 8011516:	ea59 0101 	orrs.w	r1, r9, r1
 801151a:	d120      	bne.n	801155e <_dtoa_r+0xad6>
 801151c:	2a00      	cmp	r2, #0
 801151e:	ddec      	ble.n	80114fa <_dtoa_r+0xa72>
 8011520:	4659      	mov	r1, fp
 8011522:	2201      	movs	r2, #1
 8011524:	4620      	mov	r0, r4
 8011526:	9301      	str	r3, [sp, #4]
 8011528:	f000 fab8 	bl	8011a9c <__lshift>
 801152c:	4631      	mov	r1, r6
 801152e:	4683      	mov	fp, r0
 8011530:	f000 fb20 	bl	8011b74 <__mcmp>
 8011534:	2800      	cmp	r0, #0
 8011536:	9b01      	ldr	r3, [sp, #4]
 8011538:	dc02      	bgt.n	8011540 <_dtoa_r+0xab8>
 801153a:	d1de      	bne.n	80114fa <_dtoa_r+0xa72>
 801153c:	07da      	lsls	r2, r3, #31
 801153e:	d5dc      	bpl.n	80114fa <_dtoa_r+0xa72>
 8011540:	2b39      	cmp	r3, #57	; 0x39
 8011542:	d1d8      	bne.n	80114f6 <_dtoa_r+0xa6e>
 8011544:	9a02      	ldr	r2, [sp, #8]
 8011546:	2339      	movs	r3, #57	; 0x39
 8011548:	7013      	strb	r3, [r2, #0]
 801154a:	462b      	mov	r3, r5
 801154c:	461d      	mov	r5, r3
 801154e:	3b01      	subs	r3, #1
 8011550:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011554:	2a39      	cmp	r2, #57	; 0x39
 8011556:	d050      	beq.n	80115fa <_dtoa_r+0xb72>
 8011558:	3201      	adds	r2, #1
 801155a:	701a      	strb	r2, [r3, #0]
 801155c:	e745      	b.n	80113ea <_dtoa_r+0x962>
 801155e:	2a00      	cmp	r2, #0
 8011560:	dd03      	ble.n	801156a <_dtoa_r+0xae2>
 8011562:	2b39      	cmp	r3, #57	; 0x39
 8011564:	d0ee      	beq.n	8011544 <_dtoa_r+0xabc>
 8011566:	3301      	adds	r3, #1
 8011568:	e7c7      	b.n	80114fa <_dtoa_r+0xa72>
 801156a:	9a01      	ldr	r2, [sp, #4]
 801156c:	9907      	ldr	r1, [sp, #28]
 801156e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011572:	428a      	cmp	r2, r1
 8011574:	d02a      	beq.n	80115cc <_dtoa_r+0xb44>
 8011576:	4659      	mov	r1, fp
 8011578:	2300      	movs	r3, #0
 801157a:	220a      	movs	r2, #10
 801157c:	4620      	mov	r0, r4
 801157e:	f000 f8dd 	bl	801173c <__multadd>
 8011582:	45b8      	cmp	r8, r7
 8011584:	4683      	mov	fp, r0
 8011586:	f04f 0300 	mov.w	r3, #0
 801158a:	f04f 020a 	mov.w	r2, #10
 801158e:	4641      	mov	r1, r8
 8011590:	4620      	mov	r0, r4
 8011592:	d107      	bne.n	80115a4 <_dtoa_r+0xb1c>
 8011594:	f000 f8d2 	bl	801173c <__multadd>
 8011598:	4680      	mov	r8, r0
 801159a:	4607      	mov	r7, r0
 801159c:	9b01      	ldr	r3, [sp, #4]
 801159e:	3301      	adds	r3, #1
 80115a0:	9301      	str	r3, [sp, #4]
 80115a2:	e775      	b.n	8011490 <_dtoa_r+0xa08>
 80115a4:	f000 f8ca 	bl	801173c <__multadd>
 80115a8:	4639      	mov	r1, r7
 80115aa:	4680      	mov	r8, r0
 80115ac:	2300      	movs	r3, #0
 80115ae:	220a      	movs	r2, #10
 80115b0:	4620      	mov	r0, r4
 80115b2:	f000 f8c3 	bl	801173c <__multadd>
 80115b6:	4607      	mov	r7, r0
 80115b8:	e7f0      	b.n	801159c <_dtoa_r+0xb14>
 80115ba:	f1b9 0f00 	cmp.w	r9, #0
 80115be:	9a00      	ldr	r2, [sp, #0]
 80115c0:	bfcc      	ite	gt
 80115c2:	464d      	movgt	r5, r9
 80115c4:	2501      	movle	r5, #1
 80115c6:	4415      	add	r5, r2
 80115c8:	f04f 0800 	mov.w	r8, #0
 80115cc:	4659      	mov	r1, fp
 80115ce:	2201      	movs	r2, #1
 80115d0:	4620      	mov	r0, r4
 80115d2:	9301      	str	r3, [sp, #4]
 80115d4:	f000 fa62 	bl	8011a9c <__lshift>
 80115d8:	4631      	mov	r1, r6
 80115da:	4683      	mov	fp, r0
 80115dc:	f000 faca 	bl	8011b74 <__mcmp>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	dcb2      	bgt.n	801154a <_dtoa_r+0xac2>
 80115e4:	d102      	bne.n	80115ec <_dtoa_r+0xb64>
 80115e6:	9b01      	ldr	r3, [sp, #4]
 80115e8:	07db      	lsls	r3, r3, #31
 80115ea:	d4ae      	bmi.n	801154a <_dtoa_r+0xac2>
 80115ec:	462b      	mov	r3, r5
 80115ee:	461d      	mov	r5, r3
 80115f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80115f4:	2a30      	cmp	r2, #48	; 0x30
 80115f6:	d0fa      	beq.n	80115ee <_dtoa_r+0xb66>
 80115f8:	e6f7      	b.n	80113ea <_dtoa_r+0x962>
 80115fa:	9a00      	ldr	r2, [sp, #0]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d1a5      	bne.n	801154c <_dtoa_r+0xac4>
 8011600:	f10a 0a01 	add.w	sl, sl, #1
 8011604:	2331      	movs	r3, #49	; 0x31
 8011606:	e779      	b.n	80114fc <_dtoa_r+0xa74>
 8011608:	4b13      	ldr	r3, [pc, #76]	; (8011658 <_dtoa_r+0xbd0>)
 801160a:	f7ff baaf 	b.w	8010b6c <_dtoa_r+0xe4>
 801160e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011610:	2b00      	cmp	r3, #0
 8011612:	f47f aa86 	bne.w	8010b22 <_dtoa_r+0x9a>
 8011616:	4b11      	ldr	r3, [pc, #68]	; (801165c <_dtoa_r+0xbd4>)
 8011618:	f7ff baa8 	b.w	8010b6c <_dtoa_r+0xe4>
 801161c:	f1b9 0f00 	cmp.w	r9, #0
 8011620:	dc03      	bgt.n	801162a <_dtoa_r+0xba2>
 8011622:	9b05      	ldr	r3, [sp, #20]
 8011624:	2b02      	cmp	r3, #2
 8011626:	f73f aec9 	bgt.w	80113bc <_dtoa_r+0x934>
 801162a:	9d00      	ldr	r5, [sp, #0]
 801162c:	4631      	mov	r1, r6
 801162e:	4658      	mov	r0, fp
 8011630:	f7ff f99e 	bl	8010970 <quorem>
 8011634:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011638:	f805 3b01 	strb.w	r3, [r5], #1
 801163c:	9a00      	ldr	r2, [sp, #0]
 801163e:	1aaa      	subs	r2, r5, r2
 8011640:	4591      	cmp	r9, r2
 8011642:	ddba      	ble.n	80115ba <_dtoa_r+0xb32>
 8011644:	4659      	mov	r1, fp
 8011646:	2300      	movs	r3, #0
 8011648:	220a      	movs	r2, #10
 801164a:	4620      	mov	r0, r4
 801164c:	f000 f876 	bl	801173c <__multadd>
 8011650:	4683      	mov	fp, r0
 8011652:	e7eb      	b.n	801162c <_dtoa_r+0xba4>
 8011654:	080135b3 	.word	0x080135b3
 8011658:	0801350c 	.word	0x0801350c
 801165c:	08013530 	.word	0x08013530

08011660 <_localeconv_r>:
 8011660:	4800      	ldr	r0, [pc, #0]	; (8011664 <_localeconv_r+0x4>)
 8011662:	4770      	bx	lr
 8011664:	20000174 	.word	0x20000174

08011668 <malloc>:
 8011668:	4b02      	ldr	r3, [pc, #8]	; (8011674 <malloc+0xc>)
 801166a:	4601      	mov	r1, r0
 801166c:	6818      	ldr	r0, [r3, #0]
 801166e:	f000 bbe1 	b.w	8011e34 <_malloc_r>
 8011672:	bf00      	nop
 8011674:	20000020 	.word	0x20000020

08011678 <_Balloc>:
 8011678:	b570      	push	{r4, r5, r6, lr}
 801167a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801167c:	4604      	mov	r4, r0
 801167e:	460d      	mov	r5, r1
 8011680:	b976      	cbnz	r6, 80116a0 <_Balloc+0x28>
 8011682:	2010      	movs	r0, #16
 8011684:	f7ff fff0 	bl	8011668 <malloc>
 8011688:	4602      	mov	r2, r0
 801168a:	6260      	str	r0, [r4, #36]	; 0x24
 801168c:	b920      	cbnz	r0, 8011698 <_Balloc+0x20>
 801168e:	4b18      	ldr	r3, [pc, #96]	; (80116f0 <_Balloc+0x78>)
 8011690:	4818      	ldr	r0, [pc, #96]	; (80116f4 <_Balloc+0x7c>)
 8011692:	2166      	movs	r1, #102	; 0x66
 8011694:	f000 fd94 	bl	80121c0 <__assert_func>
 8011698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801169c:	6006      	str	r6, [r0, #0]
 801169e:	60c6      	str	r6, [r0, #12]
 80116a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80116a2:	68f3      	ldr	r3, [r6, #12]
 80116a4:	b183      	cbz	r3, 80116c8 <_Balloc+0x50>
 80116a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116a8:	68db      	ldr	r3, [r3, #12]
 80116aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80116ae:	b9b8      	cbnz	r0, 80116e0 <_Balloc+0x68>
 80116b0:	2101      	movs	r1, #1
 80116b2:	fa01 f605 	lsl.w	r6, r1, r5
 80116b6:	1d72      	adds	r2, r6, #5
 80116b8:	0092      	lsls	r2, r2, #2
 80116ba:	4620      	mov	r0, r4
 80116bc:	f000 fb5a 	bl	8011d74 <_calloc_r>
 80116c0:	b160      	cbz	r0, 80116dc <_Balloc+0x64>
 80116c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80116c6:	e00e      	b.n	80116e6 <_Balloc+0x6e>
 80116c8:	2221      	movs	r2, #33	; 0x21
 80116ca:	2104      	movs	r1, #4
 80116cc:	4620      	mov	r0, r4
 80116ce:	f000 fb51 	bl	8011d74 <_calloc_r>
 80116d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116d4:	60f0      	str	r0, [r6, #12]
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d1e4      	bne.n	80116a6 <_Balloc+0x2e>
 80116dc:	2000      	movs	r0, #0
 80116de:	bd70      	pop	{r4, r5, r6, pc}
 80116e0:	6802      	ldr	r2, [r0, #0]
 80116e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116e6:	2300      	movs	r3, #0
 80116e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80116ec:	e7f7      	b.n	80116de <_Balloc+0x66>
 80116ee:	bf00      	nop
 80116f0:	0801353d 	.word	0x0801353d
 80116f4:	080135c4 	.word	0x080135c4

080116f8 <_Bfree>:
 80116f8:	b570      	push	{r4, r5, r6, lr}
 80116fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80116fc:	4605      	mov	r5, r0
 80116fe:	460c      	mov	r4, r1
 8011700:	b976      	cbnz	r6, 8011720 <_Bfree+0x28>
 8011702:	2010      	movs	r0, #16
 8011704:	f7ff ffb0 	bl	8011668 <malloc>
 8011708:	4602      	mov	r2, r0
 801170a:	6268      	str	r0, [r5, #36]	; 0x24
 801170c:	b920      	cbnz	r0, 8011718 <_Bfree+0x20>
 801170e:	4b09      	ldr	r3, [pc, #36]	; (8011734 <_Bfree+0x3c>)
 8011710:	4809      	ldr	r0, [pc, #36]	; (8011738 <_Bfree+0x40>)
 8011712:	218a      	movs	r1, #138	; 0x8a
 8011714:	f000 fd54 	bl	80121c0 <__assert_func>
 8011718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801171c:	6006      	str	r6, [r0, #0]
 801171e:	60c6      	str	r6, [r0, #12]
 8011720:	b13c      	cbz	r4, 8011732 <_Bfree+0x3a>
 8011722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011724:	6862      	ldr	r2, [r4, #4]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801172c:	6021      	str	r1, [r4, #0]
 801172e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011732:	bd70      	pop	{r4, r5, r6, pc}
 8011734:	0801353d 	.word	0x0801353d
 8011738:	080135c4 	.word	0x080135c4

0801173c <__multadd>:
 801173c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011740:	690e      	ldr	r6, [r1, #16]
 8011742:	4607      	mov	r7, r0
 8011744:	4698      	mov	r8, r3
 8011746:	460c      	mov	r4, r1
 8011748:	f101 0014 	add.w	r0, r1, #20
 801174c:	2300      	movs	r3, #0
 801174e:	6805      	ldr	r5, [r0, #0]
 8011750:	b2a9      	uxth	r1, r5
 8011752:	fb02 8101 	mla	r1, r2, r1, r8
 8011756:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801175a:	0c2d      	lsrs	r5, r5, #16
 801175c:	fb02 c505 	mla	r5, r2, r5, ip
 8011760:	b289      	uxth	r1, r1
 8011762:	3301      	adds	r3, #1
 8011764:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011768:	429e      	cmp	r6, r3
 801176a:	f840 1b04 	str.w	r1, [r0], #4
 801176e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011772:	dcec      	bgt.n	801174e <__multadd+0x12>
 8011774:	f1b8 0f00 	cmp.w	r8, #0
 8011778:	d022      	beq.n	80117c0 <__multadd+0x84>
 801177a:	68a3      	ldr	r3, [r4, #8]
 801177c:	42b3      	cmp	r3, r6
 801177e:	dc19      	bgt.n	80117b4 <__multadd+0x78>
 8011780:	6861      	ldr	r1, [r4, #4]
 8011782:	4638      	mov	r0, r7
 8011784:	3101      	adds	r1, #1
 8011786:	f7ff ff77 	bl	8011678 <_Balloc>
 801178a:	4605      	mov	r5, r0
 801178c:	b928      	cbnz	r0, 801179a <__multadd+0x5e>
 801178e:	4602      	mov	r2, r0
 8011790:	4b0d      	ldr	r3, [pc, #52]	; (80117c8 <__multadd+0x8c>)
 8011792:	480e      	ldr	r0, [pc, #56]	; (80117cc <__multadd+0x90>)
 8011794:	21b5      	movs	r1, #181	; 0xb5
 8011796:	f000 fd13 	bl	80121c0 <__assert_func>
 801179a:	6922      	ldr	r2, [r4, #16]
 801179c:	3202      	adds	r2, #2
 801179e:	f104 010c 	add.w	r1, r4, #12
 80117a2:	0092      	lsls	r2, r2, #2
 80117a4:	300c      	adds	r0, #12
 80117a6:	f7fe fc43 	bl	8010030 <memcpy>
 80117aa:	4621      	mov	r1, r4
 80117ac:	4638      	mov	r0, r7
 80117ae:	f7ff ffa3 	bl	80116f8 <_Bfree>
 80117b2:	462c      	mov	r4, r5
 80117b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80117b8:	3601      	adds	r6, #1
 80117ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80117be:	6126      	str	r6, [r4, #16]
 80117c0:	4620      	mov	r0, r4
 80117c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c6:	bf00      	nop
 80117c8:	080135b3 	.word	0x080135b3
 80117cc:	080135c4 	.word	0x080135c4

080117d0 <__hi0bits>:
 80117d0:	0c03      	lsrs	r3, r0, #16
 80117d2:	041b      	lsls	r3, r3, #16
 80117d4:	b9d3      	cbnz	r3, 801180c <__hi0bits+0x3c>
 80117d6:	0400      	lsls	r0, r0, #16
 80117d8:	2310      	movs	r3, #16
 80117da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80117de:	bf04      	itt	eq
 80117e0:	0200      	lsleq	r0, r0, #8
 80117e2:	3308      	addeq	r3, #8
 80117e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80117e8:	bf04      	itt	eq
 80117ea:	0100      	lsleq	r0, r0, #4
 80117ec:	3304      	addeq	r3, #4
 80117ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80117f2:	bf04      	itt	eq
 80117f4:	0080      	lsleq	r0, r0, #2
 80117f6:	3302      	addeq	r3, #2
 80117f8:	2800      	cmp	r0, #0
 80117fa:	db05      	blt.n	8011808 <__hi0bits+0x38>
 80117fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011800:	f103 0301 	add.w	r3, r3, #1
 8011804:	bf08      	it	eq
 8011806:	2320      	moveq	r3, #32
 8011808:	4618      	mov	r0, r3
 801180a:	4770      	bx	lr
 801180c:	2300      	movs	r3, #0
 801180e:	e7e4      	b.n	80117da <__hi0bits+0xa>

08011810 <__lo0bits>:
 8011810:	6803      	ldr	r3, [r0, #0]
 8011812:	f013 0207 	ands.w	r2, r3, #7
 8011816:	4601      	mov	r1, r0
 8011818:	d00b      	beq.n	8011832 <__lo0bits+0x22>
 801181a:	07da      	lsls	r2, r3, #31
 801181c:	d424      	bmi.n	8011868 <__lo0bits+0x58>
 801181e:	0798      	lsls	r0, r3, #30
 8011820:	bf49      	itett	mi
 8011822:	085b      	lsrmi	r3, r3, #1
 8011824:	089b      	lsrpl	r3, r3, #2
 8011826:	2001      	movmi	r0, #1
 8011828:	600b      	strmi	r3, [r1, #0]
 801182a:	bf5c      	itt	pl
 801182c:	600b      	strpl	r3, [r1, #0]
 801182e:	2002      	movpl	r0, #2
 8011830:	4770      	bx	lr
 8011832:	b298      	uxth	r0, r3
 8011834:	b9b0      	cbnz	r0, 8011864 <__lo0bits+0x54>
 8011836:	0c1b      	lsrs	r3, r3, #16
 8011838:	2010      	movs	r0, #16
 801183a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801183e:	bf04      	itt	eq
 8011840:	0a1b      	lsreq	r3, r3, #8
 8011842:	3008      	addeq	r0, #8
 8011844:	071a      	lsls	r2, r3, #28
 8011846:	bf04      	itt	eq
 8011848:	091b      	lsreq	r3, r3, #4
 801184a:	3004      	addeq	r0, #4
 801184c:	079a      	lsls	r2, r3, #30
 801184e:	bf04      	itt	eq
 8011850:	089b      	lsreq	r3, r3, #2
 8011852:	3002      	addeq	r0, #2
 8011854:	07da      	lsls	r2, r3, #31
 8011856:	d403      	bmi.n	8011860 <__lo0bits+0x50>
 8011858:	085b      	lsrs	r3, r3, #1
 801185a:	f100 0001 	add.w	r0, r0, #1
 801185e:	d005      	beq.n	801186c <__lo0bits+0x5c>
 8011860:	600b      	str	r3, [r1, #0]
 8011862:	4770      	bx	lr
 8011864:	4610      	mov	r0, r2
 8011866:	e7e8      	b.n	801183a <__lo0bits+0x2a>
 8011868:	2000      	movs	r0, #0
 801186a:	4770      	bx	lr
 801186c:	2020      	movs	r0, #32
 801186e:	4770      	bx	lr

08011870 <__i2b>:
 8011870:	b510      	push	{r4, lr}
 8011872:	460c      	mov	r4, r1
 8011874:	2101      	movs	r1, #1
 8011876:	f7ff feff 	bl	8011678 <_Balloc>
 801187a:	4602      	mov	r2, r0
 801187c:	b928      	cbnz	r0, 801188a <__i2b+0x1a>
 801187e:	4b05      	ldr	r3, [pc, #20]	; (8011894 <__i2b+0x24>)
 8011880:	4805      	ldr	r0, [pc, #20]	; (8011898 <__i2b+0x28>)
 8011882:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011886:	f000 fc9b 	bl	80121c0 <__assert_func>
 801188a:	2301      	movs	r3, #1
 801188c:	6144      	str	r4, [r0, #20]
 801188e:	6103      	str	r3, [r0, #16]
 8011890:	bd10      	pop	{r4, pc}
 8011892:	bf00      	nop
 8011894:	080135b3 	.word	0x080135b3
 8011898:	080135c4 	.word	0x080135c4

0801189c <__multiply>:
 801189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a0:	4614      	mov	r4, r2
 80118a2:	690a      	ldr	r2, [r1, #16]
 80118a4:	6923      	ldr	r3, [r4, #16]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	bfb8      	it	lt
 80118aa:	460b      	movlt	r3, r1
 80118ac:	460d      	mov	r5, r1
 80118ae:	bfbc      	itt	lt
 80118b0:	4625      	movlt	r5, r4
 80118b2:	461c      	movlt	r4, r3
 80118b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80118b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80118bc:	68ab      	ldr	r3, [r5, #8]
 80118be:	6869      	ldr	r1, [r5, #4]
 80118c0:	eb0a 0709 	add.w	r7, sl, r9
 80118c4:	42bb      	cmp	r3, r7
 80118c6:	b085      	sub	sp, #20
 80118c8:	bfb8      	it	lt
 80118ca:	3101      	addlt	r1, #1
 80118cc:	f7ff fed4 	bl	8011678 <_Balloc>
 80118d0:	b930      	cbnz	r0, 80118e0 <__multiply+0x44>
 80118d2:	4602      	mov	r2, r0
 80118d4:	4b42      	ldr	r3, [pc, #264]	; (80119e0 <__multiply+0x144>)
 80118d6:	4843      	ldr	r0, [pc, #268]	; (80119e4 <__multiply+0x148>)
 80118d8:	f240 115d 	movw	r1, #349	; 0x15d
 80118dc:	f000 fc70 	bl	80121c0 <__assert_func>
 80118e0:	f100 0614 	add.w	r6, r0, #20
 80118e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80118e8:	4633      	mov	r3, r6
 80118ea:	2200      	movs	r2, #0
 80118ec:	4543      	cmp	r3, r8
 80118ee:	d31e      	bcc.n	801192e <__multiply+0x92>
 80118f0:	f105 0c14 	add.w	ip, r5, #20
 80118f4:	f104 0314 	add.w	r3, r4, #20
 80118f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80118fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011900:	9202      	str	r2, [sp, #8]
 8011902:	ebac 0205 	sub.w	r2, ip, r5
 8011906:	3a15      	subs	r2, #21
 8011908:	f022 0203 	bic.w	r2, r2, #3
 801190c:	3204      	adds	r2, #4
 801190e:	f105 0115 	add.w	r1, r5, #21
 8011912:	458c      	cmp	ip, r1
 8011914:	bf38      	it	cc
 8011916:	2204      	movcc	r2, #4
 8011918:	9201      	str	r2, [sp, #4]
 801191a:	9a02      	ldr	r2, [sp, #8]
 801191c:	9303      	str	r3, [sp, #12]
 801191e:	429a      	cmp	r2, r3
 8011920:	d808      	bhi.n	8011934 <__multiply+0x98>
 8011922:	2f00      	cmp	r7, #0
 8011924:	dc55      	bgt.n	80119d2 <__multiply+0x136>
 8011926:	6107      	str	r7, [r0, #16]
 8011928:	b005      	add	sp, #20
 801192a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801192e:	f843 2b04 	str.w	r2, [r3], #4
 8011932:	e7db      	b.n	80118ec <__multiply+0x50>
 8011934:	f8b3 a000 	ldrh.w	sl, [r3]
 8011938:	f1ba 0f00 	cmp.w	sl, #0
 801193c:	d020      	beq.n	8011980 <__multiply+0xe4>
 801193e:	f105 0e14 	add.w	lr, r5, #20
 8011942:	46b1      	mov	r9, r6
 8011944:	2200      	movs	r2, #0
 8011946:	f85e 4b04 	ldr.w	r4, [lr], #4
 801194a:	f8d9 b000 	ldr.w	fp, [r9]
 801194e:	b2a1      	uxth	r1, r4
 8011950:	fa1f fb8b 	uxth.w	fp, fp
 8011954:	fb0a b101 	mla	r1, sl, r1, fp
 8011958:	4411      	add	r1, r2
 801195a:	f8d9 2000 	ldr.w	r2, [r9]
 801195e:	0c24      	lsrs	r4, r4, #16
 8011960:	0c12      	lsrs	r2, r2, #16
 8011962:	fb0a 2404 	mla	r4, sl, r4, r2
 8011966:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801196a:	b289      	uxth	r1, r1
 801196c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011970:	45f4      	cmp	ip, lr
 8011972:	f849 1b04 	str.w	r1, [r9], #4
 8011976:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801197a:	d8e4      	bhi.n	8011946 <__multiply+0xaa>
 801197c:	9901      	ldr	r1, [sp, #4]
 801197e:	5072      	str	r2, [r6, r1]
 8011980:	9a03      	ldr	r2, [sp, #12]
 8011982:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011986:	3304      	adds	r3, #4
 8011988:	f1b9 0f00 	cmp.w	r9, #0
 801198c:	d01f      	beq.n	80119ce <__multiply+0x132>
 801198e:	6834      	ldr	r4, [r6, #0]
 8011990:	f105 0114 	add.w	r1, r5, #20
 8011994:	46b6      	mov	lr, r6
 8011996:	f04f 0a00 	mov.w	sl, #0
 801199a:	880a      	ldrh	r2, [r1, #0]
 801199c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80119a0:	fb09 b202 	mla	r2, r9, r2, fp
 80119a4:	4492      	add	sl, r2
 80119a6:	b2a4      	uxth	r4, r4
 80119a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80119ac:	f84e 4b04 	str.w	r4, [lr], #4
 80119b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80119b4:	f8be 2000 	ldrh.w	r2, [lr]
 80119b8:	0c24      	lsrs	r4, r4, #16
 80119ba:	fb09 2404 	mla	r4, r9, r4, r2
 80119be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80119c2:	458c      	cmp	ip, r1
 80119c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80119c8:	d8e7      	bhi.n	801199a <__multiply+0xfe>
 80119ca:	9a01      	ldr	r2, [sp, #4]
 80119cc:	50b4      	str	r4, [r6, r2]
 80119ce:	3604      	adds	r6, #4
 80119d0:	e7a3      	b.n	801191a <__multiply+0x7e>
 80119d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1a5      	bne.n	8011926 <__multiply+0x8a>
 80119da:	3f01      	subs	r7, #1
 80119dc:	e7a1      	b.n	8011922 <__multiply+0x86>
 80119de:	bf00      	nop
 80119e0:	080135b3 	.word	0x080135b3
 80119e4:	080135c4 	.word	0x080135c4

080119e8 <__pow5mult>:
 80119e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119ec:	4615      	mov	r5, r2
 80119ee:	f012 0203 	ands.w	r2, r2, #3
 80119f2:	4606      	mov	r6, r0
 80119f4:	460f      	mov	r7, r1
 80119f6:	d007      	beq.n	8011a08 <__pow5mult+0x20>
 80119f8:	4c25      	ldr	r4, [pc, #148]	; (8011a90 <__pow5mult+0xa8>)
 80119fa:	3a01      	subs	r2, #1
 80119fc:	2300      	movs	r3, #0
 80119fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a02:	f7ff fe9b 	bl	801173c <__multadd>
 8011a06:	4607      	mov	r7, r0
 8011a08:	10ad      	asrs	r5, r5, #2
 8011a0a:	d03d      	beq.n	8011a88 <__pow5mult+0xa0>
 8011a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011a0e:	b97c      	cbnz	r4, 8011a30 <__pow5mult+0x48>
 8011a10:	2010      	movs	r0, #16
 8011a12:	f7ff fe29 	bl	8011668 <malloc>
 8011a16:	4602      	mov	r2, r0
 8011a18:	6270      	str	r0, [r6, #36]	; 0x24
 8011a1a:	b928      	cbnz	r0, 8011a28 <__pow5mult+0x40>
 8011a1c:	4b1d      	ldr	r3, [pc, #116]	; (8011a94 <__pow5mult+0xac>)
 8011a1e:	481e      	ldr	r0, [pc, #120]	; (8011a98 <__pow5mult+0xb0>)
 8011a20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011a24:	f000 fbcc 	bl	80121c0 <__assert_func>
 8011a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a2c:	6004      	str	r4, [r0, #0]
 8011a2e:	60c4      	str	r4, [r0, #12]
 8011a30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a38:	b94c      	cbnz	r4, 8011a4e <__pow5mult+0x66>
 8011a3a:	f240 2171 	movw	r1, #625	; 0x271
 8011a3e:	4630      	mov	r0, r6
 8011a40:	f7ff ff16 	bl	8011870 <__i2b>
 8011a44:	2300      	movs	r3, #0
 8011a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	6003      	str	r3, [r0, #0]
 8011a4e:	f04f 0900 	mov.w	r9, #0
 8011a52:	07eb      	lsls	r3, r5, #31
 8011a54:	d50a      	bpl.n	8011a6c <__pow5mult+0x84>
 8011a56:	4639      	mov	r1, r7
 8011a58:	4622      	mov	r2, r4
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	f7ff ff1e 	bl	801189c <__multiply>
 8011a60:	4639      	mov	r1, r7
 8011a62:	4680      	mov	r8, r0
 8011a64:	4630      	mov	r0, r6
 8011a66:	f7ff fe47 	bl	80116f8 <_Bfree>
 8011a6a:	4647      	mov	r7, r8
 8011a6c:	106d      	asrs	r5, r5, #1
 8011a6e:	d00b      	beq.n	8011a88 <__pow5mult+0xa0>
 8011a70:	6820      	ldr	r0, [r4, #0]
 8011a72:	b938      	cbnz	r0, 8011a84 <__pow5mult+0x9c>
 8011a74:	4622      	mov	r2, r4
 8011a76:	4621      	mov	r1, r4
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ff ff0f 	bl	801189c <__multiply>
 8011a7e:	6020      	str	r0, [r4, #0]
 8011a80:	f8c0 9000 	str.w	r9, [r0]
 8011a84:	4604      	mov	r4, r0
 8011a86:	e7e4      	b.n	8011a52 <__pow5mult+0x6a>
 8011a88:	4638      	mov	r0, r7
 8011a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a8e:	bf00      	nop
 8011a90:	08013718 	.word	0x08013718
 8011a94:	0801353d 	.word	0x0801353d
 8011a98:	080135c4 	.word	0x080135c4

08011a9c <__lshift>:
 8011a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa0:	460c      	mov	r4, r1
 8011aa2:	6849      	ldr	r1, [r1, #4]
 8011aa4:	6923      	ldr	r3, [r4, #16]
 8011aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011aaa:	68a3      	ldr	r3, [r4, #8]
 8011aac:	4607      	mov	r7, r0
 8011aae:	4691      	mov	r9, r2
 8011ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ab4:	f108 0601 	add.w	r6, r8, #1
 8011ab8:	42b3      	cmp	r3, r6
 8011aba:	db0b      	blt.n	8011ad4 <__lshift+0x38>
 8011abc:	4638      	mov	r0, r7
 8011abe:	f7ff fddb 	bl	8011678 <_Balloc>
 8011ac2:	4605      	mov	r5, r0
 8011ac4:	b948      	cbnz	r0, 8011ada <__lshift+0x3e>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	4b28      	ldr	r3, [pc, #160]	; (8011b6c <__lshift+0xd0>)
 8011aca:	4829      	ldr	r0, [pc, #164]	; (8011b70 <__lshift+0xd4>)
 8011acc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011ad0:	f000 fb76 	bl	80121c0 <__assert_func>
 8011ad4:	3101      	adds	r1, #1
 8011ad6:	005b      	lsls	r3, r3, #1
 8011ad8:	e7ee      	b.n	8011ab8 <__lshift+0x1c>
 8011ada:	2300      	movs	r3, #0
 8011adc:	f100 0114 	add.w	r1, r0, #20
 8011ae0:	f100 0210 	add.w	r2, r0, #16
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	4553      	cmp	r3, sl
 8011ae8:	db33      	blt.n	8011b52 <__lshift+0xb6>
 8011aea:	6920      	ldr	r0, [r4, #16]
 8011aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011af0:	f104 0314 	add.w	r3, r4, #20
 8011af4:	f019 091f 	ands.w	r9, r9, #31
 8011af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b00:	d02b      	beq.n	8011b5a <__lshift+0xbe>
 8011b02:	f1c9 0e20 	rsb	lr, r9, #32
 8011b06:	468a      	mov	sl, r1
 8011b08:	2200      	movs	r2, #0
 8011b0a:	6818      	ldr	r0, [r3, #0]
 8011b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8011b10:	4302      	orrs	r2, r0
 8011b12:	f84a 2b04 	str.w	r2, [sl], #4
 8011b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b1a:	459c      	cmp	ip, r3
 8011b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b20:	d8f3      	bhi.n	8011b0a <__lshift+0x6e>
 8011b22:	ebac 0304 	sub.w	r3, ip, r4
 8011b26:	3b15      	subs	r3, #21
 8011b28:	f023 0303 	bic.w	r3, r3, #3
 8011b2c:	3304      	adds	r3, #4
 8011b2e:	f104 0015 	add.w	r0, r4, #21
 8011b32:	4584      	cmp	ip, r0
 8011b34:	bf38      	it	cc
 8011b36:	2304      	movcc	r3, #4
 8011b38:	50ca      	str	r2, [r1, r3]
 8011b3a:	b10a      	cbz	r2, 8011b40 <__lshift+0xa4>
 8011b3c:	f108 0602 	add.w	r6, r8, #2
 8011b40:	3e01      	subs	r6, #1
 8011b42:	4638      	mov	r0, r7
 8011b44:	612e      	str	r6, [r5, #16]
 8011b46:	4621      	mov	r1, r4
 8011b48:	f7ff fdd6 	bl	80116f8 <_Bfree>
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b56:	3301      	adds	r3, #1
 8011b58:	e7c5      	b.n	8011ae6 <__lshift+0x4a>
 8011b5a:	3904      	subs	r1, #4
 8011b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b60:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b64:	459c      	cmp	ip, r3
 8011b66:	d8f9      	bhi.n	8011b5c <__lshift+0xc0>
 8011b68:	e7ea      	b.n	8011b40 <__lshift+0xa4>
 8011b6a:	bf00      	nop
 8011b6c:	080135b3 	.word	0x080135b3
 8011b70:	080135c4 	.word	0x080135c4

08011b74 <__mcmp>:
 8011b74:	b530      	push	{r4, r5, lr}
 8011b76:	6902      	ldr	r2, [r0, #16]
 8011b78:	690c      	ldr	r4, [r1, #16]
 8011b7a:	1b12      	subs	r2, r2, r4
 8011b7c:	d10e      	bne.n	8011b9c <__mcmp+0x28>
 8011b7e:	f100 0314 	add.w	r3, r0, #20
 8011b82:	3114      	adds	r1, #20
 8011b84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011b88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011b8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011b90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011b94:	42a5      	cmp	r5, r4
 8011b96:	d003      	beq.n	8011ba0 <__mcmp+0x2c>
 8011b98:	d305      	bcc.n	8011ba6 <__mcmp+0x32>
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	4610      	mov	r0, r2
 8011b9e:	bd30      	pop	{r4, r5, pc}
 8011ba0:	4283      	cmp	r3, r0
 8011ba2:	d3f3      	bcc.n	8011b8c <__mcmp+0x18>
 8011ba4:	e7fa      	b.n	8011b9c <__mcmp+0x28>
 8011ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8011baa:	e7f7      	b.n	8011b9c <__mcmp+0x28>

08011bac <__mdiff>:
 8011bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb0:	460c      	mov	r4, r1
 8011bb2:	4606      	mov	r6, r0
 8011bb4:	4611      	mov	r1, r2
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	4617      	mov	r7, r2
 8011bba:	f7ff ffdb 	bl	8011b74 <__mcmp>
 8011bbe:	1e05      	subs	r5, r0, #0
 8011bc0:	d110      	bne.n	8011be4 <__mdiff+0x38>
 8011bc2:	4629      	mov	r1, r5
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	f7ff fd57 	bl	8011678 <_Balloc>
 8011bca:	b930      	cbnz	r0, 8011bda <__mdiff+0x2e>
 8011bcc:	4b39      	ldr	r3, [pc, #228]	; (8011cb4 <__mdiff+0x108>)
 8011bce:	4602      	mov	r2, r0
 8011bd0:	f240 2132 	movw	r1, #562	; 0x232
 8011bd4:	4838      	ldr	r0, [pc, #224]	; (8011cb8 <__mdiff+0x10c>)
 8011bd6:	f000 faf3 	bl	80121c0 <__assert_func>
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be4:	bfa4      	itt	ge
 8011be6:	463b      	movge	r3, r7
 8011be8:	4627      	movge	r7, r4
 8011bea:	4630      	mov	r0, r6
 8011bec:	6879      	ldr	r1, [r7, #4]
 8011bee:	bfa6      	itte	ge
 8011bf0:	461c      	movge	r4, r3
 8011bf2:	2500      	movge	r5, #0
 8011bf4:	2501      	movlt	r5, #1
 8011bf6:	f7ff fd3f 	bl	8011678 <_Balloc>
 8011bfa:	b920      	cbnz	r0, 8011c06 <__mdiff+0x5a>
 8011bfc:	4b2d      	ldr	r3, [pc, #180]	; (8011cb4 <__mdiff+0x108>)
 8011bfe:	4602      	mov	r2, r0
 8011c00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011c04:	e7e6      	b.n	8011bd4 <__mdiff+0x28>
 8011c06:	693e      	ldr	r6, [r7, #16]
 8011c08:	60c5      	str	r5, [r0, #12]
 8011c0a:	6925      	ldr	r5, [r4, #16]
 8011c0c:	f107 0114 	add.w	r1, r7, #20
 8011c10:	f104 0914 	add.w	r9, r4, #20
 8011c14:	f100 0e14 	add.w	lr, r0, #20
 8011c18:	f107 0210 	add.w	r2, r7, #16
 8011c1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011c20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011c24:	46f2      	mov	sl, lr
 8011c26:	2700      	movs	r7, #0
 8011c28:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011c30:	fa1f f883 	uxth.w	r8, r3
 8011c34:	fa17 f78b 	uxtah	r7, r7, fp
 8011c38:	0c1b      	lsrs	r3, r3, #16
 8011c3a:	eba7 0808 	sub.w	r8, r7, r8
 8011c3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011c42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011c46:	fa1f f888 	uxth.w	r8, r8
 8011c4a:	141f      	asrs	r7, r3, #16
 8011c4c:	454d      	cmp	r5, r9
 8011c4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011c52:	f84a 3b04 	str.w	r3, [sl], #4
 8011c56:	d8e7      	bhi.n	8011c28 <__mdiff+0x7c>
 8011c58:	1b2b      	subs	r3, r5, r4
 8011c5a:	3b15      	subs	r3, #21
 8011c5c:	f023 0303 	bic.w	r3, r3, #3
 8011c60:	3304      	adds	r3, #4
 8011c62:	3415      	adds	r4, #21
 8011c64:	42a5      	cmp	r5, r4
 8011c66:	bf38      	it	cc
 8011c68:	2304      	movcc	r3, #4
 8011c6a:	4419      	add	r1, r3
 8011c6c:	4473      	add	r3, lr
 8011c6e:	469e      	mov	lr, r3
 8011c70:	460d      	mov	r5, r1
 8011c72:	4565      	cmp	r5, ip
 8011c74:	d30e      	bcc.n	8011c94 <__mdiff+0xe8>
 8011c76:	f10c 0203 	add.w	r2, ip, #3
 8011c7a:	1a52      	subs	r2, r2, r1
 8011c7c:	f022 0203 	bic.w	r2, r2, #3
 8011c80:	3903      	subs	r1, #3
 8011c82:	458c      	cmp	ip, r1
 8011c84:	bf38      	it	cc
 8011c86:	2200      	movcc	r2, #0
 8011c88:	441a      	add	r2, r3
 8011c8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011c8e:	b17b      	cbz	r3, 8011cb0 <__mdiff+0x104>
 8011c90:	6106      	str	r6, [r0, #16]
 8011c92:	e7a5      	b.n	8011be0 <__mdiff+0x34>
 8011c94:	f855 8b04 	ldr.w	r8, [r5], #4
 8011c98:	fa17 f488 	uxtah	r4, r7, r8
 8011c9c:	1422      	asrs	r2, r4, #16
 8011c9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011ca2:	b2a4      	uxth	r4, r4
 8011ca4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011ca8:	f84e 4b04 	str.w	r4, [lr], #4
 8011cac:	1417      	asrs	r7, r2, #16
 8011cae:	e7e0      	b.n	8011c72 <__mdiff+0xc6>
 8011cb0:	3e01      	subs	r6, #1
 8011cb2:	e7ea      	b.n	8011c8a <__mdiff+0xde>
 8011cb4:	080135b3 	.word	0x080135b3
 8011cb8:	080135c4 	.word	0x080135c4

08011cbc <__d2b>:
 8011cbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cc0:	4689      	mov	r9, r1
 8011cc2:	2101      	movs	r1, #1
 8011cc4:	ec57 6b10 	vmov	r6, r7, d0
 8011cc8:	4690      	mov	r8, r2
 8011cca:	f7ff fcd5 	bl	8011678 <_Balloc>
 8011cce:	4604      	mov	r4, r0
 8011cd0:	b930      	cbnz	r0, 8011ce0 <__d2b+0x24>
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	4b25      	ldr	r3, [pc, #148]	; (8011d6c <__d2b+0xb0>)
 8011cd6:	4826      	ldr	r0, [pc, #152]	; (8011d70 <__d2b+0xb4>)
 8011cd8:	f240 310a 	movw	r1, #778	; 0x30a
 8011cdc:	f000 fa70 	bl	80121c0 <__assert_func>
 8011ce0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011ce4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011ce8:	bb35      	cbnz	r5, 8011d38 <__d2b+0x7c>
 8011cea:	2e00      	cmp	r6, #0
 8011cec:	9301      	str	r3, [sp, #4]
 8011cee:	d028      	beq.n	8011d42 <__d2b+0x86>
 8011cf0:	4668      	mov	r0, sp
 8011cf2:	9600      	str	r6, [sp, #0]
 8011cf4:	f7ff fd8c 	bl	8011810 <__lo0bits>
 8011cf8:	9900      	ldr	r1, [sp, #0]
 8011cfa:	b300      	cbz	r0, 8011d3e <__d2b+0x82>
 8011cfc:	9a01      	ldr	r2, [sp, #4]
 8011cfe:	f1c0 0320 	rsb	r3, r0, #32
 8011d02:	fa02 f303 	lsl.w	r3, r2, r3
 8011d06:	430b      	orrs	r3, r1
 8011d08:	40c2      	lsrs	r2, r0
 8011d0a:	6163      	str	r3, [r4, #20]
 8011d0c:	9201      	str	r2, [sp, #4]
 8011d0e:	9b01      	ldr	r3, [sp, #4]
 8011d10:	61a3      	str	r3, [r4, #24]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	bf14      	ite	ne
 8011d16:	2202      	movne	r2, #2
 8011d18:	2201      	moveq	r2, #1
 8011d1a:	6122      	str	r2, [r4, #16]
 8011d1c:	b1d5      	cbz	r5, 8011d54 <__d2b+0x98>
 8011d1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d22:	4405      	add	r5, r0
 8011d24:	f8c9 5000 	str.w	r5, [r9]
 8011d28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d2c:	f8c8 0000 	str.w	r0, [r8]
 8011d30:	4620      	mov	r0, r4
 8011d32:	b003      	add	sp, #12
 8011d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d3c:	e7d5      	b.n	8011cea <__d2b+0x2e>
 8011d3e:	6161      	str	r1, [r4, #20]
 8011d40:	e7e5      	b.n	8011d0e <__d2b+0x52>
 8011d42:	a801      	add	r0, sp, #4
 8011d44:	f7ff fd64 	bl	8011810 <__lo0bits>
 8011d48:	9b01      	ldr	r3, [sp, #4]
 8011d4a:	6163      	str	r3, [r4, #20]
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	6122      	str	r2, [r4, #16]
 8011d50:	3020      	adds	r0, #32
 8011d52:	e7e3      	b.n	8011d1c <__d2b+0x60>
 8011d54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d5c:	f8c9 0000 	str.w	r0, [r9]
 8011d60:	6918      	ldr	r0, [r3, #16]
 8011d62:	f7ff fd35 	bl	80117d0 <__hi0bits>
 8011d66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d6a:	e7df      	b.n	8011d2c <__d2b+0x70>
 8011d6c:	080135b3 	.word	0x080135b3
 8011d70:	080135c4 	.word	0x080135c4

08011d74 <_calloc_r>:
 8011d74:	b513      	push	{r0, r1, r4, lr}
 8011d76:	434a      	muls	r2, r1
 8011d78:	4611      	mov	r1, r2
 8011d7a:	9201      	str	r2, [sp, #4]
 8011d7c:	f000 f85a 	bl	8011e34 <_malloc_r>
 8011d80:	4604      	mov	r4, r0
 8011d82:	b118      	cbz	r0, 8011d8c <_calloc_r+0x18>
 8011d84:	9a01      	ldr	r2, [sp, #4]
 8011d86:	2100      	movs	r1, #0
 8011d88:	f7fe f960 	bl	801004c <memset>
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	b002      	add	sp, #8
 8011d90:	bd10      	pop	{r4, pc}
	...

08011d94 <_free_r>:
 8011d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d96:	2900      	cmp	r1, #0
 8011d98:	d048      	beq.n	8011e2c <_free_r+0x98>
 8011d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d9e:	9001      	str	r0, [sp, #4]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	f1a1 0404 	sub.w	r4, r1, #4
 8011da6:	bfb8      	it	lt
 8011da8:	18e4      	addlt	r4, r4, r3
 8011daa:	f000 fa65 	bl	8012278 <__malloc_lock>
 8011dae:	4a20      	ldr	r2, [pc, #128]	; (8011e30 <_free_r+0x9c>)
 8011db0:	9801      	ldr	r0, [sp, #4]
 8011db2:	6813      	ldr	r3, [r2, #0]
 8011db4:	4615      	mov	r5, r2
 8011db6:	b933      	cbnz	r3, 8011dc6 <_free_r+0x32>
 8011db8:	6063      	str	r3, [r4, #4]
 8011dba:	6014      	str	r4, [r2, #0]
 8011dbc:	b003      	add	sp, #12
 8011dbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011dc2:	f000 ba5f 	b.w	8012284 <__malloc_unlock>
 8011dc6:	42a3      	cmp	r3, r4
 8011dc8:	d90b      	bls.n	8011de2 <_free_r+0x4e>
 8011dca:	6821      	ldr	r1, [r4, #0]
 8011dcc:	1862      	adds	r2, r4, r1
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	bf04      	itt	eq
 8011dd2:	681a      	ldreq	r2, [r3, #0]
 8011dd4:	685b      	ldreq	r3, [r3, #4]
 8011dd6:	6063      	str	r3, [r4, #4]
 8011dd8:	bf04      	itt	eq
 8011dda:	1852      	addeq	r2, r2, r1
 8011ddc:	6022      	streq	r2, [r4, #0]
 8011dde:	602c      	str	r4, [r5, #0]
 8011de0:	e7ec      	b.n	8011dbc <_free_r+0x28>
 8011de2:	461a      	mov	r2, r3
 8011de4:	685b      	ldr	r3, [r3, #4]
 8011de6:	b10b      	cbz	r3, 8011dec <_free_r+0x58>
 8011de8:	42a3      	cmp	r3, r4
 8011dea:	d9fa      	bls.n	8011de2 <_free_r+0x4e>
 8011dec:	6811      	ldr	r1, [r2, #0]
 8011dee:	1855      	adds	r5, r2, r1
 8011df0:	42a5      	cmp	r5, r4
 8011df2:	d10b      	bne.n	8011e0c <_free_r+0x78>
 8011df4:	6824      	ldr	r4, [r4, #0]
 8011df6:	4421      	add	r1, r4
 8011df8:	1854      	adds	r4, r2, r1
 8011dfa:	42a3      	cmp	r3, r4
 8011dfc:	6011      	str	r1, [r2, #0]
 8011dfe:	d1dd      	bne.n	8011dbc <_free_r+0x28>
 8011e00:	681c      	ldr	r4, [r3, #0]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	6053      	str	r3, [r2, #4]
 8011e06:	4421      	add	r1, r4
 8011e08:	6011      	str	r1, [r2, #0]
 8011e0a:	e7d7      	b.n	8011dbc <_free_r+0x28>
 8011e0c:	d902      	bls.n	8011e14 <_free_r+0x80>
 8011e0e:	230c      	movs	r3, #12
 8011e10:	6003      	str	r3, [r0, #0]
 8011e12:	e7d3      	b.n	8011dbc <_free_r+0x28>
 8011e14:	6825      	ldr	r5, [r4, #0]
 8011e16:	1961      	adds	r1, r4, r5
 8011e18:	428b      	cmp	r3, r1
 8011e1a:	bf04      	itt	eq
 8011e1c:	6819      	ldreq	r1, [r3, #0]
 8011e1e:	685b      	ldreq	r3, [r3, #4]
 8011e20:	6063      	str	r3, [r4, #4]
 8011e22:	bf04      	itt	eq
 8011e24:	1949      	addeq	r1, r1, r5
 8011e26:	6021      	streq	r1, [r4, #0]
 8011e28:	6054      	str	r4, [r2, #4]
 8011e2a:	e7c7      	b.n	8011dbc <_free_r+0x28>
 8011e2c:	b003      	add	sp, #12
 8011e2e:	bd30      	pop	{r4, r5, pc}
 8011e30:	20009280 	.word	0x20009280

08011e34 <_malloc_r>:
 8011e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e36:	1ccd      	adds	r5, r1, #3
 8011e38:	f025 0503 	bic.w	r5, r5, #3
 8011e3c:	3508      	adds	r5, #8
 8011e3e:	2d0c      	cmp	r5, #12
 8011e40:	bf38      	it	cc
 8011e42:	250c      	movcc	r5, #12
 8011e44:	2d00      	cmp	r5, #0
 8011e46:	4606      	mov	r6, r0
 8011e48:	db01      	blt.n	8011e4e <_malloc_r+0x1a>
 8011e4a:	42a9      	cmp	r1, r5
 8011e4c:	d903      	bls.n	8011e56 <_malloc_r+0x22>
 8011e4e:	230c      	movs	r3, #12
 8011e50:	6033      	str	r3, [r6, #0]
 8011e52:	2000      	movs	r0, #0
 8011e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e56:	f000 fa0f 	bl	8012278 <__malloc_lock>
 8011e5a:	4921      	ldr	r1, [pc, #132]	; (8011ee0 <_malloc_r+0xac>)
 8011e5c:	680a      	ldr	r2, [r1, #0]
 8011e5e:	4614      	mov	r4, r2
 8011e60:	b99c      	cbnz	r4, 8011e8a <_malloc_r+0x56>
 8011e62:	4f20      	ldr	r7, [pc, #128]	; (8011ee4 <_malloc_r+0xb0>)
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	b923      	cbnz	r3, 8011e72 <_malloc_r+0x3e>
 8011e68:	4621      	mov	r1, r4
 8011e6a:	4630      	mov	r0, r6
 8011e6c:	f000 f998 	bl	80121a0 <_sbrk_r>
 8011e70:	6038      	str	r0, [r7, #0]
 8011e72:	4629      	mov	r1, r5
 8011e74:	4630      	mov	r0, r6
 8011e76:	f000 f993 	bl	80121a0 <_sbrk_r>
 8011e7a:	1c43      	adds	r3, r0, #1
 8011e7c:	d123      	bne.n	8011ec6 <_malloc_r+0x92>
 8011e7e:	230c      	movs	r3, #12
 8011e80:	6033      	str	r3, [r6, #0]
 8011e82:	4630      	mov	r0, r6
 8011e84:	f000 f9fe 	bl	8012284 <__malloc_unlock>
 8011e88:	e7e3      	b.n	8011e52 <_malloc_r+0x1e>
 8011e8a:	6823      	ldr	r3, [r4, #0]
 8011e8c:	1b5b      	subs	r3, r3, r5
 8011e8e:	d417      	bmi.n	8011ec0 <_malloc_r+0x8c>
 8011e90:	2b0b      	cmp	r3, #11
 8011e92:	d903      	bls.n	8011e9c <_malloc_r+0x68>
 8011e94:	6023      	str	r3, [r4, #0]
 8011e96:	441c      	add	r4, r3
 8011e98:	6025      	str	r5, [r4, #0]
 8011e9a:	e004      	b.n	8011ea6 <_malloc_r+0x72>
 8011e9c:	6863      	ldr	r3, [r4, #4]
 8011e9e:	42a2      	cmp	r2, r4
 8011ea0:	bf0c      	ite	eq
 8011ea2:	600b      	streq	r3, [r1, #0]
 8011ea4:	6053      	strne	r3, [r2, #4]
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f000 f9ec 	bl	8012284 <__malloc_unlock>
 8011eac:	f104 000b 	add.w	r0, r4, #11
 8011eb0:	1d23      	adds	r3, r4, #4
 8011eb2:	f020 0007 	bic.w	r0, r0, #7
 8011eb6:	1ac2      	subs	r2, r0, r3
 8011eb8:	d0cc      	beq.n	8011e54 <_malloc_r+0x20>
 8011eba:	1a1b      	subs	r3, r3, r0
 8011ebc:	50a3      	str	r3, [r4, r2]
 8011ebe:	e7c9      	b.n	8011e54 <_malloc_r+0x20>
 8011ec0:	4622      	mov	r2, r4
 8011ec2:	6864      	ldr	r4, [r4, #4]
 8011ec4:	e7cc      	b.n	8011e60 <_malloc_r+0x2c>
 8011ec6:	1cc4      	adds	r4, r0, #3
 8011ec8:	f024 0403 	bic.w	r4, r4, #3
 8011ecc:	42a0      	cmp	r0, r4
 8011ece:	d0e3      	beq.n	8011e98 <_malloc_r+0x64>
 8011ed0:	1a21      	subs	r1, r4, r0
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	f000 f964 	bl	80121a0 <_sbrk_r>
 8011ed8:	3001      	adds	r0, #1
 8011eda:	d1dd      	bne.n	8011e98 <_malloc_r+0x64>
 8011edc:	e7cf      	b.n	8011e7e <_malloc_r+0x4a>
 8011ede:	bf00      	nop
 8011ee0:	20009280 	.word	0x20009280
 8011ee4:	20009284 	.word	0x20009284

08011ee8 <__ssputs_r>:
 8011ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eec:	688e      	ldr	r6, [r1, #8]
 8011eee:	429e      	cmp	r6, r3
 8011ef0:	4682      	mov	sl, r0
 8011ef2:	460c      	mov	r4, r1
 8011ef4:	4690      	mov	r8, r2
 8011ef6:	461f      	mov	r7, r3
 8011ef8:	d838      	bhi.n	8011f6c <__ssputs_r+0x84>
 8011efa:	898a      	ldrh	r2, [r1, #12]
 8011efc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f00:	d032      	beq.n	8011f68 <__ssputs_r+0x80>
 8011f02:	6825      	ldr	r5, [r4, #0]
 8011f04:	6909      	ldr	r1, [r1, #16]
 8011f06:	eba5 0901 	sub.w	r9, r5, r1
 8011f0a:	6965      	ldr	r5, [r4, #20]
 8011f0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f14:	3301      	adds	r3, #1
 8011f16:	444b      	add	r3, r9
 8011f18:	106d      	asrs	r5, r5, #1
 8011f1a:	429d      	cmp	r5, r3
 8011f1c:	bf38      	it	cc
 8011f1e:	461d      	movcc	r5, r3
 8011f20:	0553      	lsls	r3, r2, #21
 8011f22:	d531      	bpl.n	8011f88 <__ssputs_r+0xa0>
 8011f24:	4629      	mov	r1, r5
 8011f26:	f7ff ff85 	bl	8011e34 <_malloc_r>
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	b950      	cbnz	r0, 8011f44 <__ssputs_r+0x5c>
 8011f2e:	230c      	movs	r3, #12
 8011f30:	f8ca 3000 	str.w	r3, [sl]
 8011f34:	89a3      	ldrh	r3, [r4, #12]
 8011f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f3a:	81a3      	strh	r3, [r4, #12]
 8011f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f44:	6921      	ldr	r1, [r4, #16]
 8011f46:	464a      	mov	r2, r9
 8011f48:	f7fe f872 	bl	8010030 <memcpy>
 8011f4c:	89a3      	ldrh	r3, [r4, #12]
 8011f4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f56:	81a3      	strh	r3, [r4, #12]
 8011f58:	6126      	str	r6, [r4, #16]
 8011f5a:	6165      	str	r5, [r4, #20]
 8011f5c:	444e      	add	r6, r9
 8011f5e:	eba5 0509 	sub.w	r5, r5, r9
 8011f62:	6026      	str	r6, [r4, #0]
 8011f64:	60a5      	str	r5, [r4, #8]
 8011f66:	463e      	mov	r6, r7
 8011f68:	42be      	cmp	r6, r7
 8011f6a:	d900      	bls.n	8011f6e <__ssputs_r+0x86>
 8011f6c:	463e      	mov	r6, r7
 8011f6e:	4632      	mov	r2, r6
 8011f70:	6820      	ldr	r0, [r4, #0]
 8011f72:	4641      	mov	r1, r8
 8011f74:	f000 f966 	bl	8012244 <memmove>
 8011f78:	68a3      	ldr	r3, [r4, #8]
 8011f7a:	6822      	ldr	r2, [r4, #0]
 8011f7c:	1b9b      	subs	r3, r3, r6
 8011f7e:	4432      	add	r2, r6
 8011f80:	60a3      	str	r3, [r4, #8]
 8011f82:	6022      	str	r2, [r4, #0]
 8011f84:	2000      	movs	r0, #0
 8011f86:	e7db      	b.n	8011f40 <__ssputs_r+0x58>
 8011f88:	462a      	mov	r2, r5
 8011f8a:	f000 f981 	bl	8012290 <_realloc_r>
 8011f8e:	4606      	mov	r6, r0
 8011f90:	2800      	cmp	r0, #0
 8011f92:	d1e1      	bne.n	8011f58 <__ssputs_r+0x70>
 8011f94:	6921      	ldr	r1, [r4, #16]
 8011f96:	4650      	mov	r0, sl
 8011f98:	f7ff fefc 	bl	8011d94 <_free_r>
 8011f9c:	e7c7      	b.n	8011f2e <__ssputs_r+0x46>
	...

08011fa0 <_svfiprintf_r>:
 8011fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	4698      	mov	r8, r3
 8011fa6:	898b      	ldrh	r3, [r1, #12]
 8011fa8:	061b      	lsls	r3, r3, #24
 8011faa:	b09d      	sub	sp, #116	; 0x74
 8011fac:	4607      	mov	r7, r0
 8011fae:	460d      	mov	r5, r1
 8011fb0:	4614      	mov	r4, r2
 8011fb2:	d50e      	bpl.n	8011fd2 <_svfiprintf_r+0x32>
 8011fb4:	690b      	ldr	r3, [r1, #16]
 8011fb6:	b963      	cbnz	r3, 8011fd2 <_svfiprintf_r+0x32>
 8011fb8:	2140      	movs	r1, #64	; 0x40
 8011fba:	f7ff ff3b 	bl	8011e34 <_malloc_r>
 8011fbe:	6028      	str	r0, [r5, #0]
 8011fc0:	6128      	str	r0, [r5, #16]
 8011fc2:	b920      	cbnz	r0, 8011fce <_svfiprintf_r+0x2e>
 8011fc4:	230c      	movs	r3, #12
 8011fc6:	603b      	str	r3, [r7, #0]
 8011fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fcc:	e0d1      	b.n	8012172 <_svfiprintf_r+0x1d2>
 8011fce:	2340      	movs	r3, #64	; 0x40
 8011fd0:	616b      	str	r3, [r5, #20]
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8011fd6:	2320      	movs	r3, #32
 8011fd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fe0:	2330      	movs	r3, #48	; 0x30
 8011fe2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801218c <_svfiprintf_r+0x1ec>
 8011fe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fea:	f04f 0901 	mov.w	r9, #1
 8011fee:	4623      	mov	r3, r4
 8011ff0:	469a      	mov	sl, r3
 8011ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ff6:	b10a      	cbz	r2, 8011ffc <_svfiprintf_r+0x5c>
 8011ff8:	2a25      	cmp	r2, #37	; 0x25
 8011ffa:	d1f9      	bne.n	8011ff0 <_svfiprintf_r+0x50>
 8011ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8012000:	d00b      	beq.n	801201a <_svfiprintf_r+0x7a>
 8012002:	465b      	mov	r3, fp
 8012004:	4622      	mov	r2, r4
 8012006:	4629      	mov	r1, r5
 8012008:	4638      	mov	r0, r7
 801200a:	f7ff ff6d 	bl	8011ee8 <__ssputs_r>
 801200e:	3001      	adds	r0, #1
 8012010:	f000 80aa 	beq.w	8012168 <_svfiprintf_r+0x1c8>
 8012014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012016:	445a      	add	r2, fp
 8012018:	9209      	str	r2, [sp, #36]	; 0x24
 801201a:	f89a 3000 	ldrb.w	r3, [sl]
 801201e:	2b00      	cmp	r3, #0
 8012020:	f000 80a2 	beq.w	8012168 <_svfiprintf_r+0x1c8>
 8012024:	2300      	movs	r3, #0
 8012026:	f04f 32ff 	mov.w	r2, #4294967295
 801202a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801202e:	f10a 0a01 	add.w	sl, sl, #1
 8012032:	9304      	str	r3, [sp, #16]
 8012034:	9307      	str	r3, [sp, #28]
 8012036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801203a:	931a      	str	r3, [sp, #104]	; 0x68
 801203c:	4654      	mov	r4, sl
 801203e:	2205      	movs	r2, #5
 8012040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012044:	4851      	ldr	r0, [pc, #324]	; (801218c <_svfiprintf_r+0x1ec>)
 8012046:	f7ee f8cb 	bl	80001e0 <memchr>
 801204a:	9a04      	ldr	r2, [sp, #16]
 801204c:	b9d8      	cbnz	r0, 8012086 <_svfiprintf_r+0xe6>
 801204e:	06d0      	lsls	r0, r2, #27
 8012050:	bf44      	itt	mi
 8012052:	2320      	movmi	r3, #32
 8012054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012058:	0711      	lsls	r1, r2, #28
 801205a:	bf44      	itt	mi
 801205c:	232b      	movmi	r3, #43	; 0x2b
 801205e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012062:	f89a 3000 	ldrb.w	r3, [sl]
 8012066:	2b2a      	cmp	r3, #42	; 0x2a
 8012068:	d015      	beq.n	8012096 <_svfiprintf_r+0xf6>
 801206a:	9a07      	ldr	r2, [sp, #28]
 801206c:	4654      	mov	r4, sl
 801206e:	2000      	movs	r0, #0
 8012070:	f04f 0c0a 	mov.w	ip, #10
 8012074:	4621      	mov	r1, r4
 8012076:	f811 3b01 	ldrb.w	r3, [r1], #1
 801207a:	3b30      	subs	r3, #48	; 0x30
 801207c:	2b09      	cmp	r3, #9
 801207e:	d94e      	bls.n	801211e <_svfiprintf_r+0x17e>
 8012080:	b1b0      	cbz	r0, 80120b0 <_svfiprintf_r+0x110>
 8012082:	9207      	str	r2, [sp, #28]
 8012084:	e014      	b.n	80120b0 <_svfiprintf_r+0x110>
 8012086:	eba0 0308 	sub.w	r3, r0, r8
 801208a:	fa09 f303 	lsl.w	r3, r9, r3
 801208e:	4313      	orrs	r3, r2
 8012090:	9304      	str	r3, [sp, #16]
 8012092:	46a2      	mov	sl, r4
 8012094:	e7d2      	b.n	801203c <_svfiprintf_r+0x9c>
 8012096:	9b03      	ldr	r3, [sp, #12]
 8012098:	1d19      	adds	r1, r3, #4
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	9103      	str	r1, [sp, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	bfbb      	ittet	lt
 80120a2:	425b      	neglt	r3, r3
 80120a4:	f042 0202 	orrlt.w	r2, r2, #2
 80120a8:	9307      	strge	r3, [sp, #28]
 80120aa:	9307      	strlt	r3, [sp, #28]
 80120ac:	bfb8      	it	lt
 80120ae:	9204      	strlt	r2, [sp, #16]
 80120b0:	7823      	ldrb	r3, [r4, #0]
 80120b2:	2b2e      	cmp	r3, #46	; 0x2e
 80120b4:	d10c      	bne.n	80120d0 <_svfiprintf_r+0x130>
 80120b6:	7863      	ldrb	r3, [r4, #1]
 80120b8:	2b2a      	cmp	r3, #42	; 0x2a
 80120ba:	d135      	bne.n	8012128 <_svfiprintf_r+0x188>
 80120bc:	9b03      	ldr	r3, [sp, #12]
 80120be:	1d1a      	adds	r2, r3, #4
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	9203      	str	r2, [sp, #12]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	bfb8      	it	lt
 80120c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80120cc:	3402      	adds	r4, #2
 80120ce:	9305      	str	r3, [sp, #20]
 80120d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801219c <_svfiprintf_r+0x1fc>
 80120d4:	7821      	ldrb	r1, [r4, #0]
 80120d6:	2203      	movs	r2, #3
 80120d8:	4650      	mov	r0, sl
 80120da:	f7ee f881 	bl	80001e0 <memchr>
 80120de:	b140      	cbz	r0, 80120f2 <_svfiprintf_r+0x152>
 80120e0:	2340      	movs	r3, #64	; 0x40
 80120e2:	eba0 000a 	sub.w	r0, r0, sl
 80120e6:	fa03 f000 	lsl.w	r0, r3, r0
 80120ea:	9b04      	ldr	r3, [sp, #16]
 80120ec:	4303      	orrs	r3, r0
 80120ee:	3401      	adds	r4, #1
 80120f0:	9304      	str	r3, [sp, #16]
 80120f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f6:	4826      	ldr	r0, [pc, #152]	; (8012190 <_svfiprintf_r+0x1f0>)
 80120f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120fc:	2206      	movs	r2, #6
 80120fe:	f7ee f86f 	bl	80001e0 <memchr>
 8012102:	2800      	cmp	r0, #0
 8012104:	d038      	beq.n	8012178 <_svfiprintf_r+0x1d8>
 8012106:	4b23      	ldr	r3, [pc, #140]	; (8012194 <_svfiprintf_r+0x1f4>)
 8012108:	bb1b      	cbnz	r3, 8012152 <_svfiprintf_r+0x1b2>
 801210a:	9b03      	ldr	r3, [sp, #12]
 801210c:	3307      	adds	r3, #7
 801210e:	f023 0307 	bic.w	r3, r3, #7
 8012112:	3308      	adds	r3, #8
 8012114:	9303      	str	r3, [sp, #12]
 8012116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012118:	4433      	add	r3, r6
 801211a:	9309      	str	r3, [sp, #36]	; 0x24
 801211c:	e767      	b.n	8011fee <_svfiprintf_r+0x4e>
 801211e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012122:	460c      	mov	r4, r1
 8012124:	2001      	movs	r0, #1
 8012126:	e7a5      	b.n	8012074 <_svfiprintf_r+0xd4>
 8012128:	2300      	movs	r3, #0
 801212a:	3401      	adds	r4, #1
 801212c:	9305      	str	r3, [sp, #20]
 801212e:	4619      	mov	r1, r3
 8012130:	f04f 0c0a 	mov.w	ip, #10
 8012134:	4620      	mov	r0, r4
 8012136:	f810 2b01 	ldrb.w	r2, [r0], #1
 801213a:	3a30      	subs	r2, #48	; 0x30
 801213c:	2a09      	cmp	r2, #9
 801213e:	d903      	bls.n	8012148 <_svfiprintf_r+0x1a8>
 8012140:	2b00      	cmp	r3, #0
 8012142:	d0c5      	beq.n	80120d0 <_svfiprintf_r+0x130>
 8012144:	9105      	str	r1, [sp, #20]
 8012146:	e7c3      	b.n	80120d0 <_svfiprintf_r+0x130>
 8012148:	fb0c 2101 	mla	r1, ip, r1, r2
 801214c:	4604      	mov	r4, r0
 801214e:	2301      	movs	r3, #1
 8012150:	e7f0      	b.n	8012134 <_svfiprintf_r+0x194>
 8012152:	ab03      	add	r3, sp, #12
 8012154:	9300      	str	r3, [sp, #0]
 8012156:	462a      	mov	r2, r5
 8012158:	4b0f      	ldr	r3, [pc, #60]	; (8012198 <_svfiprintf_r+0x1f8>)
 801215a:	a904      	add	r1, sp, #16
 801215c:	4638      	mov	r0, r7
 801215e:	f7fe f81d 	bl	801019c <_printf_float>
 8012162:	1c42      	adds	r2, r0, #1
 8012164:	4606      	mov	r6, r0
 8012166:	d1d6      	bne.n	8012116 <_svfiprintf_r+0x176>
 8012168:	89ab      	ldrh	r3, [r5, #12]
 801216a:	065b      	lsls	r3, r3, #25
 801216c:	f53f af2c 	bmi.w	8011fc8 <_svfiprintf_r+0x28>
 8012170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012172:	b01d      	add	sp, #116	; 0x74
 8012174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012178:	ab03      	add	r3, sp, #12
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	462a      	mov	r2, r5
 801217e:	4b06      	ldr	r3, [pc, #24]	; (8012198 <_svfiprintf_r+0x1f8>)
 8012180:	a904      	add	r1, sp, #16
 8012182:	4638      	mov	r0, r7
 8012184:	f7fe faae 	bl	80106e4 <_printf_i>
 8012188:	e7eb      	b.n	8012162 <_svfiprintf_r+0x1c2>
 801218a:	bf00      	nop
 801218c:	08013724 	.word	0x08013724
 8012190:	0801372e 	.word	0x0801372e
 8012194:	0801019d 	.word	0x0801019d
 8012198:	08011ee9 	.word	0x08011ee9
 801219c:	0801372a 	.word	0x0801372a

080121a0 <_sbrk_r>:
 80121a0:	b538      	push	{r3, r4, r5, lr}
 80121a2:	4d06      	ldr	r5, [pc, #24]	; (80121bc <_sbrk_r+0x1c>)
 80121a4:	2300      	movs	r3, #0
 80121a6:	4604      	mov	r4, r0
 80121a8:	4608      	mov	r0, r1
 80121aa:	602b      	str	r3, [r5, #0]
 80121ac:	f7f0 fe4e 	bl	8002e4c <_sbrk>
 80121b0:	1c43      	adds	r3, r0, #1
 80121b2:	d102      	bne.n	80121ba <_sbrk_r+0x1a>
 80121b4:	682b      	ldr	r3, [r5, #0]
 80121b6:	b103      	cbz	r3, 80121ba <_sbrk_r+0x1a>
 80121b8:	6023      	str	r3, [r4, #0]
 80121ba:	bd38      	pop	{r3, r4, r5, pc}
 80121bc:	200096dc 	.word	0x200096dc

080121c0 <__assert_func>:
 80121c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121c2:	4614      	mov	r4, r2
 80121c4:	461a      	mov	r2, r3
 80121c6:	4b09      	ldr	r3, [pc, #36]	; (80121ec <__assert_func+0x2c>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4605      	mov	r5, r0
 80121cc:	68d8      	ldr	r0, [r3, #12]
 80121ce:	b14c      	cbz	r4, 80121e4 <__assert_func+0x24>
 80121d0:	4b07      	ldr	r3, [pc, #28]	; (80121f0 <__assert_func+0x30>)
 80121d2:	9100      	str	r1, [sp, #0]
 80121d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121d8:	4906      	ldr	r1, [pc, #24]	; (80121f4 <__assert_func+0x34>)
 80121da:	462b      	mov	r3, r5
 80121dc:	f000 f80e 	bl	80121fc <fiprintf>
 80121e0:	f000 faa4 	bl	801272c <abort>
 80121e4:	4b04      	ldr	r3, [pc, #16]	; (80121f8 <__assert_func+0x38>)
 80121e6:	461c      	mov	r4, r3
 80121e8:	e7f3      	b.n	80121d2 <__assert_func+0x12>
 80121ea:	bf00      	nop
 80121ec:	20000020 	.word	0x20000020
 80121f0:	08013735 	.word	0x08013735
 80121f4:	08013742 	.word	0x08013742
 80121f8:	08013770 	.word	0x08013770

080121fc <fiprintf>:
 80121fc:	b40e      	push	{r1, r2, r3}
 80121fe:	b503      	push	{r0, r1, lr}
 8012200:	4601      	mov	r1, r0
 8012202:	ab03      	add	r3, sp, #12
 8012204:	4805      	ldr	r0, [pc, #20]	; (801221c <fiprintf+0x20>)
 8012206:	f853 2b04 	ldr.w	r2, [r3], #4
 801220a:	6800      	ldr	r0, [r0, #0]
 801220c:	9301      	str	r3, [sp, #4]
 801220e:	f000 f88f 	bl	8012330 <_vfiprintf_r>
 8012212:	b002      	add	sp, #8
 8012214:	f85d eb04 	ldr.w	lr, [sp], #4
 8012218:	b003      	add	sp, #12
 801221a:	4770      	bx	lr
 801221c:	20000020 	.word	0x20000020

08012220 <__ascii_mbtowc>:
 8012220:	b082      	sub	sp, #8
 8012222:	b901      	cbnz	r1, 8012226 <__ascii_mbtowc+0x6>
 8012224:	a901      	add	r1, sp, #4
 8012226:	b142      	cbz	r2, 801223a <__ascii_mbtowc+0x1a>
 8012228:	b14b      	cbz	r3, 801223e <__ascii_mbtowc+0x1e>
 801222a:	7813      	ldrb	r3, [r2, #0]
 801222c:	600b      	str	r3, [r1, #0]
 801222e:	7812      	ldrb	r2, [r2, #0]
 8012230:	1e10      	subs	r0, r2, #0
 8012232:	bf18      	it	ne
 8012234:	2001      	movne	r0, #1
 8012236:	b002      	add	sp, #8
 8012238:	4770      	bx	lr
 801223a:	4610      	mov	r0, r2
 801223c:	e7fb      	b.n	8012236 <__ascii_mbtowc+0x16>
 801223e:	f06f 0001 	mvn.w	r0, #1
 8012242:	e7f8      	b.n	8012236 <__ascii_mbtowc+0x16>

08012244 <memmove>:
 8012244:	4288      	cmp	r0, r1
 8012246:	b510      	push	{r4, lr}
 8012248:	eb01 0402 	add.w	r4, r1, r2
 801224c:	d902      	bls.n	8012254 <memmove+0x10>
 801224e:	4284      	cmp	r4, r0
 8012250:	4623      	mov	r3, r4
 8012252:	d807      	bhi.n	8012264 <memmove+0x20>
 8012254:	1e43      	subs	r3, r0, #1
 8012256:	42a1      	cmp	r1, r4
 8012258:	d008      	beq.n	801226c <memmove+0x28>
 801225a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801225e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012262:	e7f8      	b.n	8012256 <memmove+0x12>
 8012264:	4402      	add	r2, r0
 8012266:	4601      	mov	r1, r0
 8012268:	428a      	cmp	r2, r1
 801226a:	d100      	bne.n	801226e <memmove+0x2a>
 801226c:	bd10      	pop	{r4, pc}
 801226e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012276:	e7f7      	b.n	8012268 <memmove+0x24>

08012278 <__malloc_lock>:
 8012278:	4801      	ldr	r0, [pc, #4]	; (8012280 <__malloc_lock+0x8>)
 801227a:	f000 bc17 	b.w	8012aac <__retarget_lock_acquire_recursive>
 801227e:	bf00      	nop
 8012280:	200096e4 	.word	0x200096e4

08012284 <__malloc_unlock>:
 8012284:	4801      	ldr	r0, [pc, #4]	; (801228c <__malloc_unlock+0x8>)
 8012286:	f000 bc12 	b.w	8012aae <__retarget_lock_release_recursive>
 801228a:	bf00      	nop
 801228c:	200096e4 	.word	0x200096e4

08012290 <_realloc_r>:
 8012290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012292:	4607      	mov	r7, r0
 8012294:	4614      	mov	r4, r2
 8012296:	460e      	mov	r6, r1
 8012298:	b921      	cbnz	r1, 80122a4 <_realloc_r+0x14>
 801229a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801229e:	4611      	mov	r1, r2
 80122a0:	f7ff bdc8 	b.w	8011e34 <_malloc_r>
 80122a4:	b922      	cbnz	r2, 80122b0 <_realloc_r+0x20>
 80122a6:	f7ff fd75 	bl	8011d94 <_free_r>
 80122aa:	4625      	mov	r5, r4
 80122ac:	4628      	mov	r0, r5
 80122ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122b0:	f000 fc62 	bl	8012b78 <_malloc_usable_size_r>
 80122b4:	42a0      	cmp	r0, r4
 80122b6:	d20f      	bcs.n	80122d8 <_realloc_r+0x48>
 80122b8:	4621      	mov	r1, r4
 80122ba:	4638      	mov	r0, r7
 80122bc:	f7ff fdba 	bl	8011e34 <_malloc_r>
 80122c0:	4605      	mov	r5, r0
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d0f2      	beq.n	80122ac <_realloc_r+0x1c>
 80122c6:	4631      	mov	r1, r6
 80122c8:	4622      	mov	r2, r4
 80122ca:	f7fd feb1 	bl	8010030 <memcpy>
 80122ce:	4631      	mov	r1, r6
 80122d0:	4638      	mov	r0, r7
 80122d2:	f7ff fd5f 	bl	8011d94 <_free_r>
 80122d6:	e7e9      	b.n	80122ac <_realloc_r+0x1c>
 80122d8:	4635      	mov	r5, r6
 80122da:	e7e7      	b.n	80122ac <_realloc_r+0x1c>

080122dc <__sfputc_r>:
 80122dc:	6893      	ldr	r3, [r2, #8]
 80122de:	3b01      	subs	r3, #1
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	b410      	push	{r4}
 80122e4:	6093      	str	r3, [r2, #8]
 80122e6:	da08      	bge.n	80122fa <__sfputc_r+0x1e>
 80122e8:	6994      	ldr	r4, [r2, #24]
 80122ea:	42a3      	cmp	r3, r4
 80122ec:	db01      	blt.n	80122f2 <__sfputc_r+0x16>
 80122ee:	290a      	cmp	r1, #10
 80122f0:	d103      	bne.n	80122fa <__sfputc_r+0x1e>
 80122f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122f6:	f000 b94b 	b.w	8012590 <__swbuf_r>
 80122fa:	6813      	ldr	r3, [r2, #0]
 80122fc:	1c58      	adds	r0, r3, #1
 80122fe:	6010      	str	r0, [r2, #0]
 8012300:	7019      	strb	r1, [r3, #0]
 8012302:	4608      	mov	r0, r1
 8012304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012308:	4770      	bx	lr

0801230a <__sfputs_r>:
 801230a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230c:	4606      	mov	r6, r0
 801230e:	460f      	mov	r7, r1
 8012310:	4614      	mov	r4, r2
 8012312:	18d5      	adds	r5, r2, r3
 8012314:	42ac      	cmp	r4, r5
 8012316:	d101      	bne.n	801231c <__sfputs_r+0x12>
 8012318:	2000      	movs	r0, #0
 801231a:	e007      	b.n	801232c <__sfputs_r+0x22>
 801231c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012320:	463a      	mov	r2, r7
 8012322:	4630      	mov	r0, r6
 8012324:	f7ff ffda 	bl	80122dc <__sfputc_r>
 8012328:	1c43      	adds	r3, r0, #1
 801232a:	d1f3      	bne.n	8012314 <__sfputs_r+0xa>
 801232c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012330 <_vfiprintf_r>:
 8012330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012334:	460d      	mov	r5, r1
 8012336:	b09d      	sub	sp, #116	; 0x74
 8012338:	4614      	mov	r4, r2
 801233a:	4698      	mov	r8, r3
 801233c:	4606      	mov	r6, r0
 801233e:	b118      	cbz	r0, 8012348 <_vfiprintf_r+0x18>
 8012340:	6983      	ldr	r3, [r0, #24]
 8012342:	b90b      	cbnz	r3, 8012348 <_vfiprintf_r+0x18>
 8012344:	f000 fb14 	bl	8012970 <__sinit>
 8012348:	4b89      	ldr	r3, [pc, #548]	; (8012570 <_vfiprintf_r+0x240>)
 801234a:	429d      	cmp	r5, r3
 801234c:	d11b      	bne.n	8012386 <_vfiprintf_r+0x56>
 801234e:	6875      	ldr	r5, [r6, #4]
 8012350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012352:	07d9      	lsls	r1, r3, #31
 8012354:	d405      	bmi.n	8012362 <_vfiprintf_r+0x32>
 8012356:	89ab      	ldrh	r3, [r5, #12]
 8012358:	059a      	lsls	r2, r3, #22
 801235a:	d402      	bmi.n	8012362 <_vfiprintf_r+0x32>
 801235c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801235e:	f000 fba5 	bl	8012aac <__retarget_lock_acquire_recursive>
 8012362:	89ab      	ldrh	r3, [r5, #12]
 8012364:	071b      	lsls	r3, r3, #28
 8012366:	d501      	bpl.n	801236c <_vfiprintf_r+0x3c>
 8012368:	692b      	ldr	r3, [r5, #16]
 801236a:	b9eb      	cbnz	r3, 80123a8 <_vfiprintf_r+0x78>
 801236c:	4629      	mov	r1, r5
 801236e:	4630      	mov	r0, r6
 8012370:	f000 f96e 	bl	8012650 <__swsetup_r>
 8012374:	b1c0      	cbz	r0, 80123a8 <_vfiprintf_r+0x78>
 8012376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012378:	07dc      	lsls	r4, r3, #31
 801237a:	d50e      	bpl.n	801239a <_vfiprintf_r+0x6a>
 801237c:	f04f 30ff 	mov.w	r0, #4294967295
 8012380:	b01d      	add	sp, #116	; 0x74
 8012382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012386:	4b7b      	ldr	r3, [pc, #492]	; (8012574 <_vfiprintf_r+0x244>)
 8012388:	429d      	cmp	r5, r3
 801238a:	d101      	bne.n	8012390 <_vfiprintf_r+0x60>
 801238c:	68b5      	ldr	r5, [r6, #8]
 801238e:	e7df      	b.n	8012350 <_vfiprintf_r+0x20>
 8012390:	4b79      	ldr	r3, [pc, #484]	; (8012578 <_vfiprintf_r+0x248>)
 8012392:	429d      	cmp	r5, r3
 8012394:	bf08      	it	eq
 8012396:	68f5      	ldreq	r5, [r6, #12]
 8012398:	e7da      	b.n	8012350 <_vfiprintf_r+0x20>
 801239a:	89ab      	ldrh	r3, [r5, #12]
 801239c:	0598      	lsls	r0, r3, #22
 801239e:	d4ed      	bmi.n	801237c <_vfiprintf_r+0x4c>
 80123a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123a2:	f000 fb84 	bl	8012aae <__retarget_lock_release_recursive>
 80123a6:	e7e9      	b.n	801237c <_vfiprintf_r+0x4c>
 80123a8:	2300      	movs	r3, #0
 80123aa:	9309      	str	r3, [sp, #36]	; 0x24
 80123ac:	2320      	movs	r3, #32
 80123ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80123b6:	2330      	movs	r3, #48	; 0x30
 80123b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801257c <_vfiprintf_r+0x24c>
 80123bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123c0:	f04f 0901 	mov.w	r9, #1
 80123c4:	4623      	mov	r3, r4
 80123c6:	469a      	mov	sl, r3
 80123c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123cc:	b10a      	cbz	r2, 80123d2 <_vfiprintf_r+0xa2>
 80123ce:	2a25      	cmp	r2, #37	; 0x25
 80123d0:	d1f9      	bne.n	80123c6 <_vfiprintf_r+0x96>
 80123d2:	ebba 0b04 	subs.w	fp, sl, r4
 80123d6:	d00b      	beq.n	80123f0 <_vfiprintf_r+0xc0>
 80123d8:	465b      	mov	r3, fp
 80123da:	4622      	mov	r2, r4
 80123dc:	4629      	mov	r1, r5
 80123de:	4630      	mov	r0, r6
 80123e0:	f7ff ff93 	bl	801230a <__sfputs_r>
 80123e4:	3001      	adds	r0, #1
 80123e6:	f000 80aa 	beq.w	801253e <_vfiprintf_r+0x20e>
 80123ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123ec:	445a      	add	r2, fp
 80123ee:	9209      	str	r2, [sp, #36]	; 0x24
 80123f0:	f89a 3000 	ldrb.w	r3, [sl]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	f000 80a2 	beq.w	801253e <_vfiprintf_r+0x20e>
 80123fa:	2300      	movs	r3, #0
 80123fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012404:	f10a 0a01 	add.w	sl, sl, #1
 8012408:	9304      	str	r3, [sp, #16]
 801240a:	9307      	str	r3, [sp, #28]
 801240c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012410:	931a      	str	r3, [sp, #104]	; 0x68
 8012412:	4654      	mov	r4, sl
 8012414:	2205      	movs	r2, #5
 8012416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801241a:	4858      	ldr	r0, [pc, #352]	; (801257c <_vfiprintf_r+0x24c>)
 801241c:	f7ed fee0 	bl	80001e0 <memchr>
 8012420:	9a04      	ldr	r2, [sp, #16]
 8012422:	b9d8      	cbnz	r0, 801245c <_vfiprintf_r+0x12c>
 8012424:	06d1      	lsls	r1, r2, #27
 8012426:	bf44      	itt	mi
 8012428:	2320      	movmi	r3, #32
 801242a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801242e:	0713      	lsls	r3, r2, #28
 8012430:	bf44      	itt	mi
 8012432:	232b      	movmi	r3, #43	; 0x2b
 8012434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012438:	f89a 3000 	ldrb.w	r3, [sl]
 801243c:	2b2a      	cmp	r3, #42	; 0x2a
 801243e:	d015      	beq.n	801246c <_vfiprintf_r+0x13c>
 8012440:	9a07      	ldr	r2, [sp, #28]
 8012442:	4654      	mov	r4, sl
 8012444:	2000      	movs	r0, #0
 8012446:	f04f 0c0a 	mov.w	ip, #10
 801244a:	4621      	mov	r1, r4
 801244c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012450:	3b30      	subs	r3, #48	; 0x30
 8012452:	2b09      	cmp	r3, #9
 8012454:	d94e      	bls.n	80124f4 <_vfiprintf_r+0x1c4>
 8012456:	b1b0      	cbz	r0, 8012486 <_vfiprintf_r+0x156>
 8012458:	9207      	str	r2, [sp, #28]
 801245a:	e014      	b.n	8012486 <_vfiprintf_r+0x156>
 801245c:	eba0 0308 	sub.w	r3, r0, r8
 8012460:	fa09 f303 	lsl.w	r3, r9, r3
 8012464:	4313      	orrs	r3, r2
 8012466:	9304      	str	r3, [sp, #16]
 8012468:	46a2      	mov	sl, r4
 801246a:	e7d2      	b.n	8012412 <_vfiprintf_r+0xe2>
 801246c:	9b03      	ldr	r3, [sp, #12]
 801246e:	1d19      	adds	r1, r3, #4
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	9103      	str	r1, [sp, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	bfbb      	ittet	lt
 8012478:	425b      	neglt	r3, r3
 801247a:	f042 0202 	orrlt.w	r2, r2, #2
 801247e:	9307      	strge	r3, [sp, #28]
 8012480:	9307      	strlt	r3, [sp, #28]
 8012482:	bfb8      	it	lt
 8012484:	9204      	strlt	r2, [sp, #16]
 8012486:	7823      	ldrb	r3, [r4, #0]
 8012488:	2b2e      	cmp	r3, #46	; 0x2e
 801248a:	d10c      	bne.n	80124a6 <_vfiprintf_r+0x176>
 801248c:	7863      	ldrb	r3, [r4, #1]
 801248e:	2b2a      	cmp	r3, #42	; 0x2a
 8012490:	d135      	bne.n	80124fe <_vfiprintf_r+0x1ce>
 8012492:	9b03      	ldr	r3, [sp, #12]
 8012494:	1d1a      	adds	r2, r3, #4
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	9203      	str	r2, [sp, #12]
 801249a:	2b00      	cmp	r3, #0
 801249c:	bfb8      	it	lt
 801249e:	f04f 33ff 	movlt.w	r3, #4294967295
 80124a2:	3402      	adds	r4, #2
 80124a4:	9305      	str	r3, [sp, #20]
 80124a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801258c <_vfiprintf_r+0x25c>
 80124aa:	7821      	ldrb	r1, [r4, #0]
 80124ac:	2203      	movs	r2, #3
 80124ae:	4650      	mov	r0, sl
 80124b0:	f7ed fe96 	bl	80001e0 <memchr>
 80124b4:	b140      	cbz	r0, 80124c8 <_vfiprintf_r+0x198>
 80124b6:	2340      	movs	r3, #64	; 0x40
 80124b8:	eba0 000a 	sub.w	r0, r0, sl
 80124bc:	fa03 f000 	lsl.w	r0, r3, r0
 80124c0:	9b04      	ldr	r3, [sp, #16]
 80124c2:	4303      	orrs	r3, r0
 80124c4:	3401      	adds	r4, #1
 80124c6:	9304      	str	r3, [sp, #16]
 80124c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124cc:	482c      	ldr	r0, [pc, #176]	; (8012580 <_vfiprintf_r+0x250>)
 80124ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124d2:	2206      	movs	r2, #6
 80124d4:	f7ed fe84 	bl	80001e0 <memchr>
 80124d8:	2800      	cmp	r0, #0
 80124da:	d03f      	beq.n	801255c <_vfiprintf_r+0x22c>
 80124dc:	4b29      	ldr	r3, [pc, #164]	; (8012584 <_vfiprintf_r+0x254>)
 80124de:	bb1b      	cbnz	r3, 8012528 <_vfiprintf_r+0x1f8>
 80124e0:	9b03      	ldr	r3, [sp, #12]
 80124e2:	3307      	adds	r3, #7
 80124e4:	f023 0307 	bic.w	r3, r3, #7
 80124e8:	3308      	adds	r3, #8
 80124ea:	9303      	str	r3, [sp, #12]
 80124ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124ee:	443b      	add	r3, r7
 80124f0:	9309      	str	r3, [sp, #36]	; 0x24
 80124f2:	e767      	b.n	80123c4 <_vfiprintf_r+0x94>
 80124f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80124f8:	460c      	mov	r4, r1
 80124fa:	2001      	movs	r0, #1
 80124fc:	e7a5      	b.n	801244a <_vfiprintf_r+0x11a>
 80124fe:	2300      	movs	r3, #0
 8012500:	3401      	adds	r4, #1
 8012502:	9305      	str	r3, [sp, #20]
 8012504:	4619      	mov	r1, r3
 8012506:	f04f 0c0a 	mov.w	ip, #10
 801250a:	4620      	mov	r0, r4
 801250c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012510:	3a30      	subs	r2, #48	; 0x30
 8012512:	2a09      	cmp	r2, #9
 8012514:	d903      	bls.n	801251e <_vfiprintf_r+0x1ee>
 8012516:	2b00      	cmp	r3, #0
 8012518:	d0c5      	beq.n	80124a6 <_vfiprintf_r+0x176>
 801251a:	9105      	str	r1, [sp, #20]
 801251c:	e7c3      	b.n	80124a6 <_vfiprintf_r+0x176>
 801251e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012522:	4604      	mov	r4, r0
 8012524:	2301      	movs	r3, #1
 8012526:	e7f0      	b.n	801250a <_vfiprintf_r+0x1da>
 8012528:	ab03      	add	r3, sp, #12
 801252a:	9300      	str	r3, [sp, #0]
 801252c:	462a      	mov	r2, r5
 801252e:	4b16      	ldr	r3, [pc, #88]	; (8012588 <_vfiprintf_r+0x258>)
 8012530:	a904      	add	r1, sp, #16
 8012532:	4630      	mov	r0, r6
 8012534:	f7fd fe32 	bl	801019c <_printf_float>
 8012538:	4607      	mov	r7, r0
 801253a:	1c78      	adds	r0, r7, #1
 801253c:	d1d6      	bne.n	80124ec <_vfiprintf_r+0x1bc>
 801253e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012540:	07d9      	lsls	r1, r3, #31
 8012542:	d405      	bmi.n	8012550 <_vfiprintf_r+0x220>
 8012544:	89ab      	ldrh	r3, [r5, #12]
 8012546:	059a      	lsls	r2, r3, #22
 8012548:	d402      	bmi.n	8012550 <_vfiprintf_r+0x220>
 801254a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801254c:	f000 faaf 	bl	8012aae <__retarget_lock_release_recursive>
 8012550:	89ab      	ldrh	r3, [r5, #12]
 8012552:	065b      	lsls	r3, r3, #25
 8012554:	f53f af12 	bmi.w	801237c <_vfiprintf_r+0x4c>
 8012558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801255a:	e711      	b.n	8012380 <_vfiprintf_r+0x50>
 801255c:	ab03      	add	r3, sp, #12
 801255e:	9300      	str	r3, [sp, #0]
 8012560:	462a      	mov	r2, r5
 8012562:	4b09      	ldr	r3, [pc, #36]	; (8012588 <_vfiprintf_r+0x258>)
 8012564:	a904      	add	r1, sp, #16
 8012566:	4630      	mov	r0, r6
 8012568:	f7fe f8bc 	bl	80106e4 <_printf_i>
 801256c:	e7e4      	b.n	8012538 <_vfiprintf_r+0x208>
 801256e:	bf00      	nop
 8012570:	0801389c 	.word	0x0801389c
 8012574:	080138bc 	.word	0x080138bc
 8012578:	0801387c 	.word	0x0801387c
 801257c:	08013724 	.word	0x08013724
 8012580:	0801372e 	.word	0x0801372e
 8012584:	0801019d 	.word	0x0801019d
 8012588:	0801230b 	.word	0x0801230b
 801258c:	0801372a 	.word	0x0801372a

08012590 <__swbuf_r>:
 8012590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012592:	460e      	mov	r6, r1
 8012594:	4614      	mov	r4, r2
 8012596:	4605      	mov	r5, r0
 8012598:	b118      	cbz	r0, 80125a2 <__swbuf_r+0x12>
 801259a:	6983      	ldr	r3, [r0, #24]
 801259c:	b90b      	cbnz	r3, 80125a2 <__swbuf_r+0x12>
 801259e:	f000 f9e7 	bl	8012970 <__sinit>
 80125a2:	4b21      	ldr	r3, [pc, #132]	; (8012628 <__swbuf_r+0x98>)
 80125a4:	429c      	cmp	r4, r3
 80125a6:	d12b      	bne.n	8012600 <__swbuf_r+0x70>
 80125a8:	686c      	ldr	r4, [r5, #4]
 80125aa:	69a3      	ldr	r3, [r4, #24]
 80125ac:	60a3      	str	r3, [r4, #8]
 80125ae:	89a3      	ldrh	r3, [r4, #12]
 80125b0:	071a      	lsls	r2, r3, #28
 80125b2:	d52f      	bpl.n	8012614 <__swbuf_r+0x84>
 80125b4:	6923      	ldr	r3, [r4, #16]
 80125b6:	b36b      	cbz	r3, 8012614 <__swbuf_r+0x84>
 80125b8:	6923      	ldr	r3, [r4, #16]
 80125ba:	6820      	ldr	r0, [r4, #0]
 80125bc:	1ac0      	subs	r0, r0, r3
 80125be:	6963      	ldr	r3, [r4, #20]
 80125c0:	b2f6      	uxtb	r6, r6
 80125c2:	4283      	cmp	r3, r0
 80125c4:	4637      	mov	r7, r6
 80125c6:	dc04      	bgt.n	80125d2 <__swbuf_r+0x42>
 80125c8:	4621      	mov	r1, r4
 80125ca:	4628      	mov	r0, r5
 80125cc:	f000 f93c 	bl	8012848 <_fflush_r>
 80125d0:	bb30      	cbnz	r0, 8012620 <__swbuf_r+0x90>
 80125d2:	68a3      	ldr	r3, [r4, #8]
 80125d4:	3b01      	subs	r3, #1
 80125d6:	60a3      	str	r3, [r4, #8]
 80125d8:	6823      	ldr	r3, [r4, #0]
 80125da:	1c5a      	adds	r2, r3, #1
 80125dc:	6022      	str	r2, [r4, #0]
 80125de:	701e      	strb	r6, [r3, #0]
 80125e0:	6963      	ldr	r3, [r4, #20]
 80125e2:	3001      	adds	r0, #1
 80125e4:	4283      	cmp	r3, r0
 80125e6:	d004      	beq.n	80125f2 <__swbuf_r+0x62>
 80125e8:	89a3      	ldrh	r3, [r4, #12]
 80125ea:	07db      	lsls	r3, r3, #31
 80125ec:	d506      	bpl.n	80125fc <__swbuf_r+0x6c>
 80125ee:	2e0a      	cmp	r6, #10
 80125f0:	d104      	bne.n	80125fc <__swbuf_r+0x6c>
 80125f2:	4621      	mov	r1, r4
 80125f4:	4628      	mov	r0, r5
 80125f6:	f000 f927 	bl	8012848 <_fflush_r>
 80125fa:	b988      	cbnz	r0, 8012620 <__swbuf_r+0x90>
 80125fc:	4638      	mov	r0, r7
 80125fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012600:	4b0a      	ldr	r3, [pc, #40]	; (801262c <__swbuf_r+0x9c>)
 8012602:	429c      	cmp	r4, r3
 8012604:	d101      	bne.n	801260a <__swbuf_r+0x7a>
 8012606:	68ac      	ldr	r4, [r5, #8]
 8012608:	e7cf      	b.n	80125aa <__swbuf_r+0x1a>
 801260a:	4b09      	ldr	r3, [pc, #36]	; (8012630 <__swbuf_r+0xa0>)
 801260c:	429c      	cmp	r4, r3
 801260e:	bf08      	it	eq
 8012610:	68ec      	ldreq	r4, [r5, #12]
 8012612:	e7ca      	b.n	80125aa <__swbuf_r+0x1a>
 8012614:	4621      	mov	r1, r4
 8012616:	4628      	mov	r0, r5
 8012618:	f000 f81a 	bl	8012650 <__swsetup_r>
 801261c:	2800      	cmp	r0, #0
 801261e:	d0cb      	beq.n	80125b8 <__swbuf_r+0x28>
 8012620:	f04f 37ff 	mov.w	r7, #4294967295
 8012624:	e7ea      	b.n	80125fc <__swbuf_r+0x6c>
 8012626:	bf00      	nop
 8012628:	0801389c 	.word	0x0801389c
 801262c:	080138bc 	.word	0x080138bc
 8012630:	0801387c 	.word	0x0801387c

08012634 <__ascii_wctomb>:
 8012634:	b149      	cbz	r1, 801264a <__ascii_wctomb+0x16>
 8012636:	2aff      	cmp	r2, #255	; 0xff
 8012638:	bf85      	ittet	hi
 801263a:	238a      	movhi	r3, #138	; 0x8a
 801263c:	6003      	strhi	r3, [r0, #0]
 801263e:	700a      	strbls	r2, [r1, #0]
 8012640:	f04f 30ff 	movhi.w	r0, #4294967295
 8012644:	bf98      	it	ls
 8012646:	2001      	movls	r0, #1
 8012648:	4770      	bx	lr
 801264a:	4608      	mov	r0, r1
 801264c:	4770      	bx	lr
	...

08012650 <__swsetup_r>:
 8012650:	4b32      	ldr	r3, [pc, #200]	; (801271c <__swsetup_r+0xcc>)
 8012652:	b570      	push	{r4, r5, r6, lr}
 8012654:	681d      	ldr	r5, [r3, #0]
 8012656:	4606      	mov	r6, r0
 8012658:	460c      	mov	r4, r1
 801265a:	b125      	cbz	r5, 8012666 <__swsetup_r+0x16>
 801265c:	69ab      	ldr	r3, [r5, #24]
 801265e:	b913      	cbnz	r3, 8012666 <__swsetup_r+0x16>
 8012660:	4628      	mov	r0, r5
 8012662:	f000 f985 	bl	8012970 <__sinit>
 8012666:	4b2e      	ldr	r3, [pc, #184]	; (8012720 <__swsetup_r+0xd0>)
 8012668:	429c      	cmp	r4, r3
 801266a:	d10f      	bne.n	801268c <__swsetup_r+0x3c>
 801266c:	686c      	ldr	r4, [r5, #4]
 801266e:	89a3      	ldrh	r3, [r4, #12]
 8012670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012674:	0719      	lsls	r1, r3, #28
 8012676:	d42c      	bmi.n	80126d2 <__swsetup_r+0x82>
 8012678:	06dd      	lsls	r5, r3, #27
 801267a:	d411      	bmi.n	80126a0 <__swsetup_r+0x50>
 801267c:	2309      	movs	r3, #9
 801267e:	6033      	str	r3, [r6, #0]
 8012680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012684:	81a3      	strh	r3, [r4, #12]
 8012686:	f04f 30ff 	mov.w	r0, #4294967295
 801268a:	e03e      	b.n	801270a <__swsetup_r+0xba>
 801268c:	4b25      	ldr	r3, [pc, #148]	; (8012724 <__swsetup_r+0xd4>)
 801268e:	429c      	cmp	r4, r3
 8012690:	d101      	bne.n	8012696 <__swsetup_r+0x46>
 8012692:	68ac      	ldr	r4, [r5, #8]
 8012694:	e7eb      	b.n	801266e <__swsetup_r+0x1e>
 8012696:	4b24      	ldr	r3, [pc, #144]	; (8012728 <__swsetup_r+0xd8>)
 8012698:	429c      	cmp	r4, r3
 801269a:	bf08      	it	eq
 801269c:	68ec      	ldreq	r4, [r5, #12]
 801269e:	e7e6      	b.n	801266e <__swsetup_r+0x1e>
 80126a0:	0758      	lsls	r0, r3, #29
 80126a2:	d512      	bpl.n	80126ca <__swsetup_r+0x7a>
 80126a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126a6:	b141      	cbz	r1, 80126ba <__swsetup_r+0x6a>
 80126a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126ac:	4299      	cmp	r1, r3
 80126ae:	d002      	beq.n	80126b6 <__swsetup_r+0x66>
 80126b0:	4630      	mov	r0, r6
 80126b2:	f7ff fb6f 	bl	8011d94 <_free_r>
 80126b6:	2300      	movs	r3, #0
 80126b8:	6363      	str	r3, [r4, #52]	; 0x34
 80126ba:	89a3      	ldrh	r3, [r4, #12]
 80126bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80126c0:	81a3      	strh	r3, [r4, #12]
 80126c2:	2300      	movs	r3, #0
 80126c4:	6063      	str	r3, [r4, #4]
 80126c6:	6923      	ldr	r3, [r4, #16]
 80126c8:	6023      	str	r3, [r4, #0]
 80126ca:	89a3      	ldrh	r3, [r4, #12]
 80126cc:	f043 0308 	orr.w	r3, r3, #8
 80126d0:	81a3      	strh	r3, [r4, #12]
 80126d2:	6923      	ldr	r3, [r4, #16]
 80126d4:	b94b      	cbnz	r3, 80126ea <__swsetup_r+0x9a>
 80126d6:	89a3      	ldrh	r3, [r4, #12]
 80126d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80126dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126e0:	d003      	beq.n	80126ea <__swsetup_r+0x9a>
 80126e2:	4621      	mov	r1, r4
 80126e4:	4630      	mov	r0, r6
 80126e6:	f000 fa07 	bl	8012af8 <__smakebuf_r>
 80126ea:	89a0      	ldrh	r0, [r4, #12]
 80126ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126f0:	f010 0301 	ands.w	r3, r0, #1
 80126f4:	d00a      	beq.n	801270c <__swsetup_r+0xbc>
 80126f6:	2300      	movs	r3, #0
 80126f8:	60a3      	str	r3, [r4, #8]
 80126fa:	6963      	ldr	r3, [r4, #20]
 80126fc:	425b      	negs	r3, r3
 80126fe:	61a3      	str	r3, [r4, #24]
 8012700:	6923      	ldr	r3, [r4, #16]
 8012702:	b943      	cbnz	r3, 8012716 <__swsetup_r+0xc6>
 8012704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012708:	d1ba      	bne.n	8012680 <__swsetup_r+0x30>
 801270a:	bd70      	pop	{r4, r5, r6, pc}
 801270c:	0781      	lsls	r1, r0, #30
 801270e:	bf58      	it	pl
 8012710:	6963      	ldrpl	r3, [r4, #20]
 8012712:	60a3      	str	r3, [r4, #8]
 8012714:	e7f4      	b.n	8012700 <__swsetup_r+0xb0>
 8012716:	2000      	movs	r0, #0
 8012718:	e7f7      	b.n	801270a <__swsetup_r+0xba>
 801271a:	bf00      	nop
 801271c:	20000020 	.word	0x20000020
 8012720:	0801389c 	.word	0x0801389c
 8012724:	080138bc 	.word	0x080138bc
 8012728:	0801387c 	.word	0x0801387c

0801272c <abort>:
 801272c:	b508      	push	{r3, lr}
 801272e:	2006      	movs	r0, #6
 8012730:	f000 fa52 	bl	8012bd8 <raise>
 8012734:	2001      	movs	r0, #1
 8012736:	f7f0 fb11 	bl	8002d5c <_exit>
	...

0801273c <__sflush_r>:
 801273c:	898a      	ldrh	r2, [r1, #12]
 801273e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012742:	4605      	mov	r5, r0
 8012744:	0710      	lsls	r0, r2, #28
 8012746:	460c      	mov	r4, r1
 8012748:	d458      	bmi.n	80127fc <__sflush_r+0xc0>
 801274a:	684b      	ldr	r3, [r1, #4]
 801274c:	2b00      	cmp	r3, #0
 801274e:	dc05      	bgt.n	801275c <__sflush_r+0x20>
 8012750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012752:	2b00      	cmp	r3, #0
 8012754:	dc02      	bgt.n	801275c <__sflush_r+0x20>
 8012756:	2000      	movs	r0, #0
 8012758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801275c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801275e:	2e00      	cmp	r6, #0
 8012760:	d0f9      	beq.n	8012756 <__sflush_r+0x1a>
 8012762:	2300      	movs	r3, #0
 8012764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012768:	682f      	ldr	r7, [r5, #0]
 801276a:	602b      	str	r3, [r5, #0]
 801276c:	d032      	beq.n	80127d4 <__sflush_r+0x98>
 801276e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012770:	89a3      	ldrh	r3, [r4, #12]
 8012772:	075a      	lsls	r2, r3, #29
 8012774:	d505      	bpl.n	8012782 <__sflush_r+0x46>
 8012776:	6863      	ldr	r3, [r4, #4]
 8012778:	1ac0      	subs	r0, r0, r3
 801277a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801277c:	b10b      	cbz	r3, 8012782 <__sflush_r+0x46>
 801277e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012780:	1ac0      	subs	r0, r0, r3
 8012782:	2300      	movs	r3, #0
 8012784:	4602      	mov	r2, r0
 8012786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012788:	6a21      	ldr	r1, [r4, #32]
 801278a:	4628      	mov	r0, r5
 801278c:	47b0      	blx	r6
 801278e:	1c43      	adds	r3, r0, #1
 8012790:	89a3      	ldrh	r3, [r4, #12]
 8012792:	d106      	bne.n	80127a2 <__sflush_r+0x66>
 8012794:	6829      	ldr	r1, [r5, #0]
 8012796:	291d      	cmp	r1, #29
 8012798:	d82c      	bhi.n	80127f4 <__sflush_r+0xb8>
 801279a:	4a2a      	ldr	r2, [pc, #168]	; (8012844 <__sflush_r+0x108>)
 801279c:	40ca      	lsrs	r2, r1
 801279e:	07d6      	lsls	r6, r2, #31
 80127a0:	d528      	bpl.n	80127f4 <__sflush_r+0xb8>
 80127a2:	2200      	movs	r2, #0
 80127a4:	6062      	str	r2, [r4, #4]
 80127a6:	04d9      	lsls	r1, r3, #19
 80127a8:	6922      	ldr	r2, [r4, #16]
 80127aa:	6022      	str	r2, [r4, #0]
 80127ac:	d504      	bpl.n	80127b8 <__sflush_r+0x7c>
 80127ae:	1c42      	adds	r2, r0, #1
 80127b0:	d101      	bne.n	80127b6 <__sflush_r+0x7a>
 80127b2:	682b      	ldr	r3, [r5, #0]
 80127b4:	b903      	cbnz	r3, 80127b8 <__sflush_r+0x7c>
 80127b6:	6560      	str	r0, [r4, #84]	; 0x54
 80127b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127ba:	602f      	str	r7, [r5, #0]
 80127bc:	2900      	cmp	r1, #0
 80127be:	d0ca      	beq.n	8012756 <__sflush_r+0x1a>
 80127c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127c4:	4299      	cmp	r1, r3
 80127c6:	d002      	beq.n	80127ce <__sflush_r+0x92>
 80127c8:	4628      	mov	r0, r5
 80127ca:	f7ff fae3 	bl	8011d94 <_free_r>
 80127ce:	2000      	movs	r0, #0
 80127d0:	6360      	str	r0, [r4, #52]	; 0x34
 80127d2:	e7c1      	b.n	8012758 <__sflush_r+0x1c>
 80127d4:	6a21      	ldr	r1, [r4, #32]
 80127d6:	2301      	movs	r3, #1
 80127d8:	4628      	mov	r0, r5
 80127da:	47b0      	blx	r6
 80127dc:	1c41      	adds	r1, r0, #1
 80127de:	d1c7      	bne.n	8012770 <__sflush_r+0x34>
 80127e0:	682b      	ldr	r3, [r5, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d0c4      	beq.n	8012770 <__sflush_r+0x34>
 80127e6:	2b1d      	cmp	r3, #29
 80127e8:	d001      	beq.n	80127ee <__sflush_r+0xb2>
 80127ea:	2b16      	cmp	r3, #22
 80127ec:	d101      	bne.n	80127f2 <__sflush_r+0xb6>
 80127ee:	602f      	str	r7, [r5, #0]
 80127f0:	e7b1      	b.n	8012756 <__sflush_r+0x1a>
 80127f2:	89a3      	ldrh	r3, [r4, #12]
 80127f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127f8:	81a3      	strh	r3, [r4, #12]
 80127fa:	e7ad      	b.n	8012758 <__sflush_r+0x1c>
 80127fc:	690f      	ldr	r7, [r1, #16]
 80127fe:	2f00      	cmp	r7, #0
 8012800:	d0a9      	beq.n	8012756 <__sflush_r+0x1a>
 8012802:	0793      	lsls	r3, r2, #30
 8012804:	680e      	ldr	r6, [r1, #0]
 8012806:	bf08      	it	eq
 8012808:	694b      	ldreq	r3, [r1, #20]
 801280a:	600f      	str	r7, [r1, #0]
 801280c:	bf18      	it	ne
 801280e:	2300      	movne	r3, #0
 8012810:	eba6 0807 	sub.w	r8, r6, r7
 8012814:	608b      	str	r3, [r1, #8]
 8012816:	f1b8 0f00 	cmp.w	r8, #0
 801281a:	dd9c      	ble.n	8012756 <__sflush_r+0x1a>
 801281c:	6a21      	ldr	r1, [r4, #32]
 801281e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012820:	4643      	mov	r3, r8
 8012822:	463a      	mov	r2, r7
 8012824:	4628      	mov	r0, r5
 8012826:	47b0      	blx	r6
 8012828:	2800      	cmp	r0, #0
 801282a:	dc06      	bgt.n	801283a <__sflush_r+0xfe>
 801282c:	89a3      	ldrh	r3, [r4, #12]
 801282e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012832:	81a3      	strh	r3, [r4, #12]
 8012834:	f04f 30ff 	mov.w	r0, #4294967295
 8012838:	e78e      	b.n	8012758 <__sflush_r+0x1c>
 801283a:	4407      	add	r7, r0
 801283c:	eba8 0800 	sub.w	r8, r8, r0
 8012840:	e7e9      	b.n	8012816 <__sflush_r+0xda>
 8012842:	bf00      	nop
 8012844:	20400001 	.word	0x20400001

08012848 <_fflush_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	690b      	ldr	r3, [r1, #16]
 801284c:	4605      	mov	r5, r0
 801284e:	460c      	mov	r4, r1
 8012850:	b913      	cbnz	r3, 8012858 <_fflush_r+0x10>
 8012852:	2500      	movs	r5, #0
 8012854:	4628      	mov	r0, r5
 8012856:	bd38      	pop	{r3, r4, r5, pc}
 8012858:	b118      	cbz	r0, 8012862 <_fflush_r+0x1a>
 801285a:	6983      	ldr	r3, [r0, #24]
 801285c:	b90b      	cbnz	r3, 8012862 <_fflush_r+0x1a>
 801285e:	f000 f887 	bl	8012970 <__sinit>
 8012862:	4b14      	ldr	r3, [pc, #80]	; (80128b4 <_fflush_r+0x6c>)
 8012864:	429c      	cmp	r4, r3
 8012866:	d11b      	bne.n	80128a0 <_fflush_r+0x58>
 8012868:	686c      	ldr	r4, [r5, #4]
 801286a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d0ef      	beq.n	8012852 <_fflush_r+0xa>
 8012872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012874:	07d0      	lsls	r0, r2, #31
 8012876:	d404      	bmi.n	8012882 <_fflush_r+0x3a>
 8012878:	0599      	lsls	r1, r3, #22
 801287a:	d402      	bmi.n	8012882 <_fflush_r+0x3a>
 801287c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801287e:	f000 f915 	bl	8012aac <__retarget_lock_acquire_recursive>
 8012882:	4628      	mov	r0, r5
 8012884:	4621      	mov	r1, r4
 8012886:	f7ff ff59 	bl	801273c <__sflush_r>
 801288a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801288c:	07da      	lsls	r2, r3, #31
 801288e:	4605      	mov	r5, r0
 8012890:	d4e0      	bmi.n	8012854 <_fflush_r+0xc>
 8012892:	89a3      	ldrh	r3, [r4, #12]
 8012894:	059b      	lsls	r3, r3, #22
 8012896:	d4dd      	bmi.n	8012854 <_fflush_r+0xc>
 8012898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801289a:	f000 f908 	bl	8012aae <__retarget_lock_release_recursive>
 801289e:	e7d9      	b.n	8012854 <_fflush_r+0xc>
 80128a0:	4b05      	ldr	r3, [pc, #20]	; (80128b8 <_fflush_r+0x70>)
 80128a2:	429c      	cmp	r4, r3
 80128a4:	d101      	bne.n	80128aa <_fflush_r+0x62>
 80128a6:	68ac      	ldr	r4, [r5, #8]
 80128a8:	e7df      	b.n	801286a <_fflush_r+0x22>
 80128aa:	4b04      	ldr	r3, [pc, #16]	; (80128bc <_fflush_r+0x74>)
 80128ac:	429c      	cmp	r4, r3
 80128ae:	bf08      	it	eq
 80128b0:	68ec      	ldreq	r4, [r5, #12]
 80128b2:	e7da      	b.n	801286a <_fflush_r+0x22>
 80128b4:	0801389c 	.word	0x0801389c
 80128b8:	080138bc 	.word	0x080138bc
 80128bc:	0801387c 	.word	0x0801387c

080128c0 <std>:
 80128c0:	2300      	movs	r3, #0
 80128c2:	b510      	push	{r4, lr}
 80128c4:	4604      	mov	r4, r0
 80128c6:	e9c0 3300 	strd	r3, r3, [r0]
 80128ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80128ce:	6083      	str	r3, [r0, #8]
 80128d0:	8181      	strh	r1, [r0, #12]
 80128d2:	6643      	str	r3, [r0, #100]	; 0x64
 80128d4:	81c2      	strh	r2, [r0, #14]
 80128d6:	6183      	str	r3, [r0, #24]
 80128d8:	4619      	mov	r1, r3
 80128da:	2208      	movs	r2, #8
 80128dc:	305c      	adds	r0, #92	; 0x5c
 80128de:	f7fd fbb5 	bl	801004c <memset>
 80128e2:	4b05      	ldr	r3, [pc, #20]	; (80128f8 <std+0x38>)
 80128e4:	6263      	str	r3, [r4, #36]	; 0x24
 80128e6:	4b05      	ldr	r3, [pc, #20]	; (80128fc <std+0x3c>)
 80128e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80128ea:	4b05      	ldr	r3, [pc, #20]	; (8012900 <std+0x40>)
 80128ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80128ee:	4b05      	ldr	r3, [pc, #20]	; (8012904 <std+0x44>)
 80128f0:	6224      	str	r4, [r4, #32]
 80128f2:	6323      	str	r3, [r4, #48]	; 0x30
 80128f4:	bd10      	pop	{r4, pc}
 80128f6:	bf00      	nop
 80128f8:	08012c11 	.word	0x08012c11
 80128fc:	08012c33 	.word	0x08012c33
 8012900:	08012c6b 	.word	0x08012c6b
 8012904:	08012c8f 	.word	0x08012c8f

08012908 <_cleanup_r>:
 8012908:	4901      	ldr	r1, [pc, #4]	; (8012910 <_cleanup_r+0x8>)
 801290a:	f000 b8af 	b.w	8012a6c <_fwalk_reent>
 801290e:	bf00      	nop
 8012910:	08012849 	.word	0x08012849

08012914 <__sfmoreglue>:
 8012914:	b570      	push	{r4, r5, r6, lr}
 8012916:	1e4a      	subs	r2, r1, #1
 8012918:	2568      	movs	r5, #104	; 0x68
 801291a:	4355      	muls	r5, r2
 801291c:	460e      	mov	r6, r1
 801291e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012922:	f7ff fa87 	bl	8011e34 <_malloc_r>
 8012926:	4604      	mov	r4, r0
 8012928:	b140      	cbz	r0, 801293c <__sfmoreglue+0x28>
 801292a:	2100      	movs	r1, #0
 801292c:	e9c0 1600 	strd	r1, r6, [r0]
 8012930:	300c      	adds	r0, #12
 8012932:	60a0      	str	r0, [r4, #8]
 8012934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012938:	f7fd fb88 	bl	801004c <memset>
 801293c:	4620      	mov	r0, r4
 801293e:	bd70      	pop	{r4, r5, r6, pc}

08012940 <__sfp_lock_acquire>:
 8012940:	4801      	ldr	r0, [pc, #4]	; (8012948 <__sfp_lock_acquire+0x8>)
 8012942:	f000 b8b3 	b.w	8012aac <__retarget_lock_acquire_recursive>
 8012946:	bf00      	nop
 8012948:	200096e8 	.word	0x200096e8

0801294c <__sfp_lock_release>:
 801294c:	4801      	ldr	r0, [pc, #4]	; (8012954 <__sfp_lock_release+0x8>)
 801294e:	f000 b8ae 	b.w	8012aae <__retarget_lock_release_recursive>
 8012952:	bf00      	nop
 8012954:	200096e8 	.word	0x200096e8

08012958 <__sinit_lock_acquire>:
 8012958:	4801      	ldr	r0, [pc, #4]	; (8012960 <__sinit_lock_acquire+0x8>)
 801295a:	f000 b8a7 	b.w	8012aac <__retarget_lock_acquire_recursive>
 801295e:	bf00      	nop
 8012960:	200096e3 	.word	0x200096e3

08012964 <__sinit_lock_release>:
 8012964:	4801      	ldr	r0, [pc, #4]	; (801296c <__sinit_lock_release+0x8>)
 8012966:	f000 b8a2 	b.w	8012aae <__retarget_lock_release_recursive>
 801296a:	bf00      	nop
 801296c:	200096e3 	.word	0x200096e3

08012970 <__sinit>:
 8012970:	b510      	push	{r4, lr}
 8012972:	4604      	mov	r4, r0
 8012974:	f7ff fff0 	bl	8012958 <__sinit_lock_acquire>
 8012978:	69a3      	ldr	r3, [r4, #24]
 801297a:	b11b      	cbz	r3, 8012984 <__sinit+0x14>
 801297c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012980:	f7ff bff0 	b.w	8012964 <__sinit_lock_release>
 8012984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012988:	6523      	str	r3, [r4, #80]	; 0x50
 801298a:	4b13      	ldr	r3, [pc, #76]	; (80129d8 <__sinit+0x68>)
 801298c:	4a13      	ldr	r2, [pc, #76]	; (80129dc <__sinit+0x6c>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	62a2      	str	r2, [r4, #40]	; 0x28
 8012992:	42a3      	cmp	r3, r4
 8012994:	bf04      	itt	eq
 8012996:	2301      	moveq	r3, #1
 8012998:	61a3      	streq	r3, [r4, #24]
 801299a:	4620      	mov	r0, r4
 801299c:	f000 f820 	bl	80129e0 <__sfp>
 80129a0:	6060      	str	r0, [r4, #4]
 80129a2:	4620      	mov	r0, r4
 80129a4:	f000 f81c 	bl	80129e0 <__sfp>
 80129a8:	60a0      	str	r0, [r4, #8]
 80129aa:	4620      	mov	r0, r4
 80129ac:	f000 f818 	bl	80129e0 <__sfp>
 80129b0:	2200      	movs	r2, #0
 80129b2:	60e0      	str	r0, [r4, #12]
 80129b4:	2104      	movs	r1, #4
 80129b6:	6860      	ldr	r0, [r4, #4]
 80129b8:	f7ff ff82 	bl	80128c0 <std>
 80129bc:	68a0      	ldr	r0, [r4, #8]
 80129be:	2201      	movs	r2, #1
 80129c0:	2109      	movs	r1, #9
 80129c2:	f7ff ff7d 	bl	80128c0 <std>
 80129c6:	68e0      	ldr	r0, [r4, #12]
 80129c8:	2202      	movs	r2, #2
 80129ca:	2112      	movs	r1, #18
 80129cc:	f7ff ff78 	bl	80128c0 <std>
 80129d0:	2301      	movs	r3, #1
 80129d2:	61a3      	str	r3, [r4, #24]
 80129d4:	e7d2      	b.n	801297c <__sinit+0xc>
 80129d6:	bf00      	nop
 80129d8:	080134f8 	.word	0x080134f8
 80129dc:	08012909 	.word	0x08012909

080129e0 <__sfp>:
 80129e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129e2:	4607      	mov	r7, r0
 80129e4:	f7ff ffac 	bl	8012940 <__sfp_lock_acquire>
 80129e8:	4b1e      	ldr	r3, [pc, #120]	; (8012a64 <__sfp+0x84>)
 80129ea:	681e      	ldr	r6, [r3, #0]
 80129ec:	69b3      	ldr	r3, [r6, #24]
 80129ee:	b913      	cbnz	r3, 80129f6 <__sfp+0x16>
 80129f0:	4630      	mov	r0, r6
 80129f2:	f7ff ffbd 	bl	8012970 <__sinit>
 80129f6:	3648      	adds	r6, #72	; 0x48
 80129f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80129fc:	3b01      	subs	r3, #1
 80129fe:	d503      	bpl.n	8012a08 <__sfp+0x28>
 8012a00:	6833      	ldr	r3, [r6, #0]
 8012a02:	b30b      	cbz	r3, 8012a48 <__sfp+0x68>
 8012a04:	6836      	ldr	r6, [r6, #0]
 8012a06:	e7f7      	b.n	80129f8 <__sfp+0x18>
 8012a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012a0c:	b9d5      	cbnz	r5, 8012a44 <__sfp+0x64>
 8012a0e:	4b16      	ldr	r3, [pc, #88]	; (8012a68 <__sfp+0x88>)
 8012a10:	60e3      	str	r3, [r4, #12]
 8012a12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012a16:	6665      	str	r5, [r4, #100]	; 0x64
 8012a18:	f000 f847 	bl	8012aaa <__retarget_lock_init_recursive>
 8012a1c:	f7ff ff96 	bl	801294c <__sfp_lock_release>
 8012a20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012a24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012a28:	6025      	str	r5, [r4, #0]
 8012a2a:	61a5      	str	r5, [r4, #24]
 8012a2c:	2208      	movs	r2, #8
 8012a2e:	4629      	mov	r1, r5
 8012a30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012a34:	f7fd fb0a 	bl	801004c <memset>
 8012a38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012a3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012a40:	4620      	mov	r0, r4
 8012a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a44:	3468      	adds	r4, #104	; 0x68
 8012a46:	e7d9      	b.n	80129fc <__sfp+0x1c>
 8012a48:	2104      	movs	r1, #4
 8012a4a:	4638      	mov	r0, r7
 8012a4c:	f7ff ff62 	bl	8012914 <__sfmoreglue>
 8012a50:	4604      	mov	r4, r0
 8012a52:	6030      	str	r0, [r6, #0]
 8012a54:	2800      	cmp	r0, #0
 8012a56:	d1d5      	bne.n	8012a04 <__sfp+0x24>
 8012a58:	f7ff ff78 	bl	801294c <__sfp_lock_release>
 8012a5c:	230c      	movs	r3, #12
 8012a5e:	603b      	str	r3, [r7, #0]
 8012a60:	e7ee      	b.n	8012a40 <__sfp+0x60>
 8012a62:	bf00      	nop
 8012a64:	080134f8 	.word	0x080134f8
 8012a68:	ffff0001 	.word	0xffff0001

08012a6c <_fwalk_reent>:
 8012a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a70:	4606      	mov	r6, r0
 8012a72:	4688      	mov	r8, r1
 8012a74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012a78:	2700      	movs	r7, #0
 8012a7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a7e:	f1b9 0901 	subs.w	r9, r9, #1
 8012a82:	d505      	bpl.n	8012a90 <_fwalk_reent+0x24>
 8012a84:	6824      	ldr	r4, [r4, #0]
 8012a86:	2c00      	cmp	r4, #0
 8012a88:	d1f7      	bne.n	8012a7a <_fwalk_reent+0xe>
 8012a8a:	4638      	mov	r0, r7
 8012a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a90:	89ab      	ldrh	r3, [r5, #12]
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d907      	bls.n	8012aa6 <_fwalk_reent+0x3a>
 8012a96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	d003      	beq.n	8012aa6 <_fwalk_reent+0x3a>
 8012a9e:	4629      	mov	r1, r5
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	47c0      	blx	r8
 8012aa4:	4307      	orrs	r7, r0
 8012aa6:	3568      	adds	r5, #104	; 0x68
 8012aa8:	e7e9      	b.n	8012a7e <_fwalk_reent+0x12>

08012aaa <__retarget_lock_init_recursive>:
 8012aaa:	4770      	bx	lr

08012aac <__retarget_lock_acquire_recursive>:
 8012aac:	4770      	bx	lr

08012aae <__retarget_lock_release_recursive>:
 8012aae:	4770      	bx	lr

08012ab0 <__swhatbuf_r>:
 8012ab0:	b570      	push	{r4, r5, r6, lr}
 8012ab2:	460e      	mov	r6, r1
 8012ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ab8:	2900      	cmp	r1, #0
 8012aba:	b096      	sub	sp, #88	; 0x58
 8012abc:	4614      	mov	r4, r2
 8012abe:	461d      	mov	r5, r3
 8012ac0:	da07      	bge.n	8012ad2 <__swhatbuf_r+0x22>
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	602b      	str	r3, [r5, #0]
 8012ac6:	89b3      	ldrh	r3, [r6, #12]
 8012ac8:	061a      	lsls	r2, r3, #24
 8012aca:	d410      	bmi.n	8012aee <__swhatbuf_r+0x3e>
 8012acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ad0:	e00e      	b.n	8012af0 <__swhatbuf_r+0x40>
 8012ad2:	466a      	mov	r2, sp
 8012ad4:	f000 f902 	bl	8012cdc <_fstat_r>
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	dbf2      	blt.n	8012ac2 <__swhatbuf_r+0x12>
 8012adc:	9a01      	ldr	r2, [sp, #4]
 8012ade:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012ae2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012ae6:	425a      	negs	r2, r3
 8012ae8:	415a      	adcs	r2, r3
 8012aea:	602a      	str	r2, [r5, #0]
 8012aec:	e7ee      	b.n	8012acc <__swhatbuf_r+0x1c>
 8012aee:	2340      	movs	r3, #64	; 0x40
 8012af0:	2000      	movs	r0, #0
 8012af2:	6023      	str	r3, [r4, #0]
 8012af4:	b016      	add	sp, #88	; 0x58
 8012af6:	bd70      	pop	{r4, r5, r6, pc}

08012af8 <__smakebuf_r>:
 8012af8:	898b      	ldrh	r3, [r1, #12]
 8012afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012afc:	079d      	lsls	r5, r3, #30
 8012afe:	4606      	mov	r6, r0
 8012b00:	460c      	mov	r4, r1
 8012b02:	d507      	bpl.n	8012b14 <__smakebuf_r+0x1c>
 8012b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b08:	6023      	str	r3, [r4, #0]
 8012b0a:	6123      	str	r3, [r4, #16]
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	6163      	str	r3, [r4, #20]
 8012b10:	b002      	add	sp, #8
 8012b12:	bd70      	pop	{r4, r5, r6, pc}
 8012b14:	ab01      	add	r3, sp, #4
 8012b16:	466a      	mov	r2, sp
 8012b18:	f7ff ffca 	bl	8012ab0 <__swhatbuf_r>
 8012b1c:	9900      	ldr	r1, [sp, #0]
 8012b1e:	4605      	mov	r5, r0
 8012b20:	4630      	mov	r0, r6
 8012b22:	f7ff f987 	bl	8011e34 <_malloc_r>
 8012b26:	b948      	cbnz	r0, 8012b3c <__smakebuf_r+0x44>
 8012b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b2c:	059a      	lsls	r2, r3, #22
 8012b2e:	d4ef      	bmi.n	8012b10 <__smakebuf_r+0x18>
 8012b30:	f023 0303 	bic.w	r3, r3, #3
 8012b34:	f043 0302 	orr.w	r3, r3, #2
 8012b38:	81a3      	strh	r3, [r4, #12]
 8012b3a:	e7e3      	b.n	8012b04 <__smakebuf_r+0xc>
 8012b3c:	4b0d      	ldr	r3, [pc, #52]	; (8012b74 <__smakebuf_r+0x7c>)
 8012b3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012b40:	89a3      	ldrh	r3, [r4, #12]
 8012b42:	6020      	str	r0, [r4, #0]
 8012b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b48:	81a3      	strh	r3, [r4, #12]
 8012b4a:	9b00      	ldr	r3, [sp, #0]
 8012b4c:	6163      	str	r3, [r4, #20]
 8012b4e:	9b01      	ldr	r3, [sp, #4]
 8012b50:	6120      	str	r0, [r4, #16]
 8012b52:	b15b      	cbz	r3, 8012b6c <__smakebuf_r+0x74>
 8012b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b58:	4630      	mov	r0, r6
 8012b5a:	f000 f8d1 	bl	8012d00 <_isatty_r>
 8012b5e:	b128      	cbz	r0, 8012b6c <__smakebuf_r+0x74>
 8012b60:	89a3      	ldrh	r3, [r4, #12]
 8012b62:	f023 0303 	bic.w	r3, r3, #3
 8012b66:	f043 0301 	orr.w	r3, r3, #1
 8012b6a:	81a3      	strh	r3, [r4, #12]
 8012b6c:	89a0      	ldrh	r0, [r4, #12]
 8012b6e:	4305      	orrs	r5, r0
 8012b70:	81a5      	strh	r5, [r4, #12]
 8012b72:	e7cd      	b.n	8012b10 <__smakebuf_r+0x18>
 8012b74:	08012909 	.word	0x08012909

08012b78 <_malloc_usable_size_r>:
 8012b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b7c:	1f18      	subs	r0, r3, #4
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	bfbc      	itt	lt
 8012b82:	580b      	ldrlt	r3, [r1, r0]
 8012b84:	18c0      	addlt	r0, r0, r3
 8012b86:	4770      	bx	lr

08012b88 <_raise_r>:
 8012b88:	291f      	cmp	r1, #31
 8012b8a:	b538      	push	{r3, r4, r5, lr}
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	460d      	mov	r5, r1
 8012b90:	d904      	bls.n	8012b9c <_raise_r+0x14>
 8012b92:	2316      	movs	r3, #22
 8012b94:	6003      	str	r3, [r0, #0]
 8012b96:	f04f 30ff 	mov.w	r0, #4294967295
 8012b9a:	bd38      	pop	{r3, r4, r5, pc}
 8012b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b9e:	b112      	cbz	r2, 8012ba6 <_raise_r+0x1e>
 8012ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ba4:	b94b      	cbnz	r3, 8012bba <_raise_r+0x32>
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	f000 f830 	bl	8012c0c <_getpid_r>
 8012bac:	462a      	mov	r2, r5
 8012bae:	4601      	mov	r1, r0
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bb6:	f000 b817 	b.w	8012be8 <_kill_r>
 8012bba:	2b01      	cmp	r3, #1
 8012bbc:	d00a      	beq.n	8012bd4 <_raise_r+0x4c>
 8012bbe:	1c59      	adds	r1, r3, #1
 8012bc0:	d103      	bne.n	8012bca <_raise_r+0x42>
 8012bc2:	2316      	movs	r3, #22
 8012bc4:	6003      	str	r3, [r0, #0]
 8012bc6:	2001      	movs	r0, #1
 8012bc8:	e7e7      	b.n	8012b9a <_raise_r+0x12>
 8012bca:	2400      	movs	r4, #0
 8012bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	4798      	blx	r3
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	e7e0      	b.n	8012b9a <_raise_r+0x12>

08012bd8 <raise>:
 8012bd8:	4b02      	ldr	r3, [pc, #8]	; (8012be4 <raise+0xc>)
 8012bda:	4601      	mov	r1, r0
 8012bdc:	6818      	ldr	r0, [r3, #0]
 8012bde:	f7ff bfd3 	b.w	8012b88 <_raise_r>
 8012be2:	bf00      	nop
 8012be4:	20000020 	.word	0x20000020

08012be8 <_kill_r>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	4d07      	ldr	r5, [pc, #28]	; (8012c08 <_kill_r+0x20>)
 8012bec:	2300      	movs	r3, #0
 8012bee:	4604      	mov	r4, r0
 8012bf0:	4608      	mov	r0, r1
 8012bf2:	4611      	mov	r1, r2
 8012bf4:	602b      	str	r3, [r5, #0]
 8012bf6:	f7f0 f8a1 	bl	8002d3c <_kill>
 8012bfa:	1c43      	adds	r3, r0, #1
 8012bfc:	d102      	bne.n	8012c04 <_kill_r+0x1c>
 8012bfe:	682b      	ldr	r3, [r5, #0]
 8012c00:	b103      	cbz	r3, 8012c04 <_kill_r+0x1c>
 8012c02:	6023      	str	r3, [r4, #0]
 8012c04:	bd38      	pop	{r3, r4, r5, pc}
 8012c06:	bf00      	nop
 8012c08:	200096dc 	.word	0x200096dc

08012c0c <_getpid_r>:
 8012c0c:	f7f0 b88e 	b.w	8002d2c <_getpid>

08012c10 <__sread>:
 8012c10:	b510      	push	{r4, lr}
 8012c12:	460c      	mov	r4, r1
 8012c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c18:	f000 f894 	bl	8012d44 <_read_r>
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	bfab      	itete	ge
 8012c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012c22:	89a3      	ldrhlt	r3, [r4, #12]
 8012c24:	181b      	addge	r3, r3, r0
 8012c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c2a:	bfac      	ite	ge
 8012c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c2e:	81a3      	strhlt	r3, [r4, #12]
 8012c30:	bd10      	pop	{r4, pc}

08012c32 <__swrite>:
 8012c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c36:	461f      	mov	r7, r3
 8012c38:	898b      	ldrh	r3, [r1, #12]
 8012c3a:	05db      	lsls	r3, r3, #23
 8012c3c:	4605      	mov	r5, r0
 8012c3e:	460c      	mov	r4, r1
 8012c40:	4616      	mov	r6, r2
 8012c42:	d505      	bpl.n	8012c50 <__swrite+0x1e>
 8012c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c48:	2302      	movs	r3, #2
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	f000 f868 	bl	8012d20 <_lseek_r>
 8012c50:	89a3      	ldrh	r3, [r4, #12]
 8012c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c5a:	81a3      	strh	r3, [r4, #12]
 8012c5c:	4632      	mov	r2, r6
 8012c5e:	463b      	mov	r3, r7
 8012c60:	4628      	mov	r0, r5
 8012c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c66:	f000 b817 	b.w	8012c98 <_write_r>

08012c6a <__sseek>:
 8012c6a:	b510      	push	{r4, lr}
 8012c6c:	460c      	mov	r4, r1
 8012c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c72:	f000 f855 	bl	8012d20 <_lseek_r>
 8012c76:	1c43      	adds	r3, r0, #1
 8012c78:	89a3      	ldrh	r3, [r4, #12]
 8012c7a:	bf15      	itete	ne
 8012c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c86:	81a3      	strheq	r3, [r4, #12]
 8012c88:	bf18      	it	ne
 8012c8a:	81a3      	strhne	r3, [r4, #12]
 8012c8c:	bd10      	pop	{r4, pc}

08012c8e <__sclose>:
 8012c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c92:	f000 b813 	b.w	8012cbc <_close_r>
	...

08012c98 <_write_r>:
 8012c98:	b538      	push	{r3, r4, r5, lr}
 8012c9a:	4d07      	ldr	r5, [pc, #28]	; (8012cb8 <_write_r+0x20>)
 8012c9c:	4604      	mov	r4, r0
 8012c9e:	4608      	mov	r0, r1
 8012ca0:	4611      	mov	r1, r2
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	602a      	str	r2, [r5, #0]
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	f7f0 f87f 	bl	8002daa <_write>
 8012cac:	1c43      	adds	r3, r0, #1
 8012cae:	d102      	bne.n	8012cb6 <_write_r+0x1e>
 8012cb0:	682b      	ldr	r3, [r5, #0]
 8012cb2:	b103      	cbz	r3, 8012cb6 <_write_r+0x1e>
 8012cb4:	6023      	str	r3, [r4, #0]
 8012cb6:	bd38      	pop	{r3, r4, r5, pc}
 8012cb8:	200096dc 	.word	0x200096dc

08012cbc <_close_r>:
 8012cbc:	b538      	push	{r3, r4, r5, lr}
 8012cbe:	4d06      	ldr	r5, [pc, #24]	; (8012cd8 <_close_r+0x1c>)
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	4608      	mov	r0, r1
 8012cc6:	602b      	str	r3, [r5, #0]
 8012cc8:	f7f0 f88b 	bl	8002de2 <_close>
 8012ccc:	1c43      	adds	r3, r0, #1
 8012cce:	d102      	bne.n	8012cd6 <_close_r+0x1a>
 8012cd0:	682b      	ldr	r3, [r5, #0]
 8012cd2:	b103      	cbz	r3, 8012cd6 <_close_r+0x1a>
 8012cd4:	6023      	str	r3, [r4, #0]
 8012cd6:	bd38      	pop	{r3, r4, r5, pc}
 8012cd8:	200096dc 	.word	0x200096dc

08012cdc <_fstat_r>:
 8012cdc:	b538      	push	{r3, r4, r5, lr}
 8012cde:	4d07      	ldr	r5, [pc, #28]	; (8012cfc <_fstat_r+0x20>)
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	4608      	mov	r0, r1
 8012ce6:	4611      	mov	r1, r2
 8012ce8:	602b      	str	r3, [r5, #0]
 8012cea:	f7f0 f886 	bl	8002dfa <_fstat>
 8012cee:	1c43      	adds	r3, r0, #1
 8012cf0:	d102      	bne.n	8012cf8 <_fstat_r+0x1c>
 8012cf2:	682b      	ldr	r3, [r5, #0]
 8012cf4:	b103      	cbz	r3, 8012cf8 <_fstat_r+0x1c>
 8012cf6:	6023      	str	r3, [r4, #0]
 8012cf8:	bd38      	pop	{r3, r4, r5, pc}
 8012cfa:	bf00      	nop
 8012cfc:	200096dc 	.word	0x200096dc

08012d00 <_isatty_r>:
 8012d00:	b538      	push	{r3, r4, r5, lr}
 8012d02:	4d06      	ldr	r5, [pc, #24]	; (8012d1c <_isatty_r+0x1c>)
 8012d04:	2300      	movs	r3, #0
 8012d06:	4604      	mov	r4, r0
 8012d08:	4608      	mov	r0, r1
 8012d0a:	602b      	str	r3, [r5, #0]
 8012d0c:	f7f0 f885 	bl	8002e1a <_isatty>
 8012d10:	1c43      	adds	r3, r0, #1
 8012d12:	d102      	bne.n	8012d1a <_isatty_r+0x1a>
 8012d14:	682b      	ldr	r3, [r5, #0]
 8012d16:	b103      	cbz	r3, 8012d1a <_isatty_r+0x1a>
 8012d18:	6023      	str	r3, [r4, #0]
 8012d1a:	bd38      	pop	{r3, r4, r5, pc}
 8012d1c:	200096dc 	.word	0x200096dc

08012d20 <_lseek_r>:
 8012d20:	b538      	push	{r3, r4, r5, lr}
 8012d22:	4d07      	ldr	r5, [pc, #28]	; (8012d40 <_lseek_r+0x20>)
 8012d24:	4604      	mov	r4, r0
 8012d26:	4608      	mov	r0, r1
 8012d28:	4611      	mov	r1, r2
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	602a      	str	r2, [r5, #0]
 8012d2e:	461a      	mov	r2, r3
 8012d30:	f7f0 f87e 	bl	8002e30 <_lseek>
 8012d34:	1c43      	adds	r3, r0, #1
 8012d36:	d102      	bne.n	8012d3e <_lseek_r+0x1e>
 8012d38:	682b      	ldr	r3, [r5, #0]
 8012d3a:	b103      	cbz	r3, 8012d3e <_lseek_r+0x1e>
 8012d3c:	6023      	str	r3, [r4, #0]
 8012d3e:	bd38      	pop	{r3, r4, r5, pc}
 8012d40:	200096dc 	.word	0x200096dc

08012d44 <_read_r>:
 8012d44:	b538      	push	{r3, r4, r5, lr}
 8012d46:	4d07      	ldr	r5, [pc, #28]	; (8012d64 <_read_r+0x20>)
 8012d48:	4604      	mov	r4, r0
 8012d4a:	4608      	mov	r0, r1
 8012d4c:	4611      	mov	r1, r2
 8012d4e:	2200      	movs	r2, #0
 8012d50:	602a      	str	r2, [r5, #0]
 8012d52:	461a      	mov	r2, r3
 8012d54:	f7f0 f80c 	bl	8002d70 <_read>
 8012d58:	1c43      	adds	r3, r0, #1
 8012d5a:	d102      	bne.n	8012d62 <_read_r+0x1e>
 8012d5c:	682b      	ldr	r3, [r5, #0]
 8012d5e:	b103      	cbz	r3, 8012d62 <_read_r+0x1e>
 8012d60:	6023      	str	r3, [r4, #0]
 8012d62:	bd38      	pop	{r3, r4, r5, pc}
 8012d64:	200096dc 	.word	0x200096dc

08012d68 <_init>:
 8012d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d6a:	bf00      	nop
 8012d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d6e:	bc08      	pop	{r3}
 8012d70:	469e      	mov	lr, r3
 8012d72:	4770      	bx	lr

08012d74 <_fini>:
 8012d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d76:	bf00      	nop
 8012d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d7a:	bc08      	pop	{r3}
 8012d7c:	469e      	mov	lr, r3
 8012d7e:	4770      	bx	lr
