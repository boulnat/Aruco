
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800d850  0800d850  0001d850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd8c  0800dd8c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd8c  0800dd8c  0001dd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd94  0800dd94  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd94  0800dd94  0001dd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd98  0800dd98  0001dd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800dd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000086a8  200001e4  0800df80  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000888c  0800df80  0002888c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be13  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f5b  00000000  00000000  0004c027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  00050f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f00  00000000  00000000  00053060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ca3  00000000  00000000  00054f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c7a  00000000  00000000  0007bc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec311  00000000  00000000  0009e87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018ab8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d6c  00000000  00000000  0018abe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d838 	.word	0x0800d838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800d838 	.word	0x0800d838

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <AS7341begin>:
 *    @brief  Sets up the hardware and initializes I2C
 *    @param  i2c_address
 *            The I2C address to be used.
 *    @return True if initialization was successful, otherwise false.
 */
bool AS7341begin(I2C_HandleTypeDef hi2c1){
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	f107 0c08 	add.w	ip, r7, #8
 8000eaa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c = hi2c1;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <AS7341begin+0x2c>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	224c      	movs	r2, #76	; 0x4c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f009 fe21 	bl	800ab00 <memcpy>
	return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec8:	b004      	add	sp, #16
 8000eca:	4770      	bx	lr
 8000ecc:	2000845c 	.word	0x2000845c

08000ed0 <setASTEP>:

bool setASTEP(uint8_t astep_value) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {AS7341_ASTEP_L, astep_value};
 8000eda:	23ca      	movs	r3, #202	; 0xca
 8000edc:	733b      	strb	r3, [r7, #12]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000ee2:	bf00      	nop
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	2172      	movs	r1, #114	; 0x72
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <setASTEP+0x84>)
 8000ef4:	f003 fe7e 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f2      	bne.n	8000ee4 <setASTEP+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000efe:	bf00      	nop
 8000f00:	23c8      	movs	r3, #200	; 0xc8
 8000f02:	220a      	movs	r2, #10
 8000f04:	2172      	movs	r1, #114	; 0x72
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <setASTEP+0x84>)
 8000f08:	f004 f85e 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f6      	bne.n	8000f00 <setASTEP+0x30>

	data[0] = AS7341_ASTEP_H;
 8000f12:	23cb      	movs	r3, #203	; 0xcb
 8000f14:	733b      	strb	r3, [r7, #12]
	data[1] = 0x03;
 8000f16:	2303      	movs	r3, #3
 8000f18:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000f1a:	bf00      	nop
 8000f1c:	f107 020c 	add.w	r2, r7, #12
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2302      	movs	r3, #2
 8000f28:	2172      	movs	r1, #114	; 0x72
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <setASTEP+0x84>)
 8000f2c:	f003 fe62 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f2      	bne.n	8000f1c <setASTEP+0x4c>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000f36:	bf00      	nop
 8000f38:	23c8      	movs	r3, #200	; 0xc8
 8000f3a:	220a      	movs	r2, #10
 8000f3c:	2172      	movs	r1, #114	; 0x72
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <setASTEP+0x84>)
 8000f40:	f004 f842 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f6      	bne.n	8000f38 <setASTEP+0x68>

	return 1;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000845c 	.word	0x2000845c

08000f58 <setATIME>:

bool setATIME(uint8_t atime_value) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {AS7341_ATIME, atime_value};
 8000f62:	2381      	movs	r3, #129	; 0x81
 8000f64:	733b      	strb	r3, [r7, #12]
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000f6a:	bf00      	nop
 8000f6c:	f107 020c 	add.w	r2, r7, #12
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2302      	movs	r3, #2
 8000f78:	2172      	movs	r1, #114	; 0x72
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <setATIME+0x4c>)
 8000f7c:	f003 fe3a 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f2      	bne.n	8000f6c <setATIME+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000f86:	bf00      	nop
 8000f88:	23c8      	movs	r3, #200	; 0xc8
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	2172      	movs	r1, #114	; 0x72
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <setATIME+0x4c>)
 8000f90:	f004 f81a 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f6      	bne.n	8000f88 <setATIME+0x30>

	return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000845c 	.word	0x2000845c

08000fa8 <setGain>:

bool setGain(as7341_gain_t gain_value) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {AS7341_CFG1, gain_value};
 8000fb2:	23aa      	movs	r3, #170	; 0xaa
 8000fb4:	733b      	strb	r3, [r7, #12]
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000fba:	bf00      	nop
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	2172      	movs	r1, #114	; 0x72
 8000fca:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <setGain+0x4c>)
 8000fcc:	f003 fe12 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f2      	bne.n	8000fbc <setGain+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000fd6:	bf00      	nop
 8000fd8:	23c8      	movs	r3, #200	; 0xc8
 8000fda:	220a      	movs	r2, #10
 8000fdc:	2172      	movs	r1, #114	; 0x72
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <setGain+0x4c>)
 8000fe0:	f003 fff2 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f6      	bne.n	8000fd8 <setGain+0x30>

	return 1;
 8000fea:	2301      	movs	r3, #1
  // AGAIN bitfield is only[0:4] but the rest is empty
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000845c 	.word	0x2000845c

08000ff8 <readAllChannels>:
	    break;
	  }
	  return raw / (gain_val * (getATIME() + 1) * (getASTEP() + 1) * 2.78 / 1000);
}

uint16_t readAllChannels(uint16_t *readings_buffer) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_CH0_DATA_L,0x02};
 8001000:	f240 2395 	movw	r3, #661	; 0x295
 8001004:	81bb      	strh	r3, [r7, #12]
	uint16_t buff = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	81fb      	strh	r3, [r7, #14]

    for(int i=0; i<12; i++){
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e007      	b.n	8001020 <readAllChannels+0x28>
        _channel_readings[i]=0;
 8001010:	4a62      	ldr	r2, [pc, #392]	; (800119c <readAllChannels+0x1a4>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2100      	movs	r1, #0
 8001016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0; i<12; i++){
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b0b      	cmp	r3, #11
 8001024:	ddf4      	ble.n	8001010 <readAllChannels+0x18>
    }

	setSMUXLowChannels(true);        // Configure SMUX to read low channels
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fb22 	bl	8001670 <setSMUXLowChannels>
  	enableSpectralMeasurement(true); // Start integration
 800102c:	2001      	movs	r0, #1
 800102e:	f000 f9af 	bl	8001390 <enableSpectralMeasurement>
  	delayForData(0);                 // I'll wait for you for all time
 8001032:	2000      	movs	r0, #0
 8001034:	f000 f8b6 	bl	80011a4 <delayForData>

  	readings_buffer=_channel_readings;
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <readAllChannels+0x1a4>)
 800103a:	607b      	str	r3, [r7, #4]

  	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 800103c:	bf00      	nop
 800103e:	f107 020c 	add.w	r2, r7, #12
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2172      	movs	r1, #114	; 0x72
 800104c:	4854      	ldr	r0, [pc, #336]	; (80011a0 <readAllChannels+0x1a8>)
 800104e:	f003 fdd1 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f2      	bne.n	800103e <readAllChannels+0x46>
  	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001058:	bf00      	nop
 800105a:	23c8      	movs	r3, #200	; 0xc8
 800105c:	220a      	movs	r2, #10
 800105e:	2172      	movs	r1, #114	; 0x72
 8001060:	484f      	ldr	r0, [pc, #316]	; (80011a0 <readAllChannels+0x1a8>)
 8001062:	f003 ffb1 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f6      	bne.n	800105a <readAllChannels+0x62>

  	regwrite[0]=AS7341_CH0_DATA_L;
 800106c:	2395      	movs	r3, #149	; 0x95
 800106e:	733b      	strb	r3, [r7, #12]
  	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001070:	bf00      	nop
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2302      	movs	r3, #2
 800107e:	2172      	movs	r1, #114	; 0x72
 8001080:	4847      	ldr	r0, [pc, #284]	; (80011a0 <readAllChannels+0x1a8>)
 8001082:	f003 fdb7 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f2      	bne.n	8001072 <readAllChannels+0x7a>
  	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800108c:	bf00      	nop
 800108e:	23c8      	movs	r3, #200	; 0xc8
 8001090:	220a      	movs	r2, #10
 8001092:	2172      	movs	r1, #114	; 0x72
 8001094:	4842      	ldr	r0, [pc, #264]	; (80011a0 <readAllChannels+0x1a8>)
 8001096:	f003 ff97 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f6      	bne.n	800108e <readAllChannels+0x96>
  	while(HAL_I2C_Master_Receive(&hi2c, 0x72, (uint8_t *)readings_buffer, 12, HAL_MAX_DELAY)!= HAL_OK);
 80010a0:	bf00      	nop
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	230c      	movs	r3, #12
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	2172      	movs	r1, #114	; 0x72
 80010ae:	483c      	ldr	r0, [pc, #240]	; (80011a0 <readAllChannels+0x1a8>)
 80010b0:	f003 fe94 	bl	8004ddc <HAL_I2C_Master_Receive>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f3      	bne.n	80010a2 <readAllChannels+0xaa>


  setSMUXLowChannels(false);       // Configure SMUX to read high channels
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 fad8 	bl	8001670 <setSMUXLowChannels>
  enableSpectralMeasurement(true); // Start integration
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 f965 	bl	8001390 <enableSpectralMeasurement>
  delayForData(0);                 // I'll wait for you for all time
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f86c 	bl	80011a4 <delayForData>

  regwrite[0]=AS7341_CH0_DATA_L;
 80010cc:	2395      	movs	r3, #149	; 0x95
 80010ce:	733b      	strb	r3, [r7, #12]
  regwrite[1]=0x02;
 80010d0:	2302      	movs	r3, #2
 80010d2:	737b      	strb	r3, [r7, #13]
  while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 80010d4:	bf00      	nop
 80010d6:	f107 020c 	add.w	r2, r7, #12
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	2172      	movs	r1, #114	; 0x72
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <readAllChannels+0x1a8>)
 80010e6:	f003 fd85 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f2      	bne.n	80010d6 <readAllChannels+0xde>
  while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80010f0:	bf00      	nop
 80010f2:	23c8      	movs	r3, #200	; 0xc8
 80010f4:	220a      	movs	r2, #10
 80010f6:	2172      	movs	r1, #114	; 0x72
 80010f8:	4829      	ldr	r0, [pc, #164]	; (80011a0 <readAllChannels+0x1a8>)
 80010fa:	f003 ff65 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f6      	bne.n	80010f2 <readAllChannels+0xfa>

  regwrite[0]=AS7341_CH0_DATA_L;
 8001104:	2395      	movs	r3, #149	; 0x95
 8001106:	733b      	strb	r3, [r7, #12]
  while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001108:	bf00      	nop
 800110a:	f107 020c 	add.w	r2, r7, #12
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2302      	movs	r3, #2
 8001116:	2172      	movs	r1, #114	; 0x72
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <readAllChannels+0x1a8>)
 800111a:	f003 fd6b 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f2      	bne.n	800110a <readAllChannels+0x112>
  while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001124:	bf00      	nop
 8001126:	23c8      	movs	r3, #200	; 0xc8
 8001128:	220a      	movs	r2, #10
 800112a:	2172      	movs	r1, #114	; 0x72
 800112c:	481c      	ldr	r0, [pc, #112]	; (80011a0 <readAllChannels+0x1a8>)
 800112e:	f003 ff4b 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f6      	bne.n	8001126 <readAllChannels+0x12e>
  while(HAL_I2C_Master_Receive(&hi2c, 0x72, (uint8_t *)&readings_buffer[6], 12, HAL_MAX_DELAY)!= HAL_OK);
 8001138:	bf00      	nop
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f103 020c 	add.w	r2, r3, #12
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	230c      	movs	r3, #12
 8001148:	2172      	movs	r1, #114	; 0x72
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <readAllChannels+0x1a8>)
 800114c:	f003 fe46 	bl	8004ddc <HAL_I2C_Master_Receive>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f1      	bne.n	800113a <readAllChannels+0x142>

	//swap MSB and LSB

  for(int i=0; i<12; i++){
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	e017      	b.n	800118c <readAllChannels+0x194>
	  buff = ((_channel_readings[i] & 0x00FF) << 8) | (_channel_readings[i]>>8);
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <readAllChannels+0x1a4>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <readAllChannels+0x1a4>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29b      	uxth	r3, r3
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21b      	sxth	r3, r3
 800117a:	81fb      	strh	r3, [r7, #14]
	  _channel_readings[i] = buff;
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <readAllChannels+0x1a4>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	89fa      	ldrh	r2, [r7, #14]
 8001182:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(int i=0; i<12; i++){
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	3301      	adds	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b0b      	cmp	r3, #11
 8001190:	dde4      	ble.n	800115c <readAllChannels+0x164>
  }

  return 1;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20008444 	.word	0x20008444
 80011a0:	2000845c 	.word	0x2000845c

080011a4 <delayForData>:

void delayForData(int waitTime) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_STATUS2};
 80011ac:	23a3      	movs	r3, #163	; 0xa3
 80011ae:	733b      	strb	r3, [r7, #12]
	uint8_t regRead[1]={0};
 80011b0:	2300      	movs	r3, #0
 80011b2:	723b      	strb	r3, [r7, #8]

	while(regRead[0]!=0x40){
 80011b4:	e028      	b.n	8001208 <delayForData+0x64>
		osDelay(100);
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	f007 f8fe 	bl	80083b8 <osDelay>
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80011bc:	bf00      	nop
 80011be:	f107 020c 	add.w	r2, r7, #12
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2172      	movs	r1, #114	; 0x72
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <delayForData+0x74>)
 80011ce:	f003 fd11 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f2      	bne.n	80011be <delayForData+0x1a>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80011d8:	bf00      	nop
 80011da:	23c8      	movs	r3, #200	; 0xc8
 80011dc:	220a      	movs	r2, #10
 80011de:	2172      	movs	r1, #114	; 0x72
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <delayForData+0x74>)
 80011e2:	f003 fef1 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f6      	bne.n	80011da <delayForData+0x36>
		while(HAL_I2C_Master_Receive(&hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 80011ec:	bf00      	nop
 80011ee:	f107 0208 	add.w	r2, r7, #8
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	2172      	movs	r1, #114	; 0x72
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <delayForData+0x74>)
 80011fe:	f003 fded 	bl	8004ddc <HAL_I2C_Master_Receive>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f2      	bne.n	80011ee <delayForData+0x4a>
	while(regRead[0]!=0x40){
 8001208:	7a3b      	ldrb	r3, [r7, #8]
 800120a:	2b40      	cmp	r3, #64	; 0x40
 800120c:	d1d3      	bne.n	80011b6 <delayForData+0x12>
		//sprintf(msg, "delayForData = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000845c 	.word	0x2000845c

0800121c <getChannel>:
	read16bits = ((read[0] & 0x00FF) << 8) | read[0]>>8;
	return read16bits;

}

uint16_t getChannel(as7341_color_channel_t channel) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  return _channel_readings[channel];
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <getChannel+0x20>)
 800122a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20008444 	.word	0x20008444

08001240 <setup_F1F4_Clear_NIR>:
	  default:
	    return 0;
	  }
}

void setup_F1F4_Clear_NIR() {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  // SMUX Config for F1,F2,F3,F4,NIR,Clear
  writeRegister((0x00), (0x30)); // F3 left set to ADC2
 8001244:	2130      	movs	r1, #48	; 0x30
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f9e6 	bl	8001618 <writeRegister>
  writeRegister((0x01), (0x01)); // F1 left set to ADC0
 800124c:	2101      	movs	r1, #1
 800124e:	2001      	movs	r0, #1
 8001250:	f000 f9e2 	bl	8001618 <writeRegister>
  writeRegister((0x02), (0x00)); // Reserved or disabled
 8001254:	2100      	movs	r1, #0
 8001256:	2002      	movs	r0, #2
 8001258:	f000 f9de 	bl	8001618 <writeRegister>
  writeRegister((0x03), (0x00)); // F8 left disabled
 800125c:	2100      	movs	r1, #0
 800125e:	2003      	movs	r0, #3
 8001260:	f000 f9da 	bl	8001618 <writeRegister>
  writeRegister((0x04), (0x00)); // F6 left disabled
 8001264:	2100      	movs	r1, #0
 8001266:	2004      	movs	r0, #4
 8001268:	f000 f9d6 	bl	8001618 <writeRegister>
  writeRegister((0x05), (0x42)); // F4 left connected to ADC3/f2 left connected to ADC1
 800126c:	2142      	movs	r1, #66	; 0x42
 800126e:	2005      	movs	r0, #5
 8001270:	f000 f9d2 	bl	8001618 <writeRegister>
  writeRegister((0x06), (0x00)); // F5 left disbled
 8001274:	2100      	movs	r1, #0
 8001276:	2006      	movs	r0, #6
 8001278:	f000 f9ce 	bl	8001618 <writeRegister>
  writeRegister((0x07), (0x00)); // F7 left disbled
 800127c:	2100      	movs	r1, #0
 800127e:	2007      	movs	r0, #7
 8001280:	f000 f9ca 	bl	8001618 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR connected to ADC4
 8001284:	2150      	movs	r1, #80	; 0x50
 8001286:	2008      	movs	r0, #8
 8001288:	f000 f9c6 	bl	8001618 <writeRegister>
  writeRegister((0x09), (0x00)); // F5 right disabled
 800128c:	2100      	movs	r1, #0
 800128e:	2009      	movs	r0, #9
 8001290:	f000 f9c2 	bl	8001618 <writeRegister>
  writeRegister((0x0A), (0x00)); // F7 right disabled
 8001294:	2100      	movs	r1, #0
 8001296:	200a      	movs	r0, #10
 8001298:	f000 f9be 	bl	8001618 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 800129c:	2100      	movs	r1, #0
 800129e:	200b      	movs	r0, #11
 80012a0:	f000 f9ba 	bl	8001618 <writeRegister>
  writeRegister((0x0C), (0x20)); // F2 right connected to ADC1
 80012a4:	2120      	movs	r1, #32
 80012a6:	200c      	movs	r0, #12
 80012a8:	f000 f9b6 	bl	8001618 <writeRegister>
  writeRegister((0x0D), (0x04)); // F4 right connected to ADC3
 80012ac:	2104      	movs	r1, #4
 80012ae:	200d      	movs	r0, #13
 80012b0:	f000 f9b2 	bl	8001618 <writeRegister>
  writeRegister((0x0E), (0x00)); // F6/F8 right disabled
 80012b4:	2100      	movs	r1, #0
 80012b6:	200e      	movs	r0, #14
 80012b8:	f000 f9ae 	bl	8001618 <writeRegister>
  writeRegister((0x0F), (0x30)); // F3 right connected to AD2
 80012bc:	2130      	movs	r1, #48	; 0x30
 80012be:	200f      	movs	r0, #15
 80012c0:	f000 f9aa 	bl	8001618 <writeRegister>
  writeRegister((0x10), (0x01)); // F1 right connected to AD0
 80012c4:	2101      	movs	r1, #1
 80012c6:	2010      	movs	r0, #16
 80012c8:	f000 f9a6 	bl	8001618 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 80012cc:	2150      	movs	r1, #80	; 0x50
 80012ce:	2011      	movs	r0, #17
 80012d0:	f000 f9a2 	bl	8001618 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 80012d4:	2100      	movs	r1, #0
 80012d6:	2012      	movs	r0, #18
 80012d8:	f000 f99e 	bl	8001618 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 80012dc:	2106      	movs	r1, #6
 80012de:	2013      	movs	r0, #19
 80012e0:	f000 f99a 	bl	8001618 <writeRegister>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <setup_F5F8_Clear_NIR>:

void setup_F5F8_Clear_NIR() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  // SMUX Config for F5,F6,F7,F8,NIR,Clear
  writeRegister((0x00), (0x00)); // F3 left disable
 80012ec:	2100      	movs	r1, #0
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f992 	bl	8001618 <writeRegister>
  writeRegister((0x01), (0x00)); // F1 left disable
 80012f4:	2100      	movs	r1, #0
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 f98e 	bl	8001618 <writeRegister>
  writeRegister((0x02), (0x00)); // reserved/disable
 80012fc:	2100      	movs	r1, #0
 80012fe:	2002      	movs	r0, #2
 8001300:	f000 f98a 	bl	8001618 <writeRegister>
  writeRegister((0x03), (0x40)); // F8 left connected to ADC3
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	2003      	movs	r0, #3
 8001308:	f000 f986 	bl	8001618 <writeRegister>
  writeRegister((0x04), (0x02)); // F6 left connected to ADC1
 800130c:	2102      	movs	r1, #2
 800130e:	2004      	movs	r0, #4
 8001310:	f000 f982 	bl	8001618 <writeRegister>
  writeRegister((0x05), (0x00)); // F4/ F2 disabled
 8001314:	2100      	movs	r1, #0
 8001316:	2005      	movs	r0, #5
 8001318:	f000 f97e 	bl	8001618 <writeRegister>
  writeRegister((0x06), (0x10)); // F5 left connected to ADC0
 800131c:	2110      	movs	r1, #16
 800131e:	2006      	movs	r0, #6
 8001320:	f000 f97a 	bl	8001618 <writeRegister>
  writeRegister((0x07), (0x03)); // F7 left connected to ADC2
 8001324:	2103      	movs	r1, #3
 8001326:	2007      	movs	r0, #7
 8001328:	f000 f976 	bl	8001618 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR Connected to ADC4
 800132c:	2150      	movs	r1, #80	; 0x50
 800132e:	2008      	movs	r0, #8
 8001330:	f000 f972 	bl	8001618 <writeRegister>
  writeRegister((0x09), (0x10)); // F5 right connected to ADC0
 8001334:	2110      	movs	r1, #16
 8001336:	2009      	movs	r0, #9
 8001338:	f000 f96e 	bl	8001618 <writeRegister>
  writeRegister((0x0A), (0x03)); // F7 right connected to ADC2
 800133c:	2103      	movs	r1, #3
 800133e:	200a      	movs	r0, #10
 8001340:	f000 f96a 	bl	8001618 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 8001344:	2100      	movs	r1, #0
 8001346:	200b      	movs	r0, #11
 8001348:	f000 f966 	bl	8001618 <writeRegister>
  writeRegister((0x0C), (0x00)); // F2 right disabled
 800134c:	2100      	movs	r1, #0
 800134e:	200c      	movs	r0, #12
 8001350:	f000 f962 	bl	8001618 <writeRegister>
  writeRegister((0x0D), (0x00)); // F4 right disabled
 8001354:	2100      	movs	r1, #0
 8001356:	200d      	movs	r0, #13
 8001358:	f000 f95e 	bl	8001618 <writeRegister>
  writeRegister((0x0E), (0x24)); // F8 right connected to ADC2/ F6 right connected to ADC1
 800135c:	2124      	movs	r1, #36	; 0x24
 800135e:	200e      	movs	r0, #14
 8001360:	f000 f95a 	bl	8001618 <writeRegister>
  writeRegister((0x0F), (0x00)); // F3 right disabled
 8001364:	2100      	movs	r1, #0
 8001366:	200f      	movs	r0, #15
 8001368:	f000 f956 	bl	8001618 <writeRegister>
  writeRegister((0x10), (0x00)); // F1 right disabled
 800136c:	2100      	movs	r1, #0
 800136e:	2010      	movs	r0, #16
 8001370:	f000 f952 	bl	8001618 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 8001374:	2150      	movs	r1, #80	; 0x50
 8001376:	2011      	movs	r0, #17
 8001378:	f000 f94e 	bl	8001618 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 800137c:	2100      	movs	r1, #0
 800137e:	2012      	movs	r0, #18
 8001380:	f000 f94a 	bl	8001618 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 8001384:	2106      	movs	r1, #6
 8001386:	2013      	movs	r0, #19
 8001388:	f000 f946 	bl	8001618 <writeRegister>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <enableSpectralMeasurement>:
	uint8_t regWrite[]={AS7341_ENABLE,0x01}; //PON to 1
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
}

bool enableSpectralMeasurement(bool enable_measurement) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_ENABLE,0x01};
 800139a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800139e:	81bb      	strh	r3, [r7, #12]
	//uint8_t regRead[1]={0};

	if(enable_measurement==0){
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f083 0301 	eor.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01a      	beq.n	80013e2 <enableSpectralMeasurement+0x52>
		regwrite[1]=0x01;
 80013ac:	2301      	movs	r3, #1
 80013ae:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80013b0:	bf00      	nop
 80013b2:	f107 020c 	add.w	r2, r7, #12
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2302      	movs	r3, #2
 80013be:	2172      	movs	r1, #114	; 0x72
 80013c0:	4817      	ldr	r0, [pc, #92]	; (8001420 <enableSpectralMeasurement+0x90>)
 80013c2:	f003 fc17 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f2      	bne.n	80013b2 <enableSpectralMeasurement+0x22>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80013cc:	bf00      	nop
 80013ce:	23c8      	movs	r3, #200	; 0xc8
 80013d0:	220a      	movs	r2, #10
 80013d2:	2172      	movs	r1, #114	; 0x72
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <enableSpectralMeasurement+0x90>)
 80013d6:	f003 fdf7 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f6      	bne.n	80013ce <enableSpectralMeasurement+0x3e>
 80013e0:	e019      	b.n	8001416 <enableSpectralMeasurement+0x86>
	}
	else{
		regwrite[1]=0x03;
 80013e2:	2303      	movs	r3, #3
 80013e4:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80013e6:	bf00      	nop
 80013e8:	f107 020c 	add.w	r2, r7, #12
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2302      	movs	r3, #2
 80013f4:	2172      	movs	r1, #114	; 0x72
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <enableSpectralMeasurement+0x90>)
 80013f8:	f003 fbfc 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f2      	bne.n	80013e8 <enableSpectralMeasurement+0x58>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001402:	bf00      	nop
 8001404:	23c8      	movs	r3, #200	; 0xc8
 8001406:	220a      	movs	r2, #10
 8001408:	2172      	movs	r1, #114	; 0x72
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <enableSpectralMeasurement+0x90>)
 800140c:	f003 fddc 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f6      	bne.n	8001404 <enableSpectralMeasurement+0x74>
	}
  return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000845c 	.word	0x2000845c

08001424 <AS7341init>:

/*!  @brief Initializer for post i2c/spi init
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool AS7341init(int32_t sensor_id){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af02      	add	r7, sp, #8
 800142a:	6078      	str	r0, [r7, #4]
    //POWER enable true
    uint8_t regWrite[]={AS7341_ENABLE,0x01}; //PON to 1
 800142c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001430:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
 8001432:	bf00      	nop
 8001434:	f107 020c 	add.w	r2, r7, #12
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2302      	movs	r3, #2
 8001440:	2172      	movs	r1, #114	; 0x72
 8001442:	480a      	ldr	r0, [pc, #40]	; (800146c <AS7341init+0x48>)
 8001444:	f003 fbd6 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f2      	bne.n	8001434 <AS7341init+0x10>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800144e:	bf00      	nop
 8001450:	23c8      	movs	r3, #200	; 0xc8
 8001452:	220a      	movs	r2, #10
 8001454:	2172      	movs	r1, #114	; 0x72
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <AS7341init+0x48>)
 8001458:	f003 fdb6 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f6      	bne.n	8001450 <AS7341init+0x2c>
	return 1;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000845c 	.word	0x2000845c

08001470 <enableSMUX>:

bool enableSMUX() {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af02      	add	r7, sp, #8
	uint8_t regwrite[]={AS7341_ENABLE,0x19};
 8001476:	f44f 53cc 	mov.w	r3, #6528	; 0x1980
 800147a:	80bb      	strh	r3, [r7, #4]
	uint8_t regRead[1]={0};
 800147c:	2300      	movs	r3, #0
 800147e:	703b      	strb	r3, [r7, #0]

	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001480:	bf00      	nop
 8001482:	1d3a      	adds	r2, r7, #4
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2302      	movs	r3, #2
 800148c:	2172      	movs	r1, #114	; 0x72
 800148e:	4820      	ldr	r0, [pc, #128]	; (8001510 <enableSMUX+0xa0>)
 8001490:	f003 fbb0 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f3      	bne.n	8001482 <enableSMUX+0x12>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800149a:	bf00      	nop
 800149c:	23c8      	movs	r3, #200	; 0xc8
 800149e:	220a      	movs	r2, #10
 80014a0:	2172      	movs	r1, #114	; 0x72
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <enableSMUX+0xa0>)
 80014a4:	f003 fd90 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f6      	bne.n	800149c <enableSMUX+0x2c>


	regwrite[0]=AS7341_ENABLE;//0xA9 to AS7341_ENABLE
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	713b      	strb	r3, [r7, #4]
	regRead[0]=0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	703b      	strb	r3, [r7, #0]
	while(regRead[0]==0){
 80014b6:	e023      	b.n	8001500 <enableSMUX+0x90>
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 80014b8:	bf00      	nop
 80014ba:	1d3a      	adds	r2, r7, #4
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	2172      	movs	r1, #114	; 0x72
 80014c6:	4812      	ldr	r0, [pc, #72]	; (8001510 <enableSMUX+0xa0>)
 80014c8:	f003 fb94 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f3      	bne.n	80014ba <enableSMUX+0x4a>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80014d2:	bf00      	nop
 80014d4:	23c8      	movs	r3, #200	; 0xc8
 80014d6:	220a      	movs	r2, #10
 80014d8:	2172      	movs	r1, #114	; 0x72
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <enableSMUX+0xa0>)
 80014dc:	f003 fd74 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f6      	bne.n	80014d4 <enableSMUX+0x64>
		while(HAL_I2C_Master_Receive(&hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 80014e6:	bf00      	nop
 80014e8:	463a      	mov	r2, r7
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	2172      	movs	r1, #114	; 0x72
 80014f4:	4806      	ldr	r0, [pc, #24]	; (8001510 <enableSMUX+0xa0>)
 80014f6:	f003 fc71 	bl	8004ddc <HAL_I2C_Master_Receive>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f3      	bne.n	80014e8 <enableSMUX+0x78>
	while(regRead[0]==0){
 8001500:	783b      	ldrb	r3, [r7, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0d8      	beq.n	80014b8 <enableSMUX+0x48>

		//sprintf(msg, "enableSMUX = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}

    return 1;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000845c 	.word	0x2000845c

08001514 <enableFlickerDetection>:

bool enableFlickerDetection(bool enable_fd){
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af02      	add	r7, sp, #8
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	uint8_t regWrite[]={AS7341_ENABLE,0x40}; //PON to 1
 800151e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001522:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
 8001524:	bf00      	nop
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2302      	movs	r3, #2
 8001532:	2172      	movs	r1, #114	; 0x72
 8001534:	480a      	ldr	r0, [pc, #40]	; (8001560 <enableFlickerDetection+0x4c>)
 8001536:	f003 fb5d 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f2      	bne.n	8001526 <enableFlickerDetection+0x12>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001540:	bf00      	nop
 8001542:	23c8      	movs	r3, #200	; 0xc8
 8001544:	220a      	movs	r2, #10
 8001546:	2172      	movs	r1, #114	; 0x72
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <enableFlickerDetection+0x4c>)
 800154a:	f003 fd3d 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f6      	bne.n	8001542 <enableFlickerDetection+0x2e>
	return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000845c 	.word	0x2000845c

08001564 <getFlickerDetectStatus>:
/**
 * @brief Returns the flicker detection status
 *
 * @return int8_t
 */
int8_t getFlickerDetectStatus(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af02      	add	r7, sp, #8
	uint8_t read[1];
	uint8_t regCh[] = {AS7341_FD_STATUS};
 800156a:	23db      	movs	r3, #219	; 0xdb
 800156c:	703b      	strb	r3, [r7, #0]

	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regCh, 2, HAL_MAX_DELAY) != HAL_OK);
 800156e:	bf00      	nop
 8001570:	463a      	mov	r2, r7
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2302      	movs	r3, #2
 800157a:	2172      	movs	r1, #114	; 0x72
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <getFlickerDetectStatus+0x60>)
 800157e:	f003 fb39 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f3      	bne.n	8001570 <getFlickerDetectStatus+0xc>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001588:	bf00      	nop
 800158a:	23c8      	movs	r3, #200	; 0xc8
 800158c:	220a      	movs	r2, #10
 800158e:	2172      	movs	r1, #114	; 0x72
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <getFlickerDetectStatus+0x60>)
 8001592:	f003 fd19 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f6      	bne.n	800158a <getFlickerDetectStatus+0x26>
	while(HAL_I2C_Master_Receive(&hi2c, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 800159c:	bf00      	nop
 800159e:	1d3a      	adds	r2, r7, #4
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	2172      	movs	r1, #114	; 0x72
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <getFlickerDetectStatus+0x60>)
 80015ac:	f003 fc16 	bl	8004ddc <HAL_I2C_Master_Receive>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f3      	bne.n	800159e <getFlickerDetectStatus+0x3a>

	return read[0];
 80015b6:	793b      	ldrb	r3, [r7, #4]
 80015b8:	b25b      	sxtb	r3, r3
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000845c 	.word	0x2000845c

080015c8 <setSMUXCommand>:

bool setSMUXCommand(as7341_smux_cmd_t command) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_CFG6,0x10}; //should be command << to something
 80015d2:	f241 03af 	movw	r3, #4271	; 0x10af
 80015d6:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80015d8:	bf00      	nop
 80015da:	f107 020c 	add.w	r2, r7, #12
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2302      	movs	r3, #2
 80015e6:	2172      	movs	r1, #114	; 0x72
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <setSMUXCommand+0x4c>)
 80015ea:	f003 fb03 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f2      	bne.n	80015da <setSMUXCommand+0x12>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80015f4:	bf00      	nop
 80015f6:	23c8      	movs	r3, #200	; 0xc8
 80015f8:	220a      	movs	r2, #10
 80015fa:	2172      	movs	r1, #114	; 0x72
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <setSMUXCommand+0x4c>)
 80015fe:	f003 fce3 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f6      	bne.n	80015f6 <setSMUXCommand+0x2e>
	return 1;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000845c 	.word	0x2000845c

08001618 <writeRegister>:

void writeRegister(uint8_t addr, uint8_t val) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af02      	add	r7, sp, #8
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {addr, val};
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	733b      	strb	r3, [r7, #12]
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8001630:	bf00      	nop
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2302      	movs	r3, #2
 800163e:	2172      	movs	r1, #114	; 0x72
 8001640:	480a      	ldr	r0, [pc, #40]	; (800166c <writeRegister+0x54>)
 8001642:	f003 fad7 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f2      	bne.n	8001632 <writeRegister+0x1a>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800164c:	bf00      	nop
 800164e:	23c8      	movs	r3, #200	; 0xc8
 8001650:	220a      	movs	r2, #10
 8001652:	2172      	movs	r1, #114	; 0x72
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <writeRegister+0x54>)
 8001656:	f003 fcb7 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f6      	bne.n	800164e <writeRegister+0x36>

}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000845c 	.word	0x2000845c

08001670 <setSMUXLowChannels>:


void setSMUXLowChannels(bool f1_f4) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  enableSpectralMeasurement(false);
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fe88 	bl	8001390 <enableSpectralMeasurement>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
 8001680:	2002      	movs	r0, #2
 8001682:	f7ff ffa1 	bl	80015c8 <setSMUXCommand>
  if (f1_f4) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <setSMUXLowChannels+0x22>
    setup_F1F4_Clear_NIR();
 800168c:	f7ff fdd8 	bl	8001240 <setup_F1F4_Clear_NIR>
 8001690:	e001      	b.n	8001696 <setSMUXLowChannels+0x26>
  } else {
    setup_F5F8_Clear_NIR();
 8001692:	f7ff fe29 	bl	80012e8 <setup_F5F8_Clear_NIR>
  }
  enableSMUX(&hi2c);
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <setSMUXLowChannels+0x34>)
 8001698:	f7ff feea 	bl	8001470 <enableSMUX>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000845c 	.word	0x2000845c

080016a8 <getThermocoupleTemp>:
}

/*----------------------------- Sensor Measurements ---------------------*/

uint8_t getThermocoupleTemp(bool units)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  int16_t raw = readDoubleRegister(HOT_JUNC_TEMP);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f822 	bl	80016fc <readDoubleRegister>
 80016b8:	4603      	mov	r3, r0
 80016ba:	81fb      	strh	r3, [r7, #14]
  uint8_t LSB = raw & 0x00FF;
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	737b      	strb	r3, [r7, #13]
  uint8_t MSB = raw>>8;
 80016c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016c4:	121b      	asrs	r3, r3, #8
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	733b      	strb	r3, [r7, #12]

  if((MSB & 0x80) == 0x80){
 80016ca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da08      	bge.n	80016e4 <getThermocoupleTemp+0x3c>
	  return(((MSB*16)+(LSB/16))-4096);
 80016d2:	7b3b      	ldrb	r3, [r7, #12]
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	7b7b      	ldrb	r3, [r7, #13]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4413      	add	r3, r2
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	e007      	b.n	80016f4 <getThermocoupleTemp+0x4c>
  }
  else{
	  return(((MSB*16)+(LSB/16)));
 80016e4:	7b3b      	ldrb	r3, [r7, #12]
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	b2db      	uxtb	r3, r3
  }
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <readDoubleRegister>:
  return read8bits;

}

uint16_t readDoubleRegister(MCP9600_Register reg)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  //Attempt to read the register until we exit with no error code
  //This attempts to fix the bug where clock stretching sometimes failes, as
  //described in the MCP9600 eratta
	uint8_t read[2]={0,0};
 8001706:	2300      	movs	r3, #0
 8001708:	81bb      	strh	r3, [r7, #12]
	uint16_t read16bits = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	81fb      	strh	r3, [r7, #14]

	while(HAL_I2C_Master_Transmit(&hi2c, 0xCE, &reg, 1, HAL_MAX_DELAY) != HAL_OK);
 800170e:	bf00      	nop
 8001710:	1dfa      	adds	r2, r7, #7
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	21ce      	movs	r1, #206	; 0xce
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <readDoubleRegister+0x78>)
 800171e:	f003 fa69 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f3      	bne.n	8001710 <readDoubleRegister+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0xCE,10,200)!=HAL_OK);
 8001728:	bf00      	nop
 800172a:	23c8      	movs	r3, #200	; 0xc8
 800172c:	220a      	movs	r2, #10
 800172e:	21ce      	movs	r1, #206	; 0xce
 8001730:	4810      	ldr	r0, [pc, #64]	; (8001774 <readDoubleRegister+0x78>)
 8001732:	f003 fc49 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f6      	bne.n	800172a <readDoubleRegister+0x2e>
	while(HAL_I2C_Master_Receive(&hi2c, 0XCF, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 800173c:	bf00      	nop
 800173e:	f107 020c 	add.w	r2, r7, #12
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2302      	movs	r3, #2
 800174a:	21cf      	movs	r1, #207	; 0xcf
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <readDoubleRegister+0x78>)
 800174e:	f003 fb45 	bl	8004ddc <HAL_I2C_Master_Receive>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f2      	bne.n	800173e <readDoubleRegister+0x42>
	read16bits = (read[0] << 8) | read[1];
 8001758:	7b3b      	ldrb	r3, [r7, #12]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	7b7b      	ldrb	r3, [r7, #13]
 8001760:	b21b      	sxth	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b21b      	sxth	r3, r3
 8001766:	81fb      	strh	r3, [r7, #14]
	return read16bits;
 8001768:	89fb      	ldrh	r3, [r7, #14]


}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000845c 	.word	0x2000845c

08001778 <PCA9685begin>:
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <PCA9685.h>

bool PCA9685begin(I2C_HandleTypeDef hi2c1, uint8_t prescale){
 8001778:	b084      	sub	sp, #16
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
 800177e:	f107 0c08 	add.w	ip, r7, #8
 8001782:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c3=hi2c1;
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <PCA9685begin+0x2c>)
 8001788:	4618      	mov	r0, r3
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	224c      	movs	r2, #76	; 0x4c
 8001790:	4619      	mov	r1, r3
 8001792:	f009 f9b5 	bl	800ab00 <memcpy>
}
 8001796:	bf00      	nop
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017a0:	b004      	add	sp, #16
 80017a2:	4770      	bx	lr
 80017a4:	200084a8 	.word	0x200084a8

080017a8 <pca9685_init>:
	//HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(uint8_t address)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]

 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 80017b2:	2303      	movs	r3, #3
 80017b4:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c3, address, PCA9685_MODE1, 1, 1);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	b299      	uxth	r1, r3
 80017ba:	2301      	movs	r3, #1
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2301      	movs	r3, #1
 80017c0:	2200      	movs	r2, #0
 80017c2:	4825      	ldr	r0, [pc, #148]	; (8001858 <pca9685_init+0xb0>)
 80017c4:	f003 fa16 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 uint8_t oldmode = 0x00; // hardcoded
 80017c8:	2300      	movs	r3, #0
 80017ca:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 80017cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017d0:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 80017de:	2300      	movs	r3, #0
 80017e0:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 80017e2:	7b7b      	ldrb	r3, [r7, #13]
 80017e4:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	b299      	uxth	r1, r3
 80017ea:	f107 0208 	add.w	r2, r7, #8
 80017ee:	2301      	movs	r3, #1
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2302      	movs	r3, #2
 80017f4:	4818      	ldr	r0, [pc, #96]	; (8001858 <pca9685_init+0xb0>)
 80017f6:	f003 f9fd 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	b299      	uxth	r1, r3
 8001802:	f107 0208 	add.w	r2, r7, #8
 8001806:	2301      	movs	r3, #1
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2302      	movs	r3, #2
 800180c:	4812      	ldr	r0, [pc, #72]	; (8001858 <pca9685_init+0xb0>)
 800180e:	f003 f9f1 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	b299      	uxth	r1, r3
 800181a:	f107 0208 	add.w	r2, r7, #8
 800181e:	2301      	movs	r3, #1
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2302      	movs	r3, #2
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <pca9685_init+0xb0>)
 8001826:	f003 f9e5 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 osDelay(5);
 800182a:	2005      	movs	r0, #5
 800182c:	f006 fdc4 	bl	80083b8 <osDelay>
 initStruct[1] = (oldmode | 0xA1);
 8001830:	7bbb      	ldrb	r3, [r7, #14]
 8001832:	f063 035e 	orn	r3, r3, #94	; 0x5e
 8001836:	b2db      	uxtb	r3, r3
 8001838:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	b299      	uxth	r1, r3
 800183e:	f107 0208 	add.w	r2, r7, #8
 8001842:	2301      	movs	r3, #1
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2302      	movs	r3, #2
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <pca9685_init+0xb0>)
 800184a:	f003 f9d3 	bl	8004bf4 <HAL_I2C_Master_Transmit>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200084a8 	.word	0x200084a8

0800185c <pca9685_mult_pwm>:
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
	HAL_I2C_Master_Transmit(&hi2c3, address, outputBuffer, sizeof(outputBuffer), 1);
}

void pca9685_mult_pwm(uint8_t address, uint16_t num, uint16_t on, uint16_t off)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b08b      	sub	sp, #44	; 0x2c
 8001860:	af02      	add	r7, sp, #8
 8001862:	4604      	mov	r4, r0
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4623      	mov	r3, r4
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	4603      	mov	r3, r0
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]
 8001876:	4613      	mov	r3, r2
 8001878:	803b      	strh	r3, [r7, #0]
	int i, iter;

	for (i=1, iter=1; i<65535; i<<=1, iter++)
 800187a:	2301      	movs	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	e047      	b.n	8001914 <pca9685_mult_pwm+0xb8>
	{
		if (num & i)
 8001884:	88ba      	ldrh	r2, [r7, #4]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d022      	beq.n	80018d4 <pca9685_mult_pwm+0x78>
		{
			uint8_t outputBuffer[] = {0x06 + 4*((iter)-1), on, (on >> 8), off, (off >> 8)};
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	3b01      	subs	r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	b2db      	uxtb	r3, r3
 8001898:	3306      	adds	r3, #6
 800189a:	b2db      	uxtb	r3, r3
 800189c:	743b      	strb	r3, [r7, #16]
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	747b      	strb	r3, [r7, #17]
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	74bb      	strb	r3, [r7, #18]
 80018ae:	883b      	ldrh	r3, [r7, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	74fb      	strb	r3, [r7, #19]
 80018b4:	883b      	ldrh	r3, [r7, #0]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	753b      	strb	r3, [r7, #20]
			HAL_I2C_Master_Transmit(&hi2c3, address, outputBuffer, sizeof(outputBuffer), 1);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	b299      	uxth	r1, r3
 80018c2:	f107 0210 	add.w	r2, r7, #16
 80018c6:	2301      	movs	r3, #1
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2305      	movs	r3, #5
 80018cc:	4816      	ldr	r0, [pc, #88]	; (8001928 <pca9685_mult_pwm+0xcc>)
 80018ce:	f003 f991 	bl	8004bf4 <HAL_I2C_Master_Transmit>
 80018d2:	e019      	b.n	8001908 <pca9685_mult_pwm+0xac>
		}
		else
		{
			uint8_t outputBuffer[] = {0x06 + 4*((iter)-1), 0, (0 >> 8), 4096, (4096 >> 8)};
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	3306      	adds	r3, #6
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	723b      	strb	r3, [r7, #8]
 80018e4:	2300      	movs	r3, #0
 80018e6:	727b      	strb	r3, [r7, #9]
 80018e8:	2300      	movs	r3, #0
 80018ea:	72bb      	strb	r3, [r7, #10]
 80018ec:	2300      	movs	r3, #0
 80018ee:	72fb      	strb	r3, [r7, #11]
 80018f0:	2310      	movs	r3, #16
 80018f2:	733b      	strb	r3, [r7, #12]
			HAL_I2C_Master_Transmit(&hi2c3, address, outputBuffer, sizeof(outputBuffer), 1);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	b299      	uxth	r1, r3
 80018f8:	f107 0208 	add.w	r2, r7, #8
 80018fc:	2301      	movs	r3, #1
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2305      	movs	r3, #5
 8001902:	4809      	ldr	r0, [pc, #36]	; (8001928 <pca9685_mult_pwm+0xcc>)
 8001904:	f003 f976 	bl	8004bf4 <HAL_I2C_Master_Transmit>
	for (i=1, iter=1; i<65535; i<<=1, iter++)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	3301      	adds	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800191a:	4293      	cmp	r3, r2
 800191c:	ddb2      	ble.n	8001884 <pca9685_mult_pwm+0x28>
	{
		uint8_t outputBuffer[] = {0x06 + 4*((num & 0b00000010)-1), on, (on >> 8), off, (off >> 8)};
		HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
	}
	*/
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	3724      	adds	r7, #36	; 0x24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd90      	pop	{r4, r7, pc}
 8001928:	200084a8 	.word	0x200084a8

0800192c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001930:	f001 f9c7 	bl	8002cc2 <HAL_Init>
  //uint8_t I2C_address = 0x80;
  //pca9685_init(&hi2c3, I2C_address);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001934:	f000 f898 	bl	8001a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001938:	f000 fbc8 	bl	80020cc <MX_GPIO_Init>
  MX_DMA_Init();
 800193c:	f000 fba0 	bl	8002080 <MX_DMA_Init>
  MX_I2C1_Init();
 8001940:	f000 f9c6 	bl	8001cd0 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001944:	f000 f98e 	bl	8001c64 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001948:	f000 fa3e 	bl	8001dc8 <MX_TIM1_Init>
  MX_ADC1_Init();
 800194c:	f000 f926 	bl	8001b9c <MX_ADC1_Init>
  MX_TIM15_Init();
 8001950:	f000 fae2 	bl	8001f18 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001954:	f000 fb64 	bl	8002020 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001958:	f000 f9f8 	bl	8001d4c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */


  sFilterConfig.FilterBank = 0;
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <main+0x10c>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <main+0x10c>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <main+0x10c>)
 800196a:	2201      	movs	r2, #1
 800196c:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x033<<5;
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <main+0x10c>)
 8001970:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 8001974:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <main+0x10c>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800197c:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <main+0x10c>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <main+0x10c>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <main+0x10c>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <main+0x10c>)
 8001990:	2201      	movs	r2, #1
 8001992:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <main+0x10c>)
 8001996:	220e      	movs	r2, #14
 8001998:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800199a:	4927      	ldr	r1, [pc, #156]	; (8001a38 <main+0x10c>)
 800199c:	4827      	ldr	r0, [pc, #156]	; (8001a3c <main+0x110>)
 800199e:	f002 f978 	bl	8003c92 <HAL_CAN_ConfigFilter>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <main+0x80>
  {
	  Error_Handler();
 80019a8:	f000 fd3a 	bl	8002420 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80019ac:	4823      	ldr	r0, [pc, #140]	; (8001a3c <main+0x110>)
 80019ae:	f002 fa3a 	bl	8003e26 <HAL_CAN_Start>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <main+0x90>
  {
	  /* Start Error */
	  Error_Handler();
 80019b8:	f000 fd32 	bl	8002420 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_OVERRUN) != HAL_OK)
 80019bc:	2108      	movs	r1, #8
 80019be:	481f      	ldr	r0, [pc, #124]	; (8001a3c <main+0x110>)
 80019c0:	f002 fa75 	bl	8003eae <HAL_CAN_ActivateNotification>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <main+0xa2>
  {

	  Error_Handler();
 80019ca:	f000 fd29 	bl	8002420 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80019ce:	2101      	movs	r1, #1
 80019d0:	481a      	ldr	r0, [pc, #104]	; (8001a3c <main+0x110>)
 80019d2:	f002 fa6c 	bl	8003eae <HAL_CAN_ActivateNotification>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <main+0xb4>
  {

	  Error_Handler();
 80019dc:	f000 fd20 	bl	8002420 <Error_Handler>
  }

  TxHeader.StdId = 0x07; //07
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <main+0x114>)
 80019e2:	2207      	movs	r2, #7
 80019e4:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId = 0x01; //delete
  TxHeader.RTR = CAN_RTR_DATA;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <main+0x114>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <main+0x114>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <main+0x114>)
 80019f4:	2208      	movs	r2, #8
 80019f6:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <main+0x114>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019fe:	f006 fbff 	bl	8008200 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <main+0x118>)
 8001a04:	2100      	movs	r1, #0
 8001a06:	4810      	ldr	r0, [pc, #64]	; (8001a48 <main+0x11c>)
 8001a08:	f006 fc44 	bl	8008294 <osThreadNew>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <main+0x120>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <main+0x124>)
 8001a14:	2100      	movs	r1, #0
 8001a16:	480f      	ldr	r0, [pc, #60]	; (8001a54 <main+0x128>)
 8001a18:	f006 fc3c 	bl	8008294 <osThreadNew>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <main+0x12c>)
 8001a20:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <main+0x130>)
 8001a24:	2100      	movs	r1, #0
 8001a26:	480e      	ldr	r0, [pc, #56]	; (8001a60 <main+0x134>)
 8001a28:	f006 fc34 	bl	8008294 <osThreadNew>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <main+0x138>)
 8001a30:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a32:	f006 fc09 	bl	8008248 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <main+0x10a>
 8001a38:	200084f4 	.word	0x200084f4
 8001a3c:	20008790 	.word	0x20008790
 8001a40:	200087b8 	.word	0x200087b8
 8001a44:	0800d8f8 	.word	0x0800d8f8
 8001a48:	0800212d 	.word	0x0800212d
 8001a4c:	2000851c 	.word	0x2000851c
 8001a50:	0800d91c 	.word	0x0800d91c
 8001a54:	080022d1 	.word	0x080022d1
 8001a58:	20008600 	.word	0x20008600
 8001a5c:	0800d940 	.word	0x0800d940
 8001a60:	08002321 	.word	0x08002321
 8001a64:	200086fc 	.word	0x200086fc

08001a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0ac      	sub	sp, #176	; 0xb0
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a72:	2244      	movs	r2, #68	; 0x44
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f009 f850 	bl	800ab1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2254      	movs	r2, #84	; 0x54
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f009 f842 	bl	800ab1c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a98:	f003 fe16 	bl	80056c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a9c:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <SystemClock_Config+0x130>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a3d      	ldr	r2, [pc, #244]	; (8001b98 <SystemClock_Config+0x130>)
 8001aa4:	f023 0318 	bic.w	r3, r3, #24
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001aac:	2314      	movs	r3, #20
 8001aae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001ac0:	2390      	movs	r3, #144	; 0x90
 8001ac2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001ad8:	2310      	movs	r3, #16
 8001ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001aea:	2306      	movs	r3, #6
 8001aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fe5b 	bl	80057b0 <HAL_RCC_OscConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b00:	f000 fc8e 	bl	8002420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b04:	230f      	movs	r3, #15
 8001b06:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001b0c:	23a0      	movs	r3, #160	; 0xa0
 8001b0e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001b10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fa65 	bl	8005ff0 <HAL_RCC_ClockConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b2c:	f000 fc78 	bl	8002420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001b30:	f244 1342 	movw	r3, #16706	; 0x4142
 8001b34:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001b36:	2304      	movs	r3, #4
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 8001b50:	230e      	movs	r3, #14
 8001b52:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b54:	2307      	movs	r3, #7
 8001b56:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b64:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 fc77 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001b74:	f000 fc54 	bl	8002420 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b7c:	f003 fdc2 	bl	8005704 <HAL_PWREx_ControlVoltageScaling>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8001b86:	f000 fc4b 	bl	8002420 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b8a:	f004 fe5b 	bl	8006844 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b8e:	bf00      	nop
 8001b90:	37b0      	adds	r7, #176	; 0xb0
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000

08001b9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
 8001bb0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bb4:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <MX_ADC1_Init+0xc0>)
 8001bb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c12:	4811      	ldr	r0, [pc, #68]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001c14:	f001 fa1a 	bl	800304c <HAL_ADC_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001c1e:	f000 fbff 	bl	8002420 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_ADC1_Init+0xc4>)
 8001c24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c26:	2306      	movs	r3, #6
 8001c28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c2e:	237f      	movs	r3, #127	; 0x7f
 8001c30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c32:	2304      	movs	r3, #4
 8001c34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <MX_ADC1_Init+0xbc>)
 8001c40:	f001 fb4c 	bl	80032dc <HAL_ADC_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c4a:	f000 fbe9 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20008604 	.word	0x20008604
 8001c5c:	50040000 	.word	0x50040000
 8001c60:	19200040 	.word	0x19200040

08001c64 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001c6a:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <MX_CAN1_Init+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c86:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001c8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c8e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_CAN1_Init+0x64>)
 8001cb6:	f001 fef1 	bl	8003a9c <HAL_CAN_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001cc0:	f000 fbae 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20008790 	.word	0x20008790
 8001ccc:	40006400 	.word	0x40006400

08001cd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001cd6:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <MX_I2C1_Init+0x78>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d0a:	480e      	ldr	r0, [pc, #56]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001d0c:	f002 fee2 	bl	8004ad4 <HAL_I2C_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d16:	f000 fb83 	bl	8002420 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001d1e:	f003 fc3b 	bl	8005598 <HAL_I2CEx_ConfigAnalogFilter>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d28:	f000 fb7a 	bl	8002420 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_I2C1_Init+0x74>)
 8001d30:	f003 fc7d 	bl	800562e <HAL_I2CEx_ConfigDigitalFilter>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d3a:	f000 fb71 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20008568 	.word	0x20008568
 8001d48:	40005400 	.word	0x40005400

08001d4c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d52:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <MX_I2C3_Init+0x78>)
 8001d54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d86:	480e      	ldr	r0, [pc, #56]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d88:	f002 fea4 	bl	8004ad4 <HAL_I2C_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001d92:	f000 fb45 	bl	8002420 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d96:	2100      	movs	r1, #0
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001d9a:	f003 fbfd 	bl	8005598 <HAL_I2CEx_ConfigAnalogFilter>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001da4:	f000 fb3c 	bl	8002420 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001da8:	2100      	movs	r1, #0
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_I2C3_Init+0x74>)
 8001dac:	f003 fc3f 	bl	800562e <HAL_I2CEx_ConfigDigitalFilter>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001db6:	f000 fb33 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200084a8 	.word	0x200084a8
 8001dc4:	40005c00 	.word	0x40005c00

08001dc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b096      	sub	sp, #88	; 0x58
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]
 8001dea:	615a      	str	r2, [r3, #20]
 8001dec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	222c      	movs	r2, #44	; 0x2c
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f008 fe91 	bl	800ab1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dfa:	4b45      	ldr	r3, [pc, #276]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001dfc:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <MX_TIM1_Init+0x14c>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e00:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e0c:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e26:	483a      	ldr	r0, [pc, #232]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e28:	f004 fec4 	bl	8006bb4 <HAL_TIM_PWM_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001e32:	f000 faf5 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e46:	4619      	mov	r1, r3
 8001e48:	4831      	ldr	r0, [pc, #196]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e4a:	f005 fc43 	bl	80076d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e54:	f000 fae4 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e58:	2360      	movs	r3, #96	; 0x60
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4824      	ldr	r0, [pc, #144]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e7e:	f005 f80f 	bl	8006ea0 <HAL_TIM_PWM_ConfigChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e88:	f000 faca 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e90:	2204      	movs	r2, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	481e      	ldr	r0, [pc, #120]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001e96:	f005 f803 	bl	8006ea0 <HAL_TIM_PWM_ConfigChannel>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001ea0:	f000 fabe 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4818      	ldr	r0, [pc, #96]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001eae:	f004 fff7 	bl	8006ea0 <HAL_TIM_PWM_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001eb8:	f000 fab2 	bl	8002420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4807      	ldr	r0, [pc, #28]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001ef2:	f005 fc55 	bl	80077a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001efc:	f000 fa90 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <MX_TIM1_Init+0x148>)
 8001f02:	f000 fc11 	bl	8002728 <HAL_TIM_MspPostInit>

}
 8001f06:	bf00      	nop
 8001f08:	3758      	adds	r7, #88	; 0x58
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200086b0 	.word	0x200086b0
 8001f14:	40012c00 	.word	0x40012c00

08001f18 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b096      	sub	sp, #88	; 0x58
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	615a      	str	r2, [r3, #20]
 8001f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	222c      	movs	r2, #44	; 0x2c
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f008 fde9 	bl	800ab1c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <MX_TIM15_Init+0x100>)
 8001f4c:	4a33      	ldr	r2, [pc, #204]	; (800201c <MX_TIM15_Init+0x104>)
 8001f4e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <MX_TIM15_Init+0x100>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <MX_TIM15_Init+0x100>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <MX_TIM15_Init+0x100>)
 8001f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f62:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <MX_TIM15_Init+0x100>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <MX_TIM15_Init+0x100>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <MX_TIM15_Init+0x100>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001f76:	4828      	ldr	r0, [pc, #160]	; (8002018 <MX_TIM15_Init+0x100>)
 8001f78:	f004 fe1c 	bl	8006bb4 <HAL_TIM_PWM_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001f82:	f000 fa4d 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f92:	4619      	mov	r1, r3
 8001f94:	4820      	ldr	r0, [pc, #128]	; (8002018 <MX_TIM15_Init+0x100>)
 8001f96:	f005 fb9d 	bl	80076d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001fa0:	f000 fa3e 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa4:	2360      	movs	r3, #96	; 0x60
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4813      	ldr	r0, [pc, #76]	; (8002018 <MX_TIM15_Init+0x100>)
 8001fca:	f004 ff69 	bl	8006ea0 <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001fd4:	f000 fa24 	bl	8002420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4807      	ldr	r0, [pc, #28]	; (8002018 <MX_TIM15_Init+0x100>)
 8001ffc:	f005 fbd0 	bl	80077a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8002006:	f000 fa0b 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800200a:	4803      	ldr	r0, [pc, #12]	; (8002018 <MX_TIM15_Init+0x100>)
 800200c:	f000 fb8c 	bl	8002728 <HAL_TIM_MspPostInit>

}
 8002010:	bf00      	nop
 8002012:	3758      	adds	r7, #88	; 0x58
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200085b4 	.word	0x200085b4
 800201c:	40014000 	.word	0x40014000

08002020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <MX_USART2_UART_Init+0x5c>)
 8002028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800202c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002064:	f005 fc32 	bl	80078cc <HAL_UART_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800206e:	f000 f9d7 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000870c 	.word	0x2000870c
 800207c:	40004400 	.word	0x40004400

08002080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_DMA_Init+0x48>)
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <MX_DMA_Init+0x48>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6493      	str	r3, [r2, #72]	; 0x48
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <MX_DMA_Init+0x48>)
 8002094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2105      	movs	r1, #5
 80020a2:	2010      	movs	r0, #16
 80020a4:	f002 fa1a 	bl	80044dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80020a8:	2010      	movs	r0, #16
 80020aa:	f002 fa33 	bl	8004514 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2105      	movs	r1, #5
 80020b2:	2011      	movs	r0, #17
 80020b4:	f002 fa12 	bl	80044dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80020b8:	2011      	movs	r0, #17
 80020ba:	f002 fa2b 	bl	8004514 <HAL_NVIC_EnableIRQ>

}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000

080020cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_GPIO_Init+0x5c>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	4a14      	ldr	r2, [pc, #80]	; (8002128 <MX_GPIO_Init+0x5c>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_GPIO_Init+0x5c>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_GPIO_Init+0x5c>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <MX_GPIO_Init+0x5c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_GPIO_Init+0x5c>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_GPIO_Init+0x5c>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <MX_GPIO_Init+0x5c>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_GPIO_Init+0x5c>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	b0ab      	sub	sp, #172	; 0xac
 8002130:	af10      	add	r7, sp, #64	; 0x40
 8002132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	  char msg[50];
	  uint8_t canPacketMSB[8];
	  uint8_t canPacketLSB[16]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
 8002134:	4b5f      	ldr	r3, [pc, #380]	; (80022b4 <StartDefaultTask+0x188>)
 8002136:	f107 040c 	add.w	r4, r7, #12
 800213a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800213c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	  for(;;){
		    for(int i=0; i<12; i++){
 8002140:	2300      	movs	r3, #0
 8002142:	667b      	str	r3, [r7, #100]	; 0x64
 8002144:	e007      	b.n	8002156 <StartDefaultTask+0x2a>
		        _channel_readings[i]=0;
 8002146:	4a5c      	ldr	r2, [pc, #368]	; (80022b8 <StartDefaultTask+0x18c>)
 8002148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800214a:	2100      	movs	r1, #0
 800214c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		    for(int i=0; i<12; i++){
 8002150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002152:	3301      	adds	r3, #1
 8002154:	667b      	str	r3, [r7, #100]	; 0x64
 8002156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002158:	2b0b      	cmp	r3, #11
 800215a:	ddf4      	ble.n	8002146 <StartDefaultTask+0x1a>
		    }

		    //AS7341 initialize
		    AS7341begin(hi2c1);
 800215c:	4e57      	ldr	r6, [pc, #348]	; (80022bc <StartDefaultTask+0x190>)
 800215e:	466d      	mov	r5, sp
 8002160:	f106 0410 	add.w	r4, r6, #16
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002170:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002174:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002178:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800217c:	f7fe fe90 	bl	8000ea0 <AS7341begin>
		    AS7341init(0x01);
 8002180:	2001      	movs	r0, #1
 8002182:	f7ff f94f 	bl	8001424 <AS7341init>

			//configure integration time
		    setATIME(100);
 8002186:	2064      	movs	r0, #100	; 0x64
 8002188:	f7fe fee6 	bl	8000f58 <setATIME>
		    setASTEP(0xE7);
 800218c:	20e7      	movs	r0, #231	; 0xe7
 800218e:	f7fe fe9f 	bl	8000ed0 <setASTEP>
		    setGain(AS7341_GAIN_256X);
 8002192:	2009      	movs	r0, #9
 8002194:	f7fe ff08 	bl	8000fa8 <setGain>

		    readAllChannels(_channel_readings);
 8002198:	4847      	ldr	r0, [pc, #284]	; (80022b8 <StartDefaultTask+0x18c>)
 800219a:	f7fe ff2d 	bl	8000ff8 <readAllChannels>

		    //get all channel
		    int a = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	663b      	str	r3, [r7, #96]	; 0x60
		    for(int i=0; i<8; i++){
 80021a2:	2300      	movs	r3, #0
 80021a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021a6:	e027      	b.n	80021f8 <StartDefaultTask+0xcc>
		    	if(i%2==0){
 80021a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <StartDefaultTask+0xa6>
		    		canPacketMSB[i]=getChannel(a)>>8;
 80021b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f830 	bl	800121c <getChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2d9      	uxtb	r1, r3
 80021c4:	f107 021c 	add.w	r2, r7, #28
 80021c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ca:	4413      	add	r3, r2
 80021cc:	460a      	mov	r2, r1
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e00f      	b.n	80021f2 <StartDefaultTask+0xc6>
		    	}
		    	else{
		    		canPacketMSB[i]=getChannel(a)&0x00FF;
 80021d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f820 	bl	800121c <getChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	b2d9      	uxtb	r1, r3
 80021e0:	f107 021c 	add.w	r2, r7, #28
 80021e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e6:	4413      	add	r3, r2
 80021e8:	460a      	mov	r2, r1
 80021ea:	701a      	strb	r2, [r3, #0]
		    		a++;
 80021ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ee:	3301      	adds	r3, #1
 80021f0:	663b      	str	r3, [r7, #96]	; 0x60
		    for(int i=0; i<8; i++){
 80021f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f4:	3301      	adds	r3, #1
 80021f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fa:	2b07      	cmp	r3, #7
 80021fc:	ddd4      	ble.n	80021a8 <StartDefaultTask+0x7c>
		    	}
		    }


		    for(int i=0; i<12; i++){
 80021fe:	2300      	movs	r3, #0
 8002200:	65bb      	str	r3, [r7, #88]	; 0x58
 8002202:	e01e      	b.n	8002242 <StartDefaultTask+0x116>
			    sprintf(msg, "getChannel %d = %x\r\n",i+1,  getChannel(i));
 8002204:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002206:	1c5c      	adds	r4, r3, #1
 8002208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f805 	bl	800121c <getChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002218:	4622      	mov	r2, r4
 800221a:	4929      	ldr	r1, [pc, #164]	; (80022c0 <StartDefaultTask+0x194>)
 800221c:	f009 f8f0 	bl	800b400 <siprintf>
			    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4618      	mov	r0, r3
 8002226:	f7fd ffd3 	bl	80001d0 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	b29a      	uxth	r2, r3
 800222e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	4823      	ldr	r0, [pc, #140]	; (80022c4 <StartDefaultTask+0x198>)
 8002238:	f005 fb96 	bl	8007968 <HAL_UART_Transmit>
		    for(int i=0; i<12; i++){
 800223c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800223e:	3301      	adds	r3, #1
 8002240:	65bb      	str	r3, [r7, #88]	; 0x58
 8002242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002244:	2b0b      	cmp	r3, #11
 8002246:	dddd      	ble.n	8002204 <StartDefaultTask+0xd8>
		    }


		    sprintf(msg, "getThermocoupleTemp = %d\r\n",getThermocoupleTemp(1));
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff fa2d 	bl	80016a8 <getThermocoupleTemp>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	491c      	ldr	r1, [pc, #112]	; (80022c8 <StartDefaultTask+0x19c>)
 8002258:	4618      	mov	r0, r3
 800225a:	f009 f8d1 	bl	800b400 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800225e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002262:	4618      	mov	r0, r3
 8002264:	f7fd ffb4 	bl	80001d0 <strlen>
 8002268:	4603      	mov	r3, r0
 800226a:	b29a      	uxth	r2, r3
 800226c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
 8002274:	4813      	ldr	r0, [pc, #76]	; (80022c4 <StartDefaultTask+0x198>)
 8002276:	f005 fb77 	bl	8007968 <HAL_UART_Transmit>

		    enableFlickerDetection(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f7ff f94a 	bl	8001514 <enableFlickerDetection>
		    sprintf(msg, "getFlickerDetectStatus = %d\r\n",getFlickerDetectStatus());
 8002280:	f7ff f970 	bl	8001564 <getFlickerDetectStatus>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	490f      	ldr	r1, [pc, #60]	; (80022cc <StartDefaultTask+0x1a0>)
 800228e:	4618      	mov	r0, r3
 8002290:	f009 f8b6 	bl	800b400 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002298:	4618      	mov	r0, r3
 800229a:	f7fd ff99 	bl	80001d0 <strlen>
 800229e:	4603      	mov	r3, r0
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	4806      	ldr	r0, [pc, #24]	; (80022c4 <StartDefaultTask+0x198>)
 80022ac:	f005 fb5c 	bl	8007968 <HAL_UART_Transmit>
	  for(;;){
 80022b0:	e746      	b.n	8002140 <StartDefaultTask+0x14>
 80022b2:	bf00      	nop
 80022b4:	0800d8d0 	.word	0x0800d8d0
 80022b8:	20008444 	.word	0x20008444
 80022bc:	20008568 	.word	0x20008568
 80022c0:	0800d87c 	.word	0x0800d87c
 80022c4:	2000870c 	.word	0x2000870c
 80022c8:	0800d894 	.word	0x0800d894
 80022cc:	0800d8b0 	.word	0x0800d8b0

080022d0 <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b094      	sub	sp, #80	; 0x50
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */

	  char msg[50];
	  uint8_t read[2]={0};
 80022d8:	2300      	movs	r3, #0
 80022da:	823b      	strh	r3, [r7, #16]
	  uint16_t readtest;
	  float readfloat=0.0;
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint8_t TH = 0x00;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  uint8_t TV = 0x01;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	  uint8_t TC = 0x02;
 80022ee:	2302      	movs	r3, #2
 80022f0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	  uint8_t tempReg[] = {TH,TV,TC};
 80022f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80022f8:	733b      	strb	r3, [r7, #12]
 80022fa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80022fe:	737b      	strb	r3, [r7, #13]
 8002300:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002304:	73bb      	strb	r3, [r7, #14]

	  uint8_t data[1]={TH};
 8002306:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800230a:	723b      	strb	r3, [r7, #8]
	  uint8_t MSB = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	  uint8_t LSB = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  HAL_StatusTypeDef status;
	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(10);
 8002318:	200a      	movs	r0, #10
 800231a:	f006 f84d 	bl	80083b8 <osDelay>
 800231e:	e7fb      	b.n	8002318 <StartReadTempTask+0x48>

08002320 <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 8002320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002322:	b0a7      	sub	sp, #156	; 0x9c
 8002324:	af10      	add	r7, sp, #64	; 0x40
 8002326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  char msg[50];
  uint16_t sharedvar=32;
 8002328:	2320      	movs	r3, #32
 800232a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  uint16_t sharedchannel=0xFFFF;
 800232e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002332:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  uint16_t shareddelay = 20;
 8002336:	2314      	movs	r3, #20
 8002338:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	 //turn off all LED
	 //all_led_off(&hi2c1, I2C_address);

	 //uint16_t channel = 0b1001001110010101;
	 //uint16_t channel = sharedchannel;
  	  PCA9685begin(hi2c3,0);
 800233c:	4e2e      	ldr	r6, [pc, #184]	; (80023f8 <StartReadLightTask+0xd8>)
 800233e:	2300      	movs	r3, #0
 8002340:	930f      	str	r3, [sp, #60]	; 0x3c
 8002342:	466d      	mov	r5, sp
 8002344:	f106 0410 	add.w	r4, r6, #16
 8002348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002354:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002358:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800235c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002360:	f7ff fa0a 	bl	8001778 <PCA9685begin>
  	  pca9685_init(0x80);
 8002364:	2080      	movs	r0, #128	; 0x80
 8002366:	f7ff fa1f 	bl	80017a8 <pca9685_init>
  	  uint32_t tickTab[3];
	 for(;;)
	 {
		 //osDelay(shareddelay);

		 for(int i=0; i<4096/sharedvar; i++){
 800236a:	2300      	movs	r3, #0
 800236c:	657b      	str	r3, [r7, #84]	; 0x54
 800236e:	e018      	b.n	80023a2 <StartReadLightTask+0x82>
			pca9685_mult_pwm(0x80, sharedchannel, 0, 4095-(sharedvar*i));
 8002370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002372:	b29b      	uxth	r3, r3
 8002374:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002378:	fb12 f303 	smulbb	r3, r2, r3
 800237c:	b29b      	uxth	r3, r3
 800237e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002382:	330f      	adds	r3, #15
 8002384:	b29b      	uxth	r3, r3
 8002386:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800238a:	2200      	movs	r2, #0
 800238c:	2080      	movs	r0, #128	; 0x80
 800238e:	f7ff fa65 	bl	800185c <pca9685_mult_pwm>
			//pca9685_pwm(&hi2c1, I2C_address, 15, 0, 4095-(sharedvar*i));
			osDelay(shareddelay);
 8002392:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002396:	4618      	mov	r0, r3
 8002398:	f006 f80e 	bl	80083b8 <osDelay>
		 for(int i=0; i<4096/sharedvar; i++){
 800239c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239e:	3301      	adds	r3, #1
 80023a0:	657b      	str	r3, [r7, #84]	; 0x54
 80023a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80023ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbdd      	blt.n	8002370 <StartReadLightTask+0x50>

		 }


	 	 for(int i=0; i<4096/sharedvar; i++){
 80023b4:	2300      	movs	r3, #0
 80023b6:	653b      	str	r3, [r7, #80]	; 0x50
 80023b8:	e014      	b.n	80023e4 <StartReadLightTask+0xc4>
	 		pca9685_mult_pwm(0x80, sharedchannel, 0, (sharedvar*i));
 80023ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80023c2:	fb12 f303 	smulbb	r3, r2, r3
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80023cc:	2200      	movs	r2, #0
 80023ce:	2080      	movs	r0, #128	; 0x80
 80023d0:	f7ff fa44 	bl	800185c <pca9685_mult_pwm>
	 		//pca9685_pwm(&hi2c1, I2C_address, 15 ,0, 4095-(sharedvar*i));
	 		osDelay(shareddelay);
 80023d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023d8:	4618      	mov	r0, r3
 80023da:	f005 ffed 	bl	80083b8 <osDelay>
	 	 for(int i=0; i<4096/sharedvar; i++){
 80023de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e0:	3301      	adds	r3, #1
 80023e2:	653b      	str	r3, [r7, #80]	; 0x50
 80023e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80023f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023f2:	429a      	cmp	r2, r3
 80023f4:	dbe1      	blt.n	80023ba <StartReadLightTask+0x9a>
		 for(int i=0; i<4096/sharedvar; i++){
 80023f6:	e7b8      	b.n	800236a <StartReadLightTask+0x4a>
 80023f8:	200084a8 	.word	0x200084a8

080023fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800240e:	f000 fc71 	bl	8002cf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40001000 	.word	0x40001000

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002428:	e7fe      	b.n	8002428 <Error_Handler+0x8>
	...

0800242c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_MspInit+0x4c>)
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_MspInit+0x4c>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6613      	str	r3, [r2, #96]	; 0x60
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_MspInit+0x4c>)
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_MspInit+0x4c>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_MspInit+0x4c>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	6593      	str	r3, [r2, #88]	; 0x58
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_MspInit+0x4c>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	210f      	movs	r1, #15
 8002466:	f06f 0001 	mvn.w	r0, #1
 800246a:	f002 f837 	bl	80044dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000

0800247c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <HAL_ADC_MspInit+0x74>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d124      	bne.n	80024e8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80024ce:	2372      	movs	r3, #114	; 0x72
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024d2:	230b      	movs	r3, #11
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e4:	f002 f98c 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	50040000 	.word	0x50040000
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <HAL_CAN_MspInit+0xa0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d139      	bne.n	800258e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_CAN_MspInit+0xa4>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_CAN_MspInit+0xa4>)
 8002520:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_CAN_MspInit+0xa4>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <HAL_CAN_MspInit+0xa4>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_CAN_MspInit+0xa4>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <HAL_CAN_MspInit+0xa4>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800254a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800255c:	2309      	movs	r3, #9
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4619      	mov	r1, r3
 8002566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256a:	f002 f949 	bl	8004800 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2105      	movs	r1, #5
 8002572:	2013      	movs	r0, #19
 8002574:	f001 ffb2 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002578:	2013      	movs	r0, #19
 800257a:	f001 ffcb 	bl	8004514 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2105      	movs	r1, #5
 8002582:	2014      	movs	r0, #20
 8002584:	f001 ffaa 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002588:	2014      	movs	r0, #20
 800258a:	f001 ffc3 	bl	8004514 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40006400 	.word	0x40006400
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08c      	sub	sp, #48	; 0x30
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a3c      	ldr	r2, [pc, #240]	; (80026b0 <HAL_I2C_MspInit+0x110>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d128      	bne.n	8002614 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025da:	23c0      	movs	r3, #192	; 0xc0
 80025dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025de:	2312      	movs	r3, #18
 80025e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025ea:	2304      	movs	r3, #4
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4619      	mov	r1, r3
 80025f4:	4830      	ldr	r0, [pc, #192]	; (80026b8 <HAL_I2C_MspInit+0x118>)
 80025f6:	f002 f903 	bl	8004800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025fa:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 8002600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002604:	6593      	str	r3, [r2, #88]	; 0x58
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002612:	e049      	b.n	80026a8 <HAL_I2C_MspInit+0x108>
  else if(hi2c->Instance==I2C3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_I2C_MspInit+0x11c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d144      	bne.n	80026a8 <HAL_I2C_MspInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002652:	2312      	movs	r3, #18
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002656:	2301      	movs	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800265e:	2304      	movs	r3, #4
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266c:	f002 f8c8 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002670:	2310      	movs	r3, #16
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002674:	2312      	movs	r3, #18
 8002676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002678:	2301      	movs	r3, #1
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002680:	2304      	movs	r3, #4
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	4619      	mov	r1, r3
 800268a:	480b      	ldr	r0, [pc, #44]	; (80026b8 <HAL_I2C_MspInit+0x118>)
 800268c:	f002 f8b8 	bl	8004800 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 8002696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800269a:	6593      	str	r3, [r2, #88]	; 0x58
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_I2C_MspInit+0x114>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
}
 80026a8:	bf00      	nop
 80026aa:	3730      	adds	r7, #48	; 0x30
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40005400 	.word	0x40005400
 80026b4:	40021000 	.word	0x40021000
 80026b8:	48000400 	.word	0x48000400
 80026bc:	40005c00 	.word	0x40005c00

080026c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <HAL_TIM_PWM_MspInit+0x5c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10c      	bne.n	80026ec <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_TIM_PWM_MspInit+0x60>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_TIM_PWM_MspInit+0x60>)
 80026d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026dc:	6613      	str	r3, [r2, #96]	; 0x60
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_TIM_PWM_MspInit+0x60>)
 80026e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80026ea:	e010      	b.n	800270e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_TIM_PWM_MspInit+0x64>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10b      	bne.n	800270e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_TIM_PWM_MspInit+0x60>)
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_TIM_PWM_MspInit+0x60>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6613      	str	r3, [r2, #96]	; 0x60
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_TIM_PWM_MspInit+0x60>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40014000 	.word	0x40014000

08002728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_TIM_MspPostInit+0xac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d11e      	bne.n	8002788 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_TIM_MspPostInit+0xb0>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_TIM_MspPostInit+0xb0>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_TIM_MspPostInit+0xb0>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002762:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002774:	2301      	movs	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002782:	f002 f83d 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002786:	e021      	b.n	80027cc <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM15)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a13      	ldr	r2, [pc, #76]	; (80027dc <HAL_TIM_MspPostInit+0xb4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d11c      	bne.n	80027cc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_TIM_MspPostInit+0xb0>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <HAL_TIM_MspPostInit+0xb0>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_TIM_MspPostInit+0xb0>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027aa:	2308      	movs	r3, #8
 80027ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80027ba:	230e      	movs	r3, #14
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c8:	f002 f81a 	bl	8004800 <HAL_GPIO_Init>
}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40014000 	.word	0x40014000

080027e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4a      	ldr	r2, [pc, #296]	; (8002928 <HAL_UART_MspInit+0x148>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	f040 808d 	bne.w	800291e <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002804:	4b49      	ldr	r3, [pc, #292]	; (800292c <HAL_UART_MspInit+0x14c>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	4a48      	ldr	r2, [pc, #288]	; (800292c <HAL_UART_MspInit+0x14c>)
 800280a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280e:	6593      	str	r3, [r2, #88]	; 0x58
 8002810:	4b46      	ldr	r3, [pc, #280]	; (800292c <HAL_UART_MspInit+0x14c>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281c:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_UART_MspInit+0x14c>)
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4a42      	ldr	r2, [pc, #264]	; (800292c <HAL_UART_MspInit+0x14c>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002828:	4b40      	ldr	r3, [pc, #256]	; (800292c <HAL_UART_MspInit+0x14c>)
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002834:	2304      	movs	r3, #4
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002844:	2307      	movs	r3, #7
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002852:	f001 ffd5 	bl	8004800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002868:	2303      	movs	r3, #3
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002876:	f001 ffc3 	bl	8004800 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_UART_MspInit+0x150>)
 800287c:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <HAL_UART_MspInit+0x154>)
 800287e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_UART_MspInit+0x150>)
 8002882:	2202      	movs	r2, #2
 8002884:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_UART_MspInit+0x150>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800288c:	4b28      	ldr	r3, [pc, #160]	; (8002930 <HAL_UART_MspInit+0x150>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_UART_MspInit+0x150>)
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <HAL_UART_MspInit+0x150>)
 800289a:	2200      	movs	r2, #0
 800289c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_UART_MspInit+0x150>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80028a4:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_UART_MspInit+0x150>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028aa:	4b21      	ldr	r3, [pc, #132]	; (8002930 <HAL_UART_MspInit+0x150>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028b0:	481f      	ldr	r0, [pc, #124]	; (8002930 <HAL_UART_MspInit+0x150>)
 80028b2:	f001 fe3d 	bl	8004530 <HAL_DMA_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 80028bc:	f7ff fdb0 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_UART_MspInit+0x150>)
 80028c4:	671a      	str	r2, [r3, #112]	; 0x70
 80028c6:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_UART_MspInit+0x150>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_UART_MspInit+0x158>)
 80028ce:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_UART_MspInit+0x15c>)
 80028d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_UART_MspInit+0x158>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_UART_MspInit+0x158>)
 80028da:	2210      	movs	r2, #16
 80028dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_UART_MspInit+0x158>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028e4:	4b14      	ldr	r3, [pc, #80]	; (8002938 <HAL_UART_MspInit+0x158>)
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_UART_MspInit+0x158>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_UART_MspInit+0x158>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_UART_MspInit+0x158>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <HAL_UART_MspInit+0x158>)
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002902:	480d      	ldr	r0, [pc, #52]	; (8002938 <HAL_UART_MspInit+0x158>)
 8002904:	f001 fe14 	bl	8004530 <HAL_DMA_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800290e:	f7ff fd87 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a08      	ldr	r2, [pc, #32]	; (8002938 <HAL_UART_MspInit+0x158>)
 8002916:	66da      	str	r2, [r3, #108]	; 0x6c
 8002918:	4a07      	ldr	r2, [pc, #28]	; (8002938 <HAL_UART_MspInit+0x158>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	; 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40004400 	.word	0x40004400
 800292c:	40021000 	.word	0x40021000
 8002930:	20008520 	.word	0x20008520
 8002934:	4002006c 	.word	0x4002006c
 8002938:	20008668 	.word	0x20008668
 800293c:	40020080 	.word	0x40020080

08002940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002950:	2200      	movs	r2, #0
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	2036      	movs	r0, #54	; 0x36
 8002956:	f001 fdc1 	bl	80044dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800295a:	2036      	movs	r0, #54	; 0x36
 800295c:	f001 fdda 	bl	8004514 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_InitTick+0xa0>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	4a1e      	ldr	r2, [pc, #120]	; (80029e0 <HAL_InitTick+0xa0>)
 8002966:	f043 0310 	orr.w	r3, r3, #16
 800296a:	6593      	str	r3, [r2, #88]	; 0x58
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_InitTick+0xa0>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002978:	f107 0210 	add.w	r2, r7, #16
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fcd8 	bl	8006338 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002988:	f003 fcaa 	bl	80062e0 <HAL_RCC_GetPCLK1Freq>
 800298c:	4603      	mov	r3, r0
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <HAL_InitTick+0xa4>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	0c9b      	lsrs	r3, r3, #18
 800299c:	3b01      	subs	r3, #1
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_InitTick+0xa8>)
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <HAL_InitTick+0xac>)
 80029a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_InitTick+0xa8>)
 80029a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029ae:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <HAL_InitTick+0xa8>)
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <HAL_InitTick+0xa8>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_InitTick+0xa8>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029c0:	4809      	ldr	r0, [pc, #36]	; (80029e8 <HAL_InitTick+0xa8>)
 80029c2:	f004 f841 	bl	8006a48 <HAL_TIM_Base_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80029cc:	4806      	ldr	r0, [pc, #24]	; (80029e8 <HAL_InitTick+0xa8>)
 80029ce:	f004 f89d 	bl	8006b0c <HAL_TIM_Base_Start_IT>
 80029d2:	4603      	mov	r3, r0
 80029d4:	e000      	b.n	80029d8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3730      	adds	r7, #48	; 0x30
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	431bde83 	.word	0x431bde83
 80029e8:	200087ec 	.word	0x200087ec
 80029ec:	40001000 	.word	0x40001000

080029f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <NMI_Handler+0x4>

080029f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029fa:	e7fe      	b.n	80029fa <HardFault_Handler+0x4>

080029fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <MemManage_Handler+0x4>

08002a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a06:	e7fe      	b.n	8002a06 <BusFault_Handler+0x4>

08002a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <UsageFault_Handler+0x4>

08002a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <DMA1_Channel6_IRQHandler+0x10>)
 8002a22:	f001 fe3d 	bl	80046a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20008520 	.word	0x20008520

08002a30 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <DMA1_Channel7_IRQHandler+0x10>)
 8002a36:	f001 fe33 	bl	80046a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20008668 	.word	0x20008668

08002a44 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <CAN1_TX_IRQHandler+0x10>)
 8002a4a:	f001 fa56 	bl	8003efa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20008790 	.word	0x20008790

08002a58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <CAN1_RX0_IRQHandler+0x10>)
 8002a5e:	f001 fa4c 	bl	8003efa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20008790 	.word	0x20008790

08002a6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <TIM6_DAC_IRQHandler+0x10>)
 8002a72:	f004 f8f6 	bl	8006c62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200087ec 	.word	0x200087ec

08002a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
	return 1;
 8002a84:	2301      	movs	r3, #1
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <_kill>:

int _kill(int pid, int sig)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a9a:	f008 f807 	bl	800aaac <__errno>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2216      	movs	r2, #22
 8002aa2:	601a      	str	r2, [r3, #0]
	return -1;
 8002aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_exit>:

void _exit (int status)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ffe7 	bl	8002a90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ac2:	e7fe      	b.n	8002ac2 <_exit+0x12>

08002ac4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e00a      	b.n	8002aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ad6:	f3af 8000 	nop.w
 8002ada:	4601      	mov	r1, r0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	60ba      	str	r2, [r7, #8]
 8002ae2:	b2ca      	uxtb	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbf0      	blt.n	8002ad6 <_read+0x12>
	}

return len;
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e009      	b.n	8002b24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	60ba      	str	r2, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3301      	adds	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	dbf1      	blt.n	8002b10 <_write+0x12>
	}
	return len;
 8002b2c:	687b      	ldr	r3, [r7, #4]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_close>:

int _close(int file)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <_isatty>:

int _isatty(int file)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
	return 1;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <_sbrk+0x5c>)
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <_sbrk+0x60>)
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <_sbrk+0x64>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <_sbrk+0x68>)
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <_sbrk+0x64>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d207      	bcs.n	8002be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd0:	f007 ff6c 	bl	800aaac <__errno>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	e009      	b.n	8002bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <_sbrk+0x64>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <_sbrk+0x64>)
 8002bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20010000 	.word	0x20010000
 8002c00:	00000400 	.word	0x00000400
 8002c04:	20000200 	.word	0x20000200
 8002c08:	20008890 	.word	0x20008890

08002c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <SystemInit+0x5c>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <SystemInit+0x5c>)
 8002c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <SystemInit+0x60>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <SystemInit+0x60>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <SystemInit+0x60>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <SystemInit+0x60>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <SystemInit+0x60>)
 8002c38:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002c3c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002c40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <SystemInit+0x60>)
 8002c44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c48:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <SystemInit+0x60>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <SystemInit+0x60>)
 8002c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <SystemInit+0x60>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000ed00 	.word	0xe000ed00
 8002c6c:	40021000 	.word	0x40021000

08002c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c74:	f7ff ffca 	bl	8002c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c7a:	e003      	b.n	8002c84 <LoopCopyDataInit>

08002c7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c82:	3104      	adds	r1, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c84:	480a      	ldr	r0, [pc, #40]	; (8002cb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c8c:	d3f6      	bcc.n	8002c7c <CopyDataInit>
	ldr	r2, =_sbss
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c90:	e002      	b.n	8002c98 <LoopFillZerobss>

08002c92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c94:	f842 3b04 	str.w	r3, [r2], #4

08002c98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <LoopForever+0x16>)
	cmp	r2, r3
 8002c9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c9c:	d3f9      	bcc.n	8002c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f007 ff0b 	bl	800aab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ca2:	f7fe fe43 	bl	800192c <main>

08002ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ca6:	e7fe      	b.n	8002ca6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ca8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002cac:	0800dd9c 	.word	0x0800dd9c
	ldr	r0, =_sdata
 8002cb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002cb4:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8002cb8:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8002cbc:	2000888c 	.word	0x2000888c

08002cc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC1_IRQHandler>

08002cc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ccc:	2003      	movs	r0, #3
 8002cce:	f001 fbfa 	bl	80044c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7ff fe34 	bl	8002940 <HAL_InitTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	71fb      	strb	r3, [r7, #7]
 8002ce2:	e001      	b.n	8002ce8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ce4:	f7ff fba2 	bl	800242c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_IncTick+0x20>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_IncTick+0x24>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_IncTick+0x24>)
 8002d06:	6013      	str	r3, [r2, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000008 	.word	0x20000008
 8002d18:	20008838 	.word	0x20008838

08002d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_GetTick+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20008838 	.word	0x20008838

08002d34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3360      	adds	r3, #96	; 0x60
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <LL_ADC_SetOffset+0x44>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	03fff000 	.word	0x03fff000

08002de4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3360      	adds	r3, #96	; 0x60
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3360      	adds	r3, #96	; 0x60
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b087      	sub	sp, #28
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3330      	adds	r3, #48	; 0x30
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	4413      	add	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	211f      	movs	r1, #31
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	401a      	ands	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	f003 011f 	and.w	r1, r3, #31
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b087      	sub	sp, #28
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3314      	adds	r3, #20
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	0e5b      	lsrs	r3, r3, #25
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	4413      	add	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	0d1b      	lsrs	r3, r3, #20
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2107      	movs	r1, #7
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	0d1b      	lsrs	r3, r3, #20
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0318 	and.w	r3, r3, #24
 8002f16:	4908      	ldr	r1, [pc, #32]	; (8002f38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f18:	40d9      	lsrs	r1, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	400b      	ands	r3, r1
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	0007ffff 	.word	0x0007ffff

08002f3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6093      	str	r3, [r2, #8]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f74:	d101      	bne.n	8002f7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fc4:	d101      	bne.n	8002fca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <LL_ADC_IsEnabled+0x18>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_ADC_IsEnabled+0x1a>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d101      	bne.n	8003016 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b08      	cmp	r3, #8
 8003036:	d101      	bne.n	800303c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e12c      	b.n	80032c0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fa01 	bl	800247c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff67 	bl	8002f60 <LL_ADC_IsDeepPowerDownEnabled>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff4d 	bl	8002f3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff82 	bl	8002fb0 <LL_ADC_IsInternalRegulatorEnabled>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d115      	bne.n	80030de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff66 	bl	8002f88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030bc:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <HAL_ADC_Init+0x27c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	4a82      	ldr	r2, [pc, #520]	; (80032cc <HAL_ADC_Init+0x280>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	3301      	adds	r3, #1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff64 	bl	8002fb0 <LL_ADC_IsInternalRegulatorEnabled>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f043 0210 	orr.w	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff75 	bl	8002ffe <LL_ADC_REG_IsConversionOngoing>
 8003114:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 80c5 	bne.w	80032ae <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 80c1 	bne.w	80032ae <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003134:	f043 0202 	orr.w	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff49 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800314c:	4860      	ldr	r0, [pc, #384]	; (80032d0 <HAL_ADC_Init+0x284>)
 800314e:	f7ff ff43 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4619      	mov	r1, r3
 800315e:	485d      	ldr	r0, [pc, #372]	; (80032d4 <HAL_ADC_Init+0x288>)
 8003160:	f7ff fde8 	bl	8002d34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7e5b      	ldrb	r3, [r3, #25]
 8003168:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800316e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003174:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800317a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003182:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d106      	bne.n	80031a0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	3b01      	subs	r3, #1
 8003198:	045b      	lsls	r3, r3, #17
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	4b45      	ldr	r3, [pc, #276]	; (80032d8 <HAL_ADC_Init+0x28c>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	69b9      	ldr	r1, [r7, #24]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff12 	bl	8002ffe <LL_ADC_REG_IsConversionOngoing>
 80031da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff1f 	bl	8003024 <LL_ADC_INJ_IsConversionOngoing>
 80031e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d13d      	bne.n	800326a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d13a      	bne.n	800326a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80031f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003200:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003210:	f023 0302 	bic.w	r3, r3, #2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	69b9      	ldr	r1, [r7, #24]
 800321a:	430b      	orrs	r3, r1
 800321c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003224:	2b01      	cmp	r3, #1
 8003226:	d118      	bne.n	800325a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800323e:	4311      	orrs	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003244:	4311      	orrs	r1, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800324a:	430a      	orrs	r2, r1
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	611a      	str	r2, [r3, #16]
 8003258:	e007      	b.n	800326a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10c      	bne.n	800328c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f023 010f 	bic.w	r1, r3, #15
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	1e5a      	subs	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
 800328a:	e007      	b.n	800329c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 020f 	bic.w	r2, r2, #15
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f023 0303 	bic.w	r3, r3, #3
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
 80032ac:	e007      	b.n	80032be <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	f043 0210 	orr.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032be:	7ffb      	ldrb	r3, [r7, #31]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000000 	.word	0x20000000
 80032cc:	053e2d63 	.word	0x053e2d63
 80032d0:	50040000 	.word	0x50040000
 80032d4:	50040300 	.word	0x50040300
 80032d8:	fff0c007 	.word	0xfff0c007

080032dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b0b6      	sub	sp, #216	; 0xd8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x22>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e3b9      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x796>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fe77 	bl	8002ffe <LL_ADC_REG_IsConversionOngoing>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 839e 	bne.w	8003a54 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b05      	cmp	r3, #5
 800331e:	d824      	bhi.n	800336a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	3b02      	subs	r3, #2
 8003326:	2b03      	cmp	r3, #3
 8003328:	d81b      	bhi.n	8003362 <HAL_ADC_ConfigChannel+0x86>
 800332a:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <HAL_ADC_ConfigChannel+0x54>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003341 	.word	0x08003341
 8003334:	08003349 	.word	0x08003349
 8003338:	08003351 	.word	0x08003351
 800333c:	08003359 	.word	0x08003359
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	220c      	movs	r2, #12
 8003344:	605a      	str	r2, [r3, #4]
          break;
 8003346:	e011      	b.n	800336c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2212      	movs	r2, #18
 800334c:	605a      	str	r2, [r3, #4]
          break;
 800334e:	e00d      	b.n	800336c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2218      	movs	r2, #24
 8003354:	605a      	str	r2, [r3, #4]
          break;
 8003356:	e009      	b.n	800336c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800335e:	605a      	str	r2, [r3, #4]
          break;
 8003360:	e004      	b.n	800336c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2206      	movs	r2, #6
 8003366:	605a      	str	r2, [r3, #4]
          break;
 8003368:	e000      	b.n	800336c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800336a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	f7ff fd64 	bl	8002e46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fe3b 	bl	8002ffe <LL_ADC_REG_IsConversionOngoing>
 8003388:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fe47 	bl	8003024 <LL_ADC_INJ_IsConversionOngoing>
 8003396:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800339a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 81a6 	bne.w	80036f0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f040 81a1 	bne.w	80036f0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f7ff fd6f 	bl	8002e9e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	08db      	lsrs	r3, r3, #3
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d00a      	beq.n	80033f8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6919      	ldr	r1, [r3, #16]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033f2:	f7ff fcd3 	bl	8002d9c <LL_ADC_SetOffset>
 80033f6:	e17b      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fcf0 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003404:	4603      	mov	r3, r0
 8003406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x148>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fce5 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 800341a:	4603      	mov	r3, r0
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	f003 021f 	and.w	r2, r3, #31
 8003422:	e01e      	b.n	8003462 <HAL_ADC_ConfigChannel+0x186>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2100      	movs	r1, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fcda 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003430:	4603      	mov	r3, r0
 8003432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003446:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800344a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e004      	b.n	8003460 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_ADC_ConfigChannel+0x19e>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0e9b      	lsrs	r3, r3, #26
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	e018      	b.n	80034ac <HAL_ADC_ConfigChannel+0x1d0>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800348e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800349e:	2320      	movs	r3, #32
 80034a0:	e004      	b.n	80034ac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80034a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d106      	bne.n	80034be <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fca9 	bl	8002e10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2101      	movs	r1, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fc8d 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x20e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2101      	movs	r1, #1
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fc82 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 80034e0:	4603      	mov	r3, r0
 80034e2:	0e9b      	lsrs	r3, r3, #26
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	e01e      	b.n	8003528 <HAL_ADC_ConfigChannel+0x24c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2101      	movs	r1, #1
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fc77 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800350c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	e004      	b.n	8003526 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800351c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x264>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0e9b      	lsrs	r3, r3, #26
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	e018      	b.n	8003572 <HAL_ADC_ConfigChannel+0x296>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003554:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800355c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e004      	b.n	8003572 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003572:	429a      	cmp	r2, r3
 8003574:	d106      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	2101      	movs	r1, #1
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fc46 	bl	8002e10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2102      	movs	r1, #2
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fc2a 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003590:	4603      	mov	r3, r0
 8003592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x2d4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2102      	movs	r1, #2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fc1f 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	0e9b      	lsrs	r3, r3, #26
 80035aa:	f003 021f 	and.w	r2, r3, #31
 80035ae:	e01e      	b.n	80035ee <HAL_ADC_ConfigChannel+0x312>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2102      	movs	r1, #2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fc14 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e004      	b.n	80035ec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d105      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x32a>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0e9b      	lsrs	r3, r3, #26
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	e016      	b.n	8003634 <HAL_ADC_ConfigChannel+0x358>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003618:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800361a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800361e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e004      	b.n	8003634 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800362a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003634:	429a      	cmp	r2, r3
 8003636:	d106      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2200      	movs	r2, #0
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fbe5 	bl	8002e10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2103      	movs	r1, #3
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fbc9 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003652:	4603      	mov	r3, r0
 8003654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x396>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2103      	movs	r1, #3
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fbbe 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003668:	4603      	mov	r3, r0
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	e017      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x3c6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2103      	movs	r1, #3
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fbb3 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 800367e:	4603      	mov	r3, r0
 8003680:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800368a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800368c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800368e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e003      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x3de>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	0e9b      	lsrs	r3, r3, #26
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	e011      	b.n	80036de <HAL_ADC_ConfigChannel+0x402>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80036d2:	2320      	movs	r3, #32
 80036d4:	e003      	b.n	80036de <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80036d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036de:	429a      	cmp	r2, r3
 80036e0:	d106      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2200      	movs	r2, #0
 80036e8:	2103      	movs	r1, #3
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fb90 	bl	8002e10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fc6f 	bl	8002fd8 <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f040 813f 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	461a      	mov	r2, r3
 8003710:	f7ff fbf0 	bl	8002ef4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a8e      	ldr	r2, [pc, #568]	; (8003954 <HAL_ADC_ConfigChannel+0x678>)
 800371a:	4293      	cmp	r3, r2
 800371c:	f040 8130 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x46c>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0e9b      	lsrs	r3, r3, #26
 8003736:	3301      	adds	r3, #1
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2b09      	cmp	r3, #9
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e019      	b.n	800377c <HAL_ADC_ConfigChannel+0x4a0>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003758:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800375a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e003      	b.n	800376c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	2b09      	cmp	r3, #9
 8003774:	bf94      	ite	ls
 8003776:	2301      	movls	r3, #1
 8003778:	2300      	movhi	r3, #0
 800377a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800377c:	2b00      	cmp	r3, #0
 800377e:	d079      	beq.n	8003874 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <HAL_ADC_ConfigChannel+0x4c0>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	3301      	adds	r3, #1
 8003794:	069b      	lsls	r3, r3, #26
 8003796:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800379a:	e015      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x4ec>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80037b4:	2320      	movs	r3, #32
 80037b6:	e003      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80037b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	069b      	lsls	r3, r3, #26
 80037c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d109      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x50c>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	3301      	adds	r3, #1
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	2101      	movs	r1, #1
 80037e2:	fa01 f303 	lsl.w	r3, r1, r3
 80037e6:	e017      	b.n	8003818 <HAL_ADC_ConfigChannel+0x53c>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003800:	2320      	movs	r3, #32
 8003802:	e003      	b.n	800380c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	ea42 0103 	orr.w	r1, r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <HAL_ADC_ConfigChannel+0x562>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0e9b      	lsrs	r3, r3, #26
 800382e:	3301      	adds	r3, #1
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	051b      	lsls	r3, r3, #20
 800383c:	e018      	b.n	8003870 <HAL_ADC_ConfigChannel+0x594>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003856:	2320      	movs	r3, #32
 8003858:	e003      	b.n	8003862 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003870:	430b      	orrs	r3, r1
 8003872:	e080      	b.n	8003976 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x5b4>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	3301      	adds	r3, #1
 8003888:	069b      	lsls	r3, r3, #26
 800388a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800388e:	e015      	b.n	80038bc <HAL_ADC_ConfigChannel+0x5e0>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80038a8:	2320      	movs	r3, #32
 80038aa:	e003      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	069b      	lsls	r3, r3, #26
 80038b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d109      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x600>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0e9b      	lsrs	r3, r3, #26
 80038ce:	3301      	adds	r3, #1
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	e017      	b.n	800390c <HAL_ADC_ConfigChannel+0x630>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	fa93 f3a3 	rbit	r3, r3
 80038e8:	61fb      	str	r3, [r7, #28]
  return result;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80038f4:	2320      	movs	r3, #32
 80038f6:	e003      	b.n	8003900 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	3301      	adds	r3, #1
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	ea42 0103 	orr.w	r1, r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10d      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x65c>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0e9b      	lsrs	r3, r3, #26
 8003922:	3301      	adds	r3, #1
 8003924:	f003 021f 	and.w	r2, r3, #31
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	3b1e      	subs	r3, #30
 8003930:	051b      	lsls	r3, r3, #20
 8003932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003936:	e01d      	b.n	8003974 <HAL_ADC_ConfigChannel+0x698>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	613b      	str	r3, [r7, #16]
  return result;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d103      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003950:	2320      	movs	r3, #32
 8003952:	e005      	b.n	8003960 <HAL_ADC_ConfigChannel+0x684>
 8003954:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	3301      	adds	r3, #1
 8003962:	f003 021f 	and.w	r2, r3, #31
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	3b1e      	subs	r3, #30
 800396e:	051b      	lsls	r3, r3, #20
 8003970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003974:	430b      	orrs	r3, r1
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	4619      	mov	r1, r3
 800397c:	f7ff fa8f 	bl	8002e9e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_ADC_ConfigChannel+0x7a0>)
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d06c      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800398c:	483c      	ldr	r0, [pc, #240]	; (8003a80 <HAL_ADC_ConfigChannel+0x7a4>)
 800398e:	f7ff f9f7 	bl	8002d80 <LL_ADC_GetCommonPathInternalCh>
 8003992:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <HAL_ADC_ConfigChannel+0x7a8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d127      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d121      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a35      	ldr	r2, [pc, #212]	; (8003a88 <HAL_ADC_ConfigChannel+0x7ac>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d157      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039be:	4619      	mov	r1, r3
 80039c0:	482f      	ldr	r0, [pc, #188]	; (8003a80 <HAL_ADC_ConfigChannel+0x7a4>)
 80039c2:	f7ff f9ca 	bl	8002d5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039c6:	4b31      	ldr	r3, [pc, #196]	; (8003a8c <HAL_ADC_ConfigChannel+0x7b0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <HAL_ADC_ConfigChannel+0x7b4>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039e0:	e002      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f9      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039ee:	e03a      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <HAL_ADC_ConfigChannel+0x7b8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d113      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x746>
 80039fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_ADC_ConfigChannel+0x7ac>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d12a      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4819      	ldr	r0, [pc, #100]	; (8003a80 <HAL_ADC_ConfigChannel+0x7a4>)
 8003a1c:	f7ff f99d 	bl	8002d5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a20:	e021      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d11c      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d116      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <HAL_ADC_ConfigChannel+0x7ac>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d111      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	480c      	ldr	r0, [pc, #48]	; (8003a80 <HAL_ADC_ConfigChannel+0x7a4>)
 8003a4e:	f7ff f984 	bl	8002d5a <LL_ADC_SetCommonPathInternalCh>
 8003a52:	e008      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	37d8      	adds	r7, #216	; 0xd8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	80080000 	.word	0x80080000
 8003a80:	50040300 	.word	0x50040300
 8003a84:	c7520000 	.word	0xc7520000
 8003a88:	50040000 	.word	0x50040000
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	053e2d63 	.word	0x053e2d63
 8003a94:	cb840000 	.word	0xcb840000
 8003a98:	80000001 	.word	0x80000001

08003a9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0ed      	b.n	8003c8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe fd1c 	bl	80024f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0202 	bic.w	r2, r2, #2
 8003ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad0:	f7ff f924 	bl	8002d1c <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ad6:	e012      	b.n	8003afe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ad8:	f7ff f920 	bl	8002d1c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b0a      	cmp	r3, #10
 8003ae4:	d90b      	bls.n	8003afe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2205      	movs	r2, #5
 8003af6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0c5      	b.n	8003c8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b1c:	f7ff f8fe 	bl	8002d1c <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b22:	e012      	b.n	8003b4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b24:	f7ff f8fa 	bl	8002d1c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b0a      	cmp	r3, #10
 8003b30:	d90b      	bls.n	8003b4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2205      	movs	r2, #5
 8003b42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e09f      	b.n	8003c8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0e5      	beq.n	8003b24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7e1b      	ldrb	r3, [r3, #24]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d108      	bne.n	8003b72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e007      	b.n	8003b82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7e5b      	ldrb	r3, [r3, #25]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d108      	bne.n	8003b9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e007      	b.n	8003bac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7e9b      	ldrb	r3, [r3, #26]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d108      	bne.n	8003bc6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0220 	orr.w	r2, r2, #32
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e007      	b.n	8003bd6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0220 	bic.w	r2, r2, #32
 8003bd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7edb      	ldrb	r3, [r3, #27]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d108      	bne.n	8003bf0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0210 	bic.w	r2, r2, #16
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e007      	b.n	8003c00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0210 	orr.w	r2, r2, #16
 8003bfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7f1b      	ldrb	r3, [r3, #28]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d108      	bne.n	8003c1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0208 	orr.w	r2, r2, #8
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e007      	b.n	8003c2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0208 	bic.w	r2, r2, #8
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7f5b      	ldrb	r3, [r3, #29]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d108      	bne.n	8003c44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0204 	orr.w	r2, r2, #4
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e007      	b.n	8003c54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	ea42 0103 	orr.w	r1, r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	1e5a      	subs	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b087      	sub	sp, #28
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d003      	beq.n	8003cb8 <HAL_CAN_ConfigFilter+0x26>
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	f040 80aa 	bne.w	8003e0c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d123      	bne.n	8003d3a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3248      	adds	r2, #72	; 0x48
 8003d1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	3348      	adds	r3, #72	; 0x48
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	440b      	add	r3, r1
 8003d38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d122      	bne.n	8003d88 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	3248      	adds	r2, #72	; 0x48
 8003d68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d7e:	6979      	ldr	r1, [r7, #20]
 8003d80:	3348      	adds	r3, #72	; 0x48
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	440b      	add	r3, r1
 8003d86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003da2:	e007      	b.n	8003db4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003dce:	e007      	b.n	8003de0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e006      	b.n	8003e1a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d12e      	bne.n	8003e98 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e52:	f7fe ff63 	bl	8002d1c <HAL_GetTick>
 8003e56:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e58:	e012      	b.n	8003e80 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e5a:	f7fe ff5f 	bl	8002d1c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b0a      	cmp	r3, #10
 8003e66:	d90b      	bls.n	8003e80 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2205      	movs	r2, #5
 8003e78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e012      	b.n	8003ea6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e5      	bne.n	8003e5a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e006      	b.n	8003ea6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ebe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d002      	beq.n	8003ecc <HAL_CAN_ActivateNotification+0x1e>
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d109      	bne.n	8003ee0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6959      	ldr	r1, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e006      	b.n	8003eee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b08a      	sub	sp, #40	; 0x28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d07c      	beq.n	800403a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d023      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f983 	bl	8004268 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f62:	e016      	b.n	8003f92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
 8003f76:	e00c      	b.n	8003f92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	e002      	b.n	8003f92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f989 	bl	80042a4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d024      	beq.n	8003fe6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f963 	bl	800427c <HAL_CAN_TxMailbox1CompleteCallback>
 8003fb6:	e016      	b.n	8003fe6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	e00c      	b.n	8003fe6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fde:	e002      	b.n	8003fe6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f969 	bl	80042b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d024      	beq.n	800403a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ff8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f943 	bl	8004290 <HAL_CAN_TxMailbox2CompleteCallback>
 800400a:	e016      	b.n	800403a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d004      	beq.n	8004020 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	e00c      	b.n	800403a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
 8004032:	e002      	b.n	800403a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f949 	bl	80042cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00c      	beq.n	800405e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004054:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2210      	movs	r2, #16
 800405c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00b      	beq.n	8004080 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d006      	beq.n	8004080 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2208      	movs	r2, #8
 8004078:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f93a 	bl	80042f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f921 	bl	80042e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00c      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2210      	movs	r2, #16
 80040c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2208      	movs	r2, #8
 80040dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f91c 	bl	800431c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f903 	bl	8004308 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2210      	movs	r2, #16
 800411c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f906 	bl	8004330 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d006      	beq.n	8004146 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2208      	movs	r2, #8
 800413e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f8ff 	bl	8004344 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d07b      	beq.n	8004248 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d072      	beq.n	8004240 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	f043 0302 	orr.w	r3, r3, #2
 8004190:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	f043 0304 	orr.w	r3, r3, #4
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d043      	beq.n	8004240 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d03e      	beq.n	8004240 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c8:	2b60      	cmp	r3, #96	; 0x60
 80041ca:	d02b      	beq.n	8004224 <HAL_CAN_IRQHandler+0x32a>
 80041cc:	2b60      	cmp	r3, #96	; 0x60
 80041ce:	d82e      	bhi.n	800422e <HAL_CAN_IRQHandler+0x334>
 80041d0:	2b50      	cmp	r3, #80	; 0x50
 80041d2:	d022      	beq.n	800421a <HAL_CAN_IRQHandler+0x320>
 80041d4:	2b50      	cmp	r3, #80	; 0x50
 80041d6:	d82a      	bhi.n	800422e <HAL_CAN_IRQHandler+0x334>
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d019      	beq.n	8004210 <HAL_CAN_IRQHandler+0x316>
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d826      	bhi.n	800422e <HAL_CAN_IRQHandler+0x334>
 80041e0:	2b30      	cmp	r3, #48	; 0x30
 80041e2:	d010      	beq.n	8004206 <HAL_CAN_IRQHandler+0x30c>
 80041e4:	2b30      	cmp	r3, #48	; 0x30
 80041e6:	d822      	bhi.n	800422e <HAL_CAN_IRQHandler+0x334>
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d002      	beq.n	80041f2 <HAL_CAN_IRQHandler+0x2f8>
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d005      	beq.n	80041fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041f0:	e01d      	b.n	800422e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	f043 0308 	orr.w	r3, r3, #8
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041fa:	e019      	b.n	8004230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f043 0310 	orr.w	r3, r3, #16
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004204:	e014      	b.n	8004230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	f043 0320 	orr.w	r3, r3, #32
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800420e:	e00f      	b.n	8004230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004218:	e00a      	b.n	8004230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004222:	e005      	b.n	8004230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800422c:	e000      	b.n	8004230 <HAL_CAN_IRQHandler+0x336>
            break;
 800422e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800423e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2204      	movs	r2, #4
 8004246:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f87c 	bl	8004358 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004260:	bf00      	nop
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004388:	4013      	ands	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	60d3      	str	r3, [r2, #12]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <__NVIC_GetPriorityGrouping+0x18>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 0307 	and.w	r3, r3, #7
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	db0b      	blt.n	80043fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4907      	ldr	r1, [pc, #28]	; (8004408 <__NVIC_EnableIRQ+0x38>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2001      	movs	r0, #1
 80043f2:	fa00 f202 	lsl.w	r2, r0, r2
 80043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e100 	.word	0xe000e100

0800440c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	db0a      	blt.n	8004436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	490c      	ldr	r1, [pc, #48]	; (8004458 <__NVIC_SetPriority+0x4c>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	440b      	add	r3, r1
 8004430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004434:	e00a      	b.n	800444c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4908      	ldr	r1, [pc, #32]	; (800445c <__NVIC_SetPriority+0x50>)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	440b      	add	r3, r1
 800444a:	761a      	strb	r2, [r3, #24]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000e100 	.word	0xe000e100
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0307 	rsb	r3, r3, #7
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf28      	it	cs
 800447e:	2304      	movcs	r3, #4
 8004480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	2b06      	cmp	r3, #6
 8004488:	d902      	bls.n	8004490 <NVIC_EncodePriority+0x30>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3b03      	subs	r3, #3
 800448e:	e000      	b.n	8004492 <NVIC_EncodePriority+0x32>
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43d9      	mvns	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	4313      	orrs	r3, r2
         );
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ff4c 	bl	800436c <__NVIC_SetPriorityGrouping>
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044ee:	f7ff ff61 	bl	80043b4 <__NVIC_GetPriorityGrouping>
 80044f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	6978      	ldr	r0, [r7, #20]
 80044fa:	f7ff ffb1 	bl	8004460 <NVIC_EncodePriority>
 80044fe:	4602      	mov	r2, r0
 8004500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff80 	bl	800440c <__NVIC_SetPriority>
}
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff ff54 	bl	80043d0 <__NVIC_EnableIRQ>
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e098      	b.n	8004674 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	4b4d      	ldr	r3, [pc, #308]	; (8004680 <HAL_DMA_Init+0x150>)
 800454a:	429a      	cmp	r2, r3
 800454c:	d80f      	bhi.n	800456e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_DMA_Init+0x154>)
 8004556:	4413      	add	r3, r2
 8004558:	4a4b      	ldr	r2, [pc, #300]	; (8004688 <HAL_DMA_Init+0x158>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	009a      	lsls	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a48      	ldr	r2, [pc, #288]	; (800468c <HAL_DMA_Init+0x15c>)
 800456a:	641a      	str	r2, [r3, #64]	; 0x40
 800456c:	e00e      	b.n	800458c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	4b46      	ldr	r3, [pc, #280]	; (8004690 <HAL_DMA_Init+0x160>)
 8004576:	4413      	add	r3, r2
 8004578:	4a43      	ldr	r2, [pc, #268]	; (8004688 <HAL_DMA_Init+0x158>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	009a      	lsls	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a42      	ldr	r2, [pc, #264]	; (8004694 <HAL_DMA_Init+0x164>)
 800458a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80045b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e6:	d039      	beq.n	800465c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	4a27      	ldr	r2, [pc, #156]	; (800468c <HAL_DMA_Init+0x15c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d11a      	bne.n	8004628 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80045f2:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_DMA_Init+0x168>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f003 031c 	and.w	r3, r3, #28
 80045fe:	210f      	movs	r1, #15
 8004600:	fa01 f303 	lsl.w	r3, r1, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	4924      	ldr	r1, [pc, #144]	; (8004698 <HAL_DMA_Init+0x168>)
 8004608:	4013      	ands	r3, r2
 800460a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800460c:	4b22      	ldr	r3, [pc, #136]	; (8004698 <HAL_DMA_Init+0x168>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f003 031c 	and.w	r3, r3, #28
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	491d      	ldr	r1, [pc, #116]	; (8004698 <HAL_DMA_Init+0x168>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
 8004626:	e019      	b.n	800465c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004628:	4b1c      	ldr	r3, [pc, #112]	; (800469c <HAL_DMA_Init+0x16c>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	f003 031c 	and.w	r3, r3, #28
 8004634:	210f      	movs	r1, #15
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	4917      	ldr	r1, [pc, #92]	; (800469c <HAL_DMA_Init+0x16c>)
 800463e:	4013      	ands	r3, r2
 8004640:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004642:	4b16      	ldr	r3, [pc, #88]	; (800469c <HAL_DMA_Init+0x16c>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f003 031c 	and.w	r3, r3, #28
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	4911      	ldr	r1, [pc, #68]	; (800469c <HAL_DMA_Init+0x16c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40020407 	.word	0x40020407
 8004684:	bffdfff8 	.word	0xbffdfff8
 8004688:	cccccccd 	.word	0xcccccccd
 800468c:	40020000 	.word	0x40020000
 8004690:	bffdfbf8 	.word	0xbffdfbf8
 8004694:	40020400 	.word	0x40020400
 8004698:	400200a8 	.word	0x400200a8
 800469c:	400204a8 	.word	0x400204a8

080046a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	f003 031c 	and.w	r3, r3, #28
 80046c0:	2204      	movs	r2, #4
 80046c2:	409a      	lsls	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d026      	beq.n	800471a <HAL_DMA_IRQHandler+0x7a>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d021      	beq.n	800471a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0204 	bic.w	r2, r2, #4
 80046f2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	f003 021c 	and.w	r2, r3, #28
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	2104      	movs	r1, #4
 8004702:	fa01 f202 	lsl.w	r2, r1, r2
 8004706:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	2b00      	cmp	r3, #0
 800470e:	d071      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004718:	e06c      	b.n	80047f4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f003 031c 	and.w	r3, r3, #28
 8004722:	2202      	movs	r2, #2
 8004724:	409a      	lsls	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4013      	ands	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d02e      	beq.n	800478c <HAL_DMA_IRQHandler+0xec>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d029      	beq.n	800478c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 020a 	bic.w	r2, r2, #10
 8004754:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	f003 021c 	and.w	r2, r3, #28
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2102      	movs	r1, #2
 800476c:	fa01 f202 	lsl.w	r2, r1, r2
 8004770:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d038      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800478a:	e033      	b.n	80047f4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	f003 031c 	and.w	r3, r3, #28
 8004794:	2208      	movs	r2, #8
 8004796:	409a      	lsls	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02a      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x156>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d025      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 020e 	bic.w	r2, r2, #14
 80047b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	f003 021c 	and.w	r2, r3, #28
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2101      	movs	r1, #1
 80047c8:	fa01 f202 	lsl.w	r2, r1, r2
 80047cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
}
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800480e:	e148      	b.n	8004aa2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	2101      	movs	r1, #1
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	4013      	ands	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 813a 	beq.w	8004a9c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d00b      	beq.n	8004848 <HAL_GPIO_Init+0x48>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d007      	beq.n	8004848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800483c:	2b11      	cmp	r3, #17
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b12      	cmp	r3, #18
 8004846:	d130      	bne.n	80048aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800487e:	2201      	movs	r2, #1
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0201 	and.w	r2, r3, #1
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	2203      	movs	r2, #3
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0xea>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b12      	cmp	r3, #18
 80048e8:	d123      	bne.n	8004932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	08da      	lsrs	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3208      	adds	r2, #8
 800492c:	6939      	ldr	r1, [r7, #16]
 800492e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4013      	ands	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8094 	beq.w	8004a9c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004974:	4b52      	ldr	r3, [pc, #328]	; (8004ac0 <HAL_GPIO_Init+0x2c0>)
 8004976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004978:	4a51      	ldr	r2, [pc, #324]	; (8004ac0 <HAL_GPIO_Init+0x2c0>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6613      	str	r3, [r2, #96]	; 0x60
 8004980:	4b4f      	ldr	r3, [pc, #316]	; (8004ac0 <HAL_GPIO_Init+0x2c0>)
 8004982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800498c:	4a4d      	ldr	r2, [pc, #308]	; (8004ac4 <HAL_GPIO_Init+0x2c4>)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	3302      	adds	r3, #2
 8004994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	220f      	movs	r2, #15
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049b6:	d00d      	beq.n	80049d4 <HAL_GPIO_Init+0x1d4>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a43      	ldr	r2, [pc, #268]	; (8004ac8 <HAL_GPIO_Init+0x2c8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <HAL_GPIO_Init+0x1d0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a42      	ldr	r2, [pc, #264]	; (8004acc <HAL_GPIO_Init+0x2cc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <HAL_GPIO_Init+0x1cc>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e004      	b.n	80049d6 <HAL_GPIO_Init+0x1d6>
 80049cc:	2307      	movs	r3, #7
 80049ce:	e002      	b.n	80049d6 <HAL_GPIO_Init+0x1d6>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <HAL_GPIO_Init+0x1d6>
 80049d4:	2300      	movs	r3, #0
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	f002 0203 	and.w	r2, r2, #3
 80049dc:	0092      	lsls	r2, r2, #2
 80049de:	4093      	lsls	r3, r2
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049e6:	4937      	ldr	r1, [pc, #220]	; (8004ac4 <HAL_GPIO_Init+0x2c4>)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	3302      	adds	r3, #2
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049f4:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <HAL_GPIO_Init+0x2d0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4013      	ands	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a18:	4a2d      	ldr	r2, [pc, #180]	; (8004ad0 <HAL_GPIO_Init+0x2d0>)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004a1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <HAL_GPIO_Init+0x2d0>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a42:	4a23      	ldr	r2, [pc, #140]	; (8004ad0 <HAL_GPIO_Init+0x2d0>)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a48:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <HAL_GPIO_Init+0x2d0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4013      	ands	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a6c:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_GPIO_Init+0x2d0>)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <HAL_GPIO_Init+0x2d0>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a96:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <HAL_GPIO_Init+0x2d0>)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f47f aeaf 	bne.w	8004810 <HAL_GPIO_Init+0x10>
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	48000400 	.word	0x48000400
 8004acc:	48000800 	.word	0x48000800
 8004ad0:	40010400 	.word	0x40010400

08004ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e081      	b.n	8004bea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fd fd50 	bl	80025a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	; 0x24
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d107      	bne.n	8004b4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	e006      	b.n	8004b5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d104      	bne.n	8004b6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	ea42 0103 	orr.w	r1, r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	021a      	lsls	r2, r3, #8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69d9      	ldr	r1, [r3, #28]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	460b      	mov	r3, r1
 8004c02:	817b      	strh	r3, [r7, #10]
 8004c04:	4613      	mov	r3, r2
 8004c06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	f040 80da 	bne.w	8004dca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_I2C_Master_Transmit+0x30>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0d3      	b.n	8004dcc <HAL_I2C_Master_Transmit+0x1d8>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c2c:	f7fe f876 	bl	8002d1c <HAL_GetTick>
 8004c30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	2319      	movs	r3, #25
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 faed 	bl	800521e <I2C_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e0be      	b.n	8004dcc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2221      	movs	r2, #33	; 0x21
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	893a      	ldrh	r2, [r7, #8]
 8004c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2bff      	cmp	r3, #255	; 0xff
 8004c7e:	d90e      	bls.n	8004c9e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	22ff      	movs	r2, #255	; 0xff
 8004c84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	8979      	ldrh	r1, [r7, #10]
 8004c8e:	4b51      	ldr	r3, [pc, #324]	; (8004dd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fc50 	bl	800553c <I2C_TransferConfig>
 8004c9c:	e06c      	b.n	8004d78 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	8979      	ldrh	r1, [r7, #10]
 8004cb0:	4b48      	ldr	r3, [pc, #288]	; (8004dd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fc3f 	bl	800553c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004cbe:	e05b      	b.n	8004d78 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	6a39      	ldr	r1, [r7, #32]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 faea 	bl	800529e <I2C_WaitOnTXISFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e07b      	b.n	8004dcc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d034      	beq.n	8004d78 <HAL_I2C_Master_Transmit+0x184>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d130      	bne.n	8004d78 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fa7c 	bl	800521e <I2C_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e04d      	b.n	8004dcc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2bff      	cmp	r3, #255	; 0xff
 8004d38:	d90e      	bls.n	8004d58 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	22ff      	movs	r2, #255	; 0xff
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	8979      	ldrh	r1, [r7, #10]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fbf3 	bl	800553c <I2C_TransferConfig>
 8004d56:	e00f      	b.n	8004d78 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	8979      	ldrh	r1, [r7, #10]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fbe2 	bl	800553c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d19e      	bne.n	8004cc0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	6a39      	ldr	r1, [r7, #32]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fac9 	bl	800531e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e01a      	b.n	8004dcc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_I2C_Master_Transmit+0x1e4>)
 8004daa:	400b      	ands	r3, r1
 8004dac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	80002000 	.word	0x80002000
 8004dd8:	fe00e800 	.word	0xfe00e800

08004ddc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	461a      	mov	r2, r3
 8004de8:	460b      	mov	r3, r1
 8004dea:	817b      	strh	r3, [r7, #10]
 8004dec:	4613      	mov	r3, r2
 8004dee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	f040 80db 	bne.w	8004fb4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_I2C_Master_Receive+0x30>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e0d4      	b.n	8004fb6 <HAL_I2C_Master_Receive+0x1da>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e14:	f7fd ff82 	bl	8002d1c <HAL_GetTick>
 8004e18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2319      	movs	r3, #25
 8004e20:	2201      	movs	r2, #1
 8004e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f9f9 	bl	800521e <I2C_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0bf      	b.n	8004fb6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2222      	movs	r2, #34	; 0x22
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2210      	movs	r2, #16
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	893a      	ldrh	r2, [r7, #8]
 8004e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2bff      	cmp	r3, #255	; 0xff
 8004e66:	d90e      	bls.n	8004e86 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	22ff      	movs	r2, #255	; 0xff
 8004e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	8979      	ldrh	r1, [r7, #10]
 8004e76:	4b52      	ldr	r3, [pc, #328]	; (8004fc0 <HAL_I2C_Master_Receive+0x1e4>)
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fb5c 	bl	800553c <I2C_TransferConfig>
 8004e84:	e06d      	b.n	8004f62 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	8979      	ldrh	r1, [r7, #10]
 8004e98:	4b49      	ldr	r3, [pc, #292]	; (8004fc0 <HAL_I2C_Master_Receive+0x1e4>)
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 fb4b 	bl	800553c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004ea6:	e05c      	b.n	8004f62 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	6a39      	ldr	r1, [r7, #32]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fa73 	bl	8005398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e07c      	b.n	8004fb6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d034      	beq.n	8004f62 <HAL_I2C_Master_Receive+0x186>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d130      	bne.n	8004f62 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2180      	movs	r1, #128	; 0x80
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f987 	bl	800521e <I2C_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e04d      	b.n	8004fb6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2bff      	cmp	r3, #255	; 0xff
 8004f22:	d90e      	bls.n	8004f42 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	22ff      	movs	r2, #255	; 0xff
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	8979      	ldrh	r1, [r7, #10]
 8004f32:	2300      	movs	r3, #0
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fafe 	bl	800553c <I2C_TransferConfig>
 8004f40:	e00f      	b.n	8004f62 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	8979      	ldrh	r1, [r7, #10]
 8004f54:	2300      	movs	r3, #0
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 faed 	bl	800553c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d19d      	bne.n	8004ea8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	6a39      	ldr	r1, [r7, #32]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f9d4 	bl	800531e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e01a      	b.n	8004fb6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2220      	movs	r2, #32
 8004f86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_I2C_Master_Receive+0x1e8>)
 8004f94:	400b      	ands	r3, r1
 8004f96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e000      	b.n	8004fb6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
  }
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	80002400 	.word	0x80002400
 8004fc4:	fe00e800 	.word	0xfe00e800

08004fc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	f040 80f1 	bne.w	80051cc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e0e7      	b.n	80051ce <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_I2C_IsDeviceReady+0x44>
 8005008:	2302      	movs	r3, #2
 800500a:	e0e0      	b.n	80051ce <HAL_I2C_IsDeviceReady+0x206>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2224      	movs	r2, #36	; 0x24
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_I2C_IsDeviceReady+0x72>
 800502a:	897b      	ldrh	r3, [r7, #10]
 800502c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005038:	e004      	b.n	8005044 <HAL_I2C_IsDeviceReady+0x7c>
 800503a:	897b      	ldrh	r3, [r7, #10]
 800503c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005040:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800504a:	f7fd fe67 	bl	8002d1c <HAL_GetTick>
 800504e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b20      	cmp	r3, #32
 800505c:	bf0c      	ite	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	2300      	movne	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b10      	cmp	r3, #16
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800507c:	e034      	b.n	80050e8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d01a      	beq.n	80050bc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fd fe49 	bl	8002d1c <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <HAL_I2C_IsDeviceReady+0xd4>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10f      	bne.n	80050bc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e088      	b.n	80051ce <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	bf0c      	ite	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	2300      	movne	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b10      	cmp	r3, #16
 80050de:	bf0c      	ite	eq
 80050e0:	2301      	moveq	r3, #1
 80050e2:	2300      	movne	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80050e8:	7ffb      	ldrb	r3, [r7, #31]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d102      	bne.n	80050f4 <HAL_I2C_IsDeviceReady+0x12c>
 80050ee:	7fbb      	ldrb	r3, [r7, #30]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0c4      	beq.n	800507e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d01a      	beq.n	8005138 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	2120      	movs	r1, #32
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f886 	bl	800521e <I2C_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e058      	b.n	80051ce <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2220      	movs	r2, #32
 8005122:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e04a      	b.n	80051ce <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	2120      	movs	r1, #32
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f86b 	bl	800521e <I2C_WaitOnFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e03d      	b.n	80051ce <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2210      	movs	r2, #16
 8005158:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2220      	movs	r2, #32
 8005160:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	429a      	cmp	r2, r3
 8005168:	d118      	bne.n	800519c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005178:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2200      	movs	r2, #0
 8005182:	2120      	movs	r1, #32
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f84a 	bl	800521e <I2C_WaitOnFlagUntilTimeout>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e01c      	b.n	80051ce <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2220      	movs	r2, #32
 800519a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	3301      	adds	r3, #1
 80051a0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	f63f af3b 	bhi.w	8005022 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
  }
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d103      	bne.n	80051f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2200      	movs	r2, #0
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d007      	beq.n	8005212 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	619a      	str	r2, [r3, #24]
  }
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522e:	e022      	b.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d01e      	beq.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005238:	f7fd fd70 	bl	8002d1c <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d302      	bcc.n	800524e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d113      	bne.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e00f      	b.n	8005296 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4013      	ands	r3, r2
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	429a      	cmp	r2, r3
 8005292:	d0cd      	beq.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052aa:	e02c      	b.n	8005306 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f8dd 	bl	8005470 <I2C_IsAcknowledgeFailed>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e02a      	b.n	8005316 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d01e      	beq.n	8005306 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c8:	f7fd fd28 	bl	8002d1c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d302      	bcc.n	80052de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d113      	bne.n	8005306 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e007      	b.n	8005316 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d1cb      	bne.n	80052ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800532a:	e028      	b.n	800537e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f89d 	bl	8005470 <I2C_IsAcknowledgeFailed>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e026      	b.n	800538e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005340:	f7fd fcec 	bl	8002d1c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	d302      	bcc.n	8005356 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d113      	bne.n	800537e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e007      	b.n	800538e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b20      	cmp	r3, #32
 800538a:	d1cf      	bne.n	800532c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053a4:	e055      	b.n	8005452 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f860 	bl	8005470 <I2C_IsAcknowledgeFailed>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e053      	b.n	8005462 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d129      	bne.n	800541c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d105      	bne.n	80053e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e03f      	b.n	8005462 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2220      	movs	r2, #32
 80053e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6859      	ldr	r1, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80053f6:	400b      	ands	r3, r1
 80053f8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e022      	b.n	8005462 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541c:	f7fd fc7e 	bl	8002d1c <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	f043 0220 	orr.w	r2, r3, #32
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e007      	b.n	8005462 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b04      	cmp	r3, #4
 800545e:	d1a2      	bne.n	80053a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	fe00e800 	.word	0xfe00e800

08005470 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b10      	cmp	r3, #16
 8005488:	d151      	bne.n	800552e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800548a:	e022      	b.n	80054d2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d01e      	beq.n	80054d2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005494:	f7fd fc42 	bl	8002d1c <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d302      	bcc.n	80054aa <I2C_IsAcknowledgeFailed+0x3a>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d113      	bne.n	80054d2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	f043 0220 	orr.w	r2, r3, #32
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e02e      	b.n	8005530 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d1d5      	bne.n	800548c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2210      	movs	r2, #16
 80054e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2220      	movs	r2, #32
 80054ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff fe70 	bl	80051d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <I2C_IsAcknowledgeFailed+0xc8>)
 8005502:	400b      	ands	r3, r1
 8005504:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	f043 0204 	orr.w	r2, r3, #4
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	fe00e800 	.word	0xfe00e800

0800553c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	607b      	str	r3, [r7, #4]
 8005546:	460b      	mov	r3, r1
 8005548:	817b      	strh	r3, [r7, #10]
 800554a:	4613      	mov	r3, r2
 800554c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	0d5b      	lsrs	r3, r3, #21
 8005558:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800555c:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <I2C_TransferConfig+0x58>)
 800555e:	430b      	orrs	r3, r1
 8005560:	43db      	mvns	r3, r3
 8005562:	ea02 0103 	and.w	r1, r2, r3
 8005566:	897b      	ldrh	r3, [r7, #10]
 8005568:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800556c:	7a7b      	ldrb	r3, [r7, #9]
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	431a      	orrs	r2, r3
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	03ff63ff 	.word	0x03ff63ff

08005598 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d138      	bne.n	8005620 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e032      	b.n	8005622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2224      	movs	r2, #36	; 0x24
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6819      	ldr	r1, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e000      	b.n	8005622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005620:	2302      	movs	r3, #2
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b20      	cmp	r3, #32
 8005642:	d139      	bne.n	80056b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800564e:	2302      	movs	r3, #2
 8005650:	e033      	b.n	80056ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2224      	movs	r2, #36	; 0x24
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0201 	bic.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005680:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d6:	6013      	str	r3, [r2, #0]
}
 80056d8:	bf00      	nop
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40007000 	.word	0x40007000

080056e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <HAL_PWREx_GetVoltageRange+0x18>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40007000 	.word	0x40007000

08005704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005712:	d130      	bne.n	8005776 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005714:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800571c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005720:	d038      	beq.n	8005794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005722:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800572a:	4a1e      	ldr	r2, [pc, #120]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800572c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005730:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2232      	movs	r2, #50	; 0x32
 8005738:	fb02 f303 	mul.w	r3, r2, r3
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0c9b      	lsrs	r3, r3, #18
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005748:	e002      	b.n	8005750 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3b01      	subs	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575c:	d102      	bne.n	8005764 <HAL_PWREx_ControlVoltageScaling+0x60>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f2      	bne.n	800574a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d110      	bne.n	8005794 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e00f      	b.n	8005796 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005782:	d007      	beq.n	8005794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005784:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800578c:	4a05      	ldr	r2, [pc, #20]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800578e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005792:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40007000 	.word	0x40007000
 80057a8:	20000000 	.word	0x20000000
 80057ac:	431bde83 	.word	0x431bde83

080057b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f000 bc11 	b.w	8005fe6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057c4:	4ba0      	ldr	r3, [pc, #640]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ce:	4b9e      	ldr	r3, [pc, #632]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80e4 	beq.w	80059ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_RCC_OscConfig+0x4c>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	f040 808b 	bne.w	800590a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	f040 8087 	bne.w	800590a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057fc:	4b92      	ldr	r3, [pc, #584]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_OscConfig+0x64>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e3e8      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	4b8b      	ldr	r3, [pc, #556]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <HAL_RCC_OscConfig+0x7e>
 8005824:	4b88      	ldr	r3, [pc, #544]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800582c:	e005      	b.n	800583a <HAL_RCC_OscConfig+0x8a>
 800582e:	4b86      	ldr	r3, [pc, #536]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800583a:	4293      	cmp	r3, r2
 800583c:	d223      	bcs.n	8005886 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fdaa 	bl	800639c <RCC_SetFlashLatencyFromMSIRange>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e3c9      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005852:	4b7d      	ldr	r3, [pc, #500]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a7c      	ldr	r2, [pc, #496]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b7a      	ldr	r3, [pc, #488]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	4977      	ldr	r1, [pc, #476]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005870:	4b75      	ldr	r3, [pc, #468]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	4972      	ldr	r1, [pc, #456]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]
 8005884:	e025      	b.n	80058d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005886:	4b70      	ldr	r3, [pc, #448]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a6f      	ldr	r2, [pc, #444]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b6d      	ldr	r3, [pc, #436]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	496a      	ldr	r1, [pc, #424]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058a4:	4b68      	ldr	r3, [pc, #416]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	4965      	ldr	r1, [pc, #404]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fd6a 	bl	800639c <RCC_SetFlashLatencyFromMSIRange>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e389      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058d2:	f000 fc6f 	bl	80061b4 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b5b      	ldr	r3, [pc, #364]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	495a      	ldr	r1, [pc, #360]	; (8005a4c <HAL_RCC_OscConfig+0x29c>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	4a58      	ldr	r2, [pc, #352]	; (8005a50 <HAL_RCC_OscConfig+0x2a0>)
 80058f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058f2:	4b58      	ldr	r3, [pc, #352]	; (8005a54 <HAL_RCC_OscConfig+0x2a4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fd f822 	bl	8002940 <HAL_InitTick>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d052      	beq.n	80059ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	e36d      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d032      	beq.n	8005978 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005912:	4b4d      	ldr	r3, [pc, #308]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a4c      	ldr	r2, [pc, #304]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800591e:	f7fd f9fd 	bl	8002d1c <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005926:	f7fd f9f9 	bl	8002d1c <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e356      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005938:	4b43      	ldr	r3, [pc, #268]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f0      	beq.n	8005926 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005944:	4b40      	ldr	r3, [pc, #256]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a3f      	ldr	r2, [pc, #252]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 800594a:	f043 0308 	orr.w	r3, r3, #8
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	4b3d      	ldr	r3, [pc, #244]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	493a      	ldr	r1, [pc, #232]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 800595e:	4313      	orrs	r3, r2
 8005960:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005962:	4b39      	ldr	r3, [pc, #228]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	4935      	ldr	r1, [pc, #212]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005972:	4313      	orrs	r3, r2
 8005974:	604b      	str	r3, [r1, #4]
 8005976:	e01a      	b.n	80059ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005978:	4b33      	ldr	r3, [pc, #204]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a32      	ldr	r2, [pc, #200]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005984:	f7fd f9ca 	bl	8002d1c <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800598c:	f7fd f9c6 	bl	8002d1c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e323      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800599e:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x1dc>
 80059aa:	e000      	b.n	80059ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d073      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d005      	beq.n	80059cc <HAL_RCC_OscConfig+0x21c>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d10e      	bne.n	80059e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d10b      	bne.n	80059e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059cc:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d063      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x2f0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d15f      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e300      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ec:	d106      	bne.n	80059fc <HAL_RCC_OscConfig+0x24c>
 80059ee:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 80059f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e01d      	b.n	8005a38 <HAL_RCC_OscConfig+0x288>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCC_OscConfig+0x270>
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a0f      	ldr	r2, [pc, #60]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a0c      	ldr	r2, [pc, #48]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e00b      	b.n	8005a38 <HAL_RCC_OscConfig+0x288>
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a05      	ldr	r2, [pc, #20]	; (8005a48 <HAL_RCC_OscConfig+0x298>)
 8005a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01b      	beq.n	8005a78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fd f96c 	bl	8002d1c <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a46:	e010      	b.n	8005a6a <HAL_RCC_OscConfig+0x2ba>
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	0800d964 	.word	0x0800d964
 8005a50:	20000000 	.word	0x20000000
 8005a54:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a58:	f7fd f960 	bl	8002d1c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b64      	cmp	r3, #100	; 0x64
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e2bd      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a6a:	4baf      	ldr	r3, [pc, #700]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x2a8>
 8005a76:	e014      	b.n	8005aa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fd f950 	bl	8002d1c <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fd f94c 	bl	8002d1c <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	; 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e2a9      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a92:	4ba5      	ldr	r3, [pc, #660]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x2d0>
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d060      	beq.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x310>
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d119      	bne.n	8005aee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d116      	bne.n	8005aee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac0:	4b99      	ldr	r3, [pc, #612]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x328>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e286      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b93      	ldr	r3, [pc, #588]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	4990      	ldr	r1, [pc, #576]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aec:	e040      	b.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d023      	beq.n	8005b3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af6:	4b8c      	ldr	r3, [pc, #560]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a8b      	ldr	r2, [pc, #556]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fd f90b 	bl	8002d1c <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b0a:	f7fd f907 	bl	8002d1c <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e264      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1c:	4b82      	ldr	r3, [pc, #520]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b28:	4b7f      	ldr	r3, [pc, #508]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	497c      	ldr	r1, [pc, #496]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]
 8005b3c:	e018      	b.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b3e:	4b7a      	ldr	r3, [pc, #488]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a79      	ldr	r2, [pc, #484]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4a:	f7fd f8e7 	bl	8002d1c <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b52:	f7fd f8e3 	bl	8002d1c <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e240      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b64:	4b70      	ldr	r3, [pc, #448]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f0      	bne.n	8005b52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d03c      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01c      	beq.n	8005bbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b84:	4b68      	ldr	r3, [pc, #416]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b8a:	4a67      	ldr	r2, [pc, #412]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005b8c:	f043 0301 	orr.w	r3, r3, #1
 8005b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fd f8c2 	bl	8002d1c <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b9c:	f7fd f8be 	bl	8002d1c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e21b      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bae:	4b5e      	ldr	r3, [pc, #376]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0ef      	beq.n	8005b9c <HAL_RCC_OscConfig+0x3ec>
 8005bbc:	e01b      	b.n	8005bf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bbe:	4b5a      	ldr	r3, [pc, #360]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc4:	4a58      	ldr	r2, [pc, #352]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fd f8a5 	bl	8002d1c <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd6:	f7fd f8a1 	bl	8002d1c <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e1fe      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005be8:	4b4f      	ldr	r3, [pc, #316]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1ef      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80a6 	beq.w	8005d50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c08:	4b47      	ldr	r3, [pc, #284]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10d      	bne.n	8005c30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c14:	4b44      	ldr	r3, [pc, #272]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	4a43      	ldr	r2, [pc, #268]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c20:	4b41      	ldr	r3, [pc, #260]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c30:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <HAL_RCC_OscConfig+0x57c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d118      	bne.n	8005c6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <HAL_RCC_OscConfig+0x57c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a3a      	ldr	r2, [pc, #232]	; (8005d2c <HAL_RCC_OscConfig+0x57c>)
 8005c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c48:	f7fd f868 	bl	8002d1c <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c50:	f7fd f864 	bl	8002d1c <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e1c1      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c62:	4b32      	ldr	r3, [pc, #200]	; (8005d2c <HAL_RCC_OscConfig+0x57c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d108      	bne.n	8005c88 <HAL_RCC_OscConfig+0x4d8>
 8005c76:	4b2c      	ldr	r3, [pc, #176]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7c:	4a2a      	ldr	r2, [pc, #168]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c86:	e024      	b.n	8005cd2 <HAL_RCC_OscConfig+0x522>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b05      	cmp	r3, #5
 8005c8e:	d110      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x502>
 8005c90:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	4a24      	ldr	r2, [pc, #144]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005c98:	f043 0304 	orr.w	r3, r3, #4
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ca0:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cb0:	e00f      	b.n	8005cd2 <HAL_RCC_OscConfig+0x522>
 8005cb2:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cc2:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005cca:	f023 0304 	bic.w	r3, r3, #4
 8005cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d016      	beq.n	8005d08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cda:	f7fd f81f 	bl	8002d1c <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce0:	e00a      	b.n	8005cf8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce2:	f7fd f81b 	bl	8002d1c <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e176      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <HAL_RCC_OscConfig+0x578>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0ed      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x532>
 8005d06:	e01a      	b.n	8005d3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d08:	f7fd f808 	bl	8002d1c <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d0e:	e00f      	b.n	8005d30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d10:	f7fd f804 	bl	8002d1c <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d906      	bls.n	8005d30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e15f      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
 8005d26:	bf00      	nop
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d30:	4baa      	ldr	r3, [pc, #680]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e8      	bne.n	8005d10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d3e:	7ffb      	ldrb	r3, [r7, #31]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d105      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d44:	4ba5      	ldr	r3, [pc, #660]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d48:	4aa4      	ldr	r2, [pc, #656]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0320 	and.w	r3, r3, #32
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d03c      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01c      	beq.n	8005d9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d64:	4b9d      	ldr	r3, [pc, #628]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d6a:	4a9c      	ldr	r2, [pc, #624]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7fc ffd2 	bl	8002d1c <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d7c:	f7fc ffce 	bl	8002d1c <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e12b      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d8e:	4b93      	ldr	r3, [pc, #588]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0ef      	beq.n	8005d7c <HAL_RCC_OscConfig+0x5cc>
 8005d9c:	e01b      	b.n	8005dd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d9e:	4b8f      	ldr	r3, [pc, #572]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005da4:	4a8d      	ldr	r2, [pc, #564]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dae:	f7fc ffb5 	bl	8002d1c <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005db6:	f7fc ffb1 	bl	8002d1c <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e10e      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dc8:	4b84      	ldr	r3, [pc, #528]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1ef      	bne.n	8005db6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8102 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	f040 80c5 	bne.w	8005f74 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005dea:	4b7c      	ldr	r3, [pc, #496]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f003 0203 	and.w	r2, r3, #3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d12c      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d123      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d11b      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d113      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d109      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	3b01      	subs	r3, #1
 8005e52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d067      	beq.n	8005f28 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b0c      	cmp	r3, #12
 8005e5c:	d062      	beq.n	8005f24 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e5e:	4b5f      	ldr	r3, [pc, #380]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0bb      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e6e:	4b5b      	ldr	r3, [pc, #364]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a5a      	ldr	r2, [pc, #360]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e7a:	f7fc ff4f 	bl	8002d1c <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e82:	f7fc ff4b 	bl	8002d1c <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e0a8      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e94:	4b51      	ldr	r3, [pc, #324]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f0      	bne.n	8005e82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ea0:	4b4e      	ldr	r3, [pc, #312]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	4b4e      	ldr	r3, [pc, #312]	; (8005fe0 <HAL_RCC_OscConfig+0x830>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005eb0:	3a01      	subs	r2, #1
 8005eb2:	0112      	lsls	r2, r2, #4
 8005eb4:	4311      	orrs	r1, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005eba:	0212      	lsls	r2, r2, #8
 8005ebc:	4311      	orrs	r1, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ec2:	0852      	lsrs	r2, r2, #1
 8005ec4:	3a01      	subs	r2, #1
 8005ec6:	0552      	lsls	r2, r2, #21
 8005ec8:	4311      	orrs	r1, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ece:	0852      	lsrs	r2, r2, #1
 8005ed0:	3a01      	subs	r2, #1
 8005ed2:	0652      	lsls	r2, r2, #25
 8005ed4:	4311      	orrs	r1, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005eda:	06d2      	lsls	r2, r2, #27
 8005edc:	430a      	orrs	r2, r1
 8005ede:	493f      	ldr	r1, [pc, #252]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ee4:	4b3d      	ldr	r3, [pc, #244]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a3c      	ldr	r2, [pc, #240]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ef0:	4b3a      	ldr	r3, [pc, #232]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a39      	ldr	r2, [pc, #228]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005efa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005efc:	f7fc ff0e 	bl	8002d1c <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f04:	f7fc ff0a 	bl	8002d1c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e067      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f16:	4b31      	ldr	r3, [pc, #196]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f22:	e05f      	b.n	8005fe4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e05e      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f28:	4b2c      	ldr	r3, [pc, #176]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d157      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f34:	4b29      	ldr	r3, [pc, #164]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a28      	ldr	r2, [pc, #160]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f40:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a25      	ldr	r2, [pc, #148]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f4c:	f7fc fee6 	bl	8002d1c <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f54:	f7fc fee2 	bl	8002d1c <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e03f      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f66:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x7a4>
 8005f72:	e037      	b.n	8005fe4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d02d      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7a:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f84:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f86:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005f92:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f98:	f023 0303 	bic.w	r3, r3, #3
 8005f9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	4a0e      	ldr	r2, [pc, #56]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005fa4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fae:	f7fc feb5 	bl	8002d1c <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb6:	f7fc feb1 	bl	8002d1c <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e00e      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fc8:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f0      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x806>
 8005fd4:	e006      	b.n	8005fe4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e005      	b.n	8005fe6 <HAL_RCC_OscConfig+0x836>
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop

08005ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0c8      	b.n	8006196 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006004:	4b66      	ldr	r3, [pc, #408]	; (80061a0 <HAL_RCC_ClockConfig+0x1b0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d910      	bls.n	8006034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006012:	4b63      	ldr	r3, [pc, #396]	; (80061a0 <HAL_RCC_ClockConfig+0x1b0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f023 0207 	bic.w	r2, r3, #7
 800601a:	4961      	ldr	r1, [pc, #388]	; (80061a0 <HAL_RCC_ClockConfig+0x1b0>)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	4313      	orrs	r3, r2
 8006020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006022:	4b5f      	ldr	r3, [pc, #380]	; (80061a0 <HAL_RCC_ClockConfig+0x1b0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d001      	beq.n	8006034 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e0b0      	b.n	8006196 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d04c      	beq.n	80060da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b03      	cmp	r3, #3
 8006046:	d107      	bne.n	8006058 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006048:	4b56      	ldr	r3, [pc, #344]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d121      	bne.n	8006098 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e09e      	b.n	8006196 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d107      	bne.n	8006070 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006060:	4b50      	ldr	r3, [pc, #320]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d115      	bne.n	8006098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e092      	b.n	8006196 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006078:	4b4a      	ldr	r3, [pc, #296]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e086      	b.n	8006196 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006088:	4b46      	ldr	r3, [pc, #280]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e07e      	b.n	8006196 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006098:	4b42      	ldr	r3, [pc, #264]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f023 0203 	bic.w	r2, r3, #3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	493f      	ldr	r1, [pc, #252]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060aa:	f7fc fe37 	bl	8002d1c <HAL_GetTick>
 80060ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b0:	e00a      	b.n	80060c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b2:	f7fc fe33 	bl	8002d1c <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e066      	b.n	8006196 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c8:	4b36      	ldr	r3, [pc, #216]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 020c 	and.w	r2, r3, #12
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d1eb      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e6:	4b2f      	ldr	r3, [pc, #188]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	492c      	ldr	r1, [pc, #176]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060f8:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <HAL_RCC_ClockConfig+0x1b0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d210      	bcs.n	8006128 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006106:	4b26      	ldr	r3, [pc, #152]	; (80061a0 <HAL_RCC_ClockConfig+0x1b0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f023 0207 	bic.w	r2, r3, #7
 800610e:	4924      	ldr	r1, [pc, #144]	; (80061a0 <HAL_RCC_ClockConfig+0x1b0>)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	4313      	orrs	r3, r2
 8006114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006116:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <HAL_RCC_ClockConfig+0x1b0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	429a      	cmp	r2, r3
 8006122:	d001      	beq.n	8006128 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e036      	b.n	8006196 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006134:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	4918      	ldr	r1, [pc, #96]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 8006142:	4313      	orrs	r3, r2
 8006144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006152:	4b14      	ldr	r3, [pc, #80]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	4910      	ldr	r1, [pc, #64]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 8006162:	4313      	orrs	r3, r2
 8006164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006166:	f000 f825 	bl	80061b4 <HAL_RCC_GetSysClockFreq>
 800616a:	4602      	mov	r2, r0
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <HAL_RCC_ClockConfig+0x1b4>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	091b      	lsrs	r3, r3, #4
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	490c      	ldr	r1, [pc, #48]	; (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006178:	5ccb      	ldrb	r3, [r1, r3]
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	fa22 f303 	lsr.w	r3, r2, r3
 8006182:	4a0a      	ldr	r2, [pc, #40]	; (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f7fc fbd8 	bl	8002940 <HAL_InitTick>
 8006190:	4603      	mov	r3, r0
 8006192:	72fb      	strb	r3, [r7, #11]

  return status;
 8006194:	7afb      	ldrb	r3, [r7, #11]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40022000 	.word	0x40022000
 80061a4:	40021000 	.word	0x40021000
 80061a8:	0800d964 	.word	0x0800d964
 80061ac:	20000000 	.word	0x20000000
 80061b0:	20000004 	.word	0x20000004

080061b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	; 0x24
 80061b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	2300      	movs	r3, #0
 80061c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061c2:	4b3e      	ldr	r3, [pc, #248]	; (80062bc <HAL_RCC_GetSysClockFreq+0x108>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 030c 	and.w	r3, r3, #12
 80061ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061cc:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <HAL_RCC_GetSysClockFreq+0x108>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_GetSysClockFreq+0x34>
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b0c      	cmp	r3, #12
 80061e0:	d121      	bne.n	8006226 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d11e      	bne.n	8006226 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061e8:	4b34      	ldr	r3, [pc, #208]	; (80062bc <HAL_RCC_GetSysClockFreq+0x108>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d107      	bne.n	8006204 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061f4:	4b31      	ldr	r3, [pc, #196]	; (80062bc <HAL_RCC_GetSysClockFreq+0x108>)
 80061f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061fa:	0a1b      	lsrs	r3, r3, #8
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e005      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006204:	4b2d      	ldr	r3, [pc, #180]	; (80062bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	091b      	lsrs	r3, r3, #4
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006210:	4a2b      	ldr	r2, [pc, #172]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006218:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10d      	bne.n	800623c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006224:	e00a      	b.n	800623c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b04      	cmp	r3, #4
 800622a:	d102      	bne.n	8006232 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800622c:	4b25      	ldr	r3, [pc, #148]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e004      	b.n	800623c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d101      	bne.n	800623c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006238:	4b22      	ldr	r3, [pc, #136]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800623a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b0c      	cmp	r3, #12
 8006240:	d134      	bne.n	80062ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006242:	4b1e      	ldr	r3, [pc, #120]	; (80062bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d003      	beq.n	800625a <HAL_RCC_GetSysClockFreq+0xa6>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d003      	beq.n	8006260 <HAL_RCC_GetSysClockFreq+0xac>
 8006258:	e005      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800625a:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800625c:	617b      	str	r3, [r7, #20]
      break;
 800625e:	e005      	b.n	800626c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006260:	4b18      	ldr	r3, [pc, #96]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006262:	617b      	str	r3, [r7, #20]
      break;
 8006264:	e002      	b.n	800626c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	617b      	str	r3, [r7, #20]
      break;
 800626a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800626c:	4b13      	ldr	r3, [pc, #76]	; (80062bc <HAL_RCC_GetSysClockFreq+0x108>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	091b      	lsrs	r3, r3, #4
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	3301      	adds	r3, #1
 8006278:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800627a:	4b10      	ldr	r3, [pc, #64]	; (80062bc <HAL_RCC_GetSysClockFreq+0x108>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	0a1b      	lsrs	r3, r3, #8
 8006280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	fb02 f203 	mul.w	r2, r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006290:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	0e5b      	lsrs	r3, r3, #25
 8006298:	f003 0303 	and.w	r3, r3, #3
 800629c:	3301      	adds	r3, #1
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062ac:	69bb      	ldr	r3, [r7, #24]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3724      	adds	r7, #36	; 0x24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40021000 	.word	0x40021000
 80062c0:	0800d97c 	.word	0x0800d97c
 80062c4:	00f42400 	.word	0x00f42400

080062c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062cc:	4b03      	ldr	r3, [pc, #12]	; (80062dc <HAL_RCC_GetHCLKFreq+0x14>)
 80062ce:	681b      	ldr	r3, [r3, #0]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000000 	.word	0x20000000

080062e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062e4:	f7ff fff0 	bl	80062c8 <HAL_RCC_GetHCLKFreq>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	4904      	ldr	r1, [pc, #16]	; (8006308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062f6:	5ccb      	ldrb	r3, [r1, r3]
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006300:	4618      	mov	r0, r3
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40021000 	.word	0x40021000
 8006308:	0800d974 	.word	0x0800d974

0800630c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006310:	f7ff ffda 	bl	80062c8 <HAL_RCC_GetHCLKFreq>
 8006314:	4602      	mov	r2, r0
 8006316:	4b06      	ldr	r3, [pc, #24]	; (8006330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	0adb      	lsrs	r3, r3, #11
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	4904      	ldr	r1, [pc, #16]	; (8006334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006322:	5ccb      	ldrb	r3, [r1, r3]
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800632c:	4618      	mov	r0, r3
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40021000 	.word	0x40021000
 8006334:	0800d974 	.word	0x0800d974

08006338 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	220f      	movs	r2, #15
 8006346:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006348:	4b12      	ldr	r3, [pc, #72]	; (8006394 <HAL_RCC_GetClockConfig+0x5c>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0203 	and.w	r2, r3, #3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <HAL_RCC_GetClockConfig+0x5c>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <HAL_RCC_GetClockConfig+0x5c>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800636c:	4b09      	ldr	r3, [pc, #36]	; (8006394 <HAL_RCC_GetClockConfig+0x5c>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	08db      	lsrs	r3, r3, #3
 8006372:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <HAL_RCC_GetClockConfig+0x60>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0207 	and.w	r2, r3, #7
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	601a      	str	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000
 8006398:	40022000 	.word	0x40022000

0800639c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063a4:	2300      	movs	r3, #0
 80063a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063a8:	4b2a      	ldr	r3, [pc, #168]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063b4:	f7ff f998 	bl	80056e8 <HAL_PWREx_GetVoltageRange>
 80063b8:	6178      	str	r0, [r7, #20]
 80063ba:	e014      	b.n	80063e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063bc:	4b25      	ldr	r3, [pc, #148]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c0:	4a24      	ldr	r2, [pc, #144]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c6:	6593      	str	r3, [r2, #88]	; 0x58
 80063c8:	4b22      	ldr	r3, [pc, #136]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063d4:	f7ff f988 	bl	80056e8 <HAL_PWREx_GetVoltageRange>
 80063d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063da:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063de:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ec:	d10b      	bne.n	8006406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b80      	cmp	r3, #128	; 0x80
 80063f2:	d919      	bls.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2ba0      	cmp	r3, #160	; 0xa0
 80063f8:	d902      	bls.n	8006400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063fa:	2302      	movs	r3, #2
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	e013      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006400:	2301      	movs	r3, #1
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	e010      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b80      	cmp	r3, #128	; 0x80
 800640a:	d902      	bls.n	8006412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800640c:	2303      	movs	r3, #3
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	e00a      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d102      	bne.n	800641e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006418:	2302      	movs	r3, #2
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	e004      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b70      	cmp	r3, #112	; 0x70
 8006422:	d101      	bne.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006424:	2301      	movs	r3, #1
 8006426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 0207 	bic.w	r2, r3, #7
 8006430:	4909      	ldr	r1, [pc, #36]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d001      	beq.n	800644a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40021000 	.word	0x40021000
 8006458:	40022000 	.word	0x40022000

0800645c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006464:	2300      	movs	r3, #0
 8006466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006468:	2300      	movs	r3, #0
 800646a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006474:	2b00      	cmp	r3, #0
 8006476:	d031      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006480:	d01a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006482:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006486:	d814      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800648c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006490:	d10f      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006492:	4bac      	ldr	r3, [pc, #688]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	4aab      	ldr	r2, [pc, #684]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800649c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800649e:	e00c      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3304      	adds	r3, #4
 80064a4:	2100      	movs	r1, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 f9dc 	bl	8006864 <RCCEx_PLLSAI1_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064b0:	e003      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	74fb      	strb	r3, [r7, #19]
      break;
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80064b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ba:	7cfb      	ldrb	r3, [r7, #19]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10b      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064c0:	4ba0      	ldr	r3, [pc, #640]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ce:	499d      	ldr	r1, [pc, #628]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80064d6:	e001      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	7cfb      	ldrb	r3, [r7, #19]
 80064da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 8099 	beq.w	800661c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ea:	2300      	movs	r3, #0
 80064ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064ee:	4b95      	ldr	r3, [pc, #596]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80064f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80064fe:	2300      	movs	r3, #0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00d      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006504:	4b8f      	ldr	r3, [pc, #572]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	4a8e      	ldr	r2, [pc, #568]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800650a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650e:	6593      	str	r3, [r2, #88]	; 0x58
 8006510:	4b8c      	ldr	r3, [pc, #560]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800651c:	2301      	movs	r3, #1
 800651e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006520:	4b89      	ldr	r3, [pc, #548]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a88      	ldr	r2, [pc, #544]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800652c:	f7fc fbf6 	bl	8002d1c <HAL_GetTick>
 8006530:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006532:	e009      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006534:	f7fc fbf2 	bl	8002d1c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d902      	bls.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	74fb      	strb	r3, [r7, #19]
        break;
 8006546:	e005      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006548:	4b7f      	ldr	r3, [pc, #508]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0ef      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006554:	7cfb      	ldrb	r3, [r7, #19]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d155      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800655a:	4b7a      	ldr	r3, [pc, #488]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006564:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01e      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	429a      	cmp	r2, r3
 8006574:	d019      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006576:	4b73      	ldr	r3, [pc, #460]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006580:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006582:	4b70      	ldr	r3, [pc, #448]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006588:	4a6e      	ldr	r2, [pc, #440]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800658a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800658e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006592:	4b6c      	ldr	r3, [pc, #432]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006598:	4a6a      	ldr	r2, [pc, #424]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800659a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800659e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065a2:	4a68      	ldr	r2, [pc, #416]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d016      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b4:	f7fc fbb2 	bl	8002d1c <HAL_GetTick>
 80065b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065ba:	e00b      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065bc:	f7fc fbae 	bl	8002d1c <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d902      	bls.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	74fb      	strb	r3, [r7, #19]
            break;
 80065d2:	e006      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065d4:	4b5b      	ldr	r3, [pc, #364]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0ec      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80065e2:	7cfb      	ldrb	r3, [r7, #19]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065e8:	4b56      	ldr	r3, [pc, #344]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80065ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f6:	4953      	ldr	r1, [pc, #332]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80065fe:	e004      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006600:	7cfb      	ldrb	r3, [r7, #19]
 8006602:	74bb      	strb	r3, [r7, #18]
 8006604:	e001      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006606:	7cfb      	ldrb	r3, [r7, #19]
 8006608:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800660a:	7c7b      	ldrb	r3, [r7, #17]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d105      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006610:	4b4c      	ldr	r3, [pc, #304]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006614:	4a4b      	ldr	r2, [pc, #300]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800661a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006628:	4b46      	ldr	r3, [pc, #280]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662e:	f023 0203 	bic.w	r2, r3, #3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	4943      	ldr	r1, [pc, #268]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800664a:	4b3e      	ldr	r3, [pc, #248]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006650:	f023 020c 	bic.w	r2, r3, #12
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	493a      	ldr	r1, [pc, #232]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800666c:	4b35      	ldr	r3, [pc, #212]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006672:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	4932      	ldr	r1, [pc, #200]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800668e:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	4929      	ldr	r1, [pc, #164]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066b0:	4b24      	ldr	r3, [pc, #144]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80066b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	4921      	ldr	r1, [pc, #132]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	4918      	ldr	r1, [pc, #96]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066f4:	4b13      	ldr	r3, [pc, #76]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80066f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	4910      	ldr	r1, [pc, #64]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d02c      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	4907      	ldr	r1, [pc, #28]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006734:	d10a      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006736:	4b03      	ldr	r3, [pc, #12]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	4a02      	ldr	r2, [pc, #8]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800673c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006740:	60d3      	str	r3, [r2, #12]
 8006742:	e015      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006744:	40021000 	.word	0x40021000
 8006748:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006754:	d10c      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3304      	adds	r3, #4
 800675a:	2101      	movs	r1, #1
 800675c:	4618      	mov	r0, r3
 800675e:	f000 f881 	bl	8006864 <RCCEx_PLLSAI1_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006766:	7cfb      	ldrb	r3, [r7, #19]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800676c:	7cfb      	ldrb	r3, [r7, #19]
 800676e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d028      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800677c:	4b30      	ldr	r3, [pc, #192]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678a:	492d      	ldr	r1, [pc, #180]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800679a:	d106      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800679c:	4b28      	ldr	r3, [pc, #160]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4a27      	ldr	r2, [pc, #156]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067a6:	60d3      	str	r3, [r2, #12]
 80067a8:	e011      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067b2:	d10c      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3304      	adds	r3, #4
 80067b8:	2101      	movs	r1, #1
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f852 	bl	8006864 <RCCEx_PLLSAI1_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067c4:	7cfb      	ldrb	r3, [r7, #19]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80067ca:	7cfb      	ldrb	r3, [r7, #19]
 80067cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d01c      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067da:	4b19      	ldr	r3, [pc, #100]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e8:	4915      	ldr	r1, [pc, #84]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067f8:	d10c      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3304      	adds	r3, #4
 80067fe:	2102      	movs	r1, #2
 8006800:	4618      	mov	r0, r3
 8006802:	f000 f82f 	bl	8006864 <RCCEx_PLLSAI1_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800680a:	7cfb      	ldrb	r3, [r7, #19]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006810:	7cfb      	ldrb	r3, [r7, #19]
 8006812:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006820:	4b07      	ldr	r3, [pc, #28]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682e:	4904      	ldr	r1, [pc, #16]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006836:	7cbb      	ldrb	r3, [r7, #18]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40021000 	.word	0x40021000

08006844 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a04      	ldr	r2, [pc, #16]	; (8006860 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800684e:	f043 0304 	orr.w	r3, r3, #4
 8006852:	6013      	str	r3, [r2, #0]
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40021000 	.word	0x40021000

08006864 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006872:	4b74      	ldr	r3, [pc, #464]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d018      	beq.n	80068b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800687e:	4b71      	ldr	r3, [pc, #452]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0203 	and.w	r2, r3, #3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d10d      	bne.n	80068aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
       ||
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006896:	4b6b      	ldr	r3, [pc, #428]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	091b      	lsrs	r3, r3, #4
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
       ||
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d047      	beq.n	800693a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
 80068ae:	e044      	b.n	800693a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d018      	beq.n	80068ea <RCCEx_PLLSAI1_Config+0x86>
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d825      	bhi.n	8006908 <RCCEx_PLLSAI1_Config+0xa4>
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d002      	beq.n	80068c6 <RCCEx_PLLSAI1_Config+0x62>
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d009      	beq.n	80068d8 <RCCEx_PLLSAI1_Config+0x74>
 80068c4:	e020      	b.n	8006908 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068c6:	4b5f      	ldr	r3, [pc, #380]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d11d      	bne.n	800690e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068d6:	e01a      	b.n	800690e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068d8:	4b5a      	ldr	r3, [pc, #360]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d116      	bne.n	8006912 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068e8:	e013      	b.n	8006912 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068ea:	4b56      	ldr	r3, [pc, #344]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10f      	bne.n	8006916 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068f6:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006906:	e006      	b.n	8006916 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
      break;
 800690c:	e004      	b.n	8006918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800690e:	bf00      	nop
 8006910:	e002      	b.n	8006918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006916:	bf00      	nop
    }

    if(status == HAL_OK)
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10d      	bne.n	800693a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800691e:	4b49      	ldr	r3, [pc, #292]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	3b01      	subs	r3, #1
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	430b      	orrs	r3, r1
 8006934:	4943      	ldr	r1, [pc, #268]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006936:	4313      	orrs	r3, r2
 8006938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d17c      	bne.n	8006a3a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006940:	4b40      	ldr	r3, [pc, #256]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a3f      	ldr	r2, [pc, #252]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800694a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800694c:	f7fc f9e6 	bl	8002d1c <HAL_GetTick>
 8006950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006952:	e009      	b.n	8006968 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006954:	f7fc f9e2 	bl	8002d1c <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d902      	bls.n	8006968 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	73fb      	strb	r3, [r7, #15]
        break;
 8006966:	e005      	b.n	8006974 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006968:	4b36      	ldr	r3, [pc, #216]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1ef      	bne.n	8006954 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d15f      	bne.n	8006a3a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d110      	bne.n	80069a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006980:	4b30      	ldr	r3, [pc, #192]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6892      	ldr	r2, [r2, #8]
 8006990:	0211      	lsls	r1, r2, #8
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	68d2      	ldr	r2, [r2, #12]
 8006996:	06d2      	lsls	r2, r2, #27
 8006998:	430a      	orrs	r2, r1
 800699a:	492a      	ldr	r1, [pc, #168]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 800699c:	4313      	orrs	r3, r2
 800699e:	610b      	str	r3, [r1, #16]
 80069a0:	e027      	b.n	80069f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d112      	bne.n	80069ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069a8:	4b26      	ldr	r3, [pc, #152]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80069b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6892      	ldr	r2, [r2, #8]
 80069b8:	0211      	lsls	r1, r2, #8
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6912      	ldr	r2, [r2, #16]
 80069be:	0852      	lsrs	r2, r2, #1
 80069c0:	3a01      	subs	r2, #1
 80069c2:	0552      	lsls	r2, r2, #21
 80069c4:	430a      	orrs	r2, r1
 80069c6:	491f      	ldr	r1, [pc, #124]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	610b      	str	r3, [r1, #16]
 80069cc:	e011      	b.n	80069f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069ce:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6892      	ldr	r2, [r2, #8]
 80069de:	0211      	lsls	r1, r2, #8
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6952      	ldr	r2, [r2, #20]
 80069e4:	0852      	lsrs	r2, r2, #1
 80069e6:	3a01      	subs	r2, #1
 80069e8:	0652      	lsls	r2, r2, #25
 80069ea:	430a      	orrs	r2, r1
 80069ec:	4915      	ldr	r1, [pc, #84]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a13      	ldr	r2, [pc, #76]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069fe:	f7fc f98d 	bl	8002d1c <HAL_GetTick>
 8006a02:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a04:	e009      	b.n	8006a1a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a06:	f7fc f989 	bl	8002d1c <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d902      	bls.n	8006a1a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	73fb      	strb	r3, [r7, #15]
          break;
 8006a18:	e005      	b.n	8006a26 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0ef      	beq.n	8006a06 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d106      	bne.n	8006a3a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	4903      	ldr	r1, [pc, #12]	; (8006a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40021000 	.word	0x40021000

08006a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e049      	b.n	8006aee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f841 	bl	8006af6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 fb42 	bl	8007110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d001      	beq.n	8006b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e03b      	b.n	8006b9c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a19      	ldr	r2, [pc, #100]	; (8006ba8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d009      	beq.n	8006b5a <HAL_TIM_Base_Start_IT+0x4e>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4e:	d004      	beq.n	8006b5a <HAL_TIM_Base_Start_IT+0x4e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a15      	ldr	r2, [pc, #84]	; (8006bac <HAL_TIM_Base_Start_IT+0xa0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d115      	bne.n	8006b86 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <HAL_TIM_Base_Start_IT+0xa4>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b06      	cmp	r3, #6
 8006b6a:	d015      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0x8c>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b72:	d011      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b84:	e008      	b.n	8006b98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0201 	orr.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e000      	b.n	8006b9a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	40012c00 	.word	0x40012c00
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	00010007 	.word	0x00010007

08006bb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e049      	b.n	8006c5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fb fd70 	bl	80026c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f000 fa8c 	bl	8007110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d122      	bne.n	8006cbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d11b      	bne.n	8006cbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f06f 0202 	mvn.w	r2, #2
 8006c8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fa15 	bl	80070d4 <HAL_TIM_IC_CaptureCallback>
 8006caa:	e005      	b.n	8006cb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fa07 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa18 	bl	80070e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d122      	bne.n	8006d12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d11b      	bne.n	8006d12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f06f 0204 	mvn.w	r2, #4
 8006ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f9eb 	bl	80070d4 <HAL_TIM_IC_CaptureCallback>
 8006cfe:	e005      	b.n	8006d0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f9dd 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f9ee 	bl	80070e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d122      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d11b      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f06f 0208 	mvn.w	r2, #8
 8006d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	f003 0303 	and.w	r3, r3, #3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f9c1 	bl	80070d4 <HAL_TIM_IC_CaptureCallback>
 8006d52:	e005      	b.n	8006d60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f9b3 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9c4 	bl	80070e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b10      	cmp	r3, #16
 8006d72:	d122      	bne.n	8006dba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f003 0310 	and.w	r3, r3, #16
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d11b      	bne.n	8006dba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f06f 0210 	mvn.w	r2, #16
 8006d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2208      	movs	r2, #8
 8006d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f997 	bl	80070d4 <HAL_TIM_IC_CaptureCallback>
 8006da6:	e005      	b.n	8006db4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f989 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f99a 	bl	80070e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10e      	bne.n	8006de6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d107      	bne.n	8006de6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f06f 0201 	mvn.w	r2, #1
 8006dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7fb fb0b 	bl	80023fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df0:	2b80      	cmp	r3, #128	; 0x80
 8006df2:	d10e      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfe:	2b80      	cmp	r3, #128	; 0x80
 8006e00:	d107      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fd49 	bl	80078a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e20:	d10e      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2c:	2b80      	cmp	r3, #128	; 0x80
 8006e2e:	d107      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fd3c 	bl	80078b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d10e      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e58:	2b40      	cmp	r3, #64	; 0x40
 8006e5a:	d107      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f948 	bl	80070fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	d10e      	bne.n	8006e98 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d107      	bne.n	8006e98 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0220 	mvn.w	r2, #32
 8006e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fcfc 	bl	8007890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e98:	bf00      	nop
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e0fd      	b.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b14      	cmp	r3, #20
 8006ec6:	f200 80f0 	bhi.w	80070aa <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006eca:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006f25 	.word	0x08006f25
 8006ed4:	080070ab 	.word	0x080070ab
 8006ed8:	080070ab 	.word	0x080070ab
 8006edc:	080070ab 	.word	0x080070ab
 8006ee0:	08006f65 	.word	0x08006f65
 8006ee4:	080070ab 	.word	0x080070ab
 8006ee8:	080070ab 	.word	0x080070ab
 8006eec:	080070ab 	.word	0x080070ab
 8006ef0:	08006fa7 	.word	0x08006fa7
 8006ef4:	080070ab 	.word	0x080070ab
 8006ef8:	080070ab 	.word	0x080070ab
 8006efc:	080070ab 	.word	0x080070ab
 8006f00:	08006fe7 	.word	0x08006fe7
 8006f04:	080070ab 	.word	0x080070ab
 8006f08:	080070ab 	.word	0x080070ab
 8006f0c:	080070ab 	.word	0x080070ab
 8006f10:	08007029 	.word	0x08007029
 8006f14:	080070ab 	.word	0x080070ab
 8006f18:	080070ab 	.word	0x080070ab
 8006f1c:	080070ab 	.word	0x080070ab
 8006f20:	08007069 	.word	0x08007069
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68b9      	ldr	r1, [r7, #8]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 f954 	bl	80071d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0208 	orr.w	r2, r2, #8
 8006f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0204 	bic.w	r2, r2, #4
 8006f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6999      	ldr	r1, [r3, #24]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	691a      	ldr	r2, [r3, #16]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	619a      	str	r2, [r3, #24]
      break;
 8006f62:	e0a3      	b.n	80070ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f9b0 	bl	80072d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699a      	ldr	r2, [r3, #24]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6999      	ldr	r1, [r3, #24]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	021a      	lsls	r2, r3, #8
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	619a      	str	r2, [r3, #24]
      break;
 8006fa4:	e082      	b.n	80070ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fa09 	bl	80073c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69da      	ldr	r2, [r3, #28]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f042 0208 	orr.w	r2, r2, #8
 8006fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69da      	ldr	r2, [r3, #28]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0204 	bic.w	r2, r2, #4
 8006fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69d9      	ldr	r1, [r3, #28]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	61da      	str	r2, [r3, #28]
      break;
 8006fe4:	e062      	b.n	80070ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fa61 	bl	80074b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69da      	ldr	r2, [r3, #28]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69d9      	ldr	r1, [r3, #28]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	021a      	lsls	r2, r3, #8
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	61da      	str	r2, [r3, #28]
      break;
 8007026:	e041      	b.n	80070ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fa9e 	bl	8007570 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0208 	orr.w	r2, r2, #8
 8007042:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0204 	bic.w	r2, r2, #4
 8007052:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007066:	e021      	b.n	80070ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fad6 	bl	8007620 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	021a      	lsls	r2, r3, #8
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070a8:	e000      	b.n	80070ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80070aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop

080070c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a2a      	ldr	r2, [pc, #168]	; (80071cc <TIM_Base_SetConfig+0xbc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0x20>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712e:	d108      	bne.n	8007142 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a21      	ldr	r2, [pc, #132]	; (80071cc <TIM_Base_SetConfig+0xbc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00b      	beq.n	8007162 <TIM_Base_SetConfig+0x52>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007150:	d007      	beq.n	8007162 <TIM_Base_SetConfig+0x52>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a1e      	ldr	r2, [pc, #120]	; (80071d0 <TIM_Base_SetConfig+0xc0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d003      	beq.n	8007162 <TIM_Base_SetConfig+0x52>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <TIM_Base_SetConfig+0xc4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d108      	bne.n	8007174 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a0c      	ldr	r2, [pc, #48]	; (80071cc <TIM_Base_SetConfig+0xbc>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d007      	beq.n	80071b0 <TIM_Base_SetConfig+0xa0>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a0b      	ldr	r2, [pc, #44]	; (80071d0 <TIM_Base_SetConfig+0xc0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_Base_SetConfig+0xa0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a0a      	ldr	r2, [pc, #40]	; (80071d4 <TIM_Base_SetConfig+0xc4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d103      	bne.n	80071b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	615a      	str	r2, [r3, #20]
}
 80071be:	bf00      	nop
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40012c00 	.word	0x40012c00
 80071d0:	40014000 	.word	0x40014000
 80071d4:	40014400 	.word	0x40014400

080071d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f023 0201 	bic.w	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f023 0302 	bic.w	r3, r3, #2
 8007224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a24      	ldr	r2, [pc, #144]	; (80072c4 <TIM_OC1_SetConfig+0xec>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d007      	beq.n	8007248 <TIM_OC1_SetConfig+0x70>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a23      	ldr	r2, [pc, #140]	; (80072c8 <TIM_OC1_SetConfig+0xf0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_OC1_SetConfig+0x70>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a22      	ldr	r2, [pc, #136]	; (80072cc <TIM_OC1_SetConfig+0xf4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d10c      	bne.n	8007262 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0308 	bic.w	r3, r3, #8
 800724e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f023 0304 	bic.w	r3, r3, #4
 8007260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a17      	ldr	r2, [pc, #92]	; (80072c4 <TIM_OC1_SetConfig+0xec>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <TIM_OC1_SetConfig+0xa2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a16      	ldr	r2, [pc, #88]	; (80072c8 <TIM_OC1_SetConfig+0xf0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d003      	beq.n	800727a <TIM_OC1_SetConfig+0xa2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a15      	ldr	r2, [pc, #84]	; (80072cc <TIM_OC1_SetConfig+0xf4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d111      	bne.n	800729e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	621a      	str	r2, [r3, #32]
}
 80072b8:	bf00      	nop
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	40014000 	.word	0x40014000
 80072cc:	40014400 	.word	0x40014400

080072d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0210 	bic.w	r2, r3, #16
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0320 	bic.w	r3, r3, #32
 800731e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a22      	ldr	r2, [pc, #136]	; (80073b8 <TIM_OC2_SetConfig+0xe8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d10d      	bne.n	8007350 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800733a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a19      	ldr	r2, [pc, #100]	; (80073b8 <TIM_OC2_SetConfig+0xe8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d007      	beq.n	8007368 <TIM_OC2_SetConfig+0x98>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a18      	ldr	r2, [pc, #96]	; (80073bc <TIM_OC2_SetConfig+0xec>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_OC2_SetConfig+0x98>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a17      	ldr	r2, [pc, #92]	; (80073c0 <TIM_OC2_SetConfig+0xf0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d113      	bne.n	8007390 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800736e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40012c00 	.word	0x40012c00
 80073bc:	40014000 	.word	0x40014000
 80073c0:	40014400 	.word	0x40014400

080073c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0303 	bic.w	r3, r3, #3
 80073fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a21      	ldr	r2, [pc, #132]	; (80074a8 <TIM_OC3_SetConfig+0xe4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d10d      	bne.n	8007442 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800742c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <TIM_OC3_SetConfig+0xe4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <TIM_OC3_SetConfig+0x96>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a17      	ldr	r2, [pc, #92]	; (80074ac <TIM_OC3_SetConfig+0xe8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d003      	beq.n	800745a <TIM_OC3_SetConfig+0x96>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a16      	ldr	r2, [pc, #88]	; (80074b0 <TIM_OC3_SetConfig+0xec>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d113      	bne.n	8007482 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	621a      	str	r2, [r3, #32]
}
 800749c:	bf00      	nop
 800749e:	371c      	adds	r7, #28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40012c00 	.word	0x40012c00
 80074ac:	40014000 	.word	0x40014000
 80074b0:	40014400 	.word	0x40014400

080074b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	031b      	lsls	r3, r3, #12
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a14      	ldr	r2, [pc, #80]	; (8007564 <TIM_OC4_SetConfig+0xb0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d007      	beq.n	8007528 <TIM_OC4_SetConfig+0x74>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a13      	ldr	r2, [pc, #76]	; (8007568 <TIM_OC4_SetConfig+0xb4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d003      	beq.n	8007528 <TIM_OC4_SetConfig+0x74>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a12      	ldr	r2, [pc, #72]	; (800756c <TIM_OC4_SetConfig+0xb8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d109      	bne.n	800753c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	019b      	lsls	r3, r3, #6
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	40012c00 	.word	0x40012c00
 8007568:	40014000 	.word	0x40014000
 800756c:	40014400 	.word	0x40014400

08007570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a13      	ldr	r2, [pc, #76]	; (8007614 <TIM_OC5_SetConfig+0xa4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d007      	beq.n	80075da <TIM_OC5_SetConfig+0x6a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a12      	ldr	r2, [pc, #72]	; (8007618 <TIM_OC5_SetConfig+0xa8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d003      	beq.n	80075da <TIM_OC5_SetConfig+0x6a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a11      	ldr	r2, [pc, #68]	; (800761c <TIM_OC5_SetConfig+0xac>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d109      	bne.n	80075ee <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	021b      	lsls	r3, r3, #8
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	621a      	str	r2, [r3, #32]
}
 8007608:	bf00      	nop
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	40012c00 	.word	0x40012c00
 8007618:	40014000 	.word	0x40014000
 800761c:	40014400 	.word	0x40014400

08007620 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800764e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	051b      	lsls	r3, r3, #20
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	4313      	orrs	r3, r2
 8007672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <TIM_OC6_SetConfig+0xa8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d007      	beq.n	800768c <TIM_OC6_SetConfig+0x6c>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a13      	ldr	r2, [pc, #76]	; (80076cc <TIM_OC6_SetConfig+0xac>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_OC6_SetConfig+0x6c>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a12      	ldr	r2, [pc, #72]	; (80076d0 <TIM_OC6_SetConfig+0xb0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d109      	bne.n	80076a0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007692:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	029b      	lsls	r3, r3, #10
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40012c00 	.word	0x40012c00
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40014400 	.word	0x40014400

080076d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e04f      	b.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a21      	ldr	r2, [pc, #132]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d108      	bne.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800771c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	4313      	orrs	r3, r2
 8007726:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a14      	ldr	r2, [pc, #80]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d009      	beq.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007754:	d004      	beq.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a10      	ldr	r2, [pc, #64]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10c      	bne.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	4313      	orrs	r3, r2
 8007770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	40012c00 	.word	0x40012c00
 800779c:	40014000 	.word	0x40014000

080077a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e060      	b.n	800787e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	041b      	lsls	r3, r3, #16
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a14      	ldr	r2, [pc, #80]	; (800788c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d115      	bne.n	800786c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	051b      	lsls	r3, r3, #20
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	40012c00 	.word	0x40012c00

08007890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e040      	b.n	8007960 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fa ff76 	bl	80027e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2224      	movs	r2, #36	; 0x24
 80078f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f8c0 	bl	8007a90 <UART_SetConfig>
 8007910:	4603      	mov	r3, r0
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e022      	b.n	8007960 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fac0 	bl	8007ea8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fb47 	bl	8007fec <UART_CheckIdleState>
 800795e:	4603      	mov	r3, r0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	; 0x28
 800796c:	af02      	add	r7, sp, #8
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	4613      	mov	r3, r2
 8007976:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800797c:	2b20      	cmp	r3, #32
 800797e:	f040 8082 	bne.w	8007a86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <HAL_UART_Transmit+0x26>
 8007988:	88fb      	ldrh	r3, [r7, #6]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e07a      	b.n	8007a88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007998:	2b01      	cmp	r3, #1
 800799a:	d101      	bne.n	80079a0 <HAL_UART_Transmit+0x38>
 800799c:	2302      	movs	r3, #2
 800799e:	e073      	b.n	8007a88 <HAL_UART_Transmit+0x120>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2221      	movs	r2, #33	; 0x21
 80079b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079b6:	f7fb f9b1 	bl	8002d1c <HAL_GetTick>
 80079ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	88fa      	ldrh	r2, [r7, #6]
 80079c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	88fa      	ldrh	r2, [r7, #6]
 80079c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d4:	d108      	bne.n	80079e8 <HAL_UART_Transmit+0x80>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	61bb      	str	r3, [r7, #24]
 80079e6:	e003      	b.n	80079f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80079f8:	e02d      	b.n	8007a56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2200      	movs	r2, #0
 8007a02:	2180      	movs	r1, #128	; 0x80
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fb3a 	bl	800807e <UART_WaitOnFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e039      	b.n	8007a88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10b      	bne.n	8007a32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	881a      	ldrh	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a26:	b292      	uxth	r2, r2
 8007a28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	3302      	adds	r3, #2
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	e008      	b.n	8007a44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	b292      	uxth	r2, r2
 8007a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	3301      	adds	r3, #1
 8007a42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1cb      	bne.n	80079fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2140      	movs	r1, #64	; 0x40
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fb06 	bl	800807e <UART_WaitOnFlagUntilTimeout>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e005      	b.n	8007a88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	e000      	b.n	8007a88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007a86:	2302      	movs	r3, #2
  }
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a90:	b5b0      	push	{r4, r5, r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4baf      	ldr	r3, [pc, #700]	; (8007d78 <UART_SetConfig+0x2e8>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	69f9      	ldr	r1, [r7, #28]
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4aa4      	ldr	r2, [pc, #656]	; (8007d7c <UART_SetConfig+0x2ec>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a9b      	ldr	r2, [pc, #620]	; (8007d80 <UART_SetConfig+0x2f0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d121      	bne.n	8007b5a <UART_SetConfig+0xca>
 8007b16:	4b9b      	ldr	r3, [pc, #620]	; (8007d84 <UART_SetConfig+0x2f4>)
 8007b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1c:	f003 0303 	and.w	r3, r3, #3
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d817      	bhi.n	8007b54 <UART_SetConfig+0xc4>
 8007b24:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <UART_SetConfig+0x9c>)
 8007b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2a:	bf00      	nop
 8007b2c:	08007b3d 	.word	0x08007b3d
 8007b30:	08007b49 	.word	0x08007b49
 8007b34:	08007b43 	.word	0x08007b43
 8007b38:	08007b4f 	.word	0x08007b4f
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	76fb      	strb	r3, [r7, #27]
 8007b40:	e070      	b.n	8007c24 <UART_SetConfig+0x194>
 8007b42:	2302      	movs	r3, #2
 8007b44:	76fb      	strb	r3, [r7, #27]
 8007b46:	e06d      	b.n	8007c24 <UART_SetConfig+0x194>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	76fb      	strb	r3, [r7, #27]
 8007b4c:	e06a      	b.n	8007c24 <UART_SetConfig+0x194>
 8007b4e:	2308      	movs	r3, #8
 8007b50:	76fb      	strb	r3, [r7, #27]
 8007b52:	e067      	b.n	8007c24 <UART_SetConfig+0x194>
 8007b54:	2310      	movs	r3, #16
 8007b56:	76fb      	strb	r3, [r7, #27]
 8007b58:	e064      	b.n	8007c24 <UART_SetConfig+0x194>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a8a      	ldr	r2, [pc, #552]	; (8007d88 <UART_SetConfig+0x2f8>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d132      	bne.n	8007bca <UART_SetConfig+0x13a>
 8007b64:	4b87      	ldr	r3, [pc, #540]	; (8007d84 <UART_SetConfig+0x2f4>)
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6a:	f003 030c 	and.w	r3, r3, #12
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d828      	bhi.n	8007bc4 <UART_SetConfig+0x134>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <UART_SetConfig+0xe8>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007bad 	.word	0x08007bad
 8007b7c:	08007bc5 	.word	0x08007bc5
 8007b80:	08007bc5 	.word	0x08007bc5
 8007b84:	08007bc5 	.word	0x08007bc5
 8007b88:	08007bb9 	.word	0x08007bb9
 8007b8c:	08007bc5 	.word	0x08007bc5
 8007b90:	08007bc5 	.word	0x08007bc5
 8007b94:	08007bc5 	.word	0x08007bc5
 8007b98:	08007bb3 	.word	0x08007bb3
 8007b9c:	08007bc5 	.word	0x08007bc5
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bc5 	.word	0x08007bc5
 8007ba8:	08007bbf 	.word	0x08007bbf
 8007bac:	2300      	movs	r3, #0
 8007bae:	76fb      	strb	r3, [r7, #27]
 8007bb0:	e038      	b.n	8007c24 <UART_SetConfig+0x194>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	76fb      	strb	r3, [r7, #27]
 8007bb6:	e035      	b.n	8007c24 <UART_SetConfig+0x194>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	76fb      	strb	r3, [r7, #27]
 8007bbc:	e032      	b.n	8007c24 <UART_SetConfig+0x194>
 8007bbe:	2308      	movs	r3, #8
 8007bc0:	76fb      	strb	r3, [r7, #27]
 8007bc2:	e02f      	b.n	8007c24 <UART_SetConfig+0x194>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	76fb      	strb	r3, [r7, #27]
 8007bc8:	e02c      	b.n	8007c24 <UART_SetConfig+0x194>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a6b      	ldr	r2, [pc, #428]	; (8007d7c <UART_SetConfig+0x2ec>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d125      	bne.n	8007c20 <UART_SetConfig+0x190>
 8007bd4:	4b6b      	ldr	r3, [pc, #428]	; (8007d84 <UART_SetConfig+0x2f4>)
 8007bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007be2:	d017      	beq.n	8007c14 <UART_SetConfig+0x184>
 8007be4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007be8:	d817      	bhi.n	8007c1a <UART_SetConfig+0x18a>
 8007bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bee:	d00b      	beq.n	8007c08 <UART_SetConfig+0x178>
 8007bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf4:	d811      	bhi.n	8007c1a <UART_SetConfig+0x18a>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <UART_SetConfig+0x172>
 8007bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfe:	d006      	beq.n	8007c0e <UART_SetConfig+0x17e>
 8007c00:	e00b      	b.n	8007c1a <UART_SetConfig+0x18a>
 8007c02:	2300      	movs	r3, #0
 8007c04:	76fb      	strb	r3, [r7, #27]
 8007c06:	e00d      	b.n	8007c24 <UART_SetConfig+0x194>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	76fb      	strb	r3, [r7, #27]
 8007c0c:	e00a      	b.n	8007c24 <UART_SetConfig+0x194>
 8007c0e:	2304      	movs	r3, #4
 8007c10:	76fb      	strb	r3, [r7, #27]
 8007c12:	e007      	b.n	8007c24 <UART_SetConfig+0x194>
 8007c14:	2308      	movs	r3, #8
 8007c16:	76fb      	strb	r3, [r7, #27]
 8007c18:	e004      	b.n	8007c24 <UART_SetConfig+0x194>
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	76fb      	strb	r3, [r7, #27]
 8007c1e:	e001      	b.n	8007c24 <UART_SetConfig+0x194>
 8007c20:	2310      	movs	r3, #16
 8007c22:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a54      	ldr	r2, [pc, #336]	; (8007d7c <UART_SetConfig+0x2ec>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d173      	bne.n	8007d16 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c2e:	7efb      	ldrb	r3, [r7, #27]
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d824      	bhi.n	8007c7e <UART_SetConfig+0x1ee>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <UART_SetConfig+0x1ac>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c61 	.word	0x08007c61
 8007c40:	08007c7f 	.word	0x08007c7f
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c7f 	.word	0x08007c7f
 8007c4c:	08007c6f 	.word	0x08007c6f
 8007c50:	08007c7f 	.word	0x08007c7f
 8007c54:	08007c7f 	.word	0x08007c7f
 8007c58:	08007c7f 	.word	0x08007c7f
 8007c5c:	08007c77 	.word	0x08007c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c60:	f7fe fb3e 	bl	80062e0 <HAL_RCC_GetPCLK1Freq>
 8007c64:	6178      	str	r0, [r7, #20]
        break;
 8007c66:	e00f      	b.n	8007c88 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c68:	4b48      	ldr	r3, [pc, #288]	; (8007d8c <UART_SetConfig+0x2fc>)
 8007c6a:	617b      	str	r3, [r7, #20]
        break;
 8007c6c:	e00c      	b.n	8007c88 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c6e:	f7fe faa1 	bl	80061b4 <HAL_RCC_GetSysClockFreq>
 8007c72:	6178      	str	r0, [r7, #20]
        break;
 8007c74:	e008      	b.n	8007c88 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7a:	617b      	str	r3, [r7, #20]
        break;
 8007c7c:	e004      	b.n	8007c88 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	76bb      	strb	r3, [r7, #26]
        break;
 8007c86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80fe 	beq.w	8007e8c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	4613      	mov	r3, r2
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	4413      	add	r3, r2
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d305      	bcc.n	8007cac <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d902      	bls.n	8007cb2 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	76bb      	strb	r3, [r7, #26]
 8007cb0:	e0ec      	b.n	8007e8c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f04f 0100 	mov.w	r1, #0
 8007cba:	f04f 0200 	mov.w	r2, #0
 8007cbe:	f04f 0300 	mov.w	r3, #0
 8007cc2:	020b      	lsls	r3, r1, #8
 8007cc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cc8:	0202      	lsls	r2, r0, #8
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	6849      	ldr	r1, [r1, #4]
 8007cce:	0849      	lsrs	r1, r1, #1
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	f04f 0100 	mov.w	r1, #0
 8007cd6:	1814      	adds	r4, r2, r0
 8007cd8:	eb43 0501 	adc.w	r5, r3, r1
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7f8 ff5d 	bl	8000ba8 <__aeabi_uldivmod>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cfc:	d308      	bcc.n	8007d10 <UART_SetConfig+0x280>
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d04:	d204      	bcs.n	8007d10 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	60da      	str	r2, [r3, #12]
 8007d0e:	e0bd      	b.n	8007e8c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	76bb      	strb	r3, [r7, #26]
 8007d14:	e0ba      	b.n	8007e8c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d1e:	d168      	bne.n	8007df2 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8007d20:	7efb      	ldrb	r3, [r7, #27]
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d834      	bhi.n	8007d90 <UART_SetConfig+0x300>
 8007d26:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <UART_SetConfig+0x29c>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	08007d91 	.word	0x08007d91
 8007d3c:	08007d67 	.word	0x08007d67
 8007d40:	08007d91 	.word	0x08007d91
 8007d44:	08007d91 	.word	0x08007d91
 8007d48:	08007d91 	.word	0x08007d91
 8007d4c:	08007d6f 	.word	0x08007d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d50:	f7fe fac6 	bl	80062e0 <HAL_RCC_GetPCLK1Freq>
 8007d54:	6178      	str	r0, [r7, #20]
        break;
 8007d56:	e020      	b.n	8007d9a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d58:	f7fe fad8 	bl	800630c <HAL_RCC_GetPCLK2Freq>
 8007d5c:	6178      	str	r0, [r7, #20]
        break;
 8007d5e:	e01c      	b.n	8007d9a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <UART_SetConfig+0x2fc>)
 8007d62:	617b      	str	r3, [r7, #20]
        break;
 8007d64:	e019      	b.n	8007d9a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d66:	f7fe fa25 	bl	80061b4 <HAL_RCC_GetSysClockFreq>
 8007d6a:	6178      	str	r0, [r7, #20]
        break;
 8007d6c:	e015      	b.n	8007d9a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d72:	617b      	str	r3, [r7, #20]
        break;
 8007d74:	e011      	b.n	8007d9a <UART_SetConfig+0x30a>
 8007d76:	bf00      	nop
 8007d78:	efff69f3 	.word	0xefff69f3
 8007d7c:	40008000 	.word	0x40008000
 8007d80:	40013800 	.word	0x40013800
 8007d84:	40021000 	.word	0x40021000
 8007d88:	40004400 	.word	0x40004400
 8007d8c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	76bb      	strb	r3, [r7, #26]
        break;
 8007d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d075      	beq.n	8007e8c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	005a      	lsls	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	085b      	lsrs	r3, r3, #1
 8007daa:	441a      	add	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	2b0f      	cmp	r3, #15
 8007dbc:	d916      	bls.n	8007dec <UART_SetConfig+0x35c>
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc4:	d212      	bcs.n	8007dec <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f023 030f 	bic.w	r3, r3, #15
 8007dce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	085b      	lsrs	r3, r3, #1
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	89fb      	ldrh	r3, [r7, #14]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	89fa      	ldrh	r2, [r7, #14]
 8007de8:	60da      	str	r2, [r3, #12]
 8007dea:	e04f      	b.n	8007e8c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	76bb      	strb	r3, [r7, #26]
 8007df0:	e04c      	b.n	8007e8c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007df2:	7efb      	ldrb	r3, [r7, #27]
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d828      	bhi.n	8007e4a <UART_SetConfig+0x3ba>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <UART_SetConfig+0x370>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e25 	.word	0x08007e25
 8007e04:	08007e2d 	.word	0x08007e2d
 8007e08:	08007e35 	.word	0x08007e35
 8007e0c:	08007e4b 	.word	0x08007e4b
 8007e10:	08007e3b 	.word	0x08007e3b
 8007e14:	08007e4b 	.word	0x08007e4b
 8007e18:	08007e4b 	.word	0x08007e4b
 8007e1c:	08007e4b 	.word	0x08007e4b
 8007e20:	08007e43 	.word	0x08007e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e24:	f7fe fa5c 	bl	80062e0 <HAL_RCC_GetPCLK1Freq>
 8007e28:	6178      	str	r0, [r7, #20]
        break;
 8007e2a:	e013      	b.n	8007e54 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e2c:	f7fe fa6e 	bl	800630c <HAL_RCC_GetPCLK2Freq>
 8007e30:	6178      	str	r0, [r7, #20]
        break;
 8007e32:	e00f      	b.n	8007e54 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e34:	4b1b      	ldr	r3, [pc, #108]	; (8007ea4 <UART_SetConfig+0x414>)
 8007e36:	617b      	str	r3, [r7, #20]
        break;
 8007e38:	e00c      	b.n	8007e54 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e3a:	f7fe f9bb 	bl	80061b4 <HAL_RCC_GetSysClockFreq>
 8007e3e:	6178      	str	r0, [r7, #20]
        break;
 8007e40:	e008      	b.n	8007e54 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e46:	617b      	str	r3, [r7, #20]
        break;
 8007e48:	e004      	b.n	8007e54 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	76bb      	strb	r3, [r7, #26]
        break;
 8007e52:	bf00      	nop
    }

    if (pclk != 0U)
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d018      	beq.n	8007e8c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	085a      	lsrs	r2, r3, #1
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	441a      	add	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b0f      	cmp	r3, #15
 8007e74:	d908      	bls.n	8007e88 <UART_SetConfig+0x3f8>
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e7c:	d204      	bcs.n	8007e88 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	60da      	str	r2, [r3, #12]
 8007e86:	e001      	b.n	8007e8c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007e98:	7ebb      	ldrb	r3, [r7, #26]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	00f42400 	.word	0x00f42400

08007ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	f003 0310 	and.w	r3, r3, #16
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	f003 0320 	and.w	r3, r3, #32
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01a      	beq.n	8007fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fa6:	d10a      	bne.n	8007fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	605a      	str	r2, [r3, #4]
  }
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af02      	add	r7, sp, #8
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ffc:	f7fa fe8e 	bl	8002d1c <HAL_GetTick>
 8008000:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b08      	cmp	r3, #8
 800800e:	d10e      	bne.n	800802e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f82d 	bl	800807e <UART_WaitOnFlagUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e023      	b.n	8008076 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b04      	cmp	r3, #4
 800803a:	d10e      	bne.n	800805a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800803c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f817 	bl	800807e <UART_WaitOnFlagUntilTimeout>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e00d      	b.n	8008076 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	603b      	str	r3, [r7, #0]
 800808a:	4613      	mov	r3, r2
 800808c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800808e:	e05e      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d05a      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008098:	f7fa fe40 	bl	8002d1c <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d302      	bcc.n	80080ae <UART_WaitOnFlagUntilTimeout+0x30>
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d11b      	bne.n	80080e6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0201 	bic.w	r2, r2, #1
 80080cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2220      	movs	r2, #32
 80080d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2220      	movs	r2, #32
 80080d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e043      	b.n	800816e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d02c      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008102:	d124      	bne.n	800814e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800810c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800811c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 0201 	bic.w	r2, r2, #1
 800812c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2220      	movs	r2, #32
 8008132:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e00f      	b.n	800816e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4013      	ands	r3, r2
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	429a      	cmp	r2, r3
 800815c:	bf0c      	ite	eq
 800815e:	2301      	moveq	r3, #1
 8008160:	2300      	movne	r3, #0
 8008162:	b2db      	uxtb	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	429a      	cmp	r2, r3
 800816a:	d091      	beq.n	8008090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <__NVIC_SetPriority>:
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	6039      	str	r1, [r7, #0]
 8008182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008188:	2b00      	cmp	r3, #0
 800818a:	db0a      	blt.n	80081a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	490c      	ldr	r1, [pc, #48]	; (80081c4 <__NVIC_SetPriority+0x4c>)
 8008192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008196:	0112      	lsls	r2, r2, #4
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	440b      	add	r3, r1
 800819c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081a0:	e00a      	b.n	80081b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	4908      	ldr	r1, [pc, #32]	; (80081c8 <__NVIC_SetPriority+0x50>)
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	3b04      	subs	r3, #4
 80081b0:	0112      	lsls	r2, r2, #4
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	440b      	add	r3, r1
 80081b6:	761a      	strb	r2, [r3, #24]
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	e000e100 	.word	0xe000e100
 80081c8:	e000ed00 	.word	0xe000ed00

080081cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <SysTick_Handler+0x1c>)
 80081d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081d4:	f001 fcfe 	bl	8009bd4 <xTaskGetSchedulerState>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d001      	beq.n	80081e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081de:	f002 fae3 	bl	800a7a8 <xPortSysTickHandler>
  }
}
 80081e2:	bf00      	nop
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	e000e010 	.word	0xe000e010

080081ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081f0:	2100      	movs	r1, #0
 80081f2:	f06f 0004 	mvn.w	r0, #4
 80081f6:	f7ff ffbf 	bl	8008178 <__NVIC_SetPriority>
#endif
}
 80081fa:	bf00      	nop
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008206:	f3ef 8305 	mrs	r3, IPSR
 800820a:	603b      	str	r3, [r7, #0]
  return(result);
 800820c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008212:	f06f 0305 	mvn.w	r3, #5
 8008216:	607b      	str	r3, [r7, #4]
 8008218:	e00c      	b.n	8008234 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800821a:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <osKernelInitialize+0x44>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d105      	bne.n	800822e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <osKernelInitialize+0x44>)
 8008224:	2201      	movs	r2, #1
 8008226:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008228:	2300      	movs	r3, #0
 800822a:	607b      	str	r3, [r7, #4]
 800822c:	e002      	b.n	8008234 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800822e:	f04f 33ff 	mov.w	r3, #4294967295
 8008232:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008234:	687b      	ldr	r3, [r7, #4]
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20000204 	.word	0x20000204

08008248 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800824e:	f3ef 8305 	mrs	r3, IPSR
 8008252:	603b      	str	r3, [r7, #0]
  return(result);
 8008254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <osKernelStart+0x1a>
    stat = osErrorISR;
 800825a:	f06f 0305 	mvn.w	r3, #5
 800825e:	607b      	str	r3, [r7, #4]
 8008260:	e010      	b.n	8008284 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008262:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <osKernelStart+0x48>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d109      	bne.n	800827e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800826a:	f7ff ffbf 	bl	80081ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800826e:	4b08      	ldr	r3, [pc, #32]	; (8008290 <osKernelStart+0x48>)
 8008270:	2202      	movs	r2, #2
 8008272:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008274:	f001 f866 	bl	8009344 <vTaskStartScheduler>
      stat = osOK;
 8008278:	2300      	movs	r3, #0
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	e002      	b.n	8008284 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008284:	687b      	ldr	r3, [r7, #4]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000204 	.word	0x20000204

08008294 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008294:	b580      	push	{r7, lr}
 8008296:	b08e      	sub	sp, #56	; 0x38
 8008298:	af04      	add	r7, sp, #16
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a4:	f3ef 8305 	mrs	r3, IPSR
 80082a8:	617b      	str	r3, [r7, #20]
  return(result);
 80082aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d17e      	bne.n	80083ae <osThreadNew+0x11a>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d07b      	beq.n	80083ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80082b6:	2380      	movs	r3, #128	; 0x80
 80082b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082ba:	2318      	movs	r3, #24
 80082bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295
 80082c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d045      	beq.n	800835a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <osThreadNew+0x48>
        name = attr->name;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <osThreadNew+0x6e>
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	2b38      	cmp	r3, #56	; 0x38
 80082f4:	d805      	bhi.n	8008302 <osThreadNew+0x6e>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <osThreadNew+0x72>
        return (NULL);
 8008302:	2300      	movs	r3, #0
 8008304:	e054      	b.n	80083b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	089b      	lsrs	r3, r3, #2
 8008314:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00e      	beq.n	800833c <osThreadNew+0xa8>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	2b5b      	cmp	r3, #91	; 0x5b
 8008324:	d90a      	bls.n	800833c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800832a:	2b00      	cmp	r3, #0
 800832c:	d006      	beq.n	800833c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <osThreadNew+0xa8>
        mem = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	61bb      	str	r3, [r7, #24]
 800833a:	e010      	b.n	800835e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10c      	bne.n	800835e <osThreadNew+0xca>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d108      	bne.n	800835e <osThreadNew+0xca>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d104      	bne.n	800835e <osThreadNew+0xca>
          mem = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	61bb      	str	r3, [r7, #24]
 8008358:	e001      	b.n	800835e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800835a:	2300      	movs	r3, #0
 800835c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d110      	bne.n	8008386 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800836c:	9202      	str	r2, [sp, #8]
 800836e:	9301      	str	r3, [sp, #4]
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6a3a      	ldr	r2, [r7, #32]
 8008378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 fe0c 	bl	8008f98 <xTaskCreateStatic>
 8008380:	4603      	mov	r3, r0
 8008382:	613b      	str	r3, [r7, #16]
 8008384:	e013      	b.n	80083ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d110      	bne.n	80083ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	b29a      	uxth	r2, r3
 8008390:	f107 0310 	add.w	r3, r7, #16
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 fe57 	bl	8009052 <xTaskCreate>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d001      	beq.n	80083ae <osThreadNew+0x11a>
            hTask = NULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083ae:	693b      	ldr	r3, [r7, #16]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3728      	adds	r7, #40	; 0x28
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c0:	f3ef 8305 	mrs	r3, IPSR
 80083c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80083c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <osDelay+0x1c>
    stat = osErrorISR;
 80083cc:	f06f 0305 	mvn.w	r3, #5
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	e007      	b.n	80083e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 ff7c 	bl	80092dc <vTaskDelay>
    }
  }

  return (stat);
 80083e4:	68fb      	ldr	r3, [r7, #12]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4a07      	ldr	r2, [pc, #28]	; (800841c <vApplicationGetIdleTaskMemory+0x2c>)
 8008400:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	4a06      	ldr	r2, [pc, #24]	; (8008420 <vApplicationGetIdleTaskMemory+0x30>)
 8008406:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2280      	movs	r2, #128	; 0x80
 800840c:	601a      	str	r2, [r3, #0]
}
 800840e:	bf00      	nop
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	20000208 	.word	0x20000208
 8008420:	20000264 	.word	0x20000264

08008424 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4a07      	ldr	r2, [pc, #28]	; (8008450 <vApplicationGetTimerTaskMemory+0x2c>)
 8008434:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	4a06      	ldr	r2, [pc, #24]	; (8008454 <vApplicationGetTimerTaskMemory+0x30>)
 800843a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008442:	601a      	str	r2, [r3, #0]
}
 8008444:	bf00      	nop
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	20000464 	.word	0x20000464
 8008454:	200004c0 	.word	0x200004c0

08008458 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f103 0208 	add.w	r2, r3, #8
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f04f 32ff 	mov.w	r2, #4294967295
 8008470:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f103 0208 	add.w	r2, r3, #8
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f103 0208 	add.w	r2, r3, #8
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084b2:	b480      	push	{r7}
 80084b4:	b085      	sub	sp, #20
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	601a      	str	r2, [r3, #0]
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084fa:	b480      	push	{r7}
 80084fc:	b085      	sub	sp, #20
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d103      	bne.n	800851a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e00c      	b.n	8008534 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3308      	adds	r3, #8
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	e002      	b.n	8008528 <vListInsert+0x2e>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	429a      	cmp	r2, r3
 8008532:	d2f6      	bcs.n	8008522 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	601a      	str	r2, [r3, #0]
}
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6892      	ldr	r2, [r2, #8]
 8008582:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6852      	ldr	r2, [r2, #4]
 800858c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	429a      	cmp	r2, r3
 8008596:	d103      	bne.n	80085a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	1e5a      	subs	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10a      	bne.n	80085ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085ea:	f002 f84b 	bl	800a684 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f6:	68f9      	ldr	r1, [r7, #12]
 80085f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	441a      	add	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	3b01      	subs	r3, #1
 800861c:	68f9      	ldr	r1, [r7, #12]
 800861e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	441a      	add	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	22ff      	movs	r2, #255	; 0xff
 800862e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	22ff      	movs	r2, #255	; 0xff
 8008636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d114      	bne.n	800866a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01a      	beq.n	800867e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3310      	adds	r3, #16
 800864c:	4618      	mov	r0, r3
 800864e:	f001 f903 	bl	8009858 <xTaskRemoveFromEventList>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d012      	beq.n	800867e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008658:	4b0c      	ldr	r3, [pc, #48]	; (800868c <xQueueGenericReset+0xcc>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	e009      	b.n	800867e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3310      	adds	r3, #16
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff fef2 	bl	8008458 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3324      	adds	r3, #36	; 0x24
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff feed 	bl	8008458 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800867e:	f002 f831 	bl	800a6e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008682:	2301      	movs	r3, #1
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08e      	sub	sp, #56	; 0x38
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10a      	bne.n	80086d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <xQueueGenericCreateStatic+0x52>
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <xQueueGenericCreateStatic+0x56>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e000      	b.n	80086e8 <xQueueGenericCreateStatic+0x58>
 80086e6:	2300      	movs	r3, #0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	623b      	str	r3, [r7, #32]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <xQueueGenericCreateStatic+0x7e>
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <xQueueGenericCreateStatic+0x82>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <xQueueGenericCreateStatic+0x84>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	61fb      	str	r3, [r7, #28]
}
 800872a:	bf00      	nop
 800872c:	e7fe      	b.n	800872c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800872e:	2350      	movs	r3, #80	; 0x50
 8008730:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b50      	cmp	r3, #80	; 0x50
 8008736:	d00a      	beq.n	800874e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	61bb      	str	r3, [r7, #24]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800874e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00d      	beq.n	8008776 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008762:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	4613      	mov	r3, r2
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	68b9      	ldr	r1, [r7, #8]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 f805 	bl	8008780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008778:	4618      	mov	r0, r3
 800877a:	3730      	adds	r7, #48	; 0x30
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	e002      	b.n	80087a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087ae:	2101      	movs	r1, #1
 80087b0:	69b8      	ldr	r0, [r7, #24]
 80087b2:	f7ff ff05 	bl	80085c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	78fa      	ldrb	r2, [r7, #3]
 80087ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08e      	sub	sp, #56	; 0x38
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087d6:	2300      	movs	r3, #0
 80087d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <xQueueGenericSend+0x32>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <xQueueGenericSend+0x40>
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <xQueueGenericSend+0x44>
 8008808:	2301      	movs	r3, #1
 800880a:	e000      	b.n	800880e <xQueueGenericSend+0x46>
 800880c:	2300      	movs	r3, #0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <xQueueGenericSend+0x60>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d103      	bne.n	8008836 <xQueueGenericSend+0x6e>
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008832:	2b01      	cmp	r3, #1
 8008834:	d101      	bne.n	800883a <xQueueGenericSend+0x72>
 8008836:	2301      	movs	r3, #1
 8008838:	e000      	b.n	800883c <xQueueGenericSend+0x74>
 800883a:	2300      	movs	r3, #0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10a      	bne.n	8008856 <xQueueGenericSend+0x8e>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	623b      	str	r3, [r7, #32]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008856:	f001 f9bd 	bl	8009bd4 <xTaskGetSchedulerState>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <xQueueGenericSend+0x9e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <xQueueGenericSend+0xa2>
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <xQueueGenericSend+0xa4>
 800886a:	2300      	movs	r3, #0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <xQueueGenericSend+0xbe>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	61fb      	str	r3, [r7, #28]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008886:	f001 fefd 	bl	800a684 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008892:	429a      	cmp	r2, r3
 8008894:	d302      	bcc.n	800889c <xQueueGenericSend+0xd4>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d129      	bne.n	80088f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088a2:	f000 fa0b 	bl	8008cbc <prvCopyDataToQueue>
 80088a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d010      	beq.n	80088d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	3324      	adds	r3, #36	; 0x24
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 ffcf 	bl	8009858 <xTaskRemoveFromEventList>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d013      	beq.n	80088e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088c0:	4b3f      	ldr	r3, [pc, #252]	; (80089c0 <xQueueGenericSend+0x1f8>)
 80088c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	e00a      	b.n	80088e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d007      	beq.n	80088e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088d8:	4b39      	ldr	r3, [pc, #228]	; (80089c0 <xQueueGenericSend+0x1f8>)
 80088da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088e8:	f001 fefc 	bl	800a6e4 <vPortExitCritical>
				return pdPASS;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e063      	b.n	80089b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d103      	bne.n	80088fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088f6:	f001 fef5 	bl	800a6e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e05c      	b.n	80089b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008900:	2b00      	cmp	r3, #0
 8008902:	d106      	bne.n	8008912 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008904:	f107 0314 	add.w	r3, r7, #20
 8008908:	4618      	mov	r0, r3
 800890a:	f001 f809 	bl	8009920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800890e:	2301      	movs	r3, #1
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008912:	f001 fee7 	bl	800a6e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008916:	f000 fd7b 	bl	8009410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800891a:	f001 feb3 	bl	800a684 <vPortEnterCritical>
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008924:	b25b      	sxtb	r3, r3
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d103      	bne.n	8008934 <xQueueGenericSend+0x16c>
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800893a:	b25b      	sxtb	r3, r3
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d103      	bne.n	800894a <xQueueGenericSend+0x182>
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800894a:	f001 fecb 	bl	800a6e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800894e:	1d3a      	adds	r2, r7, #4
 8008950:	f107 0314 	add.w	r3, r7, #20
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f000 fff8 	bl	800994c <xTaskCheckForTimeOut>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d124      	bne.n	80089ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008964:	f000 faa2 	bl	8008eac <prvIsQueueFull>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d018      	beq.n	80089a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	3310      	adds	r3, #16
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f000 ff1e 	bl	80097b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800897c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800897e:	f000 fa2d 	bl	8008ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008982:	f000 fd53 	bl	800942c <xTaskResumeAll>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	f47f af7c 	bne.w	8008886 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800898e:	4b0c      	ldr	r3, [pc, #48]	; (80089c0 <xQueueGenericSend+0x1f8>)
 8008990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	e772      	b.n	8008886 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089a2:	f000 fa1b 	bl	8008ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089a6:	f000 fd41 	bl	800942c <xTaskResumeAll>
 80089aa:	e76c      	b.n	8008886 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ae:	f000 fa15 	bl	8008ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089b2:	f000 fd3b 	bl	800942c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3738      	adds	r7, #56	; 0x38
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	e000ed04 	.word	0xe000ed04

080089c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b090      	sub	sp, #64	; 0x40
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10a      	bne.n	80089f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089ee:	bf00      	nop
 80089f0:	e7fe      	b.n	80089f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d103      	bne.n	8008a00 <xQueueGenericSendFromISR+0x3c>
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <xQueueGenericSendFromISR+0x40>
 8008a00:	2301      	movs	r3, #1
 8008a02:	e000      	b.n	8008a06 <xQueueGenericSendFromISR+0x42>
 8008a04:	2300      	movs	r3, #0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10a      	bne.n	8008a20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d103      	bne.n	8008a2e <xQueueGenericSendFromISR+0x6a>
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <xQueueGenericSendFromISR+0x6e>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <xQueueGenericSendFromISR+0x70>
 8008a32:	2300      	movs	r3, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	623b      	str	r3, [r7, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	e7fe      	b.n	8008a4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a4e:	f001 fefb 	bl	800a848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a52:	f3ef 8211 	mrs	r2, BASEPRI
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	61fa      	str	r2, [r7, #28]
 8008a68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d302      	bcc.n	8008a80 <xQueueGenericSendFromISR+0xbc>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d12f      	bne.n	8008ae0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a96:	f000 f911 	bl	8008cbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d112      	bne.n	8008aca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d016      	beq.n	8008ada <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	3324      	adds	r3, #36	; 0x24
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fed1 	bl	8009858 <xTaskRemoveFromEventList>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00e      	beq.n	8008ada <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	e007      	b.n	8008ada <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008aca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ace:	3301      	adds	r3, #1
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	b25a      	sxtb	r2, r3
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ada:	2301      	movs	r3, #1
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008ade:	e001      	b.n	8008ae4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008aee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3740      	adds	r7, #64	; 0x40
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08c      	sub	sp, #48	; 0x30
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10a      	bne.n	8008b2c <xQueueReceive+0x30>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	623b      	str	r3, [r7, #32]
}
 8008b28:	bf00      	nop
 8008b2a:	e7fe      	b.n	8008b2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <xQueueReceive+0x3e>
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <xQueueReceive+0x42>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e000      	b.n	8008b40 <xQueueReceive+0x44>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <xQueueReceive+0x5e>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	61fb      	str	r3, [r7, #28]
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b5a:	f001 f83b 	bl	8009bd4 <xTaskGetSchedulerState>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <xQueueReceive+0x6e>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <xQueueReceive+0x72>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <xQueueReceive+0x74>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10a      	bne.n	8008b8a <xQueueReceive+0x8e>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	61bb      	str	r3, [r7, #24]
}
 8008b86:	bf00      	nop
 8008b88:	e7fe      	b.n	8008b88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b8a:	f001 fd7b 	bl	800a684 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01f      	beq.n	8008bda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b9e:	f000 f8f7 	bl	8008d90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	1e5a      	subs	r2, r3, #1
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00f      	beq.n	8008bd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	3310      	adds	r3, #16
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fe4e 	bl	8009858 <xTaskRemoveFromEventList>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d007      	beq.n	8008bd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bc2:	4b3d      	ldr	r3, [pc, #244]	; (8008cb8 <xQueueReceive+0x1bc>)
 8008bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bd2:	f001 fd87 	bl	800a6e4 <vPortExitCritical>
				return pdPASS;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e069      	b.n	8008cae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d103      	bne.n	8008be8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008be0:	f001 fd80 	bl	800a6e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008be4:	2300      	movs	r3, #0
 8008be6:	e062      	b.n	8008cae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d106      	bne.n	8008bfc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bee:	f107 0310 	add.w	r3, r7, #16
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fe94 	bl	8009920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bfc:	f001 fd72 	bl	800a6e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c00:	f000 fc06 	bl	8009410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c04:	f001 fd3e 	bl	800a684 <vPortEnterCritical>
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c0e:	b25b      	sxtb	r3, r3
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c14:	d103      	bne.n	8008c1e <xQueueReceive+0x122>
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c24:	b25b      	sxtb	r3, r3
 8008c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2a:	d103      	bne.n	8008c34 <xQueueReceive+0x138>
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c34:	f001 fd56 	bl	800a6e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c38:	1d3a      	adds	r2, r7, #4
 8008c3a:	f107 0310 	add.w	r3, r7, #16
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 fe83 	bl	800994c <xTaskCheckForTimeOut>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d123      	bne.n	8008c94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4e:	f000 f917 	bl	8008e80 <prvIsQueueEmpty>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d017      	beq.n	8008c88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	3324      	adds	r3, #36	; 0x24
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fda9 	bl	80097b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c68:	f000 f8b8 	bl	8008ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c6c:	f000 fbde 	bl	800942c <xTaskResumeAll>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d189      	bne.n	8008b8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c76:	4b10      	ldr	r3, [pc, #64]	; (8008cb8 <xQueueReceive+0x1bc>)
 8008c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	e780      	b.n	8008b8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c8a:	f000 f8a7 	bl	8008ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c8e:	f000 fbcd 	bl	800942c <xTaskResumeAll>
 8008c92:	e77a      	b.n	8008b8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c96:	f000 f8a1 	bl	8008ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c9a:	f000 fbc7 	bl	800942c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ca0:	f000 f8ee 	bl	8008e80 <prvIsQueueEmpty>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f43f af6f 	beq.w	8008b8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3730      	adds	r7, #48	; 0x30
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10d      	bne.n	8008cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d14d      	bne.n	8008d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 ff92 	bl	8009c10 <xTaskPriorityDisinherit>
 8008cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	609a      	str	r2, [r3, #8]
 8008cf4:	e043      	b.n	8008d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d119      	bne.n	8008d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6858      	ldr	r0, [r3, #4]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	461a      	mov	r2, r3
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	f001 fefa 	bl	800ab00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d14:	441a      	add	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d32b      	bcc.n	8008d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	605a      	str	r2, [r3, #4]
 8008d2e:	e026      	b.n	8008d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	68d8      	ldr	r0, [r3, #12]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	f001 fee0 	bl	800ab00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	425b      	negs	r3, r3
 8008d4a:	441a      	add	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d207      	bcs.n	8008d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	425b      	negs	r3, r3
 8008d66:	441a      	add	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d105      	bne.n	8008d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d86:	697b      	ldr	r3, [r7, #20]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d018      	beq.n	8008dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	441a      	add	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d303      	bcc.n	8008dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68d9      	ldr	r1, [r3, #12]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6838      	ldr	r0, [r7, #0]
 8008dd0:	f001 fe96 	bl	800ab00 <memcpy>
	}
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008de4:	f001 fc4e 	bl	800a684 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008df0:	e011      	b.n	8008e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d012      	beq.n	8008e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3324      	adds	r3, #36	; 0x24
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 fd2a 	bl	8009858 <xTaskRemoveFromEventList>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e0a:	f000 fe01 	bl	8009a10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dce9      	bgt.n	8008df2 <prvUnlockQueue+0x16>
 8008e1e:	e000      	b.n	8008e22 <prvUnlockQueue+0x46>
					break;
 8008e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	22ff      	movs	r2, #255	; 0xff
 8008e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e2a:	f001 fc5b 	bl	800a6e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e2e:	f001 fc29 	bl	800a684 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e3a:	e011      	b.n	8008e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d012      	beq.n	8008e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3310      	adds	r3, #16
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fd05 	bl	8009858 <xTaskRemoveFromEventList>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e54:	f000 fddc 	bl	8009a10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dce9      	bgt.n	8008e3c <prvUnlockQueue+0x60>
 8008e68:	e000      	b.n	8008e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	22ff      	movs	r2, #255	; 0xff
 8008e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e74:	f001 fc36 	bl	800a6e4 <vPortExitCritical>
}
 8008e78:	bf00      	nop
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e88:	f001 fbfc 	bl	800a684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e94:	2301      	movs	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	e001      	b.n	8008e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e9e:	f001 fc21 	bl	800a6e4 <vPortExitCritical>

	return xReturn;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eb4:	f001 fbe6 	bl	800a684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d102      	bne.n	8008eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e001      	b.n	8008ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ece:	f001 fc09 	bl	800a6e4 <vPortExitCritical>

	return xReturn;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	e014      	b.n	8008f16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008eec:	4a0f      	ldr	r2, [pc, #60]	; (8008f2c <vQueueAddToRegistry+0x50>)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10b      	bne.n	8008f10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ef8:	490c      	ldr	r1, [pc, #48]	; (8008f2c <vQueueAddToRegistry+0x50>)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f02:	4a0a      	ldr	r2, [pc, #40]	; (8008f2c <vQueueAddToRegistry+0x50>)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	4413      	add	r3, r2
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f0e:	e006      	b.n	8008f1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2b07      	cmp	r3, #7
 8008f1a:	d9e7      	bls.n	8008eec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	2000883c 	.word	0x2000883c

08008f30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f40:	f001 fba0 	bl	800a684 <vPortEnterCritical>
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f4a:	b25b      	sxtb	r3, r3
 8008f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f50:	d103      	bne.n	8008f5a <vQueueWaitForMessageRestricted+0x2a>
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f60:	b25b      	sxtb	r3, r3
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f66:	d103      	bne.n	8008f70 <vQueueWaitForMessageRestricted+0x40>
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f70:	f001 fbb8 	bl	800a6e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	3324      	adds	r3, #36	; 0x24
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fc3b 	bl	8009800 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f8a:	6978      	ldr	r0, [r7, #20]
 8008f8c:	f7ff ff26 	bl	8008ddc <prvUnlockQueue>
	}
 8008f90:	bf00      	nop
 8008f92:	3718      	adds	r7, #24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08e      	sub	sp, #56	; 0x38
 8008f9c:	af04      	add	r7, sp, #16
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	623b      	str	r3, [r7, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10a      	bne.n	8008fde <xTaskCreateStatic+0x46>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	61fb      	str	r3, [r7, #28]
}
 8008fda:	bf00      	nop
 8008fdc:	e7fe      	b.n	8008fdc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fde:	235c      	movs	r3, #92	; 0x5c
 8008fe0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b5c      	cmp	r3, #92	; 0x5c
 8008fe6:	d00a      	beq.n	8008ffe <xTaskCreateStatic+0x66>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	61bb      	str	r3, [r7, #24]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ffe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009002:	2b00      	cmp	r3, #0
 8009004:	d01e      	beq.n	8009044 <xTaskCreateStatic+0xac>
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01b      	beq.n	8009044 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009014:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	2202      	movs	r2, #2
 800901a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800901e:	2300      	movs	r3, #0
 8009020:	9303      	str	r3, [sp, #12]
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	9302      	str	r3, [sp, #8]
 8009026:	f107 0314 	add.w	r3, r7, #20
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	68b9      	ldr	r1, [r7, #8]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 f850 	bl	80090dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800903c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800903e:	f000 f8dd 	bl	80091fc <prvAddNewTaskToReadyList>
 8009042:	e001      	b.n	8009048 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009048:	697b      	ldr	r3, [r7, #20]
	}
 800904a:	4618      	mov	r0, r3
 800904c:	3728      	adds	r7, #40	; 0x28
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009052:	b580      	push	{r7, lr}
 8009054:	b08c      	sub	sp, #48	; 0x30
 8009056:	af04      	add	r7, sp, #16
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	603b      	str	r3, [r7, #0]
 800905e:	4613      	mov	r3, r2
 8009060:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009062:	88fb      	ldrh	r3, [r7, #6]
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4618      	mov	r0, r3
 8009068:	f001 fc2e 	bl	800a8c8 <pvPortMalloc>
 800906c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00e      	beq.n	8009092 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009074:	205c      	movs	r0, #92	; 0x5c
 8009076:	f001 fc27 	bl	800a8c8 <pvPortMalloc>
 800907a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	631a      	str	r2, [r3, #48]	; 0x30
 8009088:	e005      	b.n	8009096 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800908a:	6978      	ldr	r0, [r7, #20]
 800908c:	f001 fcaa 	bl	800a9e4 <vPortFree>
 8009090:	e001      	b.n	8009096 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d017      	beq.n	80090cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090a4:	88fa      	ldrh	r2, [r7, #6]
 80090a6:	2300      	movs	r3, #0
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	9302      	str	r3, [sp, #8]
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	68b9      	ldr	r1, [r7, #8]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 f80e 	bl	80090dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090c0:	69f8      	ldr	r0, [r7, #28]
 80090c2:	f000 f89b 	bl	80091fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090c6:	2301      	movs	r3, #1
 80090c8:	61bb      	str	r3, [r7, #24]
 80090ca:	e002      	b.n	80090d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090cc:	f04f 33ff 	mov.w	r3, #4294967295
 80090d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090d2:	69bb      	ldr	r3, [r7, #24]
	}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3720      	adds	r7, #32
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	461a      	mov	r2, r3
 80090f4:	21a5      	movs	r1, #165	; 0xa5
 80090f6:	f001 fd11 	bl	800ab1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009104:	3b01      	subs	r3, #1
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	f023 0307 	bic.w	r3, r3, #7
 8009112:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <prvInitialiseNewTask+0x58>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	617b      	str	r3, [r7, #20]
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d01f      	beq.n	800917a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800913a:	2300      	movs	r3, #0
 800913c:	61fb      	str	r3, [r7, #28]
 800913e:	e012      	b.n	8009166 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	4413      	add	r3, r2
 8009146:	7819      	ldrb	r1, [r3, #0]
 8009148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	4413      	add	r3, r2
 800914e:	3334      	adds	r3, #52	; 0x34
 8009150:	460a      	mov	r2, r1
 8009152:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d006      	beq.n	800916e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	3301      	adds	r3, #1
 8009164:	61fb      	str	r3, [r7, #28]
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	2b0f      	cmp	r3, #15
 800916a:	d9e9      	bls.n	8009140 <prvInitialiseNewTask+0x64>
 800916c:	e000      	b.n	8009170 <prvInitialiseNewTask+0x94>
			{
				break;
 800916e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009178:	e003      	b.n	8009182 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009184:	2b37      	cmp	r3, #55	; 0x37
 8009186:	d901      	bls.n	800918c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009188:	2337      	movs	r3, #55	; 0x37
 800918a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009190:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009196:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	2200      	movs	r2, #0
 800919c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	3304      	adds	r3, #4
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff f978 	bl	8008498 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	3318      	adds	r3, #24
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7ff f973 	bl	8008498 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	2200      	movs	r2, #0
 80091cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	68f9      	ldr	r1, [r7, #12]
 80091da:	69b8      	ldr	r0, [r7, #24]
 80091dc:	f001 f928 	bl	800a430 <pxPortInitialiseStack>
 80091e0:	4602      	mov	r2, r0
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091f2:	bf00      	nop
 80091f4:	3720      	adds	r7, #32
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009204:	f001 fa3e 	bl	800a684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009208:	4b2d      	ldr	r3, [pc, #180]	; (80092c0 <prvAddNewTaskToReadyList+0xc4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3301      	adds	r3, #1
 800920e:	4a2c      	ldr	r2, [pc, #176]	; (80092c0 <prvAddNewTaskToReadyList+0xc4>)
 8009210:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009212:	4b2c      	ldr	r3, [pc, #176]	; (80092c4 <prvAddNewTaskToReadyList+0xc8>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d109      	bne.n	800922e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800921a:	4a2a      	ldr	r2, [pc, #168]	; (80092c4 <prvAddNewTaskToReadyList+0xc8>)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009220:	4b27      	ldr	r3, [pc, #156]	; (80092c0 <prvAddNewTaskToReadyList+0xc4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d110      	bne.n	800924a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009228:	f000 fc16 	bl	8009a58 <prvInitialiseTaskLists>
 800922c:	e00d      	b.n	800924a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800922e:	4b26      	ldr	r3, [pc, #152]	; (80092c8 <prvAddNewTaskToReadyList+0xcc>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d109      	bne.n	800924a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009236:	4b23      	ldr	r3, [pc, #140]	; (80092c4 <prvAddNewTaskToReadyList+0xc8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	429a      	cmp	r2, r3
 8009242:	d802      	bhi.n	800924a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009244:	4a1f      	ldr	r2, [pc, #124]	; (80092c4 <prvAddNewTaskToReadyList+0xc8>)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800924a:	4b20      	ldr	r3, [pc, #128]	; (80092cc <prvAddNewTaskToReadyList+0xd0>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3301      	adds	r3, #1
 8009250:	4a1e      	ldr	r2, [pc, #120]	; (80092cc <prvAddNewTaskToReadyList+0xd0>)
 8009252:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009254:	4b1d      	ldr	r3, [pc, #116]	; (80092cc <prvAddNewTaskToReadyList+0xd0>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009260:	4b1b      	ldr	r3, [pc, #108]	; (80092d0 <prvAddNewTaskToReadyList+0xd4>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	429a      	cmp	r2, r3
 8009266:	d903      	bls.n	8009270 <prvAddNewTaskToReadyList+0x74>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926c:	4a18      	ldr	r2, [pc, #96]	; (80092d0 <prvAddNewTaskToReadyList+0xd4>)
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009274:	4613      	mov	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4a15      	ldr	r2, [pc, #84]	; (80092d4 <prvAddNewTaskToReadyList+0xd8>)
 800927e:	441a      	add	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3304      	adds	r3, #4
 8009284:	4619      	mov	r1, r3
 8009286:	4610      	mov	r0, r2
 8009288:	f7ff f913 	bl	80084b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800928c:	f001 fa2a 	bl	800a6e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009290:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <prvAddNewTaskToReadyList+0xcc>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00e      	beq.n	80092b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009298:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <prvAddNewTaskToReadyList+0xc8>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d207      	bcs.n	80092b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <prvAddNewTaskToReadyList+0xdc>)
 80092a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092b6:	bf00      	nop
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20000d94 	.word	0x20000d94
 80092c4:	200008c0 	.word	0x200008c0
 80092c8:	20000da0 	.word	0x20000da0
 80092cc:	20000db0 	.word	0x20000db0
 80092d0:	20000d9c 	.word	0x20000d9c
 80092d4:	200008c4 	.word	0x200008c4
 80092d8:	e000ed04 	.word	0xe000ed04

080092dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d017      	beq.n	800931e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <vTaskDelay+0x60>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <vTaskDelay+0x30>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	60bb      	str	r3, [r7, #8]
}
 8009308:	bf00      	nop
 800930a:	e7fe      	b.n	800930a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800930c:	f000 f880 	bl	8009410 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009310:	2100      	movs	r1, #0
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fcea 	bl	8009cec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009318:	f000 f888 	bl	800942c <xTaskResumeAll>
 800931c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d107      	bne.n	8009334 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009324:	4b06      	ldr	r3, [pc, #24]	; (8009340 <vTaskDelay+0x64>)
 8009326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009334:	bf00      	nop
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000dbc 	.word	0x20000dbc
 8009340:	e000ed04 	.word	0xe000ed04

08009344 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08a      	sub	sp, #40	; 0x28
 8009348:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009352:	463a      	mov	r2, r7
 8009354:	1d39      	adds	r1, r7, #4
 8009356:	f107 0308 	add.w	r3, r7, #8
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff f848 	bl	80083f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	9202      	str	r2, [sp, #8]
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	2300      	movs	r3, #0
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	2300      	movs	r3, #0
 8009370:	460a      	mov	r2, r1
 8009372:	4921      	ldr	r1, [pc, #132]	; (80093f8 <vTaskStartScheduler+0xb4>)
 8009374:	4821      	ldr	r0, [pc, #132]	; (80093fc <vTaskStartScheduler+0xb8>)
 8009376:	f7ff fe0f 	bl	8008f98 <xTaskCreateStatic>
 800937a:	4603      	mov	r3, r0
 800937c:	4a20      	ldr	r2, [pc, #128]	; (8009400 <vTaskStartScheduler+0xbc>)
 800937e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009380:	4b1f      	ldr	r3, [pc, #124]	; (8009400 <vTaskStartScheduler+0xbc>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009388:	2301      	movs	r3, #1
 800938a:	617b      	str	r3, [r7, #20]
 800938c:	e001      	b.n	8009392 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d102      	bne.n	800939e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009398:	f000 fcfc 	bl	8009d94 <xTimerCreateTimerTask>
 800939c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d116      	bne.n	80093d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	613b      	str	r3, [r7, #16]
}
 80093b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093b8:	4b12      	ldr	r3, [pc, #72]	; (8009404 <vTaskStartScheduler+0xc0>)
 80093ba:	f04f 32ff 	mov.w	r2, #4294967295
 80093be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093c0:	4b11      	ldr	r3, [pc, #68]	; (8009408 <vTaskStartScheduler+0xc4>)
 80093c2:	2201      	movs	r2, #1
 80093c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093c6:	4b11      	ldr	r3, [pc, #68]	; (800940c <vTaskStartScheduler+0xc8>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093cc:	f001 f8b8 	bl	800a540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093d0:	e00e      	b.n	80093f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d8:	d10a      	bne.n	80093f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	60fb      	str	r3, [r7, #12]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <vTaskStartScheduler+0xaa>
}
 80093f0:	bf00      	nop
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	0800d8e0 	.word	0x0800d8e0
 80093fc:	08009a29 	.word	0x08009a29
 8009400:	20000db8 	.word	0x20000db8
 8009404:	20000db4 	.word	0x20000db4
 8009408:	20000da0 	.word	0x20000da0
 800940c:	20000d98 	.word	0x20000d98

08009410 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009414:	4b04      	ldr	r3, [pc, #16]	; (8009428 <vTaskSuspendAll+0x18>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	4a03      	ldr	r2, [pc, #12]	; (8009428 <vTaskSuspendAll+0x18>)
 800941c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800941e:	bf00      	nop
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	20000dbc 	.word	0x20000dbc

0800942c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009436:	2300      	movs	r3, #0
 8009438:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800943a:	4b42      	ldr	r3, [pc, #264]	; (8009544 <xTaskResumeAll+0x118>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10a      	bne.n	8009458 <xTaskResumeAll+0x2c>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	603b      	str	r3, [r7, #0]
}
 8009454:	bf00      	nop
 8009456:	e7fe      	b.n	8009456 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009458:	f001 f914 	bl	800a684 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800945c:	4b39      	ldr	r3, [pc, #228]	; (8009544 <xTaskResumeAll+0x118>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3b01      	subs	r3, #1
 8009462:	4a38      	ldr	r2, [pc, #224]	; (8009544 <xTaskResumeAll+0x118>)
 8009464:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009466:	4b37      	ldr	r3, [pc, #220]	; (8009544 <xTaskResumeAll+0x118>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d162      	bne.n	8009534 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800946e:	4b36      	ldr	r3, [pc, #216]	; (8009548 <xTaskResumeAll+0x11c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d05e      	beq.n	8009534 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009476:	e02f      	b.n	80094d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009478:	4b34      	ldr	r3, [pc, #208]	; (800954c <xTaskResumeAll+0x120>)
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3318      	adds	r3, #24
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff f871 	bl	800856c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3304      	adds	r3, #4
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff f86c 	bl	800856c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009498:	4b2d      	ldr	r3, [pc, #180]	; (8009550 <xTaskResumeAll+0x124>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	429a      	cmp	r2, r3
 800949e:	d903      	bls.n	80094a8 <xTaskResumeAll+0x7c>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	4a2a      	ldr	r2, [pc, #168]	; (8009550 <xTaskResumeAll+0x124>)
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4a27      	ldr	r2, [pc, #156]	; (8009554 <xTaskResumeAll+0x128>)
 80094b6:	441a      	add	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4619      	mov	r1, r3
 80094be:	4610      	mov	r0, r2
 80094c0:	f7fe fff7 	bl	80084b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c8:	4b23      	ldr	r3, [pc, #140]	; (8009558 <xTaskResumeAll+0x12c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d302      	bcc.n	80094d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80094d2:	4b22      	ldr	r3, [pc, #136]	; (800955c <xTaskResumeAll+0x130>)
 80094d4:	2201      	movs	r2, #1
 80094d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094d8:	4b1c      	ldr	r3, [pc, #112]	; (800954c <xTaskResumeAll+0x120>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1cb      	bne.n	8009478 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094e6:	f000 fb55 	bl	8009b94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094ea:	4b1d      	ldr	r3, [pc, #116]	; (8009560 <xTaskResumeAll+0x134>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d010      	beq.n	8009518 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094f6:	f000 f847 	bl	8009588 <xTaskIncrementTick>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009500:	4b16      	ldr	r3, [pc, #88]	; (800955c <xTaskResumeAll+0x130>)
 8009502:	2201      	movs	r2, #1
 8009504:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3b01      	subs	r3, #1
 800950a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1f1      	bne.n	80094f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009512:	4b13      	ldr	r3, [pc, #76]	; (8009560 <xTaskResumeAll+0x134>)
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009518:	4b10      	ldr	r3, [pc, #64]	; (800955c <xTaskResumeAll+0x130>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d009      	beq.n	8009534 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009520:	2301      	movs	r3, #1
 8009522:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009524:	4b0f      	ldr	r3, [pc, #60]	; (8009564 <xTaskResumeAll+0x138>)
 8009526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009534:	f001 f8d6 	bl	800a6e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009538:	68bb      	ldr	r3, [r7, #8]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000dbc 	.word	0x20000dbc
 8009548:	20000d94 	.word	0x20000d94
 800954c:	20000d54 	.word	0x20000d54
 8009550:	20000d9c 	.word	0x20000d9c
 8009554:	200008c4 	.word	0x200008c4
 8009558:	200008c0 	.word	0x200008c0
 800955c:	20000da8 	.word	0x20000da8
 8009560:	20000da4 	.word	0x20000da4
 8009564:	e000ed04 	.word	0xe000ed04

08009568 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800956e:	4b05      	ldr	r3, [pc, #20]	; (8009584 <xTaskGetTickCount+0x1c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009574:	687b      	ldr	r3, [r7, #4]
}
 8009576:	4618      	mov	r0, r3
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20000d98 	.word	0x20000d98

08009588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800958e:	2300      	movs	r3, #0
 8009590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009592:	4b4f      	ldr	r3, [pc, #316]	; (80096d0 <xTaskIncrementTick+0x148>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	f040 808f 	bne.w	80096ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800959c:	4b4d      	ldr	r3, [pc, #308]	; (80096d4 <xTaskIncrementTick+0x14c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3301      	adds	r3, #1
 80095a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095a4:	4a4b      	ldr	r2, [pc, #300]	; (80096d4 <xTaskIncrementTick+0x14c>)
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d120      	bne.n	80095f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80095b0:	4b49      	ldr	r3, [pc, #292]	; (80096d8 <xTaskIncrementTick+0x150>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	603b      	str	r3, [r7, #0]
}
 80095cc:	bf00      	nop
 80095ce:	e7fe      	b.n	80095ce <xTaskIncrementTick+0x46>
 80095d0:	4b41      	ldr	r3, [pc, #260]	; (80096d8 <xTaskIncrementTick+0x150>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	4b41      	ldr	r3, [pc, #260]	; (80096dc <xTaskIncrementTick+0x154>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a3f      	ldr	r2, [pc, #252]	; (80096d8 <xTaskIncrementTick+0x150>)
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	4a3f      	ldr	r2, [pc, #252]	; (80096dc <xTaskIncrementTick+0x154>)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6013      	str	r3, [r2, #0]
 80095e4:	4b3e      	ldr	r3, [pc, #248]	; (80096e0 <xTaskIncrementTick+0x158>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	4a3d      	ldr	r2, [pc, #244]	; (80096e0 <xTaskIncrementTick+0x158>)
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	f000 fad1 	bl	8009b94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095f2:	4b3c      	ldr	r3, [pc, #240]	; (80096e4 <xTaskIncrementTick+0x15c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d349      	bcc.n	8009690 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095fc:	4b36      	ldr	r3, [pc, #216]	; (80096d8 <xTaskIncrementTick+0x150>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d104      	bne.n	8009610 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009606:	4b37      	ldr	r3, [pc, #220]	; (80096e4 <xTaskIncrementTick+0x15c>)
 8009608:	f04f 32ff 	mov.w	r2, #4294967295
 800960c:	601a      	str	r2, [r3, #0]
					break;
 800960e:	e03f      	b.n	8009690 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009610:	4b31      	ldr	r3, [pc, #196]	; (80096d8 <xTaskIncrementTick+0x150>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d203      	bcs.n	8009630 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009628:	4a2e      	ldr	r2, [pc, #184]	; (80096e4 <xTaskIncrementTick+0x15c>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800962e:	e02f      	b.n	8009690 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3304      	adds	r3, #4
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe ff99 	bl	800856c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963e:	2b00      	cmp	r3, #0
 8009640:	d004      	beq.n	800964c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	3318      	adds	r3, #24
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe ff90 	bl	800856c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009650:	4b25      	ldr	r3, [pc, #148]	; (80096e8 <xTaskIncrementTick+0x160>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d903      	bls.n	8009660 <xTaskIncrementTick+0xd8>
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	4a22      	ldr	r2, [pc, #136]	; (80096e8 <xTaskIncrementTick+0x160>)
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4a1f      	ldr	r2, [pc, #124]	; (80096ec <xTaskIncrementTick+0x164>)
 800966e:	441a      	add	r2, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	3304      	adds	r3, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f7fe ff1b 	bl	80084b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009680:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <xTaskIncrementTick+0x168>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009686:	429a      	cmp	r2, r3
 8009688:	d3b8      	bcc.n	80095fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800968a:	2301      	movs	r3, #1
 800968c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800968e:	e7b5      	b.n	80095fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009690:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <xTaskIncrementTick+0x168>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009696:	4915      	ldr	r1, [pc, #84]	; (80096ec <xTaskIncrementTick+0x164>)
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	440b      	add	r3, r1
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d901      	bls.n	80096ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096ac:	4b11      	ldr	r3, [pc, #68]	; (80096f4 <xTaskIncrementTick+0x16c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d007      	beq.n	80096c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80096b4:	2301      	movs	r3, #1
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	e004      	b.n	80096c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096ba:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <xTaskIncrementTick+0x170>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3301      	adds	r3, #1
 80096c0:	4a0d      	ldr	r2, [pc, #52]	; (80096f8 <xTaskIncrementTick+0x170>)
 80096c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096c4:	697b      	ldr	r3, [r7, #20]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000dbc 	.word	0x20000dbc
 80096d4:	20000d98 	.word	0x20000d98
 80096d8:	20000d4c 	.word	0x20000d4c
 80096dc:	20000d50 	.word	0x20000d50
 80096e0:	20000dac 	.word	0x20000dac
 80096e4:	20000db4 	.word	0x20000db4
 80096e8:	20000d9c 	.word	0x20000d9c
 80096ec:	200008c4 	.word	0x200008c4
 80096f0:	200008c0 	.word	0x200008c0
 80096f4:	20000da8 	.word	0x20000da8
 80096f8:	20000da4 	.word	0x20000da4

080096fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009702:	4b28      	ldr	r3, [pc, #160]	; (80097a4 <vTaskSwitchContext+0xa8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800970a:	4b27      	ldr	r3, [pc, #156]	; (80097a8 <vTaskSwitchContext+0xac>)
 800970c:	2201      	movs	r2, #1
 800970e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009710:	e041      	b.n	8009796 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009712:	4b25      	ldr	r3, [pc, #148]	; (80097a8 <vTaskSwitchContext+0xac>)
 8009714:	2200      	movs	r2, #0
 8009716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009718:	4b24      	ldr	r3, [pc, #144]	; (80097ac <vTaskSwitchContext+0xb0>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	e010      	b.n	8009742 <vTaskSwitchContext+0x46>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <vTaskSwitchContext+0x40>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	607b      	str	r3, [r7, #4]
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <vTaskSwitchContext+0x3e>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3b01      	subs	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	491b      	ldr	r1, [pc, #108]	; (80097b0 <vTaskSwitchContext+0xb4>)
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0e4      	beq.n	8009720 <vTaskSwitchContext+0x24>
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4613      	mov	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4a13      	ldr	r2, [pc, #76]	; (80097b0 <vTaskSwitchContext+0xb4>)
 8009762:	4413      	add	r3, r2
 8009764:	60bb      	str	r3, [r7, #8]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	605a      	str	r2, [r3, #4]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	3308      	adds	r3, #8
 8009778:	429a      	cmp	r2, r3
 800977a:	d104      	bne.n	8009786 <vTaskSwitchContext+0x8a>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	605a      	str	r2, [r3, #4]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	4a09      	ldr	r2, [pc, #36]	; (80097b4 <vTaskSwitchContext+0xb8>)
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	4a06      	ldr	r2, [pc, #24]	; (80097ac <vTaskSwitchContext+0xb0>)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6013      	str	r3, [r2, #0]
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000dbc 	.word	0x20000dbc
 80097a8:	20000da8 	.word	0x20000da8
 80097ac:	20000d9c 	.word	0x20000d9c
 80097b0:	200008c4 	.word	0x200008c4
 80097b4:	200008c0 	.word	0x200008c0

080097b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	60fb      	str	r3, [r7, #12]
}
 80097da:	bf00      	nop
 80097dc:	e7fe      	b.n	80097dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097de:	4b07      	ldr	r3, [pc, #28]	; (80097fc <vTaskPlaceOnEventList+0x44>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3318      	adds	r3, #24
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7fe fe87 	bl	80084fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097ec:	2101      	movs	r1, #1
 80097ee:	6838      	ldr	r0, [r7, #0]
 80097f0:	f000 fa7c 	bl	8009cec <prvAddCurrentTaskToDelayedList>
}
 80097f4:	bf00      	nop
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	200008c0 	.word	0x200008c0

08009800 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	617b      	str	r3, [r7, #20]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009828:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <vTaskPlaceOnEventListRestricted+0x54>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3318      	adds	r3, #24
 800982e:	4619      	mov	r1, r3
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f7fe fe3e 	bl	80084b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	68b8      	ldr	r0, [r7, #8]
 8009846:	f000 fa51 	bl	8009cec <prvAddCurrentTaskToDelayedList>
	}
 800984a:	bf00      	nop
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	200008c0 	.word	0x200008c0

08009858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10a      	bne.n	8009884 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	60fb      	str	r3, [r7, #12]
}
 8009880:	bf00      	nop
 8009882:	e7fe      	b.n	8009882 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	3318      	adds	r3, #24
 8009888:	4618      	mov	r0, r3
 800988a:	f7fe fe6f 	bl	800856c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800988e:	4b1e      	ldr	r3, [pc, #120]	; (8009908 <xTaskRemoveFromEventList+0xb0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d11d      	bne.n	80098d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	3304      	adds	r3, #4
 800989a:	4618      	mov	r0, r3
 800989c:	f7fe fe66 	bl	800856c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a4:	4b19      	ldr	r3, [pc, #100]	; (800990c <xTaskRemoveFromEventList+0xb4>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d903      	bls.n	80098b4 <xTaskRemoveFromEventList+0x5c>
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	4a16      	ldr	r2, [pc, #88]	; (800990c <xTaskRemoveFromEventList+0xb4>)
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4a13      	ldr	r2, [pc, #76]	; (8009910 <xTaskRemoveFromEventList+0xb8>)
 80098c2:	441a      	add	r2, r3
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	3304      	adds	r3, #4
 80098c8:	4619      	mov	r1, r3
 80098ca:	4610      	mov	r0, r2
 80098cc:	f7fe fdf1 	bl	80084b2 <vListInsertEnd>
 80098d0:	e005      	b.n	80098de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	3318      	adds	r3, #24
 80098d6:	4619      	mov	r1, r3
 80098d8:	480e      	ldr	r0, [pc, #56]	; (8009914 <xTaskRemoveFromEventList+0xbc>)
 80098da:	f7fe fdea 	bl	80084b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e2:	4b0d      	ldr	r3, [pc, #52]	; (8009918 <xTaskRemoveFromEventList+0xc0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d905      	bls.n	80098f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098ec:	2301      	movs	r3, #1
 80098ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098f0:	4b0a      	ldr	r3, [pc, #40]	; (800991c <xTaskRemoveFromEventList+0xc4>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	e001      	b.n	80098fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098fc:	697b      	ldr	r3, [r7, #20]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	20000dbc 	.word	0x20000dbc
 800990c:	20000d9c 	.word	0x20000d9c
 8009910:	200008c4 	.word	0x200008c4
 8009914:	20000d54 	.word	0x20000d54
 8009918:	200008c0 	.word	0x200008c0
 800991c:	20000da8 	.word	0x20000da8

08009920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009928:	4b06      	ldr	r3, [pc, #24]	; (8009944 <vTaskInternalSetTimeOutState+0x24>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <vTaskInternalSetTimeOutState+0x28>)
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	605a      	str	r2, [r3, #4]
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	20000dac 	.word	0x20000dac
 8009948:	20000d98 	.word	0x20000d98

0800994c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	613b      	str	r3, [r7, #16]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	60fb      	str	r3, [r7, #12]
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800998e:	f000 fe79 	bl	800a684 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009992:	4b1d      	ldr	r3, [pc, #116]	; (8009a08 <xTaskCheckForTimeOut+0xbc>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099aa:	d102      	bne.n	80099b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	e023      	b.n	80099fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	4b15      	ldr	r3, [pc, #84]	; (8009a0c <xTaskCheckForTimeOut+0xc0>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d007      	beq.n	80099ce <xTaskCheckForTimeOut+0x82>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d302      	bcc.n	80099ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099c8:	2301      	movs	r3, #1
 80099ca:	61fb      	str	r3, [r7, #28]
 80099cc:	e015      	b.n	80099fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d20b      	bcs.n	80099f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff ff9b 	bl	8009920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	61fb      	str	r3, [r7, #28]
 80099ee:	e004      	b.n	80099fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2200      	movs	r2, #0
 80099f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099f6:	2301      	movs	r3, #1
 80099f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099fa:	f000 fe73 	bl	800a6e4 <vPortExitCritical>

	return xReturn;
 80099fe:	69fb      	ldr	r3, [r7, #28]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3720      	adds	r7, #32
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	20000d98 	.word	0x20000d98
 8009a0c:	20000dac 	.word	0x20000dac

08009a10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a14:	4b03      	ldr	r3, [pc, #12]	; (8009a24 <vTaskMissedYield+0x14>)
 8009a16:	2201      	movs	r2, #1
 8009a18:	601a      	str	r2, [r3, #0]
}
 8009a1a:	bf00      	nop
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	20000da8 	.word	0x20000da8

08009a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a30:	f000 f852 	bl	8009ad8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a34:	4b06      	ldr	r3, [pc, #24]	; (8009a50 <prvIdleTask+0x28>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d9f9      	bls.n	8009a30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a3c:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <prvIdleTask+0x2c>)
 8009a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a4c:	e7f0      	b.n	8009a30 <prvIdleTask+0x8>
 8009a4e:	bf00      	nop
 8009a50:	200008c4 	.word	0x200008c4
 8009a54:	e000ed04 	.word	0xe000ed04

08009a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a5e:	2300      	movs	r3, #0
 8009a60:	607b      	str	r3, [r7, #4]
 8009a62:	e00c      	b.n	8009a7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	4613      	mov	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4a12      	ldr	r2, [pc, #72]	; (8009ab8 <prvInitialiseTaskLists+0x60>)
 8009a70:	4413      	add	r3, r2
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe fcf0 	bl	8008458 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	607b      	str	r3, [r7, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b37      	cmp	r3, #55	; 0x37
 8009a82:	d9ef      	bls.n	8009a64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a84:	480d      	ldr	r0, [pc, #52]	; (8009abc <prvInitialiseTaskLists+0x64>)
 8009a86:	f7fe fce7 	bl	8008458 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a8a:	480d      	ldr	r0, [pc, #52]	; (8009ac0 <prvInitialiseTaskLists+0x68>)
 8009a8c:	f7fe fce4 	bl	8008458 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a90:	480c      	ldr	r0, [pc, #48]	; (8009ac4 <prvInitialiseTaskLists+0x6c>)
 8009a92:	f7fe fce1 	bl	8008458 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a96:	480c      	ldr	r0, [pc, #48]	; (8009ac8 <prvInitialiseTaskLists+0x70>)
 8009a98:	f7fe fcde 	bl	8008458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a9c:	480b      	ldr	r0, [pc, #44]	; (8009acc <prvInitialiseTaskLists+0x74>)
 8009a9e:	f7fe fcdb 	bl	8008458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009aa2:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <prvInitialiseTaskLists+0x78>)
 8009aa4:	4a05      	ldr	r2, [pc, #20]	; (8009abc <prvInitialiseTaskLists+0x64>)
 8009aa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009aa8:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <prvInitialiseTaskLists+0x7c>)
 8009aaa:	4a05      	ldr	r2, [pc, #20]	; (8009ac0 <prvInitialiseTaskLists+0x68>)
 8009aac:	601a      	str	r2, [r3, #0]
}
 8009aae:	bf00      	nop
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200008c4 	.word	0x200008c4
 8009abc:	20000d24 	.word	0x20000d24
 8009ac0:	20000d38 	.word	0x20000d38
 8009ac4:	20000d54 	.word	0x20000d54
 8009ac8:	20000d68 	.word	0x20000d68
 8009acc:	20000d80 	.word	0x20000d80
 8009ad0:	20000d4c 	.word	0x20000d4c
 8009ad4:	20000d50 	.word	0x20000d50

08009ad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ade:	e019      	b.n	8009b14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ae0:	f000 fdd0 	bl	800a684 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ae4:	4b10      	ldr	r3, [pc, #64]	; (8009b28 <prvCheckTasksWaitingTermination+0x50>)
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fd3b 	bl	800856c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009af6:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <prvCheckTasksWaitingTermination+0x54>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	4a0b      	ldr	r2, [pc, #44]	; (8009b2c <prvCheckTasksWaitingTermination+0x54>)
 8009afe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b00:	4b0b      	ldr	r3, [pc, #44]	; (8009b30 <prvCheckTasksWaitingTermination+0x58>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	4a0a      	ldr	r2, [pc, #40]	; (8009b30 <prvCheckTasksWaitingTermination+0x58>)
 8009b08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b0a:	f000 fdeb 	bl	800a6e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f810 	bl	8009b34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b14:	4b06      	ldr	r3, [pc, #24]	; (8009b30 <prvCheckTasksWaitingTermination+0x58>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e1      	bne.n	8009ae0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b1c:	bf00      	nop
 8009b1e:	bf00      	nop
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20000d68 	.word	0x20000d68
 8009b2c:	20000d94 	.word	0x20000d94
 8009b30:	20000d7c 	.word	0x20000d7c

08009b34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d108      	bne.n	8009b58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 ff4a 	bl	800a9e4 <vPortFree>
				vPortFree( pxTCB );
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 ff47 	bl	800a9e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b56:	e018      	b.n	8009b8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d103      	bne.n	8009b6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 ff3e 	bl	800a9e4 <vPortFree>
	}
 8009b68:	e00f      	b.n	8009b8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d00a      	beq.n	8009b8a <prvDeleteTCB+0x56>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	60fb      	str	r3, [r7, #12]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <prvDeleteTCB+0x54>
	}
 8009b8a:	bf00      	nop
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b9a:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <prvResetNextTaskUnblockTime+0x38>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d104      	bne.n	8009bae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	; (8009bd0 <prvResetNextTaskUnblockTime+0x3c>)
 8009ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8009baa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bac:	e008      	b.n	8009bc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bae:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <prvResetNextTaskUnblockTime+0x38>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	4a04      	ldr	r2, [pc, #16]	; (8009bd0 <prvResetNextTaskUnblockTime+0x3c>)
 8009bbe:	6013      	str	r3, [r2, #0]
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20000d4c 	.word	0x20000d4c
 8009bd0:	20000db4 	.word	0x20000db4

08009bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bda:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <xTaskGetSchedulerState+0x34>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d102      	bne.n	8009be8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009be2:	2301      	movs	r3, #1
 8009be4:	607b      	str	r3, [r7, #4]
 8009be6:	e008      	b.n	8009bfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009be8:	4b08      	ldr	r3, [pc, #32]	; (8009c0c <xTaskGetSchedulerState+0x38>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	e001      	b.n	8009bfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bfa:	687b      	ldr	r3, [r7, #4]
	}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	20000da0 	.word	0x20000da0
 8009c0c:	20000dbc 	.word	0x20000dbc

08009c10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d056      	beq.n	8009cd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c26:	4b2e      	ldr	r3, [pc, #184]	; (8009ce0 <xTaskPriorityDisinherit+0xd0>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d00a      	beq.n	8009c46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	60fb      	str	r3, [r7, #12]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	60bb      	str	r3, [r7, #8]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c68:	1e5a      	subs	r2, r3, #1
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d02c      	beq.n	8009cd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d128      	bne.n	8009cd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	3304      	adds	r3, #4
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fc70 	bl	800856c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca4:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <xTaskPriorityDisinherit+0xd4>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d903      	bls.n	8009cb4 <xTaskPriorityDisinherit+0xa4>
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4a0c      	ldr	r2, [pc, #48]	; (8009ce4 <xTaskPriorityDisinherit+0xd4>)
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4a09      	ldr	r2, [pc, #36]	; (8009ce8 <xTaskPriorityDisinherit+0xd8>)
 8009cc2:	441a      	add	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f7fe fbf1 	bl	80084b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cd4:	697b      	ldr	r3, [r7, #20]
	}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	200008c0 	.word	0x200008c0
 8009ce4:	20000d9c 	.word	0x20000d9c
 8009ce8:	200008c4 	.word	0x200008c4

08009cec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009cf6:	4b21      	ldr	r3, [pc, #132]	; (8009d7c <prvAddCurrentTaskToDelayedList+0x90>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cfc:	4b20      	ldr	r3, [pc, #128]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fc32 	bl	800856c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0e:	d10a      	bne.n	8009d26 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d007      	beq.n	8009d26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d16:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4819      	ldr	r0, [pc, #100]	; (8009d84 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d20:	f7fe fbc7 	bl	80084b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d24:	e026      	b.n	8009d74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d2e:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d209      	bcs.n	8009d52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d3e:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f7fe fbd5 	bl	80084fa <vListInsert>
}
 8009d50:	e010      	b.n	8009d74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d52:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7fe fbcb 	bl	80084fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d64:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d202      	bcs.n	8009d74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d6e:	4a08      	ldr	r2, [pc, #32]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	6013      	str	r3, [r2, #0]
}
 8009d74:	bf00      	nop
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20000d98 	.word	0x20000d98
 8009d80:	200008c0 	.word	0x200008c0
 8009d84:	20000d80 	.word	0x20000d80
 8009d88:	20000d50 	.word	0x20000d50
 8009d8c:	20000d4c 	.word	0x20000d4c
 8009d90:	20000db4 	.word	0x20000db4

08009d94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	; 0x28
 8009d98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d9e:	f000 fb07 	bl	800a3b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009da2:	4b1c      	ldr	r3, [pc, #112]	; (8009e14 <xTimerCreateTimerTask+0x80>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d021      	beq.n	8009dee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009db2:	1d3a      	adds	r2, r7, #4
 8009db4:	f107 0108 	add.w	r1, r7, #8
 8009db8:	f107 030c 	add.w	r3, r7, #12
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fe fb31 	bl	8008424 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009dc2:	6879      	ldr	r1, [r7, #4]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	9202      	str	r2, [sp, #8]
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	2302      	movs	r3, #2
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	460a      	mov	r2, r1
 8009dd4:	4910      	ldr	r1, [pc, #64]	; (8009e18 <xTimerCreateTimerTask+0x84>)
 8009dd6:	4811      	ldr	r0, [pc, #68]	; (8009e1c <xTimerCreateTimerTask+0x88>)
 8009dd8:	f7ff f8de 	bl	8008f98 <xTaskCreateStatic>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4a10      	ldr	r2, [pc, #64]	; (8009e20 <xTimerCreateTimerTask+0x8c>)
 8009de0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009de2:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <xTimerCreateTimerTask+0x8c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009dea:	2301      	movs	r3, #1
 8009dec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	613b      	str	r3, [r7, #16]
}
 8009e06:	bf00      	nop
 8009e08:	e7fe      	b.n	8009e08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e0a:	697b      	ldr	r3, [r7, #20]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	20000df0 	.word	0x20000df0
 8009e18:	0800d8e8 	.word	0x0800d8e8
 8009e1c:	08009f59 	.word	0x08009f59
 8009e20:	20000df4 	.word	0x20000df4

08009e24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08a      	sub	sp, #40	; 0x28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e32:	2300      	movs	r3, #0
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	623b      	str	r3, [r7, #32]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e52:	4b1a      	ldr	r3, [pc, #104]	; (8009ebc <xTimerGenericCommand+0x98>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d02a      	beq.n	8009eb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b05      	cmp	r3, #5
 8009e6a:	dc18      	bgt.n	8009e9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e6c:	f7ff feb2 	bl	8009bd4 <xTaskGetSchedulerState>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d109      	bne.n	8009e8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e76:	4b11      	ldr	r3, [pc, #68]	; (8009ebc <xTimerGenericCommand+0x98>)
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	f107 0110 	add.w	r1, r7, #16
 8009e7e:	2300      	movs	r3, #0
 8009e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e82:	f7fe fca1 	bl	80087c8 <xQueueGenericSend>
 8009e86:	6278      	str	r0, [r7, #36]	; 0x24
 8009e88:	e012      	b.n	8009eb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e8a:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <xTimerGenericCommand+0x98>)
 8009e8c:	6818      	ldr	r0, [r3, #0]
 8009e8e:	f107 0110 	add.w	r1, r7, #16
 8009e92:	2300      	movs	r3, #0
 8009e94:	2200      	movs	r2, #0
 8009e96:	f7fe fc97 	bl	80087c8 <xQueueGenericSend>
 8009e9a:	6278      	str	r0, [r7, #36]	; 0x24
 8009e9c:	e008      	b.n	8009eb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e9e:	4b07      	ldr	r3, [pc, #28]	; (8009ebc <xTimerGenericCommand+0x98>)
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	f107 0110 	add.w	r1, r7, #16
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	f7fe fd8b 	bl	80089c4 <xQueueGenericSendFromISR>
 8009eae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3728      	adds	r7, #40	; 0x28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000df0 	.word	0x20000df0

08009ec0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eca:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <prvProcessExpiredTimer+0x94>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fe fb47 	bl	800856c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ee4:	f003 0304 	and.w	r3, r3, #4
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d022      	beq.n	8009f32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	699a      	ldr	r2, [r3, #24]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	18d1      	adds	r1, r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	6978      	ldr	r0, [r7, #20]
 8009efa:	f000 f8d1 	bl	800a0a0 <prvInsertTimerInActiveList>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01f      	beq.n	8009f44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f04:	2300      	movs	r3, #0
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6978      	ldr	r0, [r7, #20]
 8009f10:	f7ff ff88 	bl	8009e24 <xTimerGenericCommand>
 8009f14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d113      	bne.n	8009f44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	60fb      	str	r3, [r7, #12]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f38:	f023 0301 	bic.w	r3, r3, #1
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	6978      	ldr	r0, [r7, #20]
 8009f4a:	4798      	blx	r3
}
 8009f4c:	bf00      	nop
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	20000de8 	.word	0x20000de8

08009f58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f60:	f107 0308 	add.w	r3, r7, #8
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 f857 	bl	800a018 <prvGetNextExpireTime>
 8009f6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f000 f803 	bl	8009f7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f76:	f000 f8d5 	bl	800a124 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f7a:	e7f1      	b.n	8009f60 <prvTimerTask+0x8>

08009f7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f86:	f7ff fa43 	bl	8009410 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f8a:	f107 0308 	add.w	r3, r7, #8
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 f866 	bl	800a060 <prvSampleTimeNow>
 8009f94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d130      	bne.n	8009ffe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <prvProcessTimerOrBlockTask+0x3c>
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d806      	bhi.n	8009fb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009faa:	f7ff fa3f 	bl	800942c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009fae:	68f9      	ldr	r1, [r7, #12]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff ff85 	bl	8009ec0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009fb6:	e024      	b.n	800a002 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d008      	beq.n	8009fd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009fbe:	4b13      	ldr	r3, [pc, #76]	; (800a00c <prvProcessTimerOrBlockTask+0x90>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <prvProcessTimerOrBlockTask+0x50>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e000      	b.n	8009fce <prvProcessTimerOrBlockTask+0x52>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009fd0:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <prvProcessTimerOrBlockTask+0x94>)
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f7fe ffa7 	bl	8008f30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009fe2:	f7ff fa23 	bl	800942c <xTaskResumeAll>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009fec:	4b09      	ldr	r3, [pc, #36]	; (800a014 <prvProcessTimerOrBlockTask+0x98>)
 8009fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	f3bf 8f6f 	isb	sy
}
 8009ffc:	e001      	b.n	800a002 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ffe:	f7ff fa15 	bl	800942c <xTaskResumeAll>
}
 800a002:	bf00      	nop
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20000dec 	.word	0x20000dec
 800a010:	20000df0 	.word	0x20000df0
 800a014:	e000ed04 	.word	0xe000ed04

0800a018 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a020:	4b0e      	ldr	r3, [pc, #56]	; (800a05c <prvGetNextExpireTime+0x44>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <prvGetNextExpireTime+0x16>
 800a02a:	2201      	movs	r2, #1
 800a02c:	e000      	b.n	800a030 <prvGetNextExpireTime+0x18>
 800a02e:	2200      	movs	r2, #0
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d105      	bne.n	800a048 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a03c:	4b07      	ldr	r3, [pc, #28]	; (800a05c <prvGetNextExpireTime+0x44>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	e001      	b.n	800a04c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a04c:	68fb      	ldr	r3, [r7, #12]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	20000de8 	.word	0x20000de8

0800a060 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a068:	f7ff fa7e 	bl	8009568 <xTaskGetTickCount>
 800a06c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a06e:	4b0b      	ldr	r3, [pc, #44]	; (800a09c <prvSampleTimeNow+0x3c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	429a      	cmp	r2, r3
 800a076:	d205      	bcs.n	800a084 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a078:	f000 f936 	bl	800a2e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	e002      	b.n	800a08a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a08a:	4a04      	ldr	r2, [pc, #16]	; (800a09c <prvSampleTimeNow+0x3c>)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a090:	68fb      	ldr	r3, [r7, #12]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	20000df8 	.word	0x20000df8

0800a0a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d812      	bhi.n	800a0ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	1ad2      	subs	r2, r2, r3
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d302      	bcc.n	800a0da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	e01b      	b.n	800a112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a0da:	4b10      	ldr	r3, [pc, #64]	; (800a11c <prvInsertTimerInActiveList+0x7c>)
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	f7fe fa08 	bl	80084fa <vListInsert>
 800a0ea:	e012      	b.n	800a112 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d206      	bcs.n	800a102 <prvInsertTimerInActiveList+0x62>
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d302      	bcc.n	800a102 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	e007      	b.n	800a112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a102:	4b07      	ldr	r3, [pc, #28]	; (800a120 <prvInsertTimerInActiveList+0x80>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3304      	adds	r3, #4
 800a10a:	4619      	mov	r1, r3
 800a10c:	4610      	mov	r0, r2
 800a10e:	f7fe f9f4 	bl	80084fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a112:	697b      	ldr	r3, [r7, #20]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3718      	adds	r7, #24
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	20000dec 	.word	0x20000dec
 800a120:	20000de8 	.word	0x20000de8

0800a124 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08e      	sub	sp, #56	; 0x38
 800a128:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a12a:	e0ca      	b.n	800a2c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	da18      	bge.n	800a164 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a132:	1d3b      	adds	r3, r7, #4
 800a134:	3304      	adds	r3, #4
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10a      	bne.n	800a154 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	61fb      	str	r3, [r7, #28]
}
 800a150:	bf00      	nop
 800a152:	e7fe      	b.n	800a152 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a15a:	6850      	ldr	r0, [r2, #4]
 800a15c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a15e:	6892      	ldr	r2, [r2, #8]
 800a160:	4611      	mov	r1, r2
 800a162:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f2c0 80aa 	blt.w	800a2c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	3304      	adds	r3, #4
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe f9f5 	bl	800856c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a182:	463b      	mov	r3, r7
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff ff6b 	bl	800a060 <prvSampleTimeNow>
 800a18a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b09      	cmp	r3, #9
 800a190:	f200 8097 	bhi.w	800a2c2 <prvProcessReceivedCommands+0x19e>
 800a194:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <prvProcessReceivedCommands+0x78>)
 800a196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19a:	bf00      	nop
 800a19c:	0800a1c5 	.word	0x0800a1c5
 800a1a0:	0800a1c5 	.word	0x0800a1c5
 800a1a4:	0800a1c5 	.word	0x0800a1c5
 800a1a8:	0800a239 	.word	0x0800a239
 800a1ac:	0800a24d 	.word	0x0800a24d
 800a1b0:	0800a297 	.word	0x0800a297
 800a1b4:	0800a1c5 	.word	0x0800a1c5
 800a1b8:	0800a1c5 	.word	0x0800a1c5
 800a1bc:	0800a239 	.word	0x0800a239
 800a1c0:	0800a24d 	.word	0x0800a24d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ca:	f043 0301 	orr.w	r3, r3, #1
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	18d1      	adds	r1, r2, r3
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e4:	f7ff ff5c 	bl	800a0a0 <prvInsertTimerInActiveList>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d069      	beq.n	800a2c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1fc:	f003 0304 	and.w	r3, r3, #4
 800a200:	2b00      	cmp	r3, #0
 800a202:	d05e      	beq.n	800a2c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	441a      	add	r2, r3
 800a20c:	2300      	movs	r3, #0
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	2300      	movs	r3, #0
 800a212:	2100      	movs	r1, #0
 800a214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a216:	f7ff fe05 	bl	8009e24 <xTimerGenericCommand>
 800a21a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d14f      	bne.n	800a2c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	61bb      	str	r3, [r7, #24]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a23e:	f023 0301 	bic.w	r3, r3, #1
 800a242:	b2da      	uxtb	r2, r3
 800a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a24a:	e03a      	b.n	800a2c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a252:	f043 0301 	orr.w	r3, r3, #1
 800a256:	b2da      	uxtb	r2, r3
 800a258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	617b      	str	r3, [r7, #20]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	699a      	ldr	r2, [r3, #24]
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	18d1      	adds	r1, r2, r3
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a28e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a290:	f7ff ff06 	bl	800a0a0 <prvInsertTimerInActiveList>
					break;
 800a294:	e015      	b.n	800a2c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a29c:	f003 0302 	and.w	r3, r3, #2
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d103      	bne.n	800a2ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a6:	f000 fb9d 	bl	800a9e4 <vPortFree>
 800a2aa:	e00a      	b.n	800a2c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b2:	f023 0301 	bic.w	r3, r3, #1
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2be:	e000      	b.n	800a2c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a2c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2c2:	4b08      	ldr	r3, [pc, #32]	; (800a2e4 <prvProcessReceivedCommands+0x1c0>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	1d39      	adds	r1, r7, #4
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe fc16 	bl	8008afc <xQueueReceive>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f47f af2a 	bne.w	800a12c <prvProcessReceivedCommands+0x8>
	}
}
 800a2d8:	bf00      	nop
 800a2da:	bf00      	nop
 800a2dc:	3730      	adds	r7, #48	; 0x30
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000df0 	.word	0x20000df0

0800a2e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2ee:	e048      	b.n	800a382 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2f0:	4b2d      	ldr	r3, [pc, #180]	; (800a3a8 <prvSwitchTimerLists+0xc0>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2fa:	4b2b      	ldr	r3, [pc, #172]	; (800a3a8 <prvSwitchTimerLists+0xc0>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3304      	adds	r3, #4
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fe f92f 	bl	800856c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a31c:	f003 0304 	and.w	r3, r3, #4
 800a320:	2b00      	cmp	r3, #0
 800a322:	d02e      	beq.n	800a382 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	4413      	add	r3, r2
 800a32c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	429a      	cmp	r2, r3
 800a334:	d90e      	bls.n	800a354 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a342:	4b19      	ldr	r3, [pc, #100]	; (800a3a8 <prvSwitchTimerLists+0xc0>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3304      	adds	r3, #4
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	f7fe f8d4 	bl	80084fa <vListInsert>
 800a352:	e016      	b.n	800a382 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a354:	2300      	movs	r3, #0
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	2300      	movs	r3, #0
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	2100      	movs	r1, #0
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff fd60 	bl	8009e24 <xTimerGenericCommand>
 800a364:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	603b      	str	r3, [r7, #0]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a382:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <prvSwitchTimerLists+0xc0>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1b1      	bne.n	800a2f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <prvSwitchTimerLists+0xc0>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a392:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <prvSwitchTimerLists+0xc4>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a04      	ldr	r2, [pc, #16]	; (800a3a8 <prvSwitchTimerLists+0xc0>)
 800a398:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a39a:	4a04      	ldr	r2, [pc, #16]	; (800a3ac <prvSwitchTimerLists+0xc4>)
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	6013      	str	r3, [r2, #0]
}
 800a3a0:	bf00      	nop
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20000de8 	.word	0x20000de8
 800a3ac:	20000dec 	.word	0x20000dec

0800a3b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3b6:	f000 f965 	bl	800a684 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3ba:	4b15      	ldr	r3, [pc, #84]	; (800a410 <prvCheckForValidListAndQueue+0x60>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d120      	bne.n	800a404 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a3c2:	4814      	ldr	r0, [pc, #80]	; (800a414 <prvCheckForValidListAndQueue+0x64>)
 800a3c4:	f7fe f848 	bl	8008458 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a3c8:	4813      	ldr	r0, [pc, #76]	; (800a418 <prvCheckForValidListAndQueue+0x68>)
 800a3ca:	f7fe f845 	bl	8008458 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a3ce:	4b13      	ldr	r3, [pc, #76]	; (800a41c <prvCheckForValidListAndQueue+0x6c>)
 800a3d0:	4a10      	ldr	r2, [pc, #64]	; (800a414 <prvCheckForValidListAndQueue+0x64>)
 800a3d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a3d4:	4b12      	ldr	r3, [pc, #72]	; (800a420 <prvCheckForValidListAndQueue+0x70>)
 800a3d6:	4a10      	ldr	r2, [pc, #64]	; (800a418 <prvCheckForValidListAndQueue+0x68>)
 800a3d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	4b11      	ldr	r3, [pc, #68]	; (800a424 <prvCheckForValidListAndQueue+0x74>)
 800a3e0:	4a11      	ldr	r2, [pc, #68]	; (800a428 <prvCheckForValidListAndQueue+0x78>)
 800a3e2:	2110      	movs	r1, #16
 800a3e4:	200a      	movs	r0, #10
 800a3e6:	f7fe f953 	bl	8008690 <xQueueGenericCreateStatic>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4a08      	ldr	r2, [pc, #32]	; (800a410 <prvCheckForValidListAndQueue+0x60>)
 800a3ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a3f0:	4b07      	ldr	r3, [pc, #28]	; (800a410 <prvCheckForValidListAndQueue+0x60>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d005      	beq.n	800a404 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3f8:	4b05      	ldr	r3, [pc, #20]	; (800a410 <prvCheckForValidListAndQueue+0x60>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	490b      	ldr	r1, [pc, #44]	; (800a42c <prvCheckForValidListAndQueue+0x7c>)
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe fd6c 	bl	8008edc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a404:	f000 f96e 	bl	800a6e4 <vPortExitCritical>
}
 800a408:	bf00      	nop
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20000df0 	.word	0x20000df0
 800a414:	20000dc0 	.word	0x20000dc0
 800a418:	20000dd4 	.word	0x20000dd4
 800a41c:	20000de8 	.word	0x20000de8
 800a420:	20000dec 	.word	0x20000dec
 800a424:	20000e9c 	.word	0x20000e9c
 800a428:	20000dfc 	.word	0x20000dfc
 800a42c:	0800d8f0 	.word	0x0800d8f0

0800a430 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	3b04      	subs	r3, #4
 800a440:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3b04      	subs	r3, #4
 800a44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f023 0201 	bic.w	r2, r3, #1
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3b04      	subs	r3, #4
 800a45e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a460:	4a0c      	ldr	r2, [pc, #48]	; (800a494 <pxPortInitialiseStack+0x64>)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3b14      	subs	r3, #20
 800a46a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3b04      	subs	r3, #4
 800a476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f06f 0202 	mvn.w	r2, #2
 800a47e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3b20      	subs	r3, #32
 800a484:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a486:	68fb      	ldr	r3, [r7, #12]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	0800a499 	.word	0x0800a499

0800a498 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4a2:	4b12      	ldr	r3, [pc, #72]	; (800a4ec <prvTaskExitError+0x54>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4aa:	d00a      	beq.n	800a4c2 <prvTaskExitError+0x2a>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	60fb      	str	r3, [r7, #12]
}
 800a4be:	bf00      	nop
 800a4c0:	e7fe      	b.n	800a4c0 <prvTaskExitError+0x28>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60bb      	str	r3, [r7, #8]
}
 800a4d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4d6:	bf00      	nop
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0fc      	beq.n	800a4d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	2000000c 	.word	0x2000000c

0800a4f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4f0:	4b07      	ldr	r3, [pc, #28]	; (800a510 <pxCurrentTCBConst2>)
 800a4f2:	6819      	ldr	r1, [r3, #0]
 800a4f4:	6808      	ldr	r0, [r1, #0]
 800a4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fa:	f380 8809 	msr	PSP, r0
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f04f 0000 	mov.w	r0, #0
 800a506:	f380 8811 	msr	BASEPRI, r0
 800a50a:	4770      	bx	lr
 800a50c:	f3af 8000 	nop.w

0800a510 <pxCurrentTCBConst2>:
 800a510:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop

0800a518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a518:	4808      	ldr	r0, [pc, #32]	; (800a53c <prvPortStartFirstTask+0x24>)
 800a51a:	6800      	ldr	r0, [r0, #0]
 800a51c:	6800      	ldr	r0, [r0, #0]
 800a51e:	f380 8808 	msr	MSP, r0
 800a522:	f04f 0000 	mov.w	r0, #0
 800a526:	f380 8814 	msr	CONTROL, r0
 800a52a:	b662      	cpsie	i
 800a52c:	b661      	cpsie	f
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	df00      	svc	0
 800a538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a53a:	bf00      	nop
 800a53c:	e000ed08 	.word	0xe000ed08

0800a540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a546:	4b46      	ldr	r3, [pc, #280]	; (800a660 <xPortStartScheduler+0x120>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a46      	ldr	r2, [pc, #280]	; (800a664 <xPortStartScheduler+0x124>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d10a      	bne.n	800a566 <xPortStartScheduler+0x26>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	613b      	str	r3, [r7, #16]
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a566:	4b3e      	ldr	r3, [pc, #248]	; (800a660 <xPortStartScheduler+0x120>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a3f      	ldr	r2, [pc, #252]	; (800a668 <xPortStartScheduler+0x128>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d10a      	bne.n	800a586 <xPortStartScheduler+0x46>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	60fb      	str	r3, [r7, #12]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a586:	4b39      	ldr	r3, [pc, #228]	; (800a66c <xPortStartScheduler+0x12c>)
 800a588:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	22ff      	movs	r2, #255	; 0xff
 800a596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5a0:	78fb      	ldrb	r3, [r7, #3]
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	4b31      	ldr	r3, [pc, #196]	; (800a670 <xPortStartScheduler+0x130>)
 800a5ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5ae:	4b31      	ldr	r3, [pc, #196]	; (800a674 <xPortStartScheduler+0x134>)
 800a5b0:	2207      	movs	r2, #7
 800a5b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5b4:	e009      	b.n	800a5ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a5b6:	4b2f      	ldr	r3, [pc, #188]	; (800a674 <xPortStartScheduler+0x134>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	4a2d      	ldr	r2, [pc, #180]	; (800a674 <xPortStartScheduler+0x134>)
 800a5be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5ca:	78fb      	ldrb	r3, [r7, #3]
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d2:	2b80      	cmp	r3, #128	; 0x80
 800a5d4:	d0ef      	beq.n	800a5b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5d6:	4b27      	ldr	r3, [pc, #156]	; (800a674 <xPortStartScheduler+0x134>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f1c3 0307 	rsb	r3, r3, #7
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d00a      	beq.n	800a5f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	60bb      	str	r3, [r7, #8]
}
 800a5f4:	bf00      	nop
 800a5f6:	e7fe      	b.n	800a5f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5f8:	4b1e      	ldr	r3, [pc, #120]	; (800a674 <xPortStartScheduler+0x134>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	021b      	lsls	r3, r3, #8
 800a5fe:	4a1d      	ldr	r2, [pc, #116]	; (800a674 <xPortStartScheduler+0x134>)
 800a600:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a602:	4b1c      	ldr	r3, [pc, #112]	; (800a674 <xPortStartScheduler+0x134>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a60a:	4a1a      	ldr	r2, [pc, #104]	; (800a674 <xPortStartScheduler+0x134>)
 800a60c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	b2da      	uxtb	r2, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a616:	4b18      	ldr	r3, [pc, #96]	; (800a678 <xPortStartScheduler+0x138>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a17      	ldr	r2, [pc, #92]	; (800a678 <xPortStartScheduler+0x138>)
 800a61c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a622:	4b15      	ldr	r3, [pc, #84]	; (800a678 <xPortStartScheduler+0x138>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a14      	ldr	r2, [pc, #80]	; (800a678 <xPortStartScheduler+0x138>)
 800a628:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a62c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a62e:	f000 f8dd 	bl	800a7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a632:	4b12      	ldr	r3, [pc, #72]	; (800a67c <xPortStartScheduler+0x13c>)
 800a634:	2200      	movs	r2, #0
 800a636:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a638:	f000 f8fc 	bl	800a834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a63c:	4b10      	ldr	r3, [pc, #64]	; (800a680 <xPortStartScheduler+0x140>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a0f      	ldr	r2, [pc, #60]	; (800a680 <xPortStartScheduler+0x140>)
 800a642:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a646:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a648:	f7ff ff66 	bl	800a518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a64c:	f7ff f856 	bl	80096fc <vTaskSwitchContext>
	prvTaskExitError();
 800a650:	f7ff ff22 	bl	800a498 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	e000ed00 	.word	0xe000ed00
 800a664:	410fc271 	.word	0x410fc271
 800a668:	410fc270 	.word	0x410fc270
 800a66c:	e000e400 	.word	0xe000e400
 800a670:	20000eec 	.word	0x20000eec
 800a674:	20000ef0 	.word	0x20000ef0
 800a678:	e000ed20 	.word	0xe000ed20
 800a67c:	2000000c 	.word	0x2000000c
 800a680:	e000ef34 	.word	0xe000ef34

0800a684 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	607b      	str	r3, [r7, #4]
}
 800a69c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a69e:	4b0f      	ldr	r3, [pc, #60]	; (800a6dc <vPortEnterCritical+0x58>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	4a0d      	ldr	r2, [pc, #52]	; (800a6dc <vPortEnterCritical+0x58>)
 800a6a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6a8:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <vPortEnterCritical+0x58>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d10f      	bne.n	800a6d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <vPortEnterCritical+0x5c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	603b      	str	r3, [r7, #0]
}
 800a6cc:	bf00      	nop
 800a6ce:	e7fe      	b.n	800a6ce <vPortEnterCritical+0x4a>
	}
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	2000000c 	.word	0x2000000c
 800a6e0:	e000ed04 	.word	0xe000ed04

0800a6e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6ea:	4b12      	ldr	r3, [pc, #72]	; (800a734 <vPortExitCritical+0x50>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10a      	bne.n	800a708 <vPortExitCritical+0x24>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	607b      	str	r3, [r7, #4]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a708:	4b0a      	ldr	r3, [pc, #40]	; (800a734 <vPortExitCritical+0x50>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	4a09      	ldr	r2, [pc, #36]	; (800a734 <vPortExitCritical+0x50>)
 800a710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a712:	4b08      	ldr	r3, [pc, #32]	; (800a734 <vPortExitCritical+0x50>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d105      	bne.n	800a726 <vPortExitCritical+0x42>
 800a71a:	2300      	movs	r3, #0
 800a71c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	f383 8811 	msr	BASEPRI, r3
}
 800a724:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	2000000c 	.word	0x2000000c
	...

0800a740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a740:	f3ef 8009 	mrs	r0, PSP
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <pxCurrentTCBConst>)
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	f01e 0f10 	tst.w	lr, #16
 800a750:	bf08      	it	eq
 800a752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75a:	6010      	str	r0, [r2, #0]
 800a75c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a760:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a764:	f380 8811 	msr	BASEPRI, r0
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f7fe ffc4 	bl	80096fc <vTaskSwitchContext>
 800a774:	f04f 0000 	mov.w	r0, #0
 800a778:	f380 8811 	msr	BASEPRI, r0
 800a77c:	bc09      	pop	{r0, r3}
 800a77e:	6819      	ldr	r1, [r3, #0]
 800a780:	6808      	ldr	r0, [r1, #0]
 800a782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a786:	f01e 0f10 	tst.w	lr, #16
 800a78a:	bf08      	it	eq
 800a78c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a790:	f380 8809 	msr	PSP, r0
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	f3af 8000 	nop.w

0800a7a0 <pxCurrentTCBConst>:
 800a7a0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	607b      	str	r3, [r7, #4]
}
 800a7c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7c2:	f7fe fee1 	bl	8009588 <xTaskIncrementTick>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <xPortSysTickHandler+0x40>)
 800a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f383 8811 	msr	BASEPRI, r3
}
 800a7de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <vPortSetupTimerInterrupt+0x34>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <vPortSetupTimerInterrupt+0x38>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	; (800a828 <vPortSetupTimerInterrupt+0x3c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a0a      	ldr	r2, [pc, #40]	; (800a82c <vPortSetupTimerInterrupt+0x40>)
 800a802:	fba2 2303 	umull	r2, r3, r2, r3
 800a806:	099b      	lsrs	r3, r3, #6
 800a808:	4a09      	ldr	r2, [pc, #36]	; (800a830 <vPortSetupTimerInterrupt+0x44>)
 800a80a:	3b01      	subs	r3, #1
 800a80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a80e:	4b04      	ldr	r3, [pc, #16]	; (800a820 <vPortSetupTimerInterrupt+0x34>)
 800a810:	2207      	movs	r2, #7
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	bf00      	nop
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	e000e010 	.word	0xe000e010
 800a824:	e000e018 	.word	0xe000e018
 800a828:	20000000 	.word	0x20000000
 800a82c:	10624dd3 	.word	0x10624dd3
 800a830:	e000e014 	.word	0xe000e014

0800a834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a844 <vPortEnableVFP+0x10>
 800a838:	6801      	ldr	r1, [r0, #0]
 800a83a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a83e:	6001      	str	r1, [r0, #0]
 800a840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a842:	bf00      	nop
 800a844:	e000ed88 	.word	0xe000ed88

0800a848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a84e:	f3ef 8305 	mrs	r3, IPSR
 800a852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b0f      	cmp	r3, #15
 800a858:	d914      	bls.n	800a884 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a85a:	4a17      	ldr	r2, [pc, #92]	; (800a8b8 <vPortValidateInterruptPriority+0x70>)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a864:	4b15      	ldr	r3, [pc, #84]	; (800a8bc <vPortValidateInterruptPriority+0x74>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	7afa      	ldrb	r2, [r7, #11]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d20a      	bcs.n	800a884 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	607b      	str	r3, [r7, #4]
}
 800a880:	bf00      	nop
 800a882:	e7fe      	b.n	800a882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a884:	4b0e      	ldr	r3, [pc, #56]	; (800a8c0 <vPortValidateInterruptPriority+0x78>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a88c:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <vPortValidateInterruptPriority+0x7c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	429a      	cmp	r2, r3
 800a892:	d90a      	bls.n	800a8aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	603b      	str	r3, [r7, #0]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <vPortValidateInterruptPriority+0x60>
	}
 800a8aa:	bf00      	nop
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	e000e3f0 	.word	0xe000e3f0
 800a8bc:	20000eec 	.word	0x20000eec
 800a8c0:	e000ed0c 	.word	0xe000ed0c
 800a8c4:	20000ef0 	.word	0x20000ef0

0800a8c8 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800a8d4:	f7fe fd9c 	bl	8009410 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800a8d8:	4b3e      	ldr	r3, [pc, #248]	; (800a9d4 <pvPortMalloc+0x10c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <pvPortMalloc+0x22>
		{
			prvHeapInit();
 800a8e0:	f000 f8ba 	bl	800aa58 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800a8e4:	4b3b      	ldr	r3, [pc, #236]	; (800a9d4 <pvPortMalloc+0x10c>)
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00e      	beq.n	800a90e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 800a8f0:	2308      	movs	r3, #8
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f003 0307 	and.w	r3, r3, #7
 800a900:	2b00      	cmp	r3, #0
 800a902:	d004      	beq.n	800a90e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f023 0307 	bic.w	r3, r3, #7
 800a90a:	3308      	adds	r3, #8
 800a90c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d057      	beq.n	800a9c4 <pvPortMalloc+0xfc>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f247 5227 	movw	r2, #29991	; 0x7527
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d852      	bhi.n	800a9c4 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800a91e:	4b2e      	ldr	r3, [pc, #184]	; (800a9d8 <pvPortMalloc+0x110>)
 800a920:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800a922:	4b2d      	ldr	r3, [pc, #180]	; (800a9d8 <pvPortMalloc+0x110>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a928:	e004      	b.n	800a934 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d903      	bls.n	800a946 <pvPortMalloc+0x7e>
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1f1      	bne.n	800a92a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	4a24      	ldr	r2, [pc, #144]	; (800a9dc <pvPortMalloc+0x114>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d03a      	beq.n	800a9c4 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2208      	movs	r2, #8
 800a954:	4413      	add	r3, r2
 800a956:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	2208      	movs	r2, #8
 800a96a:	0052      	lsls	r2, r2, #1
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d922      	bls.n	800a9b6 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a970:	69fa      	ldr	r2, [r7, #28]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4413      	add	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	1ad2      	subs	r2, r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	60bb      	str	r3, [r7, #8]
 800a990:	4b11      	ldr	r3, [pc, #68]	; (800a9d8 <pvPortMalloc+0x110>)
 800a992:	613b      	str	r3, [r7, #16]
 800a994:	e002      	b.n	800a99c <pvPortMalloc+0xd4>
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	613b      	str	r3, [r7, #16]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d8f6      	bhi.n	800a996 <pvPortMalloc+0xce>
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9b6:	4b0a      	ldr	r3, [pc, #40]	; (800a9e0 <pvPortMalloc+0x118>)
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	4a07      	ldr	r2, [pc, #28]	; (800a9e0 <pvPortMalloc+0x118>)
 800a9c2:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9c4:	f7fe fd32 	bl	800942c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800a9c8:	697b      	ldr	r3, [r7, #20]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3720      	adds	r7, #32
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20008434 	.word	0x20008434
 800a9d8:	20008424 	.word	0x20008424
 800a9dc:	2000842c 	.word	0x2000842c
 800a9e0:	20000010 	.word	0x20000010

0800a9e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d027      	beq.n	800aa46 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800a9f6:	2308      	movs	r3, #8
 800a9f8:	425b      	negs	r3, r3
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800aa04:	f7fe fd04 	bl	8009410 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	60bb      	str	r3, [r7, #8]
 800aa0e:	4b10      	ldr	r3, [pc, #64]	; (800aa50 <vPortFree+0x6c>)
 800aa10:	617b      	str	r3, [r7, #20]
 800aa12:	e002      	b.n	800aa1a <vPortFree+0x36>
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	617b      	str	r3, [r7, #20]
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d8f6      	bhi.n	800aa14 <vPortFree+0x30>
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <vPortFree+0x70>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	4a05      	ldr	r2, [pc, #20]	; (800aa54 <vPortFree+0x70>)
 800aa40:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800aa42:	f7fe fcf3 	bl	800942c <xTaskResumeAll>
	}
}
 800aa46:	bf00      	nop
 800aa48:	3718      	adds	r7, #24
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20008424 	.word	0x20008424
 800aa54:	20000010 	.word	0x20000010

0800aa58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800aa5e:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <prvHeapInit+0x48>)
 800aa60:	f023 0307 	bic.w	r3, r3, #7
 800aa64:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa66:	4a0f      	ldr	r2, [pc, #60]	; (800aaa4 <prvHeapInit+0x4c>)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa6c:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <prvHeapInit+0x4c>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800aa72:	4b0d      	ldr	r3, [pc, #52]	; (800aaa8 <prvHeapInit+0x50>)
 800aa74:	f247 5228 	movw	r2, #29992	; 0x7528
 800aa78:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800aa7a:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <prvHeapInit+0x50>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	f247 5228 	movw	r2, #29992	; 0x7528
 800aa8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	4a06      	ldr	r2, [pc, #24]	; (800aaa8 <prvHeapInit+0x50>)
 800aa90:	601a      	str	r2, [r3, #0]
}
 800aa92:	bf00      	nop
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	20000efc 	.word	0x20000efc
 800aaa4:	20008424 	.word	0x20008424
 800aaa8:	2000842c 	.word	0x2000842c

0800aaac <__errno>:
 800aaac:	4b01      	ldr	r3, [pc, #4]	; (800aab4 <__errno+0x8>)
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	20000014 	.word	0x20000014

0800aab8 <__libc_init_array>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	4d0d      	ldr	r5, [pc, #52]	; (800aaf0 <__libc_init_array+0x38>)
 800aabc:	4c0d      	ldr	r4, [pc, #52]	; (800aaf4 <__libc_init_array+0x3c>)
 800aabe:	1b64      	subs	r4, r4, r5
 800aac0:	10a4      	asrs	r4, r4, #2
 800aac2:	2600      	movs	r6, #0
 800aac4:	42a6      	cmp	r6, r4
 800aac6:	d109      	bne.n	800aadc <__libc_init_array+0x24>
 800aac8:	4d0b      	ldr	r5, [pc, #44]	; (800aaf8 <__libc_init_array+0x40>)
 800aaca:	4c0c      	ldr	r4, [pc, #48]	; (800aafc <__libc_init_array+0x44>)
 800aacc:	f002 feb4 	bl	800d838 <_init>
 800aad0:	1b64      	subs	r4, r4, r5
 800aad2:	10a4      	asrs	r4, r4, #2
 800aad4:	2600      	movs	r6, #0
 800aad6:	42a6      	cmp	r6, r4
 800aad8:	d105      	bne.n	800aae6 <__libc_init_array+0x2e>
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aae0:	4798      	blx	r3
 800aae2:	3601      	adds	r6, #1
 800aae4:	e7ee      	b.n	800aac4 <__libc_init_array+0xc>
 800aae6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaea:	4798      	blx	r3
 800aaec:	3601      	adds	r6, #1
 800aaee:	e7f2      	b.n	800aad6 <__libc_init_array+0x1e>
 800aaf0:	0800dd94 	.word	0x0800dd94
 800aaf4:	0800dd94 	.word	0x0800dd94
 800aaf8:	0800dd94 	.word	0x0800dd94
 800aafc:	0800dd98 	.word	0x0800dd98

0800ab00 <memcpy>:
 800ab00:	440a      	add	r2, r1
 800ab02:	4291      	cmp	r1, r2
 800ab04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab08:	d100      	bne.n	800ab0c <memcpy+0xc>
 800ab0a:	4770      	bx	lr
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab16:	4291      	cmp	r1, r2
 800ab18:	d1f9      	bne.n	800ab0e <memcpy+0xe>
 800ab1a:	bd10      	pop	{r4, pc}

0800ab1c <memset>:
 800ab1c:	4402      	add	r2, r0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d100      	bne.n	800ab26 <memset+0xa>
 800ab24:	4770      	bx	lr
 800ab26:	f803 1b01 	strb.w	r1, [r3], #1
 800ab2a:	e7f9      	b.n	800ab20 <memset+0x4>

0800ab2c <__cvt>:
 800ab2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab30:	ec55 4b10 	vmov	r4, r5, d0
 800ab34:	2d00      	cmp	r5, #0
 800ab36:	460e      	mov	r6, r1
 800ab38:	4619      	mov	r1, r3
 800ab3a:	462b      	mov	r3, r5
 800ab3c:	bfbb      	ittet	lt
 800ab3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab42:	461d      	movlt	r5, r3
 800ab44:	2300      	movge	r3, #0
 800ab46:	232d      	movlt	r3, #45	; 0x2d
 800ab48:	700b      	strb	r3, [r1, #0]
 800ab4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab50:	4691      	mov	r9, r2
 800ab52:	f023 0820 	bic.w	r8, r3, #32
 800ab56:	bfbc      	itt	lt
 800ab58:	4622      	movlt	r2, r4
 800ab5a:	4614      	movlt	r4, r2
 800ab5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab60:	d005      	beq.n	800ab6e <__cvt+0x42>
 800ab62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab66:	d100      	bne.n	800ab6a <__cvt+0x3e>
 800ab68:	3601      	adds	r6, #1
 800ab6a:	2102      	movs	r1, #2
 800ab6c:	e000      	b.n	800ab70 <__cvt+0x44>
 800ab6e:	2103      	movs	r1, #3
 800ab70:	ab03      	add	r3, sp, #12
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	ab02      	add	r3, sp, #8
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	ec45 4b10 	vmov	d0, r4, r5
 800ab7c:	4653      	mov	r3, sl
 800ab7e:	4632      	mov	r2, r6
 800ab80:	f000 fcea 	bl	800b558 <_dtoa_r>
 800ab84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab88:	4607      	mov	r7, r0
 800ab8a:	d102      	bne.n	800ab92 <__cvt+0x66>
 800ab8c:	f019 0f01 	tst.w	r9, #1
 800ab90:	d022      	beq.n	800abd8 <__cvt+0xac>
 800ab92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab96:	eb07 0906 	add.w	r9, r7, r6
 800ab9a:	d110      	bne.n	800abbe <__cvt+0x92>
 800ab9c:	783b      	ldrb	r3, [r7, #0]
 800ab9e:	2b30      	cmp	r3, #48	; 0x30
 800aba0:	d10a      	bne.n	800abb8 <__cvt+0x8c>
 800aba2:	2200      	movs	r2, #0
 800aba4:	2300      	movs	r3, #0
 800aba6:	4620      	mov	r0, r4
 800aba8:	4629      	mov	r1, r5
 800abaa:	f7f5 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800abae:	b918      	cbnz	r0, 800abb8 <__cvt+0x8c>
 800abb0:	f1c6 0601 	rsb	r6, r6, #1
 800abb4:	f8ca 6000 	str.w	r6, [sl]
 800abb8:	f8da 3000 	ldr.w	r3, [sl]
 800abbc:	4499      	add	r9, r3
 800abbe:	2200      	movs	r2, #0
 800abc0:	2300      	movs	r3, #0
 800abc2:	4620      	mov	r0, r4
 800abc4:	4629      	mov	r1, r5
 800abc6:	f7f5 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800abca:	b108      	cbz	r0, 800abd0 <__cvt+0xa4>
 800abcc:	f8cd 900c 	str.w	r9, [sp, #12]
 800abd0:	2230      	movs	r2, #48	; 0x30
 800abd2:	9b03      	ldr	r3, [sp, #12]
 800abd4:	454b      	cmp	r3, r9
 800abd6:	d307      	bcc.n	800abe8 <__cvt+0xbc>
 800abd8:	9b03      	ldr	r3, [sp, #12]
 800abda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abdc:	1bdb      	subs	r3, r3, r7
 800abde:	4638      	mov	r0, r7
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	b004      	add	sp, #16
 800abe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe8:	1c59      	adds	r1, r3, #1
 800abea:	9103      	str	r1, [sp, #12]
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	e7f0      	b.n	800abd2 <__cvt+0xa6>

0800abf0 <__exponent>:
 800abf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abf2:	4603      	mov	r3, r0
 800abf4:	2900      	cmp	r1, #0
 800abf6:	bfb8      	it	lt
 800abf8:	4249      	neglt	r1, r1
 800abfa:	f803 2b02 	strb.w	r2, [r3], #2
 800abfe:	bfb4      	ite	lt
 800ac00:	222d      	movlt	r2, #45	; 0x2d
 800ac02:	222b      	movge	r2, #43	; 0x2b
 800ac04:	2909      	cmp	r1, #9
 800ac06:	7042      	strb	r2, [r0, #1]
 800ac08:	dd2a      	ble.n	800ac60 <__exponent+0x70>
 800ac0a:	f10d 0407 	add.w	r4, sp, #7
 800ac0e:	46a4      	mov	ip, r4
 800ac10:	270a      	movs	r7, #10
 800ac12:	46a6      	mov	lr, r4
 800ac14:	460a      	mov	r2, r1
 800ac16:	fb91 f6f7 	sdiv	r6, r1, r7
 800ac1a:	fb07 1516 	mls	r5, r7, r6, r1
 800ac1e:	3530      	adds	r5, #48	; 0x30
 800ac20:	2a63      	cmp	r2, #99	; 0x63
 800ac22:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	dcf1      	bgt.n	800ac12 <__exponent+0x22>
 800ac2e:	3130      	adds	r1, #48	; 0x30
 800ac30:	f1ae 0502 	sub.w	r5, lr, #2
 800ac34:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac38:	1c44      	adds	r4, r0, #1
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	4561      	cmp	r1, ip
 800ac3e:	d30a      	bcc.n	800ac56 <__exponent+0x66>
 800ac40:	f10d 0209 	add.w	r2, sp, #9
 800ac44:	eba2 020e 	sub.w	r2, r2, lr
 800ac48:	4565      	cmp	r5, ip
 800ac4a:	bf88      	it	hi
 800ac4c:	2200      	movhi	r2, #0
 800ac4e:	4413      	add	r3, r2
 800ac50:	1a18      	subs	r0, r3, r0
 800ac52:	b003      	add	sp, #12
 800ac54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac5e:	e7ed      	b.n	800ac3c <__exponent+0x4c>
 800ac60:	2330      	movs	r3, #48	; 0x30
 800ac62:	3130      	adds	r1, #48	; 0x30
 800ac64:	7083      	strb	r3, [r0, #2]
 800ac66:	70c1      	strb	r1, [r0, #3]
 800ac68:	1d03      	adds	r3, r0, #4
 800ac6a:	e7f1      	b.n	800ac50 <__exponent+0x60>

0800ac6c <_printf_float>:
 800ac6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac70:	ed2d 8b02 	vpush	{d8}
 800ac74:	b08d      	sub	sp, #52	; 0x34
 800ac76:	460c      	mov	r4, r1
 800ac78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac7c:	4616      	mov	r6, r2
 800ac7e:	461f      	mov	r7, r3
 800ac80:	4605      	mov	r5, r0
 800ac82:	f001 fa55 	bl	800c130 <_localeconv_r>
 800ac86:	f8d0 a000 	ldr.w	sl, [r0]
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	f7f5 faa0 	bl	80001d0 <strlen>
 800ac90:	2300      	movs	r3, #0
 800ac92:	930a      	str	r3, [sp, #40]	; 0x28
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	9305      	str	r3, [sp, #20]
 800ac98:	f8d8 3000 	ldr.w	r3, [r8]
 800ac9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aca0:	3307      	adds	r3, #7
 800aca2:	f023 0307 	bic.w	r3, r3, #7
 800aca6:	f103 0208 	add.w	r2, r3, #8
 800acaa:	f8c8 2000 	str.w	r2, [r8]
 800acae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800acb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800acba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acbe:	9307      	str	r3, [sp, #28]
 800acc0:	f8cd 8018 	str.w	r8, [sp, #24]
 800acc4:	ee08 0a10 	vmov	s16, r0
 800acc8:	4b9f      	ldr	r3, [pc, #636]	; (800af48 <_printf_float+0x2dc>)
 800acca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acce:	f04f 32ff 	mov.w	r2, #4294967295
 800acd2:	f7f5 ff2b 	bl	8000b2c <__aeabi_dcmpun>
 800acd6:	bb88      	cbnz	r0, 800ad3c <_printf_float+0xd0>
 800acd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acdc:	4b9a      	ldr	r3, [pc, #616]	; (800af48 <_printf_float+0x2dc>)
 800acde:	f04f 32ff 	mov.w	r2, #4294967295
 800ace2:	f7f5 ff05 	bl	8000af0 <__aeabi_dcmple>
 800ace6:	bb48      	cbnz	r0, 800ad3c <_printf_float+0xd0>
 800ace8:	2200      	movs	r2, #0
 800acea:	2300      	movs	r3, #0
 800acec:	4640      	mov	r0, r8
 800acee:	4649      	mov	r1, r9
 800acf0:	f7f5 fef4 	bl	8000adc <__aeabi_dcmplt>
 800acf4:	b110      	cbz	r0, 800acfc <_printf_float+0x90>
 800acf6:	232d      	movs	r3, #45	; 0x2d
 800acf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acfc:	4b93      	ldr	r3, [pc, #588]	; (800af4c <_printf_float+0x2e0>)
 800acfe:	4894      	ldr	r0, [pc, #592]	; (800af50 <_printf_float+0x2e4>)
 800ad00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ad04:	bf94      	ite	ls
 800ad06:	4698      	movls	r8, r3
 800ad08:	4680      	movhi	r8, r0
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	6123      	str	r3, [r4, #16]
 800ad0e:	9b05      	ldr	r3, [sp, #20]
 800ad10:	f023 0204 	bic.w	r2, r3, #4
 800ad14:	6022      	str	r2, [r4, #0]
 800ad16:	f04f 0900 	mov.w	r9, #0
 800ad1a:	9700      	str	r7, [sp, #0]
 800ad1c:	4633      	mov	r3, r6
 800ad1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad20:	4621      	mov	r1, r4
 800ad22:	4628      	mov	r0, r5
 800ad24:	f000 f9d8 	bl	800b0d8 <_printf_common>
 800ad28:	3001      	adds	r0, #1
 800ad2a:	f040 8090 	bne.w	800ae4e <_printf_float+0x1e2>
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	b00d      	add	sp, #52	; 0x34
 800ad34:	ecbd 8b02 	vpop	{d8}
 800ad38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3c:	4642      	mov	r2, r8
 800ad3e:	464b      	mov	r3, r9
 800ad40:	4640      	mov	r0, r8
 800ad42:	4649      	mov	r1, r9
 800ad44:	f7f5 fef2 	bl	8000b2c <__aeabi_dcmpun>
 800ad48:	b140      	cbz	r0, 800ad5c <_printf_float+0xf0>
 800ad4a:	464b      	mov	r3, r9
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	bfbc      	itt	lt
 800ad50:	232d      	movlt	r3, #45	; 0x2d
 800ad52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad56:	487f      	ldr	r0, [pc, #508]	; (800af54 <_printf_float+0x2e8>)
 800ad58:	4b7f      	ldr	r3, [pc, #508]	; (800af58 <_printf_float+0x2ec>)
 800ad5a:	e7d1      	b.n	800ad00 <_printf_float+0x94>
 800ad5c:	6863      	ldr	r3, [r4, #4]
 800ad5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad62:	9206      	str	r2, [sp, #24]
 800ad64:	1c5a      	adds	r2, r3, #1
 800ad66:	d13f      	bne.n	800ade8 <_printf_float+0x17c>
 800ad68:	2306      	movs	r3, #6
 800ad6a:	6063      	str	r3, [r4, #4]
 800ad6c:	9b05      	ldr	r3, [sp, #20]
 800ad6e:	6861      	ldr	r1, [r4, #4]
 800ad70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad74:	2300      	movs	r3, #0
 800ad76:	9303      	str	r3, [sp, #12]
 800ad78:	ab0a      	add	r3, sp, #40	; 0x28
 800ad7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad7e:	ab09      	add	r3, sp, #36	; 0x24
 800ad80:	ec49 8b10 	vmov	d0, r8, r9
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	6022      	str	r2, [r4, #0]
 800ad88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f7ff fecd 	bl	800ab2c <__cvt>
 800ad92:	9b06      	ldr	r3, [sp, #24]
 800ad94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad96:	2b47      	cmp	r3, #71	; 0x47
 800ad98:	4680      	mov	r8, r0
 800ad9a:	d108      	bne.n	800adae <_printf_float+0x142>
 800ad9c:	1cc8      	adds	r0, r1, #3
 800ad9e:	db02      	blt.n	800ada6 <_printf_float+0x13a>
 800ada0:	6863      	ldr	r3, [r4, #4]
 800ada2:	4299      	cmp	r1, r3
 800ada4:	dd41      	ble.n	800ae2a <_printf_float+0x1be>
 800ada6:	f1ab 0b02 	sub.w	fp, fp, #2
 800adaa:	fa5f fb8b 	uxtb.w	fp, fp
 800adae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adb2:	d820      	bhi.n	800adf6 <_printf_float+0x18a>
 800adb4:	3901      	subs	r1, #1
 800adb6:	465a      	mov	r2, fp
 800adb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800adbc:	9109      	str	r1, [sp, #36]	; 0x24
 800adbe:	f7ff ff17 	bl	800abf0 <__exponent>
 800adc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adc4:	1813      	adds	r3, r2, r0
 800adc6:	2a01      	cmp	r2, #1
 800adc8:	4681      	mov	r9, r0
 800adca:	6123      	str	r3, [r4, #16]
 800adcc:	dc02      	bgt.n	800add4 <_printf_float+0x168>
 800adce:	6822      	ldr	r2, [r4, #0]
 800add0:	07d2      	lsls	r2, r2, #31
 800add2:	d501      	bpl.n	800add8 <_printf_float+0x16c>
 800add4:	3301      	adds	r3, #1
 800add6:	6123      	str	r3, [r4, #16]
 800add8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800addc:	2b00      	cmp	r3, #0
 800adde:	d09c      	beq.n	800ad1a <_printf_float+0xae>
 800ade0:	232d      	movs	r3, #45	; 0x2d
 800ade2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ade6:	e798      	b.n	800ad1a <_printf_float+0xae>
 800ade8:	9a06      	ldr	r2, [sp, #24]
 800adea:	2a47      	cmp	r2, #71	; 0x47
 800adec:	d1be      	bne.n	800ad6c <_printf_float+0x100>
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1bc      	bne.n	800ad6c <_printf_float+0x100>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e7b9      	b.n	800ad6a <_printf_float+0xfe>
 800adf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adfa:	d118      	bne.n	800ae2e <_printf_float+0x1c2>
 800adfc:	2900      	cmp	r1, #0
 800adfe:	6863      	ldr	r3, [r4, #4]
 800ae00:	dd0b      	ble.n	800ae1a <_printf_float+0x1ae>
 800ae02:	6121      	str	r1, [r4, #16]
 800ae04:	b913      	cbnz	r3, 800ae0c <_printf_float+0x1a0>
 800ae06:	6822      	ldr	r2, [r4, #0]
 800ae08:	07d0      	lsls	r0, r2, #31
 800ae0a:	d502      	bpl.n	800ae12 <_printf_float+0x1a6>
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	440b      	add	r3, r1
 800ae10:	6123      	str	r3, [r4, #16]
 800ae12:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae14:	f04f 0900 	mov.w	r9, #0
 800ae18:	e7de      	b.n	800add8 <_printf_float+0x16c>
 800ae1a:	b913      	cbnz	r3, 800ae22 <_printf_float+0x1b6>
 800ae1c:	6822      	ldr	r2, [r4, #0]
 800ae1e:	07d2      	lsls	r2, r2, #31
 800ae20:	d501      	bpl.n	800ae26 <_printf_float+0x1ba>
 800ae22:	3302      	adds	r3, #2
 800ae24:	e7f4      	b.n	800ae10 <_printf_float+0x1a4>
 800ae26:	2301      	movs	r3, #1
 800ae28:	e7f2      	b.n	800ae10 <_printf_float+0x1a4>
 800ae2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae30:	4299      	cmp	r1, r3
 800ae32:	db05      	blt.n	800ae40 <_printf_float+0x1d4>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	6121      	str	r1, [r4, #16]
 800ae38:	07d8      	lsls	r0, r3, #31
 800ae3a:	d5ea      	bpl.n	800ae12 <_printf_float+0x1a6>
 800ae3c:	1c4b      	adds	r3, r1, #1
 800ae3e:	e7e7      	b.n	800ae10 <_printf_float+0x1a4>
 800ae40:	2900      	cmp	r1, #0
 800ae42:	bfd4      	ite	le
 800ae44:	f1c1 0202 	rsble	r2, r1, #2
 800ae48:	2201      	movgt	r2, #1
 800ae4a:	4413      	add	r3, r2
 800ae4c:	e7e0      	b.n	800ae10 <_printf_float+0x1a4>
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	055a      	lsls	r2, r3, #21
 800ae52:	d407      	bmi.n	800ae64 <_printf_float+0x1f8>
 800ae54:	6923      	ldr	r3, [r4, #16]
 800ae56:	4642      	mov	r2, r8
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b8      	blx	r7
 800ae5e:	3001      	adds	r0, #1
 800ae60:	d12c      	bne.n	800aebc <_printf_float+0x250>
 800ae62:	e764      	b.n	800ad2e <_printf_float+0xc2>
 800ae64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae68:	f240 80e0 	bls.w	800b02c <_printf_float+0x3c0>
 800ae6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae70:	2200      	movs	r2, #0
 800ae72:	2300      	movs	r3, #0
 800ae74:	f7f5 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d034      	beq.n	800aee6 <_printf_float+0x27a>
 800ae7c:	4a37      	ldr	r2, [pc, #220]	; (800af5c <_printf_float+0x2f0>)
 800ae7e:	2301      	movs	r3, #1
 800ae80:	4631      	mov	r1, r6
 800ae82:	4628      	mov	r0, r5
 800ae84:	47b8      	blx	r7
 800ae86:	3001      	adds	r0, #1
 800ae88:	f43f af51 	beq.w	800ad2e <_printf_float+0xc2>
 800ae8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae90:	429a      	cmp	r2, r3
 800ae92:	db02      	blt.n	800ae9a <_printf_float+0x22e>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	07d8      	lsls	r0, r3, #31
 800ae98:	d510      	bpl.n	800aebc <_printf_float+0x250>
 800ae9a:	ee18 3a10 	vmov	r3, s16
 800ae9e:	4652      	mov	r2, sl
 800aea0:	4631      	mov	r1, r6
 800aea2:	4628      	mov	r0, r5
 800aea4:	47b8      	blx	r7
 800aea6:	3001      	adds	r0, #1
 800aea8:	f43f af41 	beq.w	800ad2e <_printf_float+0xc2>
 800aeac:	f04f 0800 	mov.w	r8, #0
 800aeb0:	f104 091a 	add.w	r9, r4, #26
 800aeb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	4543      	cmp	r3, r8
 800aeba:	dc09      	bgt.n	800aed0 <_printf_float+0x264>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	079b      	lsls	r3, r3, #30
 800aec0:	f100 8105 	bmi.w	800b0ce <_printf_float+0x462>
 800aec4:	68e0      	ldr	r0, [r4, #12]
 800aec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aec8:	4298      	cmp	r0, r3
 800aeca:	bfb8      	it	lt
 800aecc:	4618      	movlt	r0, r3
 800aece:	e730      	b.n	800ad32 <_printf_float+0xc6>
 800aed0:	2301      	movs	r3, #1
 800aed2:	464a      	mov	r2, r9
 800aed4:	4631      	mov	r1, r6
 800aed6:	4628      	mov	r0, r5
 800aed8:	47b8      	blx	r7
 800aeda:	3001      	adds	r0, #1
 800aedc:	f43f af27 	beq.w	800ad2e <_printf_float+0xc2>
 800aee0:	f108 0801 	add.w	r8, r8, #1
 800aee4:	e7e6      	b.n	800aeb4 <_printf_float+0x248>
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	dc39      	bgt.n	800af60 <_printf_float+0x2f4>
 800aeec:	4a1b      	ldr	r2, [pc, #108]	; (800af5c <_printf_float+0x2f0>)
 800aeee:	2301      	movs	r3, #1
 800aef0:	4631      	mov	r1, r6
 800aef2:	4628      	mov	r0, r5
 800aef4:	47b8      	blx	r7
 800aef6:	3001      	adds	r0, #1
 800aef8:	f43f af19 	beq.w	800ad2e <_printf_float+0xc2>
 800aefc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af00:	4313      	orrs	r3, r2
 800af02:	d102      	bne.n	800af0a <_printf_float+0x29e>
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	07d9      	lsls	r1, r3, #31
 800af08:	d5d8      	bpl.n	800aebc <_printf_float+0x250>
 800af0a:	ee18 3a10 	vmov	r3, s16
 800af0e:	4652      	mov	r2, sl
 800af10:	4631      	mov	r1, r6
 800af12:	4628      	mov	r0, r5
 800af14:	47b8      	blx	r7
 800af16:	3001      	adds	r0, #1
 800af18:	f43f af09 	beq.w	800ad2e <_printf_float+0xc2>
 800af1c:	f04f 0900 	mov.w	r9, #0
 800af20:	f104 0a1a 	add.w	sl, r4, #26
 800af24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af26:	425b      	negs	r3, r3
 800af28:	454b      	cmp	r3, r9
 800af2a:	dc01      	bgt.n	800af30 <_printf_float+0x2c4>
 800af2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af2e:	e792      	b.n	800ae56 <_printf_float+0x1ea>
 800af30:	2301      	movs	r3, #1
 800af32:	4652      	mov	r2, sl
 800af34:	4631      	mov	r1, r6
 800af36:	4628      	mov	r0, r5
 800af38:	47b8      	blx	r7
 800af3a:	3001      	adds	r0, #1
 800af3c:	f43f aef7 	beq.w	800ad2e <_printf_float+0xc2>
 800af40:	f109 0901 	add.w	r9, r9, #1
 800af44:	e7ee      	b.n	800af24 <_printf_float+0x2b8>
 800af46:	bf00      	nop
 800af48:	7fefffff 	.word	0x7fefffff
 800af4c:	0800d9b0 	.word	0x0800d9b0
 800af50:	0800d9b4 	.word	0x0800d9b4
 800af54:	0800d9bc 	.word	0x0800d9bc
 800af58:	0800d9b8 	.word	0x0800d9b8
 800af5c:	0800d9c0 	.word	0x0800d9c0
 800af60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af64:	429a      	cmp	r2, r3
 800af66:	bfa8      	it	ge
 800af68:	461a      	movge	r2, r3
 800af6a:	2a00      	cmp	r2, #0
 800af6c:	4691      	mov	r9, r2
 800af6e:	dc37      	bgt.n	800afe0 <_printf_float+0x374>
 800af70:	f04f 0b00 	mov.w	fp, #0
 800af74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af78:	f104 021a 	add.w	r2, r4, #26
 800af7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af7e:	9305      	str	r3, [sp, #20]
 800af80:	eba3 0309 	sub.w	r3, r3, r9
 800af84:	455b      	cmp	r3, fp
 800af86:	dc33      	bgt.n	800aff0 <_printf_float+0x384>
 800af88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af8c:	429a      	cmp	r2, r3
 800af8e:	db3b      	blt.n	800b008 <_printf_float+0x39c>
 800af90:	6823      	ldr	r3, [r4, #0]
 800af92:	07da      	lsls	r2, r3, #31
 800af94:	d438      	bmi.n	800b008 <_printf_float+0x39c>
 800af96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af98:	9b05      	ldr	r3, [sp, #20]
 800af9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	eba2 0901 	sub.w	r9, r2, r1
 800afa2:	4599      	cmp	r9, r3
 800afa4:	bfa8      	it	ge
 800afa6:	4699      	movge	r9, r3
 800afa8:	f1b9 0f00 	cmp.w	r9, #0
 800afac:	dc35      	bgt.n	800b01a <_printf_float+0x3ae>
 800afae:	f04f 0800 	mov.w	r8, #0
 800afb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afb6:	f104 0a1a 	add.w	sl, r4, #26
 800afba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afbe:	1a9b      	subs	r3, r3, r2
 800afc0:	eba3 0309 	sub.w	r3, r3, r9
 800afc4:	4543      	cmp	r3, r8
 800afc6:	f77f af79 	ble.w	800aebc <_printf_float+0x250>
 800afca:	2301      	movs	r3, #1
 800afcc:	4652      	mov	r2, sl
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b8      	blx	r7
 800afd4:	3001      	adds	r0, #1
 800afd6:	f43f aeaa 	beq.w	800ad2e <_printf_float+0xc2>
 800afda:	f108 0801 	add.w	r8, r8, #1
 800afde:	e7ec      	b.n	800afba <_printf_float+0x34e>
 800afe0:	4613      	mov	r3, r2
 800afe2:	4631      	mov	r1, r6
 800afe4:	4642      	mov	r2, r8
 800afe6:	4628      	mov	r0, r5
 800afe8:	47b8      	blx	r7
 800afea:	3001      	adds	r0, #1
 800afec:	d1c0      	bne.n	800af70 <_printf_float+0x304>
 800afee:	e69e      	b.n	800ad2e <_printf_float+0xc2>
 800aff0:	2301      	movs	r3, #1
 800aff2:	4631      	mov	r1, r6
 800aff4:	4628      	mov	r0, r5
 800aff6:	9205      	str	r2, [sp, #20]
 800aff8:	47b8      	blx	r7
 800affa:	3001      	adds	r0, #1
 800affc:	f43f ae97 	beq.w	800ad2e <_printf_float+0xc2>
 800b000:	9a05      	ldr	r2, [sp, #20]
 800b002:	f10b 0b01 	add.w	fp, fp, #1
 800b006:	e7b9      	b.n	800af7c <_printf_float+0x310>
 800b008:	ee18 3a10 	vmov	r3, s16
 800b00c:	4652      	mov	r2, sl
 800b00e:	4631      	mov	r1, r6
 800b010:	4628      	mov	r0, r5
 800b012:	47b8      	blx	r7
 800b014:	3001      	adds	r0, #1
 800b016:	d1be      	bne.n	800af96 <_printf_float+0x32a>
 800b018:	e689      	b.n	800ad2e <_printf_float+0xc2>
 800b01a:	9a05      	ldr	r2, [sp, #20]
 800b01c:	464b      	mov	r3, r9
 800b01e:	4442      	add	r2, r8
 800b020:	4631      	mov	r1, r6
 800b022:	4628      	mov	r0, r5
 800b024:	47b8      	blx	r7
 800b026:	3001      	adds	r0, #1
 800b028:	d1c1      	bne.n	800afae <_printf_float+0x342>
 800b02a:	e680      	b.n	800ad2e <_printf_float+0xc2>
 800b02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b02e:	2a01      	cmp	r2, #1
 800b030:	dc01      	bgt.n	800b036 <_printf_float+0x3ca>
 800b032:	07db      	lsls	r3, r3, #31
 800b034:	d538      	bpl.n	800b0a8 <_printf_float+0x43c>
 800b036:	2301      	movs	r3, #1
 800b038:	4642      	mov	r2, r8
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	f43f ae74 	beq.w	800ad2e <_printf_float+0xc2>
 800b046:	ee18 3a10 	vmov	r3, s16
 800b04a:	4652      	mov	r2, sl
 800b04c:	4631      	mov	r1, r6
 800b04e:	4628      	mov	r0, r5
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	f43f ae6b 	beq.w	800ad2e <_printf_float+0xc2>
 800b058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b05c:	2200      	movs	r2, #0
 800b05e:	2300      	movs	r3, #0
 800b060:	f7f5 fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 800b064:	b9d8      	cbnz	r0, 800b09e <_printf_float+0x432>
 800b066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b068:	f108 0201 	add.w	r2, r8, #1
 800b06c:	3b01      	subs	r3, #1
 800b06e:	4631      	mov	r1, r6
 800b070:	4628      	mov	r0, r5
 800b072:	47b8      	blx	r7
 800b074:	3001      	adds	r0, #1
 800b076:	d10e      	bne.n	800b096 <_printf_float+0x42a>
 800b078:	e659      	b.n	800ad2e <_printf_float+0xc2>
 800b07a:	2301      	movs	r3, #1
 800b07c:	4652      	mov	r2, sl
 800b07e:	4631      	mov	r1, r6
 800b080:	4628      	mov	r0, r5
 800b082:	47b8      	blx	r7
 800b084:	3001      	adds	r0, #1
 800b086:	f43f ae52 	beq.w	800ad2e <_printf_float+0xc2>
 800b08a:	f108 0801 	add.w	r8, r8, #1
 800b08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b090:	3b01      	subs	r3, #1
 800b092:	4543      	cmp	r3, r8
 800b094:	dcf1      	bgt.n	800b07a <_printf_float+0x40e>
 800b096:	464b      	mov	r3, r9
 800b098:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b09c:	e6dc      	b.n	800ae58 <_printf_float+0x1ec>
 800b09e:	f04f 0800 	mov.w	r8, #0
 800b0a2:	f104 0a1a 	add.w	sl, r4, #26
 800b0a6:	e7f2      	b.n	800b08e <_printf_float+0x422>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	e7df      	b.n	800b06e <_printf_float+0x402>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	464a      	mov	r2, r9
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	47b8      	blx	r7
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	f43f ae38 	beq.w	800ad2e <_printf_float+0xc2>
 800b0be:	f108 0801 	add.w	r8, r8, #1
 800b0c2:	68e3      	ldr	r3, [r4, #12]
 800b0c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0c6:	1a5b      	subs	r3, r3, r1
 800b0c8:	4543      	cmp	r3, r8
 800b0ca:	dcf0      	bgt.n	800b0ae <_printf_float+0x442>
 800b0cc:	e6fa      	b.n	800aec4 <_printf_float+0x258>
 800b0ce:	f04f 0800 	mov.w	r8, #0
 800b0d2:	f104 0919 	add.w	r9, r4, #25
 800b0d6:	e7f4      	b.n	800b0c2 <_printf_float+0x456>

0800b0d8 <_printf_common>:
 800b0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0dc:	4616      	mov	r6, r2
 800b0de:	4699      	mov	r9, r3
 800b0e0:	688a      	ldr	r2, [r1, #8]
 800b0e2:	690b      	ldr	r3, [r1, #16]
 800b0e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	bfb8      	it	lt
 800b0ec:	4613      	movlt	r3, r2
 800b0ee:	6033      	str	r3, [r6, #0]
 800b0f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	b10a      	cbz	r2, 800b0fe <_printf_common+0x26>
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	6033      	str	r3, [r6, #0]
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	0699      	lsls	r1, r3, #26
 800b102:	bf42      	ittt	mi
 800b104:	6833      	ldrmi	r3, [r6, #0]
 800b106:	3302      	addmi	r3, #2
 800b108:	6033      	strmi	r3, [r6, #0]
 800b10a:	6825      	ldr	r5, [r4, #0]
 800b10c:	f015 0506 	ands.w	r5, r5, #6
 800b110:	d106      	bne.n	800b120 <_printf_common+0x48>
 800b112:	f104 0a19 	add.w	sl, r4, #25
 800b116:	68e3      	ldr	r3, [r4, #12]
 800b118:	6832      	ldr	r2, [r6, #0]
 800b11a:	1a9b      	subs	r3, r3, r2
 800b11c:	42ab      	cmp	r3, r5
 800b11e:	dc26      	bgt.n	800b16e <_printf_common+0x96>
 800b120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b124:	1e13      	subs	r3, r2, #0
 800b126:	6822      	ldr	r2, [r4, #0]
 800b128:	bf18      	it	ne
 800b12a:	2301      	movne	r3, #1
 800b12c:	0692      	lsls	r2, r2, #26
 800b12e:	d42b      	bmi.n	800b188 <_printf_common+0xb0>
 800b130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b134:	4649      	mov	r1, r9
 800b136:	4638      	mov	r0, r7
 800b138:	47c0      	blx	r8
 800b13a:	3001      	adds	r0, #1
 800b13c:	d01e      	beq.n	800b17c <_printf_common+0xa4>
 800b13e:	6823      	ldr	r3, [r4, #0]
 800b140:	68e5      	ldr	r5, [r4, #12]
 800b142:	6832      	ldr	r2, [r6, #0]
 800b144:	f003 0306 	and.w	r3, r3, #6
 800b148:	2b04      	cmp	r3, #4
 800b14a:	bf08      	it	eq
 800b14c:	1aad      	subeq	r5, r5, r2
 800b14e:	68a3      	ldr	r3, [r4, #8]
 800b150:	6922      	ldr	r2, [r4, #16]
 800b152:	bf0c      	ite	eq
 800b154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b158:	2500      	movne	r5, #0
 800b15a:	4293      	cmp	r3, r2
 800b15c:	bfc4      	itt	gt
 800b15e:	1a9b      	subgt	r3, r3, r2
 800b160:	18ed      	addgt	r5, r5, r3
 800b162:	2600      	movs	r6, #0
 800b164:	341a      	adds	r4, #26
 800b166:	42b5      	cmp	r5, r6
 800b168:	d11a      	bne.n	800b1a0 <_printf_common+0xc8>
 800b16a:	2000      	movs	r0, #0
 800b16c:	e008      	b.n	800b180 <_printf_common+0xa8>
 800b16e:	2301      	movs	r3, #1
 800b170:	4652      	mov	r2, sl
 800b172:	4649      	mov	r1, r9
 800b174:	4638      	mov	r0, r7
 800b176:	47c0      	blx	r8
 800b178:	3001      	adds	r0, #1
 800b17a:	d103      	bne.n	800b184 <_printf_common+0xac>
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295
 800b180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b184:	3501      	adds	r5, #1
 800b186:	e7c6      	b.n	800b116 <_printf_common+0x3e>
 800b188:	18e1      	adds	r1, r4, r3
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	2030      	movs	r0, #48	; 0x30
 800b18e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b192:	4422      	add	r2, r4
 800b194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b19c:	3302      	adds	r3, #2
 800b19e:	e7c7      	b.n	800b130 <_printf_common+0x58>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	4622      	mov	r2, r4
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	47c0      	blx	r8
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	d0e6      	beq.n	800b17c <_printf_common+0xa4>
 800b1ae:	3601      	adds	r6, #1
 800b1b0:	e7d9      	b.n	800b166 <_printf_common+0x8e>
	...

0800b1b4 <_printf_i>:
 800b1b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b8:	460c      	mov	r4, r1
 800b1ba:	4691      	mov	r9, r2
 800b1bc:	7e27      	ldrb	r7, [r4, #24]
 800b1be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b1c0:	2f78      	cmp	r7, #120	; 0x78
 800b1c2:	4680      	mov	r8, r0
 800b1c4:	469a      	mov	sl, r3
 800b1c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1ca:	d807      	bhi.n	800b1dc <_printf_i+0x28>
 800b1cc:	2f62      	cmp	r7, #98	; 0x62
 800b1ce:	d80a      	bhi.n	800b1e6 <_printf_i+0x32>
 800b1d0:	2f00      	cmp	r7, #0
 800b1d2:	f000 80d8 	beq.w	800b386 <_printf_i+0x1d2>
 800b1d6:	2f58      	cmp	r7, #88	; 0x58
 800b1d8:	f000 80a3 	beq.w	800b322 <_printf_i+0x16e>
 800b1dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b1e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1e4:	e03a      	b.n	800b25c <_printf_i+0xa8>
 800b1e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1ea:	2b15      	cmp	r3, #21
 800b1ec:	d8f6      	bhi.n	800b1dc <_printf_i+0x28>
 800b1ee:	a001      	add	r0, pc, #4	; (adr r0, 800b1f4 <_printf_i+0x40>)
 800b1f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b1f4:	0800b24d 	.word	0x0800b24d
 800b1f8:	0800b261 	.word	0x0800b261
 800b1fc:	0800b1dd 	.word	0x0800b1dd
 800b200:	0800b1dd 	.word	0x0800b1dd
 800b204:	0800b1dd 	.word	0x0800b1dd
 800b208:	0800b1dd 	.word	0x0800b1dd
 800b20c:	0800b261 	.word	0x0800b261
 800b210:	0800b1dd 	.word	0x0800b1dd
 800b214:	0800b1dd 	.word	0x0800b1dd
 800b218:	0800b1dd 	.word	0x0800b1dd
 800b21c:	0800b1dd 	.word	0x0800b1dd
 800b220:	0800b36d 	.word	0x0800b36d
 800b224:	0800b291 	.word	0x0800b291
 800b228:	0800b34f 	.word	0x0800b34f
 800b22c:	0800b1dd 	.word	0x0800b1dd
 800b230:	0800b1dd 	.word	0x0800b1dd
 800b234:	0800b38f 	.word	0x0800b38f
 800b238:	0800b1dd 	.word	0x0800b1dd
 800b23c:	0800b291 	.word	0x0800b291
 800b240:	0800b1dd 	.word	0x0800b1dd
 800b244:	0800b1dd 	.word	0x0800b1dd
 800b248:	0800b357 	.word	0x0800b357
 800b24c:	680b      	ldr	r3, [r1, #0]
 800b24e:	1d1a      	adds	r2, r3, #4
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	600a      	str	r2, [r1, #0]
 800b254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b25c:	2301      	movs	r3, #1
 800b25e:	e0a3      	b.n	800b3a8 <_printf_i+0x1f4>
 800b260:	6825      	ldr	r5, [r4, #0]
 800b262:	6808      	ldr	r0, [r1, #0]
 800b264:	062e      	lsls	r6, r5, #24
 800b266:	f100 0304 	add.w	r3, r0, #4
 800b26a:	d50a      	bpl.n	800b282 <_printf_i+0xce>
 800b26c:	6805      	ldr	r5, [r0, #0]
 800b26e:	600b      	str	r3, [r1, #0]
 800b270:	2d00      	cmp	r5, #0
 800b272:	da03      	bge.n	800b27c <_printf_i+0xc8>
 800b274:	232d      	movs	r3, #45	; 0x2d
 800b276:	426d      	negs	r5, r5
 800b278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b27c:	485e      	ldr	r0, [pc, #376]	; (800b3f8 <_printf_i+0x244>)
 800b27e:	230a      	movs	r3, #10
 800b280:	e019      	b.n	800b2b6 <_printf_i+0x102>
 800b282:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b286:	6805      	ldr	r5, [r0, #0]
 800b288:	600b      	str	r3, [r1, #0]
 800b28a:	bf18      	it	ne
 800b28c:	b22d      	sxthne	r5, r5
 800b28e:	e7ef      	b.n	800b270 <_printf_i+0xbc>
 800b290:	680b      	ldr	r3, [r1, #0]
 800b292:	6825      	ldr	r5, [r4, #0]
 800b294:	1d18      	adds	r0, r3, #4
 800b296:	6008      	str	r0, [r1, #0]
 800b298:	0628      	lsls	r0, r5, #24
 800b29a:	d501      	bpl.n	800b2a0 <_printf_i+0xec>
 800b29c:	681d      	ldr	r5, [r3, #0]
 800b29e:	e002      	b.n	800b2a6 <_printf_i+0xf2>
 800b2a0:	0669      	lsls	r1, r5, #25
 800b2a2:	d5fb      	bpl.n	800b29c <_printf_i+0xe8>
 800b2a4:	881d      	ldrh	r5, [r3, #0]
 800b2a6:	4854      	ldr	r0, [pc, #336]	; (800b3f8 <_printf_i+0x244>)
 800b2a8:	2f6f      	cmp	r7, #111	; 0x6f
 800b2aa:	bf0c      	ite	eq
 800b2ac:	2308      	moveq	r3, #8
 800b2ae:	230a      	movne	r3, #10
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2b6:	6866      	ldr	r6, [r4, #4]
 800b2b8:	60a6      	str	r6, [r4, #8]
 800b2ba:	2e00      	cmp	r6, #0
 800b2bc:	bfa2      	ittt	ge
 800b2be:	6821      	ldrge	r1, [r4, #0]
 800b2c0:	f021 0104 	bicge.w	r1, r1, #4
 800b2c4:	6021      	strge	r1, [r4, #0]
 800b2c6:	b90d      	cbnz	r5, 800b2cc <_printf_i+0x118>
 800b2c8:	2e00      	cmp	r6, #0
 800b2ca:	d04d      	beq.n	800b368 <_printf_i+0x1b4>
 800b2cc:	4616      	mov	r6, r2
 800b2ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2d2:	fb03 5711 	mls	r7, r3, r1, r5
 800b2d6:	5dc7      	ldrb	r7, [r0, r7]
 800b2d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2dc:	462f      	mov	r7, r5
 800b2de:	42bb      	cmp	r3, r7
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	d9f4      	bls.n	800b2ce <_printf_i+0x11a>
 800b2e4:	2b08      	cmp	r3, #8
 800b2e6:	d10b      	bne.n	800b300 <_printf_i+0x14c>
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	07df      	lsls	r7, r3, #31
 800b2ec:	d508      	bpl.n	800b300 <_printf_i+0x14c>
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	6861      	ldr	r1, [r4, #4]
 800b2f2:	4299      	cmp	r1, r3
 800b2f4:	bfde      	ittt	le
 800b2f6:	2330      	movle	r3, #48	; 0x30
 800b2f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b300:	1b92      	subs	r2, r2, r6
 800b302:	6122      	str	r2, [r4, #16]
 800b304:	f8cd a000 	str.w	sl, [sp]
 800b308:	464b      	mov	r3, r9
 800b30a:	aa03      	add	r2, sp, #12
 800b30c:	4621      	mov	r1, r4
 800b30e:	4640      	mov	r0, r8
 800b310:	f7ff fee2 	bl	800b0d8 <_printf_common>
 800b314:	3001      	adds	r0, #1
 800b316:	d14c      	bne.n	800b3b2 <_printf_i+0x1fe>
 800b318:	f04f 30ff 	mov.w	r0, #4294967295
 800b31c:	b004      	add	sp, #16
 800b31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b322:	4835      	ldr	r0, [pc, #212]	; (800b3f8 <_printf_i+0x244>)
 800b324:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	680e      	ldr	r6, [r1, #0]
 800b32c:	061f      	lsls	r7, r3, #24
 800b32e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b332:	600e      	str	r6, [r1, #0]
 800b334:	d514      	bpl.n	800b360 <_printf_i+0x1ac>
 800b336:	07d9      	lsls	r1, r3, #31
 800b338:	bf44      	itt	mi
 800b33a:	f043 0320 	orrmi.w	r3, r3, #32
 800b33e:	6023      	strmi	r3, [r4, #0]
 800b340:	b91d      	cbnz	r5, 800b34a <_printf_i+0x196>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	f023 0320 	bic.w	r3, r3, #32
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	2310      	movs	r3, #16
 800b34c:	e7b0      	b.n	800b2b0 <_printf_i+0xfc>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	f043 0320 	orr.w	r3, r3, #32
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	2378      	movs	r3, #120	; 0x78
 800b358:	4828      	ldr	r0, [pc, #160]	; (800b3fc <_printf_i+0x248>)
 800b35a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b35e:	e7e3      	b.n	800b328 <_printf_i+0x174>
 800b360:	065e      	lsls	r6, r3, #25
 800b362:	bf48      	it	mi
 800b364:	b2ad      	uxthmi	r5, r5
 800b366:	e7e6      	b.n	800b336 <_printf_i+0x182>
 800b368:	4616      	mov	r6, r2
 800b36a:	e7bb      	b.n	800b2e4 <_printf_i+0x130>
 800b36c:	680b      	ldr	r3, [r1, #0]
 800b36e:	6826      	ldr	r6, [r4, #0]
 800b370:	6960      	ldr	r0, [r4, #20]
 800b372:	1d1d      	adds	r5, r3, #4
 800b374:	600d      	str	r5, [r1, #0]
 800b376:	0635      	lsls	r5, r6, #24
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	d501      	bpl.n	800b380 <_printf_i+0x1cc>
 800b37c:	6018      	str	r0, [r3, #0]
 800b37e:	e002      	b.n	800b386 <_printf_i+0x1d2>
 800b380:	0671      	lsls	r1, r6, #25
 800b382:	d5fb      	bpl.n	800b37c <_printf_i+0x1c8>
 800b384:	8018      	strh	r0, [r3, #0]
 800b386:	2300      	movs	r3, #0
 800b388:	6123      	str	r3, [r4, #16]
 800b38a:	4616      	mov	r6, r2
 800b38c:	e7ba      	b.n	800b304 <_printf_i+0x150>
 800b38e:	680b      	ldr	r3, [r1, #0]
 800b390:	1d1a      	adds	r2, r3, #4
 800b392:	600a      	str	r2, [r1, #0]
 800b394:	681e      	ldr	r6, [r3, #0]
 800b396:	6862      	ldr	r2, [r4, #4]
 800b398:	2100      	movs	r1, #0
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7f4 ff20 	bl	80001e0 <memchr>
 800b3a0:	b108      	cbz	r0, 800b3a6 <_printf_i+0x1f2>
 800b3a2:	1b80      	subs	r0, r0, r6
 800b3a4:	6060      	str	r0, [r4, #4]
 800b3a6:	6863      	ldr	r3, [r4, #4]
 800b3a8:	6123      	str	r3, [r4, #16]
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3b0:	e7a8      	b.n	800b304 <_printf_i+0x150>
 800b3b2:	6923      	ldr	r3, [r4, #16]
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	47d0      	blx	sl
 800b3bc:	3001      	adds	r0, #1
 800b3be:	d0ab      	beq.n	800b318 <_printf_i+0x164>
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	079b      	lsls	r3, r3, #30
 800b3c4:	d413      	bmi.n	800b3ee <_printf_i+0x23a>
 800b3c6:	68e0      	ldr	r0, [r4, #12]
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	4298      	cmp	r0, r3
 800b3cc:	bfb8      	it	lt
 800b3ce:	4618      	movlt	r0, r3
 800b3d0:	e7a4      	b.n	800b31c <_printf_i+0x168>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	4640      	mov	r0, r8
 800b3da:	47d0      	blx	sl
 800b3dc:	3001      	adds	r0, #1
 800b3de:	d09b      	beq.n	800b318 <_printf_i+0x164>
 800b3e0:	3501      	adds	r5, #1
 800b3e2:	68e3      	ldr	r3, [r4, #12]
 800b3e4:	9903      	ldr	r1, [sp, #12]
 800b3e6:	1a5b      	subs	r3, r3, r1
 800b3e8:	42ab      	cmp	r3, r5
 800b3ea:	dcf2      	bgt.n	800b3d2 <_printf_i+0x21e>
 800b3ec:	e7eb      	b.n	800b3c6 <_printf_i+0x212>
 800b3ee:	2500      	movs	r5, #0
 800b3f0:	f104 0619 	add.w	r6, r4, #25
 800b3f4:	e7f5      	b.n	800b3e2 <_printf_i+0x22e>
 800b3f6:	bf00      	nop
 800b3f8:	0800d9c2 	.word	0x0800d9c2
 800b3fc:	0800d9d3 	.word	0x0800d9d3

0800b400 <siprintf>:
 800b400:	b40e      	push	{r1, r2, r3}
 800b402:	b500      	push	{lr}
 800b404:	b09c      	sub	sp, #112	; 0x70
 800b406:	ab1d      	add	r3, sp, #116	; 0x74
 800b408:	9002      	str	r0, [sp, #8]
 800b40a:	9006      	str	r0, [sp, #24]
 800b40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b410:	4809      	ldr	r0, [pc, #36]	; (800b438 <siprintf+0x38>)
 800b412:	9107      	str	r1, [sp, #28]
 800b414:	9104      	str	r1, [sp, #16]
 800b416:	4909      	ldr	r1, [pc, #36]	; (800b43c <siprintf+0x3c>)
 800b418:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41c:	9105      	str	r1, [sp, #20]
 800b41e:	6800      	ldr	r0, [r0, #0]
 800b420:	9301      	str	r3, [sp, #4]
 800b422:	a902      	add	r1, sp, #8
 800b424:	f001 fb24 	bl	800ca70 <_svfiprintf_r>
 800b428:	9b02      	ldr	r3, [sp, #8]
 800b42a:	2200      	movs	r2, #0
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	b01c      	add	sp, #112	; 0x70
 800b430:	f85d eb04 	ldr.w	lr, [sp], #4
 800b434:	b003      	add	sp, #12
 800b436:	4770      	bx	lr
 800b438:	20000014 	.word	0x20000014
 800b43c:	ffff0208 	.word	0xffff0208

0800b440 <quorem>:
 800b440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	6903      	ldr	r3, [r0, #16]
 800b446:	690c      	ldr	r4, [r1, #16]
 800b448:	42a3      	cmp	r3, r4
 800b44a:	4607      	mov	r7, r0
 800b44c:	f2c0 8081 	blt.w	800b552 <quorem+0x112>
 800b450:	3c01      	subs	r4, #1
 800b452:	f101 0814 	add.w	r8, r1, #20
 800b456:	f100 0514 	add.w	r5, r0, #20
 800b45a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b468:	3301      	adds	r3, #1
 800b46a:	429a      	cmp	r2, r3
 800b46c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b470:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b474:	fbb2 f6f3 	udiv	r6, r2, r3
 800b478:	d331      	bcc.n	800b4de <quorem+0x9e>
 800b47a:	f04f 0e00 	mov.w	lr, #0
 800b47e:	4640      	mov	r0, r8
 800b480:	46ac      	mov	ip, r5
 800b482:	46f2      	mov	sl, lr
 800b484:	f850 2b04 	ldr.w	r2, [r0], #4
 800b488:	b293      	uxth	r3, r2
 800b48a:	fb06 e303 	mla	r3, r6, r3, lr
 800b48e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b492:	b29b      	uxth	r3, r3
 800b494:	ebaa 0303 	sub.w	r3, sl, r3
 800b498:	0c12      	lsrs	r2, r2, #16
 800b49a:	f8dc a000 	ldr.w	sl, [ip]
 800b49e:	fb06 e202 	mla	r2, r6, r2, lr
 800b4a2:	fa13 f38a 	uxtah	r3, r3, sl
 800b4a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4aa:	fa1f fa82 	uxth.w	sl, r2
 800b4ae:	f8dc 2000 	ldr.w	r2, [ip]
 800b4b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b4b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4c0:	4581      	cmp	r9, r0
 800b4c2:	f84c 3b04 	str.w	r3, [ip], #4
 800b4c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4ca:	d2db      	bcs.n	800b484 <quorem+0x44>
 800b4cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4d0:	b92b      	cbnz	r3, 800b4de <quorem+0x9e>
 800b4d2:	9b01      	ldr	r3, [sp, #4]
 800b4d4:	3b04      	subs	r3, #4
 800b4d6:	429d      	cmp	r5, r3
 800b4d8:	461a      	mov	r2, r3
 800b4da:	d32e      	bcc.n	800b53a <quorem+0xfa>
 800b4dc:	613c      	str	r4, [r7, #16]
 800b4de:	4638      	mov	r0, r7
 800b4e0:	f001 f8b0 	bl	800c644 <__mcmp>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	db24      	blt.n	800b532 <quorem+0xf2>
 800b4e8:	3601      	adds	r6, #1
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f04f 0c00 	mov.w	ip, #0
 800b4f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4f4:	f8d0 e000 	ldr.w	lr, [r0]
 800b4f8:	b293      	uxth	r3, r2
 800b4fa:	ebac 0303 	sub.w	r3, ip, r3
 800b4fe:	0c12      	lsrs	r2, r2, #16
 800b500:	fa13 f38e 	uxtah	r3, r3, lr
 800b504:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b512:	45c1      	cmp	r9, r8
 800b514:	f840 3b04 	str.w	r3, [r0], #4
 800b518:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b51c:	d2e8      	bcs.n	800b4f0 <quorem+0xb0>
 800b51e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b526:	b922      	cbnz	r2, 800b532 <quorem+0xf2>
 800b528:	3b04      	subs	r3, #4
 800b52a:	429d      	cmp	r5, r3
 800b52c:	461a      	mov	r2, r3
 800b52e:	d30a      	bcc.n	800b546 <quorem+0x106>
 800b530:	613c      	str	r4, [r7, #16]
 800b532:	4630      	mov	r0, r6
 800b534:	b003      	add	sp, #12
 800b536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53a:	6812      	ldr	r2, [r2, #0]
 800b53c:	3b04      	subs	r3, #4
 800b53e:	2a00      	cmp	r2, #0
 800b540:	d1cc      	bne.n	800b4dc <quorem+0x9c>
 800b542:	3c01      	subs	r4, #1
 800b544:	e7c7      	b.n	800b4d6 <quorem+0x96>
 800b546:	6812      	ldr	r2, [r2, #0]
 800b548:	3b04      	subs	r3, #4
 800b54a:	2a00      	cmp	r2, #0
 800b54c:	d1f0      	bne.n	800b530 <quorem+0xf0>
 800b54e:	3c01      	subs	r4, #1
 800b550:	e7eb      	b.n	800b52a <quorem+0xea>
 800b552:	2000      	movs	r0, #0
 800b554:	e7ee      	b.n	800b534 <quorem+0xf4>
	...

0800b558 <_dtoa_r>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	ed2d 8b02 	vpush	{d8}
 800b560:	ec57 6b10 	vmov	r6, r7, d0
 800b564:	b095      	sub	sp, #84	; 0x54
 800b566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b568:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b56c:	9105      	str	r1, [sp, #20]
 800b56e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b572:	4604      	mov	r4, r0
 800b574:	9209      	str	r2, [sp, #36]	; 0x24
 800b576:	930f      	str	r3, [sp, #60]	; 0x3c
 800b578:	b975      	cbnz	r5, 800b598 <_dtoa_r+0x40>
 800b57a:	2010      	movs	r0, #16
 800b57c:	f000 fddc 	bl	800c138 <malloc>
 800b580:	4602      	mov	r2, r0
 800b582:	6260      	str	r0, [r4, #36]	; 0x24
 800b584:	b920      	cbnz	r0, 800b590 <_dtoa_r+0x38>
 800b586:	4bb2      	ldr	r3, [pc, #712]	; (800b850 <_dtoa_r+0x2f8>)
 800b588:	21ea      	movs	r1, #234	; 0xea
 800b58a:	48b2      	ldr	r0, [pc, #712]	; (800b854 <_dtoa_r+0x2fc>)
 800b58c:	f001 fb80 	bl	800cc90 <__assert_func>
 800b590:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b594:	6005      	str	r5, [r0, #0]
 800b596:	60c5      	str	r5, [r0, #12]
 800b598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b59a:	6819      	ldr	r1, [r3, #0]
 800b59c:	b151      	cbz	r1, 800b5b4 <_dtoa_r+0x5c>
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	604a      	str	r2, [r1, #4]
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4093      	lsls	r3, r2
 800b5a6:	608b      	str	r3, [r1, #8]
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fe0d 	bl	800c1c8 <_Bfree>
 800b5ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	1e3b      	subs	r3, r7, #0
 800b5b6:	bfb9      	ittee	lt
 800b5b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5bc:	9303      	strlt	r3, [sp, #12]
 800b5be:	2300      	movge	r3, #0
 800b5c0:	f8c8 3000 	strge.w	r3, [r8]
 800b5c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b5c8:	4ba3      	ldr	r3, [pc, #652]	; (800b858 <_dtoa_r+0x300>)
 800b5ca:	bfbc      	itt	lt
 800b5cc:	2201      	movlt	r2, #1
 800b5ce:	f8c8 2000 	strlt.w	r2, [r8]
 800b5d2:	ea33 0309 	bics.w	r3, r3, r9
 800b5d6:	d11b      	bne.n	800b610 <_dtoa_r+0xb8>
 800b5d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5da:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5de:	6013      	str	r3, [r2, #0]
 800b5e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5e4:	4333      	orrs	r3, r6
 800b5e6:	f000 857a 	beq.w	800c0de <_dtoa_r+0xb86>
 800b5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5ec:	b963      	cbnz	r3, 800b608 <_dtoa_r+0xb0>
 800b5ee:	4b9b      	ldr	r3, [pc, #620]	; (800b85c <_dtoa_r+0x304>)
 800b5f0:	e024      	b.n	800b63c <_dtoa_r+0xe4>
 800b5f2:	4b9b      	ldr	r3, [pc, #620]	; (800b860 <_dtoa_r+0x308>)
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	9800      	ldr	r0, [sp, #0]
 800b5fe:	b015      	add	sp, #84	; 0x54
 800b600:	ecbd 8b02 	vpop	{d8}
 800b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b608:	4b94      	ldr	r3, [pc, #592]	; (800b85c <_dtoa_r+0x304>)
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	3303      	adds	r3, #3
 800b60e:	e7f3      	b.n	800b5f8 <_dtoa_r+0xa0>
 800b610:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b614:	2200      	movs	r2, #0
 800b616:	ec51 0b17 	vmov	r0, r1, d7
 800b61a:	2300      	movs	r3, #0
 800b61c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b620:	f7f5 fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 800b624:	4680      	mov	r8, r0
 800b626:	b158      	cbz	r0, 800b640 <_dtoa_r+0xe8>
 800b628:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b62a:	2301      	movs	r3, #1
 800b62c:	6013      	str	r3, [r2, #0]
 800b62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 8551 	beq.w	800c0d8 <_dtoa_r+0xb80>
 800b636:	488b      	ldr	r0, [pc, #556]	; (800b864 <_dtoa_r+0x30c>)
 800b638:	6018      	str	r0, [r3, #0]
 800b63a:	1e43      	subs	r3, r0, #1
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	e7dd      	b.n	800b5fc <_dtoa_r+0xa4>
 800b640:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b644:	aa12      	add	r2, sp, #72	; 0x48
 800b646:	a913      	add	r1, sp, #76	; 0x4c
 800b648:	4620      	mov	r0, r4
 800b64a:	f001 f89f 	bl	800c78c <__d2b>
 800b64e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b652:	4683      	mov	fp, r0
 800b654:	2d00      	cmp	r5, #0
 800b656:	d07c      	beq.n	800b752 <_dtoa_r+0x1fa>
 800b658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b65a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b65e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b662:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b666:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b66a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b66e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b672:	4b7d      	ldr	r3, [pc, #500]	; (800b868 <_dtoa_r+0x310>)
 800b674:	2200      	movs	r2, #0
 800b676:	4630      	mov	r0, r6
 800b678:	4639      	mov	r1, r7
 800b67a:	f7f4 fe05 	bl	8000288 <__aeabi_dsub>
 800b67e:	a36e      	add	r3, pc, #440	; (adr r3, 800b838 <_dtoa_r+0x2e0>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	f7f4 ffb8 	bl	80005f8 <__aeabi_dmul>
 800b688:	a36d      	add	r3, pc, #436	; (adr r3, 800b840 <_dtoa_r+0x2e8>)
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	f7f4 fdfd 	bl	800028c <__adddf3>
 800b692:	4606      	mov	r6, r0
 800b694:	4628      	mov	r0, r5
 800b696:	460f      	mov	r7, r1
 800b698:	f7f4 ff44 	bl	8000524 <__aeabi_i2d>
 800b69c:	a36a      	add	r3, pc, #424	; (adr r3, 800b848 <_dtoa_r+0x2f0>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	f7f4 ffa9 	bl	80005f8 <__aeabi_dmul>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	4639      	mov	r1, r7
 800b6ae:	f7f4 fded 	bl	800028c <__adddf3>
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	f7f5 fa4f 	bl	8000b58 <__aeabi_d2iz>
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	4682      	mov	sl, r0
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	f7f5 fa0a 	bl	8000adc <__aeabi_dcmplt>
 800b6c8:	b148      	cbz	r0, 800b6de <_dtoa_r+0x186>
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	f7f4 ff2a 	bl	8000524 <__aeabi_i2d>
 800b6d0:	4632      	mov	r2, r6
 800b6d2:	463b      	mov	r3, r7
 800b6d4:	f7f5 f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6d8:	b908      	cbnz	r0, 800b6de <_dtoa_r+0x186>
 800b6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6de:	f1ba 0f16 	cmp.w	sl, #22
 800b6e2:	d854      	bhi.n	800b78e <_dtoa_r+0x236>
 800b6e4:	4b61      	ldr	r3, [pc, #388]	; (800b86c <_dtoa_r+0x314>)
 800b6e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6f2:	f7f5 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d04b      	beq.n	800b792 <_dtoa_r+0x23a>
 800b6fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6fe:	2300      	movs	r3, #0
 800b700:	930e      	str	r3, [sp, #56]	; 0x38
 800b702:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b704:	1b5d      	subs	r5, r3, r5
 800b706:	1e6b      	subs	r3, r5, #1
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	bf43      	ittte	mi
 800b70c:	2300      	movmi	r3, #0
 800b70e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b712:	9304      	strmi	r3, [sp, #16]
 800b714:	f04f 0800 	movpl.w	r8, #0
 800b718:	f1ba 0f00 	cmp.w	sl, #0
 800b71c:	db3b      	blt.n	800b796 <_dtoa_r+0x23e>
 800b71e:	9b04      	ldr	r3, [sp, #16]
 800b720:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b724:	4453      	add	r3, sl
 800b726:	9304      	str	r3, [sp, #16]
 800b728:	2300      	movs	r3, #0
 800b72a:	9306      	str	r3, [sp, #24]
 800b72c:	9b05      	ldr	r3, [sp, #20]
 800b72e:	2b09      	cmp	r3, #9
 800b730:	d869      	bhi.n	800b806 <_dtoa_r+0x2ae>
 800b732:	2b05      	cmp	r3, #5
 800b734:	bfc4      	itt	gt
 800b736:	3b04      	subgt	r3, #4
 800b738:	9305      	strgt	r3, [sp, #20]
 800b73a:	9b05      	ldr	r3, [sp, #20]
 800b73c:	f1a3 0302 	sub.w	r3, r3, #2
 800b740:	bfcc      	ite	gt
 800b742:	2500      	movgt	r5, #0
 800b744:	2501      	movle	r5, #1
 800b746:	2b03      	cmp	r3, #3
 800b748:	d869      	bhi.n	800b81e <_dtoa_r+0x2c6>
 800b74a:	e8df f003 	tbb	[pc, r3]
 800b74e:	4e2c      	.short	0x4e2c
 800b750:	5a4c      	.short	0x5a4c
 800b752:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b756:	441d      	add	r5, r3
 800b758:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b75c:	2b20      	cmp	r3, #32
 800b75e:	bfc1      	itttt	gt
 800b760:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b764:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b768:	fa09 f303 	lslgt.w	r3, r9, r3
 800b76c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b770:	bfda      	itte	le
 800b772:	f1c3 0320 	rsble	r3, r3, #32
 800b776:	fa06 f003 	lslle.w	r0, r6, r3
 800b77a:	4318      	orrgt	r0, r3
 800b77c:	f7f4 fec2 	bl	8000504 <__aeabi_ui2d>
 800b780:	2301      	movs	r3, #1
 800b782:	4606      	mov	r6, r0
 800b784:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b788:	3d01      	subs	r5, #1
 800b78a:	9310      	str	r3, [sp, #64]	; 0x40
 800b78c:	e771      	b.n	800b672 <_dtoa_r+0x11a>
 800b78e:	2301      	movs	r3, #1
 800b790:	e7b6      	b.n	800b700 <_dtoa_r+0x1a8>
 800b792:	900e      	str	r0, [sp, #56]	; 0x38
 800b794:	e7b5      	b.n	800b702 <_dtoa_r+0x1aa>
 800b796:	f1ca 0300 	rsb	r3, sl, #0
 800b79a:	9306      	str	r3, [sp, #24]
 800b79c:	2300      	movs	r3, #0
 800b79e:	eba8 080a 	sub.w	r8, r8, sl
 800b7a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b7a4:	e7c2      	b.n	800b72c <_dtoa_r+0x1d4>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9308      	str	r3, [sp, #32]
 800b7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dc39      	bgt.n	800b824 <_dtoa_r+0x2cc>
 800b7b0:	f04f 0901 	mov.w	r9, #1
 800b7b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b7b8:	464b      	mov	r3, r9
 800b7ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b7be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	6042      	str	r2, [r0, #4]
 800b7c4:	2204      	movs	r2, #4
 800b7c6:	f102 0614 	add.w	r6, r2, #20
 800b7ca:	429e      	cmp	r6, r3
 800b7cc:	6841      	ldr	r1, [r0, #4]
 800b7ce:	d92f      	bls.n	800b830 <_dtoa_r+0x2d8>
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 fcb9 	bl	800c148 <_Balloc>
 800b7d6:	9000      	str	r0, [sp, #0]
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d14b      	bne.n	800b874 <_dtoa_r+0x31c>
 800b7dc:	4b24      	ldr	r3, [pc, #144]	; (800b870 <_dtoa_r+0x318>)
 800b7de:	4602      	mov	r2, r0
 800b7e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b7e4:	e6d1      	b.n	800b58a <_dtoa_r+0x32>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e7de      	b.n	800b7a8 <_dtoa_r+0x250>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	9308      	str	r3, [sp, #32]
 800b7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f0:	eb0a 0903 	add.w	r9, sl, r3
 800b7f4:	f109 0301 	add.w	r3, r9, #1
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	9301      	str	r3, [sp, #4]
 800b7fc:	bfb8      	it	lt
 800b7fe:	2301      	movlt	r3, #1
 800b800:	e7dd      	b.n	800b7be <_dtoa_r+0x266>
 800b802:	2301      	movs	r3, #1
 800b804:	e7f2      	b.n	800b7ec <_dtoa_r+0x294>
 800b806:	2501      	movs	r5, #1
 800b808:	2300      	movs	r3, #0
 800b80a:	9305      	str	r3, [sp, #20]
 800b80c:	9508      	str	r5, [sp, #32]
 800b80e:	f04f 39ff 	mov.w	r9, #4294967295
 800b812:	2200      	movs	r2, #0
 800b814:	f8cd 9004 	str.w	r9, [sp, #4]
 800b818:	2312      	movs	r3, #18
 800b81a:	9209      	str	r2, [sp, #36]	; 0x24
 800b81c:	e7cf      	b.n	800b7be <_dtoa_r+0x266>
 800b81e:	2301      	movs	r3, #1
 800b820:	9308      	str	r3, [sp, #32]
 800b822:	e7f4      	b.n	800b80e <_dtoa_r+0x2b6>
 800b824:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b828:	f8cd 9004 	str.w	r9, [sp, #4]
 800b82c:	464b      	mov	r3, r9
 800b82e:	e7c6      	b.n	800b7be <_dtoa_r+0x266>
 800b830:	3101      	adds	r1, #1
 800b832:	6041      	str	r1, [r0, #4]
 800b834:	0052      	lsls	r2, r2, #1
 800b836:	e7c6      	b.n	800b7c6 <_dtoa_r+0x26e>
 800b838:	636f4361 	.word	0x636f4361
 800b83c:	3fd287a7 	.word	0x3fd287a7
 800b840:	8b60c8b3 	.word	0x8b60c8b3
 800b844:	3fc68a28 	.word	0x3fc68a28
 800b848:	509f79fb 	.word	0x509f79fb
 800b84c:	3fd34413 	.word	0x3fd34413
 800b850:	0800d9f1 	.word	0x0800d9f1
 800b854:	0800da08 	.word	0x0800da08
 800b858:	7ff00000 	.word	0x7ff00000
 800b85c:	0800d9ed 	.word	0x0800d9ed
 800b860:	0800d9e4 	.word	0x0800d9e4
 800b864:	0800d9c1 	.word	0x0800d9c1
 800b868:	3ff80000 	.word	0x3ff80000
 800b86c:	0800db00 	.word	0x0800db00
 800b870:	0800da67 	.word	0x0800da67
 800b874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b876:	9a00      	ldr	r2, [sp, #0]
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	2b0e      	cmp	r3, #14
 800b87e:	f200 80ad 	bhi.w	800b9dc <_dtoa_r+0x484>
 800b882:	2d00      	cmp	r5, #0
 800b884:	f000 80aa 	beq.w	800b9dc <_dtoa_r+0x484>
 800b888:	f1ba 0f00 	cmp.w	sl, #0
 800b88c:	dd36      	ble.n	800b8fc <_dtoa_r+0x3a4>
 800b88e:	4ac3      	ldr	r2, [pc, #780]	; (800bb9c <_dtoa_r+0x644>)
 800b890:	f00a 030f 	and.w	r3, sl, #15
 800b894:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b898:	ed93 7b00 	vldr	d7, [r3]
 800b89c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b8a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b8a4:	eeb0 8a47 	vmov.f32	s16, s14
 800b8a8:	eef0 8a67 	vmov.f32	s17, s15
 800b8ac:	d016      	beq.n	800b8dc <_dtoa_r+0x384>
 800b8ae:	4bbc      	ldr	r3, [pc, #752]	; (800bba0 <_dtoa_r+0x648>)
 800b8b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8b8:	f7f4 ffc8 	bl	800084c <__aeabi_ddiv>
 800b8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8c0:	f007 070f 	and.w	r7, r7, #15
 800b8c4:	2503      	movs	r5, #3
 800b8c6:	4eb6      	ldr	r6, [pc, #728]	; (800bba0 <_dtoa_r+0x648>)
 800b8c8:	b957      	cbnz	r7, 800b8e0 <_dtoa_r+0x388>
 800b8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ce:	ec53 2b18 	vmov	r2, r3, d8
 800b8d2:	f7f4 ffbb 	bl	800084c <__aeabi_ddiv>
 800b8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8da:	e029      	b.n	800b930 <_dtoa_r+0x3d8>
 800b8dc:	2502      	movs	r5, #2
 800b8de:	e7f2      	b.n	800b8c6 <_dtoa_r+0x36e>
 800b8e0:	07f9      	lsls	r1, r7, #31
 800b8e2:	d508      	bpl.n	800b8f6 <_dtoa_r+0x39e>
 800b8e4:	ec51 0b18 	vmov	r0, r1, d8
 800b8e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8ec:	f7f4 fe84 	bl	80005f8 <__aeabi_dmul>
 800b8f0:	ec41 0b18 	vmov	d8, r0, r1
 800b8f4:	3501      	adds	r5, #1
 800b8f6:	107f      	asrs	r7, r7, #1
 800b8f8:	3608      	adds	r6, #8
 800b8fa:	e7e5      	b.n	800b8c8 <_dtoa_r+0x370>
 800b8fc:	f000 80a6 	beq.w	800ba4c <_dtoa_r+0x4f4>
 800b900:	f1ca 0600 	rsb	r6, sl, #0
 800b904:	4ba5      	ldr	r3, [pc, #660]	; (800bb9c <_dtoa_r+0x644>)
 800b906:	4fa6      	ldr	r7, [pc, #664]	; (800bba0 <_dtoa_r+0x648>)
 800b908:	f006 020f 	and.w	r2, r6, #15
 800b90c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b918:	f7f4 fe6e 	bl	80005f8 <__aeabi_dmul>
 800b91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b920:	1136      	asrs	r6, r6, #4
 800b922:	2300      	movs	r3, #0
 800b924:	2502      	movs	r5, #2
 800b926:	2e00      	cmp	r6, #0
 800b928:	f040 8085 	bne.w	800ba36 <_dtoa_r+0x4de>
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1d2      	bne.n	800b8d6 <_dtoa_r+0x37e>
 800b930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b932:	2b00      	cmp	r3, #0
 800b934:	f000 808c 	beq.w	800ba50 <_dtoa_r+0x4f8>
 800b938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b93c:	4b99      	ldr	r3, [pc, #612]	; (800bba4 <_dtoa_r+0x64c>)
 800b93e:	2200      	movs	r2, #0
 800b940:	4630      	mov	r0, r6
 800b942:	4639      	mov	r1, r7
 800b944:	f7f5 f8ca 	bl	8000adc <__aeabi_dcmplt>
 800b948:	2800      	cmp	r0, #0
 800b94a:	f000 8081 	beq.w	800ba50 <_dtoa_r+0x4f8>
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d07d      	beq.n	800ba50 <_dtoa_r+0x4f8>
 800b954:	f1b9 0f00 	cmp.w	r9, #0
 800b958:	dd3c      	ble.n	800b9d4 <_dtoa_r+0x47c>
 800b95a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b95e:	9307      	str	r3, [sp, #28]
 800b960:	2200      	movs	r2, #0
 800b962:	4b91      	ldr	r3, [pc, #580]	; (800bba8 <_dtoa_r+0x650>)
 800b964:	4630      	mov	r0, r6
 800b966:	4639      	mov	r1, r7
 800b968:	f7f4 fe46 	bl	80005f8 <__aeabi_dmul>
 800b96c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b970:	3501      	adds	r5, #1
 800b972:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b976:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b97a:	4628      	mov	r0, r5
 800b97c:	f7f4 fdd2 	bl	8000524 <__aeabi_i2d>
 800b980:	4632      	mov	r2, r6
 800b982:	463b      	mov	r3, r7
 800b984:	f7f4 fe38 	bl	80005f8 <__aeabi_dmul>
 800b988:	4b88      	ldr	r3, [pc, #544]	; (800bbac <_dtoa_r+0x654>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	f7f4 fc7e 	bl	800028c <__adddf3>
 800b990:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b998:	9303      	str	r3, [sp, #12]
 800b99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d15c      	bne.n	800ba5a <_dtoa_r+0x502>
 800b9a0:	4b83      	ldr	r3, [pc, #524]	; (800bbb0 <_dtoa_r+0x658>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	f7f4 fc6e 	bl	8000288 <__aeabi_dsub>
 800b9ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9b0:	4606      	mov	r6, r0
 800b9b2:	460f      	mov	r7, r1
 800b9b4:	f7f5 f8b0 	bl	8000b18 <__aeabi_dcmpgt>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	f040 8296 	bne.w	800beea <_dtoa_r+0x992>
 800b9be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	f7f5 f887 	bl	8000adc <__aeabi_dcmplt>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	f040 8288 	bne.w	800bee4 <_dtoa_r+0x98c>
 800b9d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f2c0 8158 	blt.w	800bc94 <_dtoa_r+0x73c>
 800b9e4:	f1ba 0f0e 	cmp.w	sl, #14
 800b9e8:	f300 8154 	bgt.w	800bc94 <_dtoa_r+0x73c>
 800b9ec:	4b6b      	ldr	r3, [pc, #428]	; (800bb9c <_dtoa_r+0x644>)
 800b9ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b9f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f280 80e3 	bge.w	800bbc4 <_dtoa_r+0x66c>
 800b9fe:	9b01      	ldr	r3, [sp, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f300 80df 	bgt.w	800bbc4 <_dtoa_r+0x66c>
 800ba06:	f040 826d 	bne.w	800bee4 <_dtoa_r+0x98c>
 800ba0a:	4b69      	ldr	r3, [pc, #420]	; (800bbb0 <_dtoa_r+0x658>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4640      	mov	r0, r8
 800ba10:	4649      	mov	r1, r9
 800ba12:	f7f4 fdf1 	bl	80005f8 <__aeabi_dmul>
 800ba16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba1a:	f7f5 f873 	bl	8000b04 <__aeabi_dcmpge>
 800ba1e:	9e01      	ldr	r6, [sp, #4]
 800ba20:	4637      	mov	r7, r6
 800ba22:	2800      	cmp	r0, #0
 800ba24:	f040 8243 	bne.w	800beae <_dtoa_r+0x956>
 800ba28:	9d00      	ldr	r5, [sp, #0]
 800ba2a:	2331      	movs	r3, #49	; 0x31
 800ba2c:	f805 3b01 	strb.w	r3, [r5], #1
 800ba30:	f10a 0a01 	add.w	sl, sl, #1
 800ba34:	e23f      	b.n	800beb6 <_dtoa_r+0x95e>
 800ba36:	07f2      	lsls	r2, r6, #31
 800ba38:	d505      	bpl.n	800ba46 <_dtoa_r+0x4ee>
 800ba3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba3e:	f7f4 fddb 	bl	80005f8 <__aeabi_dmul>
 800ba42:	3501      	adds	r5, #1
 800ba44:	2301      	movs	r3, #1
 800ba46:	1076      	asrs	r6, r6, #1
 800ba48:	3708      	adds	r7, #8
 800ba4a:	e76c      	b.n	800b926 <_dtoa_r+0x3ce>
 800ba4c:	2502      	movs	r5, #2
 800ba4e:	e76f      	b.n	800b930 <_dtoa_r+0x3d8>
 800ba50:	9b01      	ldr	r3, [sp, #4]
 800ba52:	f8cd a01c 	str.w	sl, [sp, #28]
 800ba56:	930c      	str	r3, [sp, #48]	; 0x30
 800ba58:	e78d      	b.n	800b976 <_dtoa_r+0x41e>
 800ba5a:	9900      	ldr	r1, [sp, #0]
 800ba5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba60:	4b4e      	ldr	r3, [pc, #312]	; (800bb9c <_dtoa_r+0x644>)
 800ba62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba66:	4401      	add	r1, r0
 800ba68:	9102      	str	r1, [sp, #8]
 800ba6a:	9908      	ldr	r1, [sp, #32]
 800ba6c:	eeb0 8a47 	vmov.f32	s16, s14
 800ba70:	eef0 8a67 	vmov.f32	s17, s15
 800ba74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba7c:	2900      	cmp	r1, #0
 800ba7e:	d045      	beq.n	800bb0c <_dtoa_r+0x5b4>
 800ba80:	494c      	ldr	r1, [pc, #304]	; (800bbb4 <_dtoa_r+0x65c>)
 800ba82:	2000      	movs	r0, #0
 800ba84:	f7f4 fee2 	bl	800084c <__aeabi_ddiv>
 800ba88:	ec53 2b18 	vmov	r2, r3, d8
 800ba8c:	f7f4 fbfc 	bl	8000288 <__aeabi_dsub>
 800ba90:	9d00      	ldr	r5, [sp, #0]
 800ba92:	ec41 0b18 	vmov	d8, r0, r1
 800ba96:	4639      	mov	r1, r7
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f7f5 f85d 	bl	8000b58 <__aeabi_d2iz>
 800ba9e:	900c      	str	r0, [sp, #48]	; 0x30
 800baa0:	f7f4 fd40 	bl	8000524 <__aeabi_i2d>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f4 fbec 	bl	8000288 <__aeabi_dsub>
 800bab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bab2:	3330      	adds	r3, #48	; 0x30
 800bab4:	f805 3b01 	strb.w	r3, [r5], #1
 800bab8:	ec53 2b18 	vmov	r2, r3, d8
 800babc:	4606      	mov	r6, r0
 800babe:	460f      	mov	r7, r1
 800bac0:	f7f5 f80c 	bl	8000adc <__aeabi_dcmplt>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d165      	bne.n	800bb94 <_dtoa_r+0x63c>
 800bac8:	4632      	mov	r2, r6
 800baca:	463b      	mov	r3, r7
 800bacc:	4935      	ldr	r1, [pc, #212]	; (800bba4 <_dtoa_r+0x64c>)
 800bace:	2000      	movs	r0, #0
 800bad0:	f7f4 fbda 	bl	8000288 <__aeabi_dsub>
 800bad4:	ec53 2b18 	vmov	r2, r3, d8
 800bad8:	f7f5 f800 	bl	8000adc <__aeabi_dcmplt>
 800badc:	2800      	cmp	r0, #0
 800bade:	f040 80b9 	bne.w	800bc54 <_dtoa_r+0x6fc>
 800bae2:	9b02      	ldr	r3, [sp, #8]
 800bae4:	429d      	cmp	r5, r3
 800bae6:	f43f af75 	beq.w	800b9d4 <_dtoa_r+0x47c>
 800baea:	4b2f      	ldr	r3, [pc, #188]	; (800bba8 <_dtoa_r+0x650>)
 800baec:	ec51 0b18 	vmov	r0, r1, d8
 800baf0:	2200      	movs	r2, #0
 800baf2:	f7f4 fd81 	bl	80005f8 <__aeabi_dmul>
 800baf6:	4b2c      	ldr	r3, [pc, #176]	; (800bba8 <_dtoa_r+0x650>)
 800baf8:	ec41 0b18 	vmov	d8, r0, r1
 800bafc:	2200      	movs	r2, #0
 800bafe:	4630      	mov	r0, r6
 800bb00:	4639      	mov	r1, r7
 800bb02:	f7f4 fd79 	bl	80005f8 <__aeabi_dmul>
 800bb06:	4606      	mov	r6, r0
 800bb08:	460f      	mov	r7, r1
 800bb0a:	e7c4      	b.n	800ba96 <_dtoa_r+0x53e>
 800bb0c:	ec51 0b17 	vmov	r0, r1, d7
 800bb10:	f7f4 fd72 	bl	80005f8 <__aeabi_dmul>
 800bb14:	9b02      	ldr	r3, [sp, #8]
 800bb16:	9d00      	ldr	r5, [sp, #0]
 800bb18:	930c      	str	r3, [sp, #48]	; 0x30
 800bb1a:	ec41 0b18 	vmov	d8, r0, r1
 800bb1e:	4639      	mov	r1, r7
 800bb20:	4630      	mov	r0, r6
 800bb22:	f7f5 f819 	bl	8000b58 <__aeabi_d2iz>
 800bb26:	9011      	str	r0, [sp, #68]	; 0x44
 800bb28:	f7f4 fcfc 	bl	8000524 <__aeabi_i2d>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4630      	mov	r0, r6
 800bb32:	4639      	mov	r1, r7
 800bb34:	f7f4 fba8 	bl	8000288 <__aeabi_dsub>
 800bb38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb3a:	3330      	adds	r3, #48	; 0x30
 800bb3c:	f805 3b01 	strb.w	r3, [r5], #1
 800bb40:	9b02      	ldr	r3, [sp, #8]
 800bb42:	429d      	cmp	r5, r3
 800bb44:	4606      	mov	r6, r0
 800bb46:	460f      	mov	r7, r1
 800bb48:	f04f 0200 	mov.w	r2, #0
 800bb4c:	d134      	bne.n	800bbb8 <_dtoa_r+0x660>
 800bb4e:	4b19      	ldr	r3, [pc, #100]	; (800bbb4 <_dtoa_r+0x65c>)
 800bb50:	ec51 0b18 	vmov	r0, r1, d8
 800bb54:	f7f4 fb9a 	bl	800028c <__adddf3>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	4639      	mov	r1, r7
 800bb60:	f7f4 ffda 	bl	8000b18 <__aeabi_dcmpgt>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d175      	bne.n	800bc54 <_dtoa_r+0x6fc>
 800bb68:	ec53 2b18 	vmov	r2, r3, d8
 800bb6c:	4911      	ldr	r1, [pc, #68]	; (800bbb4 <_dtoa_r+0x65c>)
 800bb6e:	2000      	movs	r0, #0
 800bb70:	f7f4 fb8a 	bl	8000288 <__aeabi_dsub>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	4630      	mov	r0, r6
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	f7f4 ffae 	bl	8000adc <__aeabi_dcmplt>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	f43f af27 	beq.w	800b9d4 <_dtoa_r+0x47c>
 800bb86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb88:	1e6b      	subs	r3, r5, #1
 800bb8a:	930c      	str	r3, [sp, #48]	; 0x30
 800bb8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb90:	2b30      	cmp	r3, #48	; 0x30
 800bb92:	d0f8      	beq.n	800bb86 <_dtoa_r+0x62e>
 800bb94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bb98:	e04a      	b.n	800bc30 <_dtoa_r+0x6d8>
 800bb9a:	bf00      	nop
 800bb9c:	0800db00 	.word	0x0800db00
 800bba0:	0800dad8 	.word	0x0800dad8
 800bba4:	3ff00000 	.word	0x3ff00000
 800bba8:	40240000 	.word	0x40240000
 800bbac:	401c0000 	.word	0x401c0000
 800bbb0:	40140000 	.word	0x40140000
 800bbb4:	3fe00000 	.word	0x3fe00000
 800bbb8:	4baf      	ldr	r3, [pc, #700]	; (800be78 <_dtoa_r+0x920>)
 800bbba:	f7f4 fd1d 	bl	80005f8 <__aeabi_dmul>
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	e7ac      	b.n	800bb1e <_dtoa_r+0x5c6>
 800bbc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbc8:	9d00      	ldr	r5, [sp, #0]
 800bbca:	4642      	mov	r2, r8
 800bbcc:	464b      	mov	r3, r9
 800bbce:	4630      	mov	r0, r6
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	f7f4 fe3b 	bl	800084c <__aeabi_ddiv>
 800bbd6:	f7f4 ffbf 	bl	8000b58 <__aeabi_d2iz>
 800bbda:	9002      	str	r0, [sp, #8]
 800bbdc:	f7f4 fca2 	bl	8000524 <__aeabi_i2d>
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	464b      	mov	r3, r9
 800bbe4:	f7f4 fd08 	bl	80005f8 <__aeabi_dmul>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	4630      	mov	r0, r6
 800bbee:	4639      	mov	r1, r7
 800bbf0:	f7f4 fb4a 	bl	8000288 <__aeabi_dsub>
 800bbf4:	9e02      	ldr	r6, [sp, #8]
 800bbf6:	9f01      	ldr	r7, [sp, #4]
 800bbf8:	3630      	adds	r6, #48	; 0x30
 800bbfa:	f805 6b01 	strb.w	r6, [r5], #1
 800bbfe:	9e00      	ldr	r6, [sp, #0]
 800bc00:	1bae      	subs	r6, r5, r6
 800bc02:	42b7      	cmp	r7, r6
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	d137      	bne.n	800bc7a <_dtoa_r+0x722>
 800bc0a:	f7f4 fb3f 	bl	800028c <__adddf3>
 800bc0e:	4642      	mov	r2, r8
 800bc10:	464b      	mov	r3, r9
 800bc12:	4606      	mov	r6, r0
 800bc14:	460f      	mov	r7, r1
 800bc16:	f7f4 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 800bc1a:	b9c8      	cbnz	r0, 800bc50 <_dtoa_r+0x6f8>
 800bc1c:	4642      	mov	r2, r8
 800bc1e:	464b      	mov	r3, r9
 800bc20:	4630      	mov	r0, r6
 800bc22:	4639      	mov	r1, r7
 800bc24:	f7f4 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc28:	b110      	cbz	r0, 800bc30 <_dtoa_r+0x6d8>
 800bc2a:	9b02      	ldr	r3, [sp, #8]
 800bc2c:	07d9      	lsls	r1, r3, #31
 800bc2e:	d40f      	bmi.n	800bc50 <_dtoa_r+0x6f8>
 800bc30:	4620      	mov	r0, r4
 800bc32:	4659      	mov	r1, fp
 800bc34:	f000 fac8 	bl	800c1c8 <_Bfree>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	702b      	strb	r3, [r5, #0]
 800bc3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc3e:	f10a 0001 	add.w	r0, sl, #1
 800bc42:	6018      	str	r0, [r3, #0]
 800bc44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f43f acd8 	beq.w	800b5fc <_dtoa_r+0xa4>
 800bc4c:	601d      	str	r5, [r3, #0]
 800bc4e:	e4d5      	b.n	800b5fc <_dtoa_r+0xa4>
 800bc50:	f8cd a01c 	str.w	sl, [sp, #28]
 800bc54:	462b      	mov	r3, r5
 800bc56:	461d      	mov	r5, r3
 800bc58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc5c:	2a39      	cmp	r2, #57	; 0x39
 800bc5e:	d108      	bne.n	800bc72 <_dtoa_r+0x71a>
 800bc60:	9a00      	ldr	r2, [sp, #0]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d1f7      	bne.n	800bc56 <_dtoa_r+0x6fe>
 800bc66:	9a07      	ldr	r2, [sp, #28]
 800bc68:	9900      	ldr	r1, [sp, #0]
 800bc6a:	3201      	adds	r2, #1
 800bc6c:	9207      	str	r2, [sp, #28]
 800bc6e:	2230      	movs	r2, #48	; 0x30
 800bc70:	700a      	strb	r2, [r1, #0]
 800bc72:	781a      	ldrb	r2, [r3, #0]
 800bc74:	3201      	adds	r2, #1
 800bc76:	701a      	strb	r2, [r3, #0]
 800bc78:	e78c      	b.n	800bb94 <_dtoa_r+0x63c>
 800bc7a:	4b7f      	ldr	r3, [pc, #508]	; (800be78 <_dtoa_r+0x920>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f7f4 fcbb 	bl	80005f8 <__aeabi_dmul>
 800bc82:	2200      	movs	r2, #0
 800bc84:	2300      	movs	r3, #0
 800bc86:	4606      	mov	r6, r0
 800bc88:	460f      	mov	r7, r1
 800bc8a:	f7f4 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d09b      	beq.n	800bbca <_dtoa_r+0x672>
 800bc92:	e7cd      	b.n	800bc30 <_dtoa_r+0x6d8>
 800bc94:	9a08      	ldr	r2, [sp, #32]
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	f000 80c4 	beq.w	800be24 <_dtoa_r+0x8cc>
 800bc9c:	9a05      	ldr	r2, [sp, #20]
 800bc9e:	2a01      	cmp	r2, #1
 800bca0:	f300 80a8 	bgt.w	800bdf4 <_dtoa_r+0x89c>
 800bca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bca6:	2a00      	cmp	r2, #0
 800bca8:	f000 80a0 	beq.w	800bdec <_dtoa_r+0x894>
 800bcac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bcb0:	9e06      	ldr	r6, [sp, #24]
 800bcb2:	4645      	mov	r5, r8
 800bcb4:	9a04      	ldr	r2, [sp, #16]
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	441a      	add	r2, r3
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4498      	add	r8, r3
 800bcbe:	9204      	str	r2, [sp, #16]
 800bcc0:	f000 fb3e 	bl	800c340 <__i2b>
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	2d00      	cmp	r5, #0
 800bcc8:	dd0b      	ble.n	800bce2 <_dtoa_r+0x78a>
 800bcca:	9b04      	ldr	r3, [sp, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	dd08      	ble.n	800bce2 <_dtoa_r+0x78a>
 800bcd0:	42ab      	cmp	r3, r5
 800bcd2:	9a04      	ldr	r2, [sp, #16]
 800bcd4:	bfa8      	it	ge
 800bcd6:	462b      	movge	r3, r5
 800bcd8:	eba8 0803 	sub.w	r8, r8, r3
 800bcdc:	1aed      	subs	r5, r5, r3
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	9304      	str	r3, [sp, #16]
 800bce2:	9b06      	ldr	r3, [sp, #24]
 800bce4:	b1fb      	cbz	r3, 800bd26 <_dtoa_r+0x7ce>
 800bce6:	9b08      	ldr	r3, [sp, #32]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 809f 	beq.w	800be2c <_dtoa_r+0x8d4>
 800bcee:	2e00      	cmp	r6, #0
 800bcf0:	dd11      	ble.n	800bd16 <_dtoa_r+0x7be>
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	4632      	mov	r2, r6
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f000 fbde 	bl	800c4b8 <__pow5mult>
 800bcfc:	465a      	mov	r2, fp
 800bcfe:	4601      	mov	r1, r0
 800bd00:	4607      	mov	r7, r0
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 fb32 	bl	800c36c <__multiply>
 800bd08:	4659      	mov	r1, fp
 800bd0a:	9007      	str	r0, [sp, #28]
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 fa5b 	bl	800c1c8 <_Bfree>
 800bd12:	9b07      	ldr	r3, [sp, #28]
 800bd14:	469b      	mov	fp, r3
 800bd16:	9b06      	ldr	r3, [sp, #24]
 800bd18:	1b9a      	subs	r2, r3, r6
 800bd1a:	d004      	beq.n	800bd26 <_dtoa_r+0x7ce>
 800bd1c:	4659      	mov	r1, fp
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 fbca 	bl	800c4b8 <__pow5mult>
 800bd24:	4683      	mov	fp, r0
 800bd26:	2101      	movs	r1, #1
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f000 fb09 	bl	800c340 <__i2b>
 800bd2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	4606      	mov	r6, r0
 800bd34:	dd7c      	ble.n	800be30 <_dtoa_r+0x8d8>
 800bd36:	461a      	mov	r2, r3
 800bd38:	4601      	mov	r1, r0
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 fbbc 	bl	800c4b8 <__pow5mult>
 800bd40:	9b05      	ldr	r3, [sp, #20]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	4606      	mov	r6, r0
 800bd46:	dd76      	ble.n	800be36 <_dtoa_r+0x8de>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9306      	str	r3, [sp, #24]
 800bd4c:	6933      	ldr	r3, [r6, #16]
 800bd4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd52:	6918      	ldr	r0, [r3, #16]
 800bd54:	f000 faa4 	bl	800c2a0 <__hi0bits>
 800bd58:	f1c0 0020 	rsb	r0, r0, #32
 800bd5c:	9b04      	ldr	r3, [sp, #16]
 800bd5e:	4418      	add	r0, r3
 800bd60:	f010 001f 	ands.w	r0, r0, #31
 800bd64:	f000 8086 	beq.w	800be74 <_dtoa_r+0x91c>
 800bd68:	f1c0 0320 	rsb	r3, r0, #32
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	dd7f      	ble.n	800be70 <_dtoa_r+0x918>
 800bd70:	f1c0 001c 	rsb	r0, r0, #28
 800bd74:	9b04      	ldr	r3, [sp, #16]
 800bd76:	4403      	add	r3, r0
 800bd78:	4480      	add	r8, r0
 800bd7a:	4405      	add	r5, r0
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	f1b8 0f00 	cmp.w	r8, #0
 800bd82:	dd05      	ble.n	800bd90 <_dtoa_r+0x838>
 800bd84:	4659      	mov	r1, fp
 800bd86:	4642      	mov	r2, r8
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fbef 	bl	800c56c <__lshift>
 800bd8e:	4683      	mov	fp, r0
 800bd90:	9b04      	ldr	r3, [sp, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	dd05      	ble.n	800bda2 <_dtoa_r+0x84a>
 800bd96:	4631      	mov	r1, r6
 800bd98:	461a      	mov	r2, r3
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 fbe6 	bl	800c56c <__lshift>
 800bda0:	4606      	mov	r6, r0
 800bda2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d069      	beq.n	800be7c <_dtoa_r+0x924>
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4658      	mov	r0, fp
 800bdac:	f000 fc4a 	bl	800c644 <__mcmp>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	da63      	bge.n	800be7c <_dtoa_r+0x924>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4659      	mov	r1, fp
 800bdb8:	220a      	movs	r2, #10
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 fa26 	bl	800c20c <__multadd>
 800bdc0:	9b08      	ldr	r3, [sp, #32]
 800bdc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdc6:	4683      	mov	fp, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 818f 	beq.w	800c0ec <_dtoa_r+0xb94>
 800bdce:	4639      	mov	r1, r7
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	220a      	movs	r2, #10
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f000 fa19 	bl	800c20c <__multadd>
 800bdda:	f1b9 0f00 	cmp.w	r9, #0
 800bdde:	4607      	mov	r7, r0
 800bde0:	f300 808e 	bgt.w	800bf00 <_dtoa_r+0x9a8>
 800bde4:	9b05      	ldr	r3, [sp, #20]
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	dc50      	bgt.n	800be8c <_dtoa_r+0x934>
 800bdea:	e089      	b.n	800bf00 <_dtoa_r+0x9a8>
 800bdec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bdf2:	e75d      	b.n	800bcb0 <_dtoa_r+0x758>
 800bdf4:	9b01      	ldr	r3, [sp, #4]
 800bdf6:	1e5e      	subs	r6, r3, #1
 800bdf8:	9b06      	ldr	r3, [sp, #24]
 800bdfa:	42b3      	cmp	r3, r6
 800bdfc:	bfbf      	itttt	lt
 800bdfe:	9b06      	ldrlt	r3, [sp, #24]
 800be00:	9606      	strlt	r6, [sp, #24]
 800be02:	1af2      	sublt	r2, r6, r3
 800be04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800be06:	bfb6      	itet	lt
 800be08:	189b      	addlt	r3, r3, r2
 800be0a:	1b9e      	subge	r6, r3, r6
 800be0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800be0e:	9b01      	ldr	r3, [sp, #4]
 800be10:	bfb8      	it	lt
 800be12:	2600      	movlt	r6, #0
 800be14:	2b00      	cmp	r3, #0
 800be16:	bfb5      	itete	lt
 800be18:	eba8 0503 	sublt.w	r5, r8, r3
 800be1c:	9b01      	ldrge	r3, [sp, #4]
 800be1e:	2300      	movlt	r3, #0
 800be20:	4645      	movge	r5, r8
 800be22:	e747      	b.n	800bcb4 <_dtoa_r+0x75c>
 800be24:	9e06      	ldr	r6, [sp, #24]
 800be26:	9f08      	ldr	r7, [sp, #32]
 800be28:	4645      	mov	r5, r8
 800be2a:	e74c      	b.n	800bcc6 <_dtoa_r+0x76e>
 800be2c:	9a06      	ldr	r2, [sp, #24]
 800be2e:	e775      	b.n	800bd1c <_dtoa_r+0x7c4>
 800be30:	9b05      	ldr	r3, [sp, #20]
 800be32:	2b01      	cmp	r3, #1
 800be34:	dc18      	bgt.n	800be68 <_dtoa_r+0x910>
 800be36:	9b02      	ldr	r3, [sp, #8]
 800be38:	b9b3      	cbnz	r3, 800be68 <_dtoa_r+0x910>
 800be3a:	9b03      	ldr	r3, [sp, #12]
 800be3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be40:	b9a3      	cbnz	r3, 800be6c <_dtoa_r+0x914>
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be48:	0d1b      	lsrs	r3, r3, #20
 800be4a:	051b      	lsls	r3, r3, #20
 800be4c:	b12b      	cbz	r3, 800be5a <_dtoa_r+0x902>
 800be4e:	9b04      	ldr	r3, [sp, #16]
 800be50:	3301      	adds	r3, #1
 800be52:	9304      	str	r3, [sp, #16]
 800be54:	f108 0801 	add.w	r8, r8, #1
 800be58:	2301      	movs	r3, #1
 800be5a:	9306      	str	r3, [sp, #24]
 800be5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f47f af74 	bne.w	800bd4c <_dtoa_r+0x7f4>
 800be64:	2001      	movs	r0, #1
 800be66:	e779      	b.n	800bd5c <_dtoa_r+0x804>
 800be68:	2300      	movs	r3, #0
 800be6a:	e7f6      	b.n	800be5a <_dtoa_r+0x902>
 800be6c:	9b02      	ldr	r3, [sp, #8]
 800be6e:	e7f4      	b.n	800be5a <_dtoa_r+0x902>
 800be70:	d085      	beq.n	800bd7e <_dtoa_r+0x826>
 800be72:	4618      	mov	r0, r3
 800be74:	301c      	adds	r0, #28
 800be76:	e77d      	b.n	800bd74 <_dtoa_r+0x81c>
 800be78:	40240000 	.word	0x40240000
 800be7c:	9b01      	ldr	r3, [sp, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	dc38      	bgt.n	800bef4 <_dtoa_r+0x99c>
 800be82:	9b05      	ldr	r3, [sp, #20]
 800be84:	2b02      	cmp	r3, #2
 800be86:	dd35      	ble.n	800bef4 <_dtoa_r+0x99c>
 800be88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800be8c:	f1b9 0f00 	cmp.w	r9, #0
 800be90:	d10d      	bne.n	800beae <_dtoa_r+0x956>
 800be92:	4631      	mov	r1, r6
 800be94:	464b      	mov	r3, r9
 800be96:	2205      	movs	r2, #5
 800be98:	4620      	mov	r0, r4
 800be9a:	f000 f9b7 	bl	800c20c <__multadd>
 800be9e:	4601      	mov	r1, r0
 800bea0:	4606      	mov	r6, r0
 800bea2:	4658      	mov	r0, fp
 800bea4:	f000 fbce 	bl	800c644 <__mcmp>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	f73f adbd 	bgt.w	800ba28 <_dtoa_r+0x4d0>
 800beae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb0:	9d00      	ldr	r5, [sp, #0]
 800beb2:	ea6f 0a03 	mvn.w	sl, r3
 800beb6:	f04f 0800 	mov.w	r8, #0
 800beba:	4631      	mov	r1, r6
 800bebc:	4620      	mov	r0, r4
 800bebe:	f000 f983 	bl	800c1c8 <_Bfree>
 800bec2:	2f00      	cmp	r7, #0
 800bec4:	f43f aeb4 	beq.w	800bc30 <_dtoa_r+0x6d8>
 800bec8:	f1b8 0f00 	cmp.w	r8, #0
 800becc:	d005      	beq.n	800beda <_dtoa_r+0x982>
 800bece:	45b8      	cmp	r8, r7
 800bed0:	d003      	beq.n	800beda <_dtoa_r+0x982>
 800bed2:	4641      	mov	r1, r8
 800bed4:	4620      	mov	r0, r4
 800bed6:	f000 f977 	bl	800c1c8 <_Bfree>
 800beda:	4639      	mov	r1, r7
 800bedc:	4620      	mov	r0, r4
 800bede:	f000 f973 	bl	800c1c8 <_Bfree>
 800bee2:	e6a5      	b.n	800bc30 <_dtoa_r+0x6d8>
 800bee4:	2600      	movs	r6, #0
 800bee6:	4637      	mov	r7, r6
 800bee8:	e7e1      	b.n	800beae <_dtoa_r+0x956>
 800beea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800beec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bef0:	4637      	mov	r7, r6
 800bef2:	e599      	b.n	800ba28 <_dtoa_r+0x4d0>
 800bef4:	9b08      	ldr	r3, [sp, #32]
 800bef6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 80fd 	beq.w	800c0fa <_dtoa_r+0xba2>
 800bf00:	2d00      	cmp	r5, #0
 800bf02:	dd05      	ble.n	800bf10 <_dtoa_r+0x9b8>
 800bf04:	4639      	mov	r1, r7
 800bf06:	462a      	mov	r2, r5
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 fb2f 	bl	800c56c <__lshift>
 800bf0e:	4607      	mov	r7, r0
 800bf10:	9b06      	ldr	r3, [sp, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d05c      	beq.n	800bfd0 <_dtoa_r+0xa78>
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f000 f915 	bl	800c148 <_Balloc>
 800bf1e:	4605      	mov	r5, r0
 800bf20:	b928      	cbnz	r0, 800bf2e <_dtoa_r+0x9d6>
 800bf22:	4b80      	ldr	r3, [pc, #512]	; (800c124 <_dtoa_r+0xbcc>)
 800bf24:	4602      	mov	r2, r0
 800bf26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf2a:	f7ff bb2e 	b.w	800b58a <_dtoa_r+0x32>
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	3202      	adds	r2, #2
 800bf32:	0092      	lsls	r2, r2, #2
 800bf34:	f107 010c 	add.w	r1, r7, #12
 800bf38:	300c      	adds	r0, #12
 800bf3a:	f7fe fde1 	bl	800ab00 <memcpy>
 800bf3e:	2201      	movs	r2, #1
 800bf40:	4629      	mov	r1, r5
 800bf42:	4620      	mov	r0, r4
 800bf44:	f000 fb12 	bl	800c56c <__lshift>
 800bf48:	9b00      	ldr	r3, [sp, #0]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	9301      	str	r3, [sp, #4]
 800bf4e:	9b00      	ldr	r3, [sp, #0]
 800bf50:	444b      	add	r3, r9
 800bf52:	9307      	str	r3, [sp, #28]
 800bf54:	9b02      	ldr	r3, [sp, #8]
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	46b8      	mov	r8, r7
 800bf5c:	9306      	str	r3, [sp, #24]
 800bf5e:	4607      	mov	r7, r0
 800bf60:	9b01      	ldr	r3, [sp, #4]
 800bf62:	4631      	mov	r1, r6
 800bf64:	3b01      	subs	r3, #1
 800bf66:	4658      	mov	r0, fp
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	f7ff fa69 	bl	800b440 <quorem>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	3330      	adds	r3, #48	; 0x30
 800bf72:	9004      	str	r0, [sp, #16]
 800bf74:	4641      	mov	r1, r8
 800bf76:	4658      	mov	r0, fp
 800bf78:	9308      	str	r3, [sp, #32]
 800bf7a:	f000 fb63 	bl	800c644 <__mcmp>
 800bf7e:	463a      	mov	r2, r7
 800bf80:	4681      	mov	r9, r0
 800bf82:	4631      	mov	r1, r6
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 fb79 	bl	800c67c <__mdiff>
 800bf8a:	68c2      	ldr	r2, [r0, #12]
 800bf8c:	9b08      	ldr	r3, [sp, #32]
 800bf8e:	4605      	mov	r5, r0
 800bf90:	bb02      	cbnz	r2, 800bfd4 <_dtoa_r+0xa7c>
 800bf92:	4601      	mov	r1, r0
 800bf94:	4658      	mov	r0, fp
 800bf96:	f000 fb55 	bl	800c644 <__mcmp>
 800bf9a:	9b08      	ldr	r3, [sp, #32]
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bfa6:	f000 f90f 	bl	800c1c8 <_Bfree>
 800bfaa:	9b05      	ldr	r3, [sp, #20]
 800bfac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfae:	9d01      	ldr	r5, [sp, #4]
 800bfb0:	ea43 0102 	orr.w	r1, r3, r2
 800bfb4:	9b06      	ldr	r3, [sp, #24]
 800bfb6:	430b      	orrs	r3, r1
 800bfb8:	9b08      	ldr	r3, [sp, #32]
 800bfba:	d10d      	bne.n	800bfd8 <_dtoa_r+0xa80>
 800bfbc:	2b39      	cmp	r3, #57	; 0x39
 800bfbe:	d029      	beq.n	800c014 <_dtoa_r+0xabc>
 800bfc0:	f1b9 0f00 	cmp.w	r9, #0
 800bfc4:	dd01      	ble.n	800bfca <_dtoa_r+0xa72>
 800bfc6:	9b04      	ldr	r3, [sp, #16]
 800bfc8:	3331      	adds	r3, #49	; 0x31
 800bfca:	9a02      	ldr	r2, [sp, #8]
 800bfcc:	7013      	strb	r3, [r2, #0]
 800bfce:	e774      	b.n	800beba <_dtoa_r+0x962>
 800bfd0:	4638      	mov	r0, r7
 800bfd2:	e7b9      	b.n	800bf48 <_dtoa_r+0x9f0>
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	e7e2      	b.n	800bf9e <_dtoa_r+0xa46>
 800bfd8:	f1b9 0f00 	cmp.w	r9, #0
 800bfdc:	db06      	blt.n	800bfec <_dtoa_r+0xa94>
 800bfde:	9905      	ldr	r1, [sp, #20]
 800bfe0:	ea41 0909 	orr.w	r9, r1, r9
 800bfe4:	9906      	ldr	r1, [sp, #24]
 800bfe6:	ea59 0101 	orrs.w	r1, r9, r1
 800bfea:	d120      	bne.n	800c02e <_dtoa_r+0xad6>
 800bfec:	2a00      	cmp	r2, #0
 800bfee:	ddec      	ble.n	800bfca <_dtoa_r+0xa72>
 800bff0:	4659      	mov	r1, fp
 800bff2:	2201      	movs	r2, #1
 800bff4:	4620      	mov	r0, r4
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	f000 fab8 	bl	800c56c <__lshift>
 800bffc:	4631      	mov	r1, r6
 800bffe:	4683      	mov	fp, r0
 800c000:	f000 fb20 	bl	800c644 <__mcmp>
 800c004:	2800      	cmp	r0, #0
 800c006:	9b01      	ldr	r3, [sp, #4]
 800c008:	dc02      	bgt.n	800c010 <_dtoa_r+0xab8>
 800c00a:	d1de      	bne.n	800bfca <_dtoa_r+0xa72>
 800c00c:	07da      	lsls	r2, r3, #31
 800c00e:	d5dc      	bpl.n	800bfca <_dtoa_r+0xa72>
 800c010:	2b39      	cmp	r3, #57	; 0x39
 800c012:	d1d8      	bne.n	800bfc6 <_dtoa_r+0xa6e>
 800c014:	9a02      	ldr	r2, [sp, #8]
 800c016:	2339      	movs	r3, #57	; 0x39
 800c018:	7013      	strb	r3, [r2, #0]
 800c01a:	462b      	mov	r3, r5
 800c01c:	461d      	mov	r5, r3
 800c01e:	3b01      	subs	r3, #1
 800c020:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c024:	2a39      	cmp	r2, #57	; 0x39
 800c026:	d050      	beq.n	800c0ca <_dtoa_r+0xb72>
 800c028:	3201      	adds	r2, #1
 800c02a:	701a      	strb	r2, [r3, #0]
 800c02c:	e745      	b.n	800beba <_dtoa_r+0x962>
 800c02e:	2a00      	cmp	r2, #0
 800c030:	dd03      	ble.n	800c03a <_dtoa_r+0xae2>
 800c032:	2b39      	cmp	r3, #57	; 0x39
 800c034:	d0ee      	beq.n	800c014 <_dtoa_r+0xabc>
 800c036:	3301      	adds	r3, #1
 800c038:	e7c7      	b.n	800bfca <_dtoa_r+0xa72>
 800c03a:	9a01      	ldr	r2, [sp, #4]
 800c03c:	9907      	ldr	r1, [sp, #28]
 800c03e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c042:	428a      	cmp	r2, r1
 800c044:	d02a      	beq.n	800c09c <_dtoa_r+0xb44>
 800c046:	4659      	mov	r1, fp
 800c048:	2300      	movs	r3, #0
 800c04a:	220a      	movs	r2, #10
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 f8dd 	bl	800c20c <__multadd>
 800c052:	45b8      	cmp	r8, r7
 800c054:	4683      	mov	fp, r0
 800c056:	f04f 0300 	mov.w	r3, #0
 800c05a:	f04f 020a 	mov.w	r2, #10
 800c05e:	4641      	mov	r1, r8
 800c060:	4620      	mov	r0, r4
 800c062:	d107      	bne.n	800c074 <_dtoa_r+0xb1c>
 800c064:	f000 f8d2 	bl	800c20c <__multadd>
 800c068:	4680      	mov	r8, r0
 800c06a:	4607      	mov	r7, r0
 800c06c:	9b01      	ldr	r3, [sp, #4]
 800c06e:	3301      	adds	r3, #1
 800c070:	9301      	str	r3, [sp, #4]
 800c072:	e775      	b.n	800bf60 <_dtoa_r+0xa08>
 800c074:	f000 f8ca 	bl	800c20c <__multadd>
 800c078:	4639      	mov	r1, r7
 800c07a:	4680      	mov	r8, r0
 800c07c:	2300      	movs	r3, #0
 800c07e:	220a      	movs	r2, #10
 800c080:	4620      	mov	r0, r4
 800c082:	f000 f8c3 	bl	800c20c <__multadd>
 800c086:	4607      	mov	r7, r0
 800c088:	e7f0      	b.n	800c06c <_dtoa_r+0xb14>
 800c08a:	f1b9 0f00 	cmp.w	r9, #0
 800c08e:	9a00      	ldr	r2, [sp, #0]
 800c090:	bfcc      	ite	gt
 800c092:	464d      	movgt	r5, r9
 800c094:	2501      	movle	r5, #1
 800c096:	4415      	add	r5, r2
 800c098:	f04f 0800 	mov.w	r8, #0
 800c09c:	4659      	mov	r1, fp
 800c09e:	2201      	movs	r2, #1
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	9301      	str	r3, [sp, #4]
 800c0a4:	f000 fa62 	bl	800c56c <__lshift>
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4683      	mov	fp, r0
 800c0ac:	f000 faca 	bl	800c644 <__mcmp>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	dcb2      	bgt.n	800c01a <_dtoa_r+0xac2>
 800c0b4:	d102      	bne.n	800c0bc <_dtoa_r+0xb64>
 800c0b6:	9b01      	ldr	r3, [sp, #4]
 800c0b8:	07db      	lsls	r3, r3, #31
 800c0ba:	d4ae      	bmi.n	800c01a <_dtoa_r+0xac2>
 800c0bc:	462b      	mov	r3, r5
 800c0be:	461d      	mov	r5, r3
 800c0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0c4:	2a30      	cmp	r2, #48	; 0x30
 800c0c6:	d0fa      	beq.n	800c0be <_dtoa_r+0xb66>
 800c0c8:	e6f7      	b.n	800beba <_dtoa_r+0x962>
 800c0ca:	9a00      	ldr	r2, [sp, #0]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d1a5      	bne.n	800c01c <_dtoa_r+0xac4>
 800c0d0:	f10a 0a01 	add.w	sl, sl, #1
 800c0d4:	2331      	movs	r3, #49	; 0x31
 800c0d6:	e779      	b.n	800bfcc <_dtoa_r+0xa74>
 800c0d8:	4b13      	ldr	r3, [pc, #76]	; (800c128 <_dtoa_r+0xbd0>)
 800c0da:	f7ff baaf 	b.w	800b63c <_dtoa_r+0xe4>
 800c0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f47f aa86 	bne.w	800b5f2 <_dtoa_r+0x9a>
 800c0e6:	4b11      	ldr	r3, [pc, #68]	; (800c12c <_dtoa_r+0xbd4>)
 800c0e8:	f7ff baa8 	b.w	800b63c <_dtoa_r+0xe4>
 800c0ec:	f1b9 0f00 	cmp.w	r9, #0
 800c0f0:	dc03      	bgt.n	800c0fa <_dtoa_r+0xba2>
 800c0f2:	9b05      	ldr	r3, [sp, #20]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	f73f aec9 	bgt.w	800be8c <_dtoa_r+0x934>
 800c0fa:	9d00      	ldr	r5, [sp, #0]
 800c0fc:	4631      	mov	r1, r6
 800c0fe:	4658      	mov	r0, fp
 800c100:	f7ff f99e 	bl	800b440 <quorem>
 800c104:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c108:	f805 3b01 	strb.w	r3, [r5], #1
 800c10c:	9a00      	ldr	r2, [sp, #0]
 800c10e:	1aaa      	subs	r2, r5, r2
 800c110:	4591      	cmp	r9, r2
 800c112:	ddba      	ble.n	800c08a <_dtoa_r+0xb32>
 800c114:	4659      	mov	r1, fp
 800c116:	2300      	movs	r3, #0
 800c118:	220a      	movs	r2, #10
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 f876 	bl	800c20c <__multadd>
 800c120:	4683      	mov	fp, r0
 800c122:	e7eb      	b.n	800c0fc <_dtoa_r+0xba4>
 800c124:	0800da67 	.word	0x0800da67
 800c128:	0800d9c0 	.word	0x0800d9c0
 800c12c:	0800d9e4 	.word	0x0800d9e4

0800c130 <_localeconv_r>:
 800c130:	4800      	ldr	r0, [pc, #0]	; (800c134 <_localeconv_r+0x4>)
 800c132:	4770      	bx	lr
 800c134:	20000168 	.word	0x20000168

0800c138 <malloc>:
 800c138:	4b02      	ldr	r3, [pc, #8]	; (800c144 <malloc+0xc>)
 800c13a:	4601      	mov	r1, r0
 800c13c:	6818      	ldr	r0, [r3, #0]
 800c13e:	f000 bbe1 	b.w	800c904 <_malloc_r>
 800c142:	bf00      	nop
 800c144:	20000014 	.word	0x20000014

0800c148 <_Balloc>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c14c:	4604      	mov	r4, r0
 800c14e:	460d      	mov	r5, r1
 800c150:	b976      	cbnz	r6, 800c170 <_Balloc+0x28>
 800c152:	2010      	movs	r0, #16
 800c154:	f7ff fff0 	bl	800c138 <malloc>
 800c158:	4602      	mov	r2, r0
 800c15a:	6260      	str	r0, [r4, #36]	; 0x24
 800c15c:	b920      	cbnz	r0, 800c168 <_Balloc+0x20>
 800c15e:	4b18      	ldr	r3, [pc, #96]	; (800c1c0 <_Balloc+0x78>)
 800c160:	4818      	ldr	r0, [pc, #96]	; (800c1c4 <_Balloc+0x7c>)
 800c162:	2166      	movs	r1, #102	; 0x66
 800c164:	f000 fd94 	bl	800cc90 <__assert_func>
 800c168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c16c:	6006      	str	r6, [r0, #0]
 800c16e:	60c6      	str	r6, [r0, #12]
 800c170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c172:	68f3      	ldr	r3, [r6, #12]
 800c174:	b183      	cbz	r3, 800c198 <_Balloc+0x50>
 800c176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c17e:	b9b8      	cbnz	r0, 800c1b0 <_Balloc+0x68>
 800c180:	2101      	movs	r1, #1
 800c182:	fa01 f605 	lsl.w	r6, r1, r5
 800c186:	1d72      	adds	r2, r6, #5
 800c188:	0092      	lsls	r2, r2, #2
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 fb5a 	bl	800c844 <_calloc_r>
 800c190:	b160      	cbz	r0, 800c1ac <_Balloc+0x64>
 800c192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c196:	e00e      	b.n	800c1b6 <_Balloc+0x6e>
 800c198:	2221      	movs	r2, #33	; 0x21
 800c19a:	2104      	movs	r1, #4
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 fb51 	bl	800c844 <_calloc_r>
 800c1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1a4:	60f0      	str	r0, [r6, #12]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1e4      	bne.n	800c176 <_Balloc+0x2e>
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	6802      	ldr	r2, [r0, #0]
 800c1b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1bc:	e7f7      	b.n	800c1ae <_Balloc+0x66>
 800c1be:	bf00      	nop
 800c1c0:	0800d9f1 	.word	0x0800d9f1
 800c1c4:	0800da78 	.word	0x0800da78

0800c1c8 <_Bfree>:
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1cc:	4605      	mov	r5, r0
 800c1ce:	460c      	mov	r4, r1
 800c1d0:	b976      	cbnz	r6, 800c1f0 <_Bfree+0x28>
 800c1d2:	2010      	movs	r0, #16
 800c1d4:	f7ff ffb0 	bl	800c138 <malloc>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	6268      	str	r0, [r5, #36]	; 0x24
 800c1dc:	b920      	cbnz	r0, 800c1e8 <_Bfree+0x20>
 800c1de:	4b09      	ldr	r3, [pc, #36]	; (800c204 <_Bfree+0x3c>)
 800c1e0:	4809      	ldr	r0, [pc, #36]	; (800c208 <_Bfree+0x40>)
 800c1e2:	218a      	movs	r1, #138	; 0x8a
 800c1e4:	f000 fd54 	bl	800cc90 <__assert_func>
 800c1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1ec:	6006      	str	r6, [r0, #0]
 800c1ee:	60c6      	str	r6, [r0, #12]
 800c1f0:	b13c      	cbz	r4, 800c202 <_Bfree+0x3a>
 800c1f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1f4:	6862      	ldr	r2, [r4, #4]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1fc:	6021      	str	r1, [r4, #0]
 800c1fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c202:	bd70      	pop	{r4, r5, r6, pc}
 800c204:	0800d9f1 	.word	0x0800d9f1
 800c208:	0800da78 	.word	0x0800da78

0800c20c <__multadd>:
 800c20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c210:	690e      	ldr	r6, [r1, #16]
 800c212:	4607      	mov	r7, r0
 800c214:	4698      	mov	r8, r3
 800c216:	460c      	mov	r4, r1
 800c218:	f101 0014 	add.w	r0, r1, #20
 800c21c:	2300      	movs	r3, #0
 800c21e:	6805      	ldr	r5, [r0, #0]
 800c220:	b2a9      	uxth	r1, r5
 800c222:	fb02 8101 	mla	r1, r2, r1, r8
 800c226:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c22a:	0c2d      	lsrs	r5, r5, #16
 800c22c:	fb02 c505 	mla	r5, r2, r5, ip
 800c230:	b289      	uxth	r1, r1
 800c232:	3301      	adds	r3, #1
 800c234:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c238:	429e      	cmp	r6, r3
 800c23a:	f840 1b04 	str.w	r1, [r0], #4
 800c23e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c242:	dcec      	bgt.n	800c21e <__multadd+0x12>
 800c244:	f1b8 0f00 	cmp.w	r8, #0
 800c248:	d022      	beq.n	800c290 <__multadd+0x84>
 800c24a:	68a3      	ldr	r3, [r4, #8]
 800c24c:	42b3      	cmp	r3, r6
 800c24e:	dc19      	bgt.n	800c284 <__multadd+0x78>
 800c250:	6861      	ldr	r1, [r4, #4]
 800c252:	4638      	mov	r0, r7
 800c254:	3101      	adds	r1, #1
 800c256:	f7ff ff77 	bl	800c148 <_Balloc>
 800c25a:	4605      	mov	r5, r0
 800c25c:	b928      	cbnz	r0, 800c26a <__multadd+0x5e>
 800c25e:	4602      	mov	r2, r0
 800c260:	4b0d      	ldr	r3, [pc, #52]	; (800c298 <__multadd+0x8c>)
 800c262:	480e      	ldr	r0, [pc, #56]	; (800c29c <__multadd+0x90>)
 800c264:	21b5      	movs	r1, #181	; 0xb5
 800c266:	f000 fd13 	bl	800cc90 <__assert_func>
 800c26a:	6922      	ldr	r2, [r4, #16]
 800c26c:	3202      	adds	r2, #2
 800c26e:	f104 010c 	add.w	r1, r4, #12
 800c272:	0092      	lsls	r2, r2, #2
 800c274:	300c      	adds	r0, #12
 800c276:	f7fe fc43 	bl	800ab00 <memcpy>
 800c27a:	4621      	mov	r1, r4
 800c27c:	4638      	mov	r0, r7
 800c27e:	f7ff ffa3 	bl	800c1c8 <_Bfree>
 800c282:	462c      	mov	r4, r5
 800c284:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c288:	3601      	adds	r6, #1
 800c28a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c28e:	6126      	str	r6, [r4, #16]
 800c290:	4620      	mov	r0, r4
 800c292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c296:	bf00      	nop
 800c298:	0800da67 	.word	0x0800da67
 800c29c:	0800da78 	.word	0x0800da78

0800c2a0 <__hi0bits>:
 800c2a0:	0c03      	lsrs	r3, r0, #16
 800c2a2:	041b      	lsls	r3, r3, #16
 800c2a4:	b9d3      	cbnz	r3, 800c2dc <__hi0bits+0x3c>
 800c2a6:	0400      	lsls	r0, r0, #16
 800c2a8:	2310      	movs	r3, #16
 800c2aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c2ae:	bf04      	itt	eq
 800c2b0:	0200      	lsleq	r0, r0, #8
 800c2b2:	3308      	addeq	r3, #8
 800c2b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c2b8:	bf04      	itt	eq
 800c2ba:	0100      	lsleq	r0, r0, #4
 800c2bc:	3304      	addeq	r3, #4
 800c2be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c2c2:	bf04      	itt	eq
 800c2c4:	0080      	lsleq	r0, r0, #2
 800c2c6:	3302      	addeq	r3, #2
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	db05      	blt.n	800c2d8 <__hi0bits+0x38>
 800c2cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c2d0:	f103 0301 	add.w	r3, r3, #1
 800c2d4:	bf08      	it	eq
 800c2d6:	2320      	moveq	r3, #32
 800c2d8:	4618      	mov	r0, r3
 800c2da:	4770      	bx	lr
 800c2dc:	2300      	movs	r3, #0
 800c2de:	e7e4      	b.n	800c2aa <__hi0bits+0xa>

0800c2e0 <__lo0bits>:
 800c2e0:	6803      	ldr	r3, [r0, #0]
 800c2e2:	f013 0207 	ands.w	r2, r3, #7
 800c2e6:	4601      	mov	r1, r0
 800c2e8:	d00b      	beq.n	800c302 <__lo0bits+0x22>
 800c2ea:	07da      	lsls	r2, r3, #31
 800c2ec:	d424      	bmi.n	800c338 <__lo0bits+0x58>
 800c2ee:	0798      	lsls	r0, r3, #30
 800c2f0:	bf49      	itett	mi
 800c2f2:	085b      	lsrmi	r3, r3, #1
 800c2f4:	089b      	lsrpl	r3, r3, #2
 800c2f6:	2001      	movmi	r0, #1
 800c2f8:	600b      	strmi	r3, [r1, #0]
 800c2fa:	bf5c      	itt	pl
 800c2fc:	600b      	strpl	r3, [r1, #0]
 800c2fe:	2002      	movpl	r0, #2
 800c300:	4770      	bx	lr
 800c302:	b298      	uxth	r0, r3
 800c304:	b9b0      	cbnz	r0, 800c334 <__lo0bits+0x54>
 800c306:	0c1b      	lsrs	r3, r3, #16
 800c308:	2010      	movs	r0, #16
 800c30a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c30e:	bf04      	itt	eq
 800c310:	0a1b      	lsreq	r3, r3, #8
 800c312:	3008      	addeq	r0, #8
 800c314:	071a      	lsls	r2, r3, #28
 800c316:	bf04      	itt	eq
 800c318:	091b      	lsreq	r3, r3, #4
 800c31a:	3004      	addeq	r0, #4
 800c31c:	079a      	lsls	r2, r3, #30
 800c31e:	bf04      	itt	eq
 800c320:	089b      	lsreq	r3, r3, #2
 800c322:	3002      	addeq	r0, #2
 800c324:	07da      	lsls	r2, r3, #31
 800c326:	d403      	bmi.n	800c330 <__lo0bits+0x50>
 800c328:	085b      	lsrs	r3, r3, #1
 800c32a:	f100 0001 	add.w	r0, r0, #1
 800c32e:	d005      	beq.n	800c33c <__lo0bits+0x5c>
 800c330:	600b      	str	r3, [r1, #0]
 800c332:	4770      	bx	lr
 800c334:	4610      	mov	r0, r2
 800c336:	e7e8      	b.n	800c30a <__lo0bits+0x2a>
 800c338:	2000      	movs	r0, #0
 800c33a:	4770      	bx	lr
 800c33c:	2020      	movs	r0, #32
 800c33e:	4770      	bx	lr

0800c340 <__i2b>:
 800c340:	b510      	push	{r4, lr}
 800c342:	460c      	mov	r4, r1
 800c344:	2101      	movs	r1, #1
 800c346:	f7ff feff 	bl	800c148 <_Balloc>
 800c34a:	4602      	mov	r2, r0
 800c34c:	b928      	cbnz	r0, 800c35a <__i2b+0x1a>
 800c34e:	4b05      	ldr	r3, [pc, #20]	; (800c364 <__i2b+0x24>)
 800c350:	4805      	ldr	r0, [pc, #20]	; (800c368 <__i2b+0x28>)
 800c352:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c356:	f000 fc9b 	bl	800cc90 <__assert_func>
 800c35a:	2301      	movs	r3, #1
 800c35c:	6144      	str	r4, [r0, #20]
 800c35e:	6103      	str	r3, [r0, #16]
 800c360:	bd10      	pop	{r4, pc}
 800c362:	bf00      	nop
 800c364:	0800da67 	.word	0x0800da67
 800c368:	0800da78 	.word	0x0800da78

0800c36c <__multiply>:
 800c36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c370:	4614      	mov	r4, r2
 800c372:	690a      	ldr	r2, [r1, #16]
 800c374:	6923      	ldr	r3, [r4, #16]
 800c376:	429a      	cmp	r2, r3
 800c378:	bfb8      	it	lt
 800c37a:	460b      	movlt	r3, r1
 800c37c:	460d      	mov	r5, r1
 800c37e:	bfbc      	itt	lt
 800c380:	4625      	movlt	r5, r4
 800c382:	461c      	movlt	r4, r3
 800c384:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c388:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c38c:	68ab      	ldr	r3, [r5, #8]
 800c38e:	6869      	ldr	r1, [r5, #4]
 800c390:	eb0a 0709 	add.w	r7, sl, r9
 800c394:	42bb      	cmp	r3, r7
 800c396:	b085      	sub	sp, #20
 800c398:	bfb8      	it	lt
 800c39a:	3101      	addlt	r1, #1
 800c39c:	f7ff fed4 	bl	800c148 <_Balloc>
 800c3a0:	b930      	cbnz	r0, 800c3b0 <__multiply+0x44>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	4b42      	ldr	r3, [pc, #264]	; (800c4b0 <__multiply+0x144>)
 800c3a6:	4843      	ldr	r0, [pc, #268]	; (800c4b4 <__multiply+0x148>)
 800c3a8:	f240 115d 	movw	r1, #349	; 0x15d
 800c3ac:	f000 fc70 	bl	800cc90 <__assert_func>
 800c3b0:	f100 0614 	add.w	r6, r0, #20
 800c3b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c3b8:	4633      	mov	r3, r6
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	4543      	cmp	r3, r8
 800c3be:	d31e      	bcc.n	800c3fe <__multiply+0x92>
 800c3c0:	f105 0c14 	add.w	ip, r5, #20
 800c3c4:	f104 0314 	add.w	r3, r4, #20
 800c3c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c3cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c3d0:	9202      	str	r2, [sp, #8]
 800c3d2:	ebac 0205 	sub.w	r2, ip, r5
 800c3d6:	3a15      	subs	r2, #21
 800c3d8:	f022 0203 	bic.w	r2, r2, #3
 800c3dc:	3204      	adds	r2, #4
 800c3de:	f105 0115 	add.w	r1, r5, #21
 800c3e2:	458c      	cmp	ip, r1
 800c3e4:	bf38      	it	cc
 800c3e6:	2204      	movcc	r2, #4
 800c3e8:	9201      	str	r2, [sp, #4]
 800c3ea:	9a02      	ldr	r2, [sp, #8]
 800c3ec:	9303      	str	r3, [sp, #12]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d808      	bhi.n	800c404 <__multiply+0x98>
 800c3f2:	2f00      	cmp	r7, #0
 800c3f4:	dc55      	bgt.n	800c4a2 <__multiply+0x136>
 800c3f6:	6107      	str	r7, [r0, #16]
 800c3f8:	b005      	add	sp, #20
 800c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fe:	f843 2b04 	str.w	r2, [r3], #4
 800c402:	e7db      	b.n	800c3bc <__multiply+0x50>
 800c404:	f8b3 a000 	ldrh.w	sl, [r3]
 800c408:	f1ba 0f00 	cmp.w	sl, #0
 800c40c:	d020      	beq.n	800c450 <__multiply+0xe4>
 800c40e:	f105 0e14 	add.w	lr, r5, #20
 800c412:	46b1      	mov	r9, r6
 800c414:	2200      	movs	r2, #0
 800c416:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c41a:	f8d9 b000 	ldr.w	fp, [r9]
 800c41e:	b2a1      	uxth	r1, r4
 800c420:	fa1f fb8b 	uxth.w	fp, fp
 800c424:	fb0a b101 	mla	r1, sl, r1, fp
 800c428:	4411      	add	r1, r2
 800c42a:	f8d9 2000 	ldr.w	r2, [r9]
 800c42e:	0c24      	lsrs	r4, r4, #16
 800c430:	0c12      	lsrs	r2, r2, #16
 800c432:	fb0a 2404 	mla	r4, sl, r4, r2
 800c436:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c43a:	b289      	uxth	r1, r1
 800c43c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c440:	45f4      	cmp	ip, lr
 800c442:	f849 1b04 	str.w	r1, [r9], #4
 800c446:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c44a:	d8e4      	bhi.n	800c416 <__multiply+0xaa>
 800c44c:	9901      	ldr	r1, [sp, #4]
 800c44e:	5072      	str	r2, [r6, r1]
 800c450:	9a03      	ldr	r2, [sp, #12]
 800c452:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c456:	3304      	adds	r3, #4
 800c458:	f1b9 0f00 	cmp.w	r9, #0
 800c45c:	d01f      	beq.n	800c49e <__multiply+0x132>
 800c45e:	6834      	ldr	r4, [r6, #0]
 800c460:	f105 0114 	add.w	r1, r5, #20
 800c464:	46b6      	mov	lr, r6
 800c466:	f04f 0a00 	mov.w	sl, #0
 800c46a:	880a      	ldrh	r2, [r1, #0]
 800c46c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c470:	fb09 b202 	mla	r2, r9, r2, fp
 800c474:	4492      	add	sl, r2
 800c476:	b2a4      	uxth	r4, r4
 800c478:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c47c:	f84e 4b04 	str.w	r4, [lr], #4
 800c480:	f851 4b04 	ldr.w	r4, [r1], #4
 800c484:	f8be 2000 	ldrh.w	r2, [lr]
 800c488:	0c24      	lsrs	r4, r4, #16
 800c48a:	fb09 2404 	mla	r4, r9, r4, r2
 800c48e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c492:	458c      	cmp	ip, r1
 800c494:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c498:	d8e7      	bhi.n	800c46a <__multiply+0xfe>
 800c49a:	9a01      	ldr	r2, [sp, #4]
 800c49c:	50b4      	str	r4, [r6, r2]
 800c49e:	3604      	adds	r6, #4
 800c4a0:	e7a3      	b.n	800c3ea <__multiply+0x7e>
 800c4a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1a5      	bne.n	800c3f6 <__multiply+0x8a>
 800c4aa:	3f01      	subs	r7, #1
 800c4ac:	e7a1      	b.n	800c3f2 <__multiply+0x86>
 800c4ae:	bf00      	nop
 800c4b0:	0800da67 	.word	0x0800da67
 800c4b4:	0800da78 	.word	0x0800da78

0800c4b8 <__pow5mult>:
 800c4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4bc:	4615      	mov	r5, r2
 800c4be:	f012 0203 	ands.w	r2, r2, #3
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	460f      	mov	r7, r1
 800c4c6:	d007      	beq.n	800c4d8 <__pow5mult+0x20>
 800c4c8:	4c25      	ldr	r4, [pc, #148]	; (800c560 <__pow5mult+0xa8>)
 800c4ca:	3a01      	subs	r2, #1
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4d2:	f7ff fe9b 	bl	800c20c <__multadd>
 800c4d6:	4607      	mov	r7, r0
 800c4d8:	10ad      	asrs	r5, r5, #2
 800c4da:	d03d      	beq.n	800c558 <__pow5mult+0xa0>
 800c4dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c4de:	b97c      	cbnz	r4, 800c500 <__pow5mult+0x48>
 800c4e0:	2010      	movs	r0, #16
 800c4e2:	f7ff fe29 	bl	800c138 <malloc>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	6270      	str	r0, [r6, #36]	; 0x24
 800c4ea:	b928      	cbnz	r0, 800c4f8 <__pow5mult+0x40>
 800c4ec:	4b1d      	ldr	r3, [pc, #116]	; (800c564 <__pow5mult+0xac>)
 800c4ee:	481e      	ldr	r0, [pc, #120]	; (800c568 <__pow5mult+0xb0>)
 800c4f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c4f4:	f000 fbcc 	bl	800cc90 <__assert_func>
 800c4f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4fc:	6004      	str	r4, [r0, #0]
 800c4fe:	60c4      	str	r4, [r0, #12]
 800c500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c508:	b94c      	cbnz	r4, 800c51e <__pow5mult+0x66>
 800c50a:	f240 2171 	movw	r1, #625	; 0x271
 800c50e:	4630      	mov	r0, r6
 800c510:	f7ff ff16 	bl	800c340 <__i2b>
 800c514:	2300      	movs	r3, #0
 800c516:	f8c8 0008 	str.w	r0, [r8, #8]
 800c51a:	4604      	mov	r4, r0
 800c51c:	6003      	str	r3, [r0, #0]
 800c51e:	f04f 0900 	mov.w	r9, #0
 800c522:	07eb      	lsls	r3, r5, #31
 800c524:	d50a      	bpl.n	800c53c <__pow5mult+0x84>
 800c526:	4639      	mov	r1, r7
 800c528:	4622      	mov	r2, r4
 800c52a:	4630      	mov	r0, r6
 800c52c:	f7ff ff1e 	bl	800c36c <__multiply>
 800c530:	4639      	mov	r1, r7
 800c532:	4680      	mov	r8, r0
 800c534:	4630      	mov	r0, r6
 800c536:	f7ff fe47 	bl	800c1c8 <_Bfree>
 800c53a:	4647      	mov	r7, r8
 800c53c:	106d      	asrs	r5, r5, #1
 800c53e:	d00b      	beq.n	800c558 <__pow5mult+0xa0>
 800c540:	6820      	ldr	r0, [r4, #0]
 800c542:	b938      	cbnz	r0, 800c554 <__pow5mult+0x9c>
 800c544:	4622      	mov	r2, r4
 800c546:	4621      	mov	r1, r4
 800c548:	4630      	mov	r0, r6
 800c54a:	f7ff ff0f 	bl	800c36c <__multiply>
 800c54e:	6020      	str	r0, [r4, #0]
 800c550:	f8c0 9000 	str.w	r9, [r0]
 800c554:	4604      	mov	r4, r0
 800c556:	e7e4      	b.n	800c522 <__pow5mult+0x6a>
 800c558:	4638      	mov	r0, r7
 800c55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55e:	bf00      	nop
 800c560:	0800dbc8 	.word	0x0800dbc8
 800c564:	0800d9f1 	.word	0x0800d9f1
 800c568:	0800da78 	.word	0x0800da78

0800c56c <__lshift>:
 800c56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	460c      	mov	r4, r1
 800c572:	6849      	ldr	r1, [r1, #4]
 800c574:	6923      	ldr	r3, [r4, #16]
 800c576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c57a:	68a3      	ldr	r3, [r4, #8]
 800c57c:	4607      	mov	r7, r0
 800c57e:	4691      	mov	r9, r2
 800c580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c584:	f108 0601 	add.w	r6, r8, #1
 800c588:	42b3      	cmp	r3, r6
 800c58a:	db0b      	blt.n	800c5a4 <__lshift+0x38>
 800c58c:	4638      	mov	r0, r7
 800c58e:	f7ff fddb 	bl	800c148 <_Balloc>
 800c592:	4605      	mov	r5, r0
 800c594:	b948      	cbnz	r0, 800c5aa <__lshift+0x3e>
 800c596:	4602      	mov	r2, r0
 800c598:	4b28      	ldr	r3, [pc, #160]	; (800c63c <__lshift+0xd0>)
 800c59a:	4829      	ldr	r0, [pc, #164]	; (800c640 <__lshift+0xd4>)
 800c59c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c5a0:	f000 fb76 	bl	800cc90 <__assert_func>
 800c5a4:	3101      	adds	r1, #1
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	e7ee      	b.n	800c588 <__lshift+0x1c>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f100 0114 	add.w	r1, r0, #20
 800c5b0:	f100 0210 	add.w	r2, r0, #16
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	4553      	cmp	r3, sl
 800c5b8:	db33      	blt.n	800c622 <__lshift+0xb6>
 800c5ba:	6920      	ldr	r0, [r4, #16]
 800c5bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5c0:	f104 0314 	add.w	r3, r4, #20
 800c5c4:	f019 091f 	ands.w	r9, r9, #31
 800c5c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5d0:	d02b      	beq.n	800c62a <__lshift+0xbe>
 800c5d2:	f1c9 0e20 	rsb	lr, r9, #32
 800c5d6:	468a      	mov	sl, r1
 800c5d8:	2200      	movs	r2, #0
 800c5da:	6818      	ldr	r0, [r3, #0]
 800c5dc:	fa00 f009 	lsl.w	r0, r0, r9
 800c5e0:	4302      	orrs	r2, r0
 800c5e2:	f84a 2b04 	str.w	r2, [sl], #4
 800c5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ea:	459c      	cmp	ip, r3
 800c5ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5f0:	d8f3      	bhi.n	800c5da <__lshift+0x6e>
 800c5f2:	ebac 0304 	sub.w	r3, ip, r4
 800c5f6:	3b15      	subs	r3, #21
 800c5f8:	f023 0303 	bic.w	r3, r3, #3
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	f104 0015 	add.w	r0, r4, #21
 800c602:	4584      	cmp	ip, r0
 800c604:	bf38      	it	cc
 800c606:	2304      	movcc	r3, #4
 800c608:	50ca      	str	r2, [r1, r3]
 800c60a:	b10a      	cbz	r2, 800c610 <__lshift+0xa4>
 800c60c:	f108 0602 	add.w	r6, r8, #2
 800c610:	3e01      	subs	r6, #1
 800c612:	4638      	mov	r0, r7
 800c614:	612e      	str	r6, [r5, #16]
 800c616:	4621      	mov	r1, r4
 800c618:	f7ff fdd6 	bl	800c1c8 <_Bfree>
 800c61c:	4628      	mov	r0, r5
 800c61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c622:	f842 0f04 	str.w	r0, [r2, #4]!
 800c626:	3301      	adds	r3, #1
 800c628:	e7c5      	b.n	800c5b6 <__lshift+0x4a>
 800c62a:	3904      	subs	r1, #4
 800c62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c630:	f841 2f04 	str.w	r2, [r1, #4]!
 800c634:	459c      	cmp	ip, r3
 800c636:	d8f9      	bhi.n	800c62c <__lshift+0xc0>
 800c638:	e7ea      	b.n	800c610 <__lshift+0xa4>
 800c63a:	bf00      	nop
 800c63c:	0800da67 	.word	0x0800da67
 800c640:	0800da78 	.word	0x0800da78

0800c644 <__mcmp>:
 800c644:	b530      	push	{r4, r5, lr}
 800c646:	6902      	ldr	r2, [r0, #16]
 800c648:	690c      	ldr	r4, [r1, #16]
 800c64a:	1b12      	subs	r2, r2, r4
 800c64c:	d10e      	bne.n	800c66c <__mcmp+0x28>
 800c64e:	f100 0314 	add.w	r3, r0, #20
 800c652:	3114      	adds	r1, #20
 800c654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c65c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c664:	42a5      	cmp	r5, r4
 800c666:	d003      	beq.n	800c670 <__mcmp+0x2c>
 800c668:	d305      	bcc.n	800c676 <__mcmp+0x32>
 800c66a:	2201      	movs	r2, #1
 800c66c:	4610      	mov	r0, r2
 800c66e:	bd30      	pop	{r4, r5, pc}
 800c670:	4283      	cmp	r3, r0
 800c672:	d3f3      	bcc.n	800c65c <__mcmp+0x18>
 800c674:	e7fa      	b.n	800c66c <__mcmp+0x28>
 800c676:	f04f 32ff 	mov.w	r2, #4294967295
 800c67a:	e7f7      	b.n	800c66c <__mcmp+0x28>

0800c67c <__mdiff>:
 800c67c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	460c      	mov	r4, r1
 800c682:	4606      	mov	r6, r0
 800c684:	4611      	mov	r1, r2
 800c686:	4620      	mov	r0, r4
 800c688:	4617      	mov	r7, r2
 800c68a:	f7ff ffdb 	bl	800c644 <__mcmp>
 800c68e:	1e05      	subs	r5, r0, #0
 800c690:	d110      	bne.n	800c6b4 <__mdiff+0x38>
 800c692:	4629      	mov	r1, r5
 800c694:	4630      	mov	r0, r6
 800c696:	f7ff fd57 	bl	800c148 <_Balloc>
 800c69a:	b930      	cbnz	r0, 800c6aa <__mdiff+0x2e>
 800c69c:	4b39      	ldr	r3, [pc, #228]	; (800c784 <__mdiff+0x108>)
 800c69e:	4602      	mov	r2, r0
 800c6a0:	f240 2132 	movw	r1, #562	; 0x232
 800c6a4:	4838      	ldr	r0, [pc, #224]	; (800c788 <__mdiff+0x10c>)
 800c6a6:	f000 faf3 	bl	800cc90 <__assert_func>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b4:	bfa4      	itt	ge
 800c6b6:	463b      	movge	r3, r7
 800c6b8:	4627      	movge	r7, r4
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	6879      	ldr	r1, [r7, #4]
 800c6be:	bfa6      	itte	ge
 800c6c0:	461c      	movge	r4, r3
 800c6c2:	2500      	movge	r5, #0
 800c6c4:	2501      	movlt	r5, #1
 800c6c6:	f7ff fd3f 	bl	800c148 <_Balloc>
 800c6ca:	b920      	cbnz	r0, 800c6d6 <__mdiff+0x5a>
 800c6cc:	4b2d      	ldr	r3, [pc, #180]	; (800c784 <__mdiff+0x108>)
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c6d4:	e7e6      	b.n	800c6a4 <__mdiff+0x28>
 800c6d6:	693e      	ldr	r6, [r7, #16]
 800c6d8:	60c5      	str	r5, [r0, #12]
 800c6da:	6925      	ldr	r5, [r4, #16]
 800c6dc:	f107 0114 	add.w	r1, r7, #20
 800c6e0:	f104 0914 	add.w	r9, r4, #20
 800c6e4:	f100 0e14 	add.w	lr, r0, #20
 800c6e8:	f107 0210 	add.w	r2, r7, #16
 800c6ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c6f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c6f4:	46f2      	mov	sl, lr
 800c6f6:	2700      	movs	r7, #0
 800c6f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c700:	fa1f f883 	uxth.w	r8, r3
 800c704:	fa17 f78b 	uxtah	r7, r7, fp
 800c708:	0c1b      	lsrs	r3, r3, #16
 800c70a:	eba7 0808 	sub.w	r8, r7, r8
 800c70e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c712:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c716:	fa1f f888 	uxth.w	r8, r8
 800c71a:	141f      	asrs	r7, r3, #16
 800c71c:	454d      	cmp	r5, r9
 800c71e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c722:	f84a 3b04 	str.w	r3, [sl], #4
 800c726:	d8e7      	bhi.n	800c6f8 <__mdiff+0x7c>
 800c728:	1b2b      	subs	r3, r5, r4
 800c72a:	3b15      	subs	r3, #21
 800c72c:	f023 0303 	bic.w	r3, r3, #3
 800c730:	3304      	adds	r3, #4
 800c732:	3415      	adds	r4, #21
 800c734:	42a5      	cmp	r5, r4
 800c736:	bf38      	it	cc
 800c738:	2304      	movcc	r3, #4
 800c73a:	4419      	add	r1, r3
 800c73c:	4473      	add	r3, lr
 800c73e:	469e      	mov	lr, r3
 800c740:	460d      	mov	r5, r1
 800c742:	4565      	cmp	r5, ip
 800c744:	d30e      	bcc.n	800c764 <__mdiff+0xe8>
 800c746:	f10c 0203 	add.w	r2, ip, #3
 800c74a:	1a52      	subs	r2, r2, r1
 800c74c:	f022 0203 	bic.w	r2, r2, #3
 800c750:	3903      	subs	r1, #3
 800c752:	458c      	cmp	ip, r1
 800c754:	bf38      	it	cc
 800c756:	2200      	movcc	r2, #0
 800c758:	441a      	add	r2, r3
 800c75a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c75e:	b17b      	cbz	r3, 800c780 <__mdiff+0x104>
 800c760:	6106      	str	r6, [r0, #16]
 800c762:	e7a5      	b.n	800c6b0 <__mdiff+0x34>
 800c764:	f855 8b04 	ldr.w	r8, [r5], #4
 800c768:	fa17 f488 	uxtah	r4, r7, r8
 800c76c:	1422      	asrs	r2, r4, #16
 800c76e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c772:	b2a4      	uxth	r4, r4
 800c774:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c778:	f84e 4b04 	str.w	r4, [lr], #4
 800c77c:	1417      	asrs	r7, r2, #16
 800c77e:	e7e0      	b.n	800c742 <__mdiff+0xc6>
 800c780:	3e01      	subs	r6, #1
 800c782:	e7ea      	b.n	800c75a <__mdiff+0xde>
 800c784:	0800da67 	.word	0x0800da67
 800c788:	0800da78 	.word	0x0800da78

0800c78c <__d2b>:
 800c78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c790:	4689      	mov	r9, r1
 800c792:	2101      	movs	r1, #1
 800c794:	ec57 6b10 	vmov	r6, r7, d0
 800c798:	4690      	mov	r8, r2
 800c79a:	f7ff fcd5 	bl	800c148 <_Balloc>
 800c79e:	4604      	mov	r4, r0
 800c7a0:	b930      	cbnz	r0, 800c7b0 <__d2b+0x24>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	4b25      	ldr	r3, [pc, #148]	; (800c83c <__d2b+0xb0>)
 800c7a6:	4826      	ldr	r0, [pc, #152]	; (800c840 <__d2b+0xb4>)
 800c7a8:	f240 310a 	movw	r1, #778	; 0x30a
 800c7ac:	f000 fa70 	bl	800cc90 <__assert_func>
 800c7b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c7b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c7b8:	bb35      	cbnz	r5, 800c808 <__d2b+0x7c>
 800c7ba:	2e00      	cmp	r6, #0
 800c7bc:	9301      	str	r3, [sp, #4]
 800c7be:	d028      	beq.n	800c812 <__d2b+0x86>
 800c7c0:	4668      	mov	r0, sp
 800c7c2:	9600      	str	r6, [sp, #0]
 800c7c4:	f7ff fd8c 	bl	800c2e0 <__lo0bits>
 800c7c8:	9900      	ldr	r1, [sp, #0]
 800c7ca:	b300      	cbz	r0, 800c80e <__d2b+0x82>
 800c7cc:	9a01      	ldr	r2, [sp, #4]
 800c7ce:	f1c0 0320 	rsb	r3, r0, #32
 800c7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7d6:	430b      	orrs	r3, r1
 800c7d8:	40c2      	lsrs	r2, r0
 800c7da:	6163      	str	r3, [r4, #20]
 800c7dc:	9201      	str	r2, [sp, #4]
 800c7de:	9b01      	ldr	r3, [sp, #4]
 800c7e0:	61a3      	str	r3, [r4, #24]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	bf14      	ite	ne
 800c7e6:	2202      	movne	r2, #2
 800c7e8:	2201      	moveq	r2, #1
 800c7ea:	6122      	str	r2, [r4, #16]
 800c7ec:	b1d5      	cbz	r5, 800c824 <__d2b+0x98>
 800c7ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c7f2:	4405      	add	r5, r0
 800c7f4:	f8c9 5000 	str.w	r5, [r9]
 800c7f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c7fc:	f8c8 0000 	str.w	r0, [r8]
 800c800:	4620      	mov	r0, r4
 800c802:	b003      	add	sp, #12
 800c804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c80c:	e7d5      	b.n	800c7ba <__d2b+0x2e>
 800c80e:	6161      	str	r1, [r4, #20]
 800c810:	e7e5      	b.n	800c7de <__d2b+0x52>
 800c812:	a801      	add	r0, sp, #4
 800c814:	f7ff fd64 	bl	800c2e0 <__lo0bits>
 800c818:	9b01      	ldr	r3, [sp, #4]
 800c81a:	6163      	str	r3, [r4, #20]
 800c81c:	2201      	movs	r2, #1
 800c81e:	6122      	str	r2, [r4, #16]
 800c820:	3020      	adds	r0, #32
 800c822:	e7e3      	b.n	800c7ec <__d2b+0x60>
 800c824:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c82c:	f8c9 0000 	str.w	r0, [r9]
 800c830:	6918      	ldr	r0, [r3, #16]
 800c832:	f7ff fd35 	bl	800c2a0 <__hi0bits>
 800c836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c83a:	e7df      	b.n	800c7fc <__d2b+0x70>
 800c83c:	0800da67 	.word	0x0800da67
 800c840:	0800da78 	.word	0x0800da78

0800c844 <_calloc_r>:
 800c844:	b513      	push	{r0, r1, r4, lr}
 800c846:	434a      	muls	r2, r1
 800c848:	4611      	mov	r1, r2
 800c84a:	9201      	str	r2, [sp, #4]
 800c84c:	f000 f85a 	bl	800c904 <_malloc_r>
 800c850:	4604      	mov	r4, r0
 800c852:	b118      	cbz	r0, 800c85c <_calloc_r+0x18>
 800c854:	9a01      	ldr	r2, [sp, #4]
 800c856:	2100      	movs	r1, #0
 800c858:	f7fe f960 	bl	800ab1c <memset>
 800c85c:	4620      	mov	r0, r4
 800c85e:	b002      	add	sp, #8
 800c860:	bd10      	pop	{r4, pc}
	...

0800c864 <_free_r>:
 800c864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c866:	2900      	cmp	r1, #0
 800c868:	d048      	beq.n	800c8fc <_free_r+0x98>
 800c86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c86e:	9001      	str	r0, [sp, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	f1a1 0404 	sub.w	r4, r1, #4
 800c876:	bfb8      	it	lt
 800c878:	18e4      	addlt	r4, r4, r3
 800c87a:	f000 fa65 	bl	800cd48 <__malloc_lock>
 800c87e:	4a20      	ldr	r2, [pc, #128]	; (800c900 <_free_r+0x9c>)
 800c880:	9801      	ldr	r0, [sp, #4]
 800c882:	6813      	ldr	r3, [r2, #0]
 800c884:	4615      	mov	r5, r2
 800c886:	b933      	cbnz	r3, 800c896 <_free_r+0x32>
 800c888:	6063      	str	r3, [r4, #4]
 800c88a:	6014      	str	r4, [r2, #0]
 800c88c:	b003      	add	sp, #12
 800c88e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c892:	f000 ba5f 	b.w	800cd54 <__malloc_unlock>
 800c896:	42a3      	cmp	r3, r4
 800c898:	d90b      	bls.n	800c8b2 <_free_r+0x4e>
 800c89a:	6821      	ldr	r1, [r4, #0]
 800c89c:	1862      	adds	r2, r4, r1
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	bf04      	itt	eq
 800c8a2:	681a      	ldreq	r2, [r3, #0]
 800c8a4:	685b      	ldreq	r3, [r3, #4]
 800c8a6:	6063      	str	r3, [r4, #4]
 800c8a8:	bf04      	itt	eq
 800c8aa:	1852      	addeq	r2, r2, r1
 800c8ac:	6022      	streq	r2, [r4, #0]
 800c8ae:	602c      	str	r4, [r5, #0]
 800c8b0:	e7ec      	b.n	800c88c <_free_r+0x28>
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	b10b      	cbz	r3, 800c8bc <_free_r+0x58>
 800c8b8:	42a3      	cmp	r3, r4
 800c8ba:	d9fa      	bls.n	800c8b2 <_free_r+0x4e>
 800c8bc:	6811      	ldr	r1, [r2, #0]
 800c8be:	1855      	adds	r5, r2, r1
 800c8c0:	42a5      	cmp	r5, r4
 800c8c2:	d10b      	bne.n	800c8dc <_free_r+0x78>
 800c8c4:	6824      	ldr	r4, [r4, #0]
 800c8c6:	4421      	add	r1, r4
 800c8c8:	1854      	adds	r4, r2, r1
 800c8ca:	42a3      	cmp	r3, r4
 800c8cc:	6011      	str	r1, [r2, #0]
 800c8ce:	d1dd      	bne.n	800c88c <_free_r+0x28>
 800c8d0:	681c      	ldr	r4, [r3, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	6053      	str	r3, [r2, #4]
 800c8d6:	4421      	add	r1, r4
 800c8d8:	6011      	str	r1, [r2, #0]
 800c8da:	e7d7      	b.n	800c88c <_free_r+0x28>
 800c8dc:	d902      	bls.n	800c8e4 <_free_r+0x80>
 800c8de:	230c      	movs	r3, #12
 800c8e0:	6003      	str	r3, [r0, #0]
 800c8e2:	e7d3      	b.n	800c88c <_free_r+0x28>
 800c8e4:	6825      	ldr	r5, [r4, #0]
 800c8e6:	1961      	adds	r1, r4, r5
 800c8e8:	428b      	cmp	r3, r1
 800c8ea:	bf04      	itt	eq
 800c8ec:	6819      	ldreq	r1, [r3, #0]
 800c8ee:	685b      	ldreq	r3, [r3, #4]
 800c8f0:	6063      	str	r3, [r4, #4]
 800c8f2:	bf04      	itt	eq
 800c8f4:	1949      	addeq	r1, r1, r5
 800c8f6:	6021      	streq	r1, [r4, #0]
 800c8f8:	6054      	str	r4, [r2, #4]
 800c8fa:	e7c7      	b.n	800c88c <_free_r+0x28>
 800c8fc:	b003      	add	sp, #12
 800c8fe:	bd30      	pop	{r4, r5, pc}
 800c900:	20008438 	.word	0x20008438

0800c904 <_malloc_r>:
 800c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c906:	1ccd      	adds	r5, r1, #3
 800c908:	f025 0503 	bic.w	r5, r5, #3
 800c90c:	3508      	adds	r5, #8
 800c90e:	2d0c      	cmp	r5, #12
 800c910:	bf38      	it	cc
 800c912:	250c      	movcc	r5, #12
 800c914:	2d00      	cmp	r5, #0
 800c916:	4606      	mov	r6, r0
 800c918:	db01      	blt.n	800c91e <_malloc_r+0x1a>
 800c91a:	42a9      	cmp	r1, r5
 800c91c:	d903      	bls.n	800c926 <_malloc_r+0x22>
 800c91e:	230c      	movs	r3, #12
 800c920:	6033      	str	r3, [r6, #0]
 800c922:	2000      	movs	r0, #0
 800c924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c926:	f000 fa0f 	bl	800cd48 <__malloc_lock>
 800c92a:	4921      	ldr	r1, [pc, #132]	; (800c9b0 <_malloc_r+0xac>)
 800c92c:	680a      	ldr	r2, [r1, #0]
 800c92e:	4614      	mov	r4, r2
 800c930:	b99c      	cbnz	r4, 800c95a <_malloc_r+0x56>
 800c932:	4f20      	ldr	r7, [pc, #128]	; (800c9b4 <_malloc_r+0xb0>)
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	b923      	cbnz	r3, 800c942 <_malloc_r+0x3e>
 800c938:	4621      	mov	r1, r4
 800c93a:	4630      	mov	r0, r6
 800c93c:	f000 f998 	bl	800cc70 <_sbrk_r>
 800c940:	6038      	str	r0, [r7, #0]
 800c942:	4629      	mov	r1, r5
 800c944:	4630      	mov	r0, r6
 800c946:	f000 f993 	bl	800cc70 <_sbrk_r>
 800c94a:	1c43      	adds	r3, r0, #1
 800c94c:	d123      	bne.n	800c996 <_malloc_r+0x92>
 800c94e:	230c      	movs	r3, #12
 800c950:	6033      	str	r3, [r6, #0]
 800c952:	4630      	mov	r0, r6
 800c954:	f000 f9fe 	bl	800cd54 <__malloc_unlock>
 800c958:	e7e3      	b.n	800c922 <_malloc_r+0x1e>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	1b5b      	subs	r3, r3, r5
 800c95e:	d417      	bmi.n	800c990 <_malloc_r+0x8c>
 800c960:	2b0b      	cmp	r3, #11
 800c962:	d903      	bls.n	800c96c <_malloc_r+0x68>
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	441c      	add	r4, r3
 800c968:	6025      	str	r5, [r4, #0]
 800c96a:	e004      	b.n	800c976 <_malloc_r+0x72>
 800c96c:	6863      	ldr	r3, [r4, #4]
 800c96e:	42a2      	cmp	r2, r4
 800c970:	bf0c      	ite	eq
 800c972:	600b      	streq	r3, [r1, #0]
 800c974:	6053      	strne	r3, [r2, #4]
 800c976:	4630      	mov	r0, r6
 800c978:	f000 f9ec 	bl	800cd54 <__malloc_unlock>
 800c97c:	f104 000b 	add.w	r0, r4, #11
 800c980:	1d23      	adds	r3, r4, #4
 800c982:	f020 0007 	bic.w	r0, r0, #7
 800c986:	1ac2      	subs	r2, r0, r3
 800c988:	d0cc      	beq.n	800c924 <_malloc_r+0x20>
 800c98a:	1a1b      	subs	r3, r3, r0
 800c98c:	50a3      	str	r3, [r4, r2]
 800c98e:	e7c9      	b.n	800c924 <_malloc_r+0x20>
 800c990:	4622      	mov	r2, r4
 800c992:	6864      	ldr	r4, [r4, #4]
 800c994:	e7cc      	b.n	800c930 <_malloc_r+0x2c>
 800c996:	1cc4      	adds	r4, r0, #3
 800c998:	f024 0403 	bic.w	r4, r4, #3
 800c99c:	42a0      	cmp	r0, r4
 800c99e:	d0e3      	beq.n	800c968 <_malloc_r+0x64>
 800c9a0:	1a21      	subs	r1, r4, r0
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f000 f964 	bl	800cc70 <_sbrk_r>
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	d1dd      	bne.n	800c968 <_malloc_r+0x64>
 800c9ac:	e7cf      	b.n	800c94e <_malloc_r+0x4a>
 800c9ae:	bf00      	nop
 800c9b0:	20008438 	.word	0x20008438
 800c9b4:	2000843c 	.word	0x2000843c

0800c9b8 <__ssputs_r>:
 800c9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9bc:	688e      	ldr	r6, [r1, #8]
 800c9be:	429e      	cmp	r6, r3
 800c9c0:	4682      	mov	sl, r0
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	4690      	mov	r8, r2
 800c9c6:	461f      	mov	r7, r3
 800c9c8:	d838      	bhi.n	800ca3c <__ssputs_r+0x84>
 800c9ca:	898a      	ldrh	r2, [r1, #12]
 800c9cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9d0:	d032      	beq.n	800ca38 <__ssputs_r+0x80>
 800c9d2:	6825      	ldr	r5, [r4, #0]
 800c9d4:	6909      	ldr	r1, [r1, #16]
 800c9d6:	eba5 0901 	sub.w	r9, r5, r1
 800c9da:	6965      	ldr	r5, [r4, #20]
 800c9dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	444b      	add	r3, r9
 800c9e8:	106d      	asrs	r5, r5, #1
 800c9ea:	429d      	cmp	r5, r3
 800c9ec:	bf38      	it	cc
 800c9ee:	461d      	movcc	r5, r3
 800c9f0:	0553      	lsls	r3, r2, #21
 800c9f2:	d531      	bpl.n	800ca58 <__ssputs_r+0xa0>
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	f7ff ff85 	bl	800c904 <_malloc_r>
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	b950      	cbnz	r0, 800ca14 <__ssputs_r+0x5c>
 800c9fe:	230c      	movs	r3, #12
 800ca00:	f8ca 3000 	str.w	r3, [sl]
 800ca04:	89a3      	ldrh	r3, [r4, #12]
 800ca06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca0a:	81a3      	strh	r3, [r4, #12]
 800ca0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca14:	6921      	ldr	r1, [r4, #16]
 800ca16:	464a      	mov	r2, r9
 800ca18:	f7fe f872 	bl	800ab00 <memcpy>
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca26:	81a3      	strh	r3, [r4, #12]
 800ca28:	6126      	str	r6, [r4, #16]
 800ca2a:	6165      	str	r5, [r4, #20]
 800ca2c:	444e      	add	r6, r9
 800ca2e:	eba5 0509 	sub.w	r5, r5, r9
 800ca32:	6026      	str	r6, [r4, #0]
 800ca34:	60a5      	str	r5, [r4, #8]
 800ca36:	463e      	mov	r6, r7
 800ca38:	42be      	cmp	r6, r7
 800ca3a:	d900      	bls.n	800ca3e <__ssputs_r+0x86>
 800ca3c:	463e      	mov	r6, r7
 800ca3e:	4632      	mov	r2, r6
 800ca40:	6820      	ldr	r0, [r4, #0]
 800ca42:	4641      	mov	r1, r8
 800ca44:	f000 f966 	bl	800cd14 <memmove>
 800ca48:	68a3      	ldr	r3, [r4, #8]
 800ca4a:	6822      	ldr	r2, [r4, #0]
 800ca4c:	1b9b      	subs	r3, r3, r6
 800ca4e:	4432      	add	r2, r6
 800ca50:	60a3      	str	r3, [r4, #8]
 800ca52:	6022      	str	r2, [r4, #0]
 800ca54:	2000      	movs	r0, #0
 800ca56:	e7db      	b.n	800ca10 <__ssputs_r+0x58>
 800ca58:	462a      	mov	r2, r5
 800ca5a:	f000 f981 	bl	800cd60 <_realloc_r>
 800ca5e:	4606      	mov	r6, r0
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d1e1      	bne.n	800ca28 <__ssputs_r+0x70>
 800ca64:	6921      	ldr	r1, [r4, #16]
 800ca66:	4650      	mov	r0, sl
 800ca68:	f7ff fefc 	bl	800c864 <_free_r>
 800ca6c:	e7c7      	b.n	800c9fe <__ssputs_r+0x46>
	...

0800ca70 <_svfiprintf_r>:
 800ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca74:	4698      	mov	r8, r3
 800ca76:	898b      	ldrh	r3, [r1, #12]
 800ca78:	061b      	lsls	r3, r3, #24
 800ca7a:	b09d      	sub	sp, #116	; 0x74
 800ca7c:	4607      	mov	r7, r0
 800ca7e:	460d      	mov	r5, r1
 800ca80:	4614      	mov	r4, r2
 800ca82:	d50e      	bpl.n	800caa2 <_svfiprintf_r+0x32>
 800ca84:	690b      	ldr	r3, [r1, #16]
 800ca86:	b963      	cbnz	r3, 800caa2 <_svfiprintf_r+0x32>
 800ca88:	2140      	movs	r1, #64	; 0x40
 800ca8a:	f7ff ff3b 	bl	800c904 <_malloc_r>
 800ca8e:	6028      	str	r0, [r5, #0]
 800ca90:	6128      	str	r0, [r5, #16]
 800ca92:	b920      	cbnz	r0, 800ca9e <_svfiprintf_r+0x2e>
 800ca94:	230c      	movs	r3, #12
 800ca96:	603b      	str	r3, [r7, #0]
 800ca98:	f04f 30ff 	mov.w	r0, #4294967295
 800ca9c:	e0d1      	b.n	800cc42 <_svfiprintf_r+0x1d2>
 800ca9e:	2340      	movs	r3, #64	; 0x40
 800caa0:	616b      	str	r3, [r5, #20]
 800caa2:	2300      	movs	r3, #0
 800caa4:	9309      	str	r3, [sp, #36]	; 0x24
 800caa6:	2320      	movs	r3, #32
 800caa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800caac:	f8cd 800c 	str.w	r8, [sp, #12]
 800cab0:	2330      	movs	r3, #48	; 0x30
 800cab2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc5c <_svfiprintf_r+0x1ec>
 800cab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caba:	f04f 0901 	mov.w	r9, #1
 800cabe:	4623      	mov	r3, r4
 800cac0:	469a      	mov	sl, r3
 800cac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cac6:	b10a      	cbz	r2, 800cacc <_svfiprintf_r+0x5c>
 800cac8:	2a25      	cmp	r2, #37	; 0x25
 800caca:	d1f9      	bne.n	800cac0 <_svfiprintf_r+0x50>
 800cacc:	ebba 0b04 	subs.w	fp, sl, r4
 800cad0:	d00b      	beq.n	800caea <_svfiprintf_r+0x7a>
 800cad2:	465b      	mov	r3, fp
 800cad4:	4622      	mov	r2, r4
 800cad6:	4629      	mov	r1, r5
 800cad8:	4638      	mov	r0, r7
 800cada:	f7ff ff6d 	bl	800c9b8 <__ssputs_r>
 800cade:	3001      	adds	r0, #1
 800cae0:	f000 80aa 	beq.w	800cc38 <_svfiprintf_r+0x1c8>
 800cae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cae6:	445a      	add	r2, fp
 800cae8:	9209      	str	r2, [sp, #36]	; 0x24
 800caea:	f89a 3000 	ldrb.w	r3, [sl]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 80a2 	beq.w	800cc38 <_svfiprintf_r+0x1c8>
 800caf4:	2300      	movs	r3, #0
 800caf6:	f04f 32ff 	mov.w	r2, #4294967295
 800cafa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cafe:	f10a 0a01 	add.w	sl, sl, #1
 800cb02:	9304      	str	r3, [sp, #16]
 800cb04:	9307      	str	r3, [sp, #28]
 800cb06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb0a:	931a      	str	r3, [sp, #104]	; 0x68
 800cb0c:	4654      	mov	r4, sl
 800cb0e:	2205      	movs	r2, #5
 800cb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb14:	4851      	ldr	r0, [pc, #324]	; (800cc5c <_svfiprintf_r+0x1ec>)
 800cb16:	f7f3 fb63 	bl	80001e0 <memchr>
 800cb1a:	9a04      	ldr	r2, [sp, #16]
 800cb1c:	b9d8      	cbnz	r0, 800cb56 <_svfiprintf_r+0xe6>
 800cb1e:	06d0      	lsls	r0, r2, #27
 800cb20:	bf44      	itt	mi
 800cb22:	2320      	movmi	r3, #32
 800cb24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb28:	0711      	lsls	r1, r2, #28
 800cb2a:	bf44      	itt	mi
 800cb2c:	232b      	movmi	r3, #43	; 0x2b
 800cb2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb32:	f89a 3000 	ldrb.w	r3, [sl]
 800cb36:	2b2a      	cmp	r3, #42	; 0x2a
 800cb38:	d015      	beq.n	800cb66 <_svfiprintf_r+0xf6>
 800cb3a:	9a07      	ldr	r2, [sp, #28]
 800cb3c:	4654      	mov	r4, sl
 800cb3e:	2000      	movs	r0, #0
 800cb40:	f04f 0c0a 	mov.w	ip, #10
 800cb44:	4621      	mov	r1, r4
 800cb46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb4a:	3b30      	subs	r3, #48	; 0x30
 800cb4c:	2b09      	cmp	r3, #9
 800cb4e:	d94e      	bls.n	800cbee <_svfiprintf_r+0x17e>
 800cb50:	b1b0      	cbz	r0, 800cb80 <_svfiprintf_r+0x110>
 800cb52:	9207      	str	r2, [sp, #28]
 800cb54:	e014      	b.n	800cb80 <_svfiprintf_r+0x110>
 800cb56:	eba0 0308 	sub.w	r3, r0, r8
 800cb5a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	9304      	str	r3, [sp, #16]
 800cb62:	46a2      	mov	sl, r4
 800cb64:	e7d2      	b.n	800cb0c <_svfiprintf_r+0x9c>
 800cb66:	9b03      	ldr	r3, [sp, #12]
 800cb68:	1d19      	adds	r1, r3, #4
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	9103      	str	r1, [sp, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	bfbb      	ittet	lt
 800cb72:	425b      	neglt	r3, r3
 800cb74:	f042 0202 	orrlt.w	r2, r2, #2
 800cb78:	9307      	strge	r3, [sp, #28]
 800cb7a:	9307      	strlt	r3, [sp, #28]
 800cb7c:	bfb8      	it	lt
 800cb7e:	9204      	strlt	r2, [sp, #16]
 800cb80:	7823      	ldrb	r3, [r4, #0]
 800cb82:	2b2e      	cmp	r3, #46	; 0x2e
 800cb84:	d10c      	bne.n	800cba0 <_svfiprintf_r+0x130>
 800cb86:	7863      	ldrb	r3, [r4, #1]
 800cb88:	2b2a      	cmp	r3, #42	; 0x2a
 800cb8a:	d135      	bne.n	800cbf8 <_svfiprintf_r+0x188>
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	1d1a      	adds	r2, r3, #4
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	9203      	str	r2, [sp, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	bfb8      	it	lt
 800cb98:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb9c:	3402      	adds	r4, #2
 800cb9e:	9305      	str	r3, [sp, #20]
 800cba0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc6c <_svfiprintf_r+0x1fc>
 800cba4:	7821      	ldrb	r1, [r4, #0]
 800cba6:	2203      	movs	r2, #3
 800cba8:	4650      	mov	r0, sl
 800cbaa:	f7f3 fb19 	bl	80001e0 <memchr>
 800cbae:	b140      	cbz	r0, 800cbc2 <_svfiprintf_r+0x152>
 800cbb0:	2340      	movs	r3, #64	; 0x40
 800cbb2:	eba0 000a 	sub.w	r0, r0, sl
 800cbb6:	fa03 f000 	lsl.w	r0, r3, r0
 800cbba:	9b04      	ldr	r3, [sp, #16]
 800cbbc:	4303      	orrs	r3, r0
 800cbbe:	3401      	adds	r4, #1
 800cbc0:	9304      	str	r3, [sp, #16]
 800cbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc6:	4826      	ldr	r0, [pc, #152]	; (800cc60 <_svfiprintf_r+0x1f0>)
 800cbc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbcc:	2206      	movs	r2, #6
 800cbce:	f7f3 fb07 	bl	80001e0 <memchr>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	d038      	beq.n	800cc48 <_svfiprintf_r+0x1d8>
 800cbd6:	4b23      	ldr	r3, [pc, #140]	; (800cc64 <_svfiprintf_r+0x1f4>)
 800cbd8:	bb1b      	cbnz	r3, 800cc22 <_svfiprintf_r+0x1b2>
 800cbda:	9b03      	ldr	r3, [sp, #12]
 800cbdc:	3307      	adds	r3, #7
 800cbde:	f023 0307 	bic.w	r3, r3, #7
 800cbe2:	3308      	adds	r3, #8
 800cbe4:	9303      	str	r3, [sp, #12]
 800cbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe8:	4433      	add	r3, r6
 800cbea:	9309      	str	r3, [sp, #36]	; 0x24
 800cbec:	e767      	b.n	800cabe <_svfiprintf_r+0x4e>
 800cbee:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbf2:	460c      	mov	r4, r1
 800cbf4:	2001      	movs	r0, #1
 800cbf6:	e7a5      	b.n	800cb44 <_svfiprintf_r+0xd4>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	3401      	adds	r4, #1
 800cbfc:	9305      	str	r3, [sp, #20]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	f04f 0c0a 	mov.w	ip, #10
 800cc04:	4620      	mov	r0, r4
 800cc06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc0a:	3a30      	subs	r2, #48	; 0x30
 800cc0c:	2a09      	cmp	r2, #9
 800cc0e:	d903      	bls.n	800cc18 <_svfiprintf_r+0x1a8>
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d0c5      	beq.n	800cba0 <_svfiprintf_r+0x130>
 800cc14:	9105      	str	r1, [sp, #20]
 800cc16:	e7c3      	b.n	800cba0 <_svfiprintf_r+0x130>
 800cc18:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e7f0      	b.n	800cc04 <_svfiprintf_r+0x194>
 800cc22:	ab03      	add	r3, sp, #12
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	462a      	mov	r2, r5
 800cc28:	4b0f      	ldr	r3, [pc, #60]	; (800cc68 <_svfiprintf_r+0x1f8>)
 800cc2a:	a904      	add	r1, sp, #16
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	f7fe f81d 	bl	800ac6c <_printf_float>
 800cc32:	1c42      	adds	r2, r0, #1
 800cc34:	4606      	mov	r6, r0
 800cc36:	d1d6      	bne.n	800cbe6 <_svfiprintf_r+0x176>
 800cc38:	89ab      	ldrh	r3, [r5, #12]
 800cc3a:	065b      	lsls	r3, r3, #25
 800cc3c:	f53f af2c 	bmi.w	800ca98 <_svfiprintf_r+0x28>
 800cc40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc42:	b01d      	add	sp, #116	; 0x74
 800cc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc48:	ab03      	add	r3, sp, #12
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	4b06      	ldr	r3, [pc, #24]	; (800cc68 <_svfiprintf_r+0x1f8>)
 800cc50:	a904      	add	r1, sp, #16
 800cc52:	4638      	mov	r0, r7
 800cc54:	f7fe faae 	bl	800b1b4 <_printf_i>
 800cc58:	e7eb      	b.n	800cc32 <_svfiprintf_r+0x1c2>
 800cc5a:	bf00      	nop
 800cc5c:	0800dbd4 	.word	0x0800dbd4
 800cc60:	0800dbde 	.word	0x0800dbde
 800cc64:	0800ac6d 	.word	0x0800ac6d
 800cc68:	0800c9b9 	.word	0x0800c9b9
 800cc6c:	0800dbda 	.word	0x0800dbda

0800cc70 <_sbrk_r>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	4d06      	ldr	r5, [pc, #24]	; (800cc8c <_sbrk_r+0x1c>)
 800cc74:	2300      	movs	r3, #0
 800cc76:	4604      	mov	r4, r0
 800cc78:	4608      	mov	r0, r1
 800cc7a:	602b      	str	r3, [r5, #0]
 800cc7c:	f7f5 ff90 	bl	8002ba0 <_sbrk>
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d102      	bne.n	800cc8a <_sbrk_r+0x1a>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	b103      	cbz	r3, 800cc8a <_sbrk_r+0x1a>
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	2000887c 	.word	0x2000887c

0800cc90 <__assert_func>:
 800cc90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc92:	4614      	mov	r4, r2
 800cc94:	461a      	mov	r2, r3
 800cc96:	4b09      	ldr	r3, [pc, #36]	; (800ccbc <__assert_func+0x2c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	68d8      	ldr	r0, [r3, #12]
 800cc9e:	b14c      	cbz	r4, 800ccb4 <__assert_func+0x24>
 800cca0:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <__assert_func+0x30>)
 800cca2:	9100      	str	r1, [sp, #0]
 800cca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cca8:	4906      	ldr	r1, [pc, #24]	; (800ccc4 <__assert_func+0x34>)
 800ccaa:	462b      	mov	r3, r5
 800ccac:	f000 f80e 	bl	800cccc <fiprintf>
 800ccb0:	f000 faa4 	bl	800d1fc <abort>
 800ccb4:	4b04      	ldr	r3, [pc, #16]	; (800ccc8 <__assert_func+0x38>)
 800ccb6:	461c      	mov	r4, r3
 800ccb8:	e7f3      	b.n	800cca2 <__assert_func+0x12>
 800ccba:	bf00      	nop
 800ccbc:	20000014 	.word	0x20000014
 800ccc0:	0800dbe5 	.word	0x0800dbe5
 800ccc4:	0800dbf2 	.word	0x0800dbf2
 800ccc8:	0800dc20 	.word	0x0800dc20

0800cccc <fiprintf>:
 800cccc:	b40e      	push	{r1, r2, r3}
 800ccce:	b503      	push	{r0, r1, lr}
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	ab03      	add	r3, sp, #12
 800ccd4:	4805      	ldr	r0, [pc, #20]	; (800ccec <fiprintf+0x20>)
 800ccd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccda:	6800      	ldr	r0, [r0, #0]
 800ccdc:	9301      	str	r3, [sp, #4]
 800ccde:	f000 f88f 	bl	800ce00 <_vfiprintf_r>
 800cce2:	b002      	add	sp, #8
 800cce4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cce8:	b003      	add	sp, #12
 800ccea:	4770      	bx	lr
 800ccec:	20000014 	.word	0x20000014

0800ccf0 <__ascii_mbtowc>:
 800ccf0:	b082      	sub	sp, #8
 800ccf2:	b901      	cbnz	r1, 800ccf6 <__ascii_mbtowc+0x6>
 800ccf4:	a901      	add	r1, sp, #4
 800ccf6:	b142      	cbz	r2, 800cd0a <__ascii_mbtowc+0x1a>
 800ccf8:	b14b      	cbz	r3, 800cd0e <__ascii_mbtowc+0x1e>
 800ccfa:	7813      	ldrb	r3, [r2, #0]
 800ccfc:	600b      	str	r3, [r1, #0]
 800ccfe:	7812      	ldrb	r2, [r2, #0]
 800cd00:	1e10      	subs	r0, r2, #0
 800cd02:	bf18      	it	ne
 800cd04:	2001      	movne	r0, #1
 800cd06:	b002      	add	sp, #8
 800cd08:	4770      	bx	lr
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	e7fb      	b.n	800cd06 <__ascii_mbtowc+0x16>
 800cd0e:	f06f 0001 	mvn.w	r0, #1
 800cd12:	e7f8      	b.n	800cd06 <__ascii_mbtowc+0x16>

0800cd14 <memmove>:
 800cd14:	4288      	cmp	r0, r1
 800cd16:	b510      	push	{r4, lr}
 800cd18:	eb01 0402 	add.w	r4, r1, r2
 800cd1c:	d902      	bls.n	800cd24 <memmove+0x10>
 800cd1e:	4284      	cmp	r4, r0
 800cd20:	4623      	mov	r3, r4
 800cd22:	d807      	bhi.n	800cd34 <memmove+0x20>
 800cd24:	1e43      	subs	r3, r0, #1
 800cd26:	42a1      	cmp	r1, r4
 800cd28:	d008      	beq.n	800cd3c <memmove+0x28>
 800cd2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd32:	e7f8      	b.n	800cd26 <memmove+0x12>
 800cd34:	4402      	add	r2, r0
 800cd36:	4601      	mov	r1, r0
 800cd38:	428a      	cmp	r2, r1
 800cd3a:	d100      	bne.n	800cd3e <memmove+0x2a>
 800cd3c:	bd10      	pop	{r4, pc}
 800cd3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd46:	e7f7      	b.n	800cd38 <memmove+0x24>

0800cd48 <__malloc_lock>:
 800cd48:	4801      	ldr	r0, [pc, #4]	; (800cd50 <__malloc_lock+0x8>)
 800cd4a:	f000 bc17 	b.w	800d57c <__retarget_lock_acquire_recursive>
 800cd4e:	bf00      	nop
 800cd50:	20008884 	.word	0x20008884

0800cd54 <__malloc_unlock>:
 800cd54:	4801      	ldr	r0, [pc, #4]	; (800cd5c <__malloc_unlock+0x8>)
 800cd56:	f000 bc12 	b.w	800d57e <__retarget_lock_release_recursive>
 800cd5a:	bf00      	nop
 800cd5c:	20008884 	.word	0x20008884

0800cd60 <_realloc_r>:
 800cd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd62:	4607      	mov	r7, r0
 800cd64:	4614      	mov	r4, r2
 800cd66:	460e      	mov	r6, r1
 800cd68:	b921      	cbnz	r1, 800cd74 <_realloc_r+0x14>
 800cd6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd6e:	4611      	mov	r1, r2
 800cd70:	f7ff bdc8 	b.w	800c904 <_malloc_r>
 800cd74:	b922      	cbnz	r2, 800cd80 <_realloc_r+0x20>
 800cd76:	f7ff fd75 	bl	800c864 <_free_r>
 800cd7a:	4625      	mov	r5, r4
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd80:	f000 fc62 	bl	800d648 <_malloc_usable_size_r>
 800cd84:	42a0      	cmp	r0, r4
 800cd86:	d20f      	bcs.n	800cda8 <_realloc_r+0x48>
 800cd88:	4621      	mov	r1, r4
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	f7ff fdba 	bl	800c904 <_malloc_r>
 800cd90:	4605      	mov	r5, r0
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d0f2      	beq.n	800cd7c <_realloc_r+0x1c>
 800cd96:	4631      	mov	r1, r6
 800cd98:	4622      	mov	r2, r4
 800cd9a:	f7fd feb1 	bl	800ab00 <memcpy>
 800cd9e:	4631      	mov	r1, r6
 800cda0:	4638      	mov	r0, r7
 800cda2:	f7ff fd5f 	bl	800c864 <_free_r>
 800cda6:	e7e9      	b.n	800cd7c <_realloc_r+0x1c>
 800cda8:	4635      	mov	r5, r6
 800cdaa:	e7e7      	b.n	800cd7c <_realloc_r+0x1c>

0800cdac <__sfputc_r>:
 800cdac:	6893      	ldr	r3, [r2, #8]
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	b410      	push	{r4}
 800cdb4:	6093      	str	r3, [r2, #8]
 800cdb6:	da08      	bge.n	800cdca <__sfputc_r+0x1e>
 800cdb8:	6994      	ldr	r4, [r2, #24]
 800cdba:	42a3      	cmp	r3, r4
 800cdbc:	db01      	blt.n	800cdc2 <__sfputc_r+0x16>
 800cdbe:	290a      	cmp	r1, #10
 800cdc0:	d103      	bne.n	800cdca <__sfputc_r+0x1e>
 800cdc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdc6:	f000 b94b 	b.w	800d060 <__swbuf_r>
 800cdca:	6813      	ldr	r3, [r2, #0]
 800cdcc:	1c58      	adds	r0, r3, #1
 800cdce:	6010      	str	r0, [r2, #0]
 800cdd0:	7019      	strb	r1, [r3, #0]
 800cdd2:	4608      	mov	r0, r1
 800cdd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <__sfputs_r>:
 800cdda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cddc:	4606      	mov	r6, r0
 800cdde:	460f      	mov	r7, r1
 800cde0:	4614      	mov	r4, r2
 800cde2:	18d5      	adds	r5, r2, r3
 800cde4:	42ac      	cmp	r4, r5
 800cde6:	d101      	bne.n	800cdec <__sfputs_r+0x12>
 800cde8:	2000      	movs	r0, #0
 800cdea:	e007      	b.n	800cdfc <__sfputs_r+0x22>
 800cdec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf0:	463a      	mov	r2, r7
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f7ff ffda 	bl	800cdac <__sfputc_r>
 800cdf8:	1c43      	adds	r3, r0, #1
 800cdfa:	d1f3      	bne.n	800cde4 <__sfputs_r+0xa>
 800cdfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce00 <_vfiprintf_r>:
 800ce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce04:	460d      	mov	r5, r1
 800ce06:	b09d      	sub	sp, #116	; 0x74
 800ce08:	4614      	mov	r4, r2
 800ce0a:	4698      	mov	r8, r3
 800ce0c:	4606      	mov	r6, r0
 800ce0e:	b118      	cbz	r0, 800ce18 <_vfiprintf_r+0x18>
 800ce10:	6983      	ldr	r3, [r0, #24]
 800ce12:	b90b      	cbnz	r3, 800ce18 <_vfiprintf_r+0x18>
 800ce14:	f000 fb14 	bl	800d440 <__sinit>
 800ce18:	4b89      	ldr	r3, [pc, #548]	; (800d040 <_vfiprintf_r+0x240>)
 800ce1a:	429d      	cmp	r5, r3
 800ce1c:	d11b      	bne.n	800ce56 <_vfiprintf_r+0x56>
 800ce1e:	6875      	ldr	r5, [r6, #4]
 800ce20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce22:	07d9      	lsls	r1, r3, #31
 800ce24:	d405      	bmi.n	800ce32 <_vfiprintf_r+0x32>
 800ce26:	89ab      	ldrh	r3, [r5, #12]
 800ce28:	059a      	lsls	r2, r3, #22
 800ce2a:	d402      	bmi.n	800ce32 <_vfiprintf_r+0x32>
 800ce2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce2e:	f000 fba5 	bl	800d57c <__retarget_lock_acquire_recursive>
 800ce32:	89ab      	ldrh	r3, [r5, #12]
 800ce34:	071b      	lsls	r3, r3, #28
 800ce36:	d501      	bpl.n	800ce3c <_vfiprintf_r+0x3c>
 800ce38:	692b      	ldr	r3, [r5, #16]
 800ce3a:	b9eb      	cbnz	r3, 800ce78 <_vfiprintf_r+0x78>
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	4630      	mov	r0, r6
 800ce40:	f000 f96e 	bl	800d120 <__swsetup_r>
 800ce44:	b1c0      	cbz	r0, 800ce78 <_vfiprintf_r+0x78>
 800ce46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce48:	07dc      	lsls	r4, r3, #31
 800ce4a:	d50e      	bpl.n	800ce6a <_vfiprintf_r+0x6a>
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	b01d      	add	sp, #116	; 0x74
 800ce52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce56:	4b7b      	ldr	r3, [pc, #492]	; (800d044 <_vfiprintf_r+0x244>)
 800ce58:	429d      	cmp	r5, r3
 800ce5a:	d101      	bne.n	800ce60 <_vfiprintf_r+0x60>
 800ce5c:	68b5      	ldr	r5, [r6, #8]
 800ce5e:	e7df      	b.n	800ce20 <_vfiprintf_r+0x20>
 800ce60:	4b79      	ldr	r3, [pc, #484]	; (800d048 <_vfiprintf_r+0x248>)
 800ce62:	429d      	cmp	r5, r3
 800ce64:	bf08      	it	eq
 800ce66:	68f5      	ldreq	r5, [r6, #12]
 800ce68:	e7da      	b.n	800ce20 <_vfiprintf_r+0x20>
 800ce6a:	89ab      	ldrh	r3, [r5, #12]
 800ce6c:	0598      	lsls	r0, r3, #22
 800ce6e:	d4ed      	bmi.n	800ce4c <_vfiprintf_r+0x4c>
 800ce70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce72:	f000 fb84 	bl	800d57e <__retarget_lock_release_recursive>
 800ce76:	e7e9      	b.n	800ce4c <_vfiprintf_r+0x4c>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce7c:	2320      	movs	r3, #32
 800ce7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce86:	2330      	movs	r3, #48	; 0x30
 800ce88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d04c <_vfiprintf_r+0x24c>
 800ce8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce90:	f04f 0901 	mov.w	r9, #1
 800ce94:	4623      	mov	r3, r4
 800ce96:	469a      	mov	sl, r3
 800ce98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce9c:	b10a      	cbz	r2, 800cea2 <_vfiprintf_r+0xa2>
 800ce9e:	2a25      	cmp	r2, #37	; 0x25
 800cea0:	d1f9      	bne.n	800ce96 <_vfiprintf_r+0x96>
 800cea2:	ebba 0b04 	subs.w	fp, sl, r4
 800cea6:	d00b      	beq.n	800cec0 <_vfiprintf_r+0xc0>
 800cea8:	465b      	mov	r3, fp
 800ceaa:	4622      	mov	r2, r4
 800ceac:	4629      	mov	r1, r5
 800ceae:	4630      	mov	r0, r6
 800ceb0:	f7ff ff93 	bl	800cdda <__sfputs_r>
 800ceb4:	3001      	adds	r0, #1
 800ceb6:	f000 80aa 	beq.w	800d00e <_vfiprintf_r+0x20e>
 800ceba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cebc:	445a      	add	r2, fp
 800cebe:	9209      	str	r2, [sp, #36]	; 0x24
 800cec0:	f89a 3000 	ldrb.w	r3, [sl]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f000 80a2 	beq.w	800d00e <_vfiprintf_r+0x20e>
 800ceca:	2300      	movs	r3, #0
 800cecc:	f04f 32ff 	mov.w	r2, #4294967295
 800ced0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ced4:	f10a 0a01 	add.w	sl, sl, #1
 800ced8:	9304      	str	r3, [sp, #16]
 800ceda:	9307      	str	r3, [sp, #28]
 800cedc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cee0:	931a      	str	r3, [sp, #104]	; 0x68
 800cee2:	4654      	mov	r4, sl
 800cee4:	2205      	movs	r2, #5
 800cee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceea:	4858      	ldr	r0, [pc, #352]	; (800d04c <_vfiprintf_r+0x24c>)
 800ceec:	f7f3 f978 	bl	80001e0 <memchr>
 800cef0:	9a04      	ldr	r2, [sp, #16]
 800cef2:	b9d8      	cbnz	r0, 800cf2c <_vfiprintf_r+0x12c>
 800cef4:	06d1      	lsls	r1, r2, #27
 800cef6:	bf44      	itt	mi
 800cef8:	2320      	movmi	r3, #32
 800cefa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cefe:	0713      	lsls	r3, r2, #28
 800cf00:	bf44      	itt	mi
 800cf02:	232b      	movmi	r3, #43	; 0x2b
 800cf04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf08:	f89a 3000 	ldrb.w	r3, [sl]
 800cf0c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf0e:	d015      	beq.n	800cf3c <_vfiprintf_r+0x13c>
 800cf10:	9a07      	ldr	r2, [sp, #28]
 800cf12:	4654      	mov	r4, sl
 800cf14:	2000      	movs	r0, #0
 800cf16:	f04f 0c0a 	mov.w	ip, #10
 800cf1a:	4621      	mov	r1, r4
 800cf1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf20:	3b30      	subs	r3, #48	; 0x30
 800cf22:	2b09      	cmp	r3, #9
 800cf24:	d94e      	bls.n	800cfc4 <_vfiprintf_r+0x1c4>
 800cf26:	b1b0      	cbz	r0, 800cf56 <_vfiprintf_r+0x156>
 800cf28:	9207      	str	r2, [sp, #28]
 800cf2a:	e014      	b.n	800cf56 <_vfiprintf_r+0x156>
 800cf2c:	eba0 0308 	sub.w	r3, r0, r8
 800cf30:	fa09 f303 	lsl.w	r3, r9, r3
 800cf34:	4313      	orrs	r3, r2
 800cf36:	9304      	str	r3, [sp, #16]
 800cf38:	46a2      	mov	sl, r4
 800cf3a:	e7d2      	b.n	800cee2 <_vfiprintf_r+0xe2>
 800cf3c:	9b03      	ldr	r3, [sp, #12]
 800cf3e:	1d19      	adds	r1, r3, #4
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	9103      	str	r1, [sp, #12]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	bfbb      	ittet	lt
 800cf48:	425b      	neglt	r3, r3
 800cf4a:	f042 0202 	orrlt.w	r2, r2, #2
 800cf4e:	9307      	strge	r3, [sp, #28]
 800cf50:	9307      	strlt	r3, [sp, #28]
 800cf52:	bfb8      	it	lt
 800cf54:	9204      	strlt	r2, [sp, #16]
 800cf56:	7823      	ldrb	r3, [r4, #0]
 800cf58:	2b2e      	cmp	r3, #46	; 0x2e
 800cf5a:	d10c      	bne.n	800cf76 <_vfiprintf_r+0x176>
 800cf5c:	7863      	ldrb	r3, [r4, #1]
 800cf5e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf60:	d135      	bne.n	800cfce <_vfiprintf_r+0x1ce>
 800cf62:	9b03      	ldr	r3, [sp, #12]
 800cf64:	1d1a      	adds	r2, r3, #4
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	9203      	str	r2, [sp, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	bfb8      	it	lt
 800cf6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf72:	3402      	adds	r4, #2
 800cf74:	9305      	str	r3, [sp, #20]
 800cf76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d05c <_vfiprintf_r+0x25c>
 800cf7a:	7821      	ldrb	r1, [r4, #0]
 800cf7c:	2203      	movs	r2, #3
 800cf7e:	4650      	mov	r0, sl
 800cf80:	f7f3 f92e 	bl	80001e0 <memchr>
 800cf84:	b140      	cbz	r0, 800cf98 <_vfiprintf_r+0x198>
 800cf86:	2340      	movs	r3, #64	; 0x40
 800cf88:	eba0 000a 	sub.w	r0, r0, sl
 800cf8c:	fa03 f000 	lsl.w	r0, r3, r0
 800cf90:	9b04      	ldr	r3, [sp, #16]
 800cf92:	4303      	orrs	r3, r0
 800cf94:	3401      	adds	r4, #1
 800cf96:	9304      	str	r3, [sp, #16]
 800cf98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf9c:	482c      	ldr	r0, [pc, #176]	; (800d050 <_vfiprintf_r+0x250>)
 800cf9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfa2:	2206      	movs	r2, #6
 800cfa4:	f7f3 f91c 	bl	80001e0 <memchr>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d03f      	beq.n	800d02c <_vfiprintf_r+0x22c>
 800cfac:	4b29      	ldr	r3, [pc, #164]	; (800d054 <_vfiprintf_r+0x254>)
 800cfae:	bb1b      	cbnz	r3, 800cff8 <_vfiprintf_r+0x1f8>
 800cfb0:	9b03      	ldr	r3, [sp, #12]
 800cfb2:	3307      	adds	r3, #7
 800cfb4:	f023 0307 	bic.w	r3, r3, #7
 800cfb8:	3308      	adds	r3, #8
 800cfba:	9303      	str	r3, [sp, #12]
 800cfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfbe:	443b      	add	r3, r7
 800cfc0:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc2:	e767      	b.n	800ce94 <_vfiprintf_r+0x94>
 800cfc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfc8:	460c      	mov	r4, r1
 800cfca:	2001      	movs	r0, #1
 800cfcc:	e7a5      	b.n	800cf1a <_vfiprintf_r+0x11a>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	3401      	adds	r4, #1
 800cfd2:	9305      	str	r3, [sp, #20]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	f04f 0c0a 	mov.w	ip, #10
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfe0:	3a30      	subs	r2, #48	; 0x30
 800cfe2:	2a09      	cmp	r2, #9
 800cfe4:	d903      	bls.n	800cfee <_vfiprintf_r+0x1ee>
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d0c5      	beq.n	800cf76 <_vfiprintf_r+0x176>
 800cfea:	9105      	str	r1, [sp, #20]
 800cfec:	e7c3      	b.n	800cf76 <_vfiprintf_r+0x176>
 800cfee:	fb0c 2101 	mla	r1, ip, r1, r2
 800cff2:	4604      	mov	r4, r0
 800cff4:	2301      	movs	r3, #1
 800cff6:	e7f0      	b.n	800cfda <_vfiprintf_r+0x1da>
 800cff8:	ab03      	add	r3, sp, #12
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	462a      	mov	r2, r5
 800cffe:	4b16      	ldr	r3, [pc, #88]	; (800d058 <_vfiprintf_r+0x258>)
 800d000:	a904      	add	r1, sp, #16
 800d002:	4630      	mov	r0, r6
 800d004:	f7fd fe32 	bl	800ac6c <_printf_float>
 800d008:	4607      	mov	r7, r0
 800d00a:	1c78      	adds	r0, r7, #1
 800d00c:	d1d6      	bne.n	800cfbc <_vfiprintf_r+0x1bc>
 800d00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d010:	07d9      	lsls	r1, r3, #31
 800d012:	d405      	bmi.n	800d020 <_vfiprintf_r+0x220>
 800d014:	89ab      	ldrh	r3, [r5, #12]
 800d016:	059a      	lsls	r2, r3, #22
 800d018:	d402      	bmi.n	800d020 <_vfiprintf_r+0x220>
 800d01a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d01c:	f000 faaf 	bl	800d57e <__retarget_lock_release_recursive>
 800d020:	89ab      	ldrh	r3, [r5, #12]
 800d022:	065b      	lsls	r3, r3, #25
 800d024:	f53f af12 	bmi.w	800ce4c <_vfiprintf_r+0x4c>
 800d028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d02a:	e711      	b.n	800ce50 <_vfiprintf_r+0x50>
 800d02c:	ab03      	add	r3, sp, #12
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	462a      	mov	r2, r5
 800d032:	4b09      	ldr	r3, [pc, #36]	; (800d058 <_vfiprintf_r+0x258>)
 800d034:	a904      	add	r1, sp, #16
 800d036:	4630      	mov	r0, r6
 800d038:	f7fe f8bc 	bl	800b1b4 <_printf_i>
 800d03c:	e7e4      	b.n	800d008 <_vfiprintf_r+0x208>
 800d03e:	bf00      	nop
 800d040:	0800dd4c 	.word	0x0800dd4c
 800d044:	0800dd6c 	.word	0x0800dd6c
 800d048:	0800dd2c 	.word	0x0800dd2c
 800d04c:	0800dbd4 	.word	0x0800dbd4
 800d050:	0800dbde 	.word	0x0800dbde
 800d054:	0800ac6d 	.word	0x0800ac6d
 800d058:	0800cddb 	.word	0x0800cddb
 800d05c:	0800dbda 	.word	0x0800dbda

0800d060 <__swbuf_r>:
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d062:	460e      	mov	r6, r1
 800d064:	4614      	mov	r4, r2
 800d066:	4605      	mov	r5, r0
 800d068:	b118      	cbz	r0, 800d072 <__swbuf_r+0x12>
 800d06a:	6983      	ldr	r3, [r0, #24]
 800d06c:	b90b      	cbnz	r3, 800d072 <__swbuf_r+0x12>
 800d06e:	f000 f9e7 	bl	800d440 <__sinit>
 800d072:	4b21      	ldr	r3, [pc, #132]	; (800d0f8 <__swbuf_r+0x98>)
 800d074:	429c      	cmp	r4, r3
 800d076:	d12b      	bne.n	800d0d0 <__swbuf_r+0x70>
 800d078:	686c      	ldr	r4, [r5, #4]
 800d07a:	69a3      	ldr	r3, [r4, #24]
 800d07c:	60a3      	str	r3, [r4, #8]
 800d07e:	89a3      	ldrh	r3, [r4, #12]
 800d080:	071a      	lsls	r2, r3, #28
 800d082:	d52f      	bpl.n	800d0e4 <__swbuf_r+0x84>
 800d084:	6923      	ldr	r3, [r4, #16]
 800d086:	b36b      	cbz	r3, 800d0e4 <__swbuf_r+0x84>
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	6820      	ldr	r0, [r4, #0]
 800d08c:	1ac0      	subs	r0, r0, r3
 800d08e:	6963      	ldr	r3, [r4, #20]
 800d090:	b2f6      	uxtb	r6, r6
 800d092:	4283      	cmp	r3, r0
 800d094:	4637      	mov	r7, r6
 800d096:	dc04      	bgt.n	800d0a2 <__swbuf_r+0x42>
 800d098:	4621      	mov	r1, r4
 800d09a:	4628      	mov	r0, r5
 800d09c:	f000 f93c 	bl	800d318 <_fflush_r>
 800d0a0:	bb30      	cbnz	r0, 800d0f0 <__swbuf_r+0x90>
 800d0a2:	68a3      	ldr	r3, [r4, #8]
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	60a3      	str	r3, [r4, #8]
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	1c5a      	adds	r2, r3, #1
 800d0ac:	6022      	str	r2, [r4, #0]
 800d0ae:	701e      	strb	r6, [r3, #0]
 800d0b0:	6963      	ldr	r3, [r4, #20]
 800d0b2:	3001      	adds	r0, #1
 800d0b4:	4283      	cmp	r3, r0
 800d0b6:	d004      	beq.n	800d0c2 <__swbuf_r+0x62>
 800d0b8:	89a3      	ldrh	r3, [r4, #12]
 800d0ba:	07db      	lsls	r3, r3, #31
 800d0bc:	d506      	bpl.n	800d0cc <__swbuf_r+0x6c>
 800d0be:	2e0a      	cmp	r6, #10
 800d0c0:	d104      	bne.n	800d0cc <__swbuf_r+0x6c>
 800d0c2:	4621      	mov	r1, r4
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	f000 f927 	bl	800d318 <_fflush_r>
 800d0ca:	b988      	cbnz	r0, 800d0f0 <__swbuf_r+0x90>
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0d0:	4b0a      	ldr	r3, [pc, #40]	; (800d0fc <__swbuf_r+0x9c>)
 800d0d2:	429c      	cmp	r4, r3
 800d0d4:	d101      	bne.n	800d0da <__swbuf_r+0x7a>
 800d0d6:	68ac      	ldr	r4, [r5, #8]
 800d0d8:	e7cf      	b.n	800d07a <__swbuf_r+0x1a>
 800d0da:	4b09      	ldr	r3, [pc, #36]	; (800d100 <__swbuf_r+0xa0>)
 800d0dc:	429c      	cmp	r4, r3
 800d0de:	bf08      	it	eq
 800d0e0:	68ec      	ldreq	r4, [r5, #12]
 800d0e2:	e7ca      	b.n	800d07a <__swbuf_r+0x1a>
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f000 f81a 	bl	800d120 <__swsetup_r>
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d0cb      	beq.n	800d088 <__swbuf_r+0x28>
 800d0f0:	f04f 37ff 	mov.w	r7, #4294967295
 800d0f4:	e7ea      	b.n	800d0cc <__swbuf_r+0x6c>
 800d0f6:	bf00      	nop
 800d0f8:	0800dd4c 	.word	0x0800dd4c
 800d0fc:	0800dd6c 	.word	0x0800dd6c
 800d100:	0800dd2c 	.word	0x0800dd2c

0800d104 <__ascii_wctomb>:
 800d104:	b149      	cbz	r1, 800d11a <__ascii_wctomb+0x16>
 800d106:	2aff      	cmp	r2, #255	; 0xff
 800d108:	bf85      	ittet	hi
 800d10a:	238a      	movhi	r3, #138	; 0x8a
 800d10c:	6003      	strhi	r3, [r0, #0]
 800d10e:	700a      	strbls	r2, [r1, #0]
 800d110:	f04f 30ff 	movhi.w	r0, #4294967295
 800d114:	bf98      	it	ls
 800d116:	2001      	movls	r0, #1
 800d118:	4770      	bx	lr
 800d11a:	4608      	mov	r0, r1
 800d11c:	4770      	bx	lr
	...

0800d120 <__swsetup_r>:
 800d120:	4b32      	ldr	r3, [pc, #200]	; (800d1ec <__swsetup_r+0xcc>)
 800d122:	b570      	push	{r4, r5, r6, lr}
 800d124:	681d      	ldr	r5, [r3, #0]
 800d126:	4606      	mov	r6, r0
 800d128:	460c      	mov	r4, r1
 800d12a:	b125      	cbz	r5, 800d136 <__swsetup_r+0x16>
 800d12c:	69ab      	ldr	r3, [r5, #24]
 800d12e:	b913      	cbnz	r3, 800d136 <__swsetup_r+0x16>
 800d130:	4628      	mov	r0, r5
 800d132:	f000 f985 	bl	800d440 <__sinit>
 800d136:	4b2e      	ldr	r3, [pc, #184]	; (800d1f0 <__swsetup_r+0xd0>)
 800d138:	429c      	cmp	r4, r3
 800d13a:	d10f      	bne.n	800d15c <__swsetup_r+0x3c>
 800d13c:	686c      	ldr	r4, [r5, #4]
 800d13e:	89a3      	ldrh	r3, [r4, #12]
 800d140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d144:	0719      	lsls	r1, r3, #28
 800d146:	d42c      	bmi.n	800d1a2 <__swsetup_r+0x82>
 800d148:	06dd      	lsls	r5, r3, #27
 800d14a:	d411      	bmi.n	800d170 <__swsetup_r+0x50>
 800d14c:	2309      	movs	r3, #9
 800d14e:	6033      	str	r3, [r6, #0]
 800d150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d154:	81a3      	strh	r3, [r4, #12]
 800d156:	f04f 30ff 	mov.w	r0, #4294967295
 800d15a:	e03e      	b.n	800d1da <__swsetup_r+0xba>
 800d15c:	4b25      	ldr	r3, [pc, #148]	; (800d1f4 <__swsetup_r+0xd4>)
 800d15e:	429c      	cmp	r4, r3
 800d160:	d101      	bne.n	800d166 <__swsetup_r+0x46>
 800d162:	68ac      	ldr	r4, [r5, #8]
 800d164:	e7eb      	b.n	800d13e <__swsetup_r+0x1e>
 800d166:	4b24      	ldr	r3, [pc, #144]	; (800d1f8 <__swsetup_r+0xd8>)
 800d168:	429c      	cmp	r4, r3
 800d16a:	bf08      	it	eq
 800d16c:	68ec      	ldreq	r4, [r5, #12]
 800d16e:	e7e6      	b.n	800d13e <__swsetup_r+0x1e>
 800d170:	0758      	lsls	r0, r3, #29
 800d172:	d512      	bpl.n	800d19a <__swsetup_r+0x7a>
 800d174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d176:	b141      	cbz	r1, 800d18a <__swsetup_r+0x6a>
 800d178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d17c:	4299      	cmp	r1, r3
 800d17e:	d002      	beq.n	800d186 <__swsetup_r+0x66>
 800d180:	4630      	mov	r0, r6
 800d182:	f7ff fb6f 	bl	800c864 <_free_r>
 800d186:	2300      	movs	r3, #0
 800d188:	6363      	str	r3, [r4, #52]	; 0x34
 800d18a:	89a3      	ldrh	r3, [r4, #12]
 800d18c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d190:	81a3      	strh	r3, [r4, #12]
 800d192:	2300      	movs	r3, #0
 800d194:	6063      	str	r3, [r4, #4]
 800d196:	6923      	ldr	r3, [r4, #16]
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	f043 0308 	orr.w	r3, r3, #8
 800d1a0:	81a3      	strh	r3, [r4, #12]
 800d1a2:	6923      	ldr	r3, [r4, #16]
 800d1a4:	b94b      	cbnz	r3, 800d1ba <__swsetup_r+0x9a>
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d1ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1b0:	d003      	beq.n	800d1ba <__swsetup_r+0x9a>
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	f000 fa07 	bl	800d5c8 <__smakebuf_r>
 800d1ba:	89a0      	ldrh	r0, [r4, #12]
 800d1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1c0:	f010 0301 	ands.w	r3, r0, #1
 800d1c4:	d00a      	beq.n	800d1dc <__swsetup_r+0xbc>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60a3      	str	r3, [r4, #8]
 800d1ca:	6963      	ldr	r3, [r4, #20]
 800d1cc:	425b      	negs	r3, r3
 800d1ce:	61a3      	str	r3, [r4, #24]
 800d1d0:	6923      	ldr	r3, [r4, #16]
 800d1d2:	b943      	cbnz	r3, 800d1e6 <__swsetup_r+0xc6>
 800d1d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d1d8:	d1ba      	bne.n	800d150 <__swsetup_r+0x30>
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	0781      	lsls	r1, r0, #30
 800d1de:	bf58      	it	pl
 800d1e0:	6963      	ldrpl	r3, [r4, #20]
 800d1e2:	60a3      	str	r3, [r4, #8]
 800d1e4:	e7f4      	b.n	800d1d0 <__swsetup_r+0xb0>
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	e7f7      	b.n	800d1da <__swsetup_r+0xba>
 800d1ea:	bf00      	nop
 800d1ec:	20000014 	.word	0x20000014
 800d1f0:	0800dd4c 	.word	0x0800dd4c
 800d1f4:	0800dd6c 	.word	0x0800dd6c
 800d1f8:	0800dd2c 	.word	0x0800dd2c

0800d1fc <abort>:
 800d1fc:	b508      	push	{r3, lr}
 800d1fe:	2006      	movs	r0, #6
 800d200:	f000 fa52 	bl	800d6a8 <raise>
 800d204:	2001      	movs	r0, #1
 800d206:	f7f5 fc53 	bl	8002ab0 <_exit>
	...

0800d20c <__sflush_r>:
 800d20c:	898a      	ldrh	r2, [r1, #12]
 800d20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d212:	4605      	mov	r5, r0
 800d214:	0710      	lsls	r0, r2, #28
 800d216:	460c      	mov	r4, r1
 800d218:	d458      	bmi.n	800d2cc <__sflush_r+0xc0>
 800d21a:	684b      	ldr	r3, [r1, #4]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	dc05      	bgt.n	800d22c <__sflush_r+0x20>
 800d220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d222:	2b00      	cmp	r3, #0
 800d224:	dc02      	bgt.n	800d22c <__sflush_r+0x20>
 800d226:	2000      	movs	r0, #0
 800d228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d22c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d22e:	2e00      	cmp	r6, #0
 800d230:	d0f9      	beq.n	800d226 <__sflush_r+0x1a>
 800d232:	2300      	movs	r3, #0
 800d234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d238:	682f      	ldr	r7, [r5, #0]
 800d23a:	602b      	str	r3, [r5, #0]
 800d23c:	d032      	beq.n	800d2a4 <__sflush_r+0x98>
 800d23e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	075a      	lsls	r2, r3, #29
 800d244:	d505      	bpl.n	800d252 <__sflush_r+0x46>
 800d246:	6863      	ldr	r3, [r4, #4]
 800d248:	1ac0      	subs	r0, r0, r3
 800d24a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d24c:	b10b      	cbz	r3, 800d252 <__sflush_r+0x46>
 800d24e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d250:	1ac0      	subs	r0, r0, r3
 800d252:	2300      	movs	r3, #0
 800d254:	4602      	mov	r2, r0
 800d256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d258:	6a21      	ldr	r1, [r4, #32]
 800d25a:	4628      	mov	r0, r5
 800d25c:	47b0      	blx	r6
 800d25e:	1c43      	adds	r3, r0, #1
 800d260:	89a3      	ldrh	r3, [r4, #12]
 800d262:	d106      	bne.n	800d272 <__sflush_r+0x66>
 800d264:	6829      	ldr	r1, [r5, #0]
 800d266:	291d      	cmp	r1, #29
 800d268:	d82c      	bhi.n	800d2c4 <__sflush_r+0xb8>
 800d26a:	4a2a      	ldr	r2, [pc, #168]	; (800d314 <__sflush_r+0x108>)
 800d26c:	40ca      	lsrs	r2, r1
 800d26e:	07d6      	lsls	r6, r2, #31
 800d270:	d528      	bpl.n	800d2c4 <__sflush_r+0xb8>
 800d272:	2200      	movs	r2, #0
 800d274:	6062      	str	r2, [r4, #4]
 800d276:	04d9      	lsls	r1, r3, #19
 800d278:	6922      	ldr	r2, [r4, #16]
 800d27a:	6022      	str	r2, [r4, #0]
 800d27c:	d504      	bpl.n	800d288 <__sflush_r+0x7c>
 800d27e:	1c42      	adds	r2, r0, #1
 800d280:	d101      	bne.n	800d286 <__sflush_r+0x7a>
 800d282:	682b      	ldr	r3, [r5, #0]
 800d284:	b903      	cbnz	r3, 800d288 <__sflush_r+0x7c>
 800d286:	6560      	str	r0, [r4, #84]	; 0x54
 800d288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d28a:	602f      	str	r7, [r5, #0]
 800d28c:	2900      	cmp	r1, #0
 800d28e:	d0ca      	beq.n	800d226 <__sflush_r+0x1a>
 800d290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d294:	4299      	cmp	r1, r3
 800d296:	d002      	beq.n	800d29e <__sflush_r+0x92>
 800d298:	4628      	mov	r0, r5
 800d29a:	f7ff fae3 	bl	800c864 <_free_r>
 800d29e:	2000      	movs	r0, #0
 800d2a0:	6360      	str	r0, [r4, #52]	; 0x34
 800d2a2:	e7c1      	b.n	800d228 <__sflush_r+0x1c>
 800d2a4:	6a21      	ldr	r1, [r4, #32]
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	47b0      	blx	r6
 800d2ac:	1c41      	adds	r1, r0, #1
 800d2ae:	d1c7      	bne.n	800d240 <__sflush_r+0x34>
 800d2b0:	682b      	ldr	r3, [r5, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d0c4      	beq.n	800d240 <__sflush_r+0x34>
 800d2b6:	2b1d      	cmp	r3, #29
 800d2b8:	d001      	beq.n	800d2be <__sflush_r+0xb2>
 800d2ba:	2b16      	cmp	r3, #22
 800d2bc:	d101      	bne.n	800d2c2 <__sflush_r+0xb6>
 800d2be:	602f      	str	r7, [r5, #0]
 800d2c0:	e7b1      	b.n	800d226 <__sflush_r+0x1a>
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c8:	81a3      	strh	r3, [r4, #12]
 800d2ca:	e7ad      	b.n	800d228 <__sflush_r+0x1c>
 800d2cc:	690f      	ldr	r7, [r1, #16]
 800d2ce:	2f00      	cmp	r7, #0
 800d2d0:	d0a9      	beq.n	800d226 <__sflush_r+0x1a>
 800d2d2:	0793      	lsls	r3, r2, #30
 800d2d4:	680e      	ldr	r6, [r1, #0]
 800d2d6:	bf08      	it	eq
 800d2d8:	694b      	ldreq	r3, [r1, #20]
 800d2da:	600f      	str	r7, [r1, #0]
 800d2dc:	bf18      	it	ne
 800d2de:	2300      	movne	r3, #0
 800d2e0:	eba6 0807 	sub.w	r8, r6, r7
 800d2e4:	608b      	str	r3, [r1, #8]
 800d2e6:	f1b8 0f00 	cmp.w	r8, #0
 800d2ea:	dd9c      	ble.n	800d226 <__sflush_r+0x1a>
 800d2ec:	6a21      	ldr	r1, [r4, #32]
 800d2ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2f0:	4643      	mov	r3, r8
 800d2f2:	463a      	mov	r2, r7
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	47b0      	blx	r6
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	dc06      	bgt.n	800d30a <__sflush_r+0xfe>
 800d2fc:	89a3      	ldrh	r3, [r4, #12]
 800d2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d302:	81a3      	strh	r3, [r4, #12]
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	e78e      	b.n	800d228 <__sflush_r+0x1c>
 800d30a:	4407      	add	r7, r0
 800d30c:	eba8 0800 	sub.w	r8, r8, r0
 800d310:	e7e9      	b.n	800d2e6 <__sflush_r+0xda>
 800d312:	bf00      	nop
 800d314:	20400001 	.word	0x20400001

0800d318 <_fflush_r>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	690b      	ldr	r3, [r1, #16]
 800d31c:	4605      	mov	r5, r0
 800d31e:	460c      	mov	r4, r1
 800d320:	b913      	cbnz	r3, 800d328 <_fflush_r+0x10>
 800d322:	2500      	movs	r5, #0
 800d324:	4628      	mov	r0, r5
 800d326:	bd38      	pop	{r3, r4, r5, pc}
 800d328:	b118      	cbz	r0, 800d332 <_fflush_r+0x1a>
 800d32a:	6983      	ldr	r3, [r0, #24]
 800d32c:	b90b      	cbnz	r3, 800d332 <_fflush_r+0x1a>
 800d32e:	f000 f887 	bl	800d440 <__sinit>
 800d332:	4b14      	ldr	r3, [pc, #80]	; (800d384 <_fflush_r+0x6c>)
 800d334:	429c      	cmp	r4, r3
 800d336:	d11b      	bne.n	800d370 <_fflush_r+0x58>
 800d338:	686c      	ldr	r4, [r5, #4]
 800d33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d0ef      	beq.n	800d322 <_fflush_r+0xa>
 800d342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d344:	07d0      	lsls	r0, r2, #31
 800d346:	d404      	bmi.n	800d352 <_fflush_r+0x3a>
 800d348:	0599      	lsls	r1, r3, #22
 800d34a:	d402      	bmi.n	800d352 <_fflush_r+0x3a>
 800d34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d34e:	f000 f915 	bl	800d57c <__retarget_lock_acquire_recursive>
 800d352:	4628      	mov	r0, r5
 800d354:	4621      	mov	r1, r4
 800d356:	f7ff ff59 	bl	800d20c <__sflush_r>
 800d35a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d35c:	07da      	lsls	r2, r3, #31
 800d35e:	4605      	mov	r5, r0
 800d360:	d4e0      	bmi.n	800d324 <_fflush_r+0xc>
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	059b      	lsls	r3, r3, #22
 800d366:	d4dd      	bmi.n	800d324 <_fflush_r+0xc>
 800d368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d36a:	f000 f908 	bl	800d57e <__retarget_lock_release_recursive>
 800d36e:	e7d9      	b.n	800d324 <_fflush_r+0xc>
 800d370:	4b05      	ldr	r3, [pc, #20]	; (800d388 <_fflush_r+0x70>)
 800d372:	429c      	cmp	r4, r3
 800d374:	d101      	bne.n	800d37a <_fflush_r+0x62>
 800d376:	68ac      	ldr	r4, [r5, #8]
 800d378:	e7df      	b.n	800d33a <_fflush_r+0x22>
 800d37a:	4b04      	ldr	r3, [pc, #16]	; (800d38c <_fflush_r+0x74>)
 800d37c:	429c      	cmp	r4, r3
 800d37e:	bf08      	it	eq
 800d380:	68ec      	ldreq	r4, [r5, #12]
 800d382:	e7da      	b.n	800d33a <_fflush_r+0x22>
 800d384:	0800dd4c 	.word	0x0800dd4c
 800d388:	0800dd6c 	.word	0x0800dd6c
 800d38c:	0800dd2c 	.word	0x0800dd2c

0800d390 <std>:
 800d390:	2300      	movs	r3, #0
 800d392:	b510      	push	{r4, lr}
 800d394:	4604      	mov	r4, r0
 800d396:	e9c0 3300 	strd	r3, r3, [r0]
 800d39a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d39e:	6083      	str	r3, [r0, #8]
 800d3a0:	8181      	strh	r1, [r0, #12]
 800d3a2:	6643      	str	r3, [r0, #100]	; 0x64
 800d3a4:	81c2      	strh	r2, [r0, #14]
 800d3a6:	6183      	str	r3, [r0, #24]
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	2208      	movs	r2, #8
 800d3ac:	305c      	adds	r0, #92	; 0x5c
 800d3ae:	f7fd fbb5 	bl	800ab1c <memset>
 800d3b2:	4b05      	ldr	r3, [pc, #20]	; (800d3c8 <std+0x38>)
 800d3b4:	6263      	str	r3, [r4, #36]	; 0x24
 800d3b6:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <std+0x3c>)
 800d3b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3ba:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <std+0x40>)
 800d3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3be:	4b05      	ldr	r3, [pc, #20]	; (800d3d4 <std+0x44>)
 800d3c0:	6224      	str	r4, [r4, #32]
 800d3c2:	6323      	str	r3, [r4, #48]	; 0x30
 800d3c4:	bd10      	pop	{r4, pc}
 800d3c6:	bf00      	nop
 800d3c8:	0800d6e1 	.word	0x0800d6e1
 800d3cc:	0800d703 	.word	0x0800d703
 800d3d0:	0800d73b 	.word	0x0800d73b
 800d3d4:	0800d75f 	.word	0x0800d75f

0800d3d8 <_cleanup_r>:
 800d3d8:	4901      	ldr	r1, [pc, #4]	; (800d3e0 <_cleanup_r+0x8>)
 800d3da:	f000 b8af 	b.w	800d53c <_fwalk_reent>
 800d3de:	bf00      	nop
 800d3e0:	0800d319 	.word	0x0800d319

0800d3e4 <__sfmoreglue>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	1e4a      	subs	r2, r1, #1
 800d3e8:	2568      	movs	r5, #104	; 0x68
 800d3ea:	4355      	muls	r5, r2
 800d3ec:	460e      	mov	r6, r1
 800d3ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d3f2:	f7ff fa87 	bl	800c904 <_malloc_r>
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	b140      	cbz	r0, 800d40c <__sfmoreglue+0x28>
 800d3fa:	2100      	movs	r1, #0
 800d3fc:	e9c0 1600 	strd	r1, r6, [r0]
 800d400:	300c      	adds	r0, #12
 800d402:	60a0      	str	r0, [r4, #8]
 800d404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d408:	f7fd fb88 	bl	800ab1c <memset>
 800d40c:	4620      	mov	r0, r4
 800d40e:	bd70      	pop	{r4, r5, r6, pc}

0800d410 <__sfp_lock_acquire>:
 800d410:	4801      	ldr	r0, [pc, #4]	; (800d418 <__sfp_lock_acquire+0x8>)
 800d412:	f000 b8b3 	b.w	800d57c <__retarget_lock_acquire_recursive>
 800d416:	bf00      	nop
 800d418:	20008888 	.word	0x20008888

0800d41c <__sfp_lock_release>:
 800d41c:	4801      	ldr	r0, [pc, #4]	; (800d424 <__sfp_lock_release+0x8>)
 800d41e:	f000 b8ae 	b.w	800d57e <__retarget_lock_release_recursive>
 800d422:	bf00      	nop
 800d424:	20008888 	.word	0x20008888

0800d428 <__sinit_lock_acquire>:
 800d428:	4801      	ldr	r0, [pc, #4]	; (800d430 <__sinit_lock_acquire+0x8>)
 800d42a:	f000 b8a7 	b.w	800d57c <__retarget_lock_acquire_recursive>
 800d42e:	bf00      	nop
 800d430:	20008883 	.word	0x20008883

0800d434 <__sinit_lock_release>:
 800d434:	4801      	ldr	r0, [pc, #4]	; (800d43c <__sinit_lock_release+0x8>)
 800d436:	f000 b8a2 	b.w	800d57e <__retarget_lock_release_recursive>
 800d43a:	bf00      	nop
 800d43c:	20008883 	.word	0x20008883

0800d440 <__sinit>:
 800d440:	b510      	push	{r4, lr}
 800d442:	4604      	mov	r4, r0
 800d444:	f7ff fff0 	bl	800d428 <__sinit_lock_acquire>
 800d448:	69a3      	ldr	r3, [r4, #24]
 800d44a:	b11b      	cbz	r3, 800d454 <__sinit+0x14>
 800d44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d450:	f7ff bff0 	b.w	800d434 <__sinit_lock_release>
 800d454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d458:	6523      	str	r3, [r4, #80]	; 0x50
 800d45a:	4b13      	ldr	r3, [pc, #76]	; (800d4a8 <__sinit+0x68>)
 800d45c:	4a13      	ldr	r2, [pc, #76]	; (800d4ac <__sinit+0x6c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	62a2      	str	r2, [r4, #40]	; 0x28
 800d462:	42a3      	cmp	r3, r4
 800d464:	bf04      	itt	eq
 800d466:	2301      	moveq	r3, #1
 800d468:	61a3      	streq	r3, [r4, #24]
 800d46a:	4620      	mov	r0, r4
 800d46c:	f000 f820 	bl	800d4b0 <__sfp>
 800d470:	6060      	str	r0, [r4, #4]
 800d472:	4620      	mov	r0, r4
 800d474:	f000 f81c 	bl	800d4b0 <__sfp>
 800d478:	60a0      	str	r0, [r4, #8]
 800d47a:	4620      	mov	r0, r4
 800d47c:	f000 f818 	bl	800d4b0 <__sfp>
 800d480:	2200      	movs	r2, #0
 800d482:	60e0      	str	r0, [r4, #12]
 800d484:	2104      	movs	r1, #4
 800d486:	6860      	ldr	r0, [r4, #4]
 800d488:	f7ff ff82 	bl	800d390 <std>
 800d48c:	68a0      	ldr	r0, [r4, #8]
 800d48e:	2201      	movs	r2, #1
 800d490:	2109      	movs	r1, #9
 800d492:	f7ff ff7d 	bl	800d390 <std>
 800d496:	68e0      	ldr	r0, [r4, #12]
 800d498:	2202      	movs	r2, #2
 800d49a:	2112      	movs	r1, #18
 800d49c:	f7ff ff78 	bl	800d390 <std>
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	61a3      	str	r3, [r4, #24]
 800d4a4:	e7d2      	b.n	800d44c <__sinit+0xc>
 800d4a6:	bf00      	nop
 800d4a8:	0800d9ac 	.word	0x0800d9ac
 800d4ac:	0800d3d9 	.word	0x0800d3d9

0800d4b0 <__sfp>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	4607      	mov	r7, r0
 800d4b4:	f7ff ffac 	bl	800d410 <__sfp_lock_acquire>
 800d4b8:	4b1e      	ldr	r3, [pc, #120]	; (800d534 <__sfp+0x84>)
 800d4ba:	681e      	ldr	r6, [r3, #0]
 800d4bc:	69b3      	ldr	r3, [r6, #24]
 800d4be:	b913      	cbnz	r3, 800d4c6 <__sfp+0x16>
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	f7ff ffbd 	bl	800d440 <__sinit>
 800d4c6:	3648      	adds	r6, #72	; 0x48
 800d4c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	d503      	bpl.n	800d4d8 <__sfp+0x28>
 800d4d0:	6833      	ldr	r3, [r6, #0]
 800d4d2:	b30b      	cbz	r3, 800d518 <__sfp+0x68>
 800d4d4:	6836      	ldr	r6, [r6, #0]
 800d4d6:	e7f7      	b.n	800d4c8 <__sfp+0x18>
 800d4d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4dc:	b9d5      	cbnz	r5, 800d514 <__sfp+0x64>
 800d4de:	4b16      	ldr	r3, [pc, #88]	; (800d538 <__sfp+0x88>)
 800d4e0:	60e3      	str	r3, [r4, #12]
 800d4e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4e6:	6665      	str	r5, [r4, #100]	; 0x64
 800d4e8:	f000 f847 	bl	800d57a <__retarget_lock_init_recursive>
 800d4ec:	f7ff ff96 	bl	800d41c <__sfp_lock_release>
 800d4f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d4f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d4f8:	6025      	str	r5, [r4, #0]
 800d4fa:	61a5      	str	r5, [r4, #24]
 800d4fc:	2208      	movs	r2, #8
 800d4fe:	4629      	mov	r1, r5
 800d500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d504:	f7fd fb0a 	bl	800ab1c <memset>
 800d508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d50c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d510:	4620      	mov	r0, r4
 800d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d514:	3468      	adds	r4, #104	; 0x68
 800d516:	e7d9      	b.n	800d4cc <__sfp+0x1c>
 800d518:	2104      	movs	r1, #4
 800d51a:	4638      	mov	r0, r7
 800d51c:	f7ff ff62 	bl	800d3e4 <__sfmoreglue>
 800d520:	4604      	mov	r4, r0
 800d522:	6030      	str	r0, [r6, #0]
 800d524:	2800      	cmp	r0, #0
 800d526:	d1d5      	bne.n	800d4d4 <__sfp+0x24>
 800d528:	f7ff ff78 	bl	800d41c <__sfp_lock_release>
 800d52c:	230c      	movs	r3, #12
 800d52e:	603b      	str	r3, [r7, #0]
 800d530:	e7ee      	b.n	800d510 <__sfp+0x60>
 800d532:	bf00      	nop
 800d534:	0800d9ac 	.word	0x0800d9ac
 800d538:	ffff0001 	.word	0xffff0001

0800d53c <_fwalk_reent>:
 800d53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d540:	4606      	mov	r6, r0
 800d542:	4688      	mov	r8, r1
 800d544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d548:	2700      	movs	r7, #0
 800d54a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d54e:	f1b9 0901 	subs.w	r9, r9, #1
 800d552:	d505      	bpl.n	800d560 <_fwalk_reent+0x24>
 800d554:	6824      	ldr	r4, [r4, #0]
 800d556:	2c00      	cmp	r4, #0
 800d558:	d1f7      	bne.n	800d54a <_fwalk_reent+0xe>
 800d55a:	4638      	mov	r0, r7
 800d55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d560:	89ab      	ldrh	r3, [r5, #12]
 800d562:	2b01      	cmp	r3, #1
 800d564:	d907      	bls.n	800d576 <_fwalk_reent+0x3a>
 800d566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d56a:	3301      	adds	r3, #1
 800d56c:	d003      	beq.n	800d576 <_fwalk_reent+0x3a>
 800d56e:	4629      	mov	r1, r5
 800d570:	4630      	mov	r0, r6
 800d572:	47c0      	blx	r8
 800d574:	4307      	orrs	r7, r0
 800d576:	3568      	adds	r5, #104	; 0x68
 800d578:	e7e9      	b.n	800d54e <_fwalk_reent+0x12>

0800d57a <__retarget_lock_init_recursive>:
 800d57a:	4770      	bx	lr

0800d57c <__retarget_lock_acquire_recursive>:
 800d57c:	4770      	bx	lr

0800d57e <__retarget_lock_release_recursive>:
 800d57e:	4770      	bx	lr

0800d580 <__swhatbuf_r>:
 800d580:	b570      	push	{r4, r5, r6, lr}
 800d582:	460e      	mov	r6, r1
 800d584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d588:	2900      	cmp	r1, #0
 800d58a:	b096      	sub	sp, #88	; 0x58
 800d58c:	4614      	mov	r4, r2
 800d58e:	461d      	mov	r5, r3
 800d590:	da07      	bge.n	800d5a2 <__swhatbuf_r+0x22>
 800d592:	2300      	movs	r3, #0
 800d594:	602b      	str	r3, [r5, #0]
 800d596:	89b3      	ldrh	r3, [r6, #12]
 800d598:	061a      	lsls	r2, r3, #24
 800d59a:	d410      	bmi.n	800d5be <__swhatbuf_r+0x3e>
 800d59c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5a0:	e00e      	b.n	800d5c0 <__swhatbuf_r+0x40>
 800d5a2:	466a      	mov	r2, sp
 800d5a4:	f000 f902 	bl	800d7ac <_fstat_r>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	dbf2      	blt.n	800d592 <__swhatbuf_r+0x12>
 800d5ac:	9a01      	ldr	r2, [sp, #4]
 800d5ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d5b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d5b6:	425a      	negs	r2, r3
 800d5b8:	415a      	adcs	r2, r3
 800d5ba:	602a      	str	r2, [r5, #0]
 800d5bc:	e7ee      	b.n	800d59c <__swhatbuf_r+0x1c>
 800d5be:	2340      	movs	r3, #64	; 0x40
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	6023      	str	r3, [r4, #0]
 800d5c4:	b016      	add	sp, #88	; 0x58
 800d5c6:	bd70      	pop	{r4, r5, r6, pc}

0800d5c8 <__smakebuf_r>:
 800d5c8:	898b      	ldrh	r3, [r1, #12]
 800d5ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5cc:	079d      	lsls	r5, r3, #30
 800d5ce:	4606      	mov	r6, r0
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	d507      	bpl.n	800d5e4 <__smakebuf_r+0x1c>
 800d5d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	6123      	str	r3, [r4, #16]
 800d5dc:	2301      	movs	r3, #1
 800d5de:	6163      	str	r3, [r4, #20]
 800d5e0:	b002      	add	sp, #8
 800d5e2:	bd70      	pop	{r4, r5, r6, pc}
 800d5e4:	ab01      	add	r3, sp, #4
 800d5e6:	466a      	mov	r2, sp
 800d5e8:	f7ff ffca 	bl	800d580 <__swhatbuf_r>
 800d5ec:	9900      	ldr	r1, [sp, #0]
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f7ff f987 	bl	800c904 <_malloc_r>
 800d5f6:	b948      	cbnz	r0, 800d60c <__smakebuf_r+0x44>
 800d5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5fc:	059a      	lsls	r2, r3, #22
 800d5fe:	d4ef      	bmi.n	800d5e0 <__smakebuf_r+0x18>
 800d600:	f023 0303 	bic.w	r3, r3, #3
 800d604:	f043 0302 	orr.w	r3, r3, #2
 800d608:	81a3      	strh	r3, [r4, #12]
 800d60a:	e7e3      	b.n	800d5d4 <__smakebuf_r+0xc>
 800d60c:	4b0d      	ldr	r3, [pc, #52]	; (800d644 <__smakebuf_r+0x7c>)
 800d60e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d610:	89a3      	ldrh	r3, [r4, #12]
 800d612:	6020      	str	r0, [r4, #0]
 800d614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d618:	81a3      	strh	r3, [r4, #12]
 800d61a:	9b00      	ldr	r3, [sp, #0]
 800d61c:	6163      	str	r3, [r4, #20]
 800d61e:	9b01      	ldr	r3, [sp, #4]
 800d620:	6120      	str	r0, [r4, #16]
 800d622:	b15b      	cbz	r3, 800d63c <__smakebuf_r+0x74>
 800d624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d628:	4630      	mov	r0, r6
 800d62a:	f000 f8d1 	bl	800d7d0 <_isatty_r>
 800d62e:	b128      	cbz	r0, 800d63c <__smakebuf_r+0x74>
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f023 0303 	bic.w	r3, r3, #3
 800d636:	f043 0301 	orr.w	r3, r3, #1
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	89a0      	ldrh	r0, [r4, #12]
 800d63e:	4305      	orrs	r5, r0
 800d640:	81a5      	strh	r5, [r4, #12]
 800d642:	e7cd      	b.n	800d5e0 <__smakebuf_r+0x18>
 800d644:	0800d3d9 	.word	0x0800d3d9

0800d648 <_malloc_usable_size_r>:
 800d648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d64c:	1f18      	subs	r0, r3, #4
 800d64e:	2b00      	cmp	r3, #0
 800d650:	bfbc      	itt	lt
 800d652:	580b      	ldrlt	r3, [r1, r0]
 800d654:	18c0      	addlt	r0, r0, r3
 800d656:	4770      	bx	lr

0800d658 <_raise_r>:
 800d658:	291f      	cmp	r1, #31
 800d65a:	b538      	push	{r3, r4, r5, lr}
 800d65c:	4604      	mov	r4, r0
 800d65e:	460d      	mov	r5, r1
 800d660:	d904      	bls.n	800d66c <_raise_r+0x14>
 800d662:	2316      	movs	r3, #22
 800d664:	6003      	str	r3, [r0, #0]
 800d666:	f04f 30ff 	mov.w	r0, #4294967295
 800d66a:	bd38      	pop	{r3, r4, r5, pc}
 800d66c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d66e:	b112      	cbz	r2, 800d676 <_raise_r+0x1e>
 800d670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d674:	b94b      	cbnz	r3, 800d68a <_raise_r+0x32>
 800d676:	4620      	mov	r0, r4
 800d678:	f000 f830 	bl	800d6dc <_getpid_r>
 800d67c:	462a      	mov	r2, r5
 800d67e:	4601      	mov	r1, r0
 800d680:	4620      	mov	r0, r4
 800d682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d686:	f000 b817 	b.w	800d6b8 <_kill_r>
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d00a      	beq.n	800d6a4 <_raise_r+0x4c>
 800d68e:	1c59      	adds	r1, r3, #1
 800d690:	d103      	bne.n	800d69a <_raise_r+0x42>
 800d692:	2316      	movs	r3, #22
 800d694:	6003      	str	r3, [r0, #0]
 800d696:	2001      	movs	r0, #1
 800d698:	e7e7      	b.n	800d66a <_raise_r+0x12>
 800d69a:	2400      	movs	r4, #0
 800d69c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	4798      	blx	r3
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	e7e0      	b.n	800d66a <_raise_r+0x12>

0800d6a8 <raise>:
 800d6a8:	4b02      	ldr	r3, [pc, #8]	; (800d6b4 <raise+0xc>)
 800d6aa:	4601      	mov	r1, r0
 800d6ac:	6818      	ldr	r0, [r3, #0]
 800d6ae:	f7ff bfd3 	b.w	800d658 <_raise_r>
 800d6b2:	bf00      	nop
 800d6b4:	20000014 	.word	0x20000014

0800d6b8 <_kill_r>:
 800d6b8:	b538      	push	{r3, r4, r5, lr}
 800d6ba:	4d07      	ldr	r5, [pc, #28]	; (800d6d8 <_kill_r+0x20>)
 800d6bc:	2300      	movs	r3, #0
 800d6be:	4604      	mov	r4, r0
 800d6c0:	4608      	mov	r0, r1
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	602b      	str	r3, [r5, #0]
 800d6c6:	f7f5 f9e3 	bl	8002a90 <_kill>
 800d6ca:	1c43      	adds	r3, r0, #1
 800d6cc:	d102      	bne.n	800d6d4 <_kill_r+0x1c>
 800d6ce:	682b      	ldr	r3, [r5, #0]
 800d6d0:	b103      	cbz	r3, 800d6d4 <_kill_r+0x1c>
 800d6d2:	6023      	str	r3, [r4, #0]
 800d6d4:	bd38      	pop	{r3, r4, r5, pc}
 800d6d6:	bf00      	nop
 800d6d8:	2000887c 	.word	0x2000887c

0800d6dc <_getpid_r>:
 800d6dc:	f7f5 b9d0 	b.w	8002a80 <_getpid>

0800d6e0 <__sread>:
 800d6e0:	b510      	push	{r4, lr}
 800d6e2:	460c      	mov	r4, r1
 800d6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6e8:	f000 f894 	bl	800d814 <_read_r>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	bfab      	itete	ge
 800d6f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d6f2:	89a3      	ldrhlt	r3, [r4, #12]
 800d6f4:	181b      	addge	r3, r3, r0
 800d6f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d6fa:	bfac      	ite	ge
 800d6fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d6fe:	81a3      	strhlt	r3, [r4, #12]
 800d700:	bd10      	pop	{r4, pc}

0800d702 <__swrite>:
 800d702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d706:	461f      	mov	r7, r3
 800d708:	898b      	ldrh	r3, [r1, #12]
 800d70a:	05db      	lsls	r3, r3, #23
 800d70c:	4605      	mov	r5, r0
 800d70e:	460c      	mov	r4, r1
 800d710:	4616      	mov	r6, r2
 800d712:	d505      	bpl.n	800d720 <__swrite+0x1e>
 800d714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d718:	2302      	movs	r3, #2
 800d71a:	2200      	movs	r2, #0
 800d71c:	f000 f868 	bl	800d7f0 <_lseek_r>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d72a:	81a3      	strh	r3, [r4, #12]
 800d72c:	4632      	mov	r2, r6
 800d72e:	463b      	mov	r3, r7
 800d730:	4628      	mov	r0, r5
 800d732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d736:	f000 b817 	b.w	800d768 <_write_r>

0800d73a <__sseek>:
 800d73a:	b510      	push	{r4, lr}
 800d73c:	460c      	mov	r4, r1
 800d73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d742:	f000 f855 	bl	800d7f0 <_lseek_r>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	89a3      	ldrh	r3, [r4, #12]
 800d74a:	bf15      	itete	ne
 800d74c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d74e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d756:	81a3      	strheq	r3, [r4, #12]
 800d758:	bf18      	it	ne
 800d75a:	81a3      	strhne	r3, [r4, #12]
 800d75c:	bd10      	pop	{r4, pc}

0800d75e <__sclose>:
 800d75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d762:	f000 b813 	b.w	800d78c <_close_r>
	...

0800d768 <_write_r>:
 800d768:	b538      	push	{r3, r4, r5, lr}
 800d76a:	4d07      	ldr	r5, [pc, #28]	; (800d788 <_write_r+0x20>)
 800d76c:	4604      	mov	r4, r0
 800d76e:	4608      	mov	r0, r1
 800d770:	4611      	mov	r1, r2
 800d772:	2200      	movs	r2, #0
 800d774:	602a      	str	r2, [r5, #0]
 800d776:	461a      	mov	r2, r3
 800d778:	f7f5 f9c1 	bl	8002afe <_write>
 800d77c:	1c43      	adds	r3, r0, #1
 800d77e:	d102      	bne.n	800d786 <_write_r+0x1e>
 800d780:	682b      	ldr	r3, [r5, #0]
 800d782:	b103      	cbz	r3, 800d786 <_write_r+0x1e>
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	2000887c 	.word	0x2000887c

0800d78c <_close_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	4d06      	ldr	r5, [pc, #24]	; (800d7a8 <_close_r+0x1c>)
 800d790:	2300      	movs	r3, #0
 800d792:	4604      	mov	r4, r0
 800d794:	4608      	mov	r0, r1
 800d796:	602b      	str	r3, [r5, #0]
 800d798:	f7f5 f9cd 	bl	8002b36 <_close>
 800d79c:	1c43      	adds	r3, r0, #1
 800d79e:	d102      	bne.n	800d7a6 <_close_r+0x1a>
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	b103      	cbz	r3, 800d7a6 <_close_r+0x1a>
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}
 800d7a8:	2000887c 	.word	0x2000887c

0800d7ac <_fstat_r>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	4d07      	ldr	r5, [pc, #28]	; (800d7cc <_fstat_r+0x20>)
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	4608      	mov	r0, r1
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	602b      	str	r3, [r5, #0]
 800d7ba:	f7f5 f9c8 	bl	8002b4e <_fstat>
 800d7be:	1c43      	adds	r3, r0, #1
 800d7c0:	d102      	bne.n	800d7c8 <_fstat_r+0x1c>
 800d7c2:	682b      	ldr	r3, [r5, #0]
 800d7c4:	b103      	cbz	r3, 800d7c8 <_fstat_r+0x1c>
 800d7c6:	6023      	str	r3, [r4, #0]
 800d7c8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ca:	bf00      	nop
 800d7cc:	2000887c 	.word	0x2000887c

0800d7d0 <_isatty_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4d06      	ldr	r5, [pc, #24]	; (800d7ec <_isatty_r+0x1c>)
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	4608      	mov	r0, r1
 800d7da:	602b      	str	r3, [r5, #0]
 800d7dc:	f7f5 f9c7 	bl	8002b6e <_isatty>
 800d7e0:	1c43      	adds	r3, r0, #1
 800d7e2:	d102      	bne.n	800d7ea <_isatty_r+0x1a>
 800d7e4:	682b      	ldr	r3, [r5, #0]
 800d7e6:	b103      	cbz	r3, 800d7ea <_isatty_r+0x1a>
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	bd38      	pop	{r3, r4, r5, pc}
 800d7ec:	2000887c 	.word	0x2000887c

0800d7f0 <_lseek_r>:
 800d7f0:	b538      	push	{r3, r4, r5, lr}
 800d7f2:	4d07      	ldr	r5, [pc, #28]	; (800d810 <_lseek_r+0x20>)
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	4608      	mov	r0, r1
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	602a      	str	r2, [r5, #0]
 800d7fe:	461a      	mov	r2, r3
 800d800:	f7f5 f9c0 	bl	8002b84 <_lseek>
 800d804:	1c43      	adds	r3, r0, #1
 800d806:	d102      	bne.n	800d80e <_lseek_r+0x1e>
 800d808:	682b      	ldr	r3, [r5, #0]
 800d80a:	b103      	cbz	r3, 800d80e <_lseek_r+0x1e>
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	bd38      	pop	{r3, r4, r5, pc}
 800d810:	2000887c 	.word	0x2000887c

0800d814 <_read_r>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	4d07      	ldr	r5, [pc, #28]	; (800d834 <_read_r+0x20>)
 800d818:	4604      	mov	r4, r0
 800d81a:	4608      	mov	r0, r1
 800d81c:	4611      	mov	r1, r2
 800d81e:	2200      	movs	r2, #0
 800d820:	602a      	str	r2, [r5, #0]
 800d822:	461a      	mov	r2, r3
 800d824:	f7f5 f94e 	bl	8002ac4 <_read>
 800d828:	1c43      	adds	r3, r0, #1
 800d82a:	d102      	bne.n	800d832 <_read_r+0x1e>
 800d82c:	682b      	ldr	r3, [r5, #0]
 800d82e:	b103      	cbz	r3, 800d832 <_read_r+0x1e>
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	bd38      	pop	{r3, r4, r5, pc}
 800d834:	2000887c 	.word	0x2000887c

0800d838 <_init>:
 800d838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83a:	bf00      	nop
 800d83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d83e:	bc08      	pop	{r3}
 800d840:	469e      	mov	lr, r3
 800d842:	4770      	bx	lr

0800d844 <_fini>:
 800d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d846:	bf00      	nop
 800d848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84a:	bc08      	pop	{r3}
 800d84c:	469e      	mov	lr, r3
 800d84e:	4770      	bx	lr
