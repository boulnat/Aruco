
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800dbc0  0800dbc0  0001dbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e134  0800e134  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e134  0800e134  0001e134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e13c  0800e13c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e13c  0800e13c  0001e13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e140  0800e140  0001e140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000086a8  200001e4  0800e328  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000888c  0800e328  0002888c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be83  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f0f  00000000  00000000  0004c097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  00050fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f00  00000000  00000000  00053080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cd3  00000000  00000000  00054f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022cf7  00000000  00000000  0007bc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec34b  00000000  00000000  0009e94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018ac95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d6c  00000000  00000000  0018ace8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dba8 	.word	0x0800dba8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800dba8 	.word	0x0800dba8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <AS7341begin>:
 *    @brief  Sets up the hardware and initializes I2C
 *    @param  i2c_address
 *            The I2C address to be used.
 *    @return True if initialization was successful, otherwise false.
 */
bool AS7341begin(I2C_HandleTypeDef hi2c1){
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	f107 0c08 	add.w	ip, r7, #8
 8000eaa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c = hi2c1;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <AS7341begin+0x2c>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	224c      	movs	r2, #76	; 0x4c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f009 ffd9 	bl	800ae70 <memcpy>
	return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec8:	b004      	add	sp, #16
 8000eca:	4770      	bx	lr
 8000ecc:	2000845c 	.word	0x2000845c

08000ed0 <setASTEP>:

bool setASTEP(uint8_t astep_value) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {AS7341_ASTEP_L, astep_value};
 8000eda:	23ca      	movs	r3, #202	; 0xca
 8000edc:	733b      	strb	r3, [r7, #12]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000ee2:	bf00      	nop
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	2172      	movs	r1, #114	; 0x72
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <setASTEP+0x84>)
 8000ef4:	f004 f832 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f2      	bne.n	8000ee4 <setASTEP+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000efe:	bf00      	nop
 8000f00:	23c8      	movs	r3, #200	; 0xc8
 8000f02:	220a      	movs	r2, #10
 8000f04:	2172      	movs	r1, #114	; 0x72
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <setASTEP+0x84>)
 8000f08:	f004 fa12 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f6      	bne.n	8000f00 <setASTEP+0x30>

	data[0] = AS7341_ASTEP_H;
 8000f12:	23cb      	movs	r3, #203	; 0xcb
 8000f14:	733b      	strb	r3, [r7, #12]
	data[1] = 0x03;
 8000f16:	2303      	movs	r3, #3
 8000f18:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000f1a:	bf00      	nop
 8000f1c:	f107 020c 	add.w	r2, r7, #12
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2302      	movs	r3, #2
 8000f28:	2172      	movs	r1, #114	; 0x72
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <setASTEP+0x84>)
 8000f2c:	f004 f816 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f2      	bne.n	8000f1c <setASTEP+0x4c>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000f36:	bf00      	nop
 8000f38:	23c8      	movs	r3, #200	; 0xc8
 8000f3a:	220a      	movs	r2, #10
 8000f3c:	2172      	movs	r1, #114	; 0x72
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <setASTEP+0x84>)
 8000f40:	f004 f9f6 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f6      	bne.n	8000f38 <setASTEP+0x68>

	return 1;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000845c 	.word	0x2000845c

08000f58 <setATIME>:

bool setATIME(uint8_t atime_value) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {AS7341_ATIME, atime_value};
 8000f62:	2381      	movs	r3, #129	; 0x81
 8000f64:	733b      	strb	r3, [r7, #12]
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000f6a:	bf00      	nop
 8000f6c:	f107 020c 	add.w	r2, r7, #12
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2302      	movs	r3, #2
 8000f78:	2172      	movs	r1, #114	; 0x72
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <setATIME+0x4c>)
 8000f7c:	f003 ffee 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f2      	bne.n	8000f6c <setATIME+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000f86:	bf00      	nop
 8000f88:	23c8      	movs	r3, #200	; 0xc8
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	2172      	movs	r1, #114	; 0x72
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <setATIME+0x4c>)
 8000f90:	f004 f9ce 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f6      	bne.n	8000f88 <setATIME+0x30>

	return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000845c 	.word	0x2000845c

08000fa8 <setGain>:

bool setGain(as7341_gain_t gain_value) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {AS7341_CFG1, gain_value};
 8000fb2:	23aa      	movs	r3, #170	; 0xaa
 8000fb4:	733b      	strb	r3, [r7, #12]
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8000fba:	bf00      	nop
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	2172      	movs	r1, #114	; 0x72
 8000fca:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <setGain+0x4c>)
 8000fcc:	f003 ffc6 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f2      	bne.n	8000fbc <setGain+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8000fd6:	bf00      	nop
 8000fd8:	23c8      	movs	r3, #200	; 0xc8
 8000fda:	220a      	movs	r2, #10
 8000fdc:	2172      	movs	r1, #114	; 0x72
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <setGain+0x4c>)
 8000fe0:	f004 f9a6 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f6      	bne.n	8000fd8 <setGain+0x30>

	return 1;
 8000fea:	2301      	movs	r3, #1
  // AGAIN bitfield is only[0:4] but the rest is empty
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000845c 	.word	0x2000845c

08000ff8 <readAllChannels>:
	    break;
	  }
	  return raw / (gain_val * (getATIME() + 1) * (getASTEP() + 1) * 2.78 / 1000);
}

uint16_t readAllChannels(uint16_t *readings_buffer) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_CH0_DATA_L,0x02};
 8001000:	f240 2395 	movw	r3, #661	; 0x295
 8001004:	81bb      	strh	r3, [r7, #12]
	uint16_t buff = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	81fb      	strh	r3, [r7, #14]

    for(int i=0; i<12; i++){
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e007      	b.n	8001020 <readAllChannels+0x28>
        _channel_readings[i]=0;
 8001010:	4a62      	ldr	r2, [pc, #392]	; (800119c <readAllChannels+0x1a4>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2100      	movs	r1, #0
 8001016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0; i<12; i++){
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b0b      	cmp	r3, #11
 8001024:	ddf4      	ble.n	8001010 <readAllChannels+0x18>
    }

	setSMUXLowChannels(true);        // Configure SMUX to read low channels
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fb42 	bl	80016b0 <setSMUXLowChannels>
  	enableSpectralMeasurement(true); // Start integration
 800102c:	2001      	movs	r0, #1
 800102e:	f000 f9cf 	bl	80013d0 <enableSpectralMeasurement>
  	delayForData(0);                 // I'll wait for you for all time
 8001032:	2000      	movs	r0, #0
 8001034:	f000 f8b6 	bl	80011a4 <delayForData>

  	readings_buffer=_channel_readings;
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <readAllChannels+0x1a4>)
 800103a:	607b      	str	r3, [r7, #4]

  	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 800103c:	bf00      	nop
 800103e:	f107 020c 	add.w	r2, r7, #12
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2172      	movs	r1, #114	; 0x72
 800104c:	4854      	ldr	r0, [pc, #336]	; (80011a0 <readAllChannels+0x1a8>)
 800104e:	f003 ff85 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f2      	bne.n	800103e <readAllChannels+0x46>
  	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001058:	bf00      	nop
 800105a:	23c8      	movs	r3, #200	; 0xc8
 800105c:	220a      	movs	r2, #10
 800105e:	2172      	movs	r1, #114	; 0x72
 8001060:	484f      	ldr	r0, [pc, #316]	; (80011a0 <readAllChannels+0x1a8>)
 8001062:	f004 f965 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f6      	bne.n	800105a <readAllChannels+0x62>

  	regwrite[0]=AS7341_CH0_DATA_L;
 800106c:	2395      	movs	r3, #149	; 0x95
 800106e:	733b      	strb	r3, [r7, #12]
  	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001070:	bf00      	nop
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2302      	movs	r3, #2
 800107e:	2172      	movs	r1, #114	; 0x72
 8001080:	4847      	ldr	r0, [pc, #284]	; (80011a0 <readAllChannels+0x1a8>)
 8001082:	f003 ff6b 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f2      	bne.n	8001072 <readAllChannels+0x7a>
  	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800108c:	bf00      	nop
 800108e:	23c8      	movs	r3, #200	; 0xc8
 8001090:	220a      	movs	r2, #10
 8001092:	2172      	movs	r1, #114	; 0x72
 8001094:	4842      	ldr	r0, [pc, #264]	; (80011a0 <readAllChannels+0x1a8>)
 8001096:	f004 f94b 	bl	8005330 <HAL_I2C_IsDeviceReady>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f6      	bne.n	800108e <readAllChannels+0x96>
  	while(HAL_I2C_Master_Receive(&hi2c, 0x72, (uint8_t *)readings_buffer, 12, HAL_MAX_DELAY)!= HAL_OK);
 80010a0:	bf00      	nop
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	230c      	movs	r3, #12
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	2172      	movs	r1, #114	; 0x72
 80010ae:	483c      	ldr	r0, [pc, #240]	; (80011a0 <readAllChannels+0x1a8>)
 80010b0:	f004 f848 	bl	8005144 <HAL_I2C_Master_Receive>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f3      	bne.n	80010a2 <readAllChannels+0xaa>


  setSMUXLowChannels(false);       // Configure SMUX to read high channels
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 faf8 	bl	80016b0 <setSMUXLowChannels>
  enableSpectralMeasurement(true); // Start integration
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 f985 	bl	80013d0 <enableSpectralMeasurement>
  delayForData(0);                 // I'll wait for you for all time
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f86c 	bl	80011a4 <delayForData>

  regwrite[0]=AS7341_CH0_DATA_L;
 80010cc:	2395      	movs	r3, #149	; 0x95
 80010ce:	733b      	strb	r3, [r7, #12]
  regwrite[1]=0x02;
 80010d0:	2302      	movs	r3, #2
 80010d2:	737b      	strb	r3, [r7, #13]
  while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 80010d4:	bf00      	nop
 80010d6:	f107 020c 	add.w	r2, r7, #12
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	2172      	movs	r1, #114	; 0x72
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <readAllChannels+0x1a8>)
 80010e6:	f003 ff39 	bl	8004f5c <HAL_I2C_Master_Transmit>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f2      	bne.n	80010d6 <readAllChannels+0xde>
  while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80010f0:	bf00      	nop
 80010f2:	23c8      	movs	r3, #200	; 0xc8
 80010f4:	220a      	movs	r2, #10
 80010f6:	2172      	movs	r1, #114	; 0x72
 80010f8:	4829      	ldr	r0, [pc, #164]	; (80011a0 <readAllChannels+0x1a8>)
 80010fa:	f004 f919 	bl	8005330 <HAL_I2C_IsDeviceReady>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f6      	bne.n	80010f2 <readAllChannels+0xfa>

  regwrite[0]=AS7341_CH0_DATA_L;
 8001104:	2395      	movs	r3, #149	; 0x95
 8001106:	733b      	strb	r3, [r7, #12]
  while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001108:	bf00      	nop
 800110a:	f107 020c 	add.w	r2, r7, #12
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2302      	movs	r3, #2
 8001116:	2172      	movs	r1, #114	; 0x72
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <readAllChannels+0x1a8>)
 800111a:	f003 ff1f 	bl	8004f5c <HAL_I2C_Master_Transmit>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f2      	bne.n	800110a <readAllChannels+0x112>
  while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001124:	bf00      	nop
 8001126:	23c8      	movs	r3, #200	; 0xc8
 8001128:	220a      	movs	r2, #10
 800112a:	2172      	movs	r1, #114	; 0x72
 800112c:	481c      	ldr	r0, [pc, #112]	; (80011a0 <readAllChannels+0x1a8>)
 800112e:	f004 f8ff 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f6      	bne.n	8001126 <readAllChannels+0x12e>
  while(HAL_I2C_Master_Receive(&hi2c, 0x72, (uint8_t *)&readings_buffer[6], 12, HAL_MAX_DELAY)!= HAL_OK);
 8001138:	bf00      	nop
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f103 020c 	add.w	r2, r3, #12
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	230c      	movs	r3, #12
 8001148:	2172      	movs	r1, #114	; 0x72
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <readAllChannels+0x1a8>)
 800114c:	f003 fffa 	bl	8005144 <HAL_I2C_Master_Receive>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f1      	bne.n	800113a <readAllChannels+0x142>

	//swap MSB and LSB

  for(int i=0; i<12; i++){
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	e017      	b.n	800118c <readAllChannels+0x194>
	  buff = ((_channel_readings[i] & 0x00FF) << 8) | (_channel_readings[i]>>8);
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <readAllChannels+0x1a4>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <readAllChannels+0x1a4>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29b      	uxth	r3, r3
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21b      	sxth	r3, r3
 800117a:	81fb      	strh	r3, [r7, #14]
	  _channel_readings[i] = buff;
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <readAllChannels+0x1a4>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	89fa      	ldrh	r2, [r7, #14]
 8001182:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(int i=0; i<12; i++){
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	3301      	adds	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b0b      	cmp	r3, #11
 8001190:	dde4      	ble.n	800115c <readAllChannels+0x164>
  }

  return 1;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20008444 	.word	0x20008444
 80011a0:	2000845c 	.word	0x2000845c

080011a4 <delayForData>:

void delayForData(int waitTime) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_STATUS2};
 80011ac:	23a3      	movs	r3, #163	; 0xa3
 80011ae:	733b      	strb	r3, [r7, #12]
	uint8_t regRead[1]={0};
 80011b0:	2300      	movs	r3, #0
 80011b2:	723b      	strb	r3, [r7, #8]

	while(regRead[0]!=0x40){
 80011b4:	e028      	b.n	8001208 <delayForData+0x64>
		osDelay(100);
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	f007 fab2 	bl	8008720 <osDelay>
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80011bc:	bf00      	nop
 80011be:	f107 020c 	add.w	r2, r7, #12
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2172      	movs	r1, #114	; 0x72
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <delayForData+0x74>)
 80011ce:	f003 fec5 	bl	8004f5c <HAL_I2C_Master_Transmit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f2      	bne.n	80011be <delayForData+0x1a>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80011d8:	bf00      	nop
 80011da:	23c8      	movs	r3, #200	; 0xc8
 80011dc:	220a      	movs	r2, #10
 80011de:	2172      	movs	r1, #114	; 0x72
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <delayForData+0x74>)
 80011e2:	f004 f8a5 	bl	8005330 <HAL_I2C_IsDeviceReady>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f6      	bne.n	80011da <delayForData+0x36>
		while(HAL_I2C_Master_Receive(&hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 80011ec:	bf00      	nop
 80011ee:	f107 0208 	add.w	r2, r7, #8
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	2172      	movs	r1, #114	; 0x72
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <delayForData+0x74>)
 80011fe:	f003 ffa1 	bl	8005144 <HAL_I2C_Master_Receive>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f2      	bne.n	80011ee <delayForData+0x4a>
	while(regRead[0]!=0x40){
 8001208:	7a3b      	ldrb	r3, [r7, #8]
 800120a:	2b40      	cmp	r3, #64	; 0x40
 800120c:	d1d3      	bne.n	80011b6 <delayForData+0x12>
		//sprintf(msg, "delayForData = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000845c 	.word	0x2000845c

0800121c <getChannel>:
	read16bits = ((read[0] & 0x00FF) << 8) | read[0]>>8;
	return read16bits;

}

uint16_t getChannel(as7341_color_channel_t channel) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  return _channel_readings[channel];
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <getChannel+0x20>)
 800122a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20008444 	.word	0x20008444

08001240 <getAllChannels>:
	  }

	  return false;
}

bool getAllChannels(uint16_t *readings_buffer){
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 12; i++){
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e00b      	b.n	8001266 <getAllChannels+0x26>
		readings_buffer[i] = _channel_readings[i];
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4909      	ldr	r1, [pc, #36]	; (800127c <getAllChannels+0x3c>)
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800125e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 12; i++){
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3301      	adds	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b0b      	cmp	r3, #11
 800126a:	ddf0      	ble.n	800124e <getAllChannels+0xe>
	}
	return true;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20008444 	.word	0x20008444

08001280 <setup_F1F4_Clear_NIR>:
	  default:
	    return 0;
	  }
}

void setup_F1F4_Clear_NIR() {
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  // SMUX Config for F1,F2,F3,F4,NIR,Clear
  writeRegister((0x00), (0x30)); // F3 left set to ADC2
 8001284:	2130      	movs	r1, #48	; 0x30
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f9e6 	bl	8001658 <writeRegister>
  writeRegister((0x01), (0x01)); // F1 left set to ADC0
 800128c:	2101      	movs	r1, #1
 800128e:	2001      	movs	r0, #1
 8001290:	f000 f9e2 	bl	8001658 <writeRegister>
  writeRegister((0x02), (0x00)); // Reserved or disabled
 8001294:	2100      	movs	r1, #0
 8001296:	2002      	movs	r0, #2
 8001298:	f000 f9de 	bl	8001658 <writeRegister>
  writeRegister((0x03), (0x00)); // F8 left disabled
 800129c:	2100      	movs	r1, #0
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f9da 	bl	8001658 <writeRegister>
  writeRegister((0x04), (0x00)); // F6 left disabled
 80012a4:	2100      	movs	r1, #0
 80012a6:	2004      	movs	r0, #4
 80012a8:	f000 f9d6 	bl	8001658 <writeRegister>
  writeRegister((0x05), (0x42)); // F4 left connected to ADC3/f2 left connected to ADC1
 80012ac:	2142      	movs	r1, #66	; 0x42
 80012ae:	2005      	movs	r0, #5
 80012b0:	f000 f9d2 	bl	8001658 <writeRegister>
  writeRegister((0x06), (0x00)); // F5 left disbled
 80012b4:	2100      	movs	r1, #0
 80012b6:	2006      	movs	r0, #6
 80012b8:	f000 f9ce 	bl	8001658 <writeRegister>
  writeRegister((0x07), (0x00)); // F7 left disbled
 80012bc:	2100      	movs	r1, #0
 80012be:	2007      	movs	r0, #7
 80012c0:	f000 f9ca 	bl	8001658 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR connected to ADC4
 80012c4:	2150      	movs	r1, #80	; 0x50
 80012c6:	2008      	movs	r0, #8
 80012c8:	f000 f9c6 	bl	8001658 <writeRegister>
  writeRegister((0x09), (0x00)); // F5 right disabled
 80012cc:	2100      	movs	r1, #0
 80012ce:	2009      	movs	r0, #9
 80012d0:	f000 f9c2 	bl	8001658 <writeRegister>
  writeRegister((0x0A), (0x00)); // F7 right disabled
 80012d4:	2100      	movs	r1, #0
 80012d6:	200a      	movs	r0, #10
 80012d8:	f000 f9be 	bl	8001658 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 80012dc:	2100      	movs	r1, #0
 80012de:	200b      	movs	r0, #11
 80012e0:	f000 f9ba 	bl	8001658 <writeRegister>
  writeRegister((0x0C), (0x20)); // F2 right connected to ADC1
 80012e4:	2120      	movs	r1, #32
 80012e6:	200c      	movs	r0, #12
 80012e8:	f000 f9b6 	bl	8001658 <writeRegister>
  writeRegister((0x0D), (0x04)); // F4 right connected to ADC3
 80012ec:	2104      	movs	r1, #4
 80012ee:	200d      	movs	r0, #13
 80012f0:	f000 f9b2 	bl	8001658 <writeRegister>
  writeRegister((0x0E), (0x00)); // F6/F8 right disabled
 80012f4:	2100      	movs	r1, #0
 80012f6:	200e      	movs	r0, #14
 80012f8:	f000 f9ae 	bl	8001658 <writeRegister>
  writeRegister((0x0F), (0x30)); // F3 right connected to AD2
 80012fc:	2130      	movs	r1, #48	; 0x30
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f9aa 	bl	8001658 <writeRegister>
  writeRegister((0x10), (0x01)); // F1 right connected to AD0
 8001304:	2101      	movs	r1, #1
 8001306:	2010      	movs	r0, #16
 8001308:	f000 f9a6 	bl	8001658 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 800130c:	2150      	movs	r1, #80	; 0x50
 800130e:	2011      	movs	r0, #17
 8001310:	f000 f9a2 	bl	8001658 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 8001314:	2100      	movs	r1, #0
 8001316:	2012      	movs	r0, #18
 8001318:	f000 f99e 	bl	8001658 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 800131c:	2106      	movs	r1, #6
 800131e:	2013      	movs	r0, #19
 8001320:	f000 f99a 	bl	8001658 <writeRegister>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <setup_F5F8_Clear_NIR>:

void setup_F5F8_Clear_NIR() {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  // SMUX Config for F5,F6,F7,F8,NIR,Clear
  writeRegister((0x00), (0x00)); // F3 left disable
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f992 	bl	8001658 <writeRegister>
  writeRegister((0x01), (0x00)); // F1 left disable
 8001334:	2100      	movs	r1, #0
 8001336:	2001      	movs	r0, #1
 8001338:	f000 f98e 	bl	8001658 <writeRegister>
  writeRegister((0x02), (0x00)); // reserved/disable
 800133c:	2100      	movs	r1, #0
 800133e:	2002      	movs	r0, #2
 8001340:	f000 f98a 	bl	8001658 <writeRegister>
  writeRegister((0x03), (0x40)); // F8 left connected to ADC3
 8001344:	2140      	movs	r1, #64	; 0x40
 8001346:	2003      	movs	r0, #3
 8001348:	f000 f986 	bl	8001658 <writeRegister>
  writeRegister((0x04), (0x02)); // F6 left connected to ADC1
 800134c:	2102      	movs	r1, #2
 800134e:	2004      	movs	r0, #4
 8001350:	f000 f982 	bl	8001658 <writeRegister>
  writeRegister((0x05), (0x00)); // F4/ F2 disabled
 8001354:	2100      	movs	r1, #0
 8001356:	2005      	movs	r0, #5
 8001358:	f000 f97e 	bl	8001658 <writeRegister>
  writeRegister((0x06), (0x10)); // F5 left connected to ADC0
 800135c:	2110      	movs	r1, #16
 800135e:	2006      	movs	r0, #6
 8001360:	f000 f97a 	bl	8001658 <writeRegister>
  writeRegister((0x07), (0x03)); // F7 left connected to ADC2
 8001364:	2103      	movs	r1, #3
 8001366:	2007      	movs	r0, #7
 8001368:	f000 f976 	bl	8001658 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR Connected to ADC4
 800136c:	2150      	movs	r1, #80	; 0x50
 800136e:	2008      	movs	r0, #8
 8001370:	f000 f972 	bl	8001658 <writeRegister>
  writeRegister((0x09), (0x10)); // F5 right connected to ADC0
 8001374:	2110      	movs	r1, #16
 8001376:	2009      	movs	r0, #9
 8001378:	f000 f96e 	bl	8001658 <writeRegister>
  writeRegister((0x0A), (0x03)); // F7 right connected to ADC2
 800137c:	2103      	movs	r1, #3
 800137e:	200a      	movs	r0, #10
 8001380:	f000 f96a 	bl	8001658 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 8001384:	2100      	movs	r1, #0
 8001386:	200b      	movs	r0, #11
 8001388:	f000 f966 	bl	8001658 <writeRegister>
  writeRegister((0x0C), (0x00)); // F2 right disabled
 800138c:	2100      	movs	r1, #0
 800138e:	200c      	movs	r0, #12
 8001390:	f000 f962 	bl	8001658 <writeRegister>
  writeRegister((0x0D), (0x00)); // F4 right disabled
 8001394:	2100      	movs	r1, #0
 8001396:	200d      	movs	r0, #13
 8001398:	f000 f95e 	bl	8001658 <writeRegister>
  writeRegister((0x0E), (0x24)); // F8 right connected to ADC2/ F6 right connected to ADC1
 800139c:	2124      	movs	r1, #36	; 0x24
 800139e:	200e      	movs	r0, #14
 80013a0:	f000 f95a 	bl	8001658 <writeRegister>
  writeRegister((0x0F), (0x00)); // F3 right disabled
 80013a4:	2100      	movs	r1, #0
 80013a6:	200f      	movs	r0, #15
 80013a8:	f000 f956 	bl	8001658 <writeRegister>
  writeRegister((0x10), (0x00)); // F1 right disabled
 80013ac:	2100      	movs	r1, #0
 80013ae:	2010      	movs	r0, #16
 80013b0:	f000 f952 	bl	8001658 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 80013b4:	2150      	movs	r1, #80	; 0x50
 80013b6:	2011      	movs	r0, #17
 80013b8:	f000 f94e 	bl	8001658 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 80013bc:	2100      	movs	r1, #0
 80013be:	2012      	movs	r0, #18
 80013c0:	f000 f94a 	bl	8001658 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 80013c4:	2106      	movs	r1, #6
 80013c6:	2013      	movs	r0, #19
 80013c8:	f000 f946 	bl	8001658 <writeRegister>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <enableSpectralMeasurement>:
	uint8_t regWrite[]={AS7341_ENABLE,0x01}; //PON to 1
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
}

bool enableSpectralMeasurement(bool enable_measurement) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_ENABLE,0x01};
 80013da:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013de:	81bb      	strh	r3, [r7, #12]
	//uint8_t regRead[1]={0};

	if(enable_measurement==0){
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f083 0301 	eor.w	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d01a      	beq.n	8001422 <enableSpectralMeasurement+0x52>
		regwrite[1]=0x01;
 80013ec:	2301      	movs	r3, #1
 80013ee:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80013f0:	bf00      	nop
 80013f2:	f107 020c 	add.w	r2, r7, #12
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2302      	movs	r3, #2
 80013fe:	2172      	movs	r1, #114	; 0x72
 8001400:	4817      	ldr	r0, [pc, #92]	; (8001460 <enableSpectralMeasurement+0x90>)
 8001402:	f003 fdab 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f2      	bne.n	80013f2 <enableSpectralMeasurement+0x22>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800140c:	bf00      	nop
 800140e:	23c8      	movs	r3, #200	; 0xc8
 8001410:	220a      	movs	r2, #10
 8001412:	2172      	movs	r1, #114	; 0x72
 8001414:	4812      	ldr	r0, [pc, #72]	; (8001460 <enableSpectralMeasurement+0x90>)
 8001416:	f003 ff8b 	bl	8005330 <HAL_I2C_IsDeviceReady>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f6      	bne.n	800140e <enableSpectralMeasurement+0x3e>
 8001420:	e019      	b.n	8001456 <enableSpectralMeasurement+0x86>
	}
	else{
		regwrite[1]=0x03;
 8001422:	2303      	movs	r3, #3
 8001424:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001426:	bf00      	nop
 8001428:	f107 020c 	add.w	r2, r7, #12
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2302      	movs	r3, #2
 8001434:	2172      	movs	r1, #114	; 0x72
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <enableSpectralMeasurement+0x90>)
 8001438:	f003 fd90 	bl	8004f5c <HAL_I2C_Master_Transmit>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <enableSpectralMeasurement+0x58>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001442:	bf00      	nop
 8001444:	23c8      	movs	r3, #200	; 0xc8
 8001446:	220a      	movs	r2, #10
 8001448:	2172      	movs	r1, #114	; 0x72
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <enableSpectralMeasurement+0x90>)
 800144c:	f003 ff70 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f6      	bne.n	8001444 <enableSpectralMeasurement+0x74>
	}
  return 1;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000845c 	.word	0x2000845c

08001464 <AS7341init>:

/*!  @brief Initializer for post i2c/spi init
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool AS7341init(int32_t sensor_id){
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	6078      	str	r0, [r7, #4]
    //POWER enable true
    uint8_t regWrite[]={AS7341_ENABLE,0x01}; //PON to 1
 800146c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001470:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
 8001472:	bf00      	nop
 8001474:	f107 020c 	add.w	r2, r7, #12
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2302      	movs	r3, #2
 8001480:	2172      	movs	r1, #114	; 0x72
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <AS7341init+0x48>)
 8001484:	f003 fd6a 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f2      	bne.n	8001474 <AS7341init+0x10>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800148e:	bf00      	nop
 8001490:	23c8      	movs	r3, #200	; 0xc8
 8001492:	220a      	movs	r2, #10
 8001494:	2172      	movs	r1, #114	; 0x72
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <AS7341init+0x48>)
 8001498:	f003 ff4a 	bl	8005330 <HAL_I2C_IsDeviceReady>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f6      	bne.n	8001490 <AS7341init+0x2c>
	return 1;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000845c 	.word	0x2000845c

080014b0 <enableSMUX>:

bool enableSMUX() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af02      	add	r7, sp, #8
	uint8_t regwrite[]={AS7341_ENABLE,0x19};
 80014b6:	f44f 53cc 	mov.w	r3, #6528	; 0x1980
 80014ba:	80bb      	strh	r3, [r7, #4]
	uint8_t regRead[1]={0};
 80014bc:	2300      	movs	r3, #0
 80014be:	703b      	strb	r3, [r7, #0]

	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80014c0:	bf00      	nop
 80014c2:	1d3a      	adds	r2, r7, #4
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2302      	movs	r3, #2
 80014cc:	2172      	movs	r1, #114	; 0x72
 80014ce:	4820      	ldr	r0, [pc, #128]	; (8001550 <enableSMUX+0xa0>)
 80014d0:	f003 fd44 	bl	8004f5c <HAL_I2C_Master_Transmit>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f3      	bne.n	80014c2 <enableSMUX+0x12>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80014da:	bf00      	nop
 80014dc:	23c8      	movs	r3, #200	; 0xc8
 80014de:	220a      	movs	r2, #10
 80014e0:	2172      	movs	r1, #114	; 0x72
 80014e2:	481b      	ldr	r0, [pc, #108]	; (8001550 <enableSMUX+0xa0>)
 80014e4:	f003 ff24 	bl	8005330 <HAL_I2C_IsDeviceReady>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f6      	bne.n	80014dc <enableSMUX+0x2c>


	regwrite[0]=AS7341_ENABLE;//0xA9 to AS7341_ENABLE
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	713b      	strb	r3, [r7, #4]
	regRead[0]=0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	703b      	strb	r3, [r7, #0]
	while(regRead[0]==0){
 80014f6:	e023      	b.n	8001540 <enableSMUX+0x90>
		while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 80014f8:	bf00      	nop
 80014fa:	1d3a      	adds	r2, r7, #4
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	2172      	movs	r1, #114	; 0x72
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <enableSMUX+0xa0>)
 8001508:	f003 fd28 	bl	8004f5c <HAL_I2C_Master_Transmit>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f3      	bne.n	80014fa <enableSMUX+0x4a>
		while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001512:	bf00      	nop
 8001514:	23c8      	movs	r3, #200	; 0xc8
 8001516:	220a      	movs	r2, #10
 8001518:	2172      	movs	r1, #114	; 0x72
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <enableSMUX+0xa0>)
 800151c:	f003 ff08 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f6      	bne.n	8001514 <enableSMUX+0x64>
		while(HAL_I2C_Master_Receive(&hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 8001526:	bf00      	nop
 8001528:	463a      	mov	r2, r7
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	2172      	movs	r1, #114	; 0x72
 8001534:	4806      	ldr	r0, [pc, #24]	; (8001550 <enableSMUX+0xa0>)
 8001536:	f003 fe05 	bl	8005144 <HAL_I2C_Master_Receive>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f3      	bne.n	8001528 <enableSMUX+0x78>
	while(regRead[0]==0){
 8001540:	783b      	ldrb	r3, [r7, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0d8      	beq.n	80014f8 <enableSMUX+0x48>

		//sprintf(msg, "enableSMUX = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}

    return 1;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000845c 	.word	0x2000845c

08001554 <enableFlickerDetection>:

bool enableFlickerDetection(bool enable_fd){
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	uint8_t regWrite[]={AS7341_ENABLE,0x40}; //PON to 1
 800155e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001562:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
 8001564:	bf00      	nop
 8001566:	f107 020c 	add.w	r2, r7, #12
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2302      	movs	r3, #2
 8001572:	2172      	movs	r1, #114	; 0x72
 8001574:	480a      	ldr	r0, [pc, #40]	; (80015a0 <enableFlickerDetection+0x4c>)
 8001576:	f003 fcf1 	bl	8004f5c <HAL_I2C_Master_Transmit>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f2      	bne.n	8001566 <enableFlickerDetection+0x12>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001580:	bf00      	nop
 8001582:	23c8      	movs	r3, #200	; 0xc8
 8001584:	220a      	movs	r2, #10
 8001586:	2172      	movs	r1, #114	; 0x72
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <enableFlickerDetection+0x4c>)
 800158a:	f003 fed1 	bl	8005330 <HAL_I2C_IsDeviceReady>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f6      	bne.n	8001582 <enableFlickerDetection+0x2e>
	return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000845c 	.word	0x2000845c

080015a4 <getFlickerDetectStatus>:
/**
 * @brief Returns the flicker detection status
 *
 * @return int8_t
 */
int8_t getFlickerDetectStatus(void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af02      	add	r7, sp, #8
	uint8_t read[1];
	uint8_t regCh[] = {AS7341_FD_STATUS};
 80015aa:	23db      	movs	r3, #219	; 0xdb
 80015ac:	703b      	strb	r3, [r7, #0]

	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regCh, 2, HAL_MAX_DELAY) != HAL_OK);
 80015ae:	bf00      	nop
 80015b0:	463a      	mov	r2, r7
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2302      	movs	r3, #2
 80015ba:	2172      	movs	r1, #114	; 0x72
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <getFlickerDetectStatus+0x60>)
 80015be:	f003 fccd 	bl	8004f5c <HAL_I2C_Master_Transmit>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f3      	bne.n	80015b0 <getFlickerDetectStatus+0xc>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 80015c8:	bf00      	nop
 80015ca:	23c8      	movs	r3, #200	; 0xc8
 80015cc:	220a      	movs	r2, #10
 80015ce:	2172      	movs	r1, #114	; 0x72
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <getFlickerDetectStatus+0x60>)
 80015d2:	f003 fead 	bl	8005330 <HAL_I2C_IsDeviceReady>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f6      	bne.n	80015ca <getFlickerDetectStatus+0x26>
	while(HAL_I2C_Master_Receive(&hi2c, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 80015dc:	bf00      	nop
 80015de:	1d3a      	adds	r2, r7, #4
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2301      	movs	r3, #1
 80015e8:	2172      	movs	r1, #114	; 0x72
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <getFlickerDetectStatus+0x60>)
 80015ec:	f003 fdaa 	bl	8005144 <HAL_I2C_Master_Receive>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f3      	bne.n	80015de <getFlickerDetectStatus+0x3a>

	return read[0];
 80015f6:	793b      	ldrb	r3, [r7, #4]
 80015f8:	b25b      	sxtb	r3, r3
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000845c 	.word	0x2000845c

08001608 <setSMUXCommand>:

bool setSMUXCommand(as7341_smux_cmd_t command) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af02      	add	r7, sp, #8
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_CFG6,0x10}; //should be command << to something
 8001612:	f241 03af 	movw	r3, #4271	; 0x10af
 8001616:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001618:	bf00      	nop
 800161a:	f107 020c 	add.w	r2, r7, #12
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2302      	movs	r3, #2
 8001626:	2172      	movs	r1, #114	; 0x72
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <setSMUXCommand+0x4c>)
 800162a:	f003 fc97 	bl	8004f5c <HAL_I2C_Master_Transmit>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f2      	bne.n	800161a <setSMUXCommand+0x12>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 8001634:	bf00      	nop
 8001636:	23c8      	movs	r3, #200	; 0xc8
 8001638:	220a      	movs	r2, #10
 800163a:	2172      	movs	r1, #114	; 0x72
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <setSMUXCommand+0x4c>)
 800163e:	f003 fe77 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f6      	bne.n	8001636 <setSMUXCommand+0x2e>
	return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000845c 	.word	0x2000845c

08001658 <writeRegister>:

void writeRegister(uint8_t addr, uint8_t val) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af02      	add	r7, sp, #8
 800165e:	4603      	mov	r3, r0
 8001660:	460a      	mov	r2, r1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	4613      	mov	r3, r2
 8001666:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {addr, val};
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	733b      	strb	r3, [r7, #12]
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8001670:	bf00      	nop
 8001672:	f107 020c 	add.w	r2, r7, #12
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2302      	movs	r3, #2
 800167e:	2172      	movs	r1, #114	; 0x72
 8001680:	480a      	ldr	r0, [pc, #40]	; (80016ac <writeRegister+0x54>)
 8001682:	f003 fc6b 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f2      	bne.n	8001672 <writeRegister+0x1a>
	while(HAL_I2C_IsDeviceReady(&hi2c,0x72,10,200)!=HAL_OK);
 800168c:	bf00      	nop
 800168e:	23c8      	movs	r3, #200	; 0xc8
 8001690:	220a      	movs	r2, #10
 8001692:	2172      	movs	r1, #114	; 0x72
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <writeRegister+0x54>)
 8001696:	f003 fe4b 	bl	8005330 <HAL_I2C_IsDeviceReady>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f6      	bne.n	800168e <writeRegister+0x36>

}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000845c 	.word	0x2000845c

080016b0 <setSMUXLowChannels>:


void setSMUXLowChannels(bool f1_f4) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  enableSpectralMeasurement(false);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff fe88 	bl	80013d0 <enableSpectralMeasurement>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7ff ffa1 	bl	8001608 <setSMUXCommand>
  if (f1_f4) {
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <setSMUXLowChannels+0x22>
    setup_F1F4_Clear_NIR();
 80016cc:	f7ff fdd8 	bl	8001280 <setup_F1F4_Clear_NIR>
 80016d0:	e001      	b.n	80016d6 <setSMUXLowChannels+0x26>
  } else {
    setup_F5F8_Clear_NIR();
 80016d2:	f7ff fe29 	bl	8001328 <setup_F5F8_Clear_NIR>
  }
  enableSMUX(&hi2c);
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <setSMUXLowChannels+0x34>)
 80016d8:	f7ff feea 	bl	80014b0 <enableSMUX>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000845c 	.word	0x2000845c

080016e8 <getThermocoupleTemp>:
}

/*----------------------------- Sensor Measurements ---------------------*/

uint8_t getThermocoupleTemp(bool units)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  int16_t raw = readDoubleRegister(HOT_JUNC_TEMP);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f822 	bl	800173c <readDoubleRegister>
 80016f8:	4603      	mov	r3, r0
 80016fa:	81fb      	strh	r3, [r7, #14]
  uint8_t LSB = raw & 0x00FF;
 80016fc:	89fb      	ldrh	r3, [r7, #14]
 80016fe:	737b      	strb	r3, [r7, #13]
  uint8_t MSB = raw>>8;
 8001700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001704:	121b      	asrs	r3, r3, #8
 8001706:	b21b      	sxth	r3, r3
 8001708:	733b      	strb	r3, [r7, #12]

  if((MSB & 0x80) == 0x80){
 800170a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	da08      	bge.n	8001724 <getThermocoupleTemp+0x3c>
	  return(((MSB*16)+(LSB/16))-4096);
 8001712:	7b3b      	ldrb	r3, [r7, #12]
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	b2da      	uxtb	r2, r3
 8001718:	7b7b      	ldrb	r3, [r7, #13]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	b2db      	uxtb	r3, r3
 800171e:	4413      	add	r3, r2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	e007      	b.n	8001734 <getThermocoupleTemp+0x4c>
  }
  else{
	  return(((MSB*16)+(LSB/16)));
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	b2da      	uxtb	r2, r3
 800172a:	7b7b      	ldrb	r3, [r7, #13]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3
  }
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <readDoubleRegister>:
  return read8bits;

}

uint16_t readDoubleRegister(MCP9600_Register reg)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af02      	add	r7, sp, #8
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  //Attempt to read the register until we exit with no error code
  //This attempts to fix the bug where clock stretching sometimes failes, as
  //described in the MCP9600 eratta
	uint8_t read[2]={0,0};
 8001746:	2300      	movs	r3, #0
 8001748:	81bb      	strh	r3, [r7, #12]
	uint16_t read16bits = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	81fb      	strh	r3, [r7, #14]

	while(HAL_I2C_Master_Transmit(&hi2c, 0xCE, &reg, 1, HAL_MAX_DELAY) != HAL_OK);
 800174e:	bf00      	nop
 8001750:	1dfa      	adds	r2, r7, #7
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	21ce      	movs	r1, #206	; 0xce
 800175c:	4815      	ldr	r0, [pc, #84]	; (80017b4 <readDoubleRegister+0x78>)
 800175e:	f003 fbfd 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f3      	bne.n	8001750 <readDoubleRegister+0x14>
	while(HAL_I2C_IsDeviceReady(&hi2c,0xCE,10,200)!=HAL_OK);
 8001768:	bf00      	nop
 800176a:	23c8      	movs	r3, #200	; 0xc8
 800176c:	220a      	movs	r2, #10
 800176e:	21ce      	movs	r1, #206	; 0xce
 8001770:	4810      	ldr	r0, [pc, #64]	; (80017b4 <readDoubleRegister+0x78>)
 8001772:	f003 fddd 	bl	8005330 <HAL_I2C_IsDeviceReady>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f6      	bne.n	800176a <readDoubleRegister+0x2e>
	while(HAL_I2C_Master_Receive(&hi2c, 0XCF, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 800177c:	bf00      	nop
 800177e:	f107 020c 	add.w	r2, r7, #12
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2302      	movs	r3, #2
 800178a:	21cf      	movs	r1, #207	; 0xcf
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <readDoubleRegister+0x78>)
 800178e:	f003 fcd9 	bl	8005144 <HAL_I2C_Master_Receive>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f2      	bne.n	800177e <readDoubleRegister+0x42>
	read16bits = (read[0] << 8) | read[1];
 8001798:	7b3b      	ldrb	r3, [r7, #12]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	b21a      	sxth	r2, r3
 800179e:	7b7b      	ldrb	r3, [r7, #13]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	81fb      	strh	r3, [r7, #14]
	return read16bits;
 80017a8:	89fb      	ldrh	r3, [r7, #14]


}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000845c 	.word	0x2000845c

080017b8 <PCA9685begin>:
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <PCA9685.h>

bool PCA9685begin(I2C_HandleTypeDef hi2c1, uint8_t prescale){
 80017b8:	b084      	sub	sp, #16
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
 80017be:	f107 0c08 	add.w	ip, r7, #8
 80017c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c3=hi2c1;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <PCA9685begin+0x2c>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	224c      	movs	r2, #76	; 0x4c
 80017d0:	4619      	mov	r1, r3
 80017d2:	f009 fb4d 	bl	800ae70 <memcpy>
}
 80017d6:	bf00      	nop
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017e0:	b004      	add	sp, #16
 80017e2:	4770      	bx	lr
 80017e4:	200084a8 	.word	0x200084a8

080017e8 <pca9685_init>:
	//HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(uint8_t address)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]

 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 80017f2:	2303      	movs	r3, #3
 80017f4:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c3, address, PCA9685_MODE1, 1, 1);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	b299      	uxth	r1, r3
 80017fa:	2301      	movs	r3, #1
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	2200      	movs	r2, #0
 8001802:	4825      	ldr	r0, [pc, #148]	; (8001898 <pca9685_init+0xb0>)
 8001804:	f003 fbaa 	bl	8004f5c <HAL_I2C_Master_Transmit>
 uint8_t oldmode = 0x00; // hardcoded
 8001808:	2300      	movs	r3, #0
 800180a:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 800180c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001810:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001814:	b25b      	sxtb	r3, r3
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	b25b      	sxtb	r3, r3
 800181c:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 800181e:	2300      	movs	r3, #0
 8001820:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 8001822:	7b7b      	ldrb	r3, [r7, #13]
 8001824:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	b299      	uxth	r1, r3
 800182a:	f107 0208 	add.w	r2, r7, #8
 800182e:	2301      	movs	r3, #1
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2302      	movs	r3, #2
 8001834:	4818      	ldr	r0, [pc, #96]	; (8001898 <pca9685_init+0xb0>)
 8001836:	f003 fb91 	bl	8004f5c <HAL_I2C_Master_Transmit>
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	b299      	uxth	r1, r3
 8001842:	f107 0208 	add.w	r2, r7, #8
 8001846:	2301      	movs	r3, #1
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2302      	movs	r3, #2
 800184c:	4812      	ldr	r0, [pc, #72]	; (8001898 <pca9685_init+0xb0>)
 800184e:	f003 fb85 	bl	8004f5c <HAL_I2C_Master_Transmit>
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 8001852:	7bbb      	ldrb	r3, [r7, #14]
 8001854:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	b299      	uxth	r1, r3
 800185a:	f107 0208 	add.w	r2, r7, #8
 800185e:	2301      	movs	r3, #1
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2302      	movs	r3, #2
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <pca9685_init+0xb0>)
 8001866:	f003 fb79 	bl	8004f5c <HAL_I2C_Master_Transmit>
 osDelay(5);
 800186a:	2005      	movs	r0, #5
 800186c:	f006 ff58 	bl	8008720 <osDelay>
 initStruct[1] = (oldmode | 0xA1);
 8001870:	7bbb      	ldrb	r3, [r7, #14]
 8001872:	f063 035e 	orn	r3, r3, #94	; 0x5e
 8001876:	b2db      	uxtb	r3, r3
 8001878:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(&hi2c3, address, initStruct, 2, 1);
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	b299      	uxth	r1, r3
 800187e:	f107 0208 	add.w	r2, r7, #8
 8001882:	2301      	movs	r3, #1
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2302      	movs	r3, #2
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <pca9685_init+0xb0>)
 800188a:	f003 fb67 	bl	8004f5c <HAL_I2C_Master_Transmit>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200084a8 	.word	0x200084a8

0800189c <pca9685_mult_pwm>:
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
	HAL_I2C_Master_Transmit(&hi2c3, address, outputBuffer, sizeof(outputBuffer), 1);
}

void pca9685_mult_pwm(uint8_t address, uint16_t num, uint16_t on, uint16_t off)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b08b      	sub	sp, #44	; 0x2c
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	4603      	mov	r3, r0
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	807b      	strh	r3, [r7, #2]
 80018b6:	4613      	mov	r3, r2
 80018b8:	803b      	strh	r3, [r7, #0]
	int i, iter;

	for (i=1, iter=1; i<65535; i<<=1, iter++)
 80018ba:	2301      	movs	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	e047      	b.n	8001954 <pca9685_mult_pwm+0xb8>
	{
		if (num & i)
 80018c4:	88ba      	ldrh	r2, [r7, #4]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d022      	beq.n	8001914 <pca9685_mult_pwm+0x78>
		{
			uint8_t outputBuffer[] = {0x06 + 4*((iter)-1), on, (on >> 8), off, (off >> 8)};
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	3306      	adds	r3, #6
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	743b      	strb	r3, [r7, #16]
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	747b      	strb	r3, [r7, #17]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	74bb      	strb	r3, [r7, #18]
 80018ee:	883b      	ldrh	r3, [r7, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	74fb      	strb	r3, [r7, #19]
 80018f4:	883b      	ldrh	r3, [r7, #0]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	753b      	strb	r3, [r7, #20]
			HAL_I2C_Master_Transmit(&hi2c3, address, outputBuffer, sizeof(outputBuffer), 1);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	b299      	uxth	r1, r3
 8001902:	f107 0210 	add.w	r2, r7, #16
 8001906:	2301      	movs	r3, #1
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2305      	movs	r3, #5
 800190c:	4816      	ldr	r0, [pc, #88]	; (8001968 <pca9685_mult_pwm+0xcc>)
 800190e:	f003 fb25 	bl	8004f5c <HAL_I2C_Master_Transmit>
 8001912:	e019      	b.n	8001948 <pca9685_mult_pwm+0xac>
		}
		else
		{
			uint8_t outputBuffer[] = {0x06 + 4*((iter)-1), 0, (0 >> 8), 4096, (4096 >> 8)};
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	3b01      	subs	r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3306      	adds	r3, #6
 8001920:	b2db      	uxtb	r3, r3
 8001922:	723b      	strb	r3, [r7, #8]
 8001924:	2300      	movs	r3, #0
 8001926:	727b      	strb	r3, [r7, #9]
 8001928:	2300      	movs	r3, #0
 800192a:	72bb      	strb	r3, [r7, #10]
 800192c:	2300      	movs	r3, #0
 800192e:	72fb      	strb	r3, [r7, #11]
 8001930:	2310      	movs	r3, #16
 8001932:	733b      	strb	r3, [r7, #12]
			HAL_I2C_Master_Transmit(&hi2c3, address, outputBuffer, sizeof(outputBuffer), 1);
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	b299      	uxth	r1, r3
 8001938:	f107 0208 	add.w	r2, r7, #8
 800193c:	2301      	movs	r3, #1
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2305      	movs	r3, #5
 8001942:	4809      	ldr	r0, [pc, #36]	; (8001968 <pca9685_mult_pwm+0xcc>)
 8001944:	f003 fb0a 	bl	8004f5c <HAL_I2C_Master_Transmit>
	for (i=1, iter=1; i<65535; i<<=1, iter++)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	3301      	adds	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800195a:	4293      	cmp	r3, r2
 800195c:	ddb2      	ble.n	80018c4 <pca9685_mult_pwm+0x28>
	{
		uint8_t outputBuffer[] = {0x06 + 4*((num & 0b00000010)-1), on, (on >> 8), off, (off >> 8)};
		HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
	}
	*/
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	3724      	adds	r7, #36	; 0x24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	200084a8 	.word	0x200084a8

0800196c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001970:	f001 fa5b 	bl	8002e2a <HAL_Init>
  //uint8_t I2C_address = 0x80;
  //pca9685_init(&hi2c3, I2C_address);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001974:	f000 f898 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001978:	f000 fbc8 	bl	800210c <MX_GPIO_Init>
  MX_DMA_Init();
 800197c:	f000 fba0 	bl	80020c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001980:	f000 f9c6 	bl	8001d10 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001984:	f000 f98e 	bl	8001ca4 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001988:	f000 fa3e 	bl	8001e08 <MX_TIM1_Init>
  MX_ADC1_Init();
 800198c:	f000 f926 	bl	8001bdc <MX_ADC1_Init>
  MX_TIM15_Init();
 8001990:	f000 fae2 	bl	8001f58 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001994:	f000 fb64 	bl	8002060 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001998:	f000 f9f8 	bl	8001d8c <MX_I2C3_Init>
  	if (coTimerStart(&timer1, (1000ul * 1000ul), timerCallback, NULL, CO_TIMER_ATTR_ROUNDUP_CYCLIC) != RET_OK)  {
  		errorHandler(16);
  	}
*/

  sFilterConfig.FilterBank = 0;
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <main+0x10c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <main+0x10c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <main+0x10c>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x033<<5;
 80019ae:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <main+0x10c>)
 80019b0:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 80019b4:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80019b6:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <main+0x10c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <main+0x10c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <main+0x10c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <main+0x10c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <main+0x10c>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <main+0x10c>)
 80019d6:	220e      	movs	r2, #14
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80019da:	4927      	ldr	r1, [pc, #156]	; (8001a78 <main+0x10c>)
 80019dc:	4827      	ldr	r0, [pc, #156]	; (8001a7c <main+0x110>)
 80019de:	f002 fa0c 	bl	8003dfa <HAL_CAN_ConfigFilter>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <main+0x80>
  {
	  Error_Handler();
 80019e8:	f000 fdd0 	bl	800258c <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80019ec:	4823      	ldr	r0, [pc, #140]	; (8001a7c <main+0x110>)
 80019ee:	f002 face 	bl	8003f8e <HAL_CAN_Start>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <main+0x90>
  {

	  Error_Handler();
 80019f8:	f000 fdc8 	bl	800258c <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_OVERRUN) != HAL_OK)
 80019fc:	2108      	movs	r1, #8
 80019fe:	481f      	ldr	r0, [pc, #124]	; (8001a7c <main+0x110>)
 8001a00:	f002 fc08 	bl	8004214 <HAL_CAN_ActivateNotification>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <main+0xa2>
  {

	  Error_Handler();
 8001a0a:	f000 fdbf 	bl	800258c <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	481a      	ldr	r0, [pc, #104]	; (8001a7c <main+0x110>)
 8001a12:	f002 fbff 	bl	8004214 <HAL_CAN_ActivateNotification>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <main+0xb4>
  {

	  Error_Handler();
 8001a1c:	f000 fdb6 	bl	800258c <Error_Handler>
  }

  TxHeader.StdId = 0x07; //07
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <main+0x114>)
 8001a22:	2207      	movs	r2, #7
 8001a24:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId = 0x01; //delete
  TxHeader.RTR = CAN_RTR_DATA;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <main+0x114>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <main+0x114>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <main+0x114>)
 8001a34:	2208      	movs	r2, #8
 8001a36:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <main+0x114>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	751a      	strb	r2, [r3, #20]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a3e:	f006 fd93 	bl	8008568 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <main+0x118>)
 8001a44:	2100      	movs	r1, #0
 8001a46:	4810      	ldr	r0, [pc, #64]	; (8001a88 <main+0x11c>)
 8001a48:	f006 fdd8 	bl	80085fc <osThreadNew>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <main+0x120>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <main+0x124>)
 8001a54:	2100      	movs	r1, #0
 8001a56:	480f      	ldr	r0, [pc, #60]	; (8001a94 <main+0x128>)
 8001a58:	f006 fdd0 	bl	80085fc <osThreadNew>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <main+0x12c>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8001a62:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <main+0x130>)
 8001a64:	2100      	movs	r1, #0
 8001a66:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <main+0x134>)
 8001a68:	f006 fdc8 	bl	80085fc <osThreadNew>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <main+0x138>)
 8001a70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a72:	f006 fd9d 	bl	80085b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <main+0x10a>
 8001a78:	200084f4 	.word	0x200084f4
 8001a7c:	20008790 	.word	0x20008790
 8001a80:	200087b8 	.word	0x200087b8
 8001a84:	0800dc9c 	.word	0x0800dc9c
 8001a88:	0800216d 	.word	0x0800216d
 8001a8c:	2000851c 	.word	0x2000851c
 8001a90:	0800dcc0 	.word	0x0800dcc0
 8001a94:	0800243d 	.word	0x0800243d
 8001a98:	20008600 	.word	0x20008600
 8001a9c:	0800dce4 	.word	0x0800dce4
 8001aa0:	0800248d 	.word	0x0800248d
 8001aa4:	200086fc 	.word	0x200086fc

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0ac      	sub	sp, #176	; 0xb0
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ab2:	2244      	movs	r2, #68	; 0x44
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f009 f9e8 	bl	800ae8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2254      	movs	r2, #84	; 0x54
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f009 f9da 	bl	800ae8c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ad8:	f003 ffaa 	bl	8005a30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001adc:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <SystemClock_Config+0x130>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <SystemClock_Config+0x130>)
 8001ae4:	f023 0318 	bic.w	r3, r3, #24
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001aec:	2314      	movs	r3, #20
 8001aee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001b00:	2390      	movs	r3, #144	; 0x90
 8001b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001b12:	2305      	movs	r3, #5
 8001b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001b18:	2310      	movs	r3, #16
 8001b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 ffef 	bl	8005b18 <HAL_RCC_OscConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b40:	f000 fd24 	bl	800258c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b44:	230f      	movs	r3, #15
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001b4c:	23a0      	movs	r3, #160	; 0xa0
 8001b4e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001b50:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 fbf9 	bl	8006358 <HAL_RCC_ClockConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b6c:	f000 fd0e 	bl	800258c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001b70:	f244 1342 	movw	r3, #16706	; 0x4142
 8001b74:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001b76:	2304      	movs	r3, #4
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001b8c:	2305      	movs	r3, #5
 8001b8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 8001b90:	230e      	movs	r3, #14
 8001b92:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b94:	2307      	movs	r3, #7
 8001b96:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fe0b 	bl	80067c4 <HAL_RCCEx_PeriphCLKConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001bb4:	f000 fcea 	bl	800258c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bbc:	f003 ff56 	bl	8005a6c <HAL_PWREx_ControlVoltageScaling>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0x122>
  {
    Error_Handler();
 8001bc6:	f000 fce1 	bl	800258c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001bca:	f004 ffef 	bl	8006bac <HAL_RCCEx_EnableMSIPLLMode>
}
 8001bce:	bf00      	nop
 8001bd0:	37b0      	adds	r7, #176	; 0xb0
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000

08001bdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bf2:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <MX_ADC1_Init+0xc0>)
 8001bf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c12:	2204      	movs	r2, #4
 8001c14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c52:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c54:	f001 faae 	bl	80031b4 <HAL_ADC_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001c5e:	f000 fc95 	bl	800258c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_ADC1_Init+0xc4>)
 8001c64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c66:	2306      	movs	r3, #6
 8001c68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c6e:	237f      	movs	r3, #127	; 0x7f
 8001c70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c72:	2304      	movs	r3, #4
 8001c74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001c80:	f001 fbe0 	bl	8003444 <HAL_ADC_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c8a:	f000 fc7f 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20008604 	.word	0x20008604
 8001c9c:	50040000 	.word	0x50040000
 8001ca0:	19200040 	.word	0x19200040

08001ca4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <MX_CAN1_Init+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cc6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001cf4:	4804      	ldr	r0, [pc, #16]	; (8001d08 <MX_CAN1_Init+0x64>)
 8001cf6:	f001 ff85 	bl	8003c04 <HAL_CAN_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d00:	f000 fc44 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20008790 	.word	0x20008790
 8001d0c:	40006400 	.word	0x40006400

08001d10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <MX_I2C1_Init+0x78>)
 8001d18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d4a:	480e      	ldr	r0, [pc, #56]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d4c:	f003 f876 	bl	8004e3c <HAL_I2C_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d56:	f000 fc19 	bl	800258c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4809      	ldr	r0, [pc, #36]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d5e:	f003 fdcf 	bl	8005900 <HAL_I2CEx_ConfigAnalogFilter>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d68:	f000 fc10 	bl	800258c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_I2C1_Init+0x74>)
 8001d70:	f003 fe11 	bl	8005996 <HAL_I2CEx_ConfigDigitalFilter>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d7a:	f000 fc07 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20008568 	.word	0x20008568
 8001d88:	40005400 	.word	0x40005400

08001d8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <MX_I2C3_Init+0x78>)
 8001d94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001dc6:	480e      	ldr	r0, [pc, #56]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001dc8:	f003 f838 	bl	8004e3c <HAL_I2C_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001dd2:	f000 fbdb 	bl	800258c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4809      	ldr	r0, [pc, #36]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001dda:	f003 fd91 	bl	8005900 <HAL_I2CEx_ConfigAnalogFilter>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001de4:	f000 fbd2 	bl	800258c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001de8:	2100      	movs	r1, #0
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_I2C3_Init+0x74>)
 8001dec:	f003 fdd3 	bl	8005996 <HAL_I2CEx_ConfigDigitalFilter>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001df6:	f000 fbc9 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200084a8 	.word	0x200084a8
 8001e04:	40005c00 	.word	0x40005c00

08001e08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b096      	sub	sp, #88	; 0x58
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	222c      	movs	r2, #44	; 0x2c
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f009 f829 	bl	800ae8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e3a:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001e3c:	4a45      	ldr	r2, [pc, #276]	; (8001f54 <MX_TIM1_Init+0x14c>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e40:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e4c:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e60:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e66:	483a      	ldr	r0, [pc, #232]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001e68:	f005 f858 	bl	8006f1c <HAL_TIM_PWM_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001e72:	f000 fb8b 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e86:	4619      	mov	r1, r3
 8001e88:	4831      	ldr	r0, [pc, #196]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001e8a:	f005 fdd7 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e94:	f000 fb7a 	bl	800258c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e98:	2360      	movs	r3, #96	; 0x60
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4824      	ldr	r0, [pc, #144]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001ebe:	f005 f9a3 	bl	8007208 <HAL_TIM_PWM_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ec8:	f000 fb60 	bl	800258c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	481e      	ldr	r0, [pc, #120]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001ed6:	f005 f997 	bl	8007208 <HAL_TIM_PWM_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001ee0:	f000 fb54 	bl	800258c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ee8:	2208      	movs	r2, #8
 8001eea:	4619      	mov	r1, r3
 8001eec:	4818      	ldr	r0, [pc, #96]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001eee:	f005 f98b 	bl	8007208 <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001ef8:	f000 fb48 	bl	800258c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4807      	ldr	r0, [pc, #28]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001f32:	f005 fde9 	bl	8007b08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001f3c:	f000 fb26 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <MX_TIM1_Init+0x148>)
 8001f42:	f000 fca5 	bl	8002890 <HAL_TIM_MspPostInit>

}
 8001f46:	bf00      	nop
 8001f48:	3758      	adds	r7, #88	; 0x58
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200086b0 	.word	0x200086b0
 8001f54:	40012c00 	.word	0x40012c00

08001f58 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b096      	sub	sp, #88	; 0x58
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	222c      	movs	r2, #44	; 0x2c
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f008 ff81 	bl	800ae8c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <MX_TIM15_Init+0x100>)
 8001f8c:	4a33      	ldr	r2, [pc, #204]	; (800205c <MX_TIM15_Init+0x104>)
 8001f8e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <MX_TIM15_Init+0x100>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f96:	4b30      	ldr	r3, [pc, #192]	; (8002058 <MX_TIM15_Init+0x100>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <MX_TIM15_Init+0x100>)
 8001f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <MX_TIM15_Init+0x100>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <MX_TIM15_Init+0x100>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <MX_TIM15_Init+0x100>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001fb6:	4828      	ldr	r0, [pc, #160]	; (8002058 <MX_TIM15_Init+0x100>)
 8001fb8:	f004 ffb0 	bl	8006f1c <HAL_TIM_PWM_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001fc2:	f000 fae3 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001fce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4820      	ldr	r0, [pc, #128]	; (8002058 <MX_TIM15_Init+0x100>)
 8001fd6:	f005 fd31 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001fe0:	f000 fad4 	bl	800258c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe4:	2360      	movs	r3, #96	; 0x60
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002004:	2204      	movs	r2, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4813      	ldr	r0, [pc, #76]	; (8002058 <MX_TIM15_Init+0x100>)
 800200a:	f005 f8fd 	bl	8007208 <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002014:	f000 faba 	bl	800258c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002030:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4807      	ldr	r0, [pc, #28]	; (8002058 <MX_TIM15_Init+0x100>)
 800203c:	f005 fd64 	bl	8007b08 <HAL_TIMEx_ConfigBreakDeadTime>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8002046:	f000 faa1 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <MX_TIM15_Init+0x100>)
 800204c:	f000 fc20 	bl	8002890 <HAL_TIM_MspPostInit>

}
 8002050:	bf00      	nop
 8002052:	3758      	adds	r7, #88	; 0x58
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200085b4 	.word	0x200085b4
 800205c:	40014000 	.word	0x40014000

08002060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <MX_USART2_UART_Init+0x5c>)
 8002068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 800206c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002086:	220c      	movs	r2, #12
 8002088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 80020a4:	f005 fdc6 	bl	8007c34 <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020ae:	f000 fa6d 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000870c 	.word	0x2000870c
 80020bc:	40004400 	.word	0x40004400

080020c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MX_DMA_Init+0x48>)
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <MX_DMA_Init+0x48>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6493      	str	r3, [r2, #72]	; 0x48
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <MX_DMA_Init+0x48>)
 80020d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2105      	movs	r1, #5
 80020e2:	2010      	movs	r0, #16
 80020e4:	f002 fbae 	bl	8004844 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80020e8:	2010      	movs	r0, #16
 80020ea:	f002 fbc7 	bl	800487c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2105      	movs	r1, #5
 80020f2:	2011      	movs	r0, #17
 80020f4:	f002 fba6 	bl	8004844 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80020f8:	2011      	movs	r0, #17
 80020fa:	f002 fbbf 	bl	800487c <HAL_NVIC_EnableIRQ>

}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <MX_GPIO_Init+0x5c>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a14      	ldr	r2, [pc, #80]	; (8002168 <MX_GPIO_Init+0x5c>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_GPIO_Init+0x5c>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_GPIO_Init+0x5c>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <MX_GPIO_Init+0x5c>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_GPIO_Init+0x5c>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_GPIO_Init+0x5c>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <MX_GPIO_Init+0x5c>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_GPIO_Init+0x5c>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	b0bf      	sub	sp, #252	; 0xfc
 8002170:	af10      	add	r7, sp, #64	; 0x40
 8002172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	  char msg[50];
	  uint8_t canPacketMSB[8];
	  uint8_t canPacketLSB[8]={1,2,3,4,5,6,7,8};
 8002174:	4aa4      	ldr	r2, [pc, #656]	; (8002408 <StartDefaultTask+0x29c>)
 8002176:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800217a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800217e:	e883 0003 	stmia.w	r3, {r0, r1}
	  uint8_t canPacketLSB2[8]={9,10,11,12,13,14,15,16};
 8002182:	4aa2      	ldr	r2, [pc, #648]	; (800240c <StartDefaultTask+0x2a0>)
 8002184:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800218c:	e883 0003 	stmia.w	r3, {r0, r1}
	  uint16_t canPacketLSB3[16]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
 8002190:	4b9f      	ldr	r3, [pc, #636]	; (8002410 <StartDefaultTask+0x2a4>)
 8002192:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002196:	461d      	mov	r5, r3
 8002198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	  for(;;){
		    for(int i=0; i<12; i++){
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021aa:	e00a      	b.n	80021c2 <StartDefaultTask+0x56>
		        _channel_readings[i]=0;
 80021ac:	4a99      	ldr	r2, [pc, #612]	; (8002414 <StartDefaultTask+0x2a8>)
 80021ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021b2:	2100      	movs	r1, #0
 80021b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		    for(int i=0; i<12; i++){
 80021b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021bc:	3301      	adds	r3, #1
 80021be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021c6:	2b0b      	cmp	r3, #11
 80021c8:	ddf0      	ble.n	80021ac <StartDefaultTask+0x40>
		    }

		    //AS7341 initialize
		    AS7341begin(hi2c1);
 80021ca:	4e93      	ldr	r6, [pc, #588]	; (8002418 <StartDefaultTask+0x2ac>)
 80021cc:	466d      	mov	r5, sp
 80021ce:	f106 0410 	add.w	r4, r6, #16
 80021d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80021e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80021e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021ea:	f7fe fe59 	bl	8000ea0 <AS7341begin>
		    AS7341init(0x01);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff f938 	bl	8001464 <AS7341init>

			//configure integration time
		    setATIME(100);
 80021f4:	2064      	movs	r0, #100	; 0x64
 80021f6:	f7fe feaf 	bl	8000f58 <setATIME>
		    setASTEP(0xE7);
 80021fa:	20e7      	movs	r0, #231	; 0xe7
 80021fc:	f7fe fe68 	bl	8000ed0 <setASTEP>
		    setGain(AS7341_GAIN_256X);
 8002200:	2009      	movs	r0, #9
 8002202:	f7fe fed1 	bl	8000fa8 <setGain>

		    readAllChannels(_channel_readings);
 8002206:	4883      	ldr	r0, [pc, #524]	; (8002414 <StartDefaultTask+0x2a8>)
 8002208:	f7fe fef6 	bl	8000ff8 <readAllChannels>

		    //get all channel
		    int a = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		    for(int i=0; i<8; i++){
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002218:	e030      	b.n	800227c <StartDefaultTask+0x110>
		    	if(i%2==0){
 800221a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d111      	bne.n	800224a <StartDefaultTask+0xde>
		    		canPacketMSB[i]=getChannel(a)>>8;
 8002226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fff5 	bl	800121c <getChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	b29b      	uxth	r3, r3
 8002238:	b2d9      	uxtb	r1, r3
 800223a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800223e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002242:	4413      	add	r3, r2
 8002244:	460a      	mov	r2, r1
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e013      	b.n	8002272 <StartDefaultTask+0x106>
		    	}
		    	else{
		    		canPacketMSB[i]=getChannel(a)&0x00FF;
 800224a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe ffe3 	bl	800121c <getChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	b2d9      	uxtb	r1, r3
 800225a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800225e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002262:	4413      	add	r3, r2
 8002264:	460a      	mov	r2, r1
 8002266:	701a      	strb	r2, [r3, #0]
		    		a++;
 8002268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800226c:	3301      	adds	r3, #1
 800226e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		    for(int i=0; i<8; i++){
 8002272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002276:	3301      	adds	r3, #1
 8002278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800227c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002280:	2b07      	cmp	r3, #7
 8002282:	ddca      	ble.n	800221a <StartDefaultTask+0xae>
		    	}
		    }


		    for(int i=0; i<12; i++){
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800228a:	e022      	b.n	80022d2 <StartDefaultTask+0x166>
			    sprintf(msg, "getChannel %d = %x\r\n",i+1,  getChannel(i));
 800228c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002290:	1c5c      	adds	r4, r3, #1
 8002292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002296:	b2db      	uxtb	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe ffbf 	bl	800121c <getChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80022a4:	4622      	mov	r2, r4
 80022a6:	495d      	ldr	r1, [pc, #372]	; (800241c <StartDefaultTask+0x2b0>)
 80022a8:	f009 fa62 	bl	800b770 <siprintf>
			    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80022ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fd ff8d 	bl	80001d0 <strlen>
 80022b6:	4603      	mov	r3, r0
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	4857      	ldr	r0, [pc, #348]	; (8002420 <StartDefaultTask+0x2b4>)
 80022c4:	f005 fd04 	bl	8007cd0 <HAL_UART_Transmit>
		    for(int i=0; i<12; i++){
 80022c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022cc:	3301      	adds	r3, #1
 80022ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d6:	2b0b      	cmp	r3, #11
 80022d8:	ddd8      	ble.n	800228c <StartDefaultTask+0x120>
		    }


		    sprintf(msg, "getThermocoupleTemp = %d\r\n",getThermocoupleTemp(1));
 80022da:	2001      	movs	r0, #1
 80022dc:	f7ff fa04 	bl	80016e8 <getThermocoupleTemp>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022e8:	494e      	ldr	r1, [pc, #312]	; (8002424 <StartDefaultTask+0x2b8>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f009 fa40 	bl	800b770 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80022f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fd ff6b 	bl	80001d0 <strlen>
 80022fa:	4603      	mov	r3, r0
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	4846      	ldr	r0, [pc, #280]	; (8002420 <StartDefaultTask+0x2b4>)
 8002308:	f005 fce2 	bl	8007cd0 <HAL_UART_Transmit>

		    enableFlickerDetection(1);
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff f921 	bl	8001554 <enableFlickerDetection>
		    sprintf(msg, "getFlickerDetectStatus = %d\r\n",getFlickerDetectStatus());
 8002312:	f7ff f947 	bl	80015a4 <getFlickerDetectStatus>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800231e:	4942      	ldr	r1, [pc, #264]	; (8002428 <StartDefaultTask+0x2bc>)
 8002320:	4618      	mov	r0, r3
 8002322:	f009 fa25 	bl	800b770 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002326:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800232a:	4618      	mov	r0, r3
 800232c:	f7fd ff50 	bl	80001d0 <strlen>
 8002330:	4603      	mov	r3, r0
 8002332:	b29a      	uxth	r2, r3
 8002334:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	4838      	ldr	r0, [pc, #224]	; (8002420 <StartDefaultTask+0x2b4>)
 800233e:	f005 fcc7 	bl	8007cd0 <HAL_UART_Transmit>
		    //	sprintf(msg,"HAL NOK\r\n");
		   // 	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
		    //}

		    canPacketStruct b;
		    b.CH1to3[0]=0;
 8002342:	2300      	movs	r3, #0
 8002344:	853b      	strh	r3, [r7, #40]	; 0x28
		    b.CH1to3[1]=getChannel(0);
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe ff68 	bl	800121c <getChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	857b      	strh	r3, [r7, #42]	; 0x2a
		    b.CH1to3[2]=getChannel(1);
 8002350:	2001      	movs	r0, #1
 8002352:	f7fe ff63 	bl	800121c <getChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	85bb      	strh	r3, [r7, #44]	; 0x2c
		    b.CH1to3[3]=getChannel(2);
 800235a:	2002      	movs	r0, #2
 800235c:	f7fe ff5e 	bl	800121c <getChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	85fb      	strh	r3, [r7, #46]	; 0x2e

		    b.CH4to5[0]=1;
 8002364:	2301      	movs	r3, #1
 8002366:	85fb      	strh	r3, [r7, #46]	; 0x2e
		    b.CH4to5[1]=getChannel(3);
 8002368:	2003      	movs	r0, #3
 800236a:	f7fe ff57 	bl	800121c <getChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	863b      	strh	r3, [r7, #48]	; 0x30
		    b.CH4to5[2]=getChannel(4);
 8002372:	2004      	movs	r0, #4
 8002374:	f7fe ff52 	bl	800121c <getChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	867b      	strh	r3, [r7, #50]	; 0x32
		    b.CH4to5[3]=getChannel(5);
 800237c:	2005      	movs	r0, #5
 800237e:	f7fe ff4d 	bl	800121c <getChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	86bb      	strh	r3, [r7, #52]	; 0x34

		    b.CH6to8[0]=2;
 8002386:	2302      	movs	r3, #2
 8002388:	86bb      	strh	r3, [r7, #52]	; 0x34
		    b.CH6to8[1]=getChannel(6);
 800238a:	2006      	movs	r0, #6
 800238c:	f7fe ff46 	bl	800121c <getChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	86fb      	strh	r3, [r7, #54]	; 0x36
		    b.CH6to8[2]=getChannel(7);
 8002394:	2007      	movs	r0, #7
 8002396:	f7fe ff41 	bl	800121c <getChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	873b      	strh	r3, [r7, #56]	; 0x38
		    b.CH6to8[3]=getChannel(8);
 800239e:	2008      	movs	r0, #8
 80023a0:	f7fe ff3c 	bl	800121c <getChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	877b      	strh	r3, [r7, #58]	; 0x3a

		    uint16_t buff[12];
		    getAllChannels(buff);
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe ff47 	bl	8001240 <getAllChannels>

		    HAL_CAN_AddTxMessage(&hcan1,&TxHeader,buff,&TxMailbox);
 80023b2:	f107 020c 	add.w	r2, r7, #12
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <StartDefaultTask+0x2c0>)
 80023b8:	491d      	ldr	r1, [pc, #116]	; (8002430 <StartDefaultTask+0x2c4>)
 80023ba:	481e      	ldr	r0, [pc, #120]	; (8002434 <StartDefaultTask+0x2c8>)
 80023bc:	f001 fe2b 	bl	8004016 <HAL_CAN_AddTxMessage>
		    //HAL_CAN_AddTxMessage(&hcan1,&TxHeader,b.CH1to3,&TxMailbox);
		    //HAL_CAN_AddTxMessage(&hcan1,&TxHeader,b.CH4to5,&TxMailbox);
		    //HAL_CAN_AddTxMessage(&hcan1,&TxHeader,b.CH6to8,&TxMailbox);
		    while(HAL_CAN_IsTxMessagePending(&hcan1,TxMailbox)!=0);
 80023c0:	bf00      	nop
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <StartDefaultTask+0x2c0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4619      	mov	r1, r3
 80023c8:	481a      	ldr	r0, [pc, #104]	; (8002434 <StartDefaultTask+0x2c8>)
 80023ca:	f001 feff 	bl	80041cc <HAL_CAN_IsTxMessagePending>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f6      	bne.n	80023c2 <StartDefaultTask+0x256>

		    //HAL_CAN_AddTxMessage(&hcan1,&TxHeader,canPacketLSB2,&TxMailbox);
		    //while(HAL_CAN_IsTxMessagePending(&hcan1,TxMailbox)!=0);

		    sprintf(msg, "b.CH1to3[0] %x\r\n", b.CH4to5[0]);
 80023d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023d6:	461a      	mov	r2, r3
 80023d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023dc:	4916      	ldr	r1, [pc, #88]	; (8002438 <StartDefaultTask+0x2cc>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f009 f9c6 	bl	800b770 <siprintf>
		    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80023e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fd fef1 	bl	80001d0 <strlen>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	4809      	ldr	r0, [pc, #36]	; (8002420 <StartDefaultTask+0x2b4>)
 80023fc:	f005 fc68 	bl	8007cd0 <HAL_UART_Transmit>
		    osDelay(100);
 8002400:	2064      	movs	r0, #100	; 0x64
 8002402:	f006 f98d 	bl	8008720 <osDelay>
	  for(;;){
 8002406:	e6cd      	b.n	80021a4 <StartDefaultTask+0x38>
 8002408:	0800dc54 	.word	0x0800dc54
 800240c:	0800dc5c 	.word	0x0800dc5c
 8002410:	0800dc64 	.word	0x0800dc64
 8002414:	20008444 	.word	0x20008444
 8002418:	20008568 	.word	0x20008568
 800241c:	0800dbec 	.word	0x0800dbec
 8002420:	2000870c 	.word	0x2000870c
 8002424:	0800dc04 	.word	0x0800dc04
 8002428:	0800dc20 	.word	0x0800dc20
 800242c:	20008700 	.word	0x20008700
 8002430:	200087b8 	.word	0x200087b8
 8002434:	20008790 	.word	0x20008790
 8002438:	0800dc40 	.word	0x0800dc40

0800243c <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b094      	sub	sp, #80	; 0x50
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */

	  char msg[50];
	  uint8_t read[2]={0};
 8002444:	2300      	movs	r3, #0
 8002446:	823b      	strh	r3, [r7, #16]
	  uint16_t readtest;
	  float readfloat=0.0;
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint8_t TH = 0x00;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  uint8_t TV = 0x01;
 8002454:	2301      	movs	r3, #1
 8002456:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	  uint8_t TC = 0x02;
 800245a:	2302      	movs	r3, #2
 800245c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	  uint8_t tempReg[] = {TH,TV,TC};
 8002460:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002464:	733b      	strb	r3, [r7, #12]
 8002466:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800246a:	737b      	strb	r3, [r7, #13]
 800246c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002470:	73bb      	strb	r3, [r7, #14]

	  uint8_t data[1]={TH};
 8002472:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002476:	723b      	strb	r3, [r7, #8]
	  uint8_t MSB = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	  uint8_t LSB = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  HAL_StatusTypeDef status;
	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(10);
 8002484:	200a      	movs	r0, #10
 8002486:	f006 f94b 	bl	8008720 <osDelay>
 800248a:	e7fb      	b.n	8002484 <StartReadTempTask+0x48>

0800248c <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 800248c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248e:	b0a7      	sub	sp, #156	; 0x9c
 8002490:	af10      	add	r7, sp, #64	; 0x40
 8002492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  char msg[50];
  uint16_t sharedvar=32;
 8002494:	2320      	movs	r3, #32
 8002496:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  uint16_t sharedchannel=0xFFFF;
 800249a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  uint16_t shareddelay = 20;
 80024a2:	2314      	movs	r3, #20
 80024a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	 //turn off all LED
	 //all_led_off(&hi2c1, I2C_address);

	 //uint16_t channel = 0b1001001110010101;
	 //uint16_t channel = sharedchannel;
  	  PCA9685begin(hi2c3,0);
 80024a8:	4e2e      	ldr	r6, [pc, #184]	; (8002564 <StartReadLightTask+0xd8>)
 80024aa:	2300      	movs	r3, #0
 80024ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80024ae:	466d      	mov	r5, sp
 80024b0:	f106 0410 	add.w	r4, r6, #16
 80024b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80024c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80024c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80024cc:	f7ff f974 	bl	80017b8 <PCA9685begin>
  	  pca9685_init(0x80);
 80024d0:	2080      	movs	r0, #128	; 0x80
 80024d2:	f7ff f989 	bl	80017e8 <pca9685_init>
  	  uint32_t tickTab[3];
	 for(;;)
	 {
		 //osDelay(shareddelay);

		 for(int i=0; i<4096/sharedvar; i++){
 80024d6:	2300      	movs	r3, #0
 80024d8:	657b      	str	r3, [r7, #84]	; 0x54
 80024da:	e018      	b.n	800250e <StartReadLightTask+0x82>
			pca9685_mult_pwm(0x80, sharedchannel, 0, 4095-(sharedvar*i));
 80024dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80024e4:	fb12 f303 	smulbb	r3, r2, r3
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80024ee:	330f      	adds	r3, #15
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80024f6:	2200      	movs	r2, #0
 80024f8:	2080      	movs	r0, #128	; 0x80
 80024fa:	f7ff f9cf 	bl	800189c <pca9685_mult_pwm>
			//pca9685_pwm(&hi2c1, I2C_address, 15, 0, 4095-(sharedvar*i));
			osDelay(shareddelay);
 80024fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002502:	4618      	mov	r0, r3
 8002504:	f006 f90c 	bl	8008720 <osDelay>
		 for(int i=0; i<4096/sharedvar; i++){
 8002508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250a:	3301      	adds	r3, #1
 800250c:	657b      	str	r3, [r7, #84]	; 0x54
 800250e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002516:	fb92 f3f3 	sdiv	r3, r2, r3
 800251a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800251c:	429a      	cmp	r2, r3
 800251e:	dbdd      	blt.n	80024dc <StartReadLightTask+0x50>

		 }


	 	 for(int i=0; i<4096/sharedvar; i++){
 8002520:	2300      	movs	r3, #0
 8002522:	653b      	str	r3, [r7, #80]	; 0x50
 8002524:	e014      	b.n	8002550 <StartReadLightTask+0xc4>
	 		pca9685_mult_pwm(0x80, sharedchannel, 0, (sharedvar*i));
 8002526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002528:	b29b      	uxth	r3, r3
 800252a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800252e:	fb12 f303 	smulbb	r3, r2, r3
 8002532:	b29b      	uxth	r3, r3
 8002534:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8002538:	2200      	movs	r2, #0
 800253a:	2080      	movs	r0, #128	; 0x80
 800253c:	f7ff f9ae 	bl	800189c <pca9685_mult_pwm>
	 		//pca9685_pwm(&hi2c1, I2C_address, 15 ,0, 4095-(sharedvar*i));
	 		osDelay(shareddelay);
 8002540:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002544:	4618      	mov	r0, r3
 8002546:	f006 f8eb 	bl	8008720 <osDelay>
	 	 for(int i=0; i<4096/sharedvar; i++){
 800254a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254c:	3301      	adds	r3, #1
 800254e:	653b      	str	r3, [r7, #80]	; 0x50
 8002550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002558:	fb92 f3f3 	sdiv	r3, r2, r3
 800255c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800255e:	429a      	cmp	r2, r3
 8002560:	dbe1      	blt.n	8002526 <StartReadLightTask+0x9a>
		 for(int i=0; i<4096/sharedvar; i++){
 8002562:	e7b8      	b.n	80024d6 <StartReadLightTask+0x4a>
 8002564:	200084a8 	.word	0x200084a8

08002568 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800257a:	f000 fc6f 	bl	8002e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40001000 	.word	0x40001000

0800258c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8002590:	e7fe      	b.n	8002590 <Error_Handler+0x4>
	...

08002594 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_MspInit+0x4c>)
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_MspInit+0x4c>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6613      	str	r3, [r2, #96]	; 0x60
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_MspInit+0x4c>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_MspInit+0x4c>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_MspInit+0x4c>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_MspInit+0x4c>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	210f      	movs	r1, #15
 80025ce:	f06f 0001 	mvn.w	r0, #1
 80025d2:	f002 f937 	bl	8004844 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a15      	ldr	r2, [pc, #84]	; (8002658 <HAL_ADC_MspInit+0x74>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d124      	bne.n	8002650 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_ADC_MspInit+0x78>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_ADC_MspInit+0x78>)
 800260c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_ADC_MspInit+0x78>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <HAL_ADC_MspInit+0x78>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <HAL_ADC_MspInit+0x78>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_ADC_MspInit+0x78>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002636:	2372      	movs	r3, #114	; 0x72
 8002638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800263a:	230b      	movs	r3, #11
 800263c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264c:	f002 fa8c 	bl	8004b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002650:	bf00      	nop
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	50040000 	.word	0x50040000
 800265c:	40021000 	.word	0x40021000

08002660 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a20      	ldr	r2, [pc, #128]	; (8002700 <HAL_CAN_MspInit+0xa0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d139      	bne.n	80026f6 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_CAN_MspInit+0xa4>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <HAL_CAN_MspInit+0xa4>)
 8002688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_CAN_MspInit+0xa4>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_CAN_MspInit+0xa4>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_CAN_MspInit+0xa4>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_CAN_MspInit+0xa4>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80026c4:	2309      	movs	r3, #9
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4619      	mov	r1, r3
 80026ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d2:	f002 fa49 	bl	8004b68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2105      	movs	r1, #5
 80026da:	2013      	movs	r0, #19
 80026dc:	f002 f8b2 	bl	8004844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80026e0:	2013      	movs	r0, #19
 80026e2:	f002 f8cb 	bl	800487c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2105      	movs	r1, #5
 80026ea:	2014      	movs	r0, #20
 80026ec:	f002 f8aa 	bl	8004844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80026f0:	2014      	movs	r0, #20
 80026f2:	f002 f8c3 	bl	800487c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40006400 	.word	0x40006400
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	; 0x30
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a3c      	ldr	r2, [pc, #240]	; (8002818 <HAL_I2C_MspInit+0x110>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d128      	bne.n	800277c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_I2C_MspInit+0x114>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	4a3b      	ldr	r2, [pc, #236]	; (800281c <HAL_I2C_MspInit+0x114>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002736:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_I2C_MspInit+0x114>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002742:	23c0      	movs	r3, #192	; 0xc0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002746:	2312      	movs	r3, #18
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274a:	2301      	movs	r3, #1
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002752:	2304      	movs	r3, #4
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	4619      	mov	r1, r3
 800275c:	4830      	ldr	r0, [pc, #192]	; (8002820 <HAL_I2C_MspInit+0x118>)
 800275e:	f002 fa03 	bl	8004b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002762:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_I2C_MspInit+0x114>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	4a2d      	ldr	r2, [pc, #180]	; (800281c <HAL_I2C_MspInit+0x114>)
 8002768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800276c:	6593      	str	r3, [r2, #88]	; 0x58
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_I2C_MspInit+0x114>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800277a:	e049      	b.n	8002810 <HAL_I2C_MspInit+0x108>
  else if(hi2c->Instance==I2C3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a28      	ldr	r2, [pc, #160]	; (8002824 <HAL_I2C_MspInit+0x11c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d144      	bne.n	8002810 <HAL_I2C_MspInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_I2C_MspInit+0x114>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	4a24      	ldr	r2, [pc, #144]	; (800281c <HAL_I2C_MspInit+0x114>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_I2C_MspInit+0x114>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <HAL_I2C_MspInit+0x114>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	4a1e      	ldr	r2, [pc, #120]	; (800281c <HAL_I2C_MspInit+0x114>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <HAL_I2C_MspInit+0x114>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ba:	2312      	movs	r3, #18
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027be:	2301      	movs	r3, #1
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027c6:	2304      	movs	r3, #4
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d4:	f002 f9c8 	bl	8004b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027d8:	2310      	movs	r3, #16
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027dc:	2312      	movs	r3, #18
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e0:	2301      	movs	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e4:	2303      	movs	r3, #3
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027e8:	2304      	movs	r3, #4
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ec:	f107 031c 	add.w	r3, r7, #28
 80027f0:	4619      	mov	r1, r3
 80027f2:	480b      	ldr	r0, [pc, #44]	; (8002820 <HAL_I2C_MspInit+0x118>)
 80027f4:	f002 f9b8 	bl	8004b68 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_I2C_MspInit+0x114>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_I2C_MspInit+0x114>)
 80027fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_I2C_MspInit+0x114>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
}
 8002810:	bf00      	nop
 8002812:	3730      	adds	r7, #48	; 0x30
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40005400 	.word	0x40005400
 800281c:	40021000 	.word	0x40021000
 8002820:	48000400 	.word	0x48000400
 8002824:	40005c00 	.word	0x40005c00

08002828 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a13      	ldr	r2, [pc, #76]	; (8002884 <HAL_TIM_PWM_MspInit+0x5c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10c      	bne.n	8002854 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_TIM_PWM_MspInit+0x60>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_TIM_PWM_MspInit+0x60>)
 8002840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002844:	6613      	str	r3, [r2, #96]	; 0x60
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_TIM_PWM_MspInit+0x60>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002852:	e010      	b.n	8002876 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0c      	ldr	r2, [pc, #48]	; (800288c <HAL_TIM_PWM_MspInit+0x64>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10b      	bne.n	8002876 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_TIM_PWM_MspInit+0x60>)
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_TIM_PWM_MspInit+0x60>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6613      	str	r3, [r2, #96]	; 0x60
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_TIM_PWM_MspInit+0x60>)
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40014000 	.word	0x40014000

08002890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a23      	ldr	r2, [pc, #140]	; (800293c <HAL_TIM_MspPostInit+0xac>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d11e      	bne.n	80028f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_TIM_MspPostInit+0xb0>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	4a22      	ldr	r2, [pc, #136]	; (8002940 <HAL_TIM_MspPostInit+0xb0>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_TIM_MspPostInit+0xb0>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80028ca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028dc:	2301      	movs	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ea:	f002 f93d 	bl	8004b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80028ee:	e021      	b.n	8002934 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM15)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <HAL_TIM_MspPostInit+0xb4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d11c      	bne.n	8002934 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_TIM_MspPostInit+0xb0>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_TIM_MspPostInit+0xb0>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_TIM_MspPostInit+0xb0>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002912:	2308      	movs	r3, #8
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002922:	230e      	movs	r3, #14
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002930:	f002 f91a 	bl	8004b68 <HAL_GPIO_Init>
}
 8002934:	bf00      	nop
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40014000 	.word	0x40014000

08002948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a4a      	ldr	r2, [pc, #296]	; (8002a90 <HAL_UART_MspInit+0x148>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f040 808d 	bne.w	8002a86 <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800296c:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <HAL_UART_MspInit+0x14c>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	4a48      	ldr	r2, [pc, #288]	; (8002a94 <HAL_UART_MspInit+0x14c>)
 8002972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002976:	6593      	str	r3, [r2, #88]	; 0x58
 8002978:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <HAL_UART_MspInit+0x14c>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_UART_MspInit+0x14c>)
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	4a42      	ldr	r2, [pc, #264]	; (8002a94 <HAL_UART_MspInit+0x14c>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002990:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <HAL_UART_MspInit+0x14c>)
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800299c:	2304      	movs	r3, #4
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ac:	2307      	movs	r3, #7
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ba:	f002 f8d5 	bl	8004b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80029d0:	2303      	movs	r3, #3
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029de:	f002 f8c3 	bl	8004b68 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_UART_MspInit+0x150>)
 80029e4:	4a2d      	ldr	r2, [pc, #180]	; (8002a9c <HAL_UART_MspInit+0x154>)
 80029e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_UART_MspInit+0x150>)
 80029ea:	2202      	movs	r2, #2
 80029ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ee:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <HAL_UART_MspInit+0x150>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_UART_MspInit+0x150>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029fa:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_UART_MspInit+0x150>)
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_UART_MspInit+0x150>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_UART_MspInit+0x150>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a0c:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_UART_MspInit+0x150>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_UART_MspInit+0x150>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a18:	481f      	ldr	r0, [pc, #124]	; (8002a98 <HAL_UART_MspInit+0x150>)
 8002a1a:	f001 ff3d 	bl	8004898 <HAL_DMA_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002a24:	f7ff fdb2 	bl	800258c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_UART_MspInit+0x150>)
 8002a2c:	671a      	str	r2, [r3, #112]	; 0x70
 8002a2e:	4a1a      	ldr	r2, [pc, #104]	; (8002a98 <HAL_UART_MspInit+0x150>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a36:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <HAL_UART_MspInit+0x15c>)
 8002a38:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a42:	2210      	movs	r2, #16
 8002a44:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a6a:	480d      	ldr	r0, [pc, #52]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a6c:	f001 ff14 	bl	8004898 <HAL_DMA_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8002a76:	f7ff fd89 	bl	800258c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a7e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a80:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <HAL_UART_MspInit+0x158>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a86:	bf00      	nop
 8002a88:	3728      	adds	r7, #40	; 0x28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40004400 	.word	0x40004400
 8002a94:	40021000 	.word	0x40021000
 8002a98:	20008520 	.word	0x20008520
 8002a9c:	4002006c 	.word	0x4002006c
 8002aa0:	20008668 	.word	0x20008668
 8002aa4:	40020080 	.word	0x40020080

08002aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	2036      	movs	r0, #54	; 0x36
 8002abe:	f001 fec1 	bl	8004844 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ac2:	2036      	movs	r0, #54	; 0x36
 8002ac4:	f001 feda 	bl	800487c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ac8:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <HAL_InitTick+0xa0>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <HAL_InitTick+0xa0>)
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <HAL_InitTick+0xa0>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ae0:	f107 0210 	add.w	r2, r7, #16
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 fdd8 	bl	80066a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002af0:	f003 fdaa 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8002af4:	4603      	mov	r3, r0
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <HAL_InitTick+0xa4>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	3b01      	subs	r3, #1
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_InitTick+0xa8>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_InitTick+0xac>)
 8002b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_InitTick+0xa8>)
 8002b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_InitTick+0xa8>)
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_InitTick+0xa8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_InitTick+0xa8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b28:	4809      	ldr	r0, [pc, #36]	; (8002b50 <HAL_InitTick+0xa8>)
 8002b2a:	f004 f941 	bl	8006db0 <HAL_TIM_Base_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b34:	4806      	ldr	r0, [pc, #24]	; (8002b50 <HAL_InitTick+0xa8>)
 8002b36:	f004 f99d 	bl	8006e74 <HAL_TIM_Base_Start_IT>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	e000      	b.n	8002b40 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3730      	adds	r7, #48	; 0x30
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	431bde83 	.word	0x431bde83
 8002b50:	200087ec 	.word	0x200087ec
 8002b54:	40001000 	.word	0x40001000

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <NMI_Handler+0x4>

08002b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <HardFault_Handler+0x4>

08002b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <MemManage_Handler+0x4>

08002b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b6e:	e7fe      	b.n	8002b6e <BusFault_Handler+0x4>

08002b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <UsageFault_Handler+0x4>

08002b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <DMA1_Channel6_IRQHandler+0x10>)
 8002b8a:	f001 ff3d 	bl	8004a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20008520 	.word	0x20008520

08002b98 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <DMA1_Channel7_IRQHandler+0x10>)
 8002b9e:	f001 ff33 	bl	8004a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20008668 	.word	0x20008668

08002bac <CAN1_TX_IRQHandler>:
/**
  * @brief This function handles CAN1 TX interrupt.
  */

void CAN1_TX_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <CAN1_TX_IRQHandler+0x10>)
 8002bb2:	f001 fb55 	bl	8004260 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20008790 	.word	0x20008790

08002bc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <CAN1_RX0_IRQHandler+0x10>)
 8002bc6:	f001 fb4b 	bl	8004260 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20008790 	.word	0x20008790

08002bd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <TIM6_DAC_IRQHandler+0x10>)
 8002bda:	f004 f9f6 	bl	8006fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200087ec 	.word	0x200087ec

08002be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
	return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_kill>:

int _kill(int pid, int sig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c02:	f008 f90b 	bl	800ae1c <__errno>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2216      	movs	r2, #22
 8002c0a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_exit>:

void _exit (int status)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ffe7 	bl	8002bf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c2a:	e7fe      	b.n	8002c2a <_exit+0x12>

08002c2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e00a      	b.n	8002c54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c3e:	f3af 8000 	nop.w
 8002c42:	4601      	mov	r1, r0
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	60ba      	str	r2, [r7, #8]
 8002c4a:	b2ca      	uxtb	r2, r1
 8002c4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3301      	adds	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dbf0      	blt.n	8002c3e <_read+0x12>
	}

return len;
 8002c5c:	687b      	ldr	r3, [r7, #4]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e009      	b.n	8002c8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	60ba      	str	r2, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	dbf1      	blt.n	8002c78 <_write+0x12>
	}
	return len;
 8002c94:	687b      	ldr	r3, [r7, #4]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <_close>:

int _close(int file)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc6:	605a      	str	r2, [r3, #4]
	return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <_isatty>:

int _isatty(int file)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
	return 1;
 8002cde:	2301      	movs	r3, #1
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
	return 0;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <_sbrk+0x5c>)
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <_sbrk+0x60>)
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <_sbrk+0x64>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <_sbrk+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d207      	bcs.n	8002d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d38:	f008 f870 	bl	800ae1c <__errno>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	220c      	movs	r2, #12
 8002d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	e009      	b.n	8002d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <_sbrk+0x64>)
 8002d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20010000 	.word	0x20010000
 8002d68:	00000400 	.word	0x00000400
 8002d6c:	20000200 	.word	0x20000200
 8002d70:	20008890 	.word	0x20008890

08002d74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <SystemInit+0x5c>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <SystemInit+0x5c>)
 8002d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <SystemInit+0x60>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a11      	ldr	r2, [pc, #68]	; (8002dd4 <SystemInit+0x60>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <SystemInit+0x60>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <SystemInit+0x60>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <SystemInit+0x60>)
 8002da0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002da4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002da8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <SystemInit+0x60>)
 8002dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002db0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <SystemInit+0x60>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <SystemInit+0x60>)
 8002db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <SystemInit+0x60>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ddc:	f7ff ffca 	bl	8002d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002de0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002de2:	e003      	b.n	8002dec <LoopCopyDataInit>

08002de4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002de6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002de8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002dea:	3104      	adds	r1, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002dec:	480a      	ldr	r0, [pc, #40]	; (8002e18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002df0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002df2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002df4:	d3f6      	bcc.n	8002de4 <CopyDataInit>
	ldr	r2, =_sbss
 8002df6:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002df8:	e002      	b.n	8002e00 <LoopFillZerobss>

08002dfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002dfa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002dfc:	f842 3b04 	str.w	r3, [r2], #4

08002e00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <LoopForever+0x16>)
	cmp	r2, r3
 8002e02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e04:	d3f9      	bcc.n	8002dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e06:	f008 f80f 	bl	800ae28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e0a:	f7fe fdaf 	bl	800196c <main>

08002e0e <LoopForever>:

LoopForever:
    b LoopForever
 8002e0e:	e7fe      	b.n	8002e0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e10:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002e14:	0800e144 	.word	0x0800e144
	ldr	r0, =_sdata
 8002e18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e1c:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8002e20:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8002e24:	2000888c 	.word	0x2000888c

08002e28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e28:	e7fe      	b.n	8002e28 <ADC1_IRQHandler>

08002e2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e34:	2003      	movs	r0, #3
 8002e36:	f001 fcfa 	bl	800482e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7ff fe34 	bl	8002aa8 <HAL_InitTick>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	71fb      	strb	r3, [r7, #7]
 8002e4a:	e001      	b.n	8002e50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e4c:	f7ff fba2 	bl	8002594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e50:	79fb      	ldrb	r3, [r7, #7]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_IncTick+0x20>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_IncTick+0x24>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_IncTick+0x24>)
 8002e6e:	6013      	str	r3, [r2, #0]
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000008 	.word	0x20000008
 8002e80:	20008838 	.word	0x20008838

08002e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return uwTick;
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <HAL_GetTick+0x14>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20008838 	.word	0x20008838

08002e9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	609a      	str	r2, [r3, #8]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3360      	adds	r3, #96	; 0x60
 8002f16:	461a      	mov	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <LL_ADC_SetOffset+0x44>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f3c:	bf00      	nop
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	03fff000 	.word	0x03fff000

08002f4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3360      	adds	r3, #96	; 0x60
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3360      	adds	r3, #96	; 0x60
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3330      	adds	r3, #48	; 0x30
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	4413      	add	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	211f      	movs	r1, #31
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	f003 011f 	and.w	r1, r3, #31
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003006:	b480      	push	{r7}
 8003008:	b087      	sub	sp, #28
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3314      	adds	r3, #20
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	0e5b      	lsrs	r3, r3, #25
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	4413      	add	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	0d1b      	lsrs	r3, r3, #20
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2107      	movs	r1, #7
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	401a      	ands	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	0d1b      	lsrs	r3, r3, #20
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	431a      	orrs	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003074:	43db      	mvns	r3, r3
 8003076:	401a      	ands	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0318 	and.w	r3, r3, #24
 800307e:	4908      	ldr	r1, [pc, #32]	; (80030a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003080:	40d9      	lsrs	r1, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	400b      	ands	r3, r1
 8003086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308a:	431a      	orrs	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	0007ffff 	.word	0x0007ffff

080030a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6093      	str	r3, [r2, #8]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030dc:	d101      	bne.n	80030e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003100:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003104:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800312c:	d101      	bne.n	8003132 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <LL_ADC_IsEnabled+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <LL_ADC_IsEnabled+0x1a>
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b04      	cmp	r3, #4
 8003178:	d101      	bne.n	800317e <LL_ADC_REG_IsConversionOngoing+0x18>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b08      	cmp	r3, #8
 800319e:	d101      	bne.n	80031a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e12c      	b.n	8003428 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d109      	bne.n	80031f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fa01 	bl	80025e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff67 	bl	80030c8 <LL_ADC_IsDeepPowerDownEnabled>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d004      	beq.n	800320a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff4d 	bl	80030a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff82 	bl	8003118 <LL_ADC_IsInternalRegulatorEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d115      	bne.n	8003246 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff66 	bl	80030f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003224:	4b82      	ldr	r3, [pc, #520]	; (8003430 <HAL_ADC_Init+0x27c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	4a82      	ldr	r2, [pc, #520]	; (8003434 <HAL_ADC_Init+0x280>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	099b      	lsrs	r3, r3, #6
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003238:	e002      	b.n	8003240 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	3b01      	subs	r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f9      	bne.n	800323a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ff64 	bl	8003118 <LL_ADC_IsInternalRegulatorEnabled>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10d      	bne.n	8003272 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f043 0210 	orr.w	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff75 	bl	8003166 <LL_ADC_REG_IsConversionOngoing>
 800327c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 80c5 	bne.w	8003416 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 80c1 	bne.w	8003416 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800329c:	f043 0202 	orr.w	r2, r3, #2
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff ff49 	bl	8003140 <LL_ADC_IsEnabled>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032b4:	4860      	ldr	r0, [pc, #384]	; (8003438 <HAL_ADC_Init+0x284>)
 80032b6:	f7ff ff43 	bl	8003140 <LL_ADC_IsEnabled>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4619      	mov	r1, r3
 80032c6:	485d      	ldr	r0, [pc, #372]	; (800343c <HAL_ADC_Init+0x288>)
 80032c8:	f7ff fde8 	bl	8002e9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	7e5b      	ldrb	r3, [r3, #25]
 80032d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80032dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80032e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d106      	bne.n	8003308 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	3b01      	subs	r3, #1
 8003300:	045b      	lsls	r3, r3, #17
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	4b45      	ldr	r3, [pc, #276]	; (8003440 <HAL_ADC_Init+0x28c>)
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	430b      	orrs	r3, r1
 8003336:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff12 	bl	8003166 <LL_ADC_REG_IsConversionOngoing>
 8003342:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff1f 	bl	800318c <LL_ADC_INJ_IsConversionOngoing>
 800334e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d13d      	bne.n	80033d2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d13a      	bne.n	80033d2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003360:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003368:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003378:	f023 0302 	bic.w	r3, r3, #2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	69b9      	ldr	r1, [r7, #24]
 8003382:	430b      	orrs	r3, r1
 8003384:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800338c:	2b01      	cmp	r3, #1
 800338e:	d118      	bne.n	80033c2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800339a:	f023 0304 	bic.w	r3, r3, #4
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033a6:	4311      	orrs	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033ac:	4311      	orrs	r1, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033b2:	430a      	orrs	r2, r1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	611a      	str	r2, [r3, #16]
 80033c0:	e007      	b.n	80033d2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10c      	bne.n	80033f4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f023 010f 	bic.w	r1, r3, #15
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
 80033f2:	e007      	b.n	8003404 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 020f 	bic.w	r2, r2, #15
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	f023 0303 	bic.w	r3, r3, #3
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
 8003414:	e007      	b.n	8003426 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003426:	7ffb      	ldrb	r3, [r7, #31]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000000 	.word	0x20000000
 8003434:	053e2d63 	.word	0x053e2d63
 8003438:	50040000 	.word	0x50040000
 800343c:	50040300 	.word	0x50040300
 8003440:	fff0c007 	.word	0xfff0c007

08003444 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b0b6      	sub	sp, #216	; 0xd8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x22>
 8003462:	2302      	movs	r3, #2
 8003464:	e3b9      	b.n	8003bda <HAL_ADC_ConfigChannel+0x796>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fe77 	bl	8003166 <LL_ADC_REG_IsConversionOngoing>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 839e 	bne.w	8003bbc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b05      	cmp	r3, #5
 8003486:	d824      	bhi.n	80034d2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	3b02      	subs	r3, #2
 800348e:	2b03      	cmp	r3, #3
 8003490:	d81b      	bhi.n	80034ca <HAL_ADC_ConfigChannel+0x86>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <HAL_ADC_ConfigChannel+0x54>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034a9 	.word	0x080034a9
 800349c:	080034b1 	.word	0x080034b1
 80034a0:	080034b9 	.word	0x080034b9
 80034a4:	080034c1 	.word	0x080034c1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	220c      	movs	r2, #12
 80034ac:	605a      	str	r2, [r3, #4]
          break;
 80034ae:	e011      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2212      	movs	r2, #18
 80034b4:	605a      	str	r2, [r3, #4]
          break;
 80034b6:	e00d      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2218      	movs	r2, #24
 80034bc:	605a      	str	r2, [r3, #4]
          break;
 80034be:	e009      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c6:	605a      	str	r2, [r3, #4]
          break;
 80034c8:	e004      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2206      	movs	r2, #6
 80034ce:	605a      	str	r2, [r3, #4]
          break;
 80034d0:	e000      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80034d2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f7ff fd64 	bl	8002fae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fe3b 	bl	8003166 <LL_ADC_REG_IsConversionOngoing>
 80034f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fe47 	bl	800318c <LL_ADC_INJ_IsConversionOngoing>
 80034fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003502:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003506:	2b00      	cmp	r3, #0
 8003508:	f040 81a6 	bne.w	8003858 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800350c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 81a1 	bne.w	8003858 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	461a      	mov	r2, r3
 8003524:	f7ff fd6f 	bl	8003006 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	08db      	lsrs	r3, r3, #3
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b04      	cmp	r3, #4
 8003548:	d00a      	beq.n	8003560 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6919      	ldr	r1, [r3, #16]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800355a:	f7ff fcd3 	bl	8002f04 <LL_ADC_SetOffset>
 800355e:	e17b      	b.n	8003858 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fcf0 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 800356c:	4603      	mov	r3, r0
 800356e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_ADC_ConfigChannel+0x148>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fce5 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 8003582:	4603      	mov	r3, r0
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	f003 021f 	and.w	r2, r3, #31
 800358a:	e01e      	b.n	80035ca <HAL_ADC_ConfigChannel+0x186>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fcda 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 8003598:	4603      	mov	r3, r0
 800359a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80035ba:	2320      	movs	r3, #32
 80035bc:	e004      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80035be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x19e>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0e9b      	lsrs	r3, r3, #26
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	e018      	b.n	8003614 <HAL_ADC_ConfigChannel+0x1d0>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80035f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80035fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003606:	2320      	movs	r3, #32
 8003608:	e004      	b.n	8003614 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800360a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003614:	429a      	cmp	r2, r3
 8003616:	d106      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fca9 	bl	8002f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fc8d 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 8003632:	4603      	mov	r3, r0
 8003634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x20e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fc82 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	0e9b      	lsrs	r3, r3, #26
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	e01e      	b.n	8003690 <HAL_ADC_ConfigChannel+0x24c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fc77 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003680:	2320      	movs	r3, #32
 8003682:	e004      	b.n	800368e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x264>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0e9b      	lsrs	r3, r3, #26
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	e018      	b.n	80036da <HAL_ADC_ConfigChannel+0x296>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80036bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80036c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80036cc:	2320      	movs	r3, #32
 80036ce:	e004      	b.n	80036da <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80036d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036da:	429a      	cmp	r2, r3
 80036dc:	d106      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	2101      	movs	r1, #1
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fc46 	bl	8002f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2102      	movs	r1, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fc2a 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x2d4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2102      	movs	r1, #2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fc1f 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 800370e:	4603      	mov	r3, r0
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	f003 021f 	and.w	r2, r3, #31
 8003716:	e01e      	b.n	8003756 <HAL_ADC_ConfigChannel+0x312>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2102      	movs	r1, #2
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fc14 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 8003724:	4603      	mov	r3, r0
 8003726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003736:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800373a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800373e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003746:	2320      	movs	r3, #32
 8003748:	e004      	b.n	8003754 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800374a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <HAL_ADC_ConfigChannel+0x32a>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	0e9b      	lsrs	r3, r3, #26
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	e016      	b.n	800379c <HAL_ADC_ConfigChannel+0x358>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800378e:	2320      	movs	r3, #32
 8003790:	e004      	b.n	800379c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800379c:	429a      	cmp	r2, r3
 800379e:	d106      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2102      	movs	r1, #2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fbe5 	bl	8002f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2103      	movs	r1, #3
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fbc9 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <HAL_ADC_ConfigChannel+0x396>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2103      	movs	r1, #3
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fbbe 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 80037d0:	4603      	mov	r3, r0
 80037d2:	0e9b      	lsrs	r3, r3, #26
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	e017      	b.n	800380a <HAL_ADC_ConfigChannel+0x3c6>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2103      	movs	r1, #3
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fbb3 	bl	8002f4c <LL_ADC_GetOffsetChannel>
 80037e6:	4603      	mov	r3, r0
 80037e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80037f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80037f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e003      	b.n	8003808 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x3de>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	0e9b      	lsrs	r3, r3, #26
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	e011      	b.n	8003846 <HAL_ADC_ConfigChannel+0x402>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003832:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800383a:	2320      	movs	r3, #32
 800383c:	e003      	b.n	8003846 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800383e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003846:	429a      	cmp	r2, r3
 8003848:	d106      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	2103      	movs	r1, #3
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fb90 	bl	8002f78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fc6f 	bl	8003140 <LL_ADC_IsEnabled>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 813f 	bne.w	8003ae8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6819      	ldr	r1, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f7ff fbf0 	bl	800305c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a8e      	ldr	r2, [pc, #568]	; (8003abc <HAL_ADC_ConfigChannel+0x678>)
 8003882:	4293      	cmp	r3, r2
 8003884:	f040 8130 	bne.w	8003ae8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x46c>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	0e9b      	lsrs	r3, r3, #26
 800389e:	3301      	adds	r3, #1
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2b09      	cmp	r3, #9
 80038a6:	bf94      	ite	ls
 80038a8:	2301      	movls	r3, #1
 80038aa:	2300      	movhi	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e019      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x4a0>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80038be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80038c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80038c8:	2320      	movs	r3, #32
 80038ca:	e003      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80038cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2b09      	cmp	r3, #9
 80038dc:	bf94      	ite	ls
 80038de:	2301      	movls	r3, #1
 80038e0:	2300      	movhi	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d079      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x4c0>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	0e9b      	lsrs	r3, r3, #26
 80038fa:	3301      	adds	r3, #1
 80038fc:	069b      	lsls	r3, r3, #26
 80038fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003902:	e015      	b.n	8003930 <HAL_ADC_ConfigChannel+0x4ec>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800391c:	2320      	movs	r3, #32
 800391e:	e003      	b.n	8003928 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	3301      	adds	r3, #1
 800392a:	069b      	lsls	r3, r3, #26
 800392c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x50c>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0e9b      	lsrs	r3, r3, #26
 8003942:	3301      	adds	r3, #1
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	e017      	b.n	8003980 <HAL_ADC_ConfigChannel+0x53c>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800395e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003968:	2320      	movs	r3, #32
 800396a:	e003      	b.n	8003974 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800396c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	ea42 0103 	orr.w	r1, r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x562>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0e9b      	lsrs	r3, r3, #26
 8003996:	3301      	adds	r3, #1
 8003998:	f003 021f 	and.w	r2, r3, #31
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	051b      	lsls	r3, r3, #20
 80039a4:	e018      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x594>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80039b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e003      	b.n	80039ca <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80039c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d8:	430b      	orrs	r3, r1
 80039da:	e080      	b.n	8003ade <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x5b4>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0e9b      	lsrs	r3, r3, #26
 80039ee:	3301      	adds	r3, #1
 80039f0:	069b      	lsls	r3, r3, #26
 80039f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039f6:	e015      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x5e0>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	fa93 f3a3 	rbit	r3, r3
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003a10:	2320      	movs	r3, #32
 8003a12:	e003      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	069b      	lsls	r3, r3, #26
 8003a20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x600>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	0e9b      	lsrs	r3, r3, #26
 8003a36:	3301      	adds	r3, #1
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	e017      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x630>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	61fb      	str	r3, [r7, #28]
  return result;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e003      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2101      	movs	r1, #1
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	ea42 0103 	orr.w	r1, r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x65c>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	0e9b      	lsrs	r3, r3, #26
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	3b1e      	subs	r3, #30
 8003a98:	051b      	lsls	r3, r3, #20
 8003a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	e01d      	b.n	8003adc <HAL_ADC_ConfigChannel+0x698>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	613b      	str	r3, [r7, #16]
  return result;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d103      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003ab8:	2320      	movs	r3, #32
 8003aba:	e005      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x684>
 8003abc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f003 021f 	and.w	r2, r3, #31
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3b1e      	subs	r3, #30
 8003ad6:	051b      	lsls	r3, r3, #20
 8003ad8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003adc:	430b      	orrs	r3, r1
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	6892      	ldr	r2, [r2, #8]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7ff fa8f 	bl	8003006 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <HAL_ADC_ConfigChannel+0x7a0>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d06c      	beq.n	8003bce <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003af4:	483c      	ldr	r0, [pc, #240]	; (8003be8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003af6:	f7ff f9f7 	bl	8002ee8 <LL_ADC_GetCommonPathInternalCh>
 8003afa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3a      	ldr	r2, [pc, #232]	; (8003bec <HAL_ADC_ConfigChannel+0x7a8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d127      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d121      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a35      	ldr	r2, [pc, #212]	; (8003bf0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d157      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b26:	4619      	mov	r1, r3
 8003b28:	482f      	ldr	r0, [pc, #188]	; (8003be8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003b2a:	f7ff f9ca 	bl	8002ec2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b2e:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	4a30      	ldr	r2, [pc, #192]	; (8003bf8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	4613      	mov	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b48:	e002      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f9      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b56:	e03a      	b.n	8003bce <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <HAL_ADC_ConfigChannel+0x7b8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d113      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x746>
 8003b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10d      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1f      	ldr	r2, [pc, #124]	; (8003bf0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d12a      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b80:	4619      	mov	r1, r3
 8003b82:	4819      	ldr	r0, [pc, #100]	; (8003be8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003b84:	f7ff f99d 	bl	8002ec2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b88:	e021      	b.n	8003bce <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d11c      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d116      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d111      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	480c      	ldr	r0, [pc, #48]	; (8003be8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003bb6:	f7ff f984 	bl	8002ec2 <LL_ADC_SetCommonPathInternalCh>
 8003bba:	e008      	b.n	8003bce <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	f043 0220 	orr.w	r2, r3, #32
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	37d8      	adds	r7, #216	; 0xd8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	80080000 	.word	0x80080000
 8003be8:	50040300 	.word	0x50040300
 8003bec:	c7520000 	.word	0xc7520000
 8003bf0:	50040000 	.word	0x50040000
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	053e2d63 	.word	0x053e2d63
 8003bfc:	cb840000 	.word	0xcb840000
 8003c00:	80000001 	.word	0x80000001

08003c04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e0ed      	b.n	8003df2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe fd1c 	bl	8002660 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0202 	bic.w	r2, r2, #2
 8003c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c38:	f7ff f924 	bl	8002e84 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c3e:	e012      	b.n	8003c66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c40:	f7ff f920 	bl	8002e84 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b0a      	cmp	r3, #10
 8003c4c:	d90b      	bls.n	8003c66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e0c5      	b.n	8003df2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e5      	bne.n	8003c40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c84:	f7ff f8fe 	bl	8002e84 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c8a:	e012      	b.n	8003cb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c8c:	f7ff f8fa 	bl	8002e84 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b0a      	cmp	r3, #10
 8003c98:	d90b      	bls.n	8003cb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2205      	movs	r2, #5
 8003caa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e09f      	b.n	8003df2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0e5      	beq.n	8003c8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	7e1b      	ldrb	r3, [r3, #24]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d108      	bne.n	8003cda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e007      	b.n	8003cea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7e5b      	ldrb	r3, [r3, #25]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d108      	bne.n	8003d04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e007      	b.n	8003d14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7e9b      	ldrb	r3, [r3, #26]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d108      	bne.n	8003d2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0220 	orr.w	r2, r2, #32
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	e007      	b.n	8003d3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0220 	bic.w	r2, r2, #32
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7edb      	ldrb	r3, [r3, #27]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d108      	bne.n	8003d58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0210 	bic.w	r2, r2, #16
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e007      	b.n	8003d68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0210 	orr.w	r2, r2, #16
 8003d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7f1b      	ldrb	r3, [r3, #28]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d108      	bne.n	8003d82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0208 	orr.w	r2, r2, #8
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e007      	b.n	8003d92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0208 	bic.w	r2, r2, #8
 8003d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7f5b      	ldrb	r3, [r3, #29]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d108      	bne.n	8003dac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0204 	orr.w	r2, r2, #4
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e007      	b.n	8003dbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	ea42 0103 	orr.w	r1, r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	1e5a      	subs	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b087      	sub	sp, #28
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e10:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d003      	beq.n	8003e20 <HAL_CAN_ConfigFilter+0x26>
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	f040 80aa 	bne.w	8003f74 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e26:	f043 0201 	orr.w	r2, r3, #1
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2201      	movs	r2, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d123      	bne.n	8003ea2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	401a      	ands	r2, r3
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	3248      	adds	r2, #72	; 0x48
 8003e82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e98:	6979      	ldr	r1, [r7, #20]
 8003e9a:	3348      	adds	r3, #72	; 0x48
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d122      	bne.n	8003ef0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003eca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3248      	adds	r2, #72	; 0x48
 8003ed0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ee4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ee6:	6979      	ldr	r1, [r7, #20]
 8003ee8:	3348      	adds	r3, #72	; 0x48
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	401a      	ands	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003f0a:	e007      	b.n	8003f1c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	401a      	ands	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003f36:	e007      	b.n	8003f48 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e006      	b.n	8003f82 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d12e      	bne.n	8004000 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0201 	bic.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fba:	f7fe ff63 	bl	8002e84 <HAL_GetTick>
 8003fbe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fc0:	e012      	b.n	8003fe8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fc2:	f7fe ff5f 	bl	8002e84 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b0a      	cmp	r3, #10
 8003fce:	d90b      	bls.n	8003fe8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2205      	movs	r2, #5
 8003fe0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e012      	b.n	800400e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e006      	b.n	800400e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004016:	b480      	push	{r7}
 8004018:	b089      	sub	sp, #36	; 0x24
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800402a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004034:	7ffb      	ldrb	r3, [r7, #31]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d003      	beq.n	8004042 <HAL_CAN_AddTxMessage+0x2c>
 800403a:	7ffb      	ldrb	r3, [r7, #31]
 800403c:	2b02      	cmp	r3, #2
 800403e:	f040 80b8 	bne.w	80041b2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004052:	2b00      	cmp	r3, #0
 8004054:	d105      	bne.n	8004062 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80a0 	beq.w	80041a2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	0e1b      	lsrs	r3, r3, #24
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d907      	bls.n	8004082 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e09e      	b.n	80041c0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004082:	2201      	movs	r2, #1
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	409a      	lsls	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	6809      	ldr	r1, [r1, #0]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3318      	adds	r3, #24
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	440b      	add	r3, r1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e00f      	b.n	80040d0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040c0:	68f9      	ldr	r1, [r7, #12]
 80040c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80040c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3318      	adds	r3, #24
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	440b      	add	r3, r1
 80040ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3318      	adds	r3, #24
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	440b      	add	r3, r1
 80040e0:	3304      	adds	r3, #4
 80040e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	7d1b      	ldrb	r3, [r3, #20]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d111      	bne.n	8004110 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3318      	adds	r3, #24
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	4413      	add	r3, r2
 80040f8:	3304      	adds	r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6811      	ldr	r1, [r2, #0]
 8004100:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	3318      	adds	r3, #24
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	440b      	add	r3, r1
 800410c:	3304      	adds	r3, #4
 800410e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3307      	adds	r3, #7
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	061a      	lsls	r2, r3, #24
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3306      	adds	r3, #6
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3305      	adds	r3, #5
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	4313      	orrs	r3, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	3204      	adds	r2, #4
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	4610      	mov	r0, r2
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	6811      	ldr	r1, [r2, #0]
 8004138:	ea43 0200 	orr.w	r2, r3, r0
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	440b      	add	r3, r1
 8004142:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004146:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3303      	adds	r3, #3
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	061a      	lsls	r2, r3, #24
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3302      	adds	r3, #2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3301      	adds	r3, #1
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	4313      	orrs	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	4610      	mov	r0, r2
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	ea43 0200 	orr.w	r2, r3, r0
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	440b      	add	r3, r1
 8004178:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800417c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	3318      	adds	r3, #24
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	4413      	add	r3, r2
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	6811      	ldr	r1, [r2, #0]
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3318      	adds	r3, #24
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	440b      	add	r3, r1
 800419c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e00e      	b.n	80041c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e006      	b.n	80041c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
  }
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3724      	adds	r7, #36	; 0x24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80041e2:	7afb      	ldrb	r3, [r7, #11]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d002      	beq.n	80041ee <HAL_CAN_IsTxMessagePending+0x22>
 80041e8:	7afb      	ldrb	r3, [r7, #11]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d10b      	bne.n	8004206 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	069b      	lsls	r3, r3, #26
 80041f8:	401a      	ands	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	069b      	lsls	r3, r3, #26
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004202:	2301      	movs	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004224:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d002      	beq.n	8004232 <HAL_CAN_ActivateNotification+0x1e>
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d109      	bne.n	8004246 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6959      	ldr	r1, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e006      	b.n	8004254 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
  }
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d07c      	beq.n	80043a0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d023      	beq.n	80042f8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2201      	movs	r2, #1
 80042b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f983 	bl	80045ce <HAL_CAN_TxMailbox0CompleteCallback>
 80042c8:	e016      	b.n	80042f8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
 80042dc:	e00c      	b.n	80042f8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	e002      	b.n	80042f8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f989 	bl	800460a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d024      	beq.n	800434c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f963 	bl	80045e2 <HAL_CAN_TxMailbox1CompleteCallback>
 800431c:	e016      	b.n	800434c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d004      	beq.n	8004332 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
 8004330:	e00c      	b.n	800434c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
 8004344:	e002      	b.n	800434c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f969 	bl	800461e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d024      	beq.n	80043a0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800435e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f943 	bl	80045f6 <HAL_CAN_TxMailbox2CompleteCallback>
 8004370:	e016      	b.n	80043a0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
 8004384:	e00c      	b.n	80043a0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
 8004398:	e002      	b.n	80043a0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f949 	bl	8004632 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2210      	movs	r2, #16
 80043c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d006      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2208      	movs	r2, #8
 80043de:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f93a 	bl	800465a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f921 	bl	8004646 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800441e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2210      	movs	r2, #16
 8004426:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d006      	beq.n	800444a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2208      	movs	r2, #8
 8004442:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f91c 	bl	8004682 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f903 	bl	800466e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d006      	beq.n	800448a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2210      	movs	r2, #16
 8004482:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f906 	bl	8004696 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2208      	movs	r2, #8
 80044a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f8ff 	bl	80046aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d07b      	beq.n	80045ae <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d072      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	f043 0302 	orr.w	r3, r3, #2
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	f043 0304 	orr.w	r3, r3, #4
 8004512:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800451a:	2b00      	cmp	r3, #0
 800451c:	d043      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004524:	2b00      	cmp	r3, #0
 8004526:	d03e      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800452e:	2b60      	cmp	r3, #96	; 0x60
 8004530:	d02b      	beq.n	800458a <HAL_CAN_IRQHandler+0x32a>
 8004532:	2b60      	cmp	r3, #96	; 0x60
 8004534:	d82e      	bhi.n	8004594 <HAL_CAN_IRQHandler+0x334>
 8004536:	2b50      	cmp	r3, #80	; 0x50
 8004538:	d022      	beq.n	8004580 <HAL_CAN_IRQHandler+0x320>
 800453a:	2b50      	cmp	r3, #80	; 0x50
 800453c:	d82a      	bhi.n	8004594 <HAL_CAN_IRQHandler+0x334>
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d019      	beq.n	8004576 <HAL_CAN_IRQHandler+0x316>
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d826      	bhi.n	8004594 <HAL_CAN_IRQHandler+0x334>
 8004546:	2b30      	cmp	r3, #48	; 0x30
 8004548:	d010      	beq.n	800456c <HAL_CAN_IRQHandler+0x30c>
 800454a:	2b30      	cmp	r3, #48	; 0x30
 800454c:	d822      	bhi.n	8004594 <HAL_CAN_IRQHandler+0x334>
 800454e:	2b10      	cmp	r3, #16
 8004550:	d002      	beq.n	8004558 <HAL_CAN_IRQHandler+0x2f8>
 8004552:	2b20      	cmp	r3, #32
 8004554:	d005      	beq.n	8004562 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004556:	e01d      	b.n	8004594 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f043 0308 	orr.w	r3, r3, #8
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004560:	e019      	b.n	8004596 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	f043 0310 	orr.w	r3, r3, #16
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800456a:	e014      	b.n	8004596 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f043 0320 	orr.w	r3, r3, #32
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004574:	e00f      	b.n	8004596 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800457e:	e00a      	b.n	8004596 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004588:	e005      	b.n	8004596 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004592:	e000      	b.n	8004596 <HAL_CAN_IRQHandler+0x336>
            break;
 8004594:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045a4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2204      	movs	r2, #4
 80045ac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f87c 	bl	80046be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80045c6:	bf00      	nop
 80045c8:	3728      	adds	r7, #40	; 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046f0:	4013      	ands	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004706:	4a04      	ldr	r2, [pc, #16]	; (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	60d3      	str	r3, [r2, #12]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <__NVIC_GetPriorityGrouping+0x18>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	f003 0307 	and.w	r3, r3, #7
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004746:	2b00      	cmp	r3, #0
 8004748:	db0b      	blt.n	8004762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	f003 021f 	and.w	r2, r3, #31
 8004750:	4907      	ldr	r1, [pc, #28]	; (8004770 <__NVIC_EnableIRQ+0x38>)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2001      	movs	r0, #1
 800475a:	fa00 f202 	lsl.w	r2, r0, r2
 800475e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e100 	.word	0xe000e100

08004774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	6039      	str	r1, [r7, #0]
 800477e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004784:	2b00      	cmp	r3, #0
 8004786:	db0a      	blt.n	800479e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	490c      	ldr	r1, [pc, #48]	; (80047c0 <__NVIC_SetPriority+0x4c>)
 800478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004792:	0112      	lsls	r2, r2, #4
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	440b      	add	r3, r1
 8004798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800479c:	e00a      	b.n	80047b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	4908      	ldr	r1, [pc, #32]	; (80047c4 <__NVIC_SetPriority+0x50>)
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	3b04      	subs	r3, #4
 80047ac:	0112      	lsls	r2, r2, #4
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	440b      	add	r3, r1
 80047b2:	761a      	strb	r2, [r3, #24]
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	e000e100 	.word	0xe000e100
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f1c3 0307 	rsb	r3, r3, #7
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	bf28      	it	cs
 80047e6:	2304      	movcs	r3, #4
 80047e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	3304      	adds	r3, #4
 80047ee:	2b06      	cmp	r3, #6
 80047f0:	d902      	bls.n	80047f8 <NVIC_EncodePriority+0x30>
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3b03      	subs	r3, #3
 80047f6:	e000      	b.n	80047fa <NVIC_EncodePriority+0x32>
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43da      	mvns	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	401a      	ands	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004810:	f04f 31ff 	mov.w	r1, #4294967295
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	43d9      	mvns	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004820:	4313      	orrs	r3, r2
         );
}
 8004822:	4618      	mov	r0, r3
 8004824:	3724      	adds	r7, #36	; 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff ff4c 	bl	80046d4 <__NVIC_SetPriorityGrouping>
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004856:	f7ff ff61 	bl	800471c <__NVIC_GetPriorityGrouping>
 800485a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	6978      	ldr	r0, [r7, #20]
 8004862:	f7ff ffb1 	bl	80047c8 <NVIC_EncodePriority>
 8004866:	4602      	mov	r2, r0
 8004868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ff80 	bl	8004774 <__NVIC_SetPriority>
}
 8004874:	bf00      	nop
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff ff54 	bl	8004738 <__NVIC_EnableIRQ>
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e098      	b.n	80049dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	4b4d      	ldr	r3, [pc, #308]	; (80049e8 <HAL_DMA_Init+0x150>)
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d80f      	bhi.n	80048d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b4b      	ldr	r3, [pc, #300]	; (80049ec <HAL_DMA_Init+0x154>)
 80048be:	4413      	add	r3, r2
 80048c0:	4a4b      	ldr	r2, [pc, #300]	; (80049f0 <HAL_DMA_Init+0x158>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	009a      	lsls	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a48      	ldr	r2, [pc, #288]	; (80049f4 <HAL_DMA_Init+0x15c>)
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40
 80048d4:	e00e      	b.n	80048f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	4b46      	ldr	r3, [pc, #280]	; (80049f8 <HAL_DMA_Init+0x160>)
 80048de:	4413      	add	r3, r2
 80048e0:	4a43      	ldr	r2, [pc, #268]	; (80049f0 <HAL_DMA_Init+0x158>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a42      	ldr	r2, [pc, #264]	; (80049fc <HAL_DMA_Init+0x164>)
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800490a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800494e:	d039      	beq.n	80049c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	4a27      	ldr	r2, [pc, #156]	; (80049f4 <HAL_DMA_Init+0x15c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d11a      	bne.n	8004990 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800495a:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <HAL_DMA_Init+0x168>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f003 031c 	and.w	r3, r3, #28
 8004966:	210f      	movs	r1, #15
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	4924      	ldr	r1, [pc, #144]	; (8004a00 <HAL_DMA_Init+0x168>)
 8004970:	4013      	ands	r3, r2
 8004972:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004974:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_DMA_Init+0x168>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004980:	f003 031c 	and.w	r3, r3, #28
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	491d      	ldr	r1, [pc, #116]	; (8004a00 <HAL_DMA_Init+0x168>)
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]
 800498e:	e019      	b.n	80049c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004990:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <HAL_DMA_Init+0x16c>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004998:	f003 031c 	and.w	r3, r3, #28
 800499c:	210f      	movs	r1, #15
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	4917      	ldr	r1, [pc, #92]	; (8004a04 <HAL_DMA_Init+0x16c>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80049aa:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <HAL_DMA_Init+0x16c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f003 031c 	and.w	r3, r3, #28
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	4911      	ldr	r1, [pc, #68]	; (8004a04 <HAL_DMA_Init+0x16c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40020407 	.word	0x40020407
 80049ec:	bffdfff8 	.word	0xbffdfff8
 80049f0:	cccccccd 	.word	0xcccccccd
 80049f4:	40020000 	.word	0x40020000
 80049f8:	bffdfbf8 	.word	0xbffdfbf8
 80049fc:	40020400 	.word	0x40020400
 8004a00:	400200a8 	.word	0x400200a8
 8004a04:	400204a8 	.word	0x400204a8

08004a08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	f003 031c 	and.w	r3, r3, #28
 8004a28:	2204      	movs	r2, #4
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d026      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x7a>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d021      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0204 	bic.w	r2, r2, #4
 8004a5a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	f003 021c 	and.w	r2, r3, #28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	2104      	movs	r1, #4
 8004a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a6e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d071      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004a80:	e06c      	b.n	8004b5c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	f003 031c 	and.w	r3, r3, #28
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d02e      	beq.n	8004af4 <HAL_DMA_IRQHandler+0xec>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d029      	beq.n	8004af4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10b      	bne.n	8004ac6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 020a 	bic.w	r2, r2, #10
 8004abc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	f003 021c 	and.w	r2, r3, #28
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	2102      	movs	r1, #2
 8004ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d038      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004af2:	e033      	b.n	8004b5c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	f003 031c 	and.w	r3, r3, #28
 8004afc:	2208      	movs	r2, #8
 8004afe:	409a      	lsls	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02a      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x156>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d025      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 020e 	bic.w	r2, r2, #14
 8004b20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	f003 021c 	and.w	r2, r3, #28
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2101      	movs	r1, #1
 8004b30:	fa01 f202 	lsl.w	r2, r1, r2
 8004b34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
}
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b76:	e148      	b.n	8004e0a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	4013      	ands	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 813a 	beq.w	8004e04 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d00b      	beq.n	8004bb0 <HAL_GPIO_Init+0x48>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d007      	beq.n	8004bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ba4:	2b11      	cmp	r3, #17
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b12      	cmp	r3, #18
 8004bae:	d130      	bne.n	8004c12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	2203      	movs	r2, #3
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004be6:	2201      	movs	r2, #1
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	f003 0201 	and.w	r2, r3, #1
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d003      	beq.n	8004c52 <HAL_GPIO_Init+0xea>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b12      	cmp	r3, #18
 8004c50:	d123      	bne.n	8004c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	08da      	lsrs	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3208      	adds	r2, #8
 8004c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	220f      	movs	r2, #15
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4013      	ands	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	08da      	lsrs	r2, r3, #3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3208      	adds	r2, #8
 8004c94:	6939      	ldr	r1, [r7, #16]
 8004c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0203 	and.w	r2, r3, #3
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8094 	beq.w	8004e04 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cdc:	4b52      	ldr	r3, [pc, #328]	; (8004e28 <HAL_GPIO_Init+0x2c0>)
 8004cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce0:	4a51      	ldr	r2, [pc, #324]	; (8004e28 <HAL_GPIO_Init+0x2c0>)
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8004ce8:	4b4f      	ldr	r3, [pc, #316]	; (8004e28 <HAL_GPIO_Init+0x2c0>)
 8004cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cf4:	4a4d      	ldr	r2, [pc, #308]	; (8004e2c <HAL_GPIO_Init+0x2c4>)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	089b      	lsrs	r3, r3, #2
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	220f      	movs	r2, #15
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d1e:	d00d      	beq.n	8004d3c <HAL_GPIO_Init+0x1d4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a43      	ldr	r2, [pc, #268]	; (8004e30 <HAL_GPIO_Init+0x2c8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <HAL_GPIO_Init+0x1d0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a42      	ldr	r2, [pc, #264]	; (8004e34 <HAL_GPIO_Init+0x2cc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d101      	bne.n	8004d34 <HAL_GPIO_Init+0x1cc>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e004      	b.n	8004d3e <HAL_GPIO_Init+0x1d6>
 8004d34:	2307      	movs	r3, #7
 8004d36:	e002      	b.n	8004d3e <HAL_GPIO_Init+0x1d6>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <HAL_GPIO_Init+0x1d6>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	f002 0203 	and.w	r2, r2, #3
 8004d44:	0092      	lsls	r2, r2, #2
 8004d46:	4093      	lsls	r3, r2
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d4e:	4937      	ldr	r1, [pc, #220]	; (8004e2c <HAL_GPIO_Init+0x2c4>)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	3302      	adds	r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d5c:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <HAL_GPIO_Init+0x2d0>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d80:	4a2d      	ldr	r2, [pc, #180]	; (8004e38 <HAL_GPIO_Init+0x2d0>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004d86:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <HAL_GPIO_Init+0x2d0>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4013      	ands	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004daa:	4a23      	ldr	r2, [pc, #140]	; (8004e38 <HAL_GPIO_Init+0x2d0>)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <HAL_GPIO_Init+0x2d0>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dd4:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <HAL_GPIO_Init+0x2d0>)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004dda:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <HAL_GPIO_Init+0x2d0>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	43db      	mvns	r3, r3
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4013      	ands	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004dfe:	4a0e      	ldr	r2, [pc, #56]	; (8004e38 <HAL_GPIO_Init+0x2d0>)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	3301      	adds	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f47f aeaf 	bne.w	8004b78 <HAL_GPIO_Init+0x10>
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	48000400 	.word	0x48000400
 8004e34:	48000800 	.word	0x48000800
 8004e38:	40010400 	.word	0x40010400

08004e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e081      	b.n	8004f52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fd fc50 	bl	8002708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2224      	movs	r2, #36	; 0x24
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	e006      	b.n	8004ec4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d104      	bne.n	8004ed6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	ea42 0103 	orr.w	r1, r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	021a      	lsls	r2, r3, #8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69d9      	ldr	r1, [r3, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	461a      	mov	r2, r3
 8004f68:	460b      	mov	r3, r1
 8004f6a:	817b      	strh	r3, [r7, #10]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	f040 80da 	bne.w	8005132 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_I2C_Master_Transmit+0x30>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0d3      	b.n	8005134 <HAL_I2C_Master_Transmit+0x1d8>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f94:	f7fd ff76 	bl	8002e84 <HAL_GetTick>
 8004f98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	2319      	movs	r3, #25
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 faed 	bl	8005586 <I2C_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0be      	b.n	8005134 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2221      	movs	r2, #33	; 0x21
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	893a      	ldrh	r2, [r7, #8]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2bff      	cmp	r3, #255	; 0xff
 8004fe6:	d90e      	bls.n	8005006 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	22ff      	movs	r2, #255	; 0xff
 8004fec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	8979      	ldrh	r1, [r7, #10]
 8004ff6:	4b51      	ldr	r3, [pc, #324]	; (800513c <HAL_I2C_Master_Transmit+0x1e0>)
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fc50 	bl	80058a4 <I2C_TransferConfig>
 8005004:	e06c      	b.n	80050e0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	b2da      	uxtb	r2, r3
 8005016:	8979      	ldrh	r1, [r7, #10]
 8005018:	4b48      	ldr	r3, [pc, #288]	; (800513c <HAL_I2C_Master_Transmit+0x1e0>)
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fc3f 	bl	80058a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005026:	e05b      	b.n	80050e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	6a39      	ldr	r1, [r7, #32]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 faea 	bl	8005606 <I2C_WaitOnTXISFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e07b      	b.n	8005134 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	781a      	ldrb	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d034      	beq.n	80050e0 <HAL_I2C_Master_Transmit+0x184>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d130      	bne.n	80050e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fa7c 	bl	8005586 <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e04d      	b.n	8005134 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2bff      	cmp	r3, #255	; 0xff
 80050a0:	d90e      	bls.n	80050c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	8979      	ldrh	r1, [r7, #10]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fbf3 	bl	80058a4 <I2C_TransferConfig>
 80050be:	e00f      	b.n	80050e0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	8979      	ldrh	r1, [r7, #10]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fbe2 	bl	80058a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d19e      	bne.n	8005028 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	6a39      	ldr	r1, [r7, #32]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fac9 	bl	8005686 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e01a      	b.n	8005134 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2220      	movs	r2, #32
 8005104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_I2C_Master_Transmit+0x1e4>)
 8005112:	400b      	ands	r3, r1
 8005114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	80002000 	.word	0x80002000
 8005140:	fe00e800 	.word	0xfe00e800

08005144 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	461a      	mov	r2, r3
 8005150:	460b      	mov	r3, r1
 8005152:	817b      	strh	r3, [r7, #10]
 8005154:	4613      	mov	r3, r2
 8005156:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b20      	cmp	r3, #32
 8005162:	f040 80db 	bne.w	800531c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_I2C_Master_Receive+0x30>
 8005170:	2302      	movs	r3, #2
 8005172:	e0d4      	b.n	800531e <HAL_I2C_Master_Receive+0x1da>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800517c:	f7fd fe82 	bl	8002e84 <HAL_GetTick>
 8005180:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	2319      	movs	r3, #25
 8005188:	2201      	movs	r2, #1
 800518a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f9f9 	bl	8005586 <I2C_WaitOnFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0bf      	b.n	800531e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2222      	movs	r2, #34	; 0x22
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2210      	movs	r2, #16
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	893a      	ldrh	r2, [r7, #8]
 80051be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2bff      	cmp	r3, #255	; 0xff
 80051ce:	d90e      	bls.n	80051ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	22ff      	movs	r2, #255	; 0xff
 80051d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	8979      	ldrh	r1, [r7, #10]
 80051de:	4b52      	ldr	r3, [pc, #328]	; (8005328 <HAL_I2C_Master_Receive+0x1e4>)
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fb5c 	bl	80058a4 <I2C_TransferConfig>
 80051ec:	e06d      	b.n	80052ca <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	8979      	ldrh	r1, [r7, #10]
 8005200:	4b49      	ldr	r3, [pc, #292]	; (8005328 <HAL_I2C_Master_Receive+0x1e4>)
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fb4b 	bl	80058a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800520e:	e05c      	b.n	80052ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	6a39      	ldr	r1, [r7, #32]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fa73 	bl	8005700 <I2C_WaitOnRXNEFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e07c      	b.n	800531e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d034      	beq.n	80052ca <HAL_I2C_Master_Receive+0x186>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	d130      	bne.n	80052ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2200      	movs	r2, #0
 8005270:	2180      	movs	r1, #128	; 0x80
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f987 	bl	8005586 <I2C_WaitOnFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e04d      	b.n	800531e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005286:	b29b      	uxth	r3, r3
 8005288:	2bff      	cmp	r3, #255	; 0xff
 800528a:	d90e      	bls.n	80052aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	22ff      	movs	r2, #255	; 0xff
 8005290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005296:	b2da      	uxtb	r2, r3
 8005298:	8979      	ldrh	r1, [r7, #10]
 800529a:	2300      	movs	r3, #0
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fafe 	bl	80058a4 <I2C_TransferConfig>
 80052a8:	e00f      	b.n	80052ca <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	8979      	ldrh	r1, [r7, #10]
 80052bc:	2300      	movs	r3, #0
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 faed 	bl	80058a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d19d      	bne.n	8005210 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	6a39      	ldr	r1, [r7, #32]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f9d4 	bl	8005686 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e01a      	b.n	800531e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2220      	movs	r2, #32
 80052ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b0c      	ldr	r3, [pc, #48]	; (800532c <HAL_I2C_Master_Receive+0x1e8>)
 80052fc:	400b      	ands	r3, r1
 80052fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800531c:	2302      	movs	r3, #2
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	80002400 	.word	0x80002400
 800532c:	fe00e800 	.word	0xfe00e800

08005330 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	460b      	mov	r3, r1
 800533e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b20      	cmp	r3, #32
 800534e:	f040 80f1 	bne.w	8005534 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005360:	d101      	bne.n	8005366 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
 8005364:	e0e7      	b.n	8005536 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_I2C_IsDeviceReady+0x44>
 8005370:	2302      	movs	r3, #2
 8005372:	e0e0      	b.n	8005536 <HAL_I2C_IsDeviceReady+0x206>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2224      	movs	r2, #36	; 0x24
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d107      	bne.n	80053a2 <HAL_I2C_IsDeviceReady+0x72>
 8005392:	897b      	ldrh	r3, [r7, #10]
 8005394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005398:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800539c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053a0:	e004      	b.n	80053ac <HAL_I2C_IsDeviceReady+0x7c>
 80053a2:	897b      	ldrh	r3, [r7, #10]
 80053a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80053b2:	f7fd fd67 	bl	8002e84 <HAL_GetTick>
 80053b6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b10      	cmp	r3, #16
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80053e4:	e034      	b.n	8005450 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d01a      	beq.n	8005424 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fd fd49 	bl	8002e84 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <HAL_I2C_IsDeviceReady+0xd4>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10f      	bne.n	8005424 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e088      	b.n	8005536 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b20      	cmp	r3, #32
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b10      	cmp	r3, #16
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005450:	7ffb      	ldrb	r3, [r7, #31]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <HAL_I2C_IsDeviceReady+0x12c>
 8005456:	7fbb      	ldrb	r3, [r7, #30]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0c4      	beq.n	80053e6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b10      	cmp	r3, #16
 8005468:	d01a      	beq.n	80054a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2200      	movs	r2, #0
 8005472:	2120      	movs	r1, #32
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f886 	bl	8005586 <I2C_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e058      	b.n	8005536 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2220      	movs	r2, #32
 800548a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	e04a      	b.n	8005536 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2200      	movs	r2, #0
 80054a8:	2120      	movs	r1, #32
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f86b 	bl	8005586 <I2C_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e03d      	b.n	8005536 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2210      	movs	r2, #16
 80054c0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2220      	movs	r2, #32
 80054c8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d118      	bne.n	8005504 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2120      	movs	r1, #32
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f84a 	bl	8005586 <I2C_WaitOnFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e01c      	b.n	8005536 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2220      	movs	r2, #32
 8005502:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	3301      	adds	r3, #1
 8005508:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	429a      	cmp	r2, r3
 8005510:	f63f af3b 	bhi.w	800538a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005534:	2302      	movs	r3, #2
  }
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b02      	cmp	r3, #2
 8005552:	d103      	bne.n	800555c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2200      	movs	r2, #0
 800555a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b01      	cmp	r3, #1
 8005568:	d007      	beq.n	800557a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	619a      	str	r2, [r3, #24]
  }
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005596:	e022      	b.n	80055de <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d01e      	beq.n	80055de <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a0:	f7fd fc70 	bl	8002e84 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d302      	bcc.n	80055b6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d113      	bne.n	80055de <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e00f      	b.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d0cd      	beq.n	8005598 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005612:	e02c      	b.n	800566e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f8dd 	bl	80057d8 <I2C_IsAcknowledgeFailed>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e02a      	b.n	800567e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d01e      	beq.n	800566e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005630:	f7fd fc28 	bl	8002e84 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d113      	bne.n	800566e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	f043 0220 	orr.w	r2, r3, #32
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e007      	b.n	800567e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d1cb      	bne.n	8005614 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005692:	e028      	b.n	80056e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f89d 	bl	80057d8 <I2C_IsAcknowledgeFailed>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e026      	b.n	80056f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a8:	f7fd fbec 	bl	8002e84 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d302      	bcc.n	80056be <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d113      	bne.n	80056e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e007      	b.n	80056f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d1cf      	bne.n	8005694 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800570c:	e055      	b.n	80057ba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f860 	bl	80057d8 <I2C_IsAcknowledgeFailed>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e053      	b.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b20      	cmp	r3, #32
 800572e:	d129      	bne.n	8005784 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b04      	cmp	r3, #4
 800573c:	d105      	bne.n	800574a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e03f      	b.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2220      	movs	r2, #32
 8005750:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6859      	ldr	r1, [r3, #4]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800575e:	400b      	ands	r3, r1
 8005760:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e022      	b.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005784:	f7fd fb7e 	bl	8002e84 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	d302      	bcc.n	800579a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10f      	bne.n	80057ba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579e:	f043 0220 	orr.w	r2, r3, #32
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e007      	b.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d1a2      	bne.n	800570e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	fe00e800 	.word	0xfe00e800

080057d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b10      	cmp	r3, #16
 80057f0:	d151      	bne.n	8005896 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057f2:	e022      	b.n	800583a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d01e      	beq.n	800583a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fc:	f7fd fb42 	bl	8002e84 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <I2C_IsAcknowledgeFailed+0x3a>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d113      	bne.n	800583a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	f043 0220 	orr.w	r2, r3, #32
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e02e      	b.n	8005898 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b20      	cmp	r3, #32
 8005846:	d1d5      	bne.n	80057f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2210      	movs	r2, #16
 800584e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2220      	movs	r2, #32
 8005856:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff fe70 	bl	800553e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6859      	ldr	r1, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b0d      	ldr	r3, [pc, #52]	; (80058a0 <I2C_IsAcknowledgeFailed+0xc8>)
 800586a:	400b      	ands	r3, r1
 800586c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005872:	f043 0204 	orr.w	r2, r3, #4
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	fe00e800 	.word	0xfe00e800

080058a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	607b      	str	r3, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	817b      	strh	r3, [r7, #10]
 80058b2:	4613      	mov	r3, r2
 80058b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	0d5b      	lsrs	r3, r3, #21
 80058c0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <I2C_TransferConfig+0x58>)
 80058c6:	430b      	orrs	r3, r1
 80058c8:	43db      	mvns	r3, r3
 80058ca:	ea02 0103 	and.w	r1, r2, r3
 80058ce:	897b      	ldrh	r3, [r7, #10]
 80058d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058d4:	7a7b      	ldrb	r3, [r7, #9]
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	03ff63ff 	.word	0x03ff63ff

08005900 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b20      	cmp	r3, #32
 8005914:	d138      	bne.n	8005988 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005920:	2302      	movs	r3, #2
 8005922:	e032      	b.n	800598a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2224      	movs	r2, #36	; 0x24
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005952:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6819      	ldr	r1, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	e000      	b.n	800598a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005988:	2302      	movs	r3, #2
  }
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005996:	b480      	push	{r7}
 8005998:	b085      	sub	sp, #20
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d139      	bne.n	8005a20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e033      	b.n	8005a22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2224      	movs	r2, #36	; 0x24
 80059c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e000      	b.n	8005a22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a34:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a04      	ldr	r2, [pc, #16]	; (8005a4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3e:	6013      	str	r3, [r2, #0]
}
 8005a40:	bf00      	nop
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40007000 	.word	0x40007000

08005a50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40007000 	.word	0x40007000

08005a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a7a:	d130      	bne.n	8005ade <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a7c:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a88:	d038      	beq.n	8005afc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a8a:	4b20      	ldr	r3, [pc, #128]	; (8005b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a92:	4a1e      	ldr	r2, [pc, #120]	; (8005b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a9a:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2232      	movs	r2, #50	; 0x32
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	0c9b      	lsrs	r3, r3, #18
 8005aac:	3301      	adds	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ab0:	e002      	b.n	8005ab8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ab8:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac4:	d102      	bne.n	8005acc <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f2      	bne.n	8005ab2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad8:	d110      	bne.n	8005afc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e00f      	b.n	8005afe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aea:	d007      	beq.n	8005afc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005aec:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005af4:	4a05      	ldr	r2, [pc, #20]	; (8005b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005afa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40007000 	.word	0x40007000
 8005b10:	20000000 	.word	0x20000000
 8005b14:	431bde83 	.word	0x431bde83

08005b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f000 bc11 	b.w	800634e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b2c:	4ba0      	ldr	r3, [pc, #640]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b36:	4b9e      	ldr	r3, [pc, #632]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80e4 	beq.w	8005d16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_RCC_OscConfig+0x4c>
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	f040 808b 	bne.w	8005c72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	f040 8087 	bne.w	8005c72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b64:	4b92      	ldr	r3, [pc, #584]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_OscConfig+0x64>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e3e8      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1a      	ldr	r2, [r3, #32]
 8005b80:	4b8b      	ldr	r3, [pc, #556]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <HAL_RCC_OscConfig+0x7e>
 8005b8c:	4b88      	ldr	r3, [pc, #544]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b94:	e005      	b.n	8005ba2 <HAL_RCC_OscConfig+0x8a>
 8005b96:	4b86      	ldr	r3, [pc, #536]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d223      	bcs.n	8005bee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fdaa 	bl	8006704 <RCC_SetFlashLatencyFromMSIRange>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e3c9      	b.n	800634e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bba:	4b7d      	ldr	r3, [pc, #500]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a7c      	ldr	r2, [pc, #496]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005bc0:	f043 0308 	orr.w	r3, r3, #8
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	4b7a      	ldr	r3, [pc, #488]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	4977      	ldr	r1, [pc, #476]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bd8:	4b75      	ldr	r3, [pc, #468]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	4972      	ldr	r1, [pc, #456]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	604b      	str	r3, [r1, #4]
 8005bec:	e025      	b.n	8005c3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bee:	4b70      	ldr	r3, [pc, #448]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a6f      	ldr	r2, [pc, #444]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005bf4:	f043 0308 	orr.w	r3, r3, #8
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	4b6d      	ldr	r3, [pc, #436]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	496a      	ldr	r1, [pc, #424]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c0c:	4b68      	ldr	r3, [pc, #416]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	4965      	ldr	r1, [pc, #404]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fd6a 	bl	8006704 <RCC_SetFlashLatencyFromMSIRange>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e389      	b.n	800634e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c3a:	f000 fc6f 	bl	800651c <HAL_RCC_GetSysClockFreq>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	4b5b      	ldr	r3, [pc, #364]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	091b      	lsrs	r3, r3, #4
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	495a      	ldr	r1, [pc, #360]	; (8005db4 <HAL_RCC_OscConfig+0x29c>)
 8005c4c:	5ccb      	ldrb	r3, [r1, r3]
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	4a58      	ldr	r2, [pc, #352]	; (8005db8 <HAL_RCC_OscConfig+0x2a0>)
 8005c58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c5a:	4b58      	ldr	r3, [pc, #352]	; (8005dbc <HAL_RCC_OscConfig+0x2a4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fc ff22 	bl	8002aa8 <HAL_InitTick>
 8005c64:	4603      	mov	r3, r0
 8005c66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d052      	beq.n	8005d14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	e36d      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d032      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c7a:	4b4d      	ldr	r3, [pc, #308]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a4c      	ldr	r2, [pc, #304]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c86:	f7fd f8fd 	bl	8002e84 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c8e:	f7fd f8f9 	bl	8002e84 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e356      	b.n	800634e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ca0:	4b43      	ldr	r3, [pc, #268]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cac:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a3f      	ldr	r2, [pc, #252]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005cb2:	f043 0308 	orr.w	r3, r3, #8
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	4b3d      	ldr	r3, [pc, #244]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	493a      	ldr	r1, [pc, #232]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cca:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	4935      	ldr	r1, [pc, #212]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	604b      	str	r3, [r1, #4]
 8005cde:	e01a      	b.n	8005d16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ce0:	4b33      	ldr	r3, [pc, #204]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a32      	ldr	r2, [pc, #200]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cec:	f7fd f8ca 	bl	8002e84 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cf4:	f7fd f8c6 	bl	8002e84 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e323      	b.n	800634e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d06:	4b2a      	ldr	r3, [pc, #168]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x1dc>
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d073      	beq.n	8005e0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d005      	beq.n	8005d34 <HAL_RCC_OscConfig+0x21c>
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2b0c      	cmp	r3, #12
 8005d2c:	d10e      	bne.n	8005d4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d10b      	bne.n	8005d4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d34:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d063      	beq.n	8005e08 <HAL_RCC_OscConfig+0x2f0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d15f      	bne.n	8005e08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e300      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d54:	d106      	bne.n	8005d64 <HAL_RCC_OscConfig+0x24c>
 8005d56:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e01d      	b.n	8005da0 <HAL_RCC_OscConfig+0x288>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x270>
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e00b      	b.n	8005da0 <HAL_RCC_OscConfig+0x288>
 8005d88:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a08      	ldr	r2, [pc, #32]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <HAL_RCC_OscConfig+0x298>)
 8005d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01b      	beq.n	8005de0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fd f86c 	bl	8002e84 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dae:	e010      	b.n	8005dd2 <HAL_RCC_OscConfig+0x2ba>
 8005db0:	40021000 	.word	0x40021000
 8005db4:	0800dd08 	.word	0x0800dd08
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc0:	f7fd f860 	bl	8002e84 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b64      	cmp	r3, #100	; 0x64
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e2bd      	b.n	800634e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd2:	4baf      	ldr	r3, [pc, #700]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f0      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x2a8>
 8005dde:	e014      	b.n	8005e0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de0:	f7fd f850 	bl	8002e84 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de8:	f7fd f84c 	bl	8002e84 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	; 0x64
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e2a9      	b.n	800634e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dfa:	4ba5      	ldr	r3, [pc, #660]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f0      	bne.n	8005de8 <HAL_RCC_OscConfig+0x2d0>
 8005e06:	e000      	b.n	8005e0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d060      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d005      	beq.n	8005e28 <HAL_RCC_OscConfig+0x310>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b0c      	cmp	r3, #12
 8005e20:	d119      	bne.n	8005e56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d116      	bne.n	8005e56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e28:	4b99      	ldr	r3, [pc, #612]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <HAL_RCC_OscConfig+0x328>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e286      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e40:	4b93      	ldr	r3, [pc, #588]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	061b      	lsls	r3, r3, #24
 8005e4e:	4990      	ldr	r1, [pc, #576]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e54:	e040      	b.n	8005ed8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d023      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e5e:	4b8c      	ldr	r3, [pc, #560]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a8b      	ldr	r2, [pc, #556]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6a:	f7fd f80b 	bl	8002e84 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e72:	f7fd f807 	bl	8002e84 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e264      	b.n	800634e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e84:	4b82      	ldr	r3, [pc, #520]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e90:	4b7f      	ldr	r3, [pc, #508]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	061b      	lsls	r3, r3, #24
 8005e9e:	497c      	ldr	r1, [pc, #496]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	604b      	str	r3, [r1, #4]
 8005ea4:	e018      	b.n	8005ed8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea6:	4b7a      	ldr	r3, [pc, #488]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a79      	ldr	r2, [pc, #484]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb2:	f7fc ffe7 	bl	8002e84 <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eba:	f7fc ffe3 	bl	8002e84 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e240      	b.n	800634e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ecc:	4b70      	ldr	r3, [pc, #448]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f0      	bne.n	8005eba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d03c      	beq.n	8005f5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01c      	beq.n	8005f26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eec:	4b68      	ldr	r3, [pc, #416]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef2:	4a67      	ldr	r2, [pc, #412]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005ef4:	f043 0301 	orr.w	r3, r3, #1
 8005ef8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efc:	f7fc ffc2 	bl	8002e84 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f04:	f7fc ffbe 	bl	8002e84 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e21b      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f16:	4b5e      	ldr	r3, [pc, #376]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ef      	beq.n	8005f04 <HAL_RCC_OscConfig+0x3ec>
 8005f24:	e01b      	b.n	8005f5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f26:	4b5a      	ldr	r3, [pc, #360]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f2c:	4a58      	ldr	r2, [pc, #352]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005f2e:	f023 0301 	bic.w	r3, r3, #1
 8005f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f36:	f7fc ffa5 	bl	8002e84 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f3e:	f7fc ffa1 	bl	8002e84 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e1fe      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f50:	4b4f      	ldr	r3, [pc, #316]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ef      	bne.n	8005f3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80a6 	beq.w	80060b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f70:	4b47      	ldr	r3, [pc, #284]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10d      	bne.n	8005f98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7c:	4b44      	ldr	r3, [pc, #272]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f80:	4a43      	ldr	r2, [pc, #268]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f86:	6593      	str	r3, [r2, #88]	; 0x58
 8005f88:	4b41      	ldr	r3, [pc, #260]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f94:	2301      	movs	r3, #1
 8005f96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f98:	4b3e      	ldr	r3, [pc, #248]	; (8006094 <HAL_RCC_OscConfig+0x57c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d118      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fa4:	4b3b      	ldr	r3, [pc, #236]	; (8006094 <HAL_RCC_OscConfig+0x57c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a3a      	ldr	r2, [pc, #232]	; (8006094 <HAL_RCC_OscConfig+0x57c>)
 8005faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb0:	f7fc ff68 	bl	8002e84 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb8:	f7fc ff64 	bl	8002e84 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e1c1      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fca:	4b32      	ldr	r3, [pc, #200]	; (8006094 <HAL_RCC_OscConfig+0x57c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d108      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x4d8>
 8005fde:	4b2c      	ldr	r3, [pc, #176]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe4:	4a2a      	ldr	r2, [pc, #168]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fee:	e024      	b.n	800603a <HAL_RCC_OscConfig+0x522>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b05      	cmp	r3, #5
 8005ff6:	d110      	bne.n	800601a <HAL_RCC_OscConfig+0x502>
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8005ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffe:	4a24      	ldr	r2, [pc, #144]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8006000:	f043 0304 	orr.w	r3, r3, #4
 8006004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006008:	4b21      	ldr	r3, [pc, #132]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 800600a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600e:	4a20      	ldr	r2, [pc, #128]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8006010:	f043 0301 	orr.w	r3, r3, #1
 8006014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006018:	e00f      	b.n	800603a <HAL_RCC_OscConfig+0x522>
 800601a:	4b1d      	ldr	r3, [pc, #116]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 800601c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006020:	4a1b      	ldr	r2, [pc, #108]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8006022:	f023 0301 	bic.w	r3, r3, #1
 8006026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800602a:	4b19      	ldr	r3, [pc, #100]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 800602c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006030:	4a17      	ldr	r2, [pc, #92]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8006032:	f023 0304 	bic.w	r3, r3, #4
 8006036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d016      	beq.n	8006070 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006042:	f7fc ff1f 	bl	8002e84 <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006048:	e00a      	b.n	8006060 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800604a:	f7fc ff1b 	bl	8002e84 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f241 3288 	movw	r2, #5000	; 0x1388
 8006058:	4293      	cmp	r3, r2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e176      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_RCC_OscConfig+0x578>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ed      	beq.n	800604a <HAL_RCC_OscConfig+0x532>
 800606e:	e01a      	b.n	80060a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006070:	f7fc ff08 	bl	8002e84 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006076:	e00f      	b.n	8006098 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006078:	f7fc ff04 	bl	8002e84 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	; 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d906      	bls.n	8006098 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e15f      	b.n	800634e <HAL_RCC_OscConfig+0x836>
 800608e:	bf00      	nop
 8006090:	40021000 	.word	0x40021000
 8006094:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006098:	4baa      	ldr	r3, [pc, #680]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e8      	bne.n	8006078 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060a6:	7ffb      	ldrb	r3, [r7, #31]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d105      	bne.n	80060b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ac:	4ba5      	ldr	r3, [pc, #660]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80060ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b0:	4aa4      	ldr	r2, [pc, #656]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80060b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d03c      	beq.n	800613e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01c      	beq.n	8006106 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060cc:	4b9d      	ldr	r3, [pc, #628]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80060ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060d2:	4a9c      	ldr	r2, [pc, #624]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060dc:	f7fc fed2 	bl	8002e84 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060e4:	f7fc fece 	bl	8002e84 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e12b      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060f6:	4b93      	ldr	r3, [pc, #588]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80060f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0ef      	beq.n	80060e4 <HAL_RCC_OscConfig+0x5cc>
 8006104:	e01b      	b.n	800613e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006106:	4b8f      	ldr	r3, [pc, #572]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800610c:	4a8d      	ldr	r2, [pc, #564]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 800610e:	f023 0301 	bic.w	r3, r3, #1
 8006112:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006116:	f7fc feb5 	bl	8002e84 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800611e:	f7fc feb1 	bl	8002e84 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e10e      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006130:	4b84      	ldr	r3, [pc, #528]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1ef      	bne.n	800611e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 8102 	beq.w	800634c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	2b02      	cmp	r3, #2
 800614e:	f040 80c5 	bne.w	80062dc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006152:	4b7c      	ldr	r3, [pc, #496]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f003 0203 	and.w	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	429a      	cmp	r2, r3
 8006164:	d12c      	bne.n	80061c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	3b01      	subs	r3, #1
 8006172:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d123      	bne.n	80061c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d11b      	bne.n	80061c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d113      	bne.n	80061c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	3b01      	subs	r3, #1
 80061a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d109      	bne.n	80061c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	3b01      	subs	r3, #1
 80061ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061bc:	429a      	cmp	r2, r3
 80061be:	d067      	beq.n	8006290 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d062      	beq.n	800628c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80061c6:	4b5f      	ldr	r3, [pc, #380]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e0bb      	b.n	800634e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80061d6:	4b5b      	ldr	r3, [pc, #364]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a5a      	ldr	r2, [pc, #360]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80061dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061e2:	f7fc fe4f 	bl	8002e84 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ea:	f7fc fe4b 	bl	8002e84 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e0a8      	b.n	800634e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061fc:	4b51      	ldr	r3, [pc, #324]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f0      	bne.n	80061ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006208:	4b4e      	ldr	r3, [pc, #312]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	4b4e      	ldr	r3, [pc, #312]	; (8006348 <HAL_RCC_OscConfig+0x830>)
 800620e:	4013      	ands	r3, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006218:	3a01      	subs	r2, #1
 800621a:	0112      	lsls	r2, r2, #4
 800621c:	4311      	orrs	r1, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006222:	0212      	lsls	r2, r2, #8
 8006224:	4311      	orrs	r1, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800622a:	0852      	lsrs	r2, r2, #1
 800622c:	3a01      	subs	r2, #1
 800622e:	0552      	lsls	r2, r2, #21
 8006230:	4311      	orrs	r1, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006236:	0852      	lsrs	r2, r2, #1
 8006238:	3a01      	subs	r2, #1
 800623a:	0652      	lsls	r2, r2, #25
 800623c:	4311      	orrs	r1, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006242:	06d2      	lsls	r2, r2, #27
 8006244:	430a      	orrs	r2, r1
 8006246:	493f      	ldr	r1, [pc, #252]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006248:	4313      	orrs	r3, r2
 800624a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800624c:	4b3d      	ldr	r3, [pc, #244]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a3c      	ldr	r2, [pc, #240]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006256:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006258:	4b3a      	ldr	r3, [pc, #232]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4a39      	ldr	r2, [pc, #228]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 800625e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006262:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006264:	f7fc fe0e 	bl	8002e84 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626c:	f7fc fe0a 	bl	8002e84 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e067      	b.n	800634e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800627e:	4b31      	ldr	r3, [pc, #196]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800628a:	e05f      	b.n	800634c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e05e      	b.n	800634e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006290:	4b2c      	ldr	r3, [pc, #176]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d157      	bne.n	800634c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800629c:	4b29      	ldr	r3, [pc, #164]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a28      	ldr	r2, [pc, #160]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80062a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062a8:	4b26      	ldr	r3, [pc, #152]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4a25      	ldr	r2, [pc, #148]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80062ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062b4:	f7fc fde6 	bl	8002e84 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fc fde2 	bl	8002e84 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e03f      	b.n	800634e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ce:	4b1d      	ldr	r3, [pc, #116]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCC_OscConfig+0x7a4>
 80062da:	e037      	b.n	800634c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d02d      	beq.n	800633e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e2:	4b18      	ldr	r3, [pc, #96]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a17      	ldr	r2, [pc, #92]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80062e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ec:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80062ee:	4b15      	ldr	r3, [pc, #84]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d105      	bne.n	8006306 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	4a11      	ldr	r2, [pc, #68]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006300:	f023 0303 	bic.w	r3, r3, #3
 8006304:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006306:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 800630c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006314:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006316:	f7fc fdb5 	bl	8002e84 <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800631e:	f7fc fdb1 	bl	8002e84 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e00e      	b.n	800634e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006330:	4b04      	ldr	r3, [pc, #16]	; (8006344 <HAL_RCC_OscConfig+0x82c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f0      	bne.n	800631e <HAL_RCC_OscConfig+0x806>
 800633c:	e006      	b.n	800634c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e005      	b.n	800634e <HAL_RCC_OscConfig+0x836>
 8006342:	bf00      	nop
 8006344:	40021000 	.word	0x40021000
 8006348:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop

08006358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e0c8      	b.n	80064fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800636c:	4b66      	ldr	r3, [pc, #408]	; (8006508 <HAL_RCC_ClockConfig+0x1b0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d910      	bls.n	800639c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800637a:	4b63      	ldr	r3, [pc, #396]	; (8006508 <HAL_RCC_ClockConfig+0x1b0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f023 0207 	bic.w	r2, r3, #7
 8006382:	4961      	ldr	r1, [pc, #388]	; (8006508 <HAL_RCC_ClockConfig+0x1b0>)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	4313      	orrs	r3, r2
 8006388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800638a:	4b5f      	ldr	r3, [pc, #380]	; (8006508 <HAL_RCC_ClockConfig+0x1b0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d001      	beq.n	800639c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e0b0      	b.n	80064fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d04c      	beq.n	8006442 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d107      	bne.n	80063c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063b0:	4b56      	ldr	r3, [pc, #344]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d121      	bne.n	8006400 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e09e      	b.n	80064fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d107      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063c8:	4b50      	ldr	r3, [pc, #320]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d115      	bne.n	8006400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e092      	b.n	80064fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d107      	bne.n	80063f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063e0:	4b4a      	ldr	r3, [pc, #296]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d109      	bne.n	8006400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e086      	b.n	80064fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063f0:	4b46      	ldr	r3, [pc, #280]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e07e      	b.n	80064fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006400:	4b42      	ldr	r3, [pc, #264]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f023 0203 	bic.w	r2, r3, #3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	493f      	ldr	r1, [pc, #252]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 800640e:	4313      	orrs	r3, r2
 8006410:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006412:	f7fc fd37 	bl	8002e84 <HAL_GetTick>
 8006416:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006418:	e00a      	b.n	8006430 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800641a:	f7fc fd33 	bl	8002e84 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	f241 3288 	movw	r2, #5000	; 0x1388
 8006428:	4293      	cmp	r3, r2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e066      	b.n	80064fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006430:	4b36      	ldr	r3, [pc, #216]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 020c 	and.w	r2, r3, #12
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	429a      	cmp	r2, r3
 8006440:	d1eb      	bne.n	800641a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800644e:	4b2f      	ldr	r3, [pc, #188]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	492c      	ldr	r1, [pc, #176]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 800645c:	4313      	orrs	r3, r2
 800645e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006460:	4b29      	ldr	r3, [pc, #164]	; (8006508 <HAL_RCC_ClockConfig+0x1b0>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d210      	bcs.n	8006490 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646e:	4b26      	ldr	r3, [pc, #152]	; (8006508 <HAL_RCC_ClockConfig+0x1b0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f023 0207 	bic.w	r2, r3, #7
 8006476:	4924      	ldr	r1, [pc, #144]	; (8006508 <HAL_RCC_ClockConfig+0x1b0>)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	4313      	orrs	r3, r2
 800647c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800647e:	4b22      	ldr	r3, [pc, #136]	; (8006508 <HAL_RCC_ClockConfig+0x1b0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d001      	beq.n	8006490 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e036      	b.n	80064fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800649c:	4b1b      	ldr	r3, [pc, #108]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4918      	ldr	r1, [pc, #96]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ba:	4b14      	ldr	r3, [pc, #80]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4910      	ldr	r1, [pc, #64]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064ce:	f000 f825 	bl	800651c <HAL_RCC_GetSysClockFreq>
 80064d2:	4602      	mov	r2, r0
 80064d4:	4b0d      	ldr	r3, [pc, #52]	; (800650c <HAL_RCC_ClockConfig+0x1b4>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	490c      	ldr	r1, [pc, #48]	; (8006510 <HAL_RCC_ClockConfig+0x1b8>)
 80064e0:	5ccb      	ldrb	r3, [r1, r3]
 80064e2:	f003 031f 	and.w	r3, r3, #31
 80064e6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ea:	4a0a      	ldr	r2, [pc, #40]	; (8006514 <HAL_RCC_ClockConfig+0x1bc>)
 80064ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <HAL_RCC_ClockConfig+0x1c0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fc fad8 	bl	8002aa8 <HAL_InitTick>
 80064f8:	4603      	mov	r3, r0
 80064fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80064fc:	7afb      	ldrb	r3, [r7, #11]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	40022000 	.word	0x40022000
 800650c:	40021000 	.word	0x40021000
 8006510:	0800dd08 	.word	0x0800dd08
 8006514:	20000000 	.word	0x20000000
 8006518:	20000004 	.word	0x20000004

0800651c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800651c:	b480      	push	{r7}
 800651e:	b089      	sub	sp, #36	; 0x24
 8006520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]
 8006526:	2300      	movs	r3, #0
 8006528:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800652a:	4b3e      	ldr	r3, [pc, #248]	; (8006624 <HAL_RCC_GetSysClockFreq+0x108>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006534:	4b3b      	ldr	r3, [pc, #236]	; (8006624 <HAL_RCC_GetSysClockFreq+0x108>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0x34>
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b0c      	cmp	r3, #12
 8006548:	d121      	bne.n	800658e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d11e      	bne.n	800658e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006550:	4b34      	ldr	r3, [pc, #208]	; (8006624 <HAL_RCC_GetSysClockFreq+0x108>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d107      	bne.n	800656c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800655c:	4b31      	ldr	r3, [pc, #196]	; (8006624 <HAL_RCC_GetSysClockFreq+0x108>)
 800655e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006562:	0a1b      	lsrs	r3, r3, #8
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	e005      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800656c:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <HAL_RCC_GetSysClockFreq+0x108>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	091b      	lsrs	r3, r3, #4
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006578:	4a2b      	ldr	r2, [pc, #172]	; (8006628 <HAL_RCC_GetSysClockFreq+0x10c>)
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006580:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10d      	bne.n	80065a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800658c:	e00a      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d102      	bne.n	800659a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006594:	4b25      	ldr	r3, [pc, #148]	; (800662c <HAL_RCC_GetSysClockFreq+0x110>)
 8006596:	61bb      	str	r3, [r7, #24]
 8006598:	e004      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065a0:	4b22      	ldr	r3, [pc, #136]	; (800662c <HAL_RCC_GetSysClockFreq+0x110>)
 80065a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	2b0c      	cmp	r3, #12
 80065a8:	d134      	bne.n	8006614 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065aa:	4b1e      	ldr	r3, [pc, #120]	; (8006624 <HAL_RCC_GetSysClockFreq+0x108>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d003      	beq.n	80065c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d003      	beq.n	80065c8 <HAL_RCC_GetSysClockFreq+0xac>
 80065c0:	e005      	b.n	80065ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80065c2:	4b1a      	ldr	r3, [pc, #104]	; (800662c <HAL_RCC_GetSysClockFreq+0x110>)
 80065c4:	617b      	str	r3, [r7, #20]
      break;
 80065c6:	e005      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80065c8:	4b18      	ldr	r3, [pc, #96]	; (800662c <HAL_RCC_GetSysClockFreq+0x110>)
 80065ca:	617b      	str	r3, [r7, #20]
      break;
 80065cc:	e002      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	617b      	str	r3, [r7, #20]
      break;
 80065d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065d4:	4b13      	ldr	r3, [pc, #76]	; (8006624 <HAL_RCC_GetSysClockFreq+0x108>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	091b      	lsrs	r3, r3, #4
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	3301      	adds	r3, #1
 80065e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <HAL_RCC_GetSysClockFreq+0x108>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	fb02 f203 	mul.w	r2, r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065fa:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <HAL_RCC_GetSysClockFreq+0x108>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	0e5b      	lsrs	r3, r3, #25
 8006600:	f003 0303 	and.w	r3, r3, #3
 8006604:	3301      	adds	r3, #1
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006612:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006614:	69bb      	ldr	r3, [r7, #24]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3724      	adds	r7, #36	; 0x24
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40021000 	.word	0x40021000
 8006628:	0800dd20 	.word	0x0800dd20
 800662c:	00f42400 	.word	0x00f42400

08006630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006634:	4b03      	ldr	r3, [pc, #12]	; (8006644 <HAL_RCC_GetHCLKFreq+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000000 	.word	0x20000000

08006648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800664c:	f7ff fff0 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b06      	ldr	r3, [pc, #24]	; (800666c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4904      	ldr	r1, [pc, #16]	; (8006670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006668:	4618      	mov	r0, r3
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40021000 	.word	0x40021000
 8006670:	0800dd18 	.word	0x0800dd18

08006674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006678:	f7ff ffda 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 800667c:	4602      	mov	r2, r0
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	0adb      	lsrs	r3, r3, #11
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	4904      	ldr	r1, [pc, #16]	; (800669c <HAL_RCC_GetPCLK2Freq+0x28>)
 800668a:	5ccb      	ldrb	r3, [r1, r3]
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40021000 	.word	0x40021000
 800669c:	0800dd18 	.word	0x0800dd18

080066a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	220f      	movs	r2, #15
 80066ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80066b0:	4b12      	ldr	r3, [pc, #72]	; (80066fc <HAL_RCC_GetClockConfig+0x5c>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0203 	and.w	r2, r3, #3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <HAL_RCC_GetClockConfig+0x5c>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <HAL_RCC_GetClockConfig+0x5c>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80066d4:	4b09      	ldr	r3, [pc, #36]	; (80066fc <HAL_RCC_GetClockConfig+0x5c>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	08db      	lsrs	r3, r3, #3
 80066da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80066e2:	4b07      	ldr	r3, [pc, #28]	; (8006700 <HAL_RCC_GetClockConfig+0x60>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0207 	and.w	r2, r3, #7
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	601a      	str	r2, [r3, #0]
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40021000 	.word	0x40021000
 8006700:	40022000 	.word	0x40022000

08006704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006710:	4b2a      	ldr	r3, [pc, #168]	; (80067bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800671c:	f7ff f998 	bl	8005a50 <HAL_PWREx_GetVoltageRange>
 8006720:	6178      	str	r0, [r7, #20]
 8006722:	e014      	b.n	800674e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006724:	4b25      	ldr	r3, [pc, #148]	; (80067bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006728:	4a24      	ldr	r2, [pc, #144]	; (80067bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800672a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672e:	6593      	str	r3, [r2, #88]	; 0x58
 8006730:	4b22      	ldr	r3, [pc, #136]	; (80067bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800673c:	f7ff f988 	bl	8005a50 <HAL_PWREx_GetVoltageRange>
 8006740:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006742:	4b1e      	ldr	r3, [pc, #120]	; (80067bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006746:	4a1d      	ldr	r2, [pc, #116]	; (80067bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800674c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006754:	d10b      	bne.n	800676e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b80      	cmp	r3, #128	; 0x80
 800675a:	d919      	bls.n	8006790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2ba0      	cmp	r3, #160	; 0xa0
 8006760:	d902      	bls.n	8006768 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006762:	2302      	movs	r3, #2
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	e013      	b.n	8006790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006768:	2301      	movs	r3, #1
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	e010      	b.n	8006790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b80      	cmp	r3, #128	; 0x80
 8006772:	d902      	bls.n	800677a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006774:	2303      	movs	r3, #3
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	e00a      	b.n	8006790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b80      	cmp	r3, #128	; 0x80
 800677e:	d102      	bne.n	8006786 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006780:	2302      	movs	r3, #2
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	e004      	b.n	8006790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b70      	cmp	r3, #112	; 0x70
 800678a:	d101      	bne.n	8006790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800678c:	2301      	movs	r3, #1
 800678e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f023 0207 	bic.w	r2, r3, #7
 8006798:	4909      	ldr	r1, [pc, #36]	; (80067c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d001      	beq.n	80067b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40021000 	.word	0x40021000
 80067c0:	40022000 	.word	0x40022000

080067c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067cc:	2300      	movs	r3, #0
 80067ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067d0:	2300      	movs	r3, #0
 80067d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d031      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067e8:	d01a      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80067ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067ee:	d814      	bhi.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80067f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067f8:	d10f      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80067fa:	4bac      	ldr	r3, [pc, #688]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	4aab      	ldr	r2, [pc, #684]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006804:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006806:	e00c      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3304      	adds	r3, #4
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f9dc 	bl	8006bcc <RCCEx_PLLSAI1_Config>
 8006814:	4603      	mov	r3, r0
 8006816:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006818:	e003      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	74fb      	strb	r3, [r7, #19]
      break;
 800681e:	e000      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006822:	7cfb      	ldrb	r3, [r7, #19]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006828:	4ba0      	ldr	r3, [pc, #640]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	499d      	ldr	r1, [pc, #628]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800683e:	e001      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	7cfb      	ldrb	r3, [r7, #19]
 8006842:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8099 	beq.w	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006852:	2300      	movs	r3, #0
 8006854:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006856:	4b95      	ldr	r3, [pc, #596]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006866:	2300      	movs	r3, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00d      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800686c:	4b8f      	ldr	r3, [pc, #572]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800686e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006870:	4a8e      	ldr	r2, [pc, #568]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006876:	6593      	str	r3, [r2, #88]	; 0x58
 8006878:	4b8c      	ldr	r3, [pc, #560]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800687a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006884:	2301      	movs	r3, #1
 8006886:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006888:	4b89      	ldr	r3, [pc, #548]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a88      	ldr	r2, [pc, #544]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800688e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006892:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006894:	f7fc faf6 	bl	8002e84 <HAL_GetTick>
 8006898:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800689a:	e009      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689c:	f7fc faf2 	bl	8002e84 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d902      	bls.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	74fb      	strb	r3, [r7, #19]
        break;
 80068ae:	e005      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068b0:	4b7f      	ldr	r3, [pc, #508]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0ef      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80068bc:	7cfb      	ldrb	r3, [r7, #19]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d155      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068c2:	4b7a      	ldr	r3, [pc, #488]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01e      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d019      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068de:	4b73      	ldr	r3, [pc, #460]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80068e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068ea:	4b70      	ldr	r3, [pc, #448]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80068ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f0:	4a6e      	ldr	r2, [pc, #440]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80068f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068fa:	4b6c      	ldr	r3, [pc, #432]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80068fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006900:	4a6a      	ldr	r2, [pc, #424]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800690a:	4a68      	ldr	r2, [pc, #416]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d016      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fc fab2 	bl	8002e84 <HAL_GetTick>
 8006920:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006922:	e00b      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006924:	f7fc faae 	bl	8002e84 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006932:	4293      	cmp	r3, r2
 8006934:	d902      	bls.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	74fb      	strb	r3, [r7, #19]
            break;
 800693a:	e006      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800693c:	4b5b      	ldr	r3, [pc, #364]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800693e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0ec      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800694a:	7cfb      	ldrb	r3, [r7, #19]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006950:	4b56      	ldr	r3, [pc, #344]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006956:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695e:	4953      	ldr	r1, [pc, #332]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006960:	4313      	orrs	r3, r2
 8006962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006966:	e004      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006968:	7cfb      	ldrb	r3, [r7, #19]
 800696a:	74bb      	strb	r3, [r7, #18]
 800696c:	e001      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696e:	7cfb      	ldrb	r3, [r7, #19]
 8006970:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006972:	7c7b      	ldrb	r3, [r7, #17]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d105      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006978:	4b4c      	ldr	r3, [pc, #304]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800697a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697c:	4a4b      	ldr	r2, [pc, #300]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800697e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006982:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006990:	4b46      	ldr	r3, [pc, #280]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006996:	f023 0203 	bic.w	r2, r3, #3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	4943      	ldr	r1, [pc, #268]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069b2:	4b3e      	ldr	r3, [pc, #248]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b8:	f023 020c 	bic.w	r2, r3, #12
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	493a      	ldr	r1, [pc, #232]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069d4:	4b35      	ldr	r3, [pc, #212]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80069d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	4932      	ldr	r1, [pc, #200]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069f6:	4b2d      	ldr	r3, [pc, #180]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a04:	4929      	ldr	r1, [pc, #164]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a18:	4b24      	ldr	r3, [pc, #144]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	4921      	ldr	r1, [pc, #132]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a3a:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	4918      	ldr	r1, [pc, #96]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00a      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a5c:	4b13      	ldr	r3, [pc, #76]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	4910      	ldr	r1, [pc, #64]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d02c      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	4907      	ldr	r1, [pc, #28]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a9c:	d10a      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a9e:	4b03      	ldr	r3, [pc, #12]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	4a02      	ldr	r2, [pc, #8]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aa8:	60d3      	str	r3, [r2, #12]
 8006aaa:	e015      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006abc:	d10c      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 f881 	bl	8006bcc <RCCEx_PLLSAI1_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006ace:	7cfb      	ldrb	r3, [r7, #19]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8006ad4:	7cfb      	ldrb	r3, [r7, #19]
 8006ad6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d028      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ae4:	4b30      	ldr	r3, [pc, #192]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af2:	492d      	ldr	r1, [pc, #180]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b02:	d106      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b04:	4b28      	ldr	r3, [pc, #160]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4a27      	ldr	r2, [pc, #156]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b0e:	60d3      	str	r3, [r2, #12]
 8006b10:	e011      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b1a:	d10c      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	2101      	movs	r1, #1
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 f852 	bl	8006bcc <RCCEx_PLLSAI1_Config>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b2c:	7cfb      	ldrb	r3, [r7, #19]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8006b32:	7cfb      	ldrb	r3, [r7, #19]
 8006b34:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01c      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b42:	4b19      	ldr	r3, [pc, #100]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b50:	4915      	ldr	r1, [pc, #84]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3304      	adds	r3, #4
 8006b66:	2102      	movs	r1, #2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 f82f 	bl	8006bcc <RCCEx_PLLSAI1_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b72:	7cfb      	ldrb	r3, [r7, #19]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006b78:	7cfb      	ldrb	r3, [r7, #19]
 8006b7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b88:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b96:	4904      	ldr	r1, [pc, #16]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40021000 	.word	0x40021000

08006bac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a04      	ldr	r2, [pc, #16]	; (8006bc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006bb6:	f043 0304 	orr.w	r3, r3, #4
 8006bba:	6013      	str	r3, [r2, #0]
}
 8006bbc:	bf00      	nop
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40021000 	.word	0x40021000

08006bcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bda:	4b74      	ldr	r3, [pc, #464]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d018      	beq.n	8006c18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006be6:	4b71      	ldr	r3, [pc, #452]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f003 0203 	and.w	r2, r3, #3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d10d      	bne.n	8006c12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006bfe:	4b6b      	ldr	r3, [pc, #428]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	091b      	lsrs	r3, r3, #4
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d047      	beq.n	8006ca2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	73fb      	strb	r3, [r7, #15]
 8006c16:	e044      	b.n	8006ca2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d018      	beq.n	8006c52 <RCCEx_PLLSAI1_Config+0x86>
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d825      	bhi.n	8006c70 <RCCEx_PLLSAI1_Config+0xa4>
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d002      	beq.n	8006c2e <RCCEx_PLLSAI1_Config+0x62>
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d009      	beq.n	8006c40 <RCCEx_PLLSAI1_Config+0x74>
 8006c2c:	e020      	b.n	8006c70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c2e:	4b5f      	ldr	r3, [pc, #380]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d11d      	bne.n	8006c76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c3e:	e01a      	b.n	8006c76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c40:	4b5a      	ldr	r3, [pc, #360]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d116      	bne.n	8006c7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c50:	e013      	b.n	8006c7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c52:	4b56      	ldr	r3, [pc, #344]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10f      	bne.n	8006c7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c5e:	4b53      	ldr	r3, [pc, #332]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c6e:	e006      	b.n	8006c7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73fb      	strb	r3, [r7, #15]
      break;
 8006c74:	e004      	b.n	8006c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c76:	bf00      	nop
 8006c78:	e002      	b.n	8006c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c7a:	bf00      	nop
 8006c7c:	e000      	b.n	8006c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10d      	bne.n	8006ca2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c86:	4b49      	ldr	r3, [pc, #292]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6819      	ldr	r1, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	4943      	ldr	r1, [pc, #268]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d17c      	bne.n	8006da2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ca8:	4b40      	ldr	r3, [pc, #256]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3f      	ldr	r2, [pc, #252]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cb4:	f7fc f8e6 	bl	8002e84 <HAL_GetTick>
 8006cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cba:	e009      	b.n	8006cd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cbc:	f7fc f8e2 	bl	8002e84 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d902      	bls.n	8006cd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8006cce:	e005      	b.n	8006cdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cd0:	4b36      	ldr	r3, [pc, #216]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1ef      	bne.n	8006cbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d15f      	bne.n	8006da2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d110      	bne.n	8006d0a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ce8:	4b30      	ldr	r3, [pc, #192]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6892      	ldr	r2, [r2, #8]
 8006cf8:	0211      	lsls	r1, r2, #8
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	68d2      	ldr	r2, [r2, #12]
 8006cfe:	06d2      	lsls	r2, r2, #27
 8006d00:	430a      	orrs	r2, r1
 8006d02:	492a      	ldr	r1, [pc, #168]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	610b      	str	r3, [r1, #16]
 8006d08:	e027      	b.n	8006d5a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d112      	bne.n	8006d36 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d10:	4b26      	ldr	r3, [pc, #152]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006d18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6892      	ldr	r2, [r2, #8]
 8006d20:	0211      	lsls	r1, r2, #8
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6912      	ldr	r2, [r2, #16]
 8006d26:	0852      	lsrs	r2, r2, #1
 8006d28:	3a01      	subs	r2, #1
 8006d2a:	0552      	lsls	r2, r2, #21
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	491f      	ldr	r1, [pc, #124]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	610b      	str	r3, [r1, #16]
 8006d34:	e011      	b.n	8006d5a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d36:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006d3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6892      	ldr	r2, [r2, #8]
 8006d46:	0211      	lsls	r1, r2, #8
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6952      	ldr	r2, [r2, #20]
 8006d4c:	0852      	lsrs	r2, r2, #1
 8006d4e:	3a01      	subs	r2, #1
 8006d50:	0652      	lsls	r2, r2, #25
 8006d52:	430a      	orrs	r2, r1
 8006d54:	4915      	ldr	r1, [pc, #84]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a13      	ldr	r2, [pc, #76]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d66:	f7fc f88d 	bl	8002e84 <HAL_GetTick>
 8006d6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d6c:	e009      	b.n	8006d82 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d6e:	f7fc f889 	bl	8002e84 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d902      	bls.n	8006d82 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8006d80:	e005      	b.n	8006d8e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d82:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0ef      	beq.n	8006d6e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d106      	bne.n	8006da2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	4903      	ldr	r1, [pc, #12]	; (8006dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40021000 	.word	0x40021000

08006db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e049      	b.n	8006e56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f841 	bl	8006e5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	4610      	mov	r0, r2
 8006df0:	f000 fb42 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d001      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e03b      	b.n	8006f04 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a19      	ldr	r2, [pc, #100]	; (8006f10 <HAL_TIM_Base_Start_IT+0x9c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_TIM_Base_Start_IT+0x4e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb6:	d004      	beq.n	8006ec2 <HAL_TIM_Base_Start_IT+0x4e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <HAL_TIM_Base_Start_IT+0xa0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d115      	bne.n	8006eee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <HAL_TIM_Base_Start_IT+0xa4>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b06      	cmp	r3, #6
 8006ed2:	d015      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x8c>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eda:	d011      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eec:	e008      	b.n	8006f00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 0201 	orr.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e000      	b.n	8006f02 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40012c00 	.word	0x40012c00
 8006f14:	40014000 	.word	0x40014000
 8006f18:	00010007 	.word	0x00010007

08006f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e049      	b.n	8006fc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fb fc70 	bl	8002828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f000 fa8c 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d122      	bne.n	8007026 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d11b      	bne.n	8007026 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f06f 0202 	mvn.w	r2, #2
 8006ff6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fa15 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8007012:	e005      	b.n	8007020 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fa07 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa18 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b04      	cmp	r3, #4
 8007032:	d122      	bne.n	800707a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b04      	cmp	r3, #4
 8007040:	d11b      	bne.n	800707a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f06f 0204 	mvn.w	r2, #4
 800704a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f9eb 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8007066:	e005      	b.n	8007074 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f9dd 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9ee 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b08      	cmp	r3, #8
 8007086:	d122      	bne.n	80070ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b08      	cmp	r3, #8
 8007094:	d11b      	bne.n	80070ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f06f 0208 	mvn.w	r2, #8
 800709e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2204      	movs	r2, #4
 80070a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f9c1 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 80070ba:	e005      	b.n	80070c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f9b3 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f9c4 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d122      	bne.n	8007122 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d11b      	bne.n	8007122 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f06f 0210 	mvn.w	r2, #16
 80070f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2208      	movs	r2, #8
 80070f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f997 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 800710e:	e005      	b.n	800711c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f989 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f99a 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b01      	cmp	r3, #1
 800712e:	d10e      	bne.n	800714e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b01      	cmp	r3, #1
 800713c:	d107      	bne.n	800714e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0201 	mvn.w	r2, #1
 8007146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7fb fa0d 	bl	8002568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007158:	2b80      	cmp	r3, #128	; 0x80
 800715a:	d10e      	bne.n	800717a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007166:	2b80      	cmp	r3, #128	; 0x80
 8007168:	d107      	bne.n	800717a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fd49 	bl	8007c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007188:	d10e      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007194:	2b80      	cmp	r3, #128	; 0x80
 8007196:	d107      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fd3c 	bl	8007c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	d10e      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c0:	2b40      	cmp	r3, #64	; 0x40
 80071c2:	d107      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f948 	bl	8007464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d10e      	bne.n	8007200 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b20      	cmp	r3, #32
 80071ee:	d107      	bne.n	8007200 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0220 	mvn.w	r2, #32
 80071f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fcfc 	bl	8007bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800721e:	2302      	movs	r3, #2
 8007220:	e0fd      	b.n	800741e <HAL_TIM_PWM_ConfigChannel+0x216>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b14      	cmp	r3, #20
 800722e:	f200 80f0 	bhi.w	8007412 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	0800728d 	.word	0x0800728d
 800723c:	08007413 	.word	0x08007413
 8007240:	08007413 	.word	0x08007413
 8007244:	08007413 	.word	0x08007413
 8007248:	080072cd 	.word	0x080072cd
 800724c:	08007413 	.word	0x08007413
 8007250:	08007413 	.word	0x08007413
 8007254:	08007413 	.word	0x08007413
 8007258:	0800730f 	.word	0x0800730f
 800725c:	08007413 	.word	0x08007413
 8007260:	08007413 	.word	0x08007413
 8007264:	08007413 	.word	0x08007413
 8007268:	0800734f 	.word	0x0800734f
 800726c:	08007413 	.word	0x08007413
 8007270:	08007413 	.word	0x08007413
 8007274:	08007413 	.word	0x08007413
 8007278:	08007391 	.word	0x08007391
 800727c:	08007413 	.word	0x08007413
 8007280:	08007413 	.word	0x08007413
 8007284:	08007413 	.word	0x08007413
 8007288:	080073d1 	.word	0x080073d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f954 	bl	8007540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0208 	orr.w	r2, r2, #8
 80072a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0204 	bic.w	r2, r2, #4
 80072b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6999      	ldr	r1, [r3, #24]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	619a      	str	r2, [r3, #24]
      break;
 80072ca:	e0a3      	b.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f9b0 	bl	8007638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6999      	ldr	r1, [r3, #24]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	021a      	lsls	r2, r3, #8
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	619a      	str	r2, [r3, #24]
      break;
 800730c:	e082      	b.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fa09 	bl	800772c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f042 0208 	orr.w	r2, r2, #8
 8007328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0204 	bic.w	r2, r2, #4
 8007338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69d9      	ldr	r1, [r3, #28]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	61da      	str	r2, [r3, #28]
      break;
 800734c:	e062      	b.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fa61 	bl	800781c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69da      	ldr	r2, [r3, #28]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69d9      	ldr	r1, [r3, #28]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	021a      	lsls	r2, r3, #8
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	61da      	str	r2, [r3, #28]
      break;
 800738e:	e041      	b.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fa9e 	bl	80078d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0208 	orr.w	r2, r2, #8
 80073aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0204 	bic.w	r2, r2, #4
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	691a      	ldr	r2, [r3, #16]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073ce:	e021      	b.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fad6 	bl	8007988 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	021a      	lsls	r2, r3, #8
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007410:	e000      	b.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007412:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop

08007428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a2a      	ldr	r2, [pc, #168]	; (8007534 <TIM_Base_SetConfig+0xbc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_Base_SetConfig+0x20>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007496:	d108      	bne.n	80074aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a21      	ldr	r2, [pc, #132]	; (8007534 <TIM_Base_SetConfig+0xbc>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00b      	beq.n	80074ca <TIM_Base_SetConfig+0x52>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b8:	d007      	beq.n	80074ca <TIM_Base_SetConfig+0x52>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a1e      	ldr	r2, [pc, #120]	; (8007538 <TIM_Base_SetConfig+0xc0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_Base_SetConfig+0x52>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a1d      	ldr	r2, [pc, #116]	; (800753c <TIM_Base_SetConfig+0xc4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d108      	bne.n	80074dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a0c      	ldr	r2, [pc, #48]	; (8007534 <TIM_Base_SetConfig+0xbc>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d007      	beq.n	8007518 <TIM_Base_SetConfig+0xa0>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a0b      	ldr	r2, [pc, #44]	; (8007538 <TIM_Base_SetConfig+0xc0>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_Base_SetConfig+0xa0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a0a      	ldr	r2, [pc, #40]	; (800753c <TIM_Base_SetConfig+0xc4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d103      	bne.n	8007520 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	615a      	str	r2, [r3, #20]
}
 8007526:	bf00      	nop
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	40012c00 	.word	0x40012c00
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400

08007540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f023 0201 	bic.w	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0303 	bic.w	r3, r3, #3
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f023 0302 	bic.w	r3, r3, #2
 800758c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a24      	ldr	r2, [pc, #144]	; (800762c <TIM_OC1_SetConfig+0xec>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d007      	beq.n	80075b0 <TIM_OC1_SetConfig+0x70>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a23      	ldr	r2, [pc, #140]	; (8007630 <TIM_OC1_SetConfig+0xf0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d003      	beq.n	80075b0 <TIM_OC1_SetConfig+0x70>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a22      	ldr	r2, [pc, #136]	; (8007634 <TIM_OC1_SetConfig+0xf4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d10c      	bne.n	80075ca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f023 0308 	bic.w	r3, r3, #8
 80075b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	4313      	orrs	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f023 0304 	bic.w	r3, r3, #4
 80075c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a17      	ldr	r2, [pc, #92]	; (800762c <TIM_OC1_SetConfig+0xec>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <TIM_OC1_SetConfig+0xa2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a16      	ldr	r2, [pc, #88]	; (8007630 <TIM_OC1_SetConfig+0xf0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_OC1_SetConfig+0xa2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a15      	ldr	r2, [pc, #84]	; (8007634 <TIM_OC1_SetConfig+0xf4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d111      	bne.n	8007606 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400

08007638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0210 	bic.w	r2, r3, #16
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f023 0320 	bic.w	r3, r3, #32
 8007686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a22      	ldr	r2, [pc, #136]	; (8007720 <TIM_OC2_SetConfig+0xe8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d10d      	bne.n	80076b8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a19      	ldr	r2, [pc, #100]	; (8007720 <TIM_OC2_SetConfig+0xe8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <TIM_OC2_SetConfig+0x98>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a18      	ldr	r2, [pc, #96]	; (8007724 <TIM_OC2_SetConfig+0xec>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_OC2_SetConfig+0x98>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a17      	ldr	r2, [pc, #92]	; (8007728 <TIM_OC2_SetConfig+0xf0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d113      	bne.n	80076f8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40012c00 	.word	0x40012c00
 8007724:	40014000 	.word	0x40014000
 8007728:	40014400 	.word	0x40014400

0800772c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800775a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0303 	bic.w	r3, r3, #3
 8007766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	021b      	lsls	r3, r3, #8
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a21      	ldr	r2, [pc, #132]	; (8007810 <TIM_OC3_SetConfig+0xe4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d10d      	bne.n	80077aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	021b      	lsls	r3, r3, #8
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a18      	ldr	r2, [pc, #96]	; (8007810 <TIM_OC3_SetConfig+0xe4>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d007      	beq.n	80077c2 <TIM_OC3_SetConfig+0x96>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a17      	ldr	r2, [pc, #92]	; (8007814 <TIM_OC3_SetConfig+0xe8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d003      	beq.n	80077c2 <TIM_OC3_SetConfig+0x96>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a16      	ldr	r2, [pc, #88]	; (8007818 <TIM_OC3_SetConfig+0xec>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d113      	bne.n	80077ea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	621a      	str	r2, [r3, #32]
}
 8007804:	bf00      	nop
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	40012c00 	.word	0x40012c00
 8007814:	40014000 	.word	0x40014000
 8007818:	40014400 	.word	0x40014400

0800781c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800784a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	021b      	lsls	r3, r3, #8
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800786a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	031b      	lsls	r3, r3, #12
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a14      	ldr	r2, [pc, #80]	; (80078cc <TIM_OC4_SetConfig+0xb0>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d007      	beq.n	8007890 <TIM_OC4_SetConfig+0x74>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <TIM_OC4_SetConfig+0xb4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_OC4_SetConfig+0x74>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a12      	ldr	r2, [pc, #72]	; (80078d4 <TIM_OC4_SetConfig+0xb8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d109      	bne.n	80078a4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40014000 	.word	0x40014000
 80078d4:	40014400 	.word	0x40014400

080078d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800791c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	041b      	lsls	r3, r3, #16
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a13      	ldr	r2, [pc, #76]	; (800797c <TIM_OC5_SetConfig+0xa4>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d007      	beq.n	8007942 <TIM_OC5_SetConfig+0x6a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a12      	ldr	r2, [pc, #72]	; (8007980 <TIM_OC5_SetConfig+0xa8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d003      	beq.n	8007942 <TIM_OC5_SetConfig+0x6a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a11      	ldr	r2, [pc, #68]	; (8007984 <TIM_OC5_SetConfig+0xac>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d109      	bne.n	8007956 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007948:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	021b      	lsls	r3, r3, #8
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	621a      	str	r2, [r3, #32]
}
 8007970:	bf00      	nop
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	40012c00 	.word	0x40012c00
 8007980:	40014000 	.word	0x40014000
 8007984:	40014400 	.word	0x40014400

08007988 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	051b      	lsls	r3, r3, #20
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	4313      	orrs	r3, r2
 80079da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a14      	ldr	r2, [pc, #80]	; (8007a30 <TIM_OC6_SetConfig+0xa8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d007      	beq.n	80079f4 <TIM_OC6_SetConfig+0x6c>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a13      	ldr	r2, [pc, #76]	; (8007a34 <TIM_OC6_SetConfig+0xac>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_OC6_SetConfig+0x6c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a12      	ldr	r2, [pc, #72]	; (8007a38 <TIM_OC6_SetConfig+0xb0>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d109      	bne.n	8007a08 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	029b      	lsls	r3, r3, #10
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	621a      	str	r2, [r3, #32]
}
 8007a22:	bf00      	nop
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	40012c00 	.word	0x40012c00
 8007a34:	40014000 	.word	0x40014000
 8007a38:	40014400 	.word	0x40014400

08007a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e04f      	b.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a21      	ldr	r2, [pc, #132]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d108      	bne.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a14      	ldr	r2, [pc, #80]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d009      	beq.n	8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007abc:	d004      	beq.n	8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a10      	ldr	r2, [pc, #64]	; (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d10c      	bne.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	40012c00 	.word	0x40012c00
 8007b04:	40014000 	.word	0x40014000

08007b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e060      	b.n	8007be6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	041b      	lsls	r3, r3, #16
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d115      	bne.n	8007bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	051b      	lsls	r3, r3, #20
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40012c00 	.word	0x40012c00

08007bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e040      	b.n	8007cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d106      	bne.n	8007c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fa fe76 	bl	8002948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2224      	movs	r2, #36	; 0x24
 8007c60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0201 	bic.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f8c0 	bl	8007df8 <UART_SetConfig>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e022      	b.n	8007cc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fac0 	bl	8008210 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0201 	orr.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fb47 	bl	8008354 <UART_CheckIdleState>
 8007cc6:	4603      	mov	r3, r0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08a      	sub	sp, #40	; 0x28
 8007cd4:	af02      	add	r7, sp, #8
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	f040 8082 	bne.w	8007dee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <HAL_UART_Transmit+0x26>
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e07a      	b.n	8007df0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_UART_Transmit+0x38>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e073      	b.n	8007df0 <HAL_UART_Transmit+0x120>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2221      	movs	r2, #33	; 0x21
 8007d1c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d1e:	f7fb f8b1 	bl	8002e84 <HAL_GetTick>
 8007d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	88fa      	ldrh	r2, [r7, #6]
 8007d28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	88fa      	ldrh	r2, [r7, #6]
 8007d30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3c:	d108      	bne.n	8007d50 <HAL_UART_Transmit+0x80>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	61bb      	str	r3, [r7, #24]
 8007d4e:	e003      	b.n	8007d58 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007d60:	e02d      	b.n	8007dbe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2180      	movs	r1, #128	; 0x80
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 fb3a 	bl	80083e6 <UART_WaitOnFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e039      	b.n	8007df0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10b      	bne.n	8007d9a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	881a      	ldrh	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d8e:	b292      	uxth	r2, r2
 8007d90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	3302      	adds	r3, #2
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	e008      	b.n	8007dac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	b292      	uxth	r2, r2
 8007da4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	3301      	adds	r3, #1
 8007daa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1cb      	bne.n	8007d62 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2140      	movs	r1, #64	; 0x40
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 fb06 	bl	80083e6 <UART_WaitOnFlagUntilTimeout>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e005      	b.n	8007df0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2220      	movs	r2, #32
 8007de8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e000      	b.n	8007df0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007dee:	2302      	movs	r3, #2
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3720      	adds	r7, #32
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007df8:	b5b0      	push	{r4, r5, r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4baf      	ldr	r3, [pc, #700]	; (80080e0 <UART_SetConfig+0x2e8>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	6812      	ldr	r2, [r2, #0]
 8007e2a:	69f9      	ldr	r1, [r7, #28]
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4aa4      	ldr	r2, [pc, #656]	; (80080e4 <UART_SetConfig+0x2ec>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a9b      	ldr	r2, [pc, #620]	; (80080e8 <UART_SetConfig+0x2f0>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d121      	bne.n	8007ec2 <UART_SetConfig+0xca>
 8007e7e:	4b9b      	ldr	r3, [pc, #620]	; (80080ec <UART_SetConfig+0x2f4>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e84:	f003 0303 	and.w	r3, r3, #3
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d817      	bhi.n	8007ebc <UART_SetConfig+0xc4>
 8007e8c:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <UART_SetConfig+0x9c>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ea5 	.word	0x08007ea5
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007eab 	.word	0x08007eab
 8007ea0:	08007eb7 	.word	0x08007eb7
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	76fb      	strb	r3, [r7, #27]
 8007ea8:	e070      	b.n	8007f8c <UART_SetConfig+0x194>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	76fb      	strb	r3, [r7, #27]
 8007eae:	e06d      	b.n	8007f8c <UART_SetConfig+0x194>
 8007eb0:	2304      	movs	r3, #4
 8007eb2:	76fb      	strb	r3, [r7, #27]
 8007eb4:	e06a      	b.n	8007f8c <UART_SetConfig+0x194>
 8007eb6:	2308      	movs	r3, #8
 8007eb8:	76fb      	strb	r3, [r7, #27]
 8007eba:	e067      	b.n	8007f8c <UART_SetConfig+0x194>
 8007ebc:	2310      	movs	r3, #16
 8007ebe:	76fb      	strb	r3, [r7, #27]
 8007ec0:	e064      	b.n	8007f8c <UART_SetConfig+0x194>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a8a      	ldr	r2, [pc, #552]	; (80080f0 <UART_SetConfig+0x2f8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d132      	bne.n	8007f32 <UART_SetConfig+0x13a>
 8007ecc:	4b87      	ldr	r3, [pc, #540]	; (80080ec <UART_SetConfig+0x2f4>)
 8007ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed2:	f003 030c 	and.w	r3, r3, #12
 8007ed6:	2b0c      	cmp	r3, #12
 8007ed8:	d828      	bhi.n	8007f2c <UART_SetConfig+0x134>
 8007eda:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <UART_SetConfig+0xe8>)
 8007edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee0:	08007f15 	.word	0x08007f15
 8007ee4:	08007f2d 	.word	0x08007f2d
 8007ee8:	08007f2d 	.word	0x08007f2d
 8007eec:	08007f2d 	.word	0x08007f2d
 8007ef0:	08007f21 	.word	0x08007f21
 8007ef4:	08007f2d 	.word	0x08007f2d
 8007ef8:	08007f2d 	.word	0x08007f2d
 8007efc:	08007f2d 	.word	0x08007f2d
 8007f00:	08007f1b 	.word	0x08007f1b
 8007f04:	08007f2d 	.word	0x08007f2d
 8007f08:	08007f2d 	.word	0x08007f2d
 8007f0c:	08007f2d 	.word	0x08007f2d
 8007f10:	08007f27 	.word	0x08007f27
 8007f14:	2300      	movs	r3, #0
 8007f16:	76fb      	strb	r3, [r7, #27]
 8007f18:	e038      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	76fb      	strb	r3, [r7, #27]
 8007f1e:	e035      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f20:	2304      	movs	r3, #4
 8007f22:	76fb      	strb	r3, [r7, #27]
 8007f24:	e032      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f26:	2308      	movs	r3, #8
 8007f28:	76fb      	strb	r3, [r7, #27]
 8007f2a:	e02f      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	76fb      	strb	r3, [r7, #27]
 8007f30:	e02c      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a6b      	ldr	r2, [pc, #428]	; (80080e4 <UART_SetConfig+0x2ec>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d125      	bne.n	8007f88 <UART_SetConfig+0x190>
 8007f3c:	4b6b      	ldr	r3, [pc, #428]	; (80080ec <UART_SetConfig+0x2f4>)
 8007f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f4a:	d017      	beq.n	8007f7c <UART_SetConfig+0x184>
 8007f4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f50:	d817      	bhi.n	8007f82 <UART_SetConfig+0x18a>
 8007f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f56:	d00b      	beq.n	8007f70 <UART_SetConfig+0x178>
 8007f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f5c:	d811      	bhi.n	8007f82 <UART_SetConfig+0x18a>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <UART_SetConfig+0x172>
 8007f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f66:	d006      	beq.n	8007f76 <UART_SetConfig+0x17e>
 8007f68:	e00b      	b.n	8007f82 <UART_SetConfig+0x18a>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	76fb      	strb	r3, [r7, #27]
 8007f6e:	e00d      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f70:	2302      	movs	r3, #2
 8007f72:	76fb      	strb	r3, [r7, #27]
 8007f74:	e00a      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f76:	2304      	movs	r3, #4
 8007f78:	76fb      	strb	r3, [r7, #27]
 8007f7a:	e007      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f7c:	2308      	movs	r3, #8
 8007f7e:	76fb      	strb	r3, [r7, #27]
 8007f80:	e004      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f82:	2310      	movs	r3, #16
 8007f84:	76fb      	strb	r3, [r7, #27]
 8007f86:	e001      	b.n	8007f8c <UART_SetConfig+0x194>
 8007f88:	2310      	movs	r3, #16
 8007f8a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a54      	ldr	r2, [pc, #336]	; (80080e4 <UART_SetConfig+0x2ec>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d173      	bne.n	800807e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f96:	7efb      	ldrb	r3, [r7, #27]
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d824      	bhi.n	8007fe6 <UART_SetConfig+0x1ee>
 8007f9c:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <UART_SetConfig+0x1ac>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08007fc9 	.word	0x08007fc9
 8007fa8:	08007fe7 	.word	0x08007fe7
 8007fac:	08007fd1 	.word	0x08007fd1
 8007fb0:	08007fe7 	.word	0x08007fe7
 8007fb4:	08007fd7 	.word	0x08007fd7
 8007fb8:	08007fe7 	.word	0x08007fe7
 8007fbc:	08007fe7 	.word	0x08007fe7
 8007fc0:	08007fe7 	.word	0x08007fe7
 8007fc4:	08007fdf 	.word	0x08007fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fc8:	f7fe fb3e 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8007fcc:	6178      	str	r0, [r7, #20]
        break;
 8007fce:	e00f      	b.n	8007ff0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fd0:	4b48      	ldr	r3, [pc, #288]	; (80080f4 <UART_SetConfig+0x2fc>)
 8007fd2:	617b      	str	r3, [r7, #20]
        break;
 8007fd4:	e00c      	b.n	8007ff0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fd6:	f7fe faa1 	bl	800651c <HAL_RCC_GetSysClockFreq>
 8007fda:	6178      	str	r0, [r7, #20]
        break;
 8007fdc:	e008      	b.n	8007ff0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fe2:	617b      	str	r3, [r7, #20]
        break;
 8007fe4:	e004      	b.n	8007ff0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	76bb      	strb	r3, [r7, #26]
        break;
 8007fee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 80fe 	beq.w	80081f4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	4413      	add	r3, r2
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	429a      	cmp	r2, r3
 8008006:	d305      	bcc.n	8008014 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	429a      	cmp	r2, r3
 8008012:	d902      	bls.n	800801a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	76bb      	strb	r3, [r7, #26]
 8008018:	e0ec      	b.n	80081f4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4618      	mov	r0, r3
 800801e:	f04f 0100 	mov.w	r1, #0
 8008022:	f04f 0200 	mov.w	r2, #0
 8008026:	f04f 0300 	mov.w	r3, #0
 800802a:	020b      	lsls	r3, r1, #8
 800802c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008030:	0202      	lsls	r2, r0, #8
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	6849      	ldr	r1, [r1, #4]
 8008036:	0849      	lsrs	r1, r1, #1
 8008038:	4608      	mov	r0, r1
 800803a:	f04f 0100 	mov.w	r1, #0
 800803e:	1814      	adds	r4, r2, r0
 8008040:	eb43 0501 	adc.w	r5, r3, r1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	461a      	mov	r2, r3
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	4620      	mov	r0, r4
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 fda9 	bl	8000ba8 <__aeabi_uldivmod>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4613      	mov	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008064:	d308      	bcc.n	8008078 <UART_SetConfig+0x280>
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800806c:	d204      	bcs.n	8008078 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	60da      	str	r2, [r3, #12]
 8008076:	e0bd      	b.n	80081f4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	76bb      	strb	r3, [r7, #26]
 800807c:	e0ba      	b.n	80081f4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008086:	d168      	bne.n	800815a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8008088:	7efb      	ldrb	r3, [r7, #27]
 800808a:	2b08      	cmp	r3, #8
 800808c:	d834      	bhi.n	80080f8 <UART_SetConfig+0x300>
 800808e:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <UART_SetConfig+0x29c>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080b9 	.word	0x080080b9
 8008098:	080080c1 	.word	0x080080c1
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	080080f9 	.word	0x080080f9
 80080a4:	080080cf 	.word	0x080080cf
 80080a8:	080080f9 	.word	0x080080f9
 80080ac:	080080f9 	.word	0x080080f9
 80080b0:	080080f9 	.word	0x080080f9
 80080b4:	080080d7 	.word	0x080080d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080b8:	f7fe fac6 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 80080bc:	6178      	str	r0, [r7, #20]
        break;
 80080be:	e020      	b.n	8008102 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080c0:	f7fe fad8 	bl	8006674 <HAL_RCC_GetPCLK2Freq>
 80080c4:	6178      	str	r0, [r7, #20]
        break;
 80080c6:	e01c      	b.n	8008102 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <UART_SetConfig+0x2fc>)
 80080ca:	617b      	str	r3, [r7, #20]
        break;
 80080cc:	e019      	b.n	8008102 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ce:	f7fe fa25 	bl	800651c <HAL_RCC_GetSysClockFreq>
 80080d2:	6178      	str	r0, [r7, #20]
        break;
 80080d4:	e015      	b.n	8008102 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080da:	617b      	str	r3, [r7, #20]
        break;
 80080dc:	e011      	b.n	8008102 <UART_SetConfig+0x30a>
 80080de:	bf00      	nop
 80080e0:	efff69f3 	.word	0xefff69f3
 80080e4:	40008000 	.word	0x40008000
 80080e8:	40013800 	.word	0x40013800
 80080ec:	40021000 	.word	0x40021000
 80080f0:	40004400 	.word	0x40004400
 80080f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	76bb      	strb	r3, [r7, #26]
        break;
 8008100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d075      	beq.n	80081f4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	005a      	lsls	r2, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	085b      	lsrs	r3, r3, #1
 8008112:	441a      	add	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	fbb2 f3f3 	udiv	r3, r2, r3
 800811c:	b29b      	uxth	r3, r3
 800811e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2b0f      	cmp	r3, #15
 8008124:	d916      	bls.n	8008154 <UART_SetConfig+0x35c>
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800812c:	d212      	bcs.n	8008154 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	b29b      	uxth	r3, r3
 8008132:	f023 030f 	bic.w	r3, r3, #15
 8008136:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	b29b      	uxth	r3, r3
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	b29a      	uxth	r2, r3
 8008144:	89fb      	ldrh	r3, [r7, #14]
 8008146:	4313      	orrs	r3, r2
 8008148:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	89fa      	ldrh	r2, [r7, #14]
 8008150:	60da      	str	r2, [r3, #12]
 8008152:	e04f      	b.n	80081f4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	76bb      	strb	r3, [r7, #26]
 8008158:	e04c      	b.n	80081f4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800815a:	7efb      	ldrb	r3, [r7, #27]
 800815c:	2b08      	cmp	r3, #8
 800815e:	d828      	bhi.n	80081b2 <UART_SetConfig+0x3ba>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <UART_SetConfig+0x370>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	0800818d 	.word	0x0800818d
 800816c:	08008195 	.word	0x08008195
 8008170:	0800819d 	.word	0x0800819d
 8008174:	080081b3 	.word	0x080081b3
 8008178:	080081a3 	.word	0x080081a3
 800817c:	080081b3 	.word	0x080081b3
 8008180:	080081b3 	.word	0x080081b3
 8008184:	080081b3 	.word	0x080081b3
 8008188:	080081ab 	.word	0x080081ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800818c:	f7fe fa5c 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8008190:	6178      	str	r0, [r7, #20]
        break;
 8008192:	e013      	b.n	80081bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008194:	f7fe fa6e 	bl	8006674 <HAL_RCC_GetPCLK2Freq>
 8008198:	6178      	str	r0, [r7, #20]
        break;
 800819a:	e00f      	b.n	80081bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800819c:	4b1b      	ldr	r3, [pc, #108]	; (800820c <UART_SetConfig+0x414>)
 800819e:	617b      	str	r3, [r7, #20]
        break;
 80081a0:	e00c      	b.n	80081bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081a2:	f7fe f9bb 	bl	800651c <HAL_RCC_GetSysClockFreq>
 80081a6:	6178      	str	r0, [r7, #20]
        break;
 80081a8:	e008      	b.n	80081bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ae:	617b      	str	r3, [r7, #20]
        break;
 80081b0:	e004      	b.n	80081bc <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	76bb      	strb	r3, [r7, #26]
        break;
 80081ba:	bf00      	nop
    }

    if (pclk != 0U)
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d018      	beq.n	80081f4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	085a      	lsrs	r2, r3, #1
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	441a      	add	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b0f      	cmp	r3, #15
 80081dc:	d908      	bls.n	80081f0 <UART_SetConfig+0x3f8>
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e4:	d204      	bcs.n	80081f0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	60da      	str	r2, [r3, #12]
 80081ee:	e001      	b.n	80081f4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008200:	7ebb      	ldrb	r3, [r7, #26]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3720      	adds	r7, #32
 8008206:	46bd      	mov	sp, r7
 8008208:	bdb0      	pop	{r4, r5, r7, pc}
 800820a:	bf00      	nop
 800820c:	00f42400 	.word	0x00f42400

08008210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d01a      	beq.n	8008326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830e:	d10a      	bne.n	8008326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	605a      	str	r2, [r3, #4]
  }
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af02      	add	r7, sp, #8
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008364:	f7fa fd8e 	bl	8002e84 <HAL_GetTick>
 8008368:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b08      	cmp	r3, #8
 8008376:	d10e      	bne.n	8008396 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f82d 	bl	80083e6 <UART_WaitOnFlagUntilTimeout>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e023      	b.n	80083de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d10e      	bne.n	80083c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f817 	bl	80083e6 <UART_WaitOnFlagUntilTimeout>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e00d      	b.n	80083de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	603b      	str	r3, [r7, #0]
 80083f2:	4613      	mov	r3, r2
 80083f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083f6:	e05e      	b.n	80084b6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fe:	d05a      	beq.n	80084b6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008400:	f7fa fd40 	bl	8002e84 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	429a      	cmp	r2, r3
 800840e:	d302      	bcc.n	8008416 <UART_WaitOnFlagUntilTimeout+0x30>
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d11b      	bne.n	800844e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008424:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0201 	bic.w	r2, r2, #1
 8008434:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2220      	movs	r2, #32
 800843a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2220      	movs	r2, #32
 8008440:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e043      	b.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b00      	cmp	r3, #0
 800845a:	d02c      	beq.n	80084b6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800846a:	d124      	bne.n	80084b6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008474:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008484:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0201 	bic.w	r2, r2, #1
 8008494:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e00f      	b.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69da      	ldr	r2, [r3, #28]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4013      	ands	r3, r2
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	bf0c      	ite	eq
 80084c6:	2301      	moveq	r3, #1
 80084c8:	2300      	movne	r3, #0
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d091      	beq.n	80083f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <__NVIC_SetPriority>:
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	db0a      	blt.n	800850a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	490c      	ldr	r1, [pc, #48]	; (800852c <__NVIC_SetPriority+0x4c>)
 80084fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084fe:	0112      	lsls	r2, r2, #4
 8008500:	b2d2      	uxtb	r2, r2
 8008502:	440b      	add	r3, r1
 8008504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008508:	e00a      	b.n	8008520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	b2da      	uxtb	r2, r3
 800850e:	4908      	ldr	r1, [pc, #32]	; (8008530 <__NVIC_SetPriority+0x50>)
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	3b04      	subs	r3, #4
 8008518:	0112      	lsls	r2, r2, #4
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	440b      	add	r3, r1
 800851e:	761a      	strb	r2, [r3, #24]
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	e000e100 	.word	0xe000e100
 8008530:	e000ed00 	.word	0xe000ed00

08008534 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008538:	4b05      	ldr	r3, [pc, #20]	; (8008550 <SysTick_Handler+0x1c>)
 800853a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800853c:	f001 fcfe 	bl	8009f3c <xTaskGetSchedulerState>
 8008540:	4603      	mov	r3, r0
 8008542:	2b01      	cmp	r3, #1
 8008544:	d001      	beq.n	800854a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008546:	f002 fae7 	bl	800ab18 <xPortSysTickHandler>
  }
}
 800854a:	bf00      	nop
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	e000e010 	.word	0xe000e010

08008554 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008558:	2100      	movs	r1, #0
 800855a:	f06f 0004 	mvn.w	r0, #4
 800855e:	f7ff ffbf 	bl	80084e0 <__NVIC_SetPriority>
#endif
}
 8008562:	bf00      	nop
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800856e:	f3ef 8305 	mrs	r3, IPSR
 8008572:	603b      	str	r3, [r7, #0]
  return(result);
 8008574:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800857a:	f06f 0305 	mvn.w	r3, #5
 800857e:	607b      	str	r3, [r7, #4]
 8008580:	e00c      	b.n	800859c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008582:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <osKernelInitialize+0x44>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d105      	bne.n	8008596 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800858a:	4b08      	ldr	r3, [pc, #32]	; (80085ac <osKernelInitialize+0x44>)
 800858c:	2201      	movs	r2, #1
 800858e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008590:	2300      	movs	r3, #0
 8008592:	607b      	str	r3, [r7, #4]
 8008594:	e002      	b.n	800859c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008596:	f04f 33ff 	mov.w	r3, #4294967295
 800859a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800859c:	687b      	ldr	r3, [r7, #4]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20000204 	.word	0x20000204

080085b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085b6:	f3ef 8305 	mrs	r3, IPSR
 80085ba:	603b      	str	r3, [r7, #0]
  return(result);
 80085bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80085c2:	f06f 0305 	mvn.w	r3, #5
 80085c6:	607b      	str	r3, [r7, #4]
 80085c8:	e010      	b.n	80085ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <osKernelStart+0x48>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d109      	bne.n	80085e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80085d2:	f7ff ffbf 	bl	8008554 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80085d6:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <osKernelStart+0x48>)
 80085d8:	2202      	movs	r2, #2
 80085da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80085dc:	f001 f866 	bl	80096ac <vTaskStartScheduler>
      stat = osOK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	607b      	str	r3, [r7, #4]
 80085e4:	e002      	b.n	80085ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80085e6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085ec:	687b      	ldr	r3, [r7, #4]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000204 	.word	0x20000204

080085fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08e      	sub	sp, #56	; 0x38
 8008600:	af04      	add	r7, sp, #16
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008608:	2300      	movs	r3, #0
 800860a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800860c:	f3ef 8305 	mrs	r3, IPSR
 8008610:	617b      	str	r3, [r7, #20]
  return(result);
 8008612:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008614:	2b00      	cmp	r3, #0
 8008616:	d17e      	bne.n	8008716 <osThreadNew+0x11a>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d07b      	beq.n	8008716 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800861e:	2380      	movs	r3, #128	; 0x80
 8008620:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008622:	2318      	movs	r3, #24
 8008624:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800862a:	f04f 33ff 	mov.w	r3, #4294967295
 800862e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d045      	beq.n	80086c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <osThreadNew+0x48>
        name = attr->name;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d008      	beq.n	800866a <osThreadNew+0x6e>
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	2b38      	cmp	r3, #56	; 0x38
 800865c:	d805      	bhi.n	800866a <osThreadNew+0x6e>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <osThreadNew+0x72>
        return (NULL);
 800866a:	2300      	movs	r3, #0
 800866c:	e054      	b.n	8008718 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	089b      	lsrs	r3, r3, #2
 800867c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00e      	beq.n	80086a4 <osThreadNew+0xa8>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	2b5b      	cmp	r3, #91	; 0x5b
 800868c:	d90a      	bls.n	80086a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008692:	2b00      	cmp	r3, #0
 8008694:	d006      	beq.n	80086a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <osThreadNew+0xa8>
        mem = 1;
 800869e:	2301      	movs	r3, #1
 80086a0:	61bb      	str	r3, [r7, #24]
 80086a2:	e010      	b.n	80086c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10c      	bne.n	80086c6 <osThreadNew+0xca>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d108      	bne.n	80086c6 <osThreadNew+0xca>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d104      	bne.n	80086c6 <osThreadNew+0xca>
          mem = 0;
 80086bc:	2300      	movs	r3, #0
 80086be:	61bb      	str	r3, [r7, #24]
 80086c0:	e001      	b.n	80086c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d110      	bne.n	80086ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086d4:	9202      	str	r2, [sp, #8]
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	6a3a      	ldr	r2, [r7, #32]
 80086e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 fe0c 	bl	8009300 <xTaskCreateStatic>
 80086e8:	4603      	mov	r3, r0
 80086ea:	613b      	str	r3, [r7, #16]
 80086ec:	e013      	b.n	8008716 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d110      	bne.n	8008716 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	f107 0310 	add.w	r3, r7, #16
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fe57 	bl	80093ba <xTaskCreate>
 800870c:	4603      	mov	r3, r0
 800870e:	2b01      	cmp	r3, #1
 8008710:	d001      	beq.n	8008716 <osThreadNew+0x11a>
            hTask = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008716:	693b      	ldr	r3, [r7, #16]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3728      	adds	r7, #40	; 0x28
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008728:	f3ef 8305 	mrs	r3, IPSR
 800872c:	60bb      	str	r3, [r7, #8]
  return(result);
 800872e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <osDelay+0x1c>
    stat = osErrorISR;
 8008734:	f06f 0305 	mvn.w	r3, #5
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	e007      	b.n	800874c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 ff7c 	bl	8009644 <vTaskDelay>
    }
  }

  return (stat);
 800874c:	68fb      	ldr	r3, [r7, #12]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4a07      	ldr	r2, [pc, #28]	; (8008784 <vApplicationGetIdleTaskMemory+0x2c>)
 8008768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	4a06      	ldr	r2, [pc, #24]	; (8008788 <vApplicationGetIdleTaskMemory+0x30>)
 800876e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2280      	movs	r2, #128	; 0x80
 8008774:	601a      	str	r2, [r3, #0]
}
 8008776:	bf00      	nop
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000208 	.word	0x20000208
 8008788:	20000264 	.word	0x20000264

0800878c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4a07      	ldr	r2, [pc, #28]	; (80087b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800879c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4a06      	ldr	r2, [pc, #24]	; (80087bc <vApplicationGetTimerTaskMemory+0x30>)
 80087a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087aa:	601a      	str	r2, [r3, #0]
}
 80087ac:	bf00      	nop
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	20000464 	.word	0x20000464
 80087bc:	200004c0 	.word	0x200004c0

080087c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f103 0208 	add.w	r2, r3, #8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295
 80087d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f103 0208 	add.w	r2, r3, #8
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f103 0208 	add.w	r2, r3, #8
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008862:	b480      	push	{r7}
 8008864:	b085      	sub	sp, #20
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d103      	bne.n	8008882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	e00c      	b.n	800889c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3308      	adds	r3, #8
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e002      	b.n	8008890 <vListInsert+0x2e>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	429a      	cmp	r2, r3
 800889a:	d2f6      	bcs.n	800888a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6892      	ldr	r2, [r2, #8]
 80088ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6852      	ldr	r2, [r2, #4]
 80088f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d103      	bne.n	8008908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	1e5a      	subs	r2, r3, #1
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008952:	f002 f84f 	bl	800a9f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008962:	fb01 f303 	mul.w	r3, r1, r3
 8008966:	441a      	add	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008982:	3b01      	subs	r3, #1
 8008984:	68f9      	ldr	r1, [r7, #12]
 8008986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008988:	fb01 f303 	mul.w	r3, r1, r3
 800898c:	441a      	add	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	22ff      	movs	r2, #255	; 0xff
 8008996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	22ff      	movs	r2, #255	; 0xff
 800899e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d114      	bne.n	80089d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01a      	beq.n	80089e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3310      	adds	r3, #16
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f903 	bl	8009bc0 <xTaskRemoveFromEventList>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d012      	beq.n	80089e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089c0:	4b0c      	ldr	r3, [pc, #48]	; (80089f4 <xQueueGenericReset+0xcc>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	e009      	b.n	80089e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3310      	adds	r3, #16
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff fef2 	bl	80087c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3324      	adds	r3, #36	; 0x24
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff feed 	bl	80087c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089e6:	f002 f835 	bl	800aa54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80089ea:	2301      	movs	r3, #1
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08e      	sub	sp, #56	; 0x38
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <xQueueGenericCreateStatic+0x52>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <xQueueGenericCreateStatic+0x56>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <xQueueGenericCreateStatic+0x58>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	623b      	str	r3, [r7, #32]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d102      	bne.n	8008a76 <xQueueGenericCreateStatic+0x7e>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <xQueueGenericCreateStatic+0x82>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e000      	b.n	8008a7c <xQueueGenericCreateStatic+0x84>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	61fb      	str	r3, [r7, #28]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a96:	2350      	movs	r3, #80	; 0x50
 8008a98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b50      	cmp	r3, #80	; 0x50
 8008a9e:	d00a      	beq.n	8008ab6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	61bb      	str	r3, [r7, #24]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ab6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00d      	beq.n	8008ade <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008aca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 f805 	bl	8008ae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3730      	adds	r7, #48	; 0x30
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d103      	bne.n	8008b04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	e002      	b.n	8008b0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b16:	2101      	movs	r1, #1
 8008b18:	69b8      	ldr	r0, [r7, #24]
 8008b1a:	f7ff ff05 	bl	8008928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08e      	sub	sp, #56	; 0x38
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <xQueueGenericSend+0x32>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d103      	bne.n	8008b70 <xQueueGenericSend+0x40>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <xQueueGenericSend+0x44>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <xQueueGenericSend+0x46>
 8008b74:	2300      	movs	r3, #0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <xQueueGenericSend+0x60>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d103      	bne.n	8008b9e <xQueueGenericSend+0x6e>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <xQueueGenericSend+0x72>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <xQueueGenericSend+0x74>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <xQueueGenericSend+0x8e>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	623b      	str	r3, [r7, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bbe:	f001 f9bd 	bl	8009f3c <xTaskGetSchedulerState>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <xQueueGenericSend+0x9e>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <xQueueGenericSend+0xa2>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <xQueueGenericSend+0xa4>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xQueueGenericSend+0xbe>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	61fb      	str	r3, [r7, #28]
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bee:	f001 ff01 	bl	800a9f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d302      	bcc.n	8008c04 <xQueueGenericSend+0xd4>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d129      	bne.n	8008c58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c0a:	f000 fa0b 	bl	8009024 <prvCopyDataToQueue>
 8008c0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d010      	beq.n	8008c3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1a:	3324      	adds	r3, #36	; 0x24
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 ffcf 	bl	8009bc0 <xTaskRemoveFromEventList>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d013      	beq.n	8008c50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c28:	4b3f      	ldr	r3, [pc, #252]	; (8008d28 <xQueueGenericSend+0x1f8>)
 8008c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	e00a      	b.n	8008c50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d007      	beq.n	8008c50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c40:	4b39      	ldr	r3, [pc, #228]	; (8008d28 <xQueueGenericSend+0x1f8>)
 8008c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c50:	f001 ff00 	bl	800aa54 <vPortExitCritical>
				return pdPASS;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e063      	b.n	8008d20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c5e:	f001 fef9 	bl	800aa54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e05c      	b.n	8008d20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c6c:	f107 0314 	add.w	r3, r7, #20
 8008c70:	4618      	mov	r0, r3
 8008c72:	f001 f809 	bl	8009c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c76:	2301      	movs	r3, #1
 8008c78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c7a:	f001 feeb 	bl	800aa54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c7e:	f000 fd7b 	bl	8009778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c82:	f001 feb7 	bl	800a9f4 <vPortEnterCritical>
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c8c:	b25b      	sxtb	r3, r3
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	d103      	bne.n	8008c9c <xQueueGenericSend+0x16c>
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ca2:	b25b      	sxtb	r3, r3
 8008ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca8:	d103      	bne.n	8008cb2 <xQueueGenericSend+0x182>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cb2:	f001 fecf 	bl	800aa54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cb6:	1d3a      	adds	r2, r7, #4
 8008cb8:	f107 0314 	add.w	r3, r7, #20
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fff8 	bl	8009cb4 <xTaskCheckForTimeOut>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d124      	bne.n	8008d14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ccc:	f000 faa2 	bl	8009214 <prvIsQueueFull>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d018      	beq.n	8008d08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	3310      	adds	r3, #16
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 ff1e 	bl	8009b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ce6:	f000 fa2d 	bl	8009144 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cea:	f000 fd53 	bl	8009794 <xTaskResumeAll>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f47f af7c 	bne.w	8008bee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008cf6:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <xQueueGenericSend+0x1f8>)
 8008cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	e772      	b.n	8008bee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d0a:	f000 fa1b 	bl	8009144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d0e:	f000 fd41 	bl	8009794 <xTaskResumeAll>
 8008d12:	e76c      	b.n	8008bee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d16:	f000 fa15 	bl	8009144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d1a:	f000 fd3b 	bl	8009794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3738      	adds	r7, #56	; 0x38
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b090      	sub	sp, #64	; 0x40
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d103      	bne.n	8008d68 <xQueueGenericSendFromISR+0x3c>
 8008d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <xQueueGenericSendFromISR+0x40>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e000      	b.n	8008d6e <xQueueGenericSendFromISR+0x42>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d103      	bne.n	8008d96 <xQueueGenericSendFromISR+0x6a>
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d101      	bne.n	8008d9a <xQueueGenericSendFromISR+0x6e>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e000      	b.n	8008d9c <xQueueGenericSendFromISR+0x70>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	623b      	str	r3, [r7, #32]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008db6:	f001 feff 	bl	800abb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008dba:	f3ef 8211 	mrs	r2, BASEPRI
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	61fa      	str	r2, [r7, #28]
 8008dd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d302      	bcc.n	8008de8 <xQueueGenericSendFromISR+0xbc>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d12f      	bne.n	8008e48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008dfe:	f000 f911 	bl	8009024 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0a:	d112      	bne.n	8008e32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d016      	beq.n	8008e42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	3324      	adds	r3, #36	; 0x24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fed1 	bl	8009bc0 <xTaskRemoveFromEventList>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00e      	beq.n	8008e42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00b      	beq.n	8008e42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e007      	b.n	8008e42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e36:	3301      	adds	r3, #1
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	b25a      	sxtb	r2, r3
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e42:	2301      	movs	r3, #1
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008e46:	e001      	b.n	8008e4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3740      	adds	r7, #64	; 0x40
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08c      	sub	sp, #48	; 0x30
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10a      	bne.n	8008e94 <xQueueReceive+0x30>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	623b      	str	r3, [r7, #32]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d103      	bne.n	8008ea2 <xQueueReceive+0x3e>
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <xQueueReceive+0x42>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e000      	b.n	8008ea8 <xQueueReceive+0x44>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <xQueueReceive+0x5e>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	61fb      	str	r3, [r7, #28]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ec2:	f001 f83b 	bl	8009f3c <xTaskGetSchedulerState>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d102      	bne.n	8008ed2 <xQueueReceive+0x6e>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <xQueueReceive+0x72>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <xQueueReceive+0x74>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10a      	bne.n	8008ef2 <xQueueReceive+0x8e>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	61bb      	str	r3, [r7, #24]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ef2:	f001 fd7f 	bl	800a9f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01f      	beq.n	8008f42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f06:	f000 f8f7 	bl	80090f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	1e5a      	subs	r2, r3, #1
 8008f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00f      	beq.n	8008f3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	3310      	adds	r3, #16
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fe4e 	bl	8009bc0 <xTaskRemoveFromEventList>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d007      	beq.n	8008f3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f2a:	4b3d      	ldr	r3, [pc, #244]	; (8009020 <xQueueReceive+0x1bc>)
 8008f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f3a:	f001 fd8b 	bl	800aa54 <vPortExitCritical>
				return pdPASS;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e069      	b.n	8009016 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d103      	bne.n	8008f50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f48:	f001 fd84 	bl	800aa54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	e062      	b.n	8009016 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d106      	bne.n	8008f64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f56:	f107 0310 	add.w	r3, r7, #16
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fe94 	bl	8009c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f64:	f001 fd76 	bl	800aa54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f68:	f000 fc06 	bl	8009778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f6c:	f001 fd42 	bl	800a9f4 <vPortEnterCritical>
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f76:	b25b      	sxtb	r3, r3
 8008f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7c:	d103      	bne.n	8008f86 <xQueueReceive+0x122>
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f8c:	b25b      	sxtb	r3, r3
 8008f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f92:	d103      	bne.n	8008f9c <xQueueReceive+0x138>
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f9c:	f001 fd5a 	bl	800aa54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fa0:	1d3a      	adds	r2, r7, #4
 8008fa2:	f107 0310 	add.w	r3, r7, #16
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fe83 	bl	8009cb4 <xTaskCheckForTimeOut>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d123      	bne.n	8008ffc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb6:	f000 f917 	bl	80091e8 <prvIsQueueEmpty>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d017      	beq.n	8008ff0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	3324      	adds	r3, #36	; 0x24
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fda9 	bl	8009b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fd0:	f000 f8b8 	bl	8009144 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fd4:	f000 fbde 	bl	8009794 <xTaskResumeAll>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d189      	bne.n	8008ef2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008fde:	4b10      	ldr	r3, [pc, #64]	; (8009020 <xQueueReceive+0x1bc>)
 8008fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	e780      	b.n	8008ef2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ff2:	f000 f8a7 	bl	8009144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ff6:	f000 fbcd 	bl	8009794 <xTaskResumeAll>
 8008ffa:	e77a      	b.n	8008ef2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ffe:	f000 f8a1 	bl	8009144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009002:	f000 fbc7 	bl	8009794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009008:	f000 f8ee 	bl	80091e8 <prvIsQueueEmpty>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	f43f af6f 	beq.w	8008ef2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009016:	4618      	mov	r0, r3
 8009018:	3730      	adds	r7, #48	; 0x30
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009030:	2300      	movs	r3, #0
 8009032:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009038:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10d      	bne.n	800905e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d14d      	bne.n	80090e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 ff92 	bl	8009f78 <xTaskPriorityDisinherit>
 8009054:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	609a      	str	r2, [r3, #8]
 800905c:	e043      	b.n	80090e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d119      	bne.n	8009098 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6858      	ldr	r0, [r3, #4]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906c:	461a      	mov	r2, r3
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	f001 fefe 	bl	800ae70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907c:	441a      	add	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	429a      	cmp	r2, r3
 800908c:	d32b      	bcc.n	80090e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	605a      	str	r2, [r3, #4]
 8009096:	e026      	b.n	80090e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	68d8      	ldr	r0, [r3, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a0:	461a      	mov	r2, r3
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	f001 fee4 	bl	800ae70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	425b      	negs	r3, r3
 80090b2:	441a      	add	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d207      	bcs.n	80090d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	425b      	negs	r3, r3
 80090ce:	441a      	add	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d105      	bne.n	80090e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80090ee:	697b      	ldr	r3, [r7, #20]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	d018      	beq.n	800913c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68da      	ldr	r2, [r3, #12]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	441a      	add	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	429a      	cmp	r2, r3
 8009122:	d303      	bcc.n	800912c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68d9      	ldr	r1, [r3, #12]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	461a      	mov	r2, r3
 8009136:	6838      	ldr	r0, [r7, #0]
 8009138:	f001 fe9a 	bl	800ae70 <memcpy>
	}
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800914c:	f001 fc52 	bl	800a9f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009156:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009158:	e011      	b.n	800917e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	d012      	beq.n	8009188 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	3324      	adds	r3, #36	; 0x24
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fd2a 	bl	8009bc0 <xTaskRemoveFromEventList>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009172:	f000 fe01 	bl	8009d78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	3b01      	subs	r3, #1
 800917a:	b2db      	uxtb	r3, r3
 800917c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800917e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009182:	2b00      	cmp	r3, #0
 8009184:	dce9      	bgt.n	800915a <prvUnlockQueue+0x16>
 8009186:	e000      	b.n	800918a <prvUnlockQueue+0x46>
					break;
 8009188:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009192:	f001 fc5f 	bl	800aa54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009196:	f001 fc2d 	bl	800a9f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091a2:	e011      	b.n	80091c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d012      	beq.n	80091d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3310      	adds	r3, #16
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 fd05 	bl	8009bc0 <xTaskRemoveFromEventList>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091bc:	f000 fddc 	bl	8009d78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dce9      	bgt.n	80091a4 <prvUnlockQueue+0x60>
 80091d0:	e000      	b.n	80091d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	22ff      	movs	r2, #255	; 0xff
 80091d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091dc:	f001 fc3a 	bl	800aa54 <vPortExitCritical>
}
 80091e0:	bf00      	nop
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091f0:	f001 fc00 	bl	800a9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091fc:	2301      	movs	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e001      	b.n	8009206 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009206:	f001 fc25 	bl	800aa54 <vPortExitCritical>

	return xReturn;
 800920a:	68fb      	ldr	r3, [r7, #12]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800921c:	f001 fbea 	bl	800a9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009228:	429a      	cmp	r2, r3
 800922a:	d102      	bne.n	8009232 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800922c:	2301      	movs	r3, #1
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	e001      	b.n	8009236 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009236:	f001 fc0d 	bl	800aa54 <vPortExitCritical>

	return xReturn;
 800923a:	68fb      	ldr	r3, [r7, #12]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e014      	b.n	800927e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009254:	4a0f      	ldr	r2, [pc, #60]	; (8009294 <vQueueAddToRegistry+0x50>)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10b      	bne.n	8009278 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009260:	490c      	ldr	r1, [pc, #48]	; (8009294 <vQueueAddToRegistry+0x50>)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800926a:	4a0a      	ldr	r2, [pc, #40]	; (8009294 <vQueueAddToRegistry+0x50>)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	4413      	add	r3, r2
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009276:	e006      	b.n	8009286 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3301      	adds	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b07      	cmp	r3, #7
 8009282:	d9e7      	bls.n	8009254 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	2000883c 	.word	0x2000883c

08009298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092a8:	f001 fba4 	bl	800a9f4 <vPortEnterCritical>
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092b2:	b25b      	sxtb	r3, r3
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d103      	bne.n	80092c2 <vQueueWaitForMessageRestricted+0x2a>
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092c8:	b25b      	sxtb	r3, r3
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d103      	bne.n	80092d8 <vQueueWaitForMessageRestricted+0x40>
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092d8:	f001 fbbc 	bl	800aa54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d106      	bne.n	80092f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	3324      	adds	r3, #36	; 0x24
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	68b9      	ldr	r1, [r7, #8]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fc3b 	bl	8009b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80092f2:	6978      	ldr	r0, [r7, #20]
 80092f4:	f7ff ff26 	bl	8009144 <prvUnlockQueue>
	}
 80092f8:	bf00      	nop
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08e      	sub	sp, #56	; 0x38
 8009304:	af04      	add	r7, sp, #16
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800930e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	623b      	str	r3, [r7, #32]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <xTaskCreateStatic+0x46>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	61fb      	str	r3, [r7, #28]
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009346:	235c      	movs	r3, #92	; 0x5c
 8009348:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	2b5c      	cmp	r3, #92	; 0x5c
 800934e:	d00a      	beq.n	8009366 <xTaskCreateStatic+0x66>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	61bb      	str	r3, [r7, #24]
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009366:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	2b00      	cmp	r3, #0
 800936c:	d01e      	beq.n	80093ac <xTaskCreateStatic+0xac>
 800936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009370:	2b00      	cmp	r3, #0
 8009372:	d01b      	beq.n	80093ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800937c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	2202      	movs	r2, #2
 8009382:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009386:	2300      	movs	r3, #0
 8009388:	9303      	str	r3, [sp, #12]
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	9302      	str	r3, [sp, #8]
 800938e:	f107 0314 	add.w	r3, r7, #20
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f850 	bl	8009444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093a6:	f000 f8dd 	bl	8009564 <prvAddNewTaskToReadyList>
 80093aa:	e001      	b.n	80093b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093b0:	697b      	ldr	r3, [r7, #20]
	}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3728      	adds	r7, #40	; 0x28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b08c      	sub	sp, #48	; 0x30
 80093be:	af04      	add	r7, sp, #16
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	603b      	str	r3, [r7, #0]
 80093c6:	4613      	mov	r3, r2
 80093c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093ca:	88fb      	ldrh	r3, [r7, #6]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f001 fc32 	bl	800ac38 <pvPortMalloc>
 80093d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00e      	beq.n	80093fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093dc:	205c      	movs	r0, #92	; 0x5c
 80093de:	f001 fc2b 	bl	800ac38 <pvPortMalloc>
 80093e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	631a      	str	r2, [r3, #48]	; 0x30
 80093f0:	e005      	b.n	80093fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093f2:	6978      	ldr	r0, [r7, #20]
 80093f4:	f001 fcae 	bl	800ad54 <vPortFree>
 80093f8:	e001      	b.n	80093fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d017      	beq.n	8009434 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800940c:	88fa      	ldrh	r2, [r7, #6]
 800940e:	2300      	movs	r3, #0
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	9302      	str	r3, [sp, #8]
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68b9      	ldr	r1, [r7, #8]
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 f80e 	bl	8009444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009428:	69f8      	ldr	r0, [r7, #28]
 800942a:	f000 f89b 	bl	8009564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800942e:	2301      	movs	r3, #1
 8009430:	61bb      	str	r3, [r7, #24]
 8009432:	e002      	b.n	800943a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009434:	f04f 33ff 	mov.w	r3, #4294967295
 8009438:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800943a:	69bb      	ldr	r3, [r7, #24]
	}
 800943c:	4618      	mov	r0, r3
 800943e:	3720      	adds	r7, #32
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009454:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	461a      	mov	r2, r3
 800945c:	21a5      	movs	r1, #165	; 0xa5
 800945e:	f001 fd15 	bl	800ae8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800946c:	3b01      	subs	r3, #1
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	f023 0307 	bic.w	r3, r3, #7
 800947a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	617b      	str	r3, [r7, #20]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d01f      	beq.n	80094e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094a2:	2300      	movs	r3, #0
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	e012      	b.n	80094ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	7819      	ldrb	r1, [r3, #0]
 80094b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	4413      	add	r3, r2
 80094b6:	3334      	adds	r3, #52	; 0x34
 80094b8:	460a      	mov	r2, r1
 80094ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	4413      	add	r3, r2
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d006      	beq.n	80094d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	3301      	adds	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	2b0f      	cmp	r3, #15
 80094d2:	d9e9      	bls.n	80094a8 <prvInitialiseNewTask+0x64>
 80094d4:	e000      	b.n	80094d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80094d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094e0:	e003      	b.n	80094ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	2b37      	cmp	r3, #55	; 0x37
 80094ee:	d901      	bls.n	80094f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094f0:	2337      	movs	r3, #55	; 0x37
 80094f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	2200      	movs	r2, #0
 8009504:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	3304      	adds	r3, #4
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff f978 	bl	8008800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	3318      	adds	r3, #24
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff f973 	bl	8008800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800951e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009528:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800952e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	2200      	movs	r2, #0
 8009534:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	68f9      	ldr	r1, [r7, #12]
 8009542:	69b8      	ldr	r0, [r7, #24]
 8009544:	f001 f928 	bl	800a798 <pxPortInitialiseStack>
 8009548:	4602      	mov	r2, r0
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800955a:	bf00      	nop
 800955c:	3720      	adds	r7, #32
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800956c:	f001 fa42 	bl	800a9f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009570:	4b2d      	ldr	r3, [pc, #180]	; (8009628 <prvAddNewTaskToReadyList+0xc4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	4a2c      	ldr	r2, [pc, #176]	; (8009628 <prvAddNewTaskToReadyList+0xc4>)
 8009578:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800957a:	4b2c      	ldr	r3, [pc, #176]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d109      	bne.n	8009596 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009582:	4a2a      	ldr	r2, [pc, #168]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009588:	4b27      	ldr	r3, [pc, #156]	; (8009628 <prvAddNewTaskToReadyList+0xc4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d110      	bne.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009590:	f000 fc16 	bl	8009dc0 <prvInitialiseTaskLists>
 8009594:	e00d      	b.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009596:	4b26      	ldr	r3, [pc, #152]	; (8009630 <prvAddNewTaskToReadyList+0xcc>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800959e:	4b23      	ldr	r3, [pc, #140]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d802      	bhi.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095ac:	4a1f      	ldr	r2, [pc, #124]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095b2:	4b20      	ldr	r3, [pc, #128]	; (8009634 <prvAddNewTaskToReadyList+0xd0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3301      	adds	r3, #1
 80095b8:	4a1e      	ldr	r2, [pc, #120]	; (8009634 <prvAddNewTaskToReadyList+0xd0>)
 80095ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095bc:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <prvAddNewTaskToReadyList+0xd0>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4b1b      	ldr	r3, [pc, #108]	; (8009638 <prvAddNewTaskToReadyList+0xd4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d903      	bls.n	80095d8 <prvAddNewTaskToReadyList+0x74>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	4a18      	ldr	r2, [pc, #96]	; (8009638 <prvAddNewTaskToReadyList+0xd4>)
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4a15      	ldr	r2, [pc, #84]	; (800963c <prvAddNewTaskToReadyList+0xd8>)
 80095e6:	441a      	add	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7ff f913 	bl	800881a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095f4:	f001 fa2e 	bl	800aa54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095f8:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <prvAddNewTaskToReadyList+0xcc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00e      	beq.n	800961e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960a:	429a      	cmp	r2, r3
 800960c:	d207      	bcs.n	800961e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <prvAddNewTaskToReadyList+0xdc>)
 8009610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000d94 	.word	0x20000d94
 800962c:	200008c0 	.word	0x200008c0
 8009630:	20000da0 	.word	0x20000da0
 8009634:	20000db0 	.word	0x20000db0
 8009638:	20000d9c 	.word	0x20000d9c
 800963c:	200008c4 	.word	0x200008c4
 8009640:	e000ed04 	.word	0xe000ed04

08009644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d017      	beq.n	8009686 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009656:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <vTaskDelay+0x60>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <vTaskDelay+0x30>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	60bb      	str	r3, [r7, #8]
}
 8009670:	bf00      	nop
 8009672:	e7fe      	b.n	8009672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009674:	f000 f880 	bl	8009778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009678:	2100      	movs	r1, #0
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fcea 	bl	800a054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009680:	f000 f888 	bl	8009794 <xTaskResumeAll>
 8009684:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d107      	bne.n	800969c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800968c:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <vTaskDelay+0x64>)
 800968e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20000dbc 	.word	0x20000dbc
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08a      	sub	sp, #40	; 0x28
 80096b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096ba:	463a      	mov	r2, r7
 80096bc:	1d39      	adds	r1, r7, #4
 80096be:	f107 0308 	add.w	r3, r7, #8
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff f848 	bl	8008758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	9202      	str	r2, [sp, #8]
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	2300      	movs	r3, #0
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	2300      	movs	r3, #0
 80096d8:	460a      	mov	r2, r1
 80096da:	4921      	ldr	r1, [pc, #132]	; (8009760 <vTaskStartScheduler+0xb4>)
 80096dc:	4821      	ldr	r0, [pc, #132]	; (8009764 <vTaskStartScheduler+0xb8>)
 80096de:	f7ff fe0f 	bl	8009300 <xTaskCreateStatic>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4a20      	ldr	r2, [pc, #128]	; (8009768 <vTaskStartScheduler+0xbc>)
 80096e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096e8:	4b1f      	ldr	r3, [pc, #124]	; (8009768 <vTaskStartScheduler+0xbc>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096f0:	2301      	movs	r3, #1
 80096f2:	617b      	str	r3, [r7, #20]
 80096f4:	e001      	b.n	80096fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d102      	bne.n	8009706 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009700:	f000 fcfc 	bl	800a0fc <xTimerCreateTimerTask>
 8009704:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d116      	bne.n	800973a <vTaskStartScheduler+0x8e>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	613b      	str	r3, [r7, #16]
}
 800971e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009720:	4b12      	ldr	r3, [pc, #72]	; (800976c <vTaskStartScheduler+0xc0>)
 8009722:	f04f 32ff 	mov.w	r2, #4294967295
 8009726:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009728:	4b11      	ldr	r3, [pc, #68]	; (8009770 <vTaskStartScheduler+0xc4>)
 800972a:	2201      	movs	r2, #1
 800972c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800972e:	4b11      	ldr	r3, [pc, #68]	; (8009774 <vTaskStartScheduler+0xc8>)
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009734:	f001 f8bc 	bl	800a8b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009738:	e00e      	b.n	8009758 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009740:	d10a      	bne.n	8009758 <vTaskStartScheduler+0xac>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	60fb      	str	r3, [r7, #12]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <vTaskStartScheduler+0xaa>
}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	0800dc84 	.word	0x0800dc84
 8009764:	08009d91 	.word	0x08009d91
 8009768:	20000db8 	.word	0x20000db8
 800976c:	20000db4 	.word	0x20000db4
 8009770:	20000da0 	.word	0x20000da0
 8009774:	20000d98 	.word	0x20000d98

08009778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009778:	b480      	push	{r7}
 800977a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800977c:	4b04      	ldr	r3, [pc, #16]	; (8009790 <vTaskSuspendAll+0x18>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3301      	adds	r3, #1
 8009782:	4a03      	ldr	r2, [pc, #12]	; (8009790 <vTaskSuspendAll+0x18>)
 8009784:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009786:	bf00      	nop
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	20000dbc 	.word	0x20000dbc

08009794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097a2:	4b42      	ldr	r3, [pc, #264]	; (80098ac <xTaskResumeAll+0x118>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10a      	bne.n	80097c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	603b      	str	r3, [r7, #0]
}
 80097bc:	bf00      	nop
 80097be:	e7fe      	b.n	80097be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097c0:	f001 f918 	bl	800a9f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097c4:	4b39      	ldr	r3, [pc, #228]	; (80098ac <xTaskResumeAll+0x118>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	4a38      	ldr	r2, [pc, #224]	; (80098ac <xTaskResumeAll+0x118>)
 80097cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ce:	4b37      	ldr	r3, [pc, #220]	; (80098ac <xTaskResumeAll+0x118>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d162      	bne.n	800989c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097d6:	4b36      	ldr	r3, [pc, #216]	; (80098b0 <xTaskResumeAll+0x11c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d05e      	beq.n	800989c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097de:	e02f      	b.n	8009840 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e0:	4b34      	ldr	r3, [pc, #208]	; (80098b4 <xTaskResumeAll+0x120>)
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3318      	adds	r3, #24
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7ff f871 	bl	80088d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3304      	adds	r3, #4
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff f86c 	bl	80088d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009800:	4b2d      	ldr	r3, [pc, #180]	; (80098b8 <xTaskResumeAll+0x124>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	d903      	bls.n	8009810 <xTaskResumeAll+0x7c>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	4a2a      	ldr	r2, [pc, #168]	; (80098b8 <xTaskResumeAll+0x124>)
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4a27      	ldr	r2, [pc, #156]	; (80098bc <xTaskResumeAll+0x128>)
 800981e:	441a      	add	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3304      	adds	r3, #4
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f7fe fff7 	bl	800881a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009830:	4b23      	ldr	r3, [pc, #140]	; (80098c0 <xTaskResumeAll+0x12c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009836:	429a      	cmp	r2, r3
 8009838:	d302      	bcc.n	8009840 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800983a:	4b22      	ldr	r3, [pc, #136]	; (80098c4 <xTaskResumeAll+0x130>)
 800983c:	2201      	movs	r2, #1
 800983e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009840:	4b1c      	ldr	r3, [pc, #112]	; (80098b4 <xTaskResumeAll+0x120>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1cb      	bne.n	80097e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800984e:	f000 fb55 	bl	8009efc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009852:	4b1d      	ldr	r3, [pc, #116]	; (80098c8 <xTaskResumeAll+0x134>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d010      	beq.n	8009880 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800985e:	f000 f847 	bl	80098f0 <xTaskIncrementTick>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009868:	4b16      	ldr	r3, [pc, #88]	; (80098c4 <xTaskResumeAll+0x130>)
 800986a:	2201      	movs	r2, #1
 800986c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3b01      	subs	r3, #1
 8009872:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1f1      	bne.n	800985e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800987a:	4b13      	ldr	r3, [pc, #76]	; (80098c8 <xTaskResumeAll+0x134>)
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009880:	4b10      	ldr	r3, [pc, #64]	; (80098c4 <xTaskResumeAll+0x130>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d009      	beq.n	800989c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009888:	2301      	movs	r3, #1
 800988a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800988c:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <xTaskResumeAll+0x138>)
 800988e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800989c:	f001 f8da 	bl	800aa54 <vPortExitCritical>

	return xAlreadyYielded;
 80098a0:	68bb      	ldr	r3, [r7, #8]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20000dbc 	.word	0x20000dbc
 80098b0:	20000d94 	.word	0x20000d94
 80098b4:	20000d54 	.word	0x20000d54
 80098b8:	20000d9c 	.word	0x20000d9c
 80098bc:	200008c4 	.word	0x200008c4
 80098c0:	200008c0 	.word	0x200008c0
 80098c4:	20000da8 	.word	0x20000da8
 80098c8:	20000da4 	.word	0x20000da4
 80098cc:	e000ed04 	.word	0xe000ed04

080098d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098d6:	4b05      	ldr	r3, [pc, #20]	; (80098ec <xTaskGetTickCount+0x1c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098dc:	687b      	ldr	r3, [r7, #4]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	20000d98 	.word	0x20000d98

080098f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098f6:	2300      	movs	r3, #0
 80098f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098fa:	4b4f      	ldr	r3, [pc, #316]	; (8009a38 <xTaskIncrementTick+0x148>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f040 808f 	bne.w	8009a22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009904:	4b4d      	ldr	r3, [pc, #308]	; (8009a3c <xTaskIncrementTick+0x14c>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3301      	adds	r3, #1
 800990a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800990c:	4a4b      	ldr	r2, [pc, #300]	; (8009a3c <xTaskIncrementTick+0x14c>)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d120      	bne.n	800995a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009918:	4b49      	ldr	r3, [pc, #292]	; (8009a40 <xTaskIncrementTick+0x150>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00a      	beq.n	8009938 <xTaskIncrementTick+0x48>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	603b      	str	r3, [r7, #0]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <xTaskIncrementTick+0x46>
 8009938:	4b41      	ldr	r3, [pc, #260]	; (8009a40 <xTaskIncrementTick+0x150>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	4b41      	ldr	r3, [pc, #260]	; (8009a44 <xTaskIncrementTick+0x154>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a3f      	ldr	r2, [pc, #252]	; (8009a40 <xTaskIncrementTick+0x150>)
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	4a3f      	ldr	r2, [pc, #252]	; (8009a44 <xTaskIncrementTick+0x154>)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	4b3e      	ldr	r3, [pc, #248]	; (8009a48 <xTaskIncrementTick+0x158>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3301      	adds	r3, #1
 8009952:	4a3d      	ldr	r2, [pc, #244]	; (8009a48 <xTaskIncrementTick+0x158>)
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	f000 fad1 	bl	8009efc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800995a:	4b3c      	ldr	r3, [pc, #240]	; (8009a4c <xTaskIncrementTick+0x15c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	429a      	cmp	r2, r3
 8009962:	d349      	bcc.n	80099f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009964:	4b36      	ldr	r3, [pc, #216]	; (8009a40 <xTaskIncrementTick+0x150>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800996e:	4b37      	ldr	r3, [pc, #220]	; (8009a4c <xTaskIncrementTick+0x15c>)
 8009970:	f04f 32ff 	mov.w	r2, #4294967295
 8009974:	601a      	str	r2, [r3, #0]
					break;
 8009976:	e03f      	b.n	80099f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009978:	4b31      	ldr	r3, [pc, #196]	; (8009a40 <xTaskIncrementTick+0x150>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	429a      	cmp	r2, r3
 800998e:	d203      	bcs.n	8009998 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009990:	4a2e      	ldr	r2, [pc, #184]	; (8009a4c <xTaskIncrementTick+0x15c>)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009996:	e02f      	b.n	80099f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	3304      	adds	r3, #4
 800999c:	4618      	mov	r0, r3
 800999e:	f7fe ff99 	bl	80088d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d004      	beq.n	80099b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	3318      	adds	r3, #24
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe ff90 	bl	80088d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b8:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <xTaskIncrementTick+0x160>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d903      	bls.n	80099c8 <xTaskIncrementTick+0xd8>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c4:	4a22      	ldr	r2, [pc, #136]	; (8009a50 <xTaskIncrementTick+0x160>)
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099cc:	4613      	mov	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4a1f      	ldr	r2, [pc, #124]	; (8009a54 <xTaskIncrementTick+0x164>)
 80099d6:	441a      	add	r2, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	3304      	adds	r3, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	4610      	mov	r0, r2
 80099e0:	f7fe ff1b 	bl	800881a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e8:	4b1b      	ldr	r3, [pc, #108]	; (8009a58 <xTaskIncrementTick+0x168>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d3b8      	bcc.n	8009964 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80099f2:	2301      	movs	r3, #1
 80099f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099f6:	e7b5      	b.n	8009964 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099f8:	4b17      	ldr	r3, [pc, #92]	; (8009a58 <xTaskIncrementTick+0x168>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fe:	4915      	ldr	r1, [pc, #84]	; (8009a54 <xTaskIncrementTick+0x164>)
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d901      	bls.n	8009a14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009a10:	2301      	movs	r3, #1
 8009a12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a14:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <xTaskIncrementTick+0x16c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d007      	beq.n	8009a2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	e004      	b.n	8009a2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a22:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <xTaskIncrementTick+0x170>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3301      	adds	r3, #1
 8009a28:	4a0d      	ldr	r2, [pc, #52]	; (8009a60 <xTaskIncrementTick+0x170>)
 8009a2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a2c:	697b      	ldr	r3, [r7, #20]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	20000dbc 	.word	0x20000dbc
 8009a3c:	20000d98 	.word	0x20000d98
 8009a40:	20000d4c 	.word	0x20000d4c
 8009a44:	20000d50 	.word	0x20000d50
 8009a48:	20000dac 	.word	0x20000dac
 8009a4c:	20000db4 	.word	0x20000db4
 8009a50:	20000d9c 	.word	0x20000d9c
 8009a54:	200008c4 	.word	0x200008c4
 8009a58:	200008c0 	.word	0x200008c0
 8009a5c:	20000da8 	.word	0x20000da8
 8009a60:	20000da4 	.word	0x20000da4

08009a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a6a:	4b28      	ldr	r3, [pc, #160]	; (8009b0c <vTaskSwitchContext+0xa8>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a72:	4b27      	ldr	r3, [pc, #156]	; (8009b10 <vTaskSwitchContext+0xac>)
 8009a74:	2201      	movs	r2, #1
 8009a76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a78:	e041      	b.n	8009afe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009a7a:	4b25      	ldr	r3, [pc, #148]	; (8009b10 <vTaskSwitchContext+0xac>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a80:	4b24      	ldr	r3, [pc, #144]	; (8009b14 <vTaskSwitchContext+0xb0>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	e010      	b.n	8009aaa <vTaskSwitchContext+0x46>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10a      	bne.n	8009aa4 <vTaskSwitchContext+0x40>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	607b      	str	r3, [r7, #4]
}
 8009aa0:	bf00      	nop
 8009aa2:	e7fe      	b.n	8009aa2 <vTaskSwitchContext+0x3e>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	60fb      	str	r3, [r7, #12]
 8009aaa:	491b      	ldr	r1, [pc, #108]	; (8009b18 <vTaskSwitchContext+0xb4>)
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0e4      	beq.n	8009a88 <vTaskSwitchContext+0x24>
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4a13      	ldr	r2, [pc, #76]	; (8009b18 <vTaskSwitchContext+0xb4>)
 8009aca:	4413      	add	r3, r2
 8009acc:	60bb      	str	r3, [r7, #8]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	605a      	str	r2, [r3, #4]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	3308      	adds	r3, #8
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d104      	bne.n	8009aee <vTaskSwitchContext+0x8a>
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	605a      	str	r2, [r3, #4]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	4a09      	ldr	r2, [pc, #36]	; (8009b1c <vTaskSwitchContext+0xb8>)
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	4a06      	ldr	r2, [pc, #24]	; (8009b14 <vTaskSwitchContext+0xb0>)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6013      	str	r3, [r2, #0]
}
 8009afe:	bf00      	nop
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20000dbc 	.word	0x20000dbc
 8009b10:	20000da8 	.word	0x20000da8
 8009b14:	20000d9c 	.word	0x20000d9c
 8009b18:	200008c4 	.word	0x200008c4
 8009b1c:	200008c0 	.word	0x200008c0

08009b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	60fb      	str	r3, [r7, #12]
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b46:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <vTaskPlaceOnEventList+0x44>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3318      	adds	r3, #24
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7fe fe87 	bl	8008862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b54:	2101      	movs	r1, #1
 8009b56:	6838      	ldr	r0, [r7, #0]
 8009b58:	f000 fa7c 	bl	800a054 <prvAddCurrentTaskToDelayedList>
}
 8009b5c:	bf00      	nop
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	200008c0 	.word	0x200008c0

08009b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10a      	bne.n	8009b90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	617b      	str	r3, [r7, #20]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b90:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <vTaskPlaceOnEventListRestricted+0x54>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3318      	adds	r3, #24
 8009b96:	4619      	mov	r1, r3
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7fe fe3e 	bl	800881a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	68b8      	ldr	r0, [r7, #8]
 8009bae:	f000 fa51 	bl	800a054 <prvAddCurrentTaskToDelayedList>
	}
 8009bb2:	bf00      	nop
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200008c0 	.word	0x200008c0

08009bc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10a      	bne.n	8009bec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	60fb      	str	r3, [r7, #12]
}
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	3318      	adds	r3, #24
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fe fe6f 	bl	80088d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <xTaskRemoveFromEventList+0xb0>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d11d      	bne.n	8009c3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	3304      	adds	r3, #4
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fe fe66 	bl	80088d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0c:	4b19      	ldr	r3, [pc, #100]	; (8009c74 <xTaskRemoveFromEventList+0xb4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d903      	bls.n	8009c1c <xTaskRemoveFromEventList+0x5c>
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a16      	ldr	r2, [pc, #88]	; (8009c74 <xTaskRemoveFromEventList+0xb4>)
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4a13      	ldr	r2, [pc, #76]	; (8009c78 <xTaskRemoveFromEventList+0xb8>)
 8009c2a:	441a      	add	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f7fe fdf1 	bl	800881a <vListInsertEnd>
 8009c38:	e005      	b.n	8009c46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	3318      	adds	r3, #24
 8009c3e:	4619      	mov	r1, r3
 8009c40:	480e      	ldr	r0, [pc, #56]	; (8009c7c <xTaskRemoveFromEventList+0xbc>)
 8009c42:	f7fe fdea 	bl	800881a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4a:	4b0d      	ldr	r3, [pc, #52]	; (8009c80 <xTaskRemoveFromEventList+0xc0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d905      	bls.n	8009c60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c54:	2301      	movs	r3, #1
 8009c56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c58:	4b0a      	ldr	r3, [pc, #40]	; (8009c84 <xTaskRemoveFromEventList+0xc4>)
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	e001      	b.n	8009c64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c64:	697b      	ldr	r3, [r7, #20]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000dbc 	.word	0x20000dbc
 8009c74:	20000d9c 	.word	0x20000d9c
 8009c78:	200008c4 	.word	0x200008c4
 8009c7c:	20000d54 	.word	0x20000d54
 8009c80:	200008c0 	.word	0x200008c0
 8009c84:	20000da8 	.word	0x20000da8

08009c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c90:	4b06      	ldr	r3, [pc, #24]	; (8009cac <vTaskInternalSetTimeOutState+0x24>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c98:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <vTaskInternalSetTimeOutState+0x28>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	605a      	str	r2, [r3, #4]
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20000dac 	.word	0x20000dac
 8009cb0:	20000d98 	.word	0x20000d98

08009cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	613b      	str	r3, [r7, #16]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009cf6:	f000 fe7d 	bl	800a9f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009cfa:	4b1d      	ldr	r3, [pc, #116]	; (8009d70 <xTaskCheckForTimeOut+0xbc>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d12:	d102      	bne.n	8009d1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d14:	2300      	movs	r3, #0
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	e023      	b.n	8009d62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b15      	ldr	r3, [pc, #84]	; (8009d74 <xTaskCheckForTimeOut+0xc0>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d007      	beq.n	8009d36 <xTaskCheckForTimeOut+0x82>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d302      	bcc.n	8009d36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	61fb      	str	r3, [r7, #28]
 8009d34:	e015      	b.n	8009d62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d20b      	bcs.n	8009d58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7ff ff9b 	bl	8009c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	61fb      	str	r3, [r7, #28]
 8009d56:	e004      	b.n	8009d62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d62:	f000 fe77 	bl	800aa54 <vPortExitCritical>

	return xReturn;
 8009d66:	69fb      	ldr	r3, [r7, #28]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20000d98 	.word	0x20000d98
 8009d74:	20000dac 	.word	0x20000dac

08009d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d7c:	4b03      	ldr	r3, [pc, #12]	; (8009d8c <vTaskMissedYield+0x14>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	601a      	str	r2, [r3, #0]
}
 8009d82:	bf00      	nop
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	20000da8 	.word	0x20000da8

08009d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d98:	f000 f852 	bl	8009e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d9c:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <prvIdleTask+0x28>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d9f9      	bls.n	8009d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009da4:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <prvIdleTask+0x2c>)
 8009da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009db4:	e7f0      	b.n	8009d98 <prvIdleTask+0x8>
 8009db6:	bf00      	nop
 8009db8:	200008c4 	.word	0x200008c4
 8009dbc:	e000ed04 	.word	0xe000ed04

08009dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	607b      	str	r3, [r7, #4]
 8009dca:	e00c      	b.n	8009de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4a12      	ldr	r2, [pc, #72]	; (8009e20 <prvInitialiseTaskLists+0x60>)
 8009dd8:	4413      	add	r3, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe fcf0 	bl	80087c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3301      	adds	r3, #1
 8009de4:	607b      	str	r3, [r7, #4]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b37      	cmp	r3, #55	; 0x37
 8009dea:	d9ef      	bls.n	8009dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dec:	480d      	ldr	r0, [pc, #52]	; (8009e24 <prvInitialiseTaskLists+0x64>)
 8009dee:	f7fe fce7 	bl	80087c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009df2:	480d      	ldr	r0, [pc, #52]	; (8009e28 <prvInitialiseTaskLists+0x68>)
 8009df4:	f7fe fce4 	bl	80087c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009df8:	480c      	ldr	r0, [pc, #48]	; (8009e2c <prvInitialiseTaskLists+0x6c>)
 8009dfa:	f7fe fce1 	bl	80087c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009dfe:	480c      	ldr	r0, [pc, #48]	; (8009e30 <prvInitialiseTaskLists+0x70>)
 8009e00:	f7fe fcde 	bl	80087c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e04:	480b      	ldr	r0, [pc, #44]	; (8009e34 <prvInitialiseTaskLists+0x74>)
 8009e06:	f7fe fcdb 	bl	80087c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e0a:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <prvInitialiseTaskLists+0x78>)
 8009e0c:	4a05      	ldr	r2, [pc, #20]	; (8009e24 <prvInitialiseTaskLists+0x64>)
 8009e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e10:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <prvInitialiseTaskLists+0x7c>)
 8009e12:	4a05      	ldr	r2, [pc, #20]	; (8009e28 <prvInitialiseTaskLists+0x68>)
 8009e14:	601a      	str	r2, [r3, #0]
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	200008c4 	.word	0x200008c4
 8009e24:	20000d24 	.word	0x20000d24
 8009e28:	20000d38 	.word	0x20000d38
 8009e2c:	20000d54 	.word	0x20000d54
 8009e30:	20000d68 	.word	0x20000d68
 8009e34:	20000d80 	.word	0x20000d80
 8009e38:	20000d4c 	.word	0x20000d4c
 8009e3c:	20000d50 	.word	0x20000d50

08009e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e46:	e019      	b.n	8009e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e48:	f000 fdd4 	bl	800a9f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e4c:	4b10      	ldr	r3, [pc, #64]	; (8009e90 <prvCheckTasksWaitingTermination+0x50>)
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3304      	adds	r3, #4
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe fd3b 	bl	80088d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e5e:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <prvCheckTasksWaitingTermination+0x54>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	4a0b      	ldr	r2, [pc, #44]	; (8009e94 <prvCheckTasksWaitingTermination+0x54>)
 8009e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e68:	4b0b      	ldr	r3, [pc, #44]	; (8009e98 <prvCheckTasksWaitingTermination+0x58>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	4a0a      	ldr	r2, [pc, #40]	; (8009e98 <prvCheckTasksWaitingTermination+0x58>)
 8009e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e72:	f000 fdef 	bl	800aa54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f810 	bl	8009e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e7c:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <prvCheckTasksWaitingTermination+0x58>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e1      	bne.n	8009e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000d68 	.word	0x20000d68
 8009e94:	20000d94 	.word	0x20000d94
 8009e98:	20000d7c 	.word	0x20000d7c

08009e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d108      	bne.n	8009ec0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 ff4e 	bl	800ad54 <vPortFree>
				vPortFree( pxTCB );
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 ff4b 	bl	800ad54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ebe:	e018      	b.n	8009ef2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d103      	bne.n	8009ed2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 ff42 	bl	800ad54 <vPortFree>
	}
 8009ed0:	e00f      	b.n	8009ef2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d00a      	beq.n	8009ef2 <prvDeleteTCB+0x56>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	60fb      	str	r3, [r7, #12]
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <prvDeleteTCB+0x54>
	}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f02:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <prvResetNextTaskUnblockTime+0x38>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d104      	bne.n	8009f16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <prvResetNextTaskUnblockTime+0x3c>)
 8009f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f14:	e008      	b.n	8009f28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f16:	4b07      	ldr	r3, [pc, #28]	; (8009f34 <prvResetNextTaskUnblockTime+0x38>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4a04      	ldr	r2, [pc, #16]	; (8009f38 <prvResetNextTaskUnblockTime+0x3c>)
 8009f26:	6013      	str	r3, [r2, #0]
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	20000d4c 	.word	0x20000d4c
 8009f38:	20000db4 	.word	0x20000db4

08009f3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f42:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <xTaskGetSchedulerState+0x34>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d102      	bne.n	8009f50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	607b      	str	r3, [r7, #4]
 8009f4e:	e008      	b.n	8009f62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f50:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <xTaskGetSchedulerState+0x38>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f58:	2302      	movs	r3, #2
 8009f5a:	607b      	str	r3, [r7, #4]
 8009f5c:	e001      	b.n	8009f62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f62:	687b      	ldr	r3, [r7, #4]
	}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	20000da0 	.word	0x20000da0
 8009f74:	20000dbc 	.word	0x20000dbc

08009f78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d056      	beq.n	800a03c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f8e:	4b2e      	ldr	r3, [pc, #184]	; (800a048 <xTaskPriorityDisinherit+0xd0>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d00a      	beq.n	8009fae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	60fb      	str	r3, [r7, #12]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10a      	bne.n	8009fcc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	60bb      	str	r3, [r7, #8]
}
 8009fc8:	bf00      	nop
 8009fca:	e7fe      	b.n	8009fca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd0:	1e5a      	subs	r2, r3, #1
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d02c      	beq.n	800a03c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d128      	bne.n	800a03c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	3304      	adds	r3, #4
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fc70 	bl	80088d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00c:	4b0f      	ldr	r3, [pc, #60]	; (800a04c <xTaskPriorityDisinherit+0xd4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d903      	bls.n	800a01c <xTaskPriorityDisinherit+0xa4>
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	4a0c      	ldr	r2, [pc, #48]	; (800a04c <xTaskPriorityDisinherit+0xd4>)
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a020:	4613      	mov	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4a09      	ldr	r2, [pc, #36]	; (800a050 <xTaskPriorityDisinherit+0xd8>)
 800a02a:	441a      	add	r2, r3
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	3304      	adds	r3, #4
 800a030:	4619      	mov	r1, r3
 800a032:	4610      	mov	r0, r2
 800a034:	f7fe fbf1 	bl	800881a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a038:	2301      	movs	r3, #1
 800a03a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a03c:	697b      	ldr	r3, [r7, #20]
	}
 800a03e:	4618      	mov	r0, r3
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	200008c0 	.word	0x200008c0
 800a04c:	20000d9c 	.word	0x20000d9c
 800a050:	200008c4 	.word	0x200008c4

0800a054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a05e:	4b21      	ldr	r3, [pc, #132]	; (800a0e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a064:	4b20      	ldr	r3, [pc, #128]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3304      	adds	r3, #4
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fc32 	bl	80088d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a076:	d10a      	bne.n	800a08e <prvAddCurrentTaskToDelayedList+0x3a>
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a07e:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3304      	adds	r3, #4
 800a084:	4619      	mov	r1, r3
 800a086:	4819      	ldr	r0, [pc, #100]	; (800a0ec <prvAddCurrentTaskToDelayedList+0x98>)
 800a088:	f7fe fbc7 	bl	800881a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a08c:	e026      	b.n	800a0dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4413      	add	r3, r2
 800a094:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a096:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d209      	bcs.n	800a0ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0a6:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7fe fbd5 	bl	8008862 <vListInsert>
}
 800a0b8:	e010      	b.n	800a0dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0ba:	4b0e      	ldr	r3, [pc, #56]	; (800a0f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	f7fe fbcb 	bl	8008862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d202      	bcs.n	800a0dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0d6:	4a08      	ldr	r2, [pc, #32]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	6013      	str	r3, [r2, #0]
}
 800a0dc:	bf00      	nop
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000d98 	.word	0x20000d98
 800a0e8:	200008c0 	.word	0x200008c0
 800a0ec:	20000d80 	.word	0x20000d80
 800a0f0:	20000d50 	.word	0x20000d50
 800a0f4:	20000d4c 	.word	0x20000d4c
 800a0f8:	20000db4 	.word	0x20000db4

0800a0fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08a      	sub	sp, #40	; 0x28
 800a100:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a102:	2300      	movs	r3, #0
 800a104:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a106:	f000 fb07 	bl	800a718 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a10a:	4b1c      	ldr	r3, [pc, #112]	; (800a17c <xTimerCreateTimerTask+0x80>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d021      	beq.n	800a156 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a11a:	1d3a      	adds	r2, r7, #4
 800a11c:	f107 0108 	add.w	r1, r7, #8
 800a120:	f107 030c 	add.w	r3, r7, #12
 800a124:	4618      	mov	r0, r3
 800a126:	f7fe fb31 	bl	800878c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	9202      	str	r2, [sp, #8]
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	2302      	movs	r3, #2
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	2300      	movs	r3, #0
 800a13a:	460a      	mov	r2, r1
 800a13c:	4910      	ldr	r1, [pc, #64]	; (800a180 <xTimerCreateTimerTask+0x84>)
 800a13e:	4811      	ldr	r0, [pc, #68]	; (800a184 <xTimerCreateTimerTask+0x88>)
 800a140:	f7ff f8de 	bl	8009300 <xTaskCreateStatic>
 800a144:	4603      	mov	r3, r0
 800a146:	4a10      	ldr	r2, [pc, #64]	; (800a188 <xTimerCreateTimerTask+0x8c>)
 800a148:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a14a:	4b0f      	ldr	r3, [pc, #60]	; (800a188 <xTimerCreateTimerTask+0x8c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a152:	2301      	movs	r3, #1
 800a154:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10a      	bne.n	800a172 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	613b      	str	r3, [r7, #16]
}
 800a16e:	bf00      	nop
 800a170:	e7fe      	b.n	800a170 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a172:	697b      	ldr	r3, [r7, #20]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	20000df0 	.word	0x20000df0
 800a180:	0800dc8c 	.word	0x0800dc8c
 800a184:	0800a2c1 	.word	0x0800a2c1
 800a188:	20000df4 	.word	0x20000df4

0800a18c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	; 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10a      	bne.n	800a1ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	623b      	str	r3, [r7, #32]
}
 800a1b6:	bf00      	nop
 800a1b8:	e7fe      	b.n	800a1b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1ba:	4b1a      	ldr	r3, [pc, #104]	; (800a224 <xTimerGenericCommand+0x98>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d02a      	beq.n	800a218 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b05      	cmp	r3, #5
 800a1d2:	dc18      	bgt.n	800a206 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1d4:	f7ff feb2 	bl	8009f3c <xTaskGetSchedulerState>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d109      	bne.n	800a1f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1de:	4b11      	ldr	r3, [pc, #68]	; (800a224 <xTimerGenericCommand+0x98>)
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	f107 0110 	add.w	r1, r7, #16
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ea:	f7fe fca1 	bl	8008b30 <xQueueGenericSend>
 800a1ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a1f0:	e012      	b.n	800a218 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a1f2:	4b0c      	ldr	r3, [pc, #48]	; (800a224 <xTimerGenericCommand+0x98>)
 800a1f4:	6818      	ldr	r0, [r3, #0]
 800a1f6:	f107 0110 	add.w	r1, r7, #16
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f7fe fc97 	bl	8008b30 <xQueueGenericSend>
 800a202:	6278      	str	r0, [r7, #36]	; 0x24
 800a204:	e008      	b.n	800a218 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a206:	4b07      	ldr	r3, [pc, #28]	; (800a224 <xTimerGenericCommand+0x98>)
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	f107 0110 	add.w	r1, r7, #16
 800a20e:	2300      	movs	r3, #0
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	f7fe fd8b 	bl	8008d2c <xQueueGenericSendFromISR>
 800a216:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3728      	adds	r7, #40	; 0x28
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	20000df0 	.word	0x20000df0

0800a228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b088      	sub	sp, #32
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a232:	4b22      	ldr	r3, [pc, #136]	; (800a2bc <prvProcessExpiredTimer+0x94>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	3304      	adds	r3, #4
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe fb47 	bl	80088d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	d022      	beq.n	800a29a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	699a      	ldr	r2, [r3, #24]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	18d1      	adds	r1, r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	6978      	ldr	r0, [r7, #20]
 800a262:	f000 f8d1 	bl	800a408 <prvInsertTimerInActiveList>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01f      	beq.n	800a2ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a26c:	2300      	movs	r3, #0
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	2300      	movs	r3, #0
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	2100      	movs	r1, #0
 800a276:	6978      	ldr	r0, [r7, #20]
 800a278:	f7ff ff88 	bl	800a18c <xTimerGenericCommand>
 800a27c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d113      	bne.n	800a2ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	60fb      	str	r3, [r7, #12]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2a0:	f023 0301 	bic.w	r3, r3, #1
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	6a1b      	ldr	r3, [r3, #32]
 800a2b0:	6978      	ldr	r0, [r7, #20]
 800a2b2:	4798      	blx	r3
}
 800a2b4:	bf00      	nop
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20000de8 	.word	0x20000de8

0800a2c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2c8:	f107 0308 	add.w	r3, r7, #8
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 f857 	bl	800a380 <prvGetNextExpireTime>
 800a2d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 f803 	bl	800a2e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2de:	f000 f8d5 	bl	800a48c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2e2:	e7f1      	b.n	800a2c8 <prvTimerTask+0x8>

0800a2e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a2ee:	f7ff fa43 	bl	8009778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2f2:	f107 0308 	add.w	r3, r7, #8
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 f866 	bl	800a3c8 <prvSampleTimeNow>
 800a2fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d130      	bne.n	800a366 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10a      	bne.n	800a320 <prvProcessTimerOrBlockTask+0x3c>
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d806      	bhi.n	800a320 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a312:	f7ff fa3f 	bl	8009794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a316:	68f9      	ldr	r1, [r7, #12]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7ff ff85 	bl	800a228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a31e:	e024      	b.n	800a36a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d008      	beq.n	800a338 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a326:	4b13      	ldr	r3, [pc, #76]	; (800a374 <prvProcessTimerOrBlockTask+0x90>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <prvProcessTimerOrBlockTask+0x50>
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <prvProcessTimerOrBlockTask+0x52>
 800a334:	2300      	movs	r3, #0
 800a336:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a338:	4b0f      	ldr	r3, [pc, #60]	; (800a378 <prvProcessTimerOrBlockTask+0x94>)
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	4619      	mov	r1, r3
 800a346:	f7fe ffa7 	bl	8009298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a34a:	f7ff fa23 	bl	8009794 <xTaskResumeAll>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10a      	bne.n	800a36a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a354:	4b09      	ldr	r3, [pc, #36]	; (800a37c <prvProcessTimerOrBlockTask+0x98>)
 800a356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	f3bf 8f6f 	isb	sy
}
 800a364:	e001      	b.n	800a36a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a366:	f7ff fa15 	bl	8009794 <xTaskResumeAll>
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000dec 	.word	0x20000dec
 800a378:	20000df0 	.word	0x20000df0
 800a37c:	e000ed04 	.word	0xe000ed04

0800a380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a388:	4b0e      	ldr	r3, [pc, #56]	; (800a3c4 <prvGetNextExpireTime+0x44>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <prvGetNextExpireTime+0x16>
 800a392:	2201      	movs	r2, #1
 800a394:	e000      	b.n	800a398 <prvGetNextExpireTime+0x18>
 800a396:	2200      	movs	r2, #0
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d105      	bne.n	800a3b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3a4:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <prvGetNextExpireTime+0x44>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	60fb      	str	r3, [r7, #12]
 800a3ae:	e001      	b.n	800a3b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	20000de8 	.word	0x20000de8

0800a3c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3d0:	f7ff fa7e 	bl	80098d0 <xTaskGetTickCount>
 800a3d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <prvSampleTimeNow+0x3c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d205      	bcs.n	800a3ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a3e0:	f000 f936 	bl	800a650 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	e002      	b.n	800a3f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a3f2:	4a04      	ldr	r2, [pc, #16]	; (800a404 <prvSampleTimeNow+0x3c>)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	20000df8 	.word	0x20000df8

0800a408 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a416:	2300      	movs	r3, #0
 800a418:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d812      	bhi.n	800a454 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	1ad2      	subs	r2, r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d302      	bcc.n	800a442 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a43c:	2301      	movs	r3, #1
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e01b      	b.n	800a47a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a442:	4b10      	ldr	r3, [pc, #64]	; (800a484 <prvInsertTimerInActiveList+0x7c>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3304      	adds	r3, #4
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f7fe fa08 	bl	8008862 <vListInsert>
 800a452:	e012      	b.n	800a47a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d206      	bcs.n	800a46a <prvInsertTimerInActiveList+0x62>
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d302      	bcc.n	800a46a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a464:	2301      	movs	r3, #1
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	e007      	b.n	800a47a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a46a:	4b07      	ldr	r3, [pc, #28]	; (800a488 <prvInsertTimerInActiveList+0x80>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	4610      	mov	r0, r2
 800a476:	f7fe f9f4 	bl	8008862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a47a:	697b      	ldr	r3, [r7, #20]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20000dec 	.word	0x20000dec
 800a488:	20000de8 	.word	0x20000de8

0800a48c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08e      	sub	sp, #56	; 0x38
 800a490:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a492:	e0ca      	b.n	800a62a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	da18      	bge.n	800a4cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a49a:	1d3b      	adds	r3, r7, #4
 800a49c:	3304      	adds	r3, #4
 800a49e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10a      	bne.n	800a4bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	61fb      	str	r3, [r7, #28]
}
 800a4b8:	bf00      	nop
 800a4ba:	e7fe      	b.n	800a4ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4c2:	6850      	ldr	r0, [r2, #4]
 800a4c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4c6:	6892      	ldr	r2, [r2, #8]
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f2c0 80aa 	blt.w	800a628 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d004      	beq.n	800a4ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe f9f5 	bl	80088d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4ea:	463b      	mov	r3, r7
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff ff6b 	bl	800a3c8 <prvSampleTimeNow>
 800a4f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b09      	cmp	r3, #9
 800a4f8:	f200 8097 	bhi.w	800a62a <prvProcessReceivedCommands+0x19e>
 800a4fc:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <prvProcessReceivedCommands+0x78>)
 800a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a502:	bf00      	nop
 800a504:	0800a52d 	.word	0x0800a52d
 800a508:	0800a52d 	.word	0x0800a52d
 800a50c:	0800a52d 	.word	0x0800a52d
 800a510:	0800a5a1 	.word	0x0800a5a1
 800a514:	0800a5b5 	.word	0x0800a5b5
 800a518:	0800a5ff 	.word	0x0800a5ff
 800a51c:	0800a52d 	.word	0x0800a52d
 800a520:	0800a52d 	.word	0x0800a52d
 800a524:	0800a5a1 	.word	0x0800a5a1
 800a528:	0800a5b5 	.word	0x0800a5b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a532:	f043 0301 	orr.w	r3, r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	18d1      	adds	r1, r2, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a54a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a54c:	f7ff ff5c 	bl	800a408 <prvInsertTimerInActiveList>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d069      	beq.n	800a62a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a55c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a564:	f003 0304 	and.w	r3, r3, #4
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d05e      	beq.n	800a62a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	441a      	add	r2, r3
 800a574:	2300      	movs	r3, #0
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	2300      	movs	r3, #0
 800a57a:	2100      	movs	r1, #0
 800a57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57e:	f7ff fe05 	bl	800a18c <xTimerGenericCommand>
 800a582:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d14f      	bne.n	800a62a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	61bb      	str	r3, [r7, #24]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5a6:	f023 0301 	bic.w	r3, r3, #1
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a5b2:	e03a      	b.n	800a62a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5ba:	f043 0301 	orr.w	r3, r3, #1
 800a5be:	b2da      	uxtb	r2, r3
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10a      	bne.n	800a5ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	617b      	str	r3, [r7, #20]
}
 800a5e6:	bf00      	nop
 800a5e8:	e7fe      	b.n	800a5e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	699a      	ldr	r2, [r3, #24]
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	18d1      	adds	r1, r2, r3
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f8:	f7ff ff06 	bl	800a408 <prvInsertTimerInActiveList>
					break;
 800a5fc:	e015      	b.n	800a62a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d103      	bne.n	800a614 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a60c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a60e:	f000 fba1 	bl	800ad54 <vPortFree>
 800a612:	e00a      	b.n	800a62a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a61a:	f023 0301 	bic.w	r3, r3, #1
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a626:	e000      	b.n	800a62a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a628:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a62a:	4b08      	ldr	r3, [pc, #32]	; (800a64c <prvProcessReceivedCommands+0x1c0>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	1d39      	adds	r1, r7, #4
 800a630:	2200      	movs	r2, #0
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fc16 	bl	8008e64 <xQueueReceive>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f47f af2a 	bne.w	800a494 <prvProcessReceivedCommands+0x8>
	}
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	3730      	adds	r7, #48	; 0x30
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000df0 	.word	0x20000df0

0800a650 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a656:	e048      	b.n	800a6ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a658:	4b2d      	ldr	r3, [pc, #180]	; (800a710 <prvSwitchTimerLists+0xc0>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a662:	4b2b      	ldr	r3, [pc, #172]	; (800a710 <prvSwitchTimerLists+0xc0>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3304      	adds	r3, #4
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe f92f 	bl	80088d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a684:	f003 0304 	and.w	r3, r3, #4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d02e      	beq.n	800a6ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	4413      	add	r3, r2
 800a694:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d90e      	bls.n	800a6bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6aa:	4b19      	ldr	r3, [pc, #100]	; (800a710 <prvSwitchTimerLists+0xc0>)
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	f7fe f8d4 	bl	8008862 <vListInsert>
 800a6ba:	e016      	b.n	800a6ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7ff fd60 	bl	800a18c <xTimerGenericCommand>
 800a6cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10a      	bne.n	800a6ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	603b      	str	r3, [r7, #0]
}
 800a6e6:	bf00      	nop
 800a6e8:	e7fe      	b.n	800a6e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6ea:	4b09      	ldr	r3, [pc, #36]	; (800a710 <prvSwitchTimerLists+0xc0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1b1      	bne.n	800a658 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a6f4:	4b06      	ldr	r3, [pc, #24]	; (800a710 <prvSwitchTimerLists+0xc0>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <prvSwitchTimerLists+0xc4>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a04      	ldr	r2, [pc, #16]	; (800a710 <prvSwitchTimerLists+0xc0>)
 800a700:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a702:	4a04      	ldr	r2, [pc, #16]	; (800a714 <prvSwitchTimerLists+0xc4>)
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	6013      	str	r3, [r2, #0]
}
 800a708:	bf00      	nop
 800a70a:	3718      	adds	r7, #24
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	20000de8 	.word	0x20000de8
 800a714:	20000dec 	.word	0x20000dec

0800a718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a71e:	f000 f969 	bl	800a9f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a722:	4b15      	ldr	r3, [pc, #84]	; (800a778 <prvCheckForValidListAndQueue+0x60>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d120      	bne.n	800a76c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a72a:	4814      	ldr	r0, [pc, #80]	; (800a77c <prvCheckForValidListAndQueue+0x64>)
 800a72c:	f7fe f848 	bl	80087c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a730:	4813      	ldr	r0, [pc, #76]	; (800a780 <prvCheckForValidListAndQueue+0x68>)
 800a732:	f7fe f845 	bl	80087c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a736:	4b13      	ldr	r3, [pc, #76]	; (800a784 <prvCheckForValidListAndQueue+0x6c>)
 800a738:	4a10      	ldr	r2, [pc, #64]	; (800a77c <prvCheckForValidListAndQueue+0x64>)
 800a73a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a73c:	4b12      	ldr	r3, [pc, #72]	; (800a788 <prvCheckForValidListAndQueue+0x70>)
 800a73e:	4a10      	ldr	r2, [pc, #64]	; (800a780 <prvCheckForValidListAndQueue+0x68>)
 800a740:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a742:	2300      	movs	r3, #0
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	4b11      	ldr	r3, [pc, #68]	; (800a78c <prvCheckForValidListAndQueue+0x74>)
 800a748:	4a11      	ldr	r2, [pc, #68]	; (800a790 <prvCheckForValidListAndQueue+0x78>)
 800a74a:	2110      	movs	r1, #16
 800a74c:	200a      	movs	r0, #10
 800a74e:	f7fe f953 	bl	80089f8 <xQueueGenericCreateStatic>
 800a752:	4603      	mov	r3, r0
 800a754:	4a08      	ldr	r2, [pc, #32]	; (800a778 <prvCheckForValidListAndQueue+0x60>)
 800a756:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a758:	4b07      	ldr	r3, [pc, #28]	; (800a778 <prvCheckForValidListAndQueue+0x60>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a760:	4b05      	ldr	r3, [pc, #20]	; (800a778 <prvCheckForValidListAndQueue+0x60>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	490b      	ldr	r1, [pc, #44]	; (800a794 <prvCheckForValidListAndQueue+0x7c>)
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe fd6c 	bl	8009244 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a76c:	f000 f972 	bl	800aa54 <vPortExitCritical>
}
 800a770:	bf00      	nop
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000df0 	.word	0x20000df0
 800a77c:	20000dc0 	.word	0x20000dc0
 800a780:	20000dd4 	.word	0x20000dd4
 800a784:	20000de8 	.word	0x20000de8
 800a788:	20000dec 	.word	0x20000dec
 800a78c:	20000e9c 	.word	0x20000e9c
 800a790:	20000dfc 	.word	0x20000dfc
 800a794:	0800dc94 	.word	0x0800dc94

0800a798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	3b04      	subs	r3, #4
 800a7a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3b04      	subs	r3, #4
 800a7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f023 0201 	bic.w	r2, r3, #1
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3b04      	subs	r3, #4
 800a7c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7c8:	4a0c      	ldr	r2, [pc, #48]	; (800a7fc <pxPortInitialiseStack+0x64>)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3b14      	subs	r3, #20
 800a7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3b04      	subs	r3, #4
 800a7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f06f 0202 	mvn.w	r2, #2
 800a7e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3b20      	subs	r3, #32
 800a7ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	0800a801 	.word	0x0800a801

0800a800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a80a:	4b12      	ldr	r3, [pc, #72]	; (800a854 <prvTaskExitError+0x54>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a812:	d00a      	beq.n	800a82a <prvTaskExitError+0x2a>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	60fb      	str	r3, [r7, #12]
}
 800a826:	bf00      	nop
 800a828:	e7fe      	b.n	800a828 <prvTaskExitError+0x28>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	60bb      	str	r3, [r7, #8]
}
 800a83c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a83e:	bf00      	nop
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0fc      	beq.n	800a840 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a846:	bf00      	nop
 800a848:	bf00      	nop
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	2000000c 	.word	0x2000000c
	...

0800a860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a860:	4b07      	ldr	r3, [pc, #28]	; (800a880 <pxCurrentTCBConst2>)
 800a862:	6819      	ldr	r1, [r3, #0]
 800a864:	6808      	ldr	r0, [r1, #0]
 800a866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86a:	f380 8809 	msr	PSP, r0
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f04f 0000 	mov.w	r0, #0
 800a876:	f380 8811 	msr	BASEPRI, r0
 800a87a:	4770      	bx	lr
 800a87c:	f3af 8000 	nop.w

0800a880 <pxCurrentTCBConst2>:
 800a880:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop

0800a888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a888:	4808      	ldr	r0, [pc, #32]	; (800a8ac <prvPortStartFirstTask+0x24>)
 800a88a:	6800      	ldr	r0, [r0, #0]
 800a88c:	6800      	ldr	r0, [r0, #0]
 800a88e:	f380 8808 	msr	MSP, r0
 800a892:	f04f 0000 	mov.w	r0, #0
 800a896:	f380 8814 	msr	CONTROL, r0
 800a89a:	b662      	cpsie	i
 800a89c:	b661      	cpsie	f
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	df00      	svc	0
 800a8a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8aa:	bf00      	nop
 800a8ac:	e000ed08 	.word	0xe000ed08

0800a8b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a8b6:	4b46      	ldr	r3, [pc, #280]	; (800a9d0 <xPortStartScheduler+0x120>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a46      	ldr	r2, [pc, #280]	; (800a9d4 <xPortStartScheduler+0x124>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d10a      	bne.n	800a8d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	613b      	str	r3, [r7, #16]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8d6:	4b3e      	ldr	r3, [pc, #248]	; (800a9d0 <xPortStartScheduler+0x120>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a3f      	ldr	r2, [pc, #252]	; (800a9d8 <xPortStartScheduler+0x128>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d10a      	bne.n	800a8f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	60fb      	str	r3, [r7, #12]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8f6:	4b39      	ldr	r3, [pc, #228]	; (800a9dc <xPortStartScheduler+0x12c>)
 800a8f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	22ff      	movs	r2, #255	; 0xff
 800a906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	4b31      	ldr	r3, [pc, #196]	; (800a9e0 <xPortStartScheduler+0x130>)
 800a91c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a91e:	4b31      	ldr	r3, [pc, #196]	; (800a9e4 <xPortStartScheduler+0x134>)
 800a920:	2207      	movs	r2, #7
 800a922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a924:	e009      	b.n	800a93a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a926:	4b2f      	ldr	r3, [pc, #188]	; (800a9e4 <xPortStartScheduler+0x134>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	4a2d      	ldr	r2, [pc, #180]	; (800a9e4 <xPortStartScheduler+0x134>)
 800a92e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a930:	78fb      	ldrb	r3, [r7, #3]
 800a932:	b2db      	uxtb	r3, r3
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	b2db      	uxtb	r3, r3
 800a938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a93a:	78fb      	ldrb	r3, [r7, #3]
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a942:	2b80      	cmp	r3, #128	; 0x80
 800a944:	d0ef      	beq.n	800a926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a946:	4b27      	ldr	r3, [pc, #156]	; (800a9e4 <xPortStartScheduler+0x134>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f1c3 0307 	rsb	r3, r3, #7
 800a94e:	2b04      	cmp	r3, #4
 800a950:	d00a      	beq.n	800a968 <xPortStartScheduler+0xb8>
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	60bb      	str	r3, [r7, #8]
}
 800a964:	bf00      	nop
 800a966:	e7fe      	b.n	800a966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a968:	4b1e      	ldr	r3, [pc, #120]	; (800a9e4 <xPortStartScheduler+0x134>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	021b      	lsls	r3, r3, #8
 800a96e:	4a1d      	ldr	r2, [pc, #116]	; (800a9e4 <xPortStartScheduler+0x134>)
 800a970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a972:	4b1c      	ldr	r3, [pc, #112]	; (800a9e4 <xPortStartScheduler+0x134>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a97a:	4a1a      	ldr	r2, [pc, #104]	; (800a9e4 <xPortStartScheduler+0x134>)
 800a97c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	b2da      	uxtb	r2, r3
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a986:	4b18      	ldr	r3, [pc, #96]	; (800a9e8 <xPortStartScheduler+0x138>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a17      	ldr	r2, [pc, #92]	; (800a9e8 <xPortStartScheduler+0x138>)
 800a98c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a992:	4b15      	ldr	r3, [pc, #84]	; (800a9e8 <xPortStartScheduler+0x138>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a14      	ldr	r2, [pc, #80]	; (800a9e8 <xPortStartScheduler+0x138>)
 800a998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a99c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a99e:	f000 f8dd 	bl	800ab5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9a2:	4b12      	ldr	r3, [pc, #72]	; (800a9ec <xPortStartScheduler+0x13c>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9a8:	f000 f8fc 	bl	800aba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9ac:	4b10      	ldr	r3, [pc, #64]	; (800a9f0 <xPortStartScheduler+0x140>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a0f      	ldr	r2, [pc, #60]	; (800a9f0 <xPortStartScheduler+0x140>)
 800a9b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a9b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9b8:	f7ff ff66 	bl	800a888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9bc:	f7ff f852 	bl	8009a64 <vTaskSwitchContext>
	prvTaskExitError();
 800a9c0:	f7ff ff1e 	bl	800a800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	e000ed00 	.word	0xe000ed00
 800a9d4:	410fc271 	.word	0x410fc271
 800a9d8:	410fc270 	.word	0x410fc270
 800a9dc:	e000e400 	.word	0xe000e400
 800a9e0:	20000eec 	.word	0x20000eec
 800a9e4:	20000ef0 	.word	0x20000ef0
 800a9e8:	e000ed20 	.word	0xe000ed20
 800a9ec:	2000000c 	.word	0x2000000c
 800a9f0:	e000ef34 	.word	0xe000ef34

0800a9f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	607b      	str	r3, [r7, #4]
}
 800aa0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa0e:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <vPortEnterCritical+0x58>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3301      	adds	r3, #1
 800aa14:	4a0d      	ldr	r2, [pc, #52]	; (800aa4c <vPortEnterCritical+0x58>)
 800aa16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa18:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <vPortEnterCritical+0x58>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d10f      	bne.n	800aa40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa20:	4b0b      	ldr	r3, [pc, #44]	; (800aa50 <vPortEnterCritical+0x5c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00a      	beq.n	800aa40 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	603b      	str	r3, [r7, #0]
}
 800aa3c:	bf00      	nop
 800aa3e:	e7fe      	b.n	800aa3e <vPortEnterCritical+0x4a>
	}
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	2000000c 	.word	0x2000000c
 800aa50:	e000ed04 	.word	0xe000ed04

0800aa54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa5a:	4b12      	ldr	r3, [pc, #72]	; (800aaa4 <vPortExitCritical+0x50>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10a      	bne.n	800aa78 <vPortExitCritical+0x24>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	607b      	str	r3, [r7, #4]
}
 800aa74:	bf00      	nop
 800aa76:	e7fe      	b.n	800aa76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <vPortExitCritical+0x50>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	4a09      	ldr	r2, [pc, #36]	; (800aaa4 <vPortExitCritical+0x50>)
 800aa80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa82:	4b08      	ldr	r3, [pc, #32]	; (800aaa4 <vPortExitCritical+0x50>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d105      	bne.n	800aa96 <vPortExitCritical+0x42>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	f383 8811 	msr	BASEPRI, r3
}
 800aa94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	2000000c 	.word	0x2000000c
	...

0800aab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aab0:	f3ef 8009 	mrs	r0, PSP
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <pxCurrentTCBConst>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	f01e 0f10 	tst.w	lr, #16
 800aac0:	bf08      	it	eq
 800aac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaca:	6010      	str	r0, [r2, #0]
 800aacc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aad4:	f380 8811 	msr	BASEPRI, r0
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f7fe ffc0 	bl	8009a64 <vTaskSwitchContext>
 800aae4:	f04f 0000 	mov.w	r0, #0
 800aae8:	f380 8811 	msr	BASEPRI, r0
 800aaec:	bc09      	pop	{r0, r3}
 800aaee:	6819      	ldr	r1, [r3, #0]
 800aaf0:	6808      	ldr	r0, [r1, #0]
 800aaf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf6:	f01e 0f10 	tst.w	lr, #16
 800aafa:	bf08      	it	eq
 800aafc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab00:	f380 8809 	msr	PSP, r0
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	f3af 8000 	nop.w

0800ab10 <pxCurrentTCBConst>:
 800ab10:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab14:	bf00      	nop
 800ab16:	bf00      	nop

0800ab18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
}
 800ab30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab32:	f7fe fedd 	bl	80098f0 <xTaskIncrementTick>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d003      	beq.n	800ab44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab3c:	4b06      	ldr	r3, [pc, #24]	; (800ab58 <xPortSysTickHandler+0x40>)
 800ab3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	2300      	movs	r3, #0
 800ab46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f383 8811 	msr	BASEPRI, r3
}
 800ab4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	e000ed04 	.word	0xe000ed04

0800ab5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab60:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <vPortSetupTimerInterrupt+0x34>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab66:	4b0b      	ldr	r3, [pc, #44]	; (800ab94 <vPortSetupTimerInterrupt+0x38>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <vPortSetupTimerInterrupt+0x3c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a0a      	ldr	r2, [pc, #40]	; (800ab9c <vPortSetupTimerInterrupt+0x40>)
 800ab72:	fba2 2303 	umull	r2, r3, r2, r3
 800ab76:	099b      	lsrs	r3, r3, #6
 800ab78:	4a09      	ldr	r2, [pc, #36]	; (800aba0 <vPortSetupTimerInterrupt+0x44>)
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab7e:	4b04      	ldr	r3, [pc, #16]	; (800ab90 <vPortSetupTimerInterrupt+0x34>)
 800ab80:	2207      	movs	r2, #7
 800ab82:	601a      	str	r2, [r3, #0]
}
 800ab84:	bf00      	nop
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	e000e010 	.word	0xe000e010
 800ab94:	e000e018 	.word	0xe000e018
 800ab98:	20000000 	.word	0x20000000
 800ab9c:	10624dd3 	.word	0x10624dd3
 800aba0:	e000e014 	.word	0xe000e014

0800aba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800abb4 <vPortEnableVFP+0x10>
 800aba8:	6801      	ldr	r1, [r0, #0]
 800abaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800abae:	6001      	str	r1, [r0, #0]
 800abb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800abb2:	bf00      	nop
 800abb4:	e000ed88 	.word	0xe000ed88

0800abb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abbe:	f3ef 8305 	mrs	r3, IPSR
 800abc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2b0f      	cmp	r3, #15
 800abc8:	d914      	bls.n	800abf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abca:	4a17      	ldr	r2, [pc, #92]	; (800ac28 <vPortValidateInterruptPriority+0x70>)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4413      	add	r3, r2
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abd4:	4b15      	ldr	r3, [pc, #84]	; (800ac2c <vPortValidateInterruptPriority+0x74>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	7afa      	ldrb	r2, [r7, #11]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d20a      	bcs.n	800abf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	607b      	str	r3, [r7, #4]
}
 800abf0:	bf00      	nop
 800abf2:	e7fe      	b.n	800abf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abf4:	4b0e      	ldr	r3, [pc, #56]	; (800ac30 <vPortValidateInterruptPriority+0x78>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abfc:	4b0d      	ldr	r3, [pc, #52]	; (800ac34 <vPortValidateInterruptPriority+0x7c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d90a      	bls.n	800ac1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	603b      	str	r3, [r7, #0]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <vPortValidateInterruptPriority+0x60>
	}
 800ac1a:	bf00      	nop
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	e000e3f0 	.word	0xe000e3f0
 800ac2c:	20000eec 	.word	0x20000eec
 800ac30:	e000ed0c 	.word	0xe000ed0c
 800ac34:	20000ef0 	.word	0x20000ef0

0800ac38 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800ac44:	f7fe fd98 	bl	8009778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800ac48:	4b3e      	ldr	r3, [pc, #248]	; (800ad44 <pvPortMalloc+0x10c>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d104      	bne.n	800ac5a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 800ac50:	f000 f8ba 	bl	800adc8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800ac54:	4b3b      	ldr	r3, [pc, #236]	; (800ad44 <pvPortMalloc+0x10c>)
 800ac56:	2201      	movs	r2, #1
 800ac58:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 800ac60:	2308      	movs	r3, #8
 800ac62:	461a      	mov	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4413      	add	r3, r2
 800ac68:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f003 0307 	and.w	r3, r3, #7
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d004      	beq.n	800ac7e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f023 0307 	bic.w	r3, r3, #7
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d057      	beq.n	800ad34 <pvPortMalloc+0xfc>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f247 5227 	movw	r2, #29991	; 0x7527
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d852      	bhi.n	800ad34 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800ac8e:	4b2e      	ldr	r3, [pc, #184]	; (800ad48 <pvPortMalloc+0x110>)
 800ac90:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800ac92:	4b2d      	ldr	r3, [pc, #180]	; (800ad48 <pvPortMalloc+0x110>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac98:	e004      	b.n	800aca4 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d903      	bls.n	800acb6 <pvPortMalloc+0x7e>
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1f1      	bne.n	800ac9a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	4a24      	ldr	r2, [pc, #144]	; (800ad4c <pvPortMalloc+0x114>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d03a      	beq.n	800ad34 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2208      	movs	r2, #8
 800acc4:	4413      	add	r3, r2
 800acc6:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	2208      	movs	r2, #8
 800acda:	0052      	lsls	r2, r2, #1
 800acdc:	4293      	cmp	r3, r2
 800acde:	d922      	bls.n	800ad26 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ace0:	69fa      	ldr	r2, [r7, #28]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4413      	add	r3, r2
 800ace6:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	1ad2      	subs	r2, r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	60bb      	str	r3, [r7, #8]
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <pvPortMalloc+0x110>)
 800ad02:	613b      	str	r3, [r7, #16]
 800ad04:	e002      	b.n	800ad0c <pvPortMalloc+0xd4>
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d8f6      	bhi.n	800ad06 <pvPortMalloc+0xce>
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	601a      	str	r2, [r3, #0]
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad26:	4b0a      	ldr	r3, [pc, #40]	; (800ad50 <pvPortMalloc+0x118>)
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	4a07      	ldr	r2, [pc, #28]	; (800ad50 <pvPortMalloc+0x118>)
 800ad32:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad34:	f7fe fd2e 	bl	8009794 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800ad38:	697b      	ldr	r3, [r7, #20]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3720      	adds	r7, #32
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20008434 	.word	0x20008434
 800ad48:	20008424 	.word	0x20008424
 800ad4c:	2000842c 	.word	0x2000842c
 800ad50:	20000010 	.word	0x20000010

0800ad54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d027      	beq.n	800adb6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800ad66:	2308      	movs	r3, #8
 800ad68:	425b      	negs	r3, r3
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800ad74:	f7fe fd00 	bl	8009778 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	60bb      	str	r3, [r7, #8]
 800ad7e:	4b10      	ldr	r3, [pc, #64]	; (800adc0 <vPortFree+0x6c>)
 800ad80:	617b      	str	r3, [r7, #20]
 800ad82:	e002      	b.n	800ad8a <vPortFree+0x36>
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	617b      	str	r3, [r7, #20]
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d8f6      	bhi.n	800ad84 <vPortFree+0x30>
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	4b06      	ldr	r3, [pc, #24]	; (800adc4 <vPortFree+0x70>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4413      	add	r3, r2
 800adae:	4a05      	ldr	r2, [pc, #20]	; (800adc4 <vPortFree+0x70>)
 800adb0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800adb2:	f7fe fcef 	bl	8009794 <xTaskResumeAll>
	}
}
 800adb6:	bf00      	nop
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	20008424 	.word	0x20008424
 800adc4:	20000010 	.word	0x20000010

0800adc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800adce:	4b10      	ldr	r3, [pc, #64]	; (800ae10 <prvHeapInit+0x48>)
 800add0:	f023 0307 	bic.w	r3, r3, #7
 800add4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800add6:	4a0f      	ldr	r2, [pc, #60]	; (800ae14 <prvHeapInit+0x4c>)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800addc:	4b0d      	ldr	r3, [pc, #52]	; (800ae14 <prvHeapInit+0x4c>)
 800adde:	2200      	movs	r2, #0
 800ade0:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800ade2:	4b0d      	ldr	r3, [pc, #52]	; (800ae18 <prvHeapInit+0x50>)
 800ade4:	f247 5228 	movw	r2, #29992	; 0x7528
 800ade8:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800adea:	4b0b      	ldr	r3, [pc, #44]	; (800ae18 <prvHeapInit+0x50>)
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	f247 5228 	movw	r2, #29992	; 0x7528
 800adfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	4a06      	ldr	r2, [pc, #24]	; (800ae18 <prvHeapInit+0x50>)
 800ae00:	601a      	str	r2, [r3, #0]
}
 800ae02:	bf00      	nop
 800ae04:	370c      	adds	r7, #12
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	20000efc 	.word	0x20000efc
 800ae14:	20008424 	.word	0x20008424
 800ae18:	2000842c 	.word	0x2000842c

0800ae1c <__errno>:
 800ae1c:	4b01      	ldr	r3, [pc, #4]	; (800ae24 <__errno+0x8>)
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	20000014 	.word	0x20000014

0800ae28 <__libc_init_array>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	4d0d      	ldr	r5, [pc, #52]	; (800ae60 <__libc_init_array+0x38>)
 800ae2c:	4c0d      	ldr	r4, [pc, #52]	; (800ae64 <__libc_init_array+0x3c>)
 800ae2e:	1b64      	subs	r4, r4, r5
 800ae30:	10a4      	asrs	r4, r4, #2
 800ae32:	2600      	movs	r6, #0
 800ae34:	42a6      	cmp	r6, r4
 800ae36:	d109      	bne.n	800ae4c <__libc_init_array+0x24>
 800ae38:	4d0b      	ldr	r5, [pc, #44]	; (800ae68 <__libc_init_array+0x40>)
 800ae3a:	4c0c      	ldr	r4, [pc, #48]	; (800ae6c <__libc_init_array+0x44>)
 800ae3c:	f002 feb4 	bl	800dba8 <_init>
 800ae40:	1b64      	subs	r4, r4, r5
 800ae42:	10a4      	asrs	r4, r4, #2
 800ae44:	2600      	movs	r6, #0
 800ae46:	42a6      	cmp	r6, r4
 800ae48:	d105      	bne.n	800ae56 <__libc_init_array+0x2e>
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae50:	4798      	blx	r3
 800ae52:	3601      	adds	r6, #1
 800ae54:	e7ee      	b.n	800ae34 <__libc_init_array+0xc>
 800ae56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae5a:	4798      	blx	r3
 800ae5c:	3601      	adds	r6, #1
 800ae5e:	e7f2      	b.n	800ae46 <__libc_init_array+0x1e>
 800ae60:	0800e13c 	.word	0x0800e13c
 800ae64:	0800e13c 	.word	0x0800e13c
 800ae68:	0800e13c 	.word	0x0800e13c
 800ae6c:	0800e140 	.word	0x0800e140

0800ae70 <memcpy>:
 800ae70:	440a      	add	r2, r1
 800ae72:	4291      	cmp	r1, r2
 800ae74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae78:	d100      	bne.n	800ae7c <memcpy+0xc>
 800ae7a:	4770      	bx	lr
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae86:	4291      	cmp	r1, r2
 800ae88:	d1f9      	bne.n	800ae7e <memcpy+0xe>
 800ae8a:	bd10      	pop	{r4, pc}

0800ae8c <memset>:
 800ae8c:	4402      	add	r2, r0
 800ae8e:	4603      	mov	r3, r0
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d100      	bne.n	800ae96 <memset+0xa>
 800ae94:	4770      	bx	lr
 800ae96:	f803 1b01 	strb.w	r1, [r3], #1
 800ae9a:	e7f9      	b.n	800ae90 <memset+0x4>

0800ae9c <__cvt>:
 800ae9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aea0:	ec55 4b10 	vmov	r4, r5, d0
 800aea4:	2d00      	cmp	r5, #0
 800aea6:	460e      	mov	r6, r1
 800aea8:	4619      	mov	r1, r3
 800aeaa:	462b      	mov	r3, r5
 800aeac:	bfbb      	ittet	lt
 800aeae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aeb2:	461d      	movlt	r5, r3
 800aeb4:	2300      	movge	r3, #0
 800aeb6:	232d      	movlt	r3, #45	; 0x2d
 800aeb8:	700b      	strb	r3, [r1, #0]
 800aeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aebc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aec0:	4691      	mov	r9, r2
 800aec2:	f023 0820 	bic.w	r8, r3, #32
 800aec6:	bfbc      	itt	lt
 800aec8:	4622      	movlt	r2, r4
 800aeca:	4614      	movlt	r4, r2
 800aecc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aed0:	d005      	beq.n	800aede <__cvt+0x42>
 800aed2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aed6:	d100      	bne.n	800aeda <__cvt+0x3e>
 800aed8:	3601      	adds	r6, #1
 800aeda:	2102      	movs	r1, #2
 800aedc:	e000      	b.n	800aee0 <__cvt+0x44>
 800aede:	2103      	movs	r1, #3
 800aee0:	ab03      	add	r3, sp, #12
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	ab02      	add	r3, sp, #8
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	ec45 4b10 	vmov	d0, r4, r5
 800aeec:	4653      	mov	r3, sl
 800aeee:	4632      	mov	r2, r6
 800aef0:	f000 fcea 	bl	800b8c8 <_dtoa_r>
 800aef4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aef8:	4607      	mov	r7, r0
 800aefa:	d102      	bne.n	800af02 <__cvt+0x66>
 800aefc:	f019 0f01 	tst.w	r9, #1
 800af00:	d022      	beq.n	800af48 <__cvt+0xac>
 800af02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af06:	eb07 0906 	add.w	r9, r7, r6
 800af0a:	d110      	bne.n	800af2e <__cvt+0x92>
 800af0c:	783b      	ldrb	r3, [r7, #0]
 800af0e:	2b30      	cmp	r3, #48	; 0x30
 800af10:	d10a      	bne.n	800af28 <__cvt+0x8c>
 800af12:	2200      	movs	r2, #0
 800af14:	2300      	movs	r3, #0
 800af16:	4620      	mov	r0, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	f7f5 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800af1e:	b918      	cbnz	r0, 800af28 <__cvt+0x8c>
 800af20:	f1c6 0601 	rsb	r6, r6, #1
 800af24:	f8ca 6000 	str.w	r6, [sl]
 800af28:	f8da 3000 	ldr.w	r3, [sl]
 800af2c:	4499      	add	r9, r3
 800af2e:	2200      	movs	r2, #0
 800af30:	2300      	movs	r3, #0
 800af32:	4620      	mov	r0, r4
 800af34:	4629      	mov	r1, r5
 800af36:	f7f5 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800af3a:	b108      	cbz	r0, 800af40 <__cvt+0xa4>
 800af3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800af40:	2230      	movs	r2, #48	; 0x30
 800af42:	9b03      	ldr	r3, [sp, #12]
 800af44:	454b      	cmp	r3, r9
 800af46:	d307      	bcc.n	800af58 <__cvt+0xbc>
 800af48:	9b03      	ldr	r3, [sp, #12]
 800af4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af4c:	1bdb      	subs	r3, r3, r7
 800af4e:	4638      	mov	r0, r7
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	b004      	add	sp, #16
 800af54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af58:	1c59      	adds	r1, r3, #1
 800af5a:	9103      	str	r1, [sp, #12]
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	e7f0      	b.n	800af42 <__cvt+0xa6>

0800af60 <__exponent>:
 800af60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af62:	4603      	mov	r3, r0
 800af64:	2900      	cmp	r1, #0
 800af66:	bfb8      	it	lt
 800af68:	4249      	neglt	r1, r1
 800af6a:	f803 2b02 	strb.w	r2, [r3], #2
 800af6e:	bfb4      	ite	lt
 800af70:	222d      	movlt	r2, #45	; 0x2d
 800af72:	222b      	movge	r2, #43	; 0x2b
 800af74:	2909      	cmp	r1, #9
 800af76:	7042      	strb	r2, [r0, #1]
 800af78:	dd2a      	ble.n	800afd0 <__exponent+0x70>
 800af7a:	f10d 0407 	add.w	r4, sp, #7
 800af7e:	46a4      	mov	ip, r4
 800af80:	270a      	movs	r7, #10
 800af82:	46a6      	mov	lr, r4
 800af84:	460a      	mov	r2, r1
 800af86:	fb91 f6f7 	sdiv	r6, r1, r7
 800af8a:	fb07 1516 	mls	r5, r7, r6, r1
 800af8e:	3530      	adds	r5, #48	; 0x30
 800af90:	2a63      	cmp	r2, #99	; 0x63
 800af92:	f104 34ff 	add.w	r4, r4, #4294967295
 800af96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af9a:	4631      	mov	r1, r6
 800af9c:	dcf1      	bgt.n	800af82 <__exponent+0x22>
 800af9e:	3130      	adds	r1, #48	; 0x30
 800afa0:	f1ae 0502 	sub.w	r5, lr, #2
 800afa4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800afa8:	1c44      	adds	r4, r0, #1
 800afaa:	4629      	mov	r1, r5
 800afac:	4561      	cmp	r1, ip
 800afae:	d30a      	bcc.n	800afc6 <__exponent+0x66>
 800afb0:	f10d 0209 	add.w	r2, sp, #9
 800afb4:	eba2 020e 	sub.w	r2, r2, lr
 800afb8:	4565      	cmp	r5, ip
 800afba:	bf88      	it	hi
 800afbc:	2200      	movhi	r2, #0
 800afbe:	4413      	add	r3, r2
 800afc0:	1a18      	subs	r0, r3, r0
 800afc2:	b003      	add	sp, #12
 800afc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800afce:	e7ed      	b.n	800afac <__exponent+0x4c>
 800afd0:	2330      	movs	r3, #48	; 0x30
 800afd2:	3130      	adds	r1, #48	; 0x30
 800afd4:	7083      	strb	r3, [r0, #2]
 800afd6:	70c1      	strb	r1, [r0, #3]
 800afd8:	1d03      	adds	r3, r0, #4
 800afda:	e7f1      	b.n	800afc0 <__exponent+0x60>

0800afdc <_printf_float>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	ed2d 8b02 	vpush	{d8}
 800afe4:	b08d      	sub	sp, #52	; 0x34
 800afe6:	460c      	mov	r4, r1
 800afe8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800afec:	4616      	mov	r6, r2
 800afee:	461f      	mov	r7, r3
 800aff0:	4605      	mov	r5, r0
 800aff2:	f001 fa55 	bl	800c4a0 <_localeconv_r>
 800aff6:	f8d0 a000 	ldr.w	sl, [r0]
 800affa:	4650      	mov	r0, sl
 800affc:	f7f5 f8e8 	bl	80001d0 <strlen>
 800b000:	2300      	movs	r3, #0
 800b002:	930a      	str	r3, [sp, #40]	; 0x28
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	9305      	str	r3, [sp, #20]
 800b008:	f8d8 3000 	ldr.w	r3, [r8]
 800b00c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b010:	3307      	adds	r3, #7
 800b012:	f023 0307 	bic.w	r3, r3, #7
 800b016:	f103 0208 	add.w	r2, r3, #8
 800b01a:	f8c8 2000 	str.w	r2, [r8]
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b026:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b02a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b02e:	9307      	str	r3, [sp, #28]
 800b030:	f8cd 8018 	str.w	r8, [sp, #24]
 800b034:	ee08 0a10 	vmov	s16, r0
 800b038:	4b9f      	ldr	r3, [pc, #636]	; (800b2b8 <_printf_float+0x2dc>)
 800b03a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b03e:	f04f 32ff 	mov.w	r2, #4294967295
 800b042:	f7f5 fd73 	bl	8000b2c <__aeabi_dcmpun>
 800b046:	bb88      	cbnz	r0, 800b0ac <_printf_float+0xd0>
 800b048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b04c:	4b9a      	ldr	r3, [pc, #616]	; (800b2b8 <_printf_float+0x2dc>)
 800b04e:	f04f 32ff 	mov.w	r2, #4294967295
 800b052:	f7f5 fd4d 	bl	8000af0 <__aeabi_dcmple>
 800b056:	bb48      	cbnz	r0, 800b0ac <_printf_float+0xd0>
 800b058:	2200      	movs	r2, #0
 800b05a:	2300      	movs	r3, #0
 800b05c:	4640      	mov	r0, r8
 800b05e:	4649      	mov	r1, r9
 800b060:	f7f5 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800b064:	b110      	cbz	r0, 800b06c <_printf_float+0x90>
 800b066:	232d      	movs	r3, #45	; 0x2d
 800b068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b06c:	4b93      	ldr	r3, [pc, #588]	; (800b2bc <_printf_float+0x2e0>)
 800b06e:	4894      	ldr	r0, [pc, #592]	; (800b2c0 <_printf_float+0x2e4>)
 800b070:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b074:	bf94      	ite	ls
 800b076:	4698      	movls	r8, r3
 800b078:	4680      	movhi	r8, r0
 800b07a:	2303      	movs	r3, #3
 800b07c:	6123      	str	r3, [r4, #16]
 800b07e:	9b05      	ldr	r3, [sp, #20]
 800b080:	f023 0204 	bic.w	r2, r3, #4
 800b084:	6022      	str	r2, [r4, #0]
 800b086:	f04f 0900 	mov.w	r9, #0
 800b08a:	9700      	str	r7, [sp, #0]
 800b08c:	4633      	mov	r3, r6
 800b08e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b090:	4621      	mov	r1, r4
 800b092:	4628      	mov	r0, r5
 800b094:	f000 f9d8 	bl	800b448 <_printf_common>
 800b098:	3001      	adds	r0, #1
 800b09a:	f040 8090 	bne.w	800b1be <_printf_float+0x1e2>
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a2:	b00d      	add	sp, #52	; 0x34
 800b0a4:	ecbd 8b02 	vpop	{d8}
 800b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ac:	4642      	mov	r2, r8
 800b0ae:	464b      	mov	r3, r9
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	f7f5 fd3a 	bl	8000b2c <__aeabi_dcmpun>
 800b0b8:	b140      	cbz	r0, 800b0cc <_printf_float+0xf0>
 800b0ba:	464b      	mov	r3, r9
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	bfbc      	itt	lt
 800b0c0:	232d      	movlt	r3, #45	; 0x2d
 800b0c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0c6:	487f      	ldr	r0, [pc, #508]	; (800b2c4 <_printf_float+0x2e8>)
 800b0c8:	4b7f      	ldr	r3, [pc, #508]	; (800b2c8 <_printf_float+0x2ec>)
 800b0ca:	e7d1      	b.n	800b070 <_printf_float+0x94>
 800b0cc:	6863      	ldr	r3, [r4, #4]
 800b0ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b0d2:	9206      	str	r2, [sp, #24]
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	d13f      	bne.n	800b158 <_printf_float+0x17c>
 800b0d8:	2306      	movs	r3, #6
 800b0da:	6063      	str	r3, [r4, #4]
 800b0dc:	9b05      	ldr	r3, [sp, #20]
 800b0de:	6861      	ldr	r1, [r4, #4]
 800b0e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	ab0a      	add	r3, sp, #40	; 0x28
 800b0ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b0ee:	ab09      	add	r3, sp, #36	; 0x24
 800b0f0:	ec49 8b10 	vmov	d0, r8, r9
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	6022      	str	r2, [r4, #0]
 800b0f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f7ff fecd 	bl	800ae9c <__cvt>
 800b102:	9b06      	ldr	r3, [sp, #24]
 800b104:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b106:	2b47      	cmp	r3, #71	; 0x47
 800b108:	4680      	mov	r8, r0
 800b10a:	d108      	bne.n	800b11e <_printf_float+0x142>
 800b10c:	1cc8      	adds	r0, r1, #3
 800b10e:	db02      	blt.n	800b116 <_printf_float+0x13a>
 800b110:	6863      	ldr	r3, [r4, #4]
 800b112:	4299      	cmp	r1, r3
 800b114:	dd41      	ble.n	800b19a <_printf_float+0x1be>
 800b116:	f1ab 0b02 	sub.w	fp, fp, #2
 800b11a:	fa5f fb8b 	uxtb.w	fp, fp
 800b11e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b122:	d820      	bhi.n	800b166 <_printf_float+0x18a>
 800b124:	3901      	subs	r1, #1
 800b126:	465a      	mov	r2, fp
 800b128:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b12c:	9109      	str	r1, [sp, #36]	; 0x24
 800b12e:	f7ff ff17 	bl	800af60 <__exponent>
 800b132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b134:	1813      	adds	r3, r2, r0
 800b136:	2a01      	cmp	r2, #1
 800b138:	4681      	mov	r9, r0
 800b13a:	6123      	str	r3, [r4, #16]
 800b13c:	dc02      	bgt.n	800b144 <_printf_float+0x168>
 800b13e:	6822      	ldr	r2, [r4, #0]
 800b140:	07d2      	lsls	r2, r2, #31
 800b142:	d501      	bpl.n	800b148 <_printf_float+0x16c>
 800b144:	3301      	adds	r3, #1
 800b146:	6123      	str	r3, [r4, #16]
 800b148:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d09c      	beq.n	800b08a <_printf_float+0xae>
 800b150:	232d      	movs	r3, #45	; 0x2d
 800b152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b156:	e798      	b.n	800b08a <_printf_float+0xae>
 800b158:	9a06      	ldr	r2, [sp, #24]
 800b15a:	2a47      	cmp	r2, #71	; 0x47
 800b15c:	d1be      	bne.n	800b0dc <_printf_float+0x100>
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1bc      	bne.n	800b0dc <_printf_float+0x100>
 800b162:	2301      	movs	r3, #1
 800b164:	e7b9      	b.n	800b0da <_printf_float+0xfe>
 800b166:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b16a:	d118      	bne.n	800b19e <_printf_float+0x1c2>
 800b16c:	2900      	cmp	r1, #0
 800b16e:	6863      	ldr	r3, [r4, #4]
 800b170:	dd0b      	ble.n	800b18a <_printf_float+0x1ae>
 800b172:	6121      	str	r1, [r4, #16]
 800b174:	b913      	cbnz	r3, 800b17c <_printf_float+0x1a0>
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	07d0      	lsls	r0, r2, #31
 800b17a:	d502      	bpl.n	800b182 <_printf_float+0x1a6>
 800b17c:	3301      	adds	r3, #1
 800b17e:	440b      	add	r3, r1
 800b180:	6123      	str	r3, [r4, #16]
 800b182:	65a1      	str	r1, [r4, #88]	; 0x58
 800b184:	f04f 0900 	mov.w	r9, #0
 800b188:	e7de      	b.n	800b148 <_printf_float+0x16c>
 800b18a:	b913      	cbnz	r3, 800b192 <_printf_float+0x1b6>
 800b18c:	6822      	ldr	r2, [r4, #0]
 800b18e:	07d2      	lsls	r2, r2, #31
 800b190:	d501      	bpl.n	800b196 <_printf_float+0x1ba>
 800b192:	3302      	adds	r3, #2
 800b194:	e7f4      	b.n	800b180 <_printf_float+0x1a4>
 800b196:	2301      	movs	r3, #1
 800b198:	e7f2      	b.n	800b180 <_printf_float+0x1a4>
 800b19a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a0:	4299      	cmp	r1, r3
 800b1a2:	db05      	blt.n	800b1b0 <_printf_float+0x1d4>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	6121      	str	r1, [r4, #16]
 800b1a8:	07d8      	lsls	r0, r3, #31
 800b1aa:	d5ea      	bpl.n	800b182 <_printf_float+0x1a6>
 800b1ac:	1c4b      	adds	r3, r1, #1
 800b1ae:	e7e7      	b.n	800b180 <_printf_float+0x1a4>
 800b1b0:	2900      	cmp	r1, #0
 800b1b2:	bfd4      	ite	le
 800b1b4:	f1c1 0202 	rsble	r2, r1, #2
 800b1b8:	2201      	movgt	r2, #1
 800b1ba:	4413      	add	r3, r2
 800b1bc:	e7e0      	b.n	800b180 <_printf_float+0x1a4>
 800b1be:	6823      	ldr	r3, [r4, #0]
 800b1c0:	055a      	lsls	r2, r3, #21
 800b1c2:	d407      	bmi.n	800b1d4 <_printf_float+0x1f8>
 800b1c4:	6923      	ldr	r3, [r4, #16]
 800b1c6:	4642      	mov	r2, r8
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	47b8      	blx	r7
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d12c      	bne.n	800b22c <_printf_float+0x250>
 800b1d2:	e764      	b.n	800b09e <_printf_float+0xc2>
 800b1d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b1d8:	f240 80e0 	bls.w	800b39c <_printf_float+0x3c0>
 800b1dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f7f5 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d034      	beq.n	800b256 <_printf_float+0x27a>
 800b1ec:	4a37      	ldr	r2, [pc, #220]	; (800b2cc <_printf_float+0x2f0>)
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	4631      	mov	r1, r6
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	47b8      	blx	r7
 800b1f6:	3001      	adds	r0, #1
 800b1f8:	f43f af51 	beq.w	800b09e <_printf_float+0xc2>
 800b1fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b200:	429a      	cmp	r2, r3
 800b202:	db02      	blt.n	800b20a <_printf_float+0x22e>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	07d8      	lsls	r0, r3, #31
 800b208:	d510      	bpl.n	800b22c <_printf_float+0x250>
 800b20a:	ee18 3a10 	vmov	r3, s16
 800b20e:	4652      	mov	r2, sl
 800b210:	4631      	mov	r1, r6
 800b212:	4628      	mov	r0, r5
 800b214:	47b8      	blx	r7
 800b216:	3001      	adds	r0, #1
 800b218:	f43f af41 	beq.w	800b09e <_printf_float+0xc2>
 800b21c:	f04f 0800 	mov.w	r8, #0
 800b220:	f104 091a 	add.w	r9, r4, #26
 800b224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b226:	3b01      	subs	r3, #1
 800b228:	4543      	cmp	r3, r8
 800b22a:	dc09      	bgt.n	800b240 <_printf_float+0x264>
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	079b      	lsls	r3, r3, #30
 800b230:	f100 8105 	bmi.w	800b43e <_printf_float+0x462>
 800b234:	68e0      	ldr	r0, [r4, #12]
 800b236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b238:	4298      	cmp	r0, r3
 800b23a:	bfb8      	it	lt
 800b23c:	4618      	movlt	r0, r3
 800b23e:	e730      	b.n	800b0a2 <_printf_float+0xc6>
 800b240:	2301      	movs	r3, #1
 800b242:	464a      	mov	r2, r9
 800b244:	4631      	mov	r1, r6
 800b246:	4628      	mov	r0, r5
 800b248:	47b8      	blx	r7
 800b24a:	3001      	adds	r0, #1
 800b24c:	f43f af27 	beq.w	800b09e <_printf_float+0xc2>
 800b250:	f108 0801 	add.w	r8, r8, #1
 800b254:	e7e6      	b.n	800b224 <_printf_float+0x248>
 800b256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b258:	2b00      	cmp	r3, #0
 800b25a:	dc39      	bgt.n	800b2d0 <_printf_float+0x2f4>
 800b25c:	4a1b      	ldr	r2, [pc, #108]	; (800b2cc <_printf_float+0x2f0>)
 800b25e:	2301      	movs	r3, #1
 800b260:	4631      	mov	r1, r6
 800b262:	4628      	mov	r0, r5
 800b264:	47b8      	blx	r7
 800b266:	3001      	adds	r0, #1
 800b268:	f43f af19 	beq.w	800b09e <_printf_float+0xc2>
 800b26c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b270:	4313      	orrs	r3, r2
 800b272:	d102      	bne.n	800b27a <_printf_float+0x29e>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	07d9      	lsls	r1, r3, #31
 800b278:	d5d8      	bpl.n	800b22c <_printf_float+0x250>
 800b27a:	ee18 3a10 	vmov	r3, s16
 800b27e:	4652      	mov	r2, sl
 800b280:	4631      	mov	r1, r6
 800b282:	4628      	mov	r0, r5
 800b284:	47b8      	blx	r7
 800b286:	3001      	adds	r0, #1
 800b288:	f43f af09 	beq.w	800b09e <_printf_float+0xc2>
 800b28c:	f04f 0900 	mov.w	r9, #0
 800b290:	f104 0a1a 	add.w	sl, r4, #26
 800b294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b296:	425b      	negs	r3, r3
 800b298:	454b      	cmp	r3, r9
 800b29a:	dc01      	bgt.n	800b2a0 <_printf_float+0x2c4>
 800b29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b29e:	e792      	b.n	800b1c6 <_printf_float+0x1ea>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	4652      	mov	r2, sl
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	47b8      	blx	r7
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	f43f aef7 	beq.w	800b09e <_printf_float+0xc2>
 800b2b0:	f109 0901 	add.w	r9, r9, #1
 800b2b4:	e7ee      	b.n	800b294 <_printf_float+0x2b8>
 800b2b6:	bf00      	nop
 800b2b8:	7fefffff 	.word	0x7fefffff
 800b2bc:	0800dd54 	.word	0x0800dd54
 800b2c0:	0800dd58 	.word	0x0800dd58
 800b2c4:	0800dd60 	.word	0x0800dd60
 800b2c8:	0800dd5c 	.word	0x0800dd5c
 800b2cc:	0800dd64 	.word	0x0800dd64
 800b2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	bfa8      	it	ge
 800b2d8:	461a      	movge	r2, r3
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	4691      	mov	r9, r2
 800b2de:	dc37      	bgt.n	800b350 <_printf_float+0x374>
 800b2e0:	f04f 0b00 	mov.w	fp, #0
 800b2e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2e8:	f104 021a 	add.w	r2, r4, #26
 800b2ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2ee:	9305      	str	r3, [sp, #20]
 800b2f0:	eba3 0309 	sub.w	r3, r3, r9
 800b2f4:	455b      	cmp	r3, fp
 800b2f6:	dc33      	bgt.n	800b360 <_printf_float+0x384>
 800b2f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	db3b      	blt.n	800b378 <_printf_float+0x39c>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	07da      	lsls	r2, r3, #31
 800b304:	d438      	bmi.n	800b378 <_printf_float+0x39c>
 800b306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b308:	9b05      	ldr	r3, [sp, #20]
 800b30a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	eba2 0901 	sub.w	r9, r2, r1
 800b312:	4599      	cmp	r9, r3
 800b314:	bfa8      	it	ge
 800b316:	4699      	movge	r9, r3
 800b318:	f1b9 0f00 	cmp.w	r9, #0
 800b31c:	dc35      	bgt.n	800b38a <_printf_float+0x3ae>
 800b31e:	f04f 0800 	mov.w	r8, #0
 800b322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b326:	f104 0a1a 	add.w	sl, r4, #26
 800b32a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b32e:	1a9b      	subs	r3, r3, r2
 800b330:	eba3 0309 	sub.w	r3, r3, r9
 800b334:	4543      	cmp	r3, r8
 800b336:	f77f af79 	ble.w	800b22c <_printf_float+0x250>
 800b33a:	2301      	movs	r3, #1
 800b33c:	4652      	mov	r2, sl
 800b33e:	4631      	mov	r1, r6
 800b340:	4628      	mov	r0, r5
 800b342:	47b8      	blx	r7
 800b344:	3001      	adds	r0, #1
 800b346:	f43f aeaa 	beq.w	800b09e <_printf_float+0xc2>
 800b34a:	f108 0801 	add.w	r8, r8, #1
 800b34e:	e7ec      	b.n	800b32a <_printf_float+0x34e>
 800b350:	4613      	mov	r3, r2
 800b352:	4631      	mov	r1, r6
 800b354:	4642      	mov	r2, r8
 800b356:	4628      	mov	r0, r5
 800b358:	47b8      	blx	r7
 800b35a:	3001      	adds	r0, #1
 800b35c:	d1c0      	bne.n	800b2e0 <_printf_float+0x304>
 800b35e:	e69e      	b.n	800b09e <_printf_float+0xc2>
 800b360:	2301      	movs	r3, #1
 800b362:	4631      	mov	r1, r6
 800b364:	4628      	mov	r0, r5
 800b366:	9205      	str	r2, [sp, #20]
 800b368:	47b8      	blx	r7
 800b36a:	3001      	adds	r0, #1
 800b36c:	f43f ae97 	beq.w	800b09e <_printf_float+0xc2>
 800b370:	9a05      	ldr	r2, [sp, #20]
 800b372:	f10b 0b01 	add.w	fp, fp, #1
 800b376:	e7b9      	b.n	800b2ec <_printf_float+0x310>
 800b378:	ee18 3a10 	vmov	r3, s16
 800b37c:	4652      	mov	r2, sl
 800b37e:	4631      	mov	r1, r6
 800b380:	4628      	mov	r0, r5
 800b382:	47b8      	blx	r7
 800b384:	3001      	adds	r0, #1
 800b386:	d1be      	bne.n	800b306 <_printf_float+0x32a>
 800b388:	e689      	b.n	800b09e <_printf_float+0xc2>
 800b38a:	9a05      	ldr	r2, [sp, #20]
 800b38c:	464b      	mov	r3, r9
 800b38e:	4442      	add	r2, r8
 800b390:	4631      	mov	r1, r6
 800b392:	4628      	mov	r0, r5
 800b394:	47b8      	blx	r7
 800b396:	3001      	adds	r0, #1
 800b398:	d1c1      	bne.n	800b31e <_printf_float+0x342>
 800b39a:	e680      	b.n	800b09e <_printf_float+0xc2>
 800b39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b39e:	2a01      	cmp	r2, #1
 800b3a0:	dc01      	bgt.n	800b3a6 <_printf_float+0x3ca>
 800b3a2:	07db      	lsls	r3, r3, #31
 800b3a4:	d538      	bpl.n	800b418 <_printf_float+0x43c>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	4642      	mov	r2, r8
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	47b8      	blx	r7
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	f43f ae74 	beq.w	800b09e <_printf_float+0xc2>
 800b3b6:	ee18 3a10 	vmov	r3, s16
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f43f ae6b 	beq.w	800b09e <_printf_float+0xc2>
 800b3c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f7f5 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3d4:	b9d8      	cbnz	r0, 800b40e <_printf_float+0x432>
 800b3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d8:	f108 0201 	add.w	r2, r8, #1
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	4631      	mov	r1, r6
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	47b8      	blx	r7
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d10e      	bne.n	800b406 <_printf_float+0x42a>
 800b3e8:	e659      	b.n	800b09e <_printf_float+0xc2>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4652      	mov	r2, sl
 800b3ee:	4631      	mov	r1, r6
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	47b8      	blx	r7
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	f43f ae52 	beq.w	800b09e <_printf_float+0xc2>
 800b3fa:	f108 0801 	add.w	r8, r8, #1
 800b3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b400:	3b01      	subs	r3, #1
 800b402:	4543      	cmp	r3, r8
 800b404:	dcf1      	bgt.n	800b3ea <_printf_float+0x40e>
 800b406:	464b      	mov	r3, r9
 800b408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b40c:	e6dc      	b.n	800b1c8 <_printf_float+0x1ec>
 800b40e:	f04f 0800 	mov.w	r8, #0
 800b412:	f104 0a1a 	add.w	sl, r4, #26
 800b416:	e7f2      	b.n	800b3fe <_printf_float+0x422>
 800b418:	2301      	movs	r3, #1
 800b41a:	4642      	mov	r2, r8
 800b41c:	e7df      	b.n	800b3de <_printf_float+0x402>
 800b41e:	2301      	movs	r3, #1
 800b420:	464a      	mov	r2, r9
 800b422:	4631      	mov	r1, r6
 800b424:	4628      	mov	r0, r5
 800b426:	47b8      	blx	r7
 800b428:	3001      	adds	r0, #1
 800b42a:	f43f ae38 	beq.w	800b09e <_printf_float+0xc2>
 800b42e:	f108 0801 	add.w	r8, r8, #1
 800b432:	68e3      	ldr	r3, [r4, #12]
 800b434:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b436:	1a5b      	subs	r3, r3, r1
 800b438:	4543      	cmp	r3, r8
 800b43a:	dcf0      	bgt.n	800b41e <_printf_float+0x442>
 800b43c:	e6fa      	b.n	800b234 <_printf_float+0x258>
 800b43e:	f04f 0800 	mov.w	r8, #0
 800b442:	f104 0919 	add.w	r9, r4, #25
 800b446:	e7f4      	b.n	800b432 <_printf_float+0x456>

0800b448 <_printf_common>:
 800b448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b44c:	4616      	mov	r6, r2
 800b44e:	4699      	mov	r9, r3
 800b450:	688a      	ldr	r2, [r1, #8]
 800b452:	690b      	ldr	r3, [r1, #16]
 800b454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b458:	4293      	cmp	r3, r2
 800b45a:	bfb8      	it	lt
 800b45c:	4613      	movlt	r3, r2
 800b45e:	6033      	str	r3, [r6, #0]
 800b460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b464:	4607      	mov	r7, r0
 800b466:	460c      	mov	r4, r1
 800b468:	b10a      	cbz	r2, 800b46e <_printf_common+0x26>
 800b46a:	3301      	adds	r3, #1
 800b46c:	6033      	str	r3, [r6, #0]
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	0699      	lsls	r1, r3, #26
 800b472:	bf42      	ittt	mi
 800b474:	6833      	ldrmi	r3, [r6, #0]
 800b476:	3302      	addmi	r3, #2
 800b478:	6033      	strmi	r3, [r6, #0]
 800b47a:	6825      	ldr	r5, [r4, #0]
 800b47c:	f015 0506 	ands.w	r5, r5, #6
 800b480:	d106      	bne.n	800b490 <_printf_common+0x48>
 800b482:	f104 0a19 	add.w	sl, r4, #25
 800b486:	68e3      	ldr	r3, [r4, #12]
 800b488:	6832      	ldr	r2, [r6, #0]
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	42ab      	cmp	r3, r5
 800b48e:	dc26      	bgt.n	800b4de <_printf_common+0x96>
 800b490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b494:	1e13      	subs	r3, r2, #0
 800b496:	6822      	ldr	r2, [r4, #0]
 800b498:	bf18      	it	ne
 800b49a:	2301      	movne	r3, #1
 800b49c:	0692      	lsls	r2, r2, #26
 800b49e:	d42b      	bmi.n	800b4f8 <_printf_common+0xb0>
 800b4a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	47c0      	blx	r8
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	d01e      	beq.n	800b4ec <_printf_common+0xa4>
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	68e5      	ldr	r5, [r4, #12]
 800b4b2:	6832      	ldr	r2, [r6, #0]
 800b4b4:	f003 0306 	and.w	r3, r3, #6
 800b4b8:	2b04      	cmp	r3, #4
 800b4ba:	bf08      	it	eq
 800b4bc:	1aad      	subeq	r5, r5, r2
 800b4be:	68a3      	ldr	r3, [r4, #8]
 800b4c0:	6922      	ldr	r2, [r4, #16]
 800b4c2:	bf0c      	ite	eq
 800b4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4c8:	2500      	movne	r5, #0
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	bfc4      	itt	gt
 800b4ce:	1a9b      	subgt	r3, r3, r2
 800b4d0:	18ed      	addgt	r5, r5, r3
 800b4d2:	2600      	movs	r6, #0
 800b4d4:	341a      	adds	r4, #26
 800b4d6:	42b5      	cmp	r5, r6
 800b4d8:	d11a      	bne.n	800b510 <_printf_common+0xc8>
 800b4da:	2000      	movs	r0, #0
 800b4dc:	e008      	b.n	800b4f0 <_printf_common+0xa8>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	4652      	mov	r2, sl
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	4638      	mov	r0, r7
 800b4e6:	47c0      	blx	r8
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	d103      	bne.n	800b4f4 <_printf_common+0xac>
 800b4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f4:	3501      	adds	r5, #1
 800b4f6:	e7c6      	b.n	800b486 <_printf_common+0x3e>
 800b4f8:	18e1      	adds	r1, r4, r3
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	2030      	movs	r0, #48	; 0x30
 800b4fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b502:	4422      	add	r2, r4
 800b504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b50c:	3302      	adds	r3, #2
 800b50e:	e7c7      	b.n	800b4a0 <_printf_common+0x58>
 800b510:	2301      	movs	r3, #1
 800b512:	4622      	mov	r2, r4
 800b514:	4649      	mov	r1, r9
 800b516:	4638      	mov	r0, r7
 800b518:	47c0      	blx	r8
 800b51a:	3001      	adds	r0, #1
 800b51c:	d0e6      	beq.n	800b4ec <_printf_common+0xa4>
 800b51e:	3601      	adds	r6, #1
 800b520:	e7d9      	b.n	800b4d6 <_printf_common+0x8e>
	...

0800b524 <_printf_i>:
 800b524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b528:	460c      	mov	r4, r1
 800b52a:	4691      	mov	r9, r2
 800b52c:	7e27      	ldrb	r7, [r4, #24]
 800b52e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b530:	2f78      	cmp	r7, #120	; 0x78
 800b532:	4680      	mov	r8, r0
 800b534:	469a      	mov	sl, r3
 800b536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b53a:	d807      	bhi.n	800b54c <_printf_i+0x28>
 800b53c:	2f62      	cmp	r7, #98	; 0x62
 800b53e:	d80a      	bhi.n	800b556 <_printf_i+0x32>
 800b540:	2f00      	cmp	r7, #0
 800b542:	f000 80d8 	beq.w	800b6f6 <_printf_i+0x1d2>
 800b546:	2f58      	cmp	r7, #88	; 0x58
 800b548:	f000 80a3 	beq.w	800b692 <_printf_i+0x16e>
 800b54c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b554:	e03a      	b.n	800b5cc <_printf_i+0xa8>
 800b556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b55a:	2b15      	cmp	r3, #21
 800b55c:	d8f6      	bhi.n	800b54c <_printf_i+0x28>
 800b55e:	a001      	add	r0, pc, #4	; (adr r0, 800b564 <_printf_i+0x40>)
 800b560:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b564:	0800b5bd 	.word	0x0800b5bd
 800b568:	0800b5d1 	.word	0x0800b5d1
 800b56c:	0800b54d 	.word	0x0800b54d
 800b570:	0800b54d 	.word	0x0800b54d
 800b574:	0800b54d 	.word	0x0800b54d
 800b578:	0800b54d 	.word	0x0800b54d
 800b57c:	0800b5d1 	.word	0x0800b5d1
 800b580:	0800b54d 	.word	0x0800b54d
 800b584:	0800b54d 	.word	0x0800b54d
 800b588:	0800b54d 	.word	0x0800b54d
 800b58c:	0800b54d 	.word	0x0800b54d
 800b590:	0800b6dd 	.word	0x0800b6dd
 800b594:	0800b601 	.word	0x0800b601
 800b598:	0800b6bf 	.word	0x0800b6bf
 800b59c:	0800b54d 	.word	0x0800b54d
 800b5a0:	0800b54d 	.word	0x0800b54d
 800b5a4:	0800b6ff 	.word	0x0800b6ff
 800b5a8:	0800b54d 	.word	0x0800b54d
 800b5ac:	0800b601 	.word	0x0800b601
 800b5b0:	0800b54d 	.word	0x0800b54d
 800b5b4:	0800b54d 	.word	0x0800b54d
 800b5b8:	0800b6c7 	.word	0x0800b6c7
 800b5bc:	680b      	ldr	r3, [r1, #0]
 800b5be:	1d1a      	adds	r2, r3, #4
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	600a      	str	r2, [r1, #0]
 800b5c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e0a3      	b.n	800b718 <_printf_i+0x1f4>
 800b5d0:	6825      	ldr	r5, [r4, #0]
 800b5d2:	6808      	ldr	r0, [r1, #0]
 800b5d4:	062e      	lsls	r6, r5, #24
 800b5d6:	f100 0304 	add.w	r3, r0, #4
 800b5da:	d50a      	bpl.n	800b5f2 <_printf_i+0xce>
 800b5dc:	6805      	ldr	r5, [r0, #0]
 800b5de:	600b      	str	r3, [r1, #0]
 800b5e0:	2d00      	cmp	r5, #0
 800b5e2:	da03      	bge.n	800b5ec <_printf_i+0xc8>
 800b5e4:	232d      	movs	r3, #45	; 0x2d
 800b5e6:	426d      	negs	r5, r5
 800b5e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ec:	485e      	ldr	r0, [pc, #376]	; (800b768 <_printf_i+0x244>)
 800b5ee:	230a      	movs	r3, #10
 800b5f0:	e019      	b.n	800b626 <_printf_i+0x102>
 800b5f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5f6:	6805      	ldr	r5, [r0, #0]
 800b5f8:	600b      	str	r3, [r1, #0]
 800b5fa:	bf18      	it	ne
 800b5fc:	b22d      	sxthne	r5, r5
 800b5fe:	e7ef      	b.n	800b5e0 <_printf_i+0xbc>
 800b600:	680b      	ldr	r3, [r1, #0]
 800b602:	6825      	ldr	r5, [r4, #0]
 800b604:	1d18      	adds	r0, r3, #4
 800b606:	6008      	str	r0, [r1, #0]
 800b608:	0628      	lsls	r0, r5, #24
 800b60a:	d501      	bpl.n	800b610 <_printf_i+0xec>
 800b60c:	681d      	ldr	r5, [r3, #0]
 800b60e:	e002      	b.n	800b616 <_printf_i+0xf2>
 800b610:	0669      	lsls	r1, r5, #25
 800b612:	d5fb      	bpl.n	800b60c <_printf_i+0xe8>
 800b614:	881d      	ldrh	r5, [r3, #0]
 800b616:	4854      	ldr	r0, [pc, #336]	; (800b768 <_printf_i+0x244>)
 800b618:	2f6f      	cmp	r7, #111	; 0x6f
 800b61a:	bf0c      	ite	eq
 800b61c:	2308      	moveq	r3, #8
 800b61e:	230a      	movne	r3, #10
 800b620:	2100      	movs	r1, #0
 800b622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b626:	6866      	ldr	r6, [r4, #4]
 800b628:	60a6      	str	r6, [r4, #8]
 800b62a:	2e00      	cmp	r6, #0
 800b62c:	bfa2      	ittt	ge
 800b62e:	6821      	ldrge	r1, [r4, #0]
 800b630:	f021 0104 	bicge.w	r1, r1, #4
 800b634:	6021      	strge	r1, [r4, #0]
 800b636:	b90d      	cbnz	r5, 800b63c <_printf_i+0x118>
 800b638:	2e00      	cmp	r6, #0
 800b63a:	d04d      	beq.n	800b6d8 <_printf_i+0x1b4>
 800b63c:	4616      	mov	r6, r2
 800b63e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b642:	fb03 5711 	mls	r7, r3, r1, r5
 800b646:	5dc7      	ldrb	r7, [r0, r7]
 800b648:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b64c:	462f      	mov	r7, r5
 800b64e:	42bb      	cmp	r3, r7
 800b650:	460d      	mov	r5, r1
 800b652:	d9f4      	bls.n	800b63e <_printf_i+0x11a>
 800b654:	2b08      	cmp	r3, #8
 800b656:	d10b      	bne.n	800b670 <_printf_i+0x14c>
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	07df      	lsls	r7, r3, #31
 800b65c:	d508      	bpl.n	800b670 <_printf_i+0x14c>
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	6861      	ldr	r1, [r4, #4]
 800b662:	4299      	cmp	r1, r3
 800b664:	bfde      	ittt	le
 800b666:	2330      	movle	r3, #48	; 0x30
 800b668:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b66c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b670:	1b92      	subs	r2, r2, r6
 800b672:	6122      	str	r2, [r4, #16]
 800b674:	f8cd a000 	str.w	sl, [sp]
 800b678:	464b      	mov	r3, r9
 800b67a:	aa03      	add	r2, sp, #12
 800b67c:	4621      	mov	r1, r4
 800b67e:	4640      	mov	r0, r8
 800b680:	f7ff fee2 	bl	800b448 <_printf_common>
 800b684:	3001      	adds	r0, #1
 800b686:	d14c      	bne.n	800b722 <_printf_i+0x1fe>
 800b688:	f04f 30ff 	mov.w	r0, #4294967295
 800b68c:	b004      	add	sp, #16
 800b68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b692:	4835      	ldr	r0, [pc, #212]	; (800b768 <_printf_i+0x244>)
 800b694:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	680e      	ldr	r6, [r1, #0]
 800b69c:	061f      	lsls	r7, r3, #24
 800b69e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b6a2:	600e      	str	r6, [r1, #0]
 800b6a4:	d514      	bpl.n	800b6d0 <_printf_i+0x1ac>
 800b6a6:	07d9      	lsls	r1, r3, #31
 800b6a8:	bf44      	itt	mi
 800b6aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ae:	6023      	strmi	r3, [r4, #0]
 800b6b0:	b91d      	cbnz	r5, 800b6ba <_printf_i+0x196>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	f023 0320 	bic.w	r3, r3, #32
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	2310      	movs	r3, #16
 800b6bc:	e7b0      	b.n	800b620 <_printf_i+0xfc>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	f043 0320 	orr.w	r3, r3, #32
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	2378      	movs	r3, #120	; 0x78
 800b6c8:	4828      	ldr	r0, [pc, #160]	; (800b76c <_printf_i+0x248>)
 800b6ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6ce:	e7e3      	b.n	800b698 <_printf_i+0x174>
 800b6d0:	065e      	lsls	r6, r3, #25
 800b6d2:	bf48      	it	mi
 800b6d4:	b2ad      	uxthmi	r5, r5
 800b6d6:	e7e6      	b.n	800b6a6 <_printf_i+0x182>
 800b6d8:	4616      	mov	r6, r2
 800b6da:	e7bb      	b.n	800b654 <_printf_i+0x130>
 800b6dc:	680b      	ldr	r3, [r1, #0]
 800b6de:	6826      	ldr	r6, [r4, #0]
 800b6e0:	6960      	ldr	r0, [r4, #20]
 800b6e2:	1d1d      	adds	r5, r3, #4
 800b6e4:	600d      	str	r5, [r1, #0]
 800b6e6:	0635      	lsls	r5, r6, #24
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	d501      	bpl.n	800b6f0 <_printf_i+0x1cc>
 800b6ec:	6018      	str	r0, [r3, #0]
 800b6ee:	e002      	b.n	800b6f6 <_printf_i+0x1d2>
 800b6f0:	0671      	lsls	r1, r6, #25
 800b6f2:	d5fb      	bpl.n	800b6ec <_printf_i+0x1c8>
 800b6f4:	8018      	strh	r0, [r3, #0]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	6123      	str	r3, [r4, #16]
 800b6fa:	4616      	mov	r6, r2
 800b6fc:	e7ba      	b.n	800b674 <_printf_i+0x150>
 800b6fe:	680b      	ldr	r3, [r1, #0]
 800b700:	1d1a      	adds	r2, r3, #4
 800b702:	600a      	str	r2, [r1, #0]
 800b704:	681e      	ldr	r6, [r3, #0]
 800b706:	6862      	ldr	r2, [r4, #4]
 800b708:	2100      	movs	r1, #0
 800b70a:	4630      	mov	r0, r6
 800b70c:	f7f4 fd68 	bl	80001e0 <memchr>
 800b710:	b108      	cbz	r0, 800b716 <_printf_i+0x1f2>
 800b712:	1b80      	subs	r0, r0, r6
 800b714:	6060      	str	r0, [r4, #4]
 800b716:	6863      	ldr	r3, [r4, #4]
 800b718:	6123      	str	r3, [r4, #16]
 800b71a:	2300      	movs	r3, #0
 800b71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b720:	e7a8      	b.n	800b674 <_printf_i+0x150>
 800b722:	6923      	ldr	r3, [r4, #16]
 800b724:	4632      	mov	r2, r6
 800b726:	4649      	mov	r1, r9
 800b728:	4640      	mov	r0, r8
 800b72a:	47d0      	blx	sl
 800b72c:	3001      	adds	r0, #1
 800b72e:	d0ab      	beq.n	800b688 <_printf_i+0x164>
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	079b      	lsls	r3, r3, #30
 800b734:	d413      	bmi.n	800b75e <_printf_i+0x23a>
 800b736:	68e0      	ldr	r0, [r4, #12]
 800b738:	9b03      	ldr	r3, [sp, #12]
 800b73a:	4298      	cmp	r0, r3
 800b73c:	bfb8      	it	lt
 800b73e:	4618      	movlt	r0, r3
 800b740:	e7a4      	b.n	800b68c <_printf_i+0x168>
 800b742:	2301      	movs	r3, #1
 800b744:	4632      	mov	r2, r6
 800b746:	4649      	mov	r1, r9
 800b748:	4640      	mov	r0, r8
 800b74a:	47d0      	blx	sl
 800b74c:	3001      	adds	r0, #1
 800b74e:	d09b      	beq.n	800b688 <_printf_i+0x164>
 800b750:	3501      	adds	r5, #1
 800b752:	68e3      	ldr	r3, [r4, #12]
 800b754:	9903      	ldr	r1, [sp, #12]
 800b756:	1a5b      	subs	r3, r3, r1
 800b758:	42ab      	cmp	r3, r5
 800b75a:	dcf2      	bgt.n	800b742 <_printf_i+0x21e>
 800b75c:	e7eb      	b.n	800b736 <_printf_i+0x212>
 800b75e:	2500      	movs	r5, #0
 800b760:	f104 0619 	add.w	r6, r4, #25
 800b764:	e7f5      	b.n	800b752 <_printf_i+0x22e>
 800b766:	bf00      	nop
 800b768:	0800dd66 	.word	0x0800dd66
 800b76c:	0800dd77 	.word	0x0800dd77

0800b770 <siprintf>:
 800b770:	b40e      	push	{r1, r2, r3}
 800b772:	b500      	push	{lr}
 800b774:	b09c      	sub	sp, #112	; 0x70
 800b776:	ab1d      	add	r3, sp, #116	; 0x74
 800b778:	9002      	str	r0, [sp, #8]
 800b77a:	9006      	str	r0, [sp, #24]
 800b77c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b780:	4809      	ldr	r0, [pc, #36]	; (800b7a8 <siprintf+0x38>)
 800b782:	9107      	str	r1, [sp, #28]
 800b784:	9104      	str	r1, [sp, #16]
 800b786:	4909      	ldr	r1, [pc, #36]	; (800b7ac <siprintf+0x3c>)
 800b788:	f853 2b04 	ldr.w	r2, [r3], #4
 800b78c:	9105      	str	r1, [sp, #20]
 800b78e:	6800      	ldr	r0, [r0, #0]
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	a902      	add	r1, sp, #8
 800b794:	f001 fb24 	bl	800cde0 <_svfiprintf_r>
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]
 800b79e:	b01c      	add	sp, #112	; 0x70
 800b7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7a4:	b003      	add	sp, #12
 800b7a6:	4770      	bx	lr
 800b7a8:	20000014 	.word	0x20000014
 800b7ac:	ffff0208 	.word	0xffff0208

0800b7b0 <quorem>:
 800b7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	6903      	ldr	r3, [r0, #16]
 800b7b6:	690c      	ldr	r4, [r1, #16]
 800b7b8:	42a3      	cmp	r3, r4
 800b7ba:	4607      	mov	r7, r0
 800b7bc:	f2c0 8081 	blt.w	800b8c2 <quorem+0x112>
 800b7c0:	3c01      	subs	r4, #1
 800b7c2:	f101 0814 	add.w	r8, r1, #20
 800b7c6:	f100 0514 	add.w	r5, r0, #20
 800b7ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7e8:	d331      	bcc.n	800b84e <quorem+0x9e>
 800b7ea:	f04f 0e00 	mov.w	lr, #0
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	46ac      	mov	ip, r5
 800b7f2:	46f2      	mov	sl, lr
 800b7f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7f8:	b293      	uxth	r3, r2
 800b7fa:	fb06 e303 	mla	r3, r6, r3, lr
 800b7fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b802:	b29b      	uxth	r3, r3
 800b804:	ebaa 0303 	sub.w	r3, sl, r3
 800b808:	0c12      	lsrs	r2, r2, #16
 800b80a:	f8dc a000 	ldr.w	sl, [ip]
 800b80e:	fb06 e202 	mla	r2, r6, r2, lr
 800b812:	fa13 f38a 	uxtah	r3, r3, sl
 800b816:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b81a:	fa1f fa82 	uxth.w	sl, r2
 800b81e:	f8dc 2000 	ldr.w	r2, [ip]
 800b822:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b826:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b830:	4581      	cmp	r9, r0
 800b832:	f84c 3b04 	str.w	r3, [ip], #4
 800b836:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b83a:	d2db      	bcs.n	800b7f4 <quorem+0x44>
 800b83c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b840:	b92b      	cbnz	r3, 800b84e <quorem+0x9e>
 800b842:	9b01      	ldr	r3, [sp, #4]
 800b844:	3b04      	subs	r3, #4
 800b846:	429d      	cmp	r5, r3
 800b848:	461a      	mov	r2, r3
 800b84a:	d32e      	bcc.n	800b8aa <quorem+0xfa>
 800b84c:	613c      	str	r4, [r7, #16]
 800b84e:	4638      	mov	r0, r7
 800b850:	f001 f8b0 	bl	800c9b4 <__mcmp>
 800b854:	2800      	cmp	r0, #0
 800b856:	db24      	blt.n	800b8a2 <quorem+0xf2>
 800b858:	3601      	adds	r6, #1
 800b85a:	4628      	mov	r0, r5
 800b85c:	f04f 0c00 	mov.w	ip, #0
 800b860:	f858 2b04 	ldr.w	r2, [r8], #4
 800b864:	f8d0 e000 	ldr.w	lr, [r0]
 800b868:	b293      	uxth	r3, r2
 800b86a:	ebac 0303 	sub.w	r3, ip, r3
 800b86e:	0c12      	lsrs	r2, r2, #16
 800b870:	fa13 f38e 	uxtah	r3, r3, lr
 800b874:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b878:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b882:	45c1      	cmp	r9, r8
 800b884:	f840 3b04 	str.w	r3, [r0], #4
 800b888:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b88c:	d2e8      	bcs.n	800b860 <quorem+0xb0>
 800b88e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b896:	b922      	cbnz	r2, 800b8a2 <quorem+0xf2>
 800b898:	3b04      	subs	r3, #4
 800b89a:	429d      	cmp	r5, r3
 800b89c:	461a      	mov	r2, r3
 800b89e:	d30a      	bcc.n	800b8b6 <quorem+0x106>
 800b8a0:	613c      	str	r4, [r7, #16]
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	b003      	add	sp, #12
 800b8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8aa:	6812      	ldr	r2, [r2, #0]
 800b8ac:	3b04      	subs	r3, #4
 800b8ae:	2a00      	cmp	r2, #0
 800b8b0:	d1cc      	bne.n	800b84c <quorem+0x9c>
 800b8b2:	3c01      	subs	r4, #1
 800b8b4:	e7c7      	b.n	800b846 <quorem+0x96>
 800b8b6:	6812      	ldr	r2, [r2, #0]
 800b8b8:	3b04      	subs	r3, #4
 800b8ba:	2a00      	cmp	r2, #0
 800b8bc:	d1f0      	bne.n	800b8a0 <quorem+0xf0>
 800b8be:	3c01      	subs	r4, #1
 800b8c0:	e7eb      	b.n	800b89a <quorem+0xea>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e7ee      	b.n	800b8a4 <quorem+0xf4>
	...

0800b8c8 <_dtoa_r>:
 800b8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8cc:	ed2d 8b02 	vpush	{d8}
 800b8d0:	ec57 6b10 	vmov	r6, r7, d0
 800b8d4:	b095      	sub	sp, #84	; 0x54
 800b8d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b8d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b8dc:	9105      	str	r1, [sp, #20]
 800b8de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b8e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8e8:	b975      	cbnz	r5, 800b908 <_dtoa_r+0x40>
 800b8ea:	2010      	movs	r0, #16
 800b8ec:	f000 fddc 	bl	800c4a8 <malloc>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	6260      	str	r0, [r4, #36]	; 0x24
 800b8f4:	b920      	cbnz	r0, 800b900 <_dtoa_r+0x38>
 800b8f6:	4bb2      	ldr	r3, [pc, #712]	; (800bbc0 <_dtoa_r+0x2f8>)
 800b8f8:	21ea      	movs	r1, #234	; 0xea
 800b8fa:	48b2      	ldr	r0, [pc, #712]	; (800bbc4 <_dtoa_r+0x2fc>)
 800b8fc:	f001 fb80 	bl	800d000 <__assert_func>
 800b900:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b904:	6005      	str	r5, [r0, #0]
 800b906:	60c5      	str	r5, [r0, #12]
 800b908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b90a:	6819      	ldr	r1, [r3, #0]
 800b90c:	b151      	cbz	r1, 800b924 <_dtoa_r+0x5c>
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	604a      	str	r2, [r1, #4]
 800b912:	2301      	movs	r3, #1
 800b914:	4093      	lsls	r3, r2
 800b916:	608b      	str	r3, [r1, #8]
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 fe0d 	bl	800c538 <_Bfree>
 800b91e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	1e3b      	subs	r3, r7, #0
 800b926:	bfb9      	ittee	lt
 800b928:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b92c:	9303      	strlt	r3, [sp, #12]
 800b92e:	2300      	movge	r3, #0
 800b930:	f8c8 3000 	strge.w	r3, [r8]
 800b934:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b938:	4ba3      	ldr	r3, [pc, #652]	; (800bbc8 <_dtoa_r+0x300>)
 800b93a:	bfbc      	itt	lt
 800b93c:	2201      	movlt	r2, #1
 800b93e:	f8c8 2000 	strlt.w	r2, [r8]
 800b942:	ea33 0309 	bics.w	r3, r3, r9
 800b946:	d11b      	bne.n	800b980 <_dtoa_r+0xb8>
 800b948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b94a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b94e:	6013      	str	r3, [r2, #0]
 800b950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b954:	4333      	orrs	r3, r6
 800b956:	f000 857a 	beq.w	800c44e <_dtoa_r+0xb86>
 800b95a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b95c:	b963      	cbnz	r3, 800b978 <_dtoa_r+0xb0>
 800b95e:	4b9b      	ldr	r3, [pc, #620]	; (800bbcc <_dtoa_r+0x304>)
 800b960:	e024      	b.n	800b9ac <_dtoa_r+0xe4>
 800b962:	4b9b      	ldr	r3, [pc, #620]	; (800bbd0 <_dtoa_r+0x308>)
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	3308      	adds	r3, #8
 800b968:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b96a:	6013      	str	r3, [r2, #0]
 800b96c:	9800      	ldr	r0, [sp, #0]
 800b96e:	b015      	add	sp, #84	; 0x54
 800b970:	ecbd 8b02 	vpop	{d8}
 800b974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b978:	4b94      	ldr	r3, [pc, #592]	; (800bbcc <_dtoa_r+0x304>)
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	3303      	adds	r3, #3
 800b97e:	e7f3      	b.n	800b968 <_dtoa_r+0xa0>
 800b980:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b984:	2200      	movs	r2, #0
 800b986:	ec51 0b17 	vmov	r0, r1, d7
 800b98a:	2300      	movs	r3, #0
 800b98c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b990:	f7f5 f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b994:	4680      	mov	r8, r0
 800b996:	b158      	cbz	r0, 800b9b0 <_dtoa_r+0xe8>
 800b998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b99a:	2301      	movs	r3, #1
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 8551 	beq.w	800c448 <_dtoa_r+0xb80>
 800b9a6:	488b      	ldr	r0, [pc, #556]	; (800bbd4 <_dtoa_r+0x30c>)
 800b9a8:	6018      	str	r0, [r3, #0]
 800b9aa:	1e43      	subs	r3, r0, #1
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	e7dd      	b.n	800b96c <_dtoa_r+0xa4>
 800b9b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b9b4:	aa12      	add	r2, sp, #72	; 0x48
 800b9b6:	a913      	add	r1, sp, #76	; 0x4c
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f001 f89f 	bl	800cafc <__d2b>
 800b9be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9c2:	4683      	mov	fp, r0
 800b9c4:	2d00      	cmp	r5, #0
 800b9c6:	d07c      	beq.n	800bac2 <_dtoa_r+0x1fa>
 800b9c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b9ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b9d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b9da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b9de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b9e2:	4b7d      	ldr	r3, [pc, #500]	; (800bbd8 <_dtoa_r+0x310>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	f7f4 fc4d 	bl	8000288 <__aeabi_dsub>
 800b9ee:	a36e      	add	r3, pc, #440	; (adr r3, 800bba8 <_dtoa_r+0x2e0>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f7f4 fe00 	bl	80005f8 <__aeabi_dmul>
 800b9f8:	a36d      	add	r3, pc, #436	; (adr r3, 800bbb0 <_dtoa_r+0x2e8>)
 800b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fe:	f7f4 fc45 	bl	800028c <__adddf3>
 800ba02:	4606      	mov	r6, r0
 800ba04:	4628      	mov	r0, r5
 800ba06:	460f      	mov	r7, r1
 800ba08:	f7f4 fd8c 	bl	8000524 <__aeabi_i2d>
 800ba0c:	a36a      	add	r3, pc, #424	; (adr r3, 800bbb8 <_dtoa_r+0x2f0>)
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	f7f4 fdf1 	bl	80005f8 <__aeabi_dmul>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	f7f4 fc35 	bl	800028c <__adddf3>
 800ba22:	4606      	mov	r6, r0
 800ba24:	460f      	mov	r7, r1
 800ba26:	f7f5 f897 	bl	8000b58 <__aeabi_d2iz>
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4630      	mov	r0, r6
 800ba32:	4639      	mov	r1, r7
 800ba34:	f7f5 f852 	bl	8000adc <__aeabi_dcmplt>
 800ba38:	b148      	cbz	r0, 800ba4e <_dtoa_r+0x186>
 800ba3a:	4650      	mov	r0, sl
 800ba3c:	f7f4 fd72 	bl	8000524 <__aeabi_i2d>
 800ba40:	4632      	mov	r2, r6
 800ba42:	463b      	mov	r3, r7
 800ba44:	f7f5 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba48:	b908      	cbnz	r0, 800ba4e <_dtoa_r+0x186>
 800ba4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba4e:	f1ba 0f16 	cmp.w	sl, #22
 800ba52:	d854      	bhi.n	800bafe <_dtoa_r+0x236>
 800ba54:	4b61      	ldr	r3, [pc, #388]	; (800bbdc <_dtoa_r+0x314>)
 800ba56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba62:	f7f5 f83b 	bl	8000adc <__aeabi_dcmplt>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d04b      	beq.n	800bb02 <_dtoa_r+0x23a>
 800ba6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba6e:	2300      	movs	r3, #0
 800ba70:	930e      	str	r3, [sp, #56]	; 0x38
 800ba72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba74:	1b5d      	subs	r5, r3, r5
 800ba76:	1e6b      	subs	r3, r5, #1
 800ba78:	9304      	str	r3, [sp, #16]
 800ba7a:	bf43      	ittte	mi
 800ba7c:	2300      	movmi	r3, #0
 800ba7e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ba82:	9304      	strmi	r3, [sp, #16]
 800ba84:	f04f 0800 	movpl.w	r8, #0
 800ba88:	f1ba 0f00 	cmp.w	sl, #0
 800ba8c:	db3b      	blt.n	800bb06 <_dtoa_r+0x23e>
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ba94:	4453      	add	r3, sl
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	9306      	str	r3, [sp, #24]
 800ba9c:	9b05      	ldr	r3, [sp, #20]
 800ba9e:	2b09      	cmp	r3, #9
 800baa0:	d869      	bhi.n	800bb76 <_dtoa_r+0x2ae>
 800baa2:	2b05      	cmp	r3, #5
 800baa4:	bfc4      	itt	gt
 800baa6:	3b04      	subgt	r3, #4
 800baa8:	9305      	strgt	r3, [sp, #20]
 800baaa:	9b05      	ldr	r3, [sp, #20]
 800baac:	f1a3 0302 	sub.w	r3, r3, #2
 800bab0:	bfcc      	ite	gt
 800bab2:	2500      	movgt	r5, #0
 800bab4:	2501      	movle	r5, #1
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d869      	bhi.n	800bb8e <_dtoa_r+0x2c6>
 800baba:	e8df f003 	tbb	[pc, r3]
 800babe:	4e2c      	.short	0x4e2c
 800bac0:	5a4c      	.short	0x5a4c
 800bac2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bac6:	441d      	add	r5, r3
 800bac8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bacc:	2b20      	cmp	r3, #32
 800bace:	bfc1      	itttt	gt
 800bad0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bad4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bad8:	fa09 f303 	lslgt.w	r3, r9, r3
 800badc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bae0:	bfda      	itte	le
 800bae2:	f1c3 0320 	rsble	r3, r3, #32
 800bae6:	fa06 f003 	lslle.w	r0, r6, r3
 800baea:	4318      	orrgt	r0, r3
 800baec:	f7f4 fd0a 	bl	8000504 <__aeabi_ui2d>
 800baf0:	2301      	movs	r3, #1
 800baf2:	4606      	mov	r6, r0
 800baf4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800baf8:	3d01      	subs	r5, #1
 800bafa:	9310      	str	r3, [sp, #64]	; 0x40
 800bafc:	e771      	b.n	800b9e2 <_dtoa_r+0x11a>
 800bafe:	2301      	movs	r3, #1
 800bb00:	e7b6      	b.n	800ba70 <_dtoa_r+0x1a8>
 800bb02:	900e      	str	r0, [sp, #56]	; 0x38
 800bb04:	e7b5      	b.n	800ba72 <_dtoa_r+0x1aa>
 800bb06:	f1ca 0300 	rsb	r3, sl, #0
 800bb0a:	9306      	str	r3, [sp, #24]
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	eba8 080a 	sub.w	r8, r8, sl
 800bb12:	930d      	str	r3, [sp, #52]	; 0x34
 800bb14:	e7c2      	b.n	800ba9c <_dtoa_r+0x1d4>
 800bb16:	2300      	movs	r3, #0
 800bb18:	9308      	str	r3, [sp, #32]
 800bb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dc39      	bgt.n	800bb94 <_dtoa_r+0x2cc>
 800bb20:	f04f 0901 	mov.w	r9, #1
 800bb24:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb28:	464b      	mov	r3, r9
 800bb2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bb2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb30:	2200      	movs	r2, #0
 800bb32:	6042      	str	r2, [r0, #4]
 800bb34:	2204      	movs	r2, #4
 800bb36:	f102 0614 	add.w	r6, r2, #20
 800bb3a:	429e      	cmp	r6, r3
 800bb3c:	6841      	ldr	r1, [r0, #4]
 800bb3e:	d92f      	bls.n	800bba0 <_dtoa_r+0x2d8>
 800bb40:	4620      	mov	r0, r4
 800bb42:	f000 fcb9 	bl	800c4b8 <_Balloc>
 800bb46:	9000      	str	r0, [sp, #0]
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d14b      	bne.n	800bbe4 <_dtoa_r+0x31c>
 800bb4c:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <_dtoa_r+0x318>)
 800bb4e:	4602      	mov	r2, r0
 800bb50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb54:	e6d1      	b.n	800b8fa <_dtoa_r+0x32>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e7de      	b.n	800bb18 <_dtoa_r+0x250>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	9308      	str	r3, [sp, #32]
 800bb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb60:	eb0a 0903 	add.w	r9, sl, r3
 800bb64:	f109 0301 	add.w	r3, r9, #1
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	9301      	str	r3, [sp, #4]
 800bb6c:	bfb8      	it	lt
 800bb6e:	2301      	movlt	r3, #1
 800bb70:	e7dd      	b.n	800bb2e <_dtoa_r+0x266>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e7f2      	b.n	800bb5c <_dtoa_r+0x294>
 800bb76:	2501      	movs	r5, #1
 800bb78:	2300      	movs	r3, #0
 800bb7a:	9305      	str	r3, [sp, #20]
 800bb7c:	9508      	str	r5, [sp, #32]
 800bb7e:	f04f 39ff 	mov.w	r9, #4294967295
 800bb82:	2200      	movs	r2, #0
 800bb84:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb88:	2312      	movs	r3, #18
 800bb8a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb8c:	e7cf      	b.n	800bb2e <_dtoa_r+0x266>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	9308      	str	r3, [sp, #32]
 800bb92:	e7f4      	b.n	800bb7e <_dtoa_r+0x2b6>
 800bb94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bb98:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb9c:	464b      	mov	r3, r9
 800bb9e:	e7c6      	b.n	800bb2e <_dtoa_r+0x266>
 800bba0:	3101      	adds	r1, #1
 800bba2:	6041      	str	r1, [r0, #4]
 800bba4:	0052      	lsls	r2, r2, #1
 800bba6:	e7c6      	b.n	800bb36 <_dtoa_r+0x26e>
 800bba8:	636f4361 	.word	0x636f4361
 800bbac:	3fd287a7 	.word	0x3fd287a7
 800bbb0:	8b60c8b3 	.word	0x8b60c8b3
 800bbb4:	3fc68a28 	.word	0x3fc68a28
 800bbb8:	509f79fb 	.word	0x509f79fb
 800bbbc:	3fd34413 	.word	0x3fd34413
 800bbc0:	0800dd95 	.word	0x0800dd95
 800bbc4:	0800ddac 	.word	0x0800ddac
 800bbc8:	7ff00000 	.word	0x7ff00000
 800bbcc:	0800dd91 	.word	0x0800dd91
 800bbd0:	0800dd88 	.word	0x0800dd88
 800bbd4:	0800dd65 	.word	0x0800dd65
 800bbd8:	3ff80000 	.word	0x3ff80000
 800bbdc:	0800dea8 	.word	0x0800dea8
 800bbe0:	0800de0b 	.word	0x0800de0b
 800bbe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbe6:	9a00      	ldr	r2, [sp, #0]
 800bbe8:	601a      	str	r2, [r3, #0]
 800bbea:	9b01      	ldr	r3, [sp, #4]
 800bbec:	2b0e      	cmp	r3, #14
 800bbee:	f200 80ad 	bhi.w	800bd4c <_dtoa_r+0x484>
 800bbf2:	2d00      	cmp	r5, #0
 800bbf4:	f000 80aa 	beq.w	800bd4c <_dtoa_r+0x484>
 800bbf8:	f1ba 0f00 	cmp.w	sl, #0
 800bbfc:	dd36      	ble.n	800bc6c <_dtoa_r+0x3a4>
 800bbfe:	4ac3      	ldr	r2, [pc, #780]	; (800bf0c <_dtoa_r+0x644>)
 800bc00:	f00a 030f 	and.w	r3, sl, #15
 800bc04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc08:	ed93 7b00 	vldr	d7, [r3]
 800bc0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bc10:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bc14:	eeb0 8a47 	vmov.f32	s16, s14
 800bc18:	eef0 8a67 	vmov.f32	s17, s15
 800bc1c:	d016      	beq.n	800bc4c <_dtoa_r+0x384>
 800bc1e:	4bbc      	ldr	r3, [pc, #752]	; (800bf10 <_dtoa_r+0x648>)
 800bc20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc28:	f7f4 fe10 	bl	800084c <__aeabi_ddiv>
 800bc2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc30:	f007 070f 	and.w	r7, r7, #15
 800bc34:	2503      	movs	r5, #3
 800bc36:	4eb6      	ldr	r6, [pc, #728]	; (800bf10 <_dtoa_r+0x648>)
 800bc38:	b957      	cbnz	r7, 800bc50 <_dtoa_r+0x388>
 800bc3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc3e:	ec53 2b18 	vmov	r2, r3, d8
 800bc42:	f7f4 fe03 	bl	800084c <__aeabi_ddiv>
 800bc46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc4a:	e029      	b.n	800bca0 <_dtoa_r+0x3d8>
 800bc4c:	2502      	movs	r5, #2
 800bc4e:	e7f2      	b.n	800bc36 <_dtoa_r+0x36e>
 800bc50:	07f9      	lsls	r1, r7, #31
 800bc52:	d508      	bpl.n	800bc66 <_dtoa_r+0x39e>
 800bc54:	ec51 0b18 	vmov	r0, r1, d8
 800bc58:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc5c:	f7f4 fccc 	bl	80005f8 <__aeabi_dmul>
 800bc60:	ec41 0b18 	vmov	d8, r0, r1
 800bc64:	3501      	adds	r5, #1
 800bc66:	107f      	asrs	r7, r7, #1
 800bc68:	3608      	adds	r6, #8
 800bc6a:	e7e5      	b.n	800bc38 <_dtoa_r+0x370>
 800bc6c:	f000 80a6 	beq.w	800bdbc <_dtoa_r+0x4f4>
 800bc70:	f1ca 0600 	rsb	r6, sl, #0
 800bc74:	4ba5      	ldr	r3, [pc, #660]	; (800bf0c <_dtoa_r+0x644>)
 800bc76:	4fa6      	ldr	r7, [pc, #664]	; (800bf10 <_dtoa_r+0x648>)
 800bc78:	f006 020f 	and.w	r2, r6, #15
 800bc7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc88:	f7f4 fcb6 	bl	80005f8 <__aeabi_dmul>
 800bc8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc90:	1136      	asrs	r6, r6, #4
 800bc92:	2300      	movs	r3, #0
 800bc94:	2502      	movs	r5, #2
 800bc96:	2e00      	cmp	r6, #0
 800bc98:	f040 8085 	bne.w	800bda6 <_dtoa_r+0x4de>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1d2      	bne.n	800bc46 <_dtoa_r+0x37e>
 800bca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f000 808c 	beq.w	800bdc0 <_dtoa_r+0x4f8>
 800bca8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bcac:	4b99      	ldr	r3, [pc, #612]	; (800bf14 <_dtoa_r+0x64c>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	f7f4 ff12 	bl	8000adc <__aeabi_dcmplt>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	f000 8081 	beq.w	800bdc0 <_dtoa_r+0x4f8>
 800bcbe:	9b01      	ldr	r3, [sp, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d07d      	beq.n	800bdc0 <_dtoa_r+0x4f8>
 800bcc4:	f1b9 0f00 	cmp.w	r9, #0
 800bcc8:	dd3c      	ble.n	800bd44 <_dtoa_r+0x47c>
 800bcca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bcce:	9307      	str	r3, [sp, #28]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4b91      	ldr	r3, [pc, #580]	; (800bf18 <_dtoa_r+0x650>)
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	f7f4 fc8e 	bl	80005f8 <__aeabi_dmul>
 800bcdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bce0:	3501      	adds	r5, #1
 800bce2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bce6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bcea:	4628      	mov	r0, r5
 800bcec:	f7f4 fc1a 	bl	8000524 <__aeabi_i2d>
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	f7f4 fc80 	bl	80005f8 <__aeabi_dmul>
 800bcf8:	4b88      	ldr	r3, [pc, #544]	; (800bf1c <_dtoa_r+0x654>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f7f4 fac6 	bl	800028c <__adddf3>
 800bd00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd08:	9303      	str	r3, [sp, #12]
 800bd0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d15c      	bne.n	800bdca <_dtoa_r+0x502>
 800bd10:	4b83      	ldr	r3, [pc, #524]	; (800bf20 <_dtoa_r+0x658>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	4630      	mov	r0, r6
 800bd16:	4639      	mov	r1, r7
 800bd18:	f7f4 fab6 	bl	8000288 <__aeabi_dsub>
 800bd1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd20:	4606      	mov	r6, r0
 800bd22:	460f      	mov	r7, r1
 800bd24:	f7f4 fef8 	bl	8000b18 <__aeabi_dcmpgt>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	f040 8296 	bne.w	800c25a <_dtoa_r+0x992>
 800bd2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd32:	4630      	mov	r0, r6
 800bd34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd38:	4639      	mov	r1, r7
 800bd3a:	f7f4 fecf 	bl	8000adc <__aeabi_dcmplt>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f040 8288 	bne.w	800c254 <_dtoa_r+0x98c>
 800bd44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f2c0 8158 	blt.w	800c004 <_dtoa_r+0x73c>
 800bd54:	f1ba 0f0e 	cmp.w	sl, #14
 800bd58:	f300 8154 	bgt.w	800c004 <_dtoa_r+0x73c>
 800bd5c:	4b6b      	ldr	r3, [pc, #428]	; (800bf0c <_dtoa_r+0x644>)
 800bd5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f280 80e3 	bge.w	800bf34 <_dtoa_r+0x66c>
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f300 80df 	bgt.w	800bf34 <_dtoa_r+0x66c>
 800bd76:	f040 826d 	bne.w	800c254 <_dtoa_r+0x98c>
 800bd7a:	4b69      	ldr	r3, [pc, #420]	; (800bf20 <_dtoa_r+0x658>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4640      	mov	r0, r8
 800bd80:	4649      	mov	r1, r9
 800bd82:	f7f4 fc39 	bl	80005f8 <__aeabi_dmul>
 800bd86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd8a:	f7f4 febb 	bl	8000b04 <__aeabi_dcmpge>
 800bd8e:	9e01      	ldr	r6, [sp, #4]
 800bd90:	4637      	mov	r7, r6
 800bd92:	2800      	cmp	r0, #0
 800bd94:	f040 8243 	bne.w	800c21e <_dtoa_r+0x956>
 800bd98:	9d00      	ldr	r5, [sp, #0]
 800bd9a:	2331      	movs	r3, #49	; 0x31
 800bd9c:	f805 3b01 	strb.w	r3, [r5], #1
 800bda0:	f10a 0a01 	add.w	sl, sl, #1
 800bda4:	e23f      	b.n	800c226 <_dtoa_r+0x95e>
 800bda6:	07f2      	lsls	r2, r6, #31
 800bda8:	d505      	bpl.n	800bdb6 <_dtoa_r+0x4ee>
 800bdaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdae:	f7f4 fc23 	bl	80005f8 <__aeabi_dmul>
 800bdb2:	3501      	adds	r5, #1
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	1076      	asrs	r6, r6, #1
 800bdb8:	3708      	adds	r7, #8
 800bdba:	e76c      	b.n	800bc96 <_dtoa_r+0x3ce>
 800bdbc:	2502      	movs	r5, #2
 800bdbe:	e76f      	b.n	800bca0 <_dtoa_r+0x3d8>
 800bdc0:	9b01      	ldr	r3, [sp, #4]
 800bdc2:	f8cd a01c 	str.w	sl, [sp, #28]
 800bdc6:	930c      	str	r3, [sp, #48]	; 0x30
 800bdc8:	e78d      	b.n	800bce6 <_dtoa_r+0x41e>
 800bdca:	9900      	ldr	r1, [sp, #0]
 800bdcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bdce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdd0:	4b4e      	ldr	r3, [pc, #312]	; (800bf0c <_dtoa_r+0x644>)
 800bdd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdd6:	4401      	add	r1, r0
 800bdd8:	9102      	str	r1, [sp, #8]
 800bdda:	9908      	ldr	r1, [sp, #32]
 800bddc:	eeb0 8a47 	vmov.f32	s16, s14
 800bde0:	eef0 8a67 	vmov.f32	s17, s15
 800bde4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bde8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdec:	2900      	cmp	r1, #0
 800bdee:	d045      	beq.n	800be7c <_dtoa_r+0x5b4>
 800bdf0:	494c      	ldr	r1, [pc, #304]	; (800bf24 <_dtoa_r+0x65c>)
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	f7f4 fd2a 	bl	800084c <__aeabi_ddiv>
 800bdf8:	ec53 2b18 	vmov	r2, r3, d8
 800bdfc:	f7f4 fa44 	bl	8000288 <__aeabi_dsub>
 800be00:	9d00      	ldr	r5, [sp, #0]
 800be02:	ec41 0b18 	vmov	d8, r0, r1
 800be06:	4639      	mov	r1, r7
 800be08:	4630      	mov	r0, r6
 800be0a:	f7f4 fea5 	bl	8000b58 <__aeabi_d2iz>
 800be0e:	900c      	str	r0, [sp, #48]	; 0x30
 800be10:	f7f4 fb88 	bl	8000524 <__aeabi_i2d>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	4630      	mov	r0, r6
 800be1a:	4639      	mov	r1, r7
 800be1c:	f7f4 fa34 	bl	8000288 <__aeabi_dsub>
 800be20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be22:	3330      	adds	r3, #48	; 0x30
 800be24:	f805 3b01 	strb.w	r3, [r5], #1
 800be28:	ec53 2b18 	vmov	r2, r3, d8
 800be2c:	4606      	mov	r6, r0
 800be2e:	460f      	mov	r7, r1
 800be30:	f7f4 fe54 	bl	8000adc <__aeabi_dcmplt>
 800be34:	2800      	cmp	r0, #0
 800be36:	d165      	bne.n	800bf04 <_dtoa_r+0x63c>
 800be38:	4632      	mov	r2, r6
 800be3a:	463b      	mov	r3, r7
 800be3c:	4935      	ldr	r1, [pc, #212]	; (800bf14 <_dtoa_r+0x64c>)
 800be3e:	2000      	movs	r0, #0
 800be40:	f7f4 fa22 	bl	8000288 <__aeabi_dsub>
 800be44:	ec53 2b18 	vmov	r2, r3, d8
 800be48:	f7f4 fe48 	bl	8000adc <__aeabi_dcmplt>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	f040 80b9 	bne.w	800bfc4 <_dtoa_r+0x6fc>
 800be52:	9b02      	ldr	r3, [sp, #8]
 800be54:	429d      	cmp	r5, r3
 800be56:	f43f af75 	beq.w	800bd44 <_dtoa_r+0x47c>
 800be5a:	4b2f      	ldr	r3, [pc, #188]	; (800bf18 <_dtoa_r+0x650>)
 800be5c:	ec51 0b18 	vmov	r0, r1, d8
 800be60:	2200      	movs	r2, #0
 800be62:	f7f4 fbc9 	bl	80005f8 <__aeabi_dmul>
 800be66:	4b2c      	ldr	r3, [pc, #176]	; (800bf18 <_dtoa_r+0x650>)
 800be68:	ec41 0b18 	vmov	d8, r0, r1
 800be6c:	2200      	movs	r2, #0
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	f7f4 fbc1 	bl	80005f8 <__aeabi_dmul>
 800be76:	4606      	mov	r6, r0
 800be78:	460f      	mov	r7, r1
 800be7a:	e7c4      	b.n	800be06 <_dtoa_r+0x53e>
 800be7c:	ec51 0b17 	vmov	r0, r1, d7
 800be80:	f7f4 fbba 	bl	80005f8 <__aeabi_dmul>
 800be84:	9b02      	ldr	r3, [sp, #8]
 800be86:	9d00      	ldr	r5, [sp, #0]
 800be88:	930c      	str	r3, [sp, #48]	; 0x30
 800be8a:	ec41 0b18 	vmov	d8, r0, r1
 800be8e:	4639      	mov	r1, r7
 800be90:	4630      	mov	r0, r6
 800be92:	f7f4 fe61 	bl	8000b58 <__aeabi_d2iz>
 800be96:	9011      	str	r0, [sp, #68]	; 0x44
 800be98:	f7f4 fb44 	bl	8000524 <__aeabi_i2d>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4630      	mov	r0, r6
 800bea2:	4639      	mov	r1, r7
 800bea4:	f7f4 f9f0 	bl	8000288 <__aeabi_dsub>
 800bea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800beaa:	3330      	adds	r3, #48	; 0x30
 800beac:	f805 3b01 	strb.w	r3, [r5], #1
 800beb0:	9b02      	ldr	r3, [sp, #8]
 800beb2:	429d      	cmp	r5, r3
 800beb4:	4606      	mov	r6, r0
 800beb6:	460f      	mov	r7, r1
 800beb8:	f04f 0200 	mov.w	r2, #0
 800bebc:	d134      	bne.n	800bf28 <_dtoa_r+0x660>
 800bebe:	4b19      	ldr	r3, [pc, #100]	; (800bf24 <_dtoa_r+0x65c>)
 800bec0:	ec51 0b18 	vmov	r0, r1, d8
 800bec4:	f7f4 f9e2 	bl	800028c <__adddf3>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	4630      	mov	r0, r6
 800bece:	4639      	mov	r1, r7
 800bed0:	f7f4 fe22 	bl	8000b18 <__aeabi_dcmpgt>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d175      	bne.n	800bfc4 <_dtoa_r+0x6fc>
 800bed8:	ec53 2b18 	vmov	r2, r3, d8
 800bedc:	4911      	ldr	r1, [pc, #68]	; (800bf24 <_dtoa_r+0x65c>)
 800bede:	2000      	movs	r0, #0
 800bee0:	f7f4 f9d2 	bl	8000288 <__aeabi_dsub>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 fdf6 	bl	8000adc <__aeabi_dcmplt>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	f43f af27 	beq.w	800bd44 <_dtoa_r+0x47c>
 800bef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bef8:	1e6b      	subs	r3, r5, #1
 800befa:	930c      	str	r3, [sp, #48]	; 0x30
 800befc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf00:	2b30      	cmp	r3, #48	; 0x30
 800bf02:	d0f8      	beq.n	800bef6 <_dtoa_r+0x62e>
 800bf04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bf08:	e04a      	b.n	800bfa0 <_dtoa_r+0x6d8>
 800bf0a:	bf00      	nop
 800bf0c:	0800dea8 	.word	0x0800dea8
 800bf10:	0800de80 	.word	0x0800de80
 800bf14:	3ff00000 	.word	0x3ff00000
 800bf18:	40240000 	.word	0x40240000
 800bf1c:	401c0000 	.word	0x401c0000
 800bf20:	40140000 	.word	0x40140000
 800bf24:	3fe00000 	.word	0x3fe00000
 800bf28:	4baf      	ldr	r3, [pc, #700]	; (800c1e8 <_dtoa_r+0x920>)
 800bf2a:	f7f4 fb65 	bl	80005f8 <__aeabi_dmul>
 800bf2e:	4606      	mov	r6, r0
 800bf30:	460f      	mov	r7, r1
 800bf32:	e7ac      	b.n	800be8e <_dtoa_r+0x5c6>
 800bf34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf38:	9d00      	ldr	r5, [sp, #0]
 800bf3a:	4642      	mov	r2, r8
 800bf3c:	464b      	mov	r3, r9
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4639      	mov	r1, r7
 800bf42:	f7f4 fc83 	bl	800084c <__aeabi_ddiv>
 800bf46:	f7f4 fe07 	bl	8000b58 <__aeabi_d2iz>
 800bf4a:	9002      	str	r0, [sp, #8]
 800bf4c:	f7f4 faea 	bl	8000524 <__aeabi_i2d>
 800bf50:	4642      	mov	r2, r8
 800bf52:	464b      	mov	r3, r9
 800bf54:	f7f4 fb50 	bl	80005f8 <__aeabi_dmul>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f7f4 f992 	bl	8000288 <__aeabi_dsub>
 800bf64:	9e02      	ldr	r6, [sp, #8]
 800bf66:	9f01      	ldr	r7, [sp, #4]
 800bf68:	3630      	adds	r6, #48	; 0x30
 800bf6a:	f805 6b01 	strb.w	r6, [r5], #1
 800bf6e:	9e00      	ldr	r6, [sp, #0]
 800bf70:	1bae      	subs	r6, r5, r6
 800bf72:	42b7      	cmp	r7, r6
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	d137      	bne.n	800bfea <_dtoa_r+0x722>
 800bf7a:	f7f4 f987 	bl	800028c <__adddf3>
 800bf7e:	4642      	mov	r2, r8
 800bf80:	464b      	mov	r3, r9
 800bf82:	4606      	mov	r6, r0
 800bf84:	460f      	mov	r7, r1
 800bf86:	f7f4 fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 800bf8a:	b9c8      	cbnz	r0, 800bfc0 <_dtoa_r+0x6f8>
 800bf8c:	4642      	mov	r2, r8
 800bf8e:	464b      	mov	r3, r9
 800bf90:	4630      	mov	r0, r6
 800bf92:	4639      	mov	r1, r7
 800bf94:	f7f4 fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf98:	b110      	cbz	r0, 800bfa0 <_dtoa_r+0x6d8>
 800bf9a:	9b02      	ldr	r3, [sp, #8]
 800bf9c:	07d9      	lsls	r1, r3, #31
 800bf9e:	d40f      	bmi.n	800bfc0 <_dtoa_r+0x6f8>
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	4659      	mov	r1, fp
 800bfa4:	f000 fac8 	bl	800c538 <_Bfree>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	702b      	strb	r3, [r5, #0]
 800bfac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfae:	f10a 0001 	add.w	r0, sl, #1
 800bfb2:	6018      	str	r0, [r3, #0]
 800bfb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f43f acd8 	beq.w	800b96c <_dtoa_r+0xa4>
 800bfbc:	601d      	str	r5, [r3, #0]
 800bfbe:	e4d5      	b.n	800b96c <_dtoa_r+0xa4>
 800bfc0:	f8cd a01c 	str.w	sl, [sp, #28]
 800bfc4:	462b      	mov	r3, r5
 800bfc6:	461d      	mov	r5, r3
 800bfc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfcc:	2a39      	cmp	r2, #57	; 0x39
 800bfce:	d108      	bne.n	800bfe2 <_dtoa_r+0x71a>
 800bfd0:	9a00      	ldr	r2, [sp, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d1f7      	bne.n	800bfc6 <_dtoa_r+0x6fe>
 800bfd6:	9a07      	ldr	r2, [sp, #28]
 800bfd8:	9900      	ldr	r1, [sp, #0]
 800bfda:	3201      	adds	r2, #1
 800bfdc:	9207      	str	r2, [sp, #28]
 800bfde:	2230      	movs	r2, #48	; 0x30
 800bfe0:	700a      	strb	r2, [r1, #0]
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	3201      	adds	r2, #1
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	e78c      	b.n	800bf04 <_dtoa_r+0x63c>
 800bfea:	4b7f      	ldr	r3, [pc, #508]	; (800c1e8 <_dtoa_r+0x920>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	2200      	movs	r2, #0
 800bff4:	2300      	movs	r3, #0
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	f7f4 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d09b      	beq.n	800bf3a <_dtoa_r+0x672>
 800c002:	e7cd      	b.n	800bfa0 <_dtoa_r+0x6d8>
 800c004:	9a08      	ldr	r2, [sp, #32]
 800c006:	2a00      	cmp	r2, #0
 800c008:	f000 80c4 	beq.w	800c194 <_dtoa_r+0x8cc>
 800c00c:	9a05      	ldr	r2, [sp, #20]
 800c00e:	2a01      	cmp	r2, #1
 800c010:	f300 80a8 	bgt.w	800c164 <_dtoa_r+0x89c>
 800c014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c016:	2a00      	cmp	r2, #0
 800c018:	f000 80a0 	beq.w	800c15c <_dtoa_r+0x894>
 800c01c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c020:	9e06      	ldr	r6, [sp, #24]
 800c022:	4645      	mov	r5, r8
 800c024:	9a04      	ldr	r2, [sp, #16]
 800c026:	2101      	movs	r1, #1
 800c028:	441a      	add	r2, r3
 800c02a:	4620      	mov	r0, r4
 800c02c:	4498      	add	r8, r3
 800c02e:	9204      	str	r2, [sp, #16]
 800c030:	f000 fb3e 	bl	800c6b0 <__i2b>
 800c034:	4607      	mov	r7, r0
 800c036:	2d00      	cmp	r5, #0
 800c038:	dd0b      	ble.n	800c052 <_dtoa_r+0x78a>
 800c03a:	9b04      	ldr	r3, [sp, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	dd08      	ble.n	800c052 <_dtoa_r+0x78a>
 800c040:	42ab      	cmp	r3, r5
 800c042:	9a04      	ldr	r2, [sp, #16]
 800c044:	bfa8      	it	ge
 800c046:	462b      	movge	r3, r5
 800c048:	eba8 0803 	sub.w	r8, r8, r3
 800c04c:	1aed      	subs	r5, r5, r3
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	9b06      	ldr	r3, [sp, #24]
 800c054:	b1fb      	cbz	r3, 800c096 <_dtoa_r+0x7ce>
 800c056:	9b08      	ldr	r3, [sp, #32]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 809f 	beq.w	800c19c <_dtoa_r+0x8d4>
 800c05e:	2e00      	cmp	r6, #0
 800c060:	dd11      	ble.n	800c086 <_dtoa_r+0x7be>
 800c062:	4639      	mov	r1, r7
 800c064:	4632      	mov	r2, r6
 800c066:	4620      	mov	r0, r4
 800c068:	f000 fbde 	bl	800c828 <__pow5mult>
 800c06c:	465a      	mov	r2, fp
 800c06e:	4601      	mov	r1, r0
 800c070:	4607      	mov	r7, r0
 800c072:	4620      	mov	r0, r4
 800c074:	f000 fb32 	bl	800c6dc <__multiply>
 800c078:	4659      	mov	r1, fp
 800c07a:	9007      	str	r0, [sp, #28]
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fa5b 	bl	800c538 <_Bfree>
 800c082:	9b07      	ldr	r3, [sp, #28]
 800c084:	469b      	mov	fp, r3
 800c086:	9b06      	ldr	r3, [sp, #24]
 800c088:	1b9a      	subs	r2, r3, r6
 800c08a:	d004      	beq.n	800c096 <_dtoa_r+0x7ce>
 800c08c:	4659      	mov	r1, fp
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 fbca 	bl	800c828 <__pow5mult>
 800c094:	4683      	mov	fp, r0
 800c096:	2101      	movs	r1, #1
 800c098:	4620      	mov	r0, r4
 800c09a:	f000 fb09 	bl	800c6b0 <__i2b>
 800c09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	dd7c      	ble.n	800c1a0 <_dtoa_r+0x8d8>
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	4601      	mov	r1, r0
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 fbbc 	bl	800c828 <__pow5mult>
 800c0b0:	9b05      	ldr	r3, [sp, #20]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	dd76      	ble.n	800c1a6 <_dtoa_r+0x8de>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9306      	str	r3, [sp, #24]
 800c0bc:	6933      	ldr	r3, [r6, #16]
 800c0be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0c2:	6918      	ldr	r0, [r3, #16]
 800c0c4:	f000 faa4 	bl	800c610 <__hi0bits>
 800c0c8:	f1c0 0020 	rsb	r0, r0, #32
 800c0cc:	9b04      	ldr	r3, [sp, #16]
 800c0ce:	4418      	add	r0, r3
 800c0d0:	f010 001f 	ands.w	r0, r0, #31
 800c0d4:	f000 8086 	beq.w	800c1e4 <_dtoa_r+0x91c>
 800c0d8:	f1c0 0320 	rsb	r3, r0, #32
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	dd7f      	ble.n	800c1e0 <_dtoa_r+0x918>
 800c0e0:	f1c0 001c 	rsb	r0, r0, #28
 800c0e4:	9b04      	ldr	r3, [sp, #16]
 800c0e6:	4403      	add	r3, r0
 800c0e8:	4480      	add	r8, r0
 800c0ea:	4405      	add	r5, r0
 800c0ec:	9304      	str	r3, [sp, #16]
 800c0ee:	f1b8 0f00 	cmp.w	r8, #0
 800c0f2:	dd05      	ble.n	800c100 <_dtoa_r+0x838>
 800c0f4:	4659      	mov	r1, fp
 800c0f6:	4642      	mov	r2, r8
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 fbef 	bl	800c8dc <__lshift>
 800c0fe:	4683      	mov	fp, r0
 800c100:	9b04      	ldr	r3, [sp, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	dd05      	ble.n	800c112 <_dtoa_r+0x84a>
 800c106:	4631      	mov	r1, r6
 800c108:	461a      	mov	r2, r3
 800c10a:	4620      	mov	r0, r4
 800c10c:	f000 fbe6 	bl	800c8dc <__lshift>
 800c110:	4606      	mov	r6, r0
 800c112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c114:	2b00      	cmp	r3, #0
 800c116:	d069      	beq.n	800c1ec <_dtoa_r+0x924>
 800c118:	4631      	mov	r1, r6
 800c11a:	4658      	mov	r0, fp
 800c11c:	f000 fc4a 	bl	800c9b4 <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	da63      	bge.n	800c1ec <_dtoa_r+0x924>
 800c124:	2300      	movs	r3, #0
 800c126:	4659      	mov	r1, fp
 800c128:	220a      	movs	r2, #10
 800c12a:	4620      	mov	r0, r4
 800c12c:	f000 fa26 	bl	800c57c <__multadd>
 800c130:	9b08      	ldr	r3, [sp, #32]
 800c132:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c136:	4683      	mov	fp, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f000 818f 	beq.w	800c45c <_dtoa_r+0xb94>
 800c13e:	4639      	mov	r1, r7
 800c140:	2300      	movs	r3, #0
 800c142:	220a      	movs	r2, #10
 800c144:	4620      	mov	r0, r4
 800c146:	f000 fa19 	bl	800c57c <__multadd>
 800c14a:	f1b9 0f00 	cmp.w	r9, #0
 800c14e:	4607      	mov	r7, r0
 800c150:	f300 808e 	bgt.w	800c270 <_dtoa_r+0x9a8>
 800c154:	9b05      	ldr	r3, [sp, #20]
 800c156:	2b02      	cmp	r3, #2
 800c158:	dc50      	bgt.n	800c1fc <_dtoa_r+0x934>
 800c15a:	e089      	b.n	800c270 <_dtoa_r+0x9a8>
 800c15c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c15e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c162:	e75d      	b.n	800c020 <_dtoa_r+0x758>
 800c164:	9b01      	ldr	r3, [sp, #4]
 800c166:	1e5e      	subs	r6, r3, #1
 800c168:	9b06      	ldr	r3, [sp, #24]
 800c16a:	42b3      	cmp	r3, r6
 800c16c:	bfbf      	itttt	lt
 800c16e:	9b06      	ldrlt	r3, [sp, #24]
 800c170:	9606      	strlt	r6, [sp, #24]
 800c172:	1af2      	sublt	r2, r6, r3
 800c174:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c176:	bfb6      	itet	lt
 800c178:	189b      	addlt	r3, r3, r2
 800c17a:	1b9e      	subge	r6, r3, r6
 800c17c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	bfb8      	it	lt
 800c182:	2600      	movlt	r6, #0
 800c184:	2b00      	cmp	r3, #0
 800c186:	bfb5      	itete	lt
 800c188:	eba8 0503 	sublt.w	r5, r8, r3
 800c18c:	9b01      	ldrge	r3, [sp, #4]
 800c18e:	2300      	movlt	r3, #0
 800c190:	4645      	movge	r5, r8
 800c192:	e747      	b.n	800c024 <_dtoa_r+0x75c>
 800c194:	9e06      	ldr	r6, [sp, #24]
 800c196:	9f08      	ldr	r7, [sp, #32]
 800c198:	4645      	mov	r5, r8
 800c19a:	e74c      	b.n	800c036 <_dtoa_r+0x76e>
 800c19c:	9a06      	ldr	r2, [sp, #24]
 800c19e:	e775      	b.n	800c08c <_dtoa_r+0x7c4>
 800c1a0:	9b05      	ldr	r3, [sp, #20]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	dc18      	bgt.n	800c1d8 <_dtoa_r+0x910>
 800c1a6:	9b02      	ldr	r3, [sp, #8]
 800c1a8:	b9b3      	cbnz	r3, 800c1d8 <_dtoa_r+0x910>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1b0:	b9a3      	cbnz	r3, 800c1dc <_dtoa_r+0x914>
 800c1b2:	9b03      	ldr	r3, [sp, #12]
 800c1b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1b8:	0d1b      	lsrs	r3, r3, #20
 800c1ba:	051b      	lsls	r3, r3, #20
 800c1bc:	b12b      	cbz	r3, 800c1ca <_dtoa_r+0x902>
 800c1be:	9b04      	ldr	r3, [sp, #16]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	f108 0801 	add.w	r8, r8, #1
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	9306      	str	r3, [sp, #24]
 800c1cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f47f af74 	bne.w	800c0bc <_dtoa_r+0x7f4>
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	e779      	b.n	800c0cc <_dtoa_r+0x804>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	e7f6      	b.n	800c1ca <_dtoa_r+0x902>
 800c1dc:	9b02      	ldr	r3, [sp, #8]
 800c1de:	e7f4      	b.n	800c1ca <_dtoa_r+0x902>
 800c1e0:	d085      	beq.n	800c0ee <_dtoa_r+0x826>
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	301c      	adds	r0, #28
 800c1e6:	e77d      	b.n	800c0e4 <_dtoa_r+0x81c>
 800c1e8:	40240000 	.word	0x40240000
 800c1ec:	9b01      	ldr	r3, [sp, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	dc38      	bgt.n	800c264 <_dtoa_r+0x99c>
 800c1f2:	9b05      	ldr	r3, [sp, #20]
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	dd35      	ble.n	800c264 <_dtoa_r+0x99c>
 800c1f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c1fc:	f1b9 0f00 	cmp.w	r9, #0
 800c200:	d10d      	bne.n	800c21e <_dtoa_r+0x956>
 800c202:	4631      	mov	r1, r6
 800c204:	464b      	mov	r3, r9
 800c206:	2205      	movs	r2, #5
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 f9b7 	bl	800c57c <__multadd>
 800c20e:	4601      	mov	r1, r0
 800c210:	4606      	mov	r6, r0
 800c212:	4658      	mov	r0, fp
 800c214:	f000 fbce 	bl	800c9b4 <__mcmp>
 800c218:	2800      	cmp	r0, #0
 800c21a:	f73f adbd 	bgt.w	800bd98 <_dtoa_r+0x4d0>
 800c21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c220:	9d00      	ldr	r5, [sp, #0]
 800c222:	ea6f 0a03 	mvn.w	sl, r3
 800c226:	f04f 0800 	mov.w	r8, #0
 800c22a:	4631      	mov	r1, r6
 800c22c:	4620      	mov	r0, r4
 800c22e:	f000 f983 	bl	800c538 <_Bfree>
 800c232:	2f00      	cmp	r7, #0
 800c234:	f43f aeb4 	beq.w	800bfa0 <_dtoa_r+0x6d8>
 800c238:	f1b8 0f00 	cmp.w	r8, #0
 800c23c:	d005      	beq.n	800c24a <_dtoa_r+0x982>
 800c23e:	45b8      	cmp	r8, r7
 800c240:	d003      	beq.n	800c24a <_dtoa_r+0x982>
 800c242:	4641      	mov	r1, r8
 800c244:	4620      	mov	r0, r4
 800c246:	f000 f977 	bl	800c538 <_Bfree>
 800c24a:	4639      	mov	r1, r7
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 f973 	bl	800c538 <_Bfree>
 800c252:	e6a5      	b.n	800bfa0 <_dtoa_r+0x6d8>
 800c254:	2600      	movs	r6, #0
 800c256:	4637      	mov	r7, r6
 800c258:	e7e1      	b.n	800c21e <_dtoa_r+0x956>
 800c25a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c25c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c260:	4637      	mov	r7, r6
 800c262:	e599      	b.n	800bd98 <_dtoa_r+0x4d0>
 800c264:	9b08      	ldr	r3, [sp, #32]
 800c266:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f000 80fd 	beq.w	800c46a <_dtoa_r+0xba2>
 800c270:	2d00      	cmp	r5, #0
 800c272:	dd05      	ble.n	800c280 <_dtoa_r+0x9b8>
 800c274:	4639      	mov	r1, r7
 800c276:	462a      	mov	r2, r5
 800c278:	4620      	mov	r0, r4
 800c27a:	f000 fb2f 	bl	800c8dc <__lshift>
 800c27e:	4607      	mov	r7, r0
 800c280:	9b06      	ldr	r3, [sp, #24]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d05c      	beq.n	800c340 <_dtoa_r+0xa78>
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	4620      	mov	r0, r4
 800c28a:	f000 f915 	bl	800c4b8 <_Balloc>
 800c28e:	4605      	mov	r5, r0
 800c290:	b928      	cbnz	r0, 800c29e <_dtoa_r+0x9d6>
 800c292:	4b80      	ldr	r3, [pc, #512]	; (800c494 <_dtoa_r+0xbcc>)
 800c294:	4602      	mov	r2, r0
 800c296:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c29a:	f7ff bb2e 	b.w	800b8fa <_dtoa_r+0x32>
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	3202      	adds	r2, #2
 800c2a2:	0092      	lsls	r2, r2, #2
 800c2a4:	f107 010c 	add.w	r1, r7, #12
 800c2a8:	300c      	adds	r0, #12
 800c2aa:	f7fe fde1 	bl	800ae70 <memcpy>
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f000 fb12 	bl	800c8dc <__lshift>
 800c2b8:	9b00      	ldr	r3, [sp, #0]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	9301      	str	r3, [sp, #4]
 800c2be:	9b00      	ldr	r3, [sp, #0]
 800c2c0:	444b      	add	r3, r9
 800c2c2:	9307      	str	r3, [sp, #28]
 800c2c4:	9b02      	ldr	r3, [sp, #8]
 800c2c6:	f003 0301 	and.w	r3, r3, #1
 800c2ca:	46b8      	mov	r8, r7
 800c2cc:	9306      	str	r3, [sp, #24]
 800c2ce:	4607      	mov	r7, r0
 800c2d0:	9b01      	ldr	r3, [sp, #4]
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	9302      	str	r3, [sp, #8]
 800c2da:	f7ff fa69 	bl	800b7b0 <quorem>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	3330      	adds	r3, #48	; 0x30
 800c2e2:	9004      	str	r0, [sp, #16]
 800c2e4:	4641      	mov	r1, r8
 800c2e6:	4658      	mov	r0, fp
 800c2e8:	9308      	str	r3, [sp, #32]
 800c2ea:	f000 fb63 	bl	800c9b4 <__mcmp>
 800c2ee:	463a      	mov	r2, r7
 800c2f0:	4681      	mov	r9, r0
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f000 fb79 	bl	800c9ec <__mdiff>
 800c2fa:	68c2      	ldr	r2, [r0, #12]
 800c2fc:	9b08      	ldr	r3, [sp, #32]
 800c2fe:	4605      	mov	r5, r0
 800c300:	bb02      	cbnz	r2, 800c344 <_dtoa_r+0xa7c>
 800c302:	4601      	mov	r1, r0
 800c304:	4658      	mov	r0, fp
 800c306:	f000 fb55 	bl	800c9b4 <__mcmp>
 800c30a:	9b08      	ldr	r3, [sp, #32]
 800c30c:	4602      	mov	r2, r0
 800c30e:	4629      	mov	r1, r5
 800c310:	4620      	mov	r0, r4
 800c312:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c316:	f000 f90f 	bl	800c538 <_Bfree>
 800c31a:	9b05      	ldr	r3, [sp, #20]
 800c31c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c31e:	9d01      	ldr	r5, [sp, #4]
 800c320:	ea43 0102 	orr.w	r1, r3, r2
 800c324:	9b06      	ldr	r3, [sp, #24]
 800c326:	430b      	orrs	r3, r1
 800c328:	9b08      	ldr	r3, [sp, #32]
 800c32a:	d10d      	bne.n	800c348 <_dtoa_r+0xa80>
 800c32c:	2b39      	cmp	r3, #57	; 0x39
 800c32e:	d029      	beq.n	800c384 <_dtoa_r+0xabc>
 800c330:	f1b9 0f00 	cmp.w	r9, #0
 800c334:	dd01      	ble.n	800c33a <_dtoa_r+0xa72>
 800c336:	9b04      	ldr	r3, [sp, #16]
 800c338:	3331      	adds	r3, #49	; 0x31
 800c33a:	9a02      	ldr	r2, [sp, #8]
 800c33c:	7013      	strb	r3, [r2, #0]
 800c33e:	e774      	b.n	800c22a <_dtoa_r+0x962>
 800c340:	4638      	mov	r0, r7
 800c342:	e7b9      	b.n	800c2b8 <_dtoa_r+0x9f0>
 800c344:	2201      	movs	r2, #1
 800c346:	e7e2      	b.n	800c30e <_dtoa_r+0xa46>
 800c348:	f1b9 0f00 	cmp.w	r9, #0
 800c34c:	db06      	blt.n	800c35c <_dtoa_r+0xa94>
 800c34e:	9905      	ldr	r1, [sp, #20]
 800c350:	ea41 0909 	orr.w	r9, r1, r9
 800c354:	9906      	ldr	r1, [sp, #24]
 800c356:	ea59 0101 	orrs.w	r1, r9, r1
 800c35a:	d120      	bne.n	800c39e <_dtoa_r+0xad6>
 800c35c:	2a00      	cmp	r2, #0
 800c35e:	ddec      	ble.n	800c33a <_dtoa_r+0xa72>
 800c360:	4659      	mov	r1, fp
 800c362:	2201      	movs	r2, #1
 800c364:	4620      	mov	r0, r4
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	f000 fab8 	bl	800c8dc <__lshift>
 800c36c:	4631      	mov	r1, r6
 800c36e:	4683      	mov	fp, r0
 800c370:	f000 fb20 	bl	800c9b4 <__mcmp>
 800c374:	2800      	cmp	r0, #0
 800c376:	9b01      	ldr	r3, [sp, #4]
 800c378:	dc02      	bgt.n	800c380 <_dtoa_r+0xab8>
 800c37a:	d1de      	bne.n	800c33a <_dtoa_r+0xa72>
 800c37c:	07da      	lsls	r2, r3, #31
 800c37e:	d5dc      	bpl.n	800c33a <_dtoa_r+0xa72>
 800c380:	2b39      	cmp	r3, #57	; 0x39
 800c382:	d1d8      	bne.n	800c336 <_dtoa_r+0xa6e>
 800c384:	9a02      	ldr	r2, [sp, #8]
 800c386:	2339      	movs	r3, #57	; 0x39
 800c388:	7013      	strb	r3, [r2, #0]
 800c38a:	462b      	mov	r3, r5
 800c38c:	461d      	mov	r5, r3
 800c38e:	3b01      	subs	r3, #1
 800c390:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c394:	2a39      	cmp	r2, #57	; 0x39
 800c396:	d050      	beq.n	800c43a <_dtoa_r+0xb72>
 800c398:	3201      	adds	r2, #1
 800c39a:	701a      	strb	r2, [r3, #0]
 800c39c:	e745      	b.n	800c22a <_dtoa_r+0x962>
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	dd03      	ble.n	800c3aa <_dtoa_r+0xae2>
 800c3a2:	2b39      	cmp	r3, #57	; 0x39
 800c3a4:	d0ee      	beq.n	800c384 <_dtoa_r+0xabc>
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	e7c7      	b.n	800c33a <_dtoa_r+0xa72>
 800c3aa:	9a01      	ldr	r2, [sp, #4]
 800c3ac:	9907      	ldr	r1, [sp, #28]
 800c3ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c3b2:	428a      	cmp	r2, r1
 800c3b4:	d02a      	beq.n	800c40c <_dtoa_r+0xb44>
 800c3b6:	4659      	mov	r1, fp
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	220a      	movs	r2, #10
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f000 f8dd 	bl	800c57c <__multadd>
 800c3c2:	45b8      	cmp	r8, r7
 800c3c4:	4683      	mov	fp, r0
 800c3c6:	f04f 0300 	mov.w	r3, #0
 800c3ca:	f04f 020a 	mov.w	r2, #10
 800c3ce:	4641      	mov	r1, r8
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	d107      	bne.n	800c3e4 <_dtoa_r+0xb1c>
 800c3d4:	f000 f8d2 	bl	800c57c <__multadd>
 800c3d8:	4680      	mov	r8, r0
 800c3da:	4607      	mov	r7, r0
 800c3dc:	9b01      	ldr	r3, [sp, #4]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	e775      	b.n	800c2d0 <_dtoa_r+0xa08>
 800c3e4:	f000 f8ca 	bl	800c57c <__multadd>
 800c3e8:	4639      	mov	r1, r7
 800c3ea:	4680      	mov	r8, r0
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	220a      	movs	r2, #10
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f000 f8c3 	bl	800c57c <__multadd>
 800c3f6:	4607      	mov	r7, r0
 800c3f8:	e7f0      	b.n	800c3dc <_dtoa_r+0xb14>
 800c3fa:	f1b9 0f00 	cmp.w	r9, #0
 800c3fe:	9a00      	ldr	r2, [sp, #0]
 800c400:	bfcc      	ite	gt
 800c402:	464d      	movgt	r5, r9
 800c404:	2501      	movle	r5, #1
 800c406:	4415      	add	r5, r2
 800c408:	f04f 0800 	mov.w	r8, #0
 800c40c:	4659      	mov	r1, fp
 800c40e:	2201      	movs	r2, #1
 800c410:	4620      	mov	r0, r4
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	f000 fa62 	bl	800c8dc <__lshift>
 800c418:	4631      	mov	r1, r6
 800c41a:	4683      	mov	fp, r0
 800c41c:	f000 faca 	bl	800c9b4 <__mcmp>
 800c420:	2800      	cmp	r0, #0
 800c422:	dcb2      	bgt.n	800c38a <_dtoa_r+0xac2>
 800c424:	d102      	bne.n	800c42c <_dtoa_r+0xb64>
 800c426:	9b01      	ldr	r3, [sp, #4]
 800c428:	07db      	lsls	r3, r3, #31
 800c42a:	d4ae      	bmi.n	800c38a <_dtoa_r+0xac2>
 800c42c:	462b      	mov	r3, r5
 800c42e:	461d      	mov	r5, r3
 800c430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c434:	2a30      	cmp	r2, #48	; 0x30
 800c436:	d0fa      	beq.n	800c42e <_dtoa_r+0xb66>
 800c438:	e6f7      	b.n	800c22a <_dtoa_r+0x962>
 800c43a:	9a00      	ldr	r2, [sp, #0]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d1a5      	bne.n	800c38c <_dtoa_r+0xac4>
 800c440:	f10a 0a01 	add.w	sl, sl, #1
 800c444:	2331      	movs	r3, #49	; 0x31
 800c446:	e779      	b.n	800c33c <_dtoa_r+0xa74>
 800c448:	4b13      	ldr	r3, [pc, #76]	; (800c498 <_dtoa_r+0xbd0>)
 800c44a:	f7ff baaf 	b.w	800b9ac <_dtoa_r+0xe4>
 800c44e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c450:	2b00      	cmp	r3, #0
 800c452:	f47f aa86 	bne.w	800b962 <_dtoa_r+0x9a>
 800c456:	4b11      	ldr	r3, [pc, #68]	; (800c49c <_dtoa_r+0xbd4>)
 800c458:	f7ff baa8 	b.w	800b9ac <_dtoa_r+0xe4>
 800c45c:	f1b9 0f00 	cmp.w	r9, #0
 800c460:	dc03      	bgt.n	800c46a <_dtoa_r+0xba2>
 800c462:	9b05      	ldr	r3, [sp, #20]
 800c464:	2b02      	cmp	r3, #2
 800c466:	f73f aec9 	bgt.w	800c1fc <_dtoa_r+0x934>
 800c46a:	9d00      	ldr	r5, [sp, #0]
 800c46c:	4631      	mov	r1, r6
 800c46e:	4658      	mov	r0, fp
 800c470:	f7ff f99e 	bl	800b7b0 <quorem>
 800c474:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c478:	f805 3b01 	strb.w	r3, [r5], #1
 800c47c:	9a00      	ldr	r2, [sp, #0]
 800c47e:	1aaa      	subs	r2, r5, r2
 800c480:	4591      	cmp	r9, r2
 800c482:	ddba      	ble.n	800c3fa <_dtoa_r+0xb32>
 800c484:	4659      	mov	r1, fp
 800c486:	2300      	movs	r3, #0
 800c488:	220a      	movs	r2, #10
 800c48a:	4620      	mov	r0, r4
 800c48c:	f000 f876 	bl	800c57c <__multadd>
 800c490:	4683      	mov	fp, r0
 800c492:	e7eb      	b.n	800c46c <_dtoa_r+0xba4>
 800c494:	0800de0b 	.word	0x0800de0b
 800c498:	0800dd64 	.word	0x0800dd64
 800c49c:	0800dd88 	.word	0x0800dd88

0800c4a0 <_localeconv_r>:
 800c4a0:	4800      	ldr	r0, [pc, #0]	; (800c4a4 <_localeconv_r+0x4>)
 800c4a2:	4770      	bx	lr
 800c4a4:	20000168 	.word	0x20000168

0800c4a8 <malloc>:
 800c4a8:	4b02      	ldr	r3, [pc, #8]	; (800c4b4 <malloc+0xc>)
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	6818      	ldr	r0, [r3, #0]
 800c4ae:	f000 bbe1 	b.w	800cc74 <_malloc_r>
 800c4b2:	bf00      	nop
 800c4b4:	20000014 	.word	0x20000014

0800c4b8 <_Balloc>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4bc:	4604      	mov	r4, r0
 800c4be:	460d      	mov	r5, r1
 800c4c0:	b976      	cbnz	r6, 800c4e0 <_Balloc+0x28>
 800c4c2:	2010      	movs	r0, #16
 800c4c4:	f7ff fff0 	bl	800c4a8 <malloc>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	6260      	str	r0, [r4, #36]	; 0x24
 800c4cc:	b920      	cbnz	r0, 800c4d8 <_Balloc+0x20>
 800c4ce:	4b18      	ldr	r3, [pc, #96]	; (800c530 <_Balloc+0x78>)
 800c4d0:	4818      	ldr	r0, [pc, #96]	; (800c534 <_Balloc+0x7c>)
 800c4d2:	2166      	movs	r1, #102	; 0x66
 800c4d4:	f000 fd94 	bl	800d000 <__assert_func>
 800c4d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4dc:	6006      	str	r6, [r0, #0]
 800c4de:	60c6      	str	r6, [r0, #12]
 800c4e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4e2:	68f3      	ldr	r3, [r6, #12]
 800c4e4:	b183      	cbz	r3, 800c508 <_Balloc+0x50>
 800c4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ee:	b9b8      	cbnz	r0, 800c520 <_Balloc+0x68>
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c4f6:	1d72      	adds	r2, r6, #5
 800c4f8:	0092      	lsls	r2, r2, #2
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 fb5a 	bl	800cbb4 <_calloc_r>
 800c500:	b160      	cbz	r0, 800c51c <_Balloc+0x64>
 800c502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c506:	e00e      	b.n	800c526 <_Balloc+0x6e>
 800c508:	2221      	movs	r2, #33	; 0x21
 800c50a:	2104      	movs	r1, #4
 800c50c:	4620      	mov	r0, r4
 800c50e:	f000 fb51 	bl	800cbb4 <_calloc_r>
 800c512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c514:	60f0      	str	r0, [r6, #12]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e4      	bne.n	800c4e6 <_Balloc+0x2e>
 800c51c:	2000      	movs	r0, #0
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	6802      	ldr	r2, [r0, #0]
 800c522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c526:	2300      	movs	r3, #0
 800c528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c52c:	e7f7      	b.n	800c51e <_Balloc+0x66>
 800c52e:	bf00      	nop
 800c530:	0800dd95 	.word	0x0800dd95
 800c534:	0800de1c 	.word	0x0800de1c

0800c538 <_Bfree>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c53c:	4605      	mov	r5, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	b976      	cbnz	r6, 800c560 <_Bfree+0x28>
 800c542:	2010      	movs	r0, #16
 800c544:	f7ff ffb0 	bl	800c4a8 <malloc>
 800c548:	4602      	mov	r2, r0
 800c54a:	6268      	str	r0, [r5, #36]	; 0x24
 800c54c:	b920      	cbnz	r0, 800c558 <_Bfree+0x20>
 800c54e:	4b09      	ldr	r3, [pc, #36]	; (800c574 <_Bfree+0x3c>)
 800c550:	4809      	ldr	r0, [pc, #36]	; (800c578 <_Bfree+0x40>)
 800c552:	218a      	movs	r1, #138	; 0x8a
 800c554:	f000 fd54 	bl	800d000 <__assert_func>
 800c558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c55c:	6006      	str	r6, [r0, #0]
 800c55e:	60c6      	str	r6, [r0, #12]
 800c560:	b13c      	cbz	r4, 800c572 <_Bfree+0x3a>
 800c562:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c564:	6862      	ldr	r2, [r4, #4]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c56c:	6021      	str	r1, [r4, #0]
 800c56e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	0800dd95 	.word	0x0800dd95
 800c578:	0800de1c 	.word	0x0800de1c

0800c57c <__multadd>:
 800c57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c580:	690e      	ldr	r6, [r1, #16]
 800c582:	4607      	mov	r7, r0
 800c584:	4698      	mov	r8, r3
 800c586:	460c      	mov	r4, r1
 800c588:	f101 0014 	add.w	r0, r1, #20
 800c58c:	2300      	movs	r3, #0
 800c58e:	6805      	ldr	r5, [r0, #0]
 800c590:	b2a9      	uxth	r1, r5
 800c592:	fb02 8101 	mla	r1, r2, r1, r8
 800c596:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c59a:	0c2d      	lsrs	r5, r5, #16
 800c59c:	fb02 c505 	mla	r5, r2, r5, ip
 800c5a0:	b289      	uxth	r1, r1
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c5a8:	429e      	cmp	r6, r3
 800c5aa:	f840 1b04 	str.w	r1, [r0], #4
 800c5ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c5b2:	dcec      	bgt.n	800c58e <__multadd+0x12>
 800c5b4:	f1b8 0f00 	cmp.w	r8, #0
 800c5b8:	d022      	beq.n	800c600 <__multadd+0x84>
 800c5ba:	68a3      	ldr	r3, [r4, #8]
 800c5bc:	42b3      	cmp	r3, r6
 800c5be:	dc19      	bgt.n	800c5f4 <__multadd+0x78>
 800c5c0:	6861      	ldr	r1, [r4, #4]
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	3101      	adds	r1, #1
 800c5c6:	f7ff ff77 	bl	800c4b8 <_Balloc>
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	b928      	cbnz	r0, 800c5da <__multadd+0x5e>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <__multadd+0x8c>)
 800c5d2:	480e      	ldr	r0, [pc, #56]	; (800c60c <__multadd+0x90>)
 800c5d4:	21b5      	movs	r1, #181	; 0xb5
 800c5d6:	f000 fd13 	bl	800d000 <__assert_func>
 800c5da:	6922      	ldr	r2, [r4, #16]
 800c5dc:	3202      	adds	r2, #2
 800c5de:	f104 010c 	add.w	r1, r4, #12
 800c5e2:	0092      	lsls	r2, r2, #2
 800c5e4:	300c      	adds	r0, #12
 800c5e6:	f7fe fc43 	bl	800ae70 <memcpy>
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	f7ff ffa3 	bl	800c538 <_Bfree>
 800c5f2:	462c      	mov	r4, r5
 800c5f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c5f8:	3601      	adds	r6, #1
 800c5fa:	f8c3 8014 	str.w	r8, [r3, #20]
 800c5fe:	6126      	str	r6, [r4, #16]
 800c600:	4620      	mov	r0, r4
 800c602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c606:	bf00      	nop
 800c608:	0800de0b 	.word	0x0800de0b
 800c60c:	0800de1c 	.word	0x0800de1c

0800c610 <__hi0bits>:
 800c610:	0c03      	lsrs	r3, r0, #16
 800c612:	041b      	lsls	r3, r3, #16
 800c614:	b9d3      	cbnz	r3, 800c64c <__hi0bits+0x3c>
 800c616:	0400      	lsls	r0, r0, #16
 800c618:	2310      	movs	r3, #16
 800c61a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c61e:	bf04      	itt	eq
 800c620:	0200      	lsleq	r0, r0, #8
 800c622:	3308      	addeq	r3, #8
 800c624:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c628:	bf04      	itt	eq
 800c62a:	0100      	lsleq	r0, r0, #4
 800c62c:	3304      	addeq	r3, #4
 800c62e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c632:	bf04      	itt	eq
 800c634:	0080      	lsleq	r0, r0, #2
 800c636:	3302      	addeq	r3, #2
 800c638:	2800      	cmp	r0, #0
 800c63a:	db05      	blt.n	800c648 <__hi0bits+0x38>
 800c63c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c640:	f103 0301 	add.w	r3, r3, #1
 800c644:	bf08      	it	eq
 800c646:	2320      	moveq	r3, #32
 800c648:	4618      	mov	r0, r3
 800c64a:	4770      	bx	lr
 800c64c:	2300      	movs	r3, #0
 800c64e:	e7e4      	b.n	800c61a <__hi0bits+0xa>

0800c650 <__lo0bits>:
 800c650:	6803      	ldr	r3, [r0, #0]
 800c652:	f013 0207 	ands.w	r2, r3, #7
 800c656:	4601      	mov	r1, r0
 800c658:	d00b      	beq.n	800c672 <__lo0bits+0x22>
 800c65a:	07da      	lsls	r2, r3, #31
 800c65c:	d424      	bmi.n	800c6a8 <__lo0bits+0x58>
 800c65e:	0798      	lsls	r0, r3, #30
 800c660:	bf49      	itett	mi
 800c662:	085b      	lsrmi	r3, r3, #1
 800c664:	089b      	lsrpl	r3, r3, #2
 800c666:	2001      	movmi	r0, #1
 800c668:	600b      	strmi	r3, [r1, #0]
 800c66a:	bf5c      	itt	pl
 800c66c:	600b      	strpl	r3, [r1, #0]
 800c66e:	2002      	movpl	r0, #2
 800c670:	4770      	bx	lr
 800c672:	b298      	uxth	r0, r3
 800c674:	b9b0      	cbnz	r0, 800c6a4 <__lo0bits+0x54>
 800c676:	0c1b      	lsrs	r3, r3, #16
 800c678:	2010      	movs	r0, #16
 800c67a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c67e:	bf04      	itt	eq
 800c680:	0a1b      	lsreq	r3, r3, #8
 800c682:	3008      	addeq	r0, #8
 800c684:	071a      	lsls	r2, r3, #28
 800c686:	bf04      	itt	eq
 800c688:	091b      	lsreq	r3, r3, #4
 800c68a:	3004      	addeq	r0, #4
 800c68c:	079a      	lsls	r2, r3, #30
 800c68e:	bf04      	itt	eq
 800c690:	089b      	lsreq	r3, r3, #2
 800c692:	3002      	addeq	r0, #2
 800c694:	07da      	lsls	r2, r3, #31
 800c696:	d403      	bmi.n	800c6a0 <__lo0bits+0x50>
 800c698:	085b      	lsrs	r3, r3, #1
 800c69a:	f100 0001 	add.w	r0, r0, #1
 800c69e:	d005      	beq.n	800c6ac <__lo0bits+0x5c>
 800c6a0:	600b      	str	r3, [r1, #0]
 800c6a2:	4770      	bx	lr
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	e7e8      	b.n	800c67a <__lo0bits+0x2a>
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	4770      	bx	lr
 800c6ac:	2020      	movs	r0, #32
 800c6ae:	4770      	bx	lr

0800c6b0 <__i2b>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	2101      	movs	r1, #1
 800c6b6:	f7ff feff 	bl	800c4b8 <_Balloc>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	b928      	cbnz	r0, 800c6ca <__i2b+0x1a>
 800c6be:	4b05      	ldr	r3, [pc, #20]	; (800c6d4 <__i2b+0x24>)
 800c6c0:	4805      	ldr	r0, [pc, #20]	; (800c6d8 <__i2b+0x28>)
 800c6c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c6c6:	f000 fc9b 	bl	800d000 <__assert_func>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	6144      	str	r4, [r0, #20]
 800c6ce:	6103      	str	r3, [r0, #16]
 800c6d0:	bd10      	pop	{r4, pc}
 800c6d2:	bf00      	nop
 800c6d4:	0800de0b 	.word	0x0800de0b
 800c6d8:	0800de1c 	.word	0x0800de1c

0800c6dc <__multiply>:
 800c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	4614      	mov	r4, r2
 800c6e2:	690a      	ldr	r2, [r1, #16]
 800c6e4:	6923      	ldr	r3, [r4, #16]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	bfb8      	it	lt
 800c6ea:	460b      	movlt	r3, r1
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	bfbc      	itt	lt
 800c6f0:	4625      	movlt	r5, r4
 800c6f2:	461c      	movlt	r4, r3
 800c6f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c6f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c6fc:	68ab      	ldr	r3, [r5, #8]
 800c6fe:	6869      	ldr	r1, [r5, #4]
 800c700:	eb0a 0709 	add.w	r7, sl, r9
 800c704:	42bb      	cmp	r3, r7
 800c706:	b085      	sub	sp, #20
 800c708:	bfb8      	it	lt
 800c70a:	3101      	addlt	r1, #1
 800c70c:	f7ff fed4 	bl	800c4b8 <_Balloc>
 800c710:	b930      	cbnz	r0, 800c720 <__multiply+0x44>
 800c712:	4602      	mov	r2, r0
 800c714:	4b42      	ldr	r3, [pc, #264]	; (800c820 <__multiply+0x144>)
 800c716:	4843      	ldr	r0, [pc, #268]	; (800c824 <__multiply+0x148>)
 800c718:	f240 115d 	movw	r1, #349	; 0x15d
 800c71c:	f000 fc70 	bl	800d000 <__assert_func>
 800c720:	f100 0614 	add.w	r6, r0, #20
 800c724:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c728:	4633      	mov	r3, r6
 800c72a:	2200      	movs	r2, #0
 800c72c:	4543      	cmp	r3, r8
 800c72e:	d31e      	bcc.n	800c76e <__multiply+0x92>
 800c730:	f105 0c14 	add.w	ip, r5, #20
 800c734:	f104 0314 	add.w	r3, r4, #20
 800c738:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c73c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c740:	9202      	str	r2, [sp, #8]
 800c742:	ebac 0205 	sub.w	r2, ip, r5
 800c746:	3a15      	subs	r2, #21
 800c748:	f022 0203 	bic.w	r2, r2, #3
 800c74c:	3204      	adds	r2, #4
 800c74e:	f105 0115 	add.w	r1, r5, #21
 800c752:	458c      	cmp	ip, r1
 800c754:	bf38      	it	cc
 800c756:	2204      	movcc	r2, #4
 800c758:	9201      	str	r2, [sp, #4]
 800c75a:	9a02      	ldr	r2, [sp, #8]
 800c75c:	9303      	str	r3, [sp, #12]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d808      	bhi.n	800c774 <__multiply+0x98>
 800c762:	2f00      	cmp	r7, #0
 800c764:	dc55      	bgt.n	800c812 <__multiply+0x136>
 800c766:	6107      	str	r7, [r0, #16]
 800c768:	b005      	add	sp, #20
 800c76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c76e:	f843 2b04 	str.w	r2, [r3], #4
 800c772:	e7db      	b.n	800c72c <__multiply+0x50>
 800c774:	f8b3 a000 	ldrh.w	sl, [r3]
 800c778:	f1ba 0f00 	cmp.w	sl, #0
 800c77c:	d020      	beq.n	800c7c0 <__multiply+0xe4>
 800c77e:	f105 0e14 	add.w	lr, r5, #20
 800c782:	46b1      	mov	r9, r6
 800c784:	2200      	movs	r2, #0
 800c786:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c78a:	f8d9 b000 	ldr.w	fp, [r9]
 800c78e:	b2a1      	uxth	r1, r4
 800c790:	fa1f fb8b 	uxth.w	fp, fp
 800c794:	fb0a b101 	mla	r1, sl, r1, fp
 800c798:	4411      	add	r1, r2
 800c79a:	f8d9 2000 	ldr.w	r2, [r9]
 800c79e:	0c24      	lsrs	r4, r4, #16
 800c7a0:	0c12      	lsrs	r2, r2, #16
 800c7a2:	fb0a 2404 	mla	r4, sl, r4, r2
 800c7a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c7aa:	b289      	uxth	r1, r1
 800c7ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c7b0:	45f4      	cmp	ip, lr
 800c7b2:	f849 1b04 	str.w	r1, [r9], #4
 800c7b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c7ba:	d8e4      	bhi.n	800c786 <__multiply+0xaa>
 800c7bc:	9901      	ldr	r1, [sp, #4]
 800c7be:	5072      	str	r2, [r6, r1]
 800c7c0:	9a03      	ldr	r2, [sp, #12]
 800c7c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	f1b9 0f00 	cmp.w	r9, #0
 800c7cc:	d01f      	beq.n	800c80e <__multiply+0x132>
 800c7ce:	6834      	ldr	r4, [r6, #0]
 800c7d0:	f105 0114 	add.w	r1, r5, #20
 800c7d4:	46b6      	mov	lr, r6
 800c7d6:	f04f 0a00 	mov.w	sl, #0
 800c7da:	880a      	ldrh	r2, [r1, #0]
 800c7dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c7e0:	fb09 b202 	mla	r2, r9, r2, fp
 800c7e4:	4492      	add	sl, r2
 800c7e6:	b2a4      	uxth	r4, r4
 800c7e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c7ec:	f84e 4b04 	str.w	r4, [lr], #4
 800c7f0:	f851 4b04 	ldr.w	r4, [r1], #4
 800c7f4:	f8be 2000 	ldrh.w	r2, [lr]
 800c7f8:	0c24      	lsrs	r4, r4, #16
 800c7fa:	fb09 2404 	mla	r4, r9, r4, r2
 800c7fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c802:	458c      	cmp	ip, r1
 800c804:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c808:	d8e7      	bhi.n	800c7da <__multiply+0xfe>
 800c80a:	9a01      	ldr	r2, [sp, #4]
 800c80c:	50b4      	str	r4, [r6, r2]
 800c80e:	3604      	adds	r6, #4
 800c810:	e7a3      	b.n	800c75a <__multiply+0x7e>
 800c812:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1a5      	bne.n	800c766 <__multiply+0x8a>
 800c81a:	3f01      	subs	r7, #1
 800c81c:	e7a1      	b.n	800c762 <__multiply+0x86>
 800c81e:	bf00      	nop
 800c820:	0800de0b 	.word	0x0800de0b
 800c824:	0800de1c 	.word	0x0800de1c

0800c828 <__pow5mult>:
 800c828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c82c:	4615      	mov	r5, r2
 800c82e:	f012 0203 	ands.w	r2, r2, #3
 800c832:	4606      	mov	r6, r0
 800c834:	460f      	mov	r7, r1
 800c836:	d007      	beq.n	800c848 <__pow5mult+0x20>
 800c838:	4c25      	ldr	r4, [pc, #148]	; (800c8d0 <__pow5mult+0xa8>)
 800c83a:	3a01      	subs	r2, #1
 800c83c:	2300      	movs	r3, #0
 800c83e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c842:	f7ff fe9b 	bl	800c57c <__multadd>
 800c846:	4607      	mov	r7, r0
 800c848:	10ad      	asrs	r5, r5, #2
 800c84a:	d03d      	beq.n	800c8c8 <__pow5mult+0xa0>
 800c84c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c84e:	b97c      	cbnz	r4, 800c870 <__pow5mult+0x48>
 800c850:	2010      	movs	r0, #16
 800c852:	f7ff fe29 	bl	800c4a8 <malloc>
 800c856:	4602      	mov	r2, r0
 800c858:	6270      	str	r0, [r6, #36]	; 0x24
 800c85a:	b928      	cbnz	r0, 800c868 <__pow5mult+0x40>
 800c85c:	4b1d      	ldr	r3, [pc, #116]	; (800c8d4 <__pow5mult+0xac>)
 800c85e:	481e      	ldr	r0, [pc, #120]	; (800c8d8 <__pow5mult+0xb0>)
 800c860:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c864:	f000 fbcc 	bl	800d000 <__assert_func>
 800c868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c86c:	6004      	str	r4, [r0, #0]
 800c86e:	60c4      	str	r4, [r0, #12]
 800c870:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c878:	b94c      	cbnz	r4, 800c88e <__pow5mult+0x66>
 800c87a:	f240 2171 	movw	r1, #625	; 0x271
 800c87e:	4630      	mov	r0, r6
 800c880:	f7ff ff16 	bl	800c6b0 <__i2b>
 800c884:	2300      	movs	r3, #0
 800c886:	f8c8 0008 	str.w	r0, [r8, #8]
 800c88a:	4604      	mov	r4, r0
 800c88c:	6003      	str	r3, [r0, #0]
 800c88e:	f04f 0900 	mov.w	r9, #0
 800c892:	07eb      	lsls	r3, r5, #31
 800c894:	d50a      	bpl.n	800c8ac <__pow5mult+0x84>
 800c896:	4639      	mov	r1, r7
 800c898:	4622      	mov	r2, r4
 800c89a:	4630      	mov	r0, r6
 800c89c:	f7ff ff1e 	bl	800c6dc <__multiply>
 800c8a0:	4639      	mov	r1, r7
 800c8a2:	4680      	mov	r8, r0
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	f7ff fe47 	bl	800c538 <_Bfree>
 800c8aa:	4647      	mov	r7, r8
 800c8ac:	106d      	asrs	r5, r5, #1
 800c8ae:	d00b      	beq.n	800c8c8 <__pow5mult+0xa0>
 800c8b0:	6820      	ldr	r0, [r4, #0]
 800c8b2:	b938      	cbnz	r0, 800c8c4 <__pow5mult+0x9c>
 800c8b4:	4622      	mov	r2, r4
 800c8b6:	4621      	mov	r1, r4
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	f7ff ff0f 	bl	800c6dc <__multiply>
 800c8be:	6020      	str	r0, [r4, #0]
 800c8c0:	f8c0 9000 	str.w	r9, [r0]
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	e7e4      	b.n	800c892 <__pow5mult+0x6a>
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ce:	bf00      	nop
 800c8d0:	0800df70 	.word	0x0800df70
 800c8d4:	0800dd95 	.word	0x0800dd95
 800c8d8:	0800de1c 	.word	0x0800de1c

0800c8dc <__lshift>:
 800c8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e0:	460c      	mov	r4, r1
 800c8e2:	6849      	ldr	r1, [r1, #4]
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8ea:	68a3      	ldr	r3, [r4, #8]
 800c8ec:	4607      	mov	r7, r0
 800c8ee:	4691      	mov	r9, r2
 800c8f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8f4:	f108 0601 	add.w	r6, r8, #1
 800c8f8:	42b3      	cmp	r3, r6
 800c8fa:	db0b      	blt.n	800c914 <__lshift+0x38>
 800c8fc:	4638      	mov	r0, r7
 800c8fe:	f7ff fddb 	bl	800c4b8 <_Balloc>
 800c902:	4605      	mov	r5, r0
 800c904:	b948      	cbnz	r0, 800c91a <__lshift+0x3e>
 800c906:	4602      	mov	r2, r0
 800c908:	4b28      	ldr	r3, [pc, #160]	; (800c9ac <__lshift+0xd0>)
 800c90a:	4829      	ldr	r0, [pc, #164]	; (800c9b0 <__lshift+0xd4>)
 800c90c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c910:	f000 fb76 	bl	800d000 <__assert_func>
 800c914:	3101      	adds	r1, #1
 800c916:	005b      	lsls	r3, r3, #1
 800c918:	e7ee      	b.n	800c8f8 <__lshift+0x1c>
 800c91a:	2300      	movs	r3, #0
 800c91c:	f100 0114 	add.w	r1, r0, #20
 800c920:	f100 0210 	add.w	r2, r0, #16
 800c924:	4618      	mov	r0, r3
 800c926:	4553      	cmp	r3, sl
 800c928:	db33      	blt.n	800c992 <__lshift+0xb6>
 800c92a:	6920      	ldr	r0, [r4, #16]
 800c92c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c930:	f104 0314 	add.w	r3, r4, #20
 800c934:	f019 091f 	ands.w	r9, r9, #31
 800c938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c93c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c940:	d02b      	beq.n	800c99a <__lshift+0xbe>
 800c942:	f1c9 0e20 	rsb	lr, r9, #32
 800c946:	468a      	mov	sl, r1
 800c948:	2200      	movs	r2, #0
 800c94a:	6818      	ldr	r0, [r3, #0]
 800c94c:	fa00 f009 	lsl.w	r0, r0, r9
 800c950:	4302      	orrs	r2, r0
 800c952:	f84a 2b04 	str.w	r2, [sl], #4
 800c956:	f853 2b04 	ldr.w	r2, [r3], #4
 800c95a:	459c      	cmp	ip, r3
 800c95c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c960:	d8f3      	bhi.n	800c94a <__lshift+0x6e>
 800c962:	ebac 0304 	sub.w	r3, ip, r4
 800c966:	3b15      	subs	r3, #21
 800c968:	f023 0303 	bic.w	r3, r3, #3
 800c96c:	3304      	adds	r3, #4
 800c96e:	f104 0015 	add.w	r0, r4, #21
 800c972:	4584      	cmp	ip, r0
 800c974:	bf38      	it	cc
 800c976:	2304      	movcc	r3, #4
 800c978:	50ca      	str	r2, [r1, r3]
 800c97a:	b10a      	cbz	r2, 800c980 <__lshift+0xa4>
 800c97c:	f108 0602 	add.w	r6, r8, #2
 800c980:	3e01      	subs	r6, #1
 800c982:	4638      	mov	r0, r7
 800c984:	612e      	str	r6, [r5, #16]
 800c986:	4621      	mov	r1, r4
 800c988:	f7ff fdd6 	bl	800c538 <_Bfree>
 800c98c:	4628      	mov	r0, r5
 800c98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c992:	f842 0f04 	str.w	r0, [r2, #4]!
 800c996:	3301      	adds	r3, #1
 800c998:	e7c5      	b.n	800c926 <__lshift+0x4a>
 800c99a:	3904      	subs	r1, #4
 800c99c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9a4:	459c      	cmp	ip, r3
 800c9a6:	d8f9      	bhi.n	800c99c <__lshift+0xc0>
 800c9a8:	e7ea      	b.n	800c980 <__lshift+0xa4>
 800c9aa:	bf00      	nop
 800c9ac:	0800de0b 	.word	0x0800de0b
 800c9b0:	0800de1c 	.word	0x0800de1c

0800c9b4 <__mcmp>:
 800c9b4:	b530      	push	{r4, r5, lr}
 800c9b6:	6902      	ldr	r2, [r0, #16]
 800c9b8:	690c      	ldr	r4, [r1, #16]
 800c9ba:	1b12      	subs	r2, r2, r4
 800c9bc:	d10e      	bne.n	800c9dc <__mcmp+0x28>
 800c9be:	f100 0314 	add.w	r3, r0, #20
 800c9c2:	3114      	adds	r1, #20
 800c9c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9d4:	42a5      	cmp	r5, r4
 800c9d6:	d003      	beq.n	800c9e0 <__mcmp+0x2c>
 800c9d8:	d305      	bcc.n	800c9e6 <__mcmp+0x32>
 800c9da:	2201      	movs	r2, #1
 800c9dc:	4610      	mov	r0, r2
 800c9de:	bd30      	pop	{r4, r5, pc}
 800c9e0:	4283      	cmp	r3, r0
 800c9e2:	d3f3      	bcc.n	800c9cc <__mcmp+0x18>
 800c9e4:	e7fa      	b.n	800c9dc <__mcmp+0x28>
 800c9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ea:	e7f7      	b.n	800c9dc <__mcmp+0x28>

0800c9ec <__mdiff>:
 800c9ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	4617      	mov	r7, r2
 800c9fa:	f7ff ffdb 	bl	800c9b4 <__mcmp>
 800c9fe:	1e05      	subs	r5, r0, #0
 800ca00:	d110      	bne.n	800ca24 <__mdiff+0x38>
 800ca02:	4629      	mov	r1, r5
 800ca04:	4630      	mov	r0, r6
 800ca06:	f7ff fd57 	bl	800c4b8 <_Balloc>
 800ca0a:	b930      	cbnz	r0, 800ca1a <__mdiff+0x2e>
 800ca0c:	4b39      	ldr	r3, [pc, #228]	; (800caf4 <__mdiff+0x108>)
 800ca0e:	4602      	mov	r2, r0
 800ca10:	f240 2132 	movw	r1, #562	; 0x232
 800ca14:	4838      	ldr	r0, [pc, #224]	; (800caf8 <__mdiff+0x10c>)
 800ca16:	f000 faf3 	bl	800d000 <__assert_func>
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca24:	bfa4      	itt	ge
 800ca26:	463b      	movge	r3, r7
 800ca28:	4627      	movge	r7, r4
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	bfa6      	itte	ge
 800ca30:	461c      	movge	r4, r3
 800ca32:	2500      	movge	r5, #0
 800ca34:	2501      	movlt	r5, #1
 800ca36:	f7ff fd3f 	bl	800c4b8 <_Balloc>
 800ca3a:	b920      	cbnz	r0, 800ca46 <__mdiff+0x5a>
 800ca3c:	4b2d      	ldr	r3, [pc, #180]	; (800caf4 <__mdiff+0x108>)
 800ca3e:	4602      	mov	r2, r0
 800ca40:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca44:	e7e6      	b.n	800ca14 <__mdiff+0x28>
 800ca46:	693e      	ldr	r6, [r7, #16]
 800ca48:	60c5      	str	r5, [r0, #12]
 800ca4a:	6925      	ldr	r5, [r4, #16]
 800ca4c:	f107 0114 	add.w	r1, r7, #20
 800ca50:	f104 0914 	add.w	r9, r4, #20
 800ca54:	f100 0e14 	add.w	lr, r0, #20
 800ca58:	f107 0210 	add.w	r2, r7, #16
 800ca5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ca60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ca64:	46f2      	mov	sl, lr
 800ca66:	2700      	movs	r7, #0
 800ca68:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca70:	fa1f f883 	uxth.w	r8, r3
 800ca74:	fa17 f78b 	uxtah	r7, r7, fp
 800ca78:	0c1b      	lsrs	r3, r3, #16
 800ca7a:	eba7 0808 	sub.w	r8, r7, r8
 800ca7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca86:	fa1f f888 	uxth.w	r8, r8
 800ca8a:	141f      	asrs	r7, r3, #16
 800ca8c:	454d      	cmp	r5, r9
 800ca8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca92:	f84a 3b04 	str.w	r3, [sl], #4
 800ca96:	d8e7      	bhi.n	800ca68 <__mdiff+0x7c>
 800ca98:	1b2b      	subs	r3, r5, r4
 800ca9a:	3b15      	subs	r3, #21
 800ca9c:	f023 0303 	bic.w	r3, r3, #3
 800caa0:	3304      	adds	r3, #4
 800caa2:	3415      	adds	r4, #21
 800caa4:	42a5      	cmp	r5, r4
 800caa6:	bf38      	it	cc
 800caa8:	2304      	movcc	r3, #4
 800caaa:	4419      	add	r1, r3
 800caac:	4473      	add	r3, lr
 800caae:	469e      	mov	lr, r3
 800cab0:	460d      	mov	r5, r1
 800cab2:	4565      	cmp	r5, ip
 800cab4:	d30e      	bcc.n	800cad4 <__mdiff+0xe8>
 800cab6:	f10c 0203 	add.w	r2, ip, #3
 800caba:	1a52      	subs	r2, r2, r1
 800cabc:	f022 0203 	bic.w	r2, r2, #3
 800cac0:	3903      	subs	r1, #3
 800cac2:	458c      	cmp	ip, r1
 800cac4:	bf38      	it	cc
 800cac6:	2200      	movcc	r2, #0
 800cac8:	441a      	add	r2, r3
 800caca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cace:	b17b      	cbz	r3, 800caf0 <__mdiff+0x104>
 800cad0:	6106      	str	r6, [r0, #16]
 800cad2:	e7a5      	b.n	800ca20 <__mdiff+0x34>
 800cad4:	f855 8b04 	ldr.w	r8, [r5], #4
 800cad8:	fa17 f488 	uxtah	r4, r7, r8
 800cadc:	1422      	asrs	r2, r4, #16
 800cade:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cae2:	b2a4      	uxth	r4, r4
 800cae4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cae8:	f84e 4b04 	str.w	r4, [lr], #4
 800caec:	1417      	asrs	r7, r2, #16
 800caee:	e7e0      	b.n	800cab2 <__mdiff+0xc6>
 800caf0:	3e01      	subs	r6, #1
 800caf2:	e7ea      	b.n	800caca <__mdiff+0xde>
 800caf4:	0800de0b 	.word	0x0800de0b
 800caf8:	0800de1c 	.word	0x0800de1c

0800cafc <__d2b>:
 800cafc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb00:	4689      	mov	r9, r1
 800cb02:	2101      	movs	r1, #1
 800cb04:	ec57 6b10 	vmov	r6, r7, d0
 800cb08:	4690      	mov	r8, r2
 800cb0a:	f7ff fcd5 	bl	800c4b8 <_Balloc>
 800cb0e:	4604      	mov	r4, r0
 800cb10:	b930      	cbnz	r0, 800cb20 <__d2b+0x24>
 800cb12:	4602      	mov	r2, r0
 800cb14:	4b25      	ldr	r3, [pc, #148]	; (800cbac <__d2b+0xb0>)
 800cb16:	4826      	ldr	r0, [pc, #152]	; (800cbb0 <__d2b+0xb4>)
 800cb18:	f240 310a 	movw	r1, #778	; 0x30a
 800cb1c:	f000 fa70 	bl	800d000 <__assert_func>
 800cb20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cb24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb28:	bb35      	cbnz	r5, 800cb78 <__d2b+0x7c>
 800cb2a:	2e00      	cmp	r6, #0
 800cb2c:	9301      	str	r3, [sp, #4]
 800cb2e:	d028      	beq.n	800cb82 <__d2b+0x86>
 800cb30:	4668      	mov	r0, sp
 800cb32:	9600      	str	r6, [sp, #0]
 800cb34:	f7ff fd8c 	bl	800c650 <__lo0bits>
 800cb38:	9900      	ldr	r1, [sp, #0]
 800cb3a:	b300      	cbz	r0, 800cb7e <__d2b+0x82>
 800cb3c:	9a01      	ldr	r2, [sp, #4]
 800cb3e:	f1c0 0320 	rsb	r3, r0, #32
 800cb42:	fa02 f303 	lsl.w	r3, r2, r3
 800cb46:	430b      	orrs	r3, r1
 800cb48:	40c2      	lsrs	r2, r0
 800cb4a:	6163      	str	r3, [r4, #20]
 800cb4c:	9201      	str	r2, [sp, #4]
 800cb4e:	9b01      	ldr	r3, [sp, #4]
 800cb50:	61a3      	str	r3, [r4, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	bf14      	ite	ne
 800cb56:	2202      	movne	r2, #2
 800cb58:	2201      	moveq	r2, #1
 800cb5a:	6122      	str	r2, [r4, #16]
 800cb5c:	b1d5      	cbz	r5, 800cb94 <__d2b+0x98>
 800cb5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb62:	4405      	add	r5, r0
 800cb64:	f8c9 5000 	str.w	r5, [r9]
 800cb68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb6c:	f8c8 0000 	str.w	r0, [r8]
 800cb70:	4620      	mov	r0, r4
 800cb72:	b003      	add	sp, #12
 800cb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb7c:	e7d5      	b.n	800cb2a <__d2b+0x2e>
 800cb7e:	6161      	str	r1, [r4, #20]
 800cb80:	e7e5      	b.n	800cb4e <__d2b+0x52>
 800cb82:	a801      	add	r0, sp, #4
 800cb84:	f7ff fd64 	bl	800c650 <__lo0bits>
 800cb88:	9b01      	ldr	r3, [sp, #4]
 800cb8a:	6163      	str	r3, [r4, #20]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	6122      	str	r2, [r4, #16]
 800cb90:	3020      	adds	r0, #32
 800cb92:	e7e3      	b.n	800cb5c <__d2b+0x60>
 800cb94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb9c:	f8c9 0000 	str.w	r0, [r9]
 800cba0:	6918      	ldr	r0, [r3, #16]
 800cba2:	f7ff fd35 	bl	800c610 <__hi0bits>
 800cba6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cbaa:	e7df      	b.n	800cb6c <__d2b+0x70>
 800cbac:	0800de0b 	.word	0x0800de0b
 800cbb0:	0800de1c 	.word	0x0800de1c

0800cbb4 <_calloc_r>:
 800cbb4:	b513      	push	{r0, r1, r4, lr}
 800cbb6:	434a      	muls	r2, r1
 800cbb8:	4611      	mov	r1, r2
 800cbba:	9201      	str	r2, [sp, #4]
 800cbbc:	f000 f85a 	bl	800cc74 <_malloc_r>
 800cbc0:	4604      	mov	r4, r0
 800cbc2:	b118      	cbz	r0, 800cbcc <_calloc_r+0x18>
 800cbc4:	9a01      	ldr	r2, [sp, #4]
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	f7fe f960 	bl	800ae8c <memset>
 800cbcc:	4620      	mov	r0, r4
 800cbce:	b002      	add	sp, #8
 800cbd0:	bd10      	pop	{r4, pc}
	...

0800cbd4 <_free_r>:
 800cbd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbd6:	2900      	cmp	r1, #0
 800cbd8:	d048      	beq.n	800cc6c <_free_r+0x98>
 800cbda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbde:	9001      	str	r0, [sp, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f1a1 0404 	sub.w	r4, r1, #4
 800cbe6:	bfb8      	it	lt
 800cbe8:	18e4      	addlt	r4, r4, r3
 800cbea:	f000 fa65 	bl	800d0b8 <__malloc_lock>
 800cbee:	4a20      	ldr	r2, [pc, #128]	; (800cc70 <_free_r+0x9c>)
 800cbf0:	9801      	ldr	r0, [sp, #4]
 800cbf2:	6813      	ldr	r3, [r2, #0]
 800cbf4:	4615      	mov	r5, r2
 800cbf6:	b933      	cbnz	r3, 800cc06 <_free_r+0x32>
 800cbf8:	6063      	str	r3, [r4, #4]
 800cbfa:	6014      	str	r4, [r2, #0]
 800cbfc:	b003      	add	sp, #12
 800cbfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc02:	f000 ba5f 	b.w	800d0c4 <__malloc_unlock>
 800cc06:	42a3      	cmp	r3, r4
 800cc08:	d90b      	bls.n	800cc22 <_free_r+0x4e>
 800cc0a:	6821      	ldr	r1, [r4, #0]
 800cc0c:	1862      	adds	r2, r4, r1
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	bf04      	itt	eq
 800cc12:	681a      	ldreq	r2, [r3, #0]
 800cc14:	685b      	ldreq	r3, [r3, #4]
 800cc16:	6063      	str	r3, [r4, #4]
 800cc18:	bf04      	itt	eq
 800cc1a:	1852      	addeq	r2, r2, r1
 800cc1c:	6022      	streq	r2, [r4, #0]
 800cc1e:	602c      	str	r4, [r5, #0]
 800cc20:	e7ec      	b.n	800cbfc <_free_r+0x28>
 800cc22:	461a      	mov	r2, r3
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	b10b      	cbz	r3, 800cc2c <_free_r+0x58>
 800cc28:	42a3      	cmp	r3, r4
 800cc2a:	d9fa      	bls.n	800cc22 <_free_r+0x4e>
 800cc2c:	6811      	ldr	r1, [r2, #0]
 800cc2e:	1855      	adds	r5, r2, r1
 800cc30:	42a5      	cmp	r5, r4
 800cc32:	d10b      	bne.n	800cc4c <_free_r+0x78>
 800cc34:	6824      	ldr	r4, [r4, #0]
 800cc36:	4421      	add	r1, r4
 800cc38:	1854      	adds	r4, r2, r1
 800cc3a:	42a3      	cmp	r3, r4
 800cc3c:	6011      	str	r1, [r2, #0]
 800cc3e:	d1dd      	bne.n	800cbfc <_free_r+0x28>
 800cc40:	681c      	ldr	r4, [r3, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	6053      	str	r3, [r2, #4]
 800cc46:	4421      	add	r1, r4
 800cc48:	6011      	str	r1, [r2, #0]
 800cc4a:	e7d7      	b.n	800cbfc <_free_r+0x28>
 800cc4c:	d902      	bls.n	800cc54 <_free_r+0x80>
 800cc4e:	230c      	movs	r3, #12
 800cc50:	6003      	str	r3, [r0, #0]
 800cc52:	e7d3      	b.n	800cbfc <_free_r+0x28>
 800cc54:	6825      	ldr	r5, [r4, #0]
 800cc56:	1961      	adds	r1, r4, r5
 800cc58:	428b      	cmp	r3, r1
 800cc5a:	bf04      	itt	eq
 800cc5c:	6819      	ldreq	r1, [r3, #0]
 800cc5e:	685b      	ldreq	r3, [r3, #4]
 800cc60:	6063      	str	r3, [r4, #4]
 800cc62:	bf04      	itt	eq
 800cc64:	1949      	addeq	r1, r1, r5
 800cc66:	6021      	streq	r1, [r4, #0]
 800cc68:	6054      	str	r4, [r2, #4]
 800cc6a:	e7c7      	b.n	800cbfc <_free_r+0x28>
 800cc6c:	b003      	add	sp, #12
 800cc6e:	bd30      	pop	{r4, r5, pc}
 800cc70:	20008438 	.word	0x20008438

0800cc74 <_malloc_r>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	1ccd      	adds	r5, r1, #3
 800cc78:	f025 0503 	bic.w	r5, r5, #3
 800cc7c:	3508      	adds	r5, #8
 800cc7e:	2d0c      	cmp	r5, #12
 800cc80:	bf38      	it	cc
 800cc82:	250c      	movcc	r5, #12
 800cc84:	2d00      	cmp	r5, #0
 800cc86:	4606      	mov	r6, r0
 800cc88:	db01      	blt.n	800cc8e <_malloc_r+0x1a>
 800cc8a:	42a9      	cmp	r1, r5
 800cc8c:	d903      	bls.n	800cc96 <_malloc_r+0x22>
 800cc8e:	230c      	movs	r3, #12
 800cc90:	6033      	str	r3, [r6, #0]
 800cc92:	2000      	movs	r0, #0
 800cc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc96:	f000 fa0f 	bl	800d0b8 <__malloc_lock>
 800cc9a:	4921      	ldr	r1, [pc, #132]	; (800cd20 <_malloc_r+0xac>)
 800cc9c:	680a      	ldr	r2, [r1, #0]
 800cc9e:	4614      	mov	r4, r2
 800cca0:	b99c      	cbnz	r4, 800ccca <_malloc_r+0x56>
 800cca2:	4f20      	ldr	r7, [pc, #128]	; (800cd24 <_malloc_r+0xb0>)
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	b923      	cbnz	r3, 800ccb2 <_malloc_r+0x3e>
 800cca8:	4621      	mov	r1, r4
 800ccaa:	4630      	mov	r0, r6
 800ccac:	f000 f998 	bl	800cfe0 <_sbrk_r>
 800ccb0:	6038      	str	r0, [r7, #0]
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f000 f993 	bl	800cfe0 <_sbrk_r>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	d123      	bne.n	800cd06 <_malloc_r+0x92>
 800ccbe:	230c      	movs	r3, #12
 800ccc0:	6033      	str	r3, [r6, #0]
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f000 f9fe 	bl	800d0c4 <__malloc_unlock>
 800ccc8:	e7e3      	b.n	800cc92 <_malloc_r+0x1e>
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	1b5b      	subs	r3, r3, r5
 800ccce:	d417      	bmi.n	800cd00 <_malloc_r+0x8c>
 800ccd0:	2b0b      	cmp	r3, #11
 800ccd2:	d903      	bls.n	800ccdc <_malloc_r+0x68>
 800ccd4:	6023      	str	r3, [r4, #0]
 800ccd6:	441c      	add	r4, r3
 800ccd8:	6025      	str	r5, [r4, #0]
 800ccda:	e004      	b.n	800cce6 <_malloc_r+0x72>
 800ccdc:	6863      	ldr	r3, [r4, #4]
 800ccde:	42a2      	cmp	r2, r4
 800cce0:	bf0c      	ite	eq
 800cce2:	600b      	streq	r3, [r1, #0]
 800cce4:	6053      	strne	r3, [r2, #4]
 800cce6:	4630      	mov	r0, r6
 800cce8:	f000 f9ec 	bl	800d0c4 <__malloc_unlock>
 800ccec:	f104 000b 	add.w	r0, r4, #11
 800ccf0:	1d23      	adds	r3, r4, #4
 800ccf2:	f020 0007 	bic.w	r0, r0, #7
 800ccf6:	1ac2      	subs	r2, r0, r3
 800ccf8:	d0cc      	beq.n	800cc94 <_malloc_r+0x20>
 800ccfa:	1a1b      	subs	r3, r3, r0
 800ccfc:	50a3      	str	r3, [r4, r2]
 800ccfe:	e7c9      	b.n	800cc94 <_malloc_r+0x20>
 800cd00:	4622      	mov	r2, r4
 800cd02:	6864      	ldr	r4, [r4, #4]
 800cd04:	e7cc      	b.n	800cca0 <_malloc_r+0x2c>
 800cd06:	1cc4      	adds	r4, r0, #3
 800cd08:	f024 0403 	bic.w	r4, r4, #3
 800cd0c:	42a0      	cmp	r0, r4
 800cd0e:	d0e3      	beq.n	800ccd8 <_malloc_r+0x64>
 800cd10:	1a21      	subs	r1, r4, r0
 800cd12:	4630      	mov	r0, r6
 800cd14:	f000 f964 	bl	800cfe0 <_sbrk_r>
 800cd18:	3001      	adds	r0, #1
 800cd1a:	d1dd      	bne.n	800ccd8 <_malloc_r+0x64>
 800cd1c:	e7cf      	b.n	800ccbe <_malloc_r+0x4a>
 800cd1e:	bf00      	nop
 800cd20:	20008438 	.word	0x20008438
 800cd24:	2000843c 	.word	0x2000843c

0800cd28 <__ssputs_r>:
 800cd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd2c:	688e      	ldr	r6, [r1, #8]
 800cd2e:	429e      	cmp	r6, r3
 800cd30:	4682      	mov	sl, r0
 800cd32:	460c      	mov	r4, r1
 800cd34:	4690      	mov	r8, r2
 800cd36:	461f      	mov	r7, r3
 800cd38:	d838      	bhi.n	800cdac <__ssputs_r+0x84>
 800cd3a:	898a      	ldrh	r2, [r1, #12]
 800cd3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd40:	d032      	beq.n	800cda8 <__ssputs_r+0x80>
 800cd42:	6825      	ldr	r5, [r4, #0]
 800cd44:	6909      	ldr	r1, [r1, #16]
 800cd46:	eba5 0901 	sub.w	r9, r5, r1
 800cd4a:	6965      	ldr	r5, [r4, #20]
 800cd4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd54:	3301      	adds	r3, #1
 800cd56:	444b      	add	r3, r9
 800cd58:	106d      	asrs	r5, r5, #1
 800cd5a:	429d      	cmp	r5, r3
 800cd5c:	bf38      	it	cc
 800cd5e:	461d      	movcc	r5, r3
 800cd60:	0553      	lsls	r3, r2, #21
 800cd62:	d531      	bpl.n	800cdc8 <__ssputs_r+0xa0>
 800cd64:	4629      	mov	r1, r5
 800cd66:	f7ff ff85 	bl	800cc74 <_malloc_r>
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	b950      	cbnz	r0, 800cd84 <__ssputs_r+0x5c>
 800cd6e:	230c      	movs	r3, #12
 800cd70:	f8ca 3000 	str.w	r3, [sl]
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd84:	6921      	ldr	r1, [r4, #16]
 800cd86:	464a      	mov	r2, r9
 800cd88:	f7fe f872 	bl	800ae70 <memcpy>
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd96:	81a3      	strh	r3, [r4, #12]
 800cd98:	6126      	str	r6, [r4, #16]
 800cd9a:	6165      	str	r5, [r4, #20]
 800cd9c:	444e      	add	r6, r9
 800cd9e:	eba5 0509 	sub.w	r5, r5, r9
 800cda2:	6026      	str	r6, [r4, #0]
 800cda4:	60a5      	str	r5, [r4, #8]
 800cda6:	463e      	mov	r6, r7
 800cda8:	42be      	cmp	r6, r7
 800cdaa:	d900      	bls.n	800cdae <__ssputs_r+0x86>
 800cdac:	463e      	mov	r6, r7
 800cdae:	4632      	mov	r2, r6
 800cdb0:	6820      	ldr	r0, [r4, #0]
 800cdb2:	4641      	mov	r1, r8
 800cdb4:	f000 f966 	bl	800d084 <memmove>
 800cdb8:	68a3      	ldr	r3, [r4, #8]
 800cdba:	6822      	ldr	r2, [r4, #0]
 800cdbc:	1b9b      	subs	r3, r3, r6
 800cdbe:	4432      	add	r2, r6
 800cdc0:	60a3      	str	r3, [r4, #8]
 800cdc2:	6022      	str	r2, [r4, #0]
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e7db      	b.n	800cd80 <__ssputs_r+0x58>
 800cdc8:	462a      	mov	r2, r5
 800cdca:	f000 f981 	bl	800d0d0 <_realloc_r>
 800cdce:	4606      	mov	r6, r0
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d1e1      	bne.n	800cd98 <__ssputs_r+0x70>
 800cdd4:	6921      	ldr	r1, [r4, #16]
 800cdd6:	4650      	mov	r0, sl
 800cdd8:	f7ff fefc 	bl	800cbd4 <_free_r>
 800cddc:	e7c7      	b.n	800cd6e <__ssputs_r+0x46>
	...

0800cde0 <_svfiprintf_r>:
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	4698      	mov	r8, r3
 800cde6:	898b      	ldrh	r3, [r1, #12]
 800cde8:	061b      	lsls	r3, r3, #24
 800cdea:	b09d      	sub	sp, #116	; 0x74
 800cdec:	4607      	mov	r7, r0
 800cdee:	460d      	mov	r5, r1
 800cdf0:	4614      	mov	r4, r2
 800cdf2:	d50e      	bpl.n	800ce12 <_svfiprintf_r+0x32>
 800cdf4:	690b      	ldr	r3, [r1, #16]
 800cdf6:	b963      	cbnz	r3, 800ce12 <_svfiprintf_r+0x32>
 800cdf8:	2140      	movs	r1, #64	; 0x40
 800cdfa:	f7ff ff3b 	bl	800cc74 <_malloc_r>
 800cdfe:	6028      	str	r0, [r5, #0]
 800ce00:	6128      	str	r0, [r5, #16]
 800ce02:	b920      	cbnz	r0, 800ce0e <_svfiprintf_r+0x2e>
 800ce04:	230c      	movs	r3, #12
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0c:	e0d1      	b.n	800cfb2 <_svfiprintf_r+0x1d2>
 800ce0e:	2340      	movs	r3, #64	; 0x40
 800ce10:	616b      	str	r3, [r5, #20]
 800ce12:	2300      	movs	r3, #0
 800ce14:	9309      	str	r3, [sp, #36]	; 0x24
 800ce16:	2320      	movs	r3, #32
 800ce18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce20:	2330      	movs	r3, #48	; 0x30
 800ce22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cfcc <_svfiprintf_r+0x1ec>
 800ce26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce2a:	f04f 0901 	mov.w	r9, #1
 800ce2e:	4623      	mov	r3, r4
 800ce30:	469a      	mov	sl, r3
 800ce32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce36:	b10a      	cbz	r2, 800ce3c <_svfiprintf_r+0x5c>
 800ce38:	2a25      	cmp	r2, #37	; 0x25
 800ce3a:	d1f9      	bne.n	800ce30 <_svfiprintf_r+0x50>
 800ce3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce40:	d00b      	beq.n	800ce5a <_svfiprintf_r+0x7a>
 800ce42:	465b      	mov	r3, fp
 800ce44:	4622      	mov	r2, r4
 800ce46:	4629      	mov	r1, r5
 800ce48:	4638      	mov	r0, r7
 800ce4a:	f7ff ff6d 	bl	800cd28 <__ssputs_r>
 800ce4e:	3001      	adds	r0, #1
 800ce50:	f000 80aa 	beq.w	800cfa8 <_svfiprintf_r+0x1c8>
 800ce54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce56:	445a      	add	r2, fp
 800ce58:	9209      	str	r2, [sp, #36]	; 0x24
 800ce5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f000 80a2 	beq.w	800cfa8 <_svfiprintf_r+0x1c8>
 800ce64:	2300      	movs	r3, #0
 800ce66:	f04f 32ff 	mov.w	r2, #4294967295
 800ce6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce6e:	f10a 0a01 	add.w	sl, sl, #1
 800ce72:	9304      	str	r3, [sp, #16]
 800ce74:	9307      	str	r3, [sp, #28]
 800ce76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ce7c:	4654      	mov	r4, sl
 800ce7e:	2205      	movs	r2, #5
 800ce80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce84:	4851      	ldr	r0, [pc, #324]	; (800cfcc <_svfiprintf_r+0x1ec>)
 800ce86:	f7f3 f9ab 	bl	80001e0 <memchr>
 800ce8a:	9a04      	ldr	r2, [sp, #16]
 800ce8c:	b9d8      	cbnz	r0, 800cec6 <_svfiprintf_r+0xe6>
 800ce8e:	06d0      	lsls	r0, r2, #27
 800ce90:	bf44      	itt	mi
 800ce92:	2320      	movmi	r3, #32
 800ce94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce98:	0711      	lsls	r1, r2, #28
 800ce9a:	bf44      	itt	mi
 800ce9c:	232b      	movmi	r3, #43	; 0x2b
 800ce9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cea2:	f89a 3000 	ldrb.w	r3, [sl]
 800cea6:	2b2a      	cmp	r3, #42	; 0x2a
 800cea8:	d015      	beq.n	800ced6 <_svfiprintf_r+0xf6>
 800ceaa:	9a07      	ldr	r2, [sp, #28]
 800ceac:	4654      	mov	r4, sl
 800ceae:	2000      	movs	r0, #0
 800ceb0:	f04f 0c0a 	mov.w	ip, #10
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceba:	3b30      	subs	r3, #48	; 0x30
 800cebc:	2b09      	cmp	r3, #9
 800cebe:	d94e      	bls.n	800cf5e <_svfiprintf_r+0x17e>
 800cec0:	b1b0      	cbz	r0, 800cef0 <_svfiprintf_r+0x110>
 800cec2:	9207      	str	r2, [sp, #28]
 800cec4:	e014      	b.n	800cef0 <_svfiprintf_r+0x110>
 800cec6:	eba0 0308 	sub.w	r3, r0, r8
 800ceca:	fa09 f303 	lsl.w	r3, r9, r3
 800cece:	4313      	orrs	r3, r2
 800ced0:	9304      	str	r3, [sp, #16]
 800ced2:	46a2      	mov	sl, r4
 800ced4:	e7d2      	b.n	800ce7c <_svfiprintf_r+0x9c>
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	1d19      	adds	r1, r3, #4
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	9103      	str	r1, [sp, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	bfbb      	ittet	lt
 800cee2:	425b      	neglt	r3, r3
 800cee4:	f042 0202 	orrlt.w	r2, r2, #2
 800cee8:	9307      	strge	r3, [sp, #28]
 800ceea:	9307      	strlt	r3, [sp, #28]
 800ceec:	bfb8      	it	lt
 800ceee:	9204      	strlt	r2, [sp, #16]
 800cef0:	7823      	ldrb	r3, [r4, #0]
 800cef2:	2b2e      	cmp	r3, #46	; 0x2e
 800cef4:	d10c      	bne.n	800cf10 <_svfiprintf_r+0x130>
 800cef6:	7863      	ldrb	r3, [r4, #1]
 800cef8:	2b2a      	cmp	r3, #42	; 0x2a
 800cefa:	d135      	bne.n	800cf68 <_svfiprintf_r+0x188>
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	1d1a      	adds	r2, r3, #4
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	9203      	str	r2, [sp, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfb8      	it	lt
 800cf08:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf0c:	3402      	adds	r4, #2
 800cf0e:	9305      	str	r3, [sp, #20]
 800cf10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cfdc <_svfiprintf_r+0x1fc>
 800cf14:	7821      	ldrb	r1, [r4, #0]
 800cf16:	2203      	movs	r2, #3
 800cf18:	4650      	mov	r0, sl
 800cf1a:	f7f3 f961 	bl	80001e0 <memchr>
 800cf1e:	b140      	cbz	r0, 800cf32 <_svfiprintf_r+0x152>
 800cf20:	2340      	movs	r3, #64	; 0x40
 800cf22:	eba0 000a 	sub.w	r0, r0, sl
 800cf26:	fa03 f000 	lsl.w	r0, r3, r0
 800cf2a:	9b04      	ldr	r3, [sp, #16]
 800cf2c:	4303      	orrs	r3, r0
 800cf2e:	3401      	adds	r4, #1
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf36:	4826      	ldr	r0, [pc, #152]	; (800cfd0 <_svfiprintf_r+0x1f0>)
 800cf38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf3c:	2206      	movs	r2, #6
 800cf3e:	f7f3 f94f 	bl	80001e0 <memchr>
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d038      	beq.n	800cfb8 <_svfiprintf_r+0x1d8>
 800cf46:	4b23      	ldr	r3, [pc, #140]	; (800cfd4 <_svfiprintf_r+0x1f4>)
 800cf48:	bb1b      	cbnz	r3, 800cf92 <_svfiprintf_r+0x1b2>
 800cf4a:	9b03      	ldr	r3, [sp, #12]
 800cf4c:	3307      	adds	r3, #7
 800cf4e:	f023 0307 	bic.w	r3, r3, #7
 800cf52:	3308      	adds	r3, #8
 800cf54:	9303      	str	r3, [sp, #12]
 800cf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf58:	4433      	add	r3, r6
 800cf5a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf5c:	e767      	b.n	800ce2e <_svfiprintf_r+0x4e>
 800cf5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf62:	460c      	mov	r4, r1
 800cf64:	2001      	movs	r0, #1
 800cf66:	e7a5      	b.n	800ceb4 <_svfiprintf_r+0xd4>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	3401      	adds	r4, #1
 800cf6c:	9305      	str	r3, [sp, #20]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	f04f 0c0a 	mov.w	ip, #10
 800cf74:	4620      	mov	r0, r4
 800cf76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf7a:	3a30      	subs	r2, #48	; 0x30
 800cf7c:	2a09      	cmp	r2, #9
 800cf7e:	d903      	bls.n	800cf88 <_svfiprintf_r+0x1a8>
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d0c5      	beq.n	800cf10 <_svfiprintf_r+0x130>
 800cf84:	9105      	str	r1, [sp, #20]
 800cf86:	e7c3      	b.n	800cf10 <_svfiprintf_r+0x130>
 800cf88:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e7f0      	b.n	800cf74 <_svfiprintf_r+0x194>
 800cf92:	ab03      	add	r3, sp, #12
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	462a      	mov	r2, r5
 800cf98:	4b0f      	ldr	r3, [pc, #60]	; (800cfd8 <_svfiprintf_r+0x1f8>)
 800cf9a:	a904      	add	r1, sp, #16
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	f7fe f81d 	bl	800afdc <_printf_float>
 800cfa2:	1c42      	adds	r2, r0, #1
 800cfa4:	4606      	mov	r6, r0
 800cfa6:	d1d6      	bne.n	800cf56 <_svfiprintf_r+0x176>
 800cfa8:	89ab      	ldrh	r3, [r5, #12]
 800cfaa:	065b      	lsls	r3, r3, #25
 800cfac:	f53f af2c 	bmi.w	800ce08 <_svfiprintf_r+0x28>
 800cfb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfb2:	b01d      	add	sp, #116	; 0x74
 800cfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb8:	ab03      	add	r3, sp, #12
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	462a      	mov	r2, r5
 800cfbe:	4b06      	ldr	r3, [pc, #24]	; (800cfd8 <_svfiprintf_r+0x1f8>)
 800cfc0:	a904      	add	r1, sp, #16
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	f7fe faae 	bl	800b524 <_printf_i>
 800cfc8:	e7eb      	b.n	800cfa2 <_svfiprintf_r+0x1c2>
 800cfca:	bf00      	nop
 800cfcc:	0800df7c 	.word	0x0800df7c
 800cfd0:	0800df86 	.word	0x0800df86
 800cfd4:	0800afdd 	.word	0x0800afdd
 800cfd8:	0800cd29 	.word	0x0800cd29
 800cfdc:	0800df82 	.word	0x0800df82

0800cfe0 <_sbrk_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4d06      	ldr	r5, [pc, #24]	; (800cffc <_sbrk_r+0x1c>)
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	4608      	mov	r0, r1
 800cfea:	602b      	str	r3, [r5, #0]
 800cfec:	f7f5 fe8c 	bl	8002d08 <_sbrk>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d102      	bne.n	800cffa <_sbrk_r+0x1a>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	b103      	cbz	r3, 800cffa <_sbrk_r+0x1a>
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
 800cffc:	2000887c 	.word	0x2000887c

0800d000 <__assert_func>:
 800d000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d002:	4614      	mov	r4, r2
 800d004:	461a      	mov	r2, r3
 800d006:	4b09      	ldr	r3, [pc, #36]	; (800d02c <__assert_func+0x2c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4605      	mov	r5, r0
 800d00c:	68d8      	ldr	r0, [r3, #12]
 800d00e:	b14c      	cbz	r4, 800d024 <__assert_func+0x24>
 800d010:	4b07      	ldr	r3, [pc, #28]	; (800d030 <__assert_func+0x30>)
 800d012:	9100      	str	r1, [sp, #0]
 800d014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d018:	4906      	ldr	r1, [pc, #24]	; (800d034 <__assert_func+0x34>)
 800d01a:	462b      	mov	r3, r5
 800d01c:	f000 f80e 	bl	800d03c <fiprintf>
 800d020:	f000 faa4 	bl	800d56c <abort>
 800d024:	4b04      	ldr	r3, [pc, #16]	; (800d038 <__assert_func+0x38>)
 800d026:	461c      	mov	r4, r3
 800d028:	e7f3      	b.n	800d012 <__assert_func+0x12>
 800d02a:	bf00      	nop
 800d02c:	20000014 	.word	0x20000014
 800d030:	0800df8d 	.word	0x0800df8d
 800d034:	0800df9a 	.word	0x0800df9a
 800d038:	0800dfc8 	.word	0x0800dfc8

0800d03c <fiprintf>:
 800d03c:	b40e      	push	{r1, r2, r3}
 800d03e:	b503      	push	{r0, r1, lr}
 800d040:	4601      	mov	r1, r0
 800d042:	ab03      	add	r3, sp, #12
 800d044:	4805      	ldr	r0, [pc, #20]	; (800d05c <fiprintf+0x20>)
 800d046:	f853 2b04 	ldr.w	r2, [r3], #4
 800d04a:	6800      	ldr	r0, [r0, #0]
 800d04c:	9301      	str	r3, [sp, #4]
 800d04e:	f000 f88f 	bl	800d170 <_vfiprintf_r>
 800d052:	b002      	add	sp, #8
 800d054:	f85d eb04 	ldr.w	lr, [sp], #4
 800d058:	b003      	add	sp, #12
 800d05a:	4770      	bx	lr
 800d05c:	20000014 	.word	0x20000014

0800d060 <__ascii_mbtowc>:
 800d060:	b082      	sub	sp, #8
 800d062:	b901      	cbnz	r1, 800d066 <__ascii_mbtowc+0x6>
 800d064:	a901      	add	r1, sp, #4
 800d066:	b142      	cbz	r2, 800d07a <__ascii_mbtowc+0x1a>
 800d068:	b14b      	cbz	r3, 800d07e <__ascii_mbtowc+0x1e>
 800d06a:	7813      	ldrb	r3, [r2, #0]
 800d06c:	600b      	str	r3, [r1, #0]
 800d06e:	7812      	ldrb	r2, [r2, #0]
 800d070:	1e10      	subs	r0, r2, #0
 800d072:	bf18      	it	ne
 800d074:	2001      	movne	r0, #1
 800d076:	b002      	add	sp, #8
 800d078:	4770      	bx	lr
 800d07a:	4610      	mov	r0, r2
 800d07c:	e7fb      	b.n	800d076 <__ascii_mbtowc+0x16>
 800d07e:	f06f 0001 	mvn.w	r0, #1
 800d082:	e7f8      	b.n	800d076 <__ascii_mbtowc+0x16>

0800d084 <memmove>:
 800d084:	4288      	cmp	r0, r1
 800d086:	b510      	push	{r4, lr}
 800d088:	eb01 0402 	add.w	r4, r1, r2
 800d08c:	d902      	bls.n	800d094 <memmove+0x10>
 800d08e:	4284      	cmp	r4, r0
 800d090:	4623      	mov	r3, r4
 800d092:	d807      	bhi.n	800d0a4 <memmove+0x20>
 800d094:	1e43      	subs	r3, r0, #1
 800d096:	42a1      	cmp	r1, r4
 800d098:	d008      	beq.n	800d0ac <memmove+0x28>
 800d09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0a2:	e7f8      	b.n	800d096 <memmove+0x12>
 800d0a4:	4402      	add	r2, r0
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	428a      	cmp	r2, r1
 800d0aa:	d100      	bne.n	800d0ae <memmove+0x2a>
 800d0ac:	bd10      	pop	{r4, pc}
 800d0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0b6:	e7f7      	b.n	800d0a8 <memmove+0x24>

0800d0b8 <__malloc_lock>:
 800d0b8:	4801      	ldr	r0, [pc, #4]	; (800d0c0 <__malloc_lock+0x8>)
 800d0ba:	f000 bc17 	b.w	800d8ec <__retarget_lock_acquire_recursive>
 800d0be:	bf00      	nop
 800d0c0:	20008884 	.word	0x20008884

0800d0c4 <__malloc_unlock>:
 800d0c4:	4801      	ldr	r0, [pc, #4]	; (800d0cc <__malloc_unlock+0x8>)
 800d0c6:	f000 bc12 	b.w	800d8ee <__retarget_lock_release_recursive>
 800d0ca:	bf00      	nop
 800d0cc:	20008884 	.word	0x20008884

0800d0d0 <_realloc_r>:
 800d0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d2:	4607      	mov	r7, r0
 800d0d4:	4614      	mov	r4, r2
 800d0d6:	460e      	mov	r6, r1
 800d0d8:	b921      	cbnz	r1, 800d0e4 <_realloc_r+0x14>
 800d0da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d0de:	4611      	mov	r1, r2
 800d0e0:	f7ff bdc8 	b.w	800cc74 <_malloc_r>
 800d0e4:	b922      	cbnz	r2, 800d0f0 <_realloc_r+0x20>
 800d0e6:	f7ff fd75 	bl	800cbd4 <_free_r>
 800d0ea:	4625      	mov	r5, r4
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0f0:	f000 fc62 	bl	800d9b8 <_malloc_usable_size_r>
 800d0f4:	42a0      	cmp	r0, r4
 800d0f6:	d20f      	bcs.n	800d118 <_realloc_r+0x48>
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	4638      	mov	r0, r7
 800d0fc:	f7ff fdba 	bl	800cc74 <_malloc_r>
 800d100:	4605      	mov	r5, r0
 800d102:	2800      	cmp	r0, #0
 800d104:	d0f2      	beq.n	800d0ec <_realloc_r+0x1c>
 800d106:	4631      	mov	r1, r6
 800d108:	4622      	mov	r2, r4
 800d10a:	f7fd feb1 	bl	800ae70 <memcpy>
 800d10e:	4631      	mov	r1, r6
 800d110:	4638      	mov	r0, r7
 800d112:	f7ff fd5f 	bl	800cbd4 <_free_r>
 800d116:	e7e9      	b.n	800d0ec <_realloc_r+0x1c>
 800d118:	4635      	mov	r5, r6
 800d11a:	e7e7      	b.n	800d0ec <_realloc_r+0x1c>

0800d11c <__sfputc_r>:
 800d11c:	6893      	ldr	r3, [r2, #8]
 800d11e:	3b01      	subs	r3, #1
 800d120:	2b00      	cmp	r3, #0
 800d122:	b410      	push	{r4}
 800d124:	6093      	str	r3, [r2, #8]
 800d126:	da08      	bge.n	800d13a <__sfputc_r+0x1e>
 800d128:	6994      	ldr	r4, [r2, #24]
 800d12a:	42a3      	cmp	r3, r4
 800d12c:	db01      	blt.n	800d132 <__sfputc_r+0x16>
 800d12e:	290a      	cmp	r1, #10
 800d130:	d103      	bne.n	800d13a <__sfputc_r+0x1e>
 800d132:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d136:	f000 b94b 	b.w	800d3d0 <__swbuf_r>
 800d13a:	6813      	ldr	r3, [r2, #0]
 800d13c:	1c58      	adds	r0, r3, #1
 800d13e:	6010      	str	r0, [r2, #0]
 800d140:	7019      	strb	r1, [r3, #0]
 800d142:	4608      	mov	r0, r1
 800d144:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <__sfputs_r>:
 800d14a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14c:	4606      	mov	r6, r0
 800d14e:	460f      	mov	r7, r1
 800d150:	4614      	mov	r4, r2
 800d152:	18d5      	adds	r5, r2, r3
 800d154:	42ac      	cmp	r4, r5
 800d156:	d101      	bne.n	800d15c <__sfputs_r+0x12>
 800d158:	2000      	movs	r0, #0
 800d15a:	e007      	b.n	800d16c <__sfputs_r+0x22>
 800d15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d160:	463a      	mov	r2, r7
 800d162:	4630      	mov	r0, r6
 800d164:	f7ff ffda 	bl	800d11c <__sfputc_r>
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	d1f3      	bne.n	800d154 <__sfputs_r+0xa>
 800d16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d170 <_vfiprintf_r>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	460d      	mov	r5, r1
 800d176:	b09d      	sub	sp, #116	; 0x74
 800d178:	4614      	mov	r4, r2
 800d17a:	4698      	mov	r8, r3
 800d17c:	4606      	mov	r6, r0
 800d17e:	b118      	cbz	r0, 800d188 <_vfiprintf_r+0x18>
 800d180:	6983      	ldr	r3, [r0, #24]
 800d182:	b90b      	cbnz	r3, 800d188 <_vfiprintf_r+0x18>
 800d184:	f000 fb14 	bl	800d7b0 <__sinit>
 800d188:	4b89      	ldr	r3, [pc, #548]	; (800d3b0 <_vfiprintf_r+0x240>)
 800d18a:	429d      	cmp	r5, r3
 800d18c:	d11b      	bne.n	800d1c6 <_vfiprintf_r+0x56>
 800d18e:	6875      	ldr	r5, [r6, #4]
 800d190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d192:	07d9      	lsls	r1, r3, #31
 800d194:	d405      	bmi.n	800d1a2 <_vfiprintf_r+0x32>
 800d196:	89ab      	ldrh	r3, [r5, #12]
 800d198:	059a      	lsls	r2, r3, #22
 800d19a:	d402      	bmi.n	800d1a2 <_vfiprintf_r+0x32>
 800d19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d19e:	f000 fba5 	bl	800d8ec <__retarget_lock_acquire_recursive>
 800d1a2:	89ab      	ldrh	r3, [r5, #12]
 800d1a4:	071b      	lsls	r3, r3, #28
 800d1a6:	d501      	bpl.n	800d1ac <_vfiprintf_r+0x3c>
 800d1a8:	692b      	ldr	r3, [r5, #16]
 800d1aa:	b9eb      	cbnz	r3, 800d1e8 <_vfiprintf_r+0x78>
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f000 f96e 	bl	800d490 <__swsetup_r>
 800d1b4:	b1c0      	cbz	r0, 800d1e8 <_vfiprintf_r+0x78>
 800d1b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1b8:	07dc      	lsls	r4, r3, #31
 800d1ba:	d50e      	bpl.n	800d1da <_vfiprintf_r+0x6a>
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	b01d      	add	sp, #116	; 0x74
 800d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c6:	4b7b      	ldr	r3, [pc, #492]	; (800d3b4 <_vfiprintf_r+0x244>)
 800d1c8:	429d      	cmp	r5, r3
 800d1ca:	d101      	bne.n	800d1d0 <_vfiprintf_r+0x60>
 800d1cc:	68b5      	ldr	r5, [r6, #8]
 800d1ce:	e7df      	b.n	800d190 <_vfiprintf_r+0x20>
 800d1d0:	4b79      	ldr	r3, [pc, #484]	; (800d3b8 <_vfiprintf_r+0x248>)
 800d1d2:	429d      	cmp	r5, r3
 800d1d4:	bf08      	it	eq
 800d1d6:	68f5      	ldreq	r5, [r6, #12]
 800d1d8:	e7da      	b.n	800d190 <_vfiprintf_r+0x20>
 800d1da:	89ab      	ldrh	r3, [r5, #12]
 800d1dc:	0598      	lsls	r0, r3, #22
 800d1de:	d4ed      	bmi.n	800d1bc <_vfiprintf_r+0x4c>
 800d1e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1e2:	f000 fb84 	bl	800d8ee <__retarget_lock_release_recursive>
 800d1e6:	e7e9      	b.n	800d1bc <_vfiprintf_r+0x4c>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ec:	2320      	movs	r3, #32
 800d1ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1f6:	2330      	movs	r3, #48	; 0x30
 800d1f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d3bc <_vfiprintf_r+0x24c>
 800d1fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d200:	f04f 0901 	mov.w	r9, #1
 800d204:	4623      	mov	r3, r4
 800d206:	469a      	mov	sl, r3
 800d208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d20c:	b10a      	cbz	r2, 800d212 <_vfiprintf_r+0xa2>
 800d20e:	2a25      	cmp	r2, #37	; 0x25
 800d210:	d1f9      	bne.n	800d206 <_vfiprintf_r+0x96>
 800d212:	ebba 0b04 	subs.w	fp, sl, r4
 800d216:	d00b      	beq.n	800d230 <_vfiprintf_r+0xc0>
 800d218:	465b      	mov	r3, fp
 800d21a:	4622      	mov	r2, r4
 800d21c:	4629      	mov	r1, r5
 800d21e:	4630      	mov	r0, r6
 800d220:	f7ff ff93 	bl	800d14a <__sfputs_r>
 800d224:	3001      	adds	r0, #1
 800d226:	f000 80aa 	beq.w	800d37e <_vfiprintf_r+0x20e>
 800d22a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d22c:	445a      	add	r2, fp
 800d22e:	9209      	str	r2, [sp, #36]	; 0x24
 800d230:	f89a 3000 	ldrb.w	r3, [sl]
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 80a2 	beq.w	800d37e <_vfiprintf_r+0x20e>
 800d23a:	2300      	movs	r3, #0
 800d23c:	f04f 32ff 	mov.w	r2, #4294967295
 800d240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d244:	f10a 0a01 	add.w	sl, sl, #1
 800d248:	9304      	str	r3, [sp, #16]
 800d24a:	9307      	str	r3, [sp, #28]
 800d24c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d250:	931a      	str	r3, [sp, #104]	; 0x68
 800d252:	4654      	mov	r4, sl
 800d254:	2205      	movs	r2, #5
 800d256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d25a:	4858      	ldr	r0, [pc, #352]	; (800d3bc <_vfiprintf_r+0x24c>)
 800d25c:	f7f2 ffc0 	bl	80001e0 <memchr>
 800d260:	9a04      	ldr	r2, [sp, #16]
 800d262:	b9d8      	cbnz	r0, 800d29c <_vfiprintf_r+0x12c>
 800d264:	06d1      	lsls	r1, r2, #27
 800d266:	bf44      	itt	mi
 800d268:	2320      	movmi	r3, #32
 800d26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d26e:	0713      	lsls	r3, r2, #28
 800d270:	bf44      	itt	mi
 800d272:	232b      	movmi	r3, #43	; 0x2b
 800d274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d278:	f89a 3000 	ldrb.w	r3, [sl]
 800d27c:	2b2a      	cmp	r3, #42	; 0x2a
 800d27e:	d015      	beq.n	800d2ac <_vfiprintf_r+0x13c>
 800d280:	9a07      	ldr	r2, [sp, #28]
 800d282:	4654      	mov	r4, sl
 800d284:	2000      	movs	r0, #0
 800d286:	f04f 0c0a 	mov.w	ip, #10
 800d28a:	4621      	mov	r1, r4
 800d28c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d290:	3b30      	subs	r3, #48	; 0x30
 800d292:	2b09      	cmp	r3, #9
 800d294:	d94e      	bls.n	800d334 <_vfiprintf_r+0x1c4>
 800d296:	b1b0      	cbz	r0, 800d2c6 <_vfiprintf_r+0x156>
 800d298:	9207      	str	r2, [sp, #28]
 800d29a:	e014      	b.n	800d2c6 <_vfiprintf_r+0x156>
 800d29c:	eba0 0308 	sub.w	r3, r0, r8
 800d2a0:	fa09 f303 	lsl.w	r3, r9, r3
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	46a2      	mov	sl, r4
 800d2aa:	e7d2      	b.n	800d252 <_vfiprintf_r+0xe2>
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	1d19      	adds	r1, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	9103      	str	r1, [sp, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bfbb      	ittet	lt
 800d2b8:	425b      	neglt	r3, r3
 800d2ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d2be:	9307      	strge	r3, [sp, #28]
 800d2c0:	9307      	strlt	r3, [sp, #28]
 800d2c2:	bfb8      	it	lt
 800d2c4:	9204      	strlt	r2, [sp, #16]
 800d2c6:	7823      	ldrb	r3, [r4, #0]
 800d2c8:	2b2e      	cmp	r3, #46	; 0x2e
 800d2ca:	d10c      	bne.n	800d2e6 <_vfiprintf_r+0x176>
 800d2cc:	7863      	ldrb	r3, [r4, #1]
 800d2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d2d0:	d135      	bne.n	800d33e <_vfiprintf_r+0x1ce>
 800d2d2:	9b03      	ldr	r3, [sp, #12]
 800d2d4:	1d1a      	adds	r2, r3, #4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	9203      	str	r2, [sp, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	bfb8      	it	lt
 800d2de:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2e2:	3402      	adds	r4, #2
 800d2e4:	9305      	str	r3, [sp, #20]
 800d2e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d3cc <_vfiprintf_r+0x25c>
 800d2ea:	7821      	ldrb	r1, [r4, #0]
 800d2ec:	2203      	movs	r2, #3
 800d2ee:	4650      	mov	r0, sl
 800d2f0:	f7f2 ff76 	bl	80001e0 <memchr>
 800d2f4:	b140      	cbz	r0, 800d308 <_vfiprintf_r+0x198>
 800d2f6:	2340      	movs	r3, #64	; 0x40
 800d2f8:	eba0 000a 	sub.w	r0, r0, sl
 800d2fc:	fa03 f000 	lsl.w	r0, r3, r0
 800d300:	9b04      	ldr	r3, [sp, #16]
 800d302:	4303      	orrs	r3, r0
 800d304:	3401      	adds	r4, #1
 800d306:	9304      	str	r3, [sp, #16]
 800d308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30c:	482c      	ldr	r0, [pc, #176]	; (800d3c0 <_vfiprintf_r+0x250>)
 800d30e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d312:	2206      	movs	r2, #6
 800d314:	f7f2 ff64 	bl	80001e0 <memchr>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d03f      	beq.n	800d39c <_vfiprintf_r+0x22c>
 800d31c:	4b29      	ldr	r3, [pc, #164]	; (800d3c4 <_vfiprintf_r+0x254>)
 800d31e:	bb1b      	cbnz	r3, 800d368 <_vfiprintf_r+0x1f8>
 800d320:	9b03      	ldr	r3, [sp, #12]
 800d322:	3307      	adds	r3, #7
 800d324:	f023 0307 	bic.w	r3, r3, #7
 800d328:	3308      	adds	r3, #8
 800d32a:	9303      	str	r3, [sp, #12]
 800d32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32e:	443b      	add	r3, r7
 800d330:	9309      	str	r3, [sp, #36]	; 0x24
 800d332:	e767      	b.n	800d204 <_vfiprintf_r+0x94>
 800d334:	fb0c 3202 	mla	r2, ip, r2, r3
 800d338:	460c      	mov	r4, r1
 800d33a:	2001      	movs	r0, #1
 800d33c:	e7a5      	b.n	800d28a <_vfiprintf_r+0x11a>
 800d33e:	2300      	movs	r3, #0
 800d340:	3401      	adds	r4, #1
 800d342:	9305      	str	r3, [sp, #20]
 800d344:	4619      	mov	r1, r3
 800d346:	f04f 0c0a 	mov.w	ip, #10
 800d34a:	4620      	mov	r0, r4
 800d34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d350:	3a30      	subs	r2, #48	; 0x30
 800d352:	2a09      	cmp	r2, #9
 800d354:	d903      	bls.n	800d35e <_vfiprintf_r+0x1ee>
 800d356:	2b00      	cmp	r3, #0
 800d358:	d0c5      	beq.n	800d2e6 <_vfiprintf_r+0x176>
 800d35a:	9105      	str	r1, [sp, #20]
 800d35c:	e7c3      	b.n	800d2e6 <_vfiprintf_r+0x176>
 800d35e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d362:	4604      	mov	r4, r0
 800d364:	2301      	movs	r3, #1
 800d366:	e7f0      	b.n	800d34a <_vfiprintf_r+0x1da>
 800d368:	ab03      	add	r3, sp, #12
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	462a      	mov	r2, r5
 800d36e:	4b16      	ldr	r3, [pc, #88]	; (800d3c8 <_vfiprintf_r+0x258>)
 800d370:	a904      	add	r1, sp, #16
 800d372:	4630      	mov	r0, r6
 800d374:	f7fd fe32 	bl	800afdc <_printf_float>
 800d378:	4607      	mov	r7, r0
 800d37a:	1c78      	adds	r0, r7, #1
 800d37c:	d1d6      	bne.n	800d32c <_vfiprintf_r+0x1bc>
 800d37e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d380:	07d9      	lsls	r1, r3, #31
 800d382:	d405      	bmi.n	800d390 <_vfiprintf_r+0x220>
 800d384:	89ab      	ldrh	r3, [r5, #12]
 800d386:	059a      	lsls	r2, r3, #22
 800d388:	d402      	bmi.n	800d390 <_vfiprintf_r+0x220>
 800d38a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d38c:	f000 faaf 	bl	800d8ee <__retarget_lock_release_recursive>
 800d390:	89ab      	ldrh	r3, [r5, #12]
 800d392:	065b      	lsls	r3, r3, #25
 800d394:	f53f af12 	bmi.w	800d1bc <_vfiprintf_r+0x4c>
 800d398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d39a:	e711      	b.n	800d1c0 <_vfiprintf_r+0x50>
 800d39c:	ab03      	add	r3, sp, #12
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	462a      	mov	r2, r5
 800d3a2:	4b09      	ldr	r3, [pc, #36]	; (800d3c8 <_vfiprintf_r+0x258>)
 800d3a4:	a904      	add	r1, sp, #16
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	f7fe f8bc 	bl	800b524 <_printf_i>
 800d3ac:	e7e4      	b.n	800d378 <_vfiprintf_r+0x208>
 800d3ae:	bf00      	nop
 800d3b0:	0800e0f4 	.word	0x0800e0f4
 800d3b4:	0800e114 	.word	0x0800e114
 800d3b8:	0800e0d4 	.word	0x0800e0d4
 800d3bc:	0800df7c 	.word	0x0800df7c
 800d3c0:	0800df86 	.word	0x0800df86
 800d3c4:	0800afdd 	.word	0x0800afdd
 800d3c8:	0800d14b 	.word	0x0800d14b
 800d3cc:	0800df82 	.word	0x0800df82

0800d3d0 <__swbuf_r>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	460e      	mov	r6, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	b118      	cbz	r0, 800d3e2 <__swbuf_r+0x12>
 800d3da:	6983      	ldr	r3, [r0, #24]
 800d3dc:	b90b      	cbnz	r3, 800d3e2 <__swbuf_r+0x12>
 800d3de:	f000 f9e7 	bl	800d7b0 <__sinit>
 800d3e2:	4b21      	ldr	r3, [pc, #132]	; (800d468 <__swbuf_r+0x98>)
 800d3e4:	429c      	cmp	r4, r3
 800d3e6:	d12b      	bne.n	800d440 <__swbuf_r+0x70>
 800d3e8:	686c      	ldr	r4, [r5, #4]
 800d3ea:	69a3      	ldr	r3, [r4, #24]
 800d3ec:	60a3      	str	r3, [r4, #8]
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	071a      	lsls	r2, r3, #28
 800d3f2:	d52f      	bpl.n	800d454 <__swbuf_r+0x84>
 800d3f4:	6923      	ldr	r3, [r4, #16]
 800d3f6:	b36b      	cbz	r3, 800d454 <__swbuf_r+0x84>
 800d3f8:	6923      	ldr	r3, [r4, #16]
 800d3fa:	6820      	ldr	r0, [r4, #0]
 800d3fc:	1ac0      	subs	r0, r0, r3
 800d3fe:	6963      	ldr	r3, [r4, #20]
 800d400:	b2f6      	uxtb	r6, r6
 800d402:	4283      	cmp	r3, r0
 800d404:	4637      	mov	r7, r6
 800d406:	dc04      	bgt.n	800d412 <__swbuf_r+0x42>
 800d408:	4621      	mov	r1, r4
 800d40a:	4628      	mov	r0, r5
 800d40c:	f000 f93c 	bl	800d688 <_fflush_r>
 800d410:	bb30      	cbnz	r0, 800d460 <__swbuf_r+0x90>
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	3b01      	subs	r3, #1
 800d416:	60a3      	str	r3, [r4, #8]
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	1c5a      	adds	r2, r3, #1
 800d41c:	6022      	str	r2, [r4, #0]
 800d41e:	701e      	strb	r6, [r3, #0]
 800d420:	6963      	ldr	r3, [r4, #20]
 800d422:	3001      	adds	r0, #1
 800d424:	4283      	cmp	r3, r0
 800d426:	d004      	beq.n	800d432 <__swbuf_r+0x62>
 800d428:	89a3      	ldrh	r3, [r4, #12]
 800d42a:	07db      	lsls	r3, r3, #31
 800d42c:	d506      	bpl.n	800d43c <__swbuf_r+0x6c>
 800d42e:	2e0a      	cmp	r6, #10
 800d430:	d104      	bne.n	800d43c <__swbuf_r+0x6c>
 800d432:	4621      	mov	r1, r4
 800d434:	4628      	mov	r0, r5
 800d436:	f000 f927 	bl	800d688 <_fflush_r>
 800d43a:	b988      	cbnz	r0, 800d460 <__swbuf_r+0x90>
 800d43c:	4638      	mov	r0, r7
 800d43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d440:	4b0a      	ldr	r3, [pc, #40]	; (800d46c <__swbuf_r+0x9c>)
 800d442:	429c      	cmp	r4, r3
 800d444:	d101      	bne.n	800d44a <__swbuf_r+0x7a>
 800d446:	68ac      	ldr	r4, [r5, #8]
 800d448:	e7cf      	b.n	800d3ea <__swbuf_r+0x1a>
 800d44a:	4b09      	ldr	r3, [pc, #36]	; (800d470 <__swbuf_r+0xa0>)
 800d44c:	429c      	cmp	r4, r3
 800d44e:	bf08      	it	eq
 800d450:	68ec      	ldreq	r4, [r5, #12]
 800d452:	e7ca      	b.n	800d3ea <__swbuf_r+0x1a>
 800d454:	4621      	mov	r1, r4
 800d456:	4628      	mov	r0, r5
 800d458:	f000 f81a 	bl	800d490 <__swsetup_r>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d0cb      	beq.n	800d3f8 <__swbuf_r+0x28>
 800d460:	f04f 37ff 	mov.w	r7, #4294967295
 800d464:	e7ea      	b.n	800d43c <__swbuf_r+0x6c>
 800d466:	bf00      	nop
 800d468:	0800e0f4 	.word	0x0800e0f4
 800d46c:	0800e114 	.word	0x0800e114
 800d470:	0800e0d4 	.word	0x0800e0d4

0800d474 <__ascii_wctomb>:
 800d474:	b149      	cbz	r1, 800d48a <__ascii_wctomb+0x16>
 800d476:	2aff      	cmp	r2, #255	; 0xff
 800d478:	bf85      	ittet	hi
 800d47a:	238a      	movhi	r3, #138	; 0x8a
 800d47c:	6003      	strhi	r3, [r0, #0]
 800d47e:	700a      	strbls	r2, [r1, #0]
 800d480:	f04f 30ff 	movhi.w	r0, #4294967295
 800d484:	bf98      	it	ls
 800d486:	2001      	movls	r0, #1
 800d488:	4770      	bx	lr
 800d48a:	4608      	mov	r0, r1
 800d48c:	4770      	bx	lr
	...

0800d490 <__swsetup_r>:
 800d490:	4b32      	ldr	r3, [pc, #200]	; (800d55c <__swsetup_r+0xcc>)
 800d492:	b570      	push	{r4, r5, r6, lr}
 800d494:	681d      	ldr	r5, [r3, #0]
 800d496:	4606      	mov	r6, r0
 800d498:	460c      	mov	r4, r1
 800d49a:	b125      	cbz	r5, 800d4a6 <__swsetup_r+0x16>
 800d49c:	69ab      	ldr	r3, [r5, #24]
 800d49e:	b913      	cbnz	r3, 800d4a6 <__swsetup_r+0x16>
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f000 f985 	bl	800d7b0 <__sinit>
 800d4a6:	4b2e      	ldr	r3, [pc, #184]	; (800d560 <__swsetup_r+0xd0>)
 800d4a8:	429c      	cmp	r4, r3
 800d4aa:	d10f      	bne.n	800d4cc <__swsetup_r+0x3c>
 800d4ac:	686c      	ldr	r4, [r5, #4]
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4b4:	0719      	lsls	r1, r3, #28
 800d4b6:	d42c      	bmi.n	800d512 <__swsetup_r+0x82>
 800d4b8:	06dd      	lsls	r5, r3, #27
 800d4ba:	d411      	bmi.n	800d4e0 <__swsetup_r+0x50>
 800d4bc:	2309      	movs	r3, #9
 800d4be:	6033      	str	r3, [r6, #0]
 800d4c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4c4:	81a3      	strh	r3, [r4, #12]
 800d4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ca:	e03e      	b.n	800d54a <__swsetup_r+0xba>
 800d4cc:	4b25      	ldr	r3, [pc, #148]	; (800d564 <__swsetup_r+0xd4>)
 800d4ce:	429c      	cmp	r4, r3
 800d4d0:	d101      	bne.n	800d4d6 <__swsetup_r+0x46>
 800d4d2:	68ac      	ldr	r4, [r5, #8]
 800d4d4:	e7eb      	b.n	800d4ae <__swsetup_r+0x1e>
 800d4d6:	4b24      	ldr	r3, [pc, #144]	; (800d568 <__swsetup_r+0xd8>)
 800d4d8:	429c      	cmp	r4, r3
 800d4da:	bf08      	it	eq
 800d4dc:	68ec      	ldreq	r4, [r5, #12]
 800d4de:	e7e6      	b.n	800d4ae <__swsetup_r+0x1e>
 800d4e0:	0758      	lsls	r0, r3, #29
 800d4e2:	d512      	bpl.n	800d50a <__swsetup_r+0x7a>
 800d4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4e6:	b141      	cbz	r1, 800d4fa <__swsetup_r+0x6a>
 800d4e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4ec:	4299      	cmp	r1, r3
 800d4ee:	d002      	beq.n	800d4f6 <__swsetup_r+0x66>
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f7ff fb6f 	bl	800cbd4 <_free_r>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	6363      	str	r3, [r4, #52]	; 0x34
 800d4fa:	89a3      	ldrh	r3, [r4, #12]
 800d4fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d500:	81a3      	strh	r3, [r4, #12]
 800d502:	2300      	movs	r3, #0
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	6923      	ldr	r3, [r4, #16]
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f043 0308 	orr.w	r3, r3, #8
 800d510:	81a3      	strh	r3, [r4, #12]
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	b94b      	cbnz	r3, 800d52a <__swsetup_r+0x9a>
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d51c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d520:	d003      	beq.n	800d52a <__swsetup_r+0x9a>
 800d522:	4621      	mov	r1, r4
 800d524:	4630      	mov	r0, r6
 800d526:	f000 fa07 	bl	800d938 <__smakebuf_r>
 800d52a:	89a0      	ldrh	r0, [r4, #12]
 800d52c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d530:	f010 0301 	ands.w	r3, r0, #1
 800d534:	d00a      	beq.n	800d54c <__swsetup_r+0xbc>
 800d536:	2300      	movs	r3, #0
 800d538:	60a3      	str	r3, [r4, #8]
 800d53a:	6963      	ldr	r3, [r4, #20]
 800d53c:	425b      	negs	r3, r3
 800d53e:	61a3      	str	r3, [r4, #24]
 800d540:	6923      	ldr	r3, [r4, #16]
 800d542:	b943      	cbnz	r3, 800d556 <__swsetup_r+0xc6>
 800d544:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d548:	d1ba      	bne.n	800d4c0 <__swsetup_r+0x30>
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	0781      	lsls	r1, r0, #30
 800d54e:	bf58      	it	pl
 800d550:	6963      	ldrpl	r3, [r4, #20]
 800d552:	60a3      	str	r3, [r4, #8]
 800d554:	e7f4      	b.n	800d540 <__swsetup_r+0xb0>
 800d556:	2000      	movs	r0, #0
 800d558:	e7f7      	b.n	800d54a <__swsetup_r+0xba>
 800d55a:	bf00      	nop
 800d55c:	20000014 	.word	0x20000014
 800d560:	0800e0f4 	.word	0x0800e0f4
 800d564:	0800e114 	.word	0x0800e114
 800d568:	0800e0d4 	.word	0x0800e0d4

0800d56c <abort>:
 800d56c:	b508      	push	{r3, lr}
 800d56e:	2006      	movs	r0, #6
 800d570:	f000 fa52 	bl	800da18 <raise>
 800d574:	2001      	movs	r0, #1
 800d576:	f7f5 fb4f 	bl	8002c18 <_exit>
	...

0800d57c <__sflush_r>:
 800d57c:	898a      	ldrh	r2, [r1, #12]
 800d57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d582:	4605      	mov	r5, r0
 800d584:	0710      	lsls	r0, r2, #28
 800d586:	460c      	mov	r4, r1
 800d588:	d458      	bmi.n	800d63c <__sflush_r+0xc0>
 800d58a:	684b      	ldr	r3, [r1, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dc05      	bgt.n	800d59c <__sflush_r+0x20>
 800d590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d592:	2b00      	cmp	r3, #0
 800d594:	dc02      	bgt.n	800d59c <__sflush_r+0x20>
 800d596:	2000      	movs	r0, #0
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d59e:	2e00      	cmp	r6, #0
 800d5a0:	d0f9      	beq.n	800d596 <__sflush_r+0x1a>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5a8:	682f      	ldr	r7, [r5, #0]
 800d5aa:	602b      	str	r3, [r5, #0]
 800d5ac:	d032      	beq.n	800d614 <__sflush_r+0x98>
 800d5ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	075a      	lsls	r2, r3, #29
 800d5b4:	d505      	bpl.n	800d5c2 <__sflush_r+0x46>
 800d5b6:	6863      	ldr	r3, [r4, #4]
 800d5b8:	1ac0      	subs	r0, r0, r3
 800d5ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5bc:	b10b      	cbz	r3, 800d5c2 <__sflush_r+0x46>
 800d5be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5c0:	1ac0      	subs	r0, r0, r3
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5c8:	6a21      	ldr	r1, [r4, #32]
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	47b0      	blx	r6
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	d106      	bne.n	800d5e2 <__sflush_r+0x66>
 800d5d4:	6829      	ldr	r1, [r5, #0]
 800d5d6:	291d      	cmp	r1, #29
 800d5d8:	d82c      	bhi.n	800d634 <__sflush_r+0xb8>
 800d5da:	4a2a      	ldr	r2, [pc, #168]	; (800d684 <__sflush_r+0x108>)
 800d5dc:	40ca      	lsrs	r2, r1
 800d5de:	07d6      	lsls	r6, r2, #31
 800d5e0:	d528      	bpl.n	800d634 <__sflush_r+0xb8>
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	6062      	str	r2, [r4, #4]
 800d5e6:	04d9      	lsls	r1, r3, #19
 800d5e8:	6922      	ldr	r2, [r4, #16]
 800d5ea:	6022      	str	r2, [r4, #0]
 800d5ec:	d504      	bpl.n	800d5f8 <__sflush_r+0x7c>
 800d5ee:	1c42      	adds	r2, r0, #1
 800d5f0:	d101      	bne.n	800d5f6 <__sflush_r+0x7a>
 800d5f2:	682b      	ldr	r3, [r5, #0]
 800d5f4:	b903      	cbnz	r3, 800d5f8 <__sflush_r+0x7c>
 800d5f6:	6560      	str	r0, [r4, #84]	; 0x54
 800d5f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5fa:	602f      	str	r7, [r5, #0]
 800d5fc:	2900      	cmp	r1, #0
 800d5fe:	d0ca      	beq.n	800d596 <__sflush_r+0x1a>
 800d600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d604:	4299      	cmp	r1, r3
 800d606:	d002      	beq.n	800d60e <__sflush_r+0x92>
 800d608:	4628      	mov	r0, r5
 800d60a:	f7ff fae3 	bl	800cbd4 <_free_r>
 800d60e:	2000      	movs	r0, #0
 800d610:	6360      	str	r0, [r4, #52]	; 0x34
 800d612:	e7c1      	b.n	800d598 <__sflush_r+0x1c>
 800d614:	6a21      	ldr	r1, [r4, #32]
 800d616:	2301      	movs	r3, #1
 800d618:	4628      	mov	r0, r5
 800d61a:	47b0      	blx	r6
 800d61c:	1c41      	adds	r1, r0, #1
 800d61e:	d1c7      	bne.n	800d5b0 <__sflush_r+0x34>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0c4      	beq.n	800d5b0 <__sflush_r+0x34>
 800d626:	2b1d      	cmp	r3, #29
 800d628:	d001      	beq.n	800d62e <__sflush_r+0xb2>
 800d62a:	2b16      	cmp	r3, #22
 800d62c:	d101      	bne.n	800d632 <__sflush_r+0xb6>
 800d62e:	602f      	str	r7, [r5, #0]
 800d630:	e7b1      	b.n	800d596 <__sflush_r+0x1a>
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d638:	81a3      	strh	r3, [r4, #12]
 800d63a:	e7ad      	b.n	800d598 <__sflush_r+0x1c>
 800d63c:	690f      	ldr	r7, [r1, #16]
 800d63e:	2f00      	cmp	r7, #0
 800d640:	d0a9      	beq.n	800d596 <__sflush_r+0x1a>
 800d642:	0793      	lsls	r3, r2, #30
 800d644:	680e      	ldr	r6, [r1, #0]
 800d646:	bf08      	it	eq
 800d648:	694b      	ldreq	r3, [r1, #20]
 800d64a:	600f      	str	r7, [r1, #0]
 800d64c:	bf18      	it	ne
 800d64e:	2300      	movne	r3, #0
 800d650:	eba6 0807 	sub.w	r8, r6, r7
 800d654:	608b      	str	r3, [r1, #8]
 800d656:	f1b8 0f00 	cmp.w	r8, #0
 800d65a:	dd9c      	ble.n	800d596 <__sflush_r+0x1a>
 800d65c:	6a21      	ldr	r1, [r4, #32]
 800d65e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d660:	4643      	mov	r3, r8
 800d662:	463a      	mov	r2, r7
 800d664:	4628      	mov	r0, r5
 800d666:	47b0      	blx	r6
 800d668:	2800      	cmp	r0, #0
 800d66a:	dc06      	bgt.n	800d67a <__sflush_r+0xfe>
 800d66c:	89a3      	ldrh	r3, [r4, #12]
 800d66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d672:	81a3      	strh	r3, [r4, #12]
 800d674:	f04f 30ff 	mov.w	r0, #4294967295
 800d678:	e78e      	b.n	800d598 <__sflush_r+0x1c>
 800d67a:	4407      	add	r7, r0
 800d67c:	eba8 0800 	sub.w	r8, r8, r0
 800d680:	e7e9      	b.n	800d656 <__sflush_r+0xda>
 800d682:	bf00      	nop
 800d684:	20400001 	.word	0x20400001

0800d688 <_fflush_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	690b      	ldr	r3, [r1, #16]
 800d68c:	4605      	mov	r5, r0
 800d68e:	460c      	mov	r4, r1
 800d690:	b913      	cbnz	r3, 800d698 <_fflush_r+0x10>
 800d692:	2500      	movs	r5, #0
 800d694:	4628      	mov	r0, r5
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	b118      	cbz	r0, 800d6a2 <_fflush_r+0x1a>
 800d69a:	6983      	ldr	r3, [r0, #24]
 800d69c:	b90b      	cbnz	r3, 800d6a2 <_fflush_r+0x1a>
 800d69e:	f000 f887 	bl	800d7b0 <__sinit>
 800d6a2:	4b14      	ldr	r3, [pc, #80]	; (800d6f4 <_fflush_r+0x6c>)
 800d6a4:	429c      	cmp	r4, r3
 800d6a6:	d11b      	bne.n	800d6e0 <_fflush_r+0x58>
 800d6a8:	686c      	ldr	r4, [r5, #4]
 800d6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0ef      	beq.n	800d692 <_fflush_r+0xa>
 800d6b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6b4:	07d0      	lsls	r0, r2, #31
 800d6b6:	d404      	bmi.n	800d6c2 <_fflush_r+0x3a>
 800d6b8:	0599      	lsls	r1, r3, #22
 800d6ba:	d402      	bmi.n	800d6c2 <_fflush_r+0x3a>
 800d6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6be:	f000 f915 	bl	800d8ec <__retarget_lock_acquire_recursive>
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	f7ff ff59 	bl	800d57c <__sflush_r>
 800d6ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6cc:	07da      	lsls	r2, r3, #31
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	d4e0      	bmi.n	800d694 <_fflush_r+0xc>
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	059b      	lsls	r3, r3, #22
 800d6d6:	d4dd      	bmi.n	800d694 <_fflush_r+0xc>
 800d6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6da:	f000 f908 	bl	800d8ee <__retarget_lock_release_recursive>
 800d6de:	e7d9      	b.n	800d694 <_fflush_r+0xc>
 800d6e0:	4b05      	ldr	r3, [pc, #20]	; (800d6f8 <_fflush_r+0x70>)
 800d6e2:	429c      	cmp	r4, r3
 800d6e4:	d101      	bne.n	800d6ea <_fflush_r+0x62>
 800d6e6:	68ac      	ldr	r4, [r5, #8]
 800d6e8:	e7df      	b.n	800d6aa <_fflush_r+0x22>
 800d6ea:	4b04      	ldr	r3, [pc, #16]	; (800d6fc <_fflush_r+0x74>)
 800d6ec:	429c      	cmp	r4, r3
 800d6ee:	bf08      	it	eq
 800d6f0:	68ec      	ldreq	r4, [r5, #12]
 800d6f2:	e7da      	b.n	800d6aa <_fflush_r+0x22>
 800d6f4:	0800e0f4 	.word	0x0800e0f4
 800d6f8:	0800e114 	.word	0x0800e114
 800d6fc:	0800e0d4 	.word	0x0800e0d4

0800d700 <std>:
 800d700:	2300      	movs	r3, #0
 800d702:	b510      	push	{r4, lr}
 800d704:	4604      	mov	r4, r0
 800d706:	e9c0 3300 	strd	r3, r3, [r0]
 800d70a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d70e:	6083      	str	r3, [r0, #8]
 800d710:	8181      	strh	r1, [r0, #12]
 800d712:	6643      	str	r3, [r0, #100]	; 0x64
 800d714:	81c2      	strh	r2, [r0, #14]
 800d716:	6183      	str	r3, [r0, #24]
 800d718:	4619      	mov	r1, r3
 800d71a:	2208      	movs	r2, #8
 800d71c:	305c      	adds	r0, #92	; 0x5c
 800d71e:	f7fd fbb5 	bl	800ae8c <memset>
 800d722:	4b05      	ldr	r3, [pc, #20]	; (800d738 <std+0x38>)
 800d724:	6263      	str	r3, [r4, #36]	; 0x24
 800d726:	4b05      	ldr	r3, [pc, #20]	; (800d73c <std+0x3c>)
 800d728:	62a3      	str	r3, [r4, #40]	; 0x28
 800d72a:	4b05      	ldr	r3, [pc, #20]	; (800d740 <std+0x40>)
 800d72c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d72e:	4b05      	ldr	r3, [pc, #20]	; (800d744 <std+0x44>)
 800d730:	6224      	str	r4, [r4, #32]
 800d732:	6323      	str	r3, [r4, #48]	; 0x30
 800d734:	bd10      	pop	{r4, pc}
 800d736:	bf00      	nop
 800d738:	0800da51 	.word	0x0800da51
 800d73c:	0800da73 	.word	0x0800da73
 800d740:	0800daab 	.word	0x0800daab
 800d744:	0800dacf 	.word	0x0800dacf

0800d748 <_cleanup_r>:
 800d748:	4901      	ldr	r1, [pc, #4]	; (800d750 <_cleanup_r+0x8>)
 800d74a:	f000 b8af 	b.w	800d8ac <_fwalk_reent>
 800d74e:	bf00      	nop
 800d750:	0800d689 	.word	0x0800d689

0800d754 <__sfmoreglue>:
 800d754:	b570      	push	{r4, r5, r6, lr}
 800d756:	1e4a      	subs	r2, r1, #1
 800d758:	2568      	movs	r5, #104	; 0x68
 800d75a:	4355      	muls	r5, r2
 800d75c:	460e      	mov	r6, r1
 800d75e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d762:	f7ff fa87 	bl	800cc74 <_malloc_r>
 800d766:	4604      	mov	r4, r0
 800d768:	b140      	cbz	r0, 800d77c <__sfmoreglue+0x28>
 800d76a:	2100      	movs	r1, #0
 800d76c:	e9c0 1600 	strd	r1, r6, [r0]
 800d770:	300c      	adds	r0, #12
 800d772:	60a0      	str	r0, [r4, #8]
 800d774:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d778:	f7fd fb88 	bl	800ae8c <memset>
 800d77c:	4620      	mov	r0, r4
 800d77e:	bd70      	pop	{r4, r5, r6, pc}

0800d780 <__sfp_lock_acquire>:
 800d780:	4801      	ldr	r0, [pc, #4]	; (800d788 <__sfp_lock_acquire+0x8>)
 800d782:	f000 b8b3 	b.w	800d8ec <__retarget_lock_acquire_recursive>
 800d786:	bf00      	nop
 800d788:	20008888 	.word	0x20008888

0800d78c <__sfp_lock_release>:
 800d78c:	4801      	ldr	r0, [pc, #4]	; (800d794 <__sfp_lock_release+0x8>)
 800d78e:	f000 b8ae 	b.w	800d8ee <__retarget_lock_release_recursive>
 800d792:	bf00      	nop
 800d794:	20008888 	.word	0x20008888

0800d798 <__sinit_lock_acquire>:
 800d798:	4801      	ldr	r0, [pc, #4]	; (800d7a0 <__sinit_lock_acquire+0x8>)
 800d79a:	f000 b8a7 	b.w	800d8ec <__retarget_lock_acquire_recursive>
 800d79e:	bf00      	nop
 800d7a0:	20008883 	.word	0x20008883

0800d7a4 <__sinit_lock_release>:
 800d7a4:	4801      	ldr	r0, [pc, #4]	; (800d7ac <__sinit_lock_release+0x8>)
 800d7a6:	f000 b8a2 	b.w	800d8ee <__retarget_lock_release_recursive>
 800d7aa:	bf00      	nop
 800d7ac:	20008883 	.word	0x20008883

0800d7b0 <__sinit>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	f7ff fff0 	bl	800d798 <__sinit_lock_acquire>
 800d7b8:	69a3      	ldr	r3, [r4, #24]
 800d7ba:	b11b      	cbz	r3, 800d7c4 <__sinit+0x14>
 800d7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7c0:	f7ff bff0 	b.w	800d7a4 <__sinit_lock_release>
 800d7c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7c8:	6523      	str	r3, [r4, #80]	; 0x50
 800d7ca:	4b13      	ldr	r3, [pc, #76]	; (800d818 <__sinit+0x68>)
 800d7cc:	4a13      	ldr	r2, [pc, #76]	; (800d81c <__sinit+0x6c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d7d2:	42a3      	cmp	r3, r4
 800d7d4:	bf04      	itt	eq
 800d7d6:	2301      	moveq	r3, #1
 800d7d8:	61a3      	streq	r3, [r4, #24]
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f000 f820 	bl	800d820 <__sfp>
 800d7e0:	6060      	str	r0, [r4, #4]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f000 f81c 	bl	800d820 <__sfp>
 800d7e8:	60a0      	str	r0, [r4, #8]
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 f818 	bl	800d820 <__sfp>
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	60e0      	str	r0, [r4, #12]
 800d7f4:	2104      	movs	r1, #4
 800d7f6:	6860      	ldr	r0, [r4, #4]
 800d7f8:	f7ff ff82 	bl	800d700 <std>
 800d7fc:	68a0      	ldr	r0, [r4, #8]
 800d7fe:	2201      	movs	r2, #1
 800d800:	2109      	movs	r1, #9
 800d802:	f7ff ff7d 	bl	800d700 <std>
 800d806:	68e0      	ldr	r0, [r4, #12]
 800d808:	2202      	movs	r2, #2
 800d80a:	2112      	movs	r1, #18
 800d80c:	f7ff ff78 	bl	800d700 <std>
 800d810:	2301      	movs	r3, #1
 800d812:	61a3      	str	r3, [r4, #24]
 800d814:	e7d2      	b.n	800d7bc <__sinit+0xc>
 800d816:	bf00      	nop
 800d818:	0800dd50 	.word	0x0800dd50
 800d81c:	0800d749 	.word	0x0800d749

0800d820 <__sfp>:
 800d820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d822:	4607      	mov	r7, r0
 800d824:	f7ff ffac 	bl	800d780 <__sfp_lock_acquire>
 800d828:	4b1e      	ldr	r3, [pc, #120]	; (800d8a4 <__sfp+0x84>)
 800d82a:	681e      	ldr	r6, [r3, #0]
 800d82c:	69b3      	ldr	r3, [r6, #24]
 800d82e:	b913      	cbnz	r3, 800d836 <__sfp+0x16>
 800d830:	4630      	mov	r0, r6
 800d832:	f7ff ffbd 	bl	800d7b0 <__sinit>
 800d836:	3648      	adds	r6, #72	; 0x48
 800d838:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	d503      	bpl.n	800d848 <__sfp+0x28>
 800d840:	6833      	ldr	r3, [r6, #0]
 800d842:	b30b      	cbz	r3, 800d888 <__sfp+0x68>
 800d844:	6836      	ldr	r6, [r6, #0]
 800d846:	e7f7      	b.n	800d838 <__sfp+0x18>
 800d848:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d84c:	b9d5      	cbnz	r5, 800d884 <__sfp+0x64>
 800d84e:	4b16      	ldr	r3, [pc, #88]	; (800d8a8 <__sfp+0x88>)
 800d850:	60e3      	str	r3, [r4, #12]
 800d852:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d856:	6665      	str	r5, [r4, #100]	; 0x64
 800d858:	f000 f847 	bl	800d8ea <__retarget_lock_init_recursive>
 800d85c:	f7ff ff96 	bl	800d78c <__sfp_lock_release>
 800d860:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d864:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d868:	6025      	str	r5, [r4, #0]
 800d86a:	61a5      	str	r5, [r4, #24]
 800d86c:	2208      	movs	r2, #8
 800d86e:	4629      	mov	r1, r5
 800d870:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d874:	f7fd fb0a 	bl	800ae8c <memset>
 800d878:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d87c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d880:	4620      	mov	r0, r4
 800d882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d884:	3468      	adds	r4, #104	; 0x68
 800d886:	e7d9      	b.n	800d83c <__sfp+0x1c>
 800d888:	2104      	movs	r1, #4
 800d88a:	4638      	mov	r0, r7
 800d88c:	f7ff ff62 	bl	800d754 <__sfmoreglue>
 800d890:	4604      	mov	r4, r0
 800d892:	6030      	str	r0, [r6, #0]
 800d894:	2800      	cmp	r0, #0
 800d896:	d1d5      	bne.n	800d844 <__sfp+0x24>
 800d898:	f7ff ff78 	bl	800d78c <__sfp_lock_release>
 800d89c:	230c      	movs	r3, #12
 800d89e:	603b      	str	r3, [r7, #0]
 800d8a0:	e7ee      	b.n	800d880 <__sfp+0x60>
 800d8a2:	bf00      	nop
 800d8a4:	0800dd50 	.word	0x0800dd50
 800d8a8:	ffff0001 	.word	0xffff0001

0800d8ac <_fwalk_reent>:
 800d8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8b0:	4606      	mov	r6, r0
 800d8b2:	4688      	mov	r8, r1
 800d8b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8b8:	2700      	movs	r7, #0
 800d8ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8be:	f1b9 0901 	subs.w	r9, r9, #1
 800d8c2:	d505      	bpl.n	800d8d0 <_fwalk_reent+0x24>
 800d8c4:	6824      	ldr	r4, [r4, #0]
 800d8c6:	2c00      	cmp	r4, #0
 800d8c8:	d1f7      	bne.n	800d8ba <_fwalk_reent+0xe>
 800d8ca:	4638      	mov	r0, r7
 800d8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d0:	89ab      	ldrh	r3, [r5, #12]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d907      	bls.n	800d8e6 <_fwalk_reent+0x3a>
 800d8d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	d003      	beq.n	800d8e6 <_fwalk_reent+0x3a>
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	47c0      	blx	r8
 800d8e4:	4307      	orrs	r7, r0
 800d8e6:	3568      	adds	r5, #104	; 0x68
 800d8e8:	e7e9      	b.n	800d8be <_fwalk_reent+0x12>

0800d8ea <__retarget_lock_init_recursive>:
 800d8ea:	4770      	bx	lr

0800d8ec <__retarget_lock_acquire_recursive>:
 800d8ec:	4770      	bx	lr

0800d8ee <__retarget_lock_release_recursive>:
 800d8ee:	4770      	bx	lr

0800d8f0 <__swhatbuf_r>:
 800d8f0:	b570      	push	{r4, r5, r6, lr}
 800d8f2:	460e      	mov	r6, r1
 800d8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f8:	2900      	cmp	r1, #0
 800d8fa:	b096      	sub	sp, #88	; 0x58
 800d8fc:	4614      	mov	r4, r2
 800d8fe:	461d      	mov	r5, r3
 800d900:	da07      	bge.n	800d912 <__swhatbuf_r+0x22>
 800d902:	2300      	movs	r3, #0
 800d904:	602b      	str	r3, [r5, #0]
 800d906:	89b3      	ldrh	r3, [r6, #12]
 800d908:	061a      	lsls	r2, r3, #24
 800d90a:	d410      	bmi.n	800d92e <__swhatbuf_r+0x3e>
 800d90c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d910:	e00e      	b.n	800d930 <__swhatbuf_r+0x40>
 800d912:	466a      	mov	r2, sp
 800d914:	f000 f902 	bl	800db1c <_fstat_r>
 800d918:	2800      	cmp	r0, #0
 800d91a:	dbf2      	blt.n	800d902 <__swhatbuf_r+0x12>
 800d91c:	9a01      	ldr	r2, [sp, #4]
 800d91e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d922:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d926:	425a      	negs	r2, r3
 800d928:	415a      	adcs	r2, r3
 800d92a:	602a      	str	r2, [r5, #0]
 800d92c:	e7ee      	b.n	800d90c <__swhatbuf_r+0x1c>
 800d92e:	2340      	movs	r3, #64	; 0x40
 800d930:	2000      	movs	r0, #0
 800d932:	6023      	str	r3, [r4, #0]
 800d934:	b016      	add	sp, #88	; 0x58
 800d936:	bd70      	pop	{r4, r5, r6, pc}

0800d938 <__smakebuf_r>:
 800d938:	898b      	ldrh	r3, [r1, #12]
 800d93a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d93c:	079d      	lsls	r5, r3, #30
 800d93e:	4606      	mov	r6, r0
 800d940:	460c      	mov	r4, r1
 800d942:	d507      	bpl.n	800d954 <__smakebuf_r+0x1c>
 800d944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d948:	6023      	str	r3, [r4, #0]
 800d94a:	6123      	str	r3, [r4, #16]
 800d94c:	2301      	movs	r3, #1
 800d94e:	6163      	str	r3, [r4, #20]
 800d950:	b002      	add	sp, #8
 800d952:	bd70      	pop	{r4, r5, r6, pc}
 800d954:	ab01      	add	r3, sp, #4
 800d956:	466a      	mov	r2, sp
 800d958:	f7ff ffca 	bl	800d8f0 <__swhatbuf_r>
 800d95c:	9900      	ldr	r1, [sp, #0]
 800d95e:	4605      	mov	r5, r0
 800d960:	4630      	mov	r0, r6
 800d962:	f7ff f987 	bl	800cc74 <_malloc_r>
 800d966:	b948      	cbnz	r0, 800d97c <__smakebuf_r+0x44>
 800d968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96c:	059a      	lsls	r2, r3, #22
 800d96e:	d4ef      	bmi.n	800d950 <__smakebuf_r+0x18>
 800d970:	f023 0303 	bic.w	r3, r3, #3
 800d974:	f043 0302 	orr.w	r3, r3, #2
 800d978:	81a3      	strh	r3, [r4, #12]
 800d97a:	e7e3      	b.n	800d944 <__smakebuf_r+0xc>
 800d97c:	4b0d      	ldr	r3, [pc, #52]	; (800d9b4 <__smakebuf_r+0x7c>)
 800d97e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d980:	89a3      	ldrh	r3, [r4, #12]
 800d982:	6020      	str	r0, [r4, #0]
 800d984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d988:	81a3      	strh	r3, [r4, #12]
 800d98a:	9b00      	ldr	r3, [sp, #0]
 800d98c:	6163      	str	r3, [r4, #20]
 800d98e:	9b01      	ldr	r3, [sp, #4]
 800d990:	6120      	str	r0, [r4, #16]
 800d992:	b15b      	cbz	r3, 800d9ac <__smakebuf_r+0x74>
 800d994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d998:	4630      	mov	r0, r6
 800d99a:	f000 f8d1 	bl	800db40 <_isatty_r>
 800d99e:	b128      	cbz	r0, 800d9ac <__smakebuf_r+0x74>
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	f023 0303 	bic.w	r3, r3, #3
 800d9a6:	f043 0301 	orr.w	r3, r3, #1
 800d9aa:	81a3      	strh	r3, [r4, #12]
 800d9ac:	89a0      	ldrh	r0, [r4, #12]
 800d9ae:	4305      	orrs	r5, r0
 800d9b0:	81a5      	strh	r5, [r4, #12]
 800d9b2:	e7cd      	b.n	800d950 <__smakebuf_r+0x18>
 800d9b4:	0800d749 	.word	0x0800d749

0800d9b8 <_malloc_usable_size_r>:
 800d9b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9bc:	1f18      	subs	r0, r3, #4
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bfbc      	itt	lt
 800d9c2:	580b      	ldrlt	r3, [r1, r0]
 800d9c4:	18c0      	addlt	r0, r0, r3
 800d9c6:	4770      	bx	lr

0800d9c8 <_raise_r>:
 800d9c8:	291f      	cmp	r1, #31
 800d9ca:	b538      	push	{r3, r4, r5, lr}
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	460d      	mov	r5, r1
 800d9d0:	d904      	bls.n	800d9dc <_raise_r+0x14>
 800d9d2:	2316      	movs	r3, #22
 800d9d4:	6003      	str	r3, [r0, #0]
 800d9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9de:	b112      	cbz	r2, 800d9e6 <_raise_r+0x1e>
 800d9e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9e4:	b94b      	cbnz	r3, 800d9fa <_raise_r+0x32>
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f000 f830 	bl	800da4c <_getpid_r>
 800d9ec:	462a      	mov	r2, r5
 800d9ee:	4601      	mov	r1, r0
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9f6:	f000 b817 	b.w	800da28 <_kill_r>
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d00a      	beq.n	800da14 <_raise_r+0x4c>
 800d9fe:	1c59      	adds	r1, r3, #1
 800da00:	d103      	bne.n	800da0a <_raise_r+0x42>
 800da02:	2316      	movs	r3, #22
 800da04:	6003      	str	r3, [r0, #0]
 800da06:	2001      	movs	r0, #1
 800da08:	e7e7      	b.n	800d9da <_raise_r+0x12>
 800da0a:	2400      	movs	r4, #0
 800da0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da10:	4628      	mov	r0, r5
 800da12:	4798      	blx	r3
 800da14:	2000      	movs	r0, #0
 800da16:	e7e0      	b.n	800d9da <_raise_r+0x12>

0800da18 <raise>:
 800da18:	4b02      	ldr	r3, [pc, #8]	; (800da24 <raise+0xc>)
 800da1a:	4601      	mov	r1, r0
 800da1c:	6818      	ldr	r0, [r3, #0]
 800da1e:	f7ff bfd3 	b.w	800d9c8 <_raise_r>
 800da22:	bf00      	nop
 800da24:	20000014 	.word	0x20000014

0800da28 <_kill_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4d07      	ldr	r5, [pc, #28]	; (800da48 <_kill_r+0x20>)
 800da2c:	2300      	movs	r3, #0
 800da2e:	4604      	mov	r4, r0
 800da30:	4608      	mov	r0, r1
 800da32:	4611      	mov	r1, r2
 800da34:	602b      	str	r3, [r5, #0]
 800da36:	f7f5 f8df 	bl	8002bf8 <_kill>
 800da3a:	1c43      	adds	r3, r0, #1
 800da3c:	d102      	bne.n	800da44 <_kill_r+0x1c>
 800da3e:	682b      	ldr	r3, [r5, #0]
 800da40:	b103      	cbz	r3, 800da44 <_kill_r+0x1c>
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	bd38      	pop	{r3, r4, r5, pc}
 800da46:	bf00      	nop
 800da48:	2000887c 	.word	0x2000887c

0800da4c <_getpid_r>:
 800da4c:	f7f5 b8cc 	b.w	8002be8 <_getpid>

0800da50 <__sread>:
 800da50:	b510      	push	{r4, lr}
 800da52:	460c      	mov	r4, r1
 800da54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da58:	f000 f894 	bl	800db84 <_read_r>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	bfab      	itete	ge
 800da60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da62:	89a3      	ldrhlt	r3, [r4, #12]
 800da64:	181b      	addge	r3, r3, r0
 800da66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da6a:	bfac      	ite	ge
 800da6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800da6e:	81a3      	strhlt	r3, [r4, #12]
 800da70:	bd10      	pop	{r4, pc}

0800da72 <__swrite>:
 800da72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da76:	461f      	mov	r7, r3
 800da78:	898b      	ldrh	r3, [r1, #12]
 800da7a:	05db      	lsls	r3, r3, #23
 800da7c:	4605      	mov	r5, r0
 800da7e:	460c      	mov	r4, r1
 800da80:	4616      	mov	r6, r2
 800da82:	d505      	bpl.n	800da90 <__swrite+0x1e>
 800da84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da88:	2302      	movs	r3, #2
 800da8a:	2200      	movs	r2, #0
 800da8c:	f000 f868 	bl	800db60 <_lseek_r>
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da9a:	81a3      	strh	r3, [r4, #12]
 800da9c:	4632      	mov	r2, r6
 800da9e:	463b      	mov	r3, r7
 800daa0:	4628      	mov	r0, r5
 800daa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daa6:	f000 b817 	b.w	800dad8 <_write_r>

0800daaa <__sseek>:
 800daaa:	b510      	push	{r4, lr}
 800daac:	460c      	mov	r4, r1
 800daae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab2:	f000 f855 	bl	800db60 <_lseek_r>
 800dab6:	1c43      	adds	r3, r0, #1
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	bf15      	itete	ne
 800dabc:	6560      	strne	r0, [r4, #84]	; 0x54
 800dabe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dac6:	81a3      	strheq	r3, [r4, #12]
 800dac8:	bf18      	it	ne
 800daca:	81a3      	strhne	r3, [r4, #12]
 800dacc:	bd10      	pop	{r4, pc}

0800dace <__sclose>:
 800dace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad2:	f000 b813 	b.w	800dafc <_close_r>
	...

0800dad8 <_write_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d07      	ldr	r5, [pc, #28]	; (800daf8 <_write_r+0x20>)
 800dadc:	4604      	mov	r4, r0
 800dade:	4608      	mov	r0, r1
 800dae0:	4611      	mov	r1, r2
 800dae2:	2200      	movs	r2, #0
 800dae4:	602a      	str	r2, [r5, #0]
 800dae6:	461a      	mov	r2, r3
 800dae8:	f7f5 f8bd 	bl	8002c66 <_write>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_write_r+0x1e>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_write_r+0x1e>
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	2000887c 	.word	0x2000887c

0800dafc <_close_r>:
 800dafc:	b538      	push	{r3, r4, r5, lr}
 800dafe:	4d06      	ldr	r5, [pc, #24]	; (800db18 <_close_r+0x1c>)
 800db00:	2300      	movs	r3, #0
 800db02:	4604      	mov	r4, r0
 800db04:	4608      	mov	r0, r1
 800db06:	602b      	str	r3, [r5, #0]
 800db08:	f7f5 f8c9 	bl	8002c9e <_close>
 800db0c:	1c43      	adds	r3, r0, #1
 800db0e:	d102      	bne.n	800db16 <_close_r+0x1a>
 800db10:	682b      	ldr	r3, [r5, #0]
 800db12:	b103      	cbz	r3, 800db16 <_close_r+0x1a>
 800db14:	6023      	str	r3, [r4, #0]
 800db16:	bd38      	pop	{r3, r4, r5, pc}
 800db18:	2000887c 	.word	0x2000887c

0800db1c <_fstat_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4d07      	ldr	r5, [pc, #28]	; (800db3c <_fstat_r+0x20>)
 800db20:	2300      	movs	r3, #0
 800db22:	4604      	mov	r4, r0
 800db24:	4608      	mov	r0, r1
 800db26:	4611      	mov	r1, r2
 800db28:	602b      	str	r3, [r5, #0]
 800db2a:	f7f5 f8c4 	bl	8002cb6 <_fstat>
 800db2e:	1c43      	adds	r3, r0, #1
 800db30:	d102      	bne.n	800db38 <_fstat_r+0x1c>
 800db32:	682b      	ldr	r3, [r5, #0]
 800db34:	b103      	cbz	r3, 800db38 <_fstat_r+0x1c>
 800db36:	6023      	str	r3, [r4, #0]
 800db38:	bd38      	pop	{r3, r4, r5, pc}
 800db3a:	bf00      	nop
 800db3c:	2000887c 	.word	0x2000887c

0800db40 <_isatty_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	4d06      	ldr	r5, [pc, #24]	; (800db5c <_isatty_r+0x1c>)
 800db44:	2300      	movs	r3, #0
 800db46:	4604      	mov	r4, r0
 800db48:	4608      	mov	r0, r1
 800db4a:	602b      	str	r3, [r5, #0]
 800db4c:	f7f5 f8c3 	bl	8002cd6 <_isatty>
 800db50:	1c43      	adds	r3, r0, #1
 800db52:	d102      	bne.n	800db5a <_isatty_r+0x1a>
 800db54:	682b      	ldr	r3, [r5, #0]
 800db56:	b103      	cbz	r3, 800db5a <_isatty_r+0x1a>
 800db58:	6023      	str	r3, [r4, #0]
 800db5a:	bd38      	pop	{r3, r4, r5, pc}
 800db5c:	2000887c 	.word	0x2000887c

0800db60 <_lseek_r>:
 800db60:	b538      	push	{r3, r4, r5, lr}
 800db62:	4d07      	ldr	r5, [pc, #28]	; (800db80 <_lseek_r+0x20>)
 800db64:	4604      	mov	r4, r0
 800db66:	4608      	mov	r0, r1
 800db68:	4611      	mov	r1, r2
 800db6a:	2200      	movs	r2, #0
 800db6c:	602a      	str	r2, [r5, #0]
 800db6e:	461a      	mov	r2, r3
 800db70:	f7f5 f8bc 	bl	8002cec <_lseek>
 800db74:	1c43      	adds	r3, r0, #1
 800db76:	d102      	bne.n	800db7e <_lseek_r+0x1e>
 800db78:	682b      	ldr	r3, [r5, #0]
 800db7a:	b103      	cbz	r3, 800db7e <_lseek_r+0x1e>
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	bd38      	pop	{r3, r4, r5, pc}
 800db80:	2000887c 	.word	0x2000887c

0800db84 <_read_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	4d07      	ldr	r5, [pc, #28]	; (800dba4 <_read_r+0x20>)
 800db88:	4604      	mov	r4, r0
 800db8a:	4608      	mov	r0, r1
 800db8c:	4611      	mov	r1, r2
 800db8e:	2200      	movs	r2, #0
 800db90:	602a      	str	r2, [r5, #0]
 800db92:	461a      	mov	r2, r3
 800db94:	f7f5 f84a 	bl	8002c2c <_read>
 800db98:	1c43      	adds	r3, r0, #1
 800db9a:	d102      	bne.n	800dba2 <_read_r+0x1e>
 800db9c:	682b      	ldr	r3, [r5, #0]
 800db9e:	b103      	cbz	r3, 800dba2 <_read_r+0x1e>
 800dba0:	6023      	str	r3, [r4, #0]
 800dba2:	bd38      	pop	{r3, r4, r5, pc}
 800dba4:	2000887c 	.word	0x2000887c

0800dba8 <_init>:
 800dba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbaa:	bf00      	nop
 800dbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbae:	bc08      	pop	{r3}
 800dbb0:	469e      	mov	lr, r3
 800dbb2:	4770      	bx	lr

0800dbb4 <_fini>:
 800dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb6:	bf00      	nop
 800dbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbba:	bc08      	pop	{r3}
 800dbbc:	469e      	mov	lr, r3
 800dbbe:	4770      	bx	lr
