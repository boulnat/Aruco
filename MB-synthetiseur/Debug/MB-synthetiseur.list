
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800c960  0800c960  0001c960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce64  0800ce64  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce64  0800ce64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce6c  0800ce6c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce6c  0800ce6c  0001ce6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce70  0800ce70  0001ce70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ce74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000858c  200001e4  0800d058  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008770  0800d058  00028770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029f08  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b0c  00000000  00000000  0004a11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  0004ec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da0  00000000  00000000  00050b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002686d  00000000  00000000  00052930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021657  00000000  00000000  0007919d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebaf8  00000000  00000000  0009a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001862ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009738  00000000  00000000  00186340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c948 	.word	0x0800c948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800c948 	.word	0x0800c948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <readChannel>:
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <AS7341.h>

uint16_t readChannel(I2C_HandleTypeDef *hi2c1, as7341_adc_channel_t channel) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]

	uint8_t read[2];
	uint16_t read16bits = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	81fb      	strh	r3, [r7, #14]

	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, &channel, 1, HAL_MAX_DELAY) != HAL_OK);
 8000eb0:	bf00      	nop
 8000eb2:	1cfa      	adds	r2, r7, #3
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	2172      	movs	r1, #114	; 0x72
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f002 ff1a 	bl	8003cf8 <HAL_I2C_Master_Transmit>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f3      	bne.n	8000eb2 <readChannel+0x12>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 8000eca:	bf00      	nop
 8000ecc:	23c8      	movs	r3, #200	; 0xc8
 8000ece:	220a      	movs	r2, #10
 8000ed0:	2172      	movs	r1, #114	; 0x72
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f003 f8fa 	bl	80040cc <HAL_I2C_IsDeviceReady>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f6      	bne.n	8000ecc <readChannel+0x2c>
	while(HAL_I2C_Master_Receive(hi2c1, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 8000ede:	bf00      	nop
 8000ee0:	f107 020c 	add.w	r2, r7, #12
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2302      	movs	r3, #2
 8000eec:	2172      	movs	r1, #114	; 0x72
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f002 fff6 	bl	8003ee0 <HAL_I2C_Master_Receive>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f2      	bne.n	8000ee0 <readChannel+0x40>

	read16bits = (read[0] << 8) | read[1];
 8000efa:	7b3b      	ldrb	r3, [r7, #12]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	81fb      	strh	r3, [r7, #14]
	return read16bits;
 8000f0a:	89fb      	ldrh	r3, [r7, #14]

}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <getThermocoupleTemp>:
}

/*----------------------------- Sensor Measurements ---------------------*/

uint8_t getThermocoupleTemp(I2C_HandleTypeDef *hi2c1,bool units)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
  int16_t raw = readDoubleRegister(hi2c1, HOT_JUNC_TEMP);
 8000f20:	2100      	movs	r1, #0
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f822 	bl	8000f6c <readDoubleRegister>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	81fb      	strh	r3, [r7, #14]
  uint8_t LSB = raw & 0x00FF;
 8000f2c:	89fb      	ldrh	r3, [r7, #14]
 8000f2e:	737b      	strb	r3, [r7, #13]
  uint8_t MSB = raw>>8;
 8000f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f34:	121b      	asrs	r3, r3, #8
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	733b      	strb	r3, [r7, #12]

  if((MSB & 0x80) == 0x80){
 8000f3a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da08      	bge.n	8000f54 <getThermocoupleTemp+0x40>
	  return(((MSB*16)+(LSB/16))-4096);
 8000f42:	7b3b      	ldrb	r3, [r7, #12]
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	7b7b      	ldrb	r3, [r7, #13]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	e007      	b.n	8000f64 <getThermocoupleTemp+0x50>
  }
  else{
	  return(((MSB*16)+(LSB/16)));
 8000f54:	7b3b      	ldrb	r3, [r7, #12]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	7b7b      	ldrb	r3, [r7, #13]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	b2db      	uxtb	r3, r3
  }
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <readDoubleRegister>:
  return read8bits;

}

uint16_t readDoubleRegister(I2C_HandleTypeDef *hi2c1, MCP9600_Register reg)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70fb      	strb	r3, [r7, #3]
  //Attempt to read the register until we exit with no error code
  //This attempts to fix the bug where clock stretching sometimes failes, as
  //described in the MCP9600 eratta
	uint8_t read[2]={0,0};
 8000f78:	2300      	movs	r3, #0
 8000f7a:	81bb      	strh	r3, [r7, #12]
	uint16_t read16bits = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	81fb      	strh	r3, [r7, #14]

	while(HAL_I2C_Master_Transmit(hi2c1, 0xCE, &reg, 1, HAL_MAX_DELAY) != HAL_OK);
 8000f80:	bf00      	nop
 8000f82:	1cfa      	adds	r2, r7, #3
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	21ce      	movs	r1, #206	; 0xce
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f002 feb2 	bl	8003cf8 <HAL_I2C_Master_Transmit>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f3      	bne.n	8000f82 <readDoubleRegister+0x16>
	while(HAL_I2C_IsDeviceReady(hi2c1,0xCE,10,200)!=HAL_OK);
 8000f9a:	bf00      	nop
 8000f9c:	23c8      	movs	r3, #200	; 0xc8
 8000f9e:	220a      	movs	r2, #10
 8000fa0:	21ce      	movs	r1, #206	; 0xce
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f003 f892 	bl	80040cc <HAL_I2C_IsDeviceReady>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f6      	bne.n	8000f9c <readDoubleRegister+0x30>
	while(HAL_I2C_Master_Receive(hi2c1, 0XCF, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 8000fae:	bf00      	nop
 8000fb0:	f107 020c 	add.w	r2, r7, #12
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	21cf      	movs	r1, #207	; 0xcf
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 ff8e 	bl	8003ee0 <HAL_I2C_Master_Receive>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f2      	bne.n	8000fb0 <readDoubleRegister+0x44>
	read16bits = (read[0] << 8) | read[1];
 8000fca:	7b3b      	ldrb	r3, [r7, #12]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7b7b      	ldrb	r3, [r7, #13]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	81fb      	strh	r3, [r7, #14]
	return read16bits;
 8000fda:	89fb      	ldrh	r3, [r7, #14]


}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f001 f821 	bl	800202e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f840 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 fb30 	bl	8001654 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff4:	f000 fb08 	bl	8001608 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ff8:	f000 f96c 	bl	80012d4 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000ffc:	f000 f934 	bl	8001268 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001000:	f000 f9a6 	bl	8001350 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001004:	f000 f8cc 	bl	80011a0 <MX_ADC1_Init>
  MX_TIM15_Init();
 8001008:	f000 fa4a 	bl	80014a0 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 800100c:	f000 facc 	bl	80015a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001010:	f006 f978 	bl	8007304 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <main+0x68>)
 8001016:	2100      	movs	r1, #0
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <main+0x6c>)
 800101a:	f006 f9bd 	bl	8007398 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <main+0x70>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8001024:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <main+0x74>)
 8001026:	2100      	movs	r1, #0
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <main+0x78>)
 800102a:	f006 f9b5 	bl	8007398 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <main+0x7c>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <main+0x80>)
 8001036:	2100      	movs	r1, #0
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <main+0x84>)
 800103a:	f006 f9ad 	bl	8007398 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <main+0x88>)
 8001042:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001044:	f006 f982 	bl	800734c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001048:	e7fe      	b.n	8001048 <main+0x64>
 800104a:	bf00      	nop
 800104c:	0800c9d0 	.word	0x0800c9d0
 8001050:	080016b5 	.word	0x080016b5
 8001054:	20008440 	.word	0x20008440
 8001058:	0800c9f4 	.word	0x0800c9f4
 800105c:	080017e1 	.word	0x080017e1
 8001060:	20008524 	.word	0x20008524
 8001064:	0800ca18 	.word	0x0800ca18
 8001068:	080017f1 	.word	0x080017f1
 800106c:	20008620 	.word	0x20008620

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ac      	sub	sp, #176	; 0xb0
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800107a:	2244      	movs	r2, #68	; 0x44
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f008 fdd4 	bl	8009c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2254      	movs	r2, #84	; 0x54
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f008 fdc6 	bl	8009c2c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010a0:	f003 fb94 	bl	80047cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <SystemClock_Config+0x12c>)
 80010a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010aa:	4a3c      	ldr	r2, [pc, #240]	; (800119c <SystemClock_Config+0x12c>)
 80010ac:	f023 0318 	bic.w	r3, r3, #24
 80010b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010b4:	2314      	movs	r3, #20
 80010b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010b8:	2301      	movs	r3, #1
 80010ba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80010c8:	2390      	movs	r3, #144	; 0x90
 80010ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 80010da:	2305      	movs	r3, #5
 80010dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010e0:	2310      	movs	r3, #16
 80010e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010e6:	2307      	movs	r3, #7
 80010e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80010f2:	2306      	movs	r3, #6
 80010f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fbd9 	bl	80048b4 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001108:	f000 fb8c 	bl	8001824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2303      	movs	r3, #3
 8001112:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001114:	23a0      	movs	r3, #160	; 0xa0
 8001116:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001118:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800111c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001122:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f003 ffe3 	bl	80050f4 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001134:	f000 fb76 	bl	8001824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001138:	f244 0342 	movw	r3, #16450	; 0x4042
 800113c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800113e:	2304      	movs	r3, #4
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800114c:	2301      	movs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001150:	2305      	movs	r3, #5
 8001152:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 8001154:	230e      	movs	r3, #14
 8001156:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001158:	2307      	movs	r3, #7
 800115a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001168:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f004 f9f7 	bl	8005560 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001178:	f000 fb54 	bl	8001824 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800117c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001180:	f003 fb42 	bl	8004808 <HAL_PWREx_ControlVoltageScaling>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800118a:	f000 fb4b 	bl	8001824 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800118e:	f004 fbdb 	bl	8005948 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001192:	bf00      	nop
 8001194:	37b0      	adds	r7, #176	; 0xb0
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
 80011b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_ADC1_Init+0xbc>)
 80011b8:	4a29      	ldr	r2, [pc, #164]	; (8001260 <MX_ADC1_Init+0xc0>)
 80011ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <MX_ADC1_Init+0xbc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_ADC1_Init+0xbc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <MX_ADC1_Init+0xbc>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_ADC1_Init+0xbc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_ADC1_Init+0xbc>)
 80011d6:	2204      	movs	r2, #4
 80011d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_ADC1_Init+0xbc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_ADC1_Init+0xbc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_ADC1_Init+0xbc>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_ADC1_Init+0xbc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_ADC1_Init+0xbc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_ADC1_Init+0xbc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_ADC1_Init+0xbc>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_ADC1_Init+0xbc>)
 800120a:	2200      	movs	r2, #0
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_ADC1_Init+0xbc>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_ADC1_Init+0xbc>)
 8001218:	f001 f8ce 	bl	80023b8 <HAL_ADC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001222:	f000 faff 	bl	8001824 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_ADC1_Init+0xc4>)
 8001228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122a:	2306      	movs	r3, #6
 800122c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001232:	237f      	movs	r3, #127	; 0x7f
 8001234:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001236:	2304      	movs	r3, #4
 8001238:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_ADC1_Init+0xbc>)
 8001244:	f001 fa00 	bl	8002648 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800124e:	f000 fae9 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20008528 	.word	0x20008528
 8001260:	50040000 	.word	0x50040000
 8001264:	19200040 	.word	0x19200040

08001268 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_CAN1_Init+0x64>)
 800126e:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <MX_CAN1_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_CAN1_Init+0x64>)
 8001274:	2201      	movs	r2, #1
 8001276:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_CAN1_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_CAN1_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_CAN1_Init+0x64>)
 8001286:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800128a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_CAN1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_CAN1_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_CAN1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_CAN1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_CAN1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_CAN1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_CAN1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_CAN1_Init+0x64>)
 80012b8:	f001 fda6 	bl	8002e08 <HAL_CAN_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80012c2:	f000 faaf 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200086a8 	.word	0x200086a8
 80012d0:	40006400 	.word	0x40006400

080012d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_I2C1_Init+0x74>)
 80012da:	4a1c      	ldr	r2, [pc, #112]	; (800134c <MX_I2C1_Init+0x78>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_I2C1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_I2C1_Init+0x74>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_I2C1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_I2C1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_I2C1_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_I2C1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130e:	480e      	ldr	r0, [pc, #56]	; (8001348 <MX_I2C1_Init+0x74>)
 8001310:	f002 fc62 	bl	8003bd8 <HAL_I2C_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800131a:	f000 fa83 	bl	8001824 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <MX_I2C1_Init+0x74>)
 8001322:	f003 f9bb 	bl	800469c <HAL_I2CEx_ConfigAnalogFilter>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800132c:	f000 fa7a 	bl	8001824 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_I2C1_Init+0x74>)
 8001334:	f003 f9fd 	bl	8004732 <HAL_I2CEx_ConfigDigitalFilter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800133e:	f000 fa71 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000848c 	.word	0x2000848c
 800134c:	40005400 	.word	0x40005400

08001350 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001356:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	222c      	movs	r2, #44	; 0x2c
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f008 fc55 	bl	8009c2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <MX_TIM1_Init+0x148>)
 8001384:	4a45      	ldr	r2, [pc, #276]	; (800149c <MX_TIM1_Init+0x14c>)
 8001386:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <MX_TIM1_Init+0x148>)
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <MX_TIM1_Init+0x148>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <MX_TIM1_Init+0x148>)
 8001396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <MX_TIM1_Init+0x148>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <MX_TIM1_Init+0x148>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <MX_TIM1_Init+0x148>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ae:	483a      	ldr	r0, [pc, #232]	; (8001498 <MX_TIM1_Init+0x148>)
 80013b0:	f004 fc82 	bl	8005cb8 <HAL_TIM_PWM_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 fa33 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ce:	4619      	mov	r1, r3
 80013d0:	4831      	ldr	r0, [pc, #196]	; (8001498 <MX_TIM1_Init+0x148>)
 80013d2:	f005 fa01 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013dc:	f000 fa22 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	; 0x60
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4824      	ldr	r0, [pc, #144]	; (8001498 <MX_TIM1_Init+0x148>)
 8001406:	f004 fdcd 	bl	8005fa4 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001410:	f000 fa08 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001414:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001418:	2204      	movs	r2, #4
 800141a:	4619      	mov	r1, r3
 800141c:	481e      	ldr	r0, [pc, #120]	; (8001498 <MX_TIM1_Init+0x148>)
 800141e:	f004 fdc1 	bl	8005fa4 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001428:	f000 f9fc 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800142c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001430:	2208      	movs	r2, #8
 8001432:	4619      	mov	r1, r3
 8001434:	4818      	ldr	r0, [pc, #96]	; (8001498 <MX_TIM1_Init+0x148>)
 8001436:	f004 fdb5 	bl	8005fa4 <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001440:	f000 f9f0 	bl	8001824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_TIM1_Init+0x148>)
 800147a:	f005 fa13 	bl	80068a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001484:	f000 f9ce 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <MX_TIM1_Init+0x148>)
 800148a:	f000 fb03 	bl	8001a94 <HAL_TIM_MspPostInit>

}
 800148e:	bf00      	nop
 8001490:	3758      	adds	r7, #88	; 0x58
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200085d4 	.word	0x200085d4
 800149c:	40012c00 	.word	0x40012c00

080014a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b096      	sub	sp, #88	; 0x58
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	222c      	movs	r2, #44	; 0x2c
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f008 fbad 	bl	8009c2c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <MX_TIM15_Init+0x100>)
 80014d4:	4a33      	ldr	r2, [pc, #204]	; (80015a4 <MX_TIM15_Init+0x104>)
 80014d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <MX_TIM15_Init+0x100>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <MX_TIM15_Init+0x100>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <MX_TIM15_Init+0x100>)
 80014e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <MX_TIM15_Init+0x100>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_TIM15_Init+0x100>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_TIM15_Init+0x100>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80014fe:	4828      	ldr	r0, [pc, #160]	; (80015a0 <MX_TIM15_Init+0x100>)
 8001500:	f004 fbda 	bl	8005cb8 <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 f98b 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001516:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800151a:	4619      	mov	r1, r3
 800151c:	4820      	ldr	r0, [pc, #128]	; (80015a0 <MX_TIM15_Init+0x100>)
 800151e:	f005 f95b 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001528:	f000 f97c 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152c:	2360      	movs	r3, #96	; 0x60
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154c:	2204      	movs	r2, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4813      	ldr	r0, [pc, #76]	; (80015a0 <MX_TIM15_Init+0x100>)
 8001552:	f004 fd27 	bl	8005fa4 <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800155c:	f000 f962 	bl	8001824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_TIM15_Init+0x100>)
 8001584:	f005 f98e 	bl	80068a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800158e:	f000 f949 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_TIM15_Init+0x100>)
 8001594:	f000 fa7e 	bl	8001a94 <HAL_TIM_MspPostInit>

}
 8001598:	bf00      	nop
 800159a:	3758      	adds	r7, #88	; 0x58
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200084d8 	.word	0x200084d8
 80015a4:	40014000 	.word	0x40014000

080015a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <MX_USART2_UART_Init+0x5c>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015ec:	f005 f9f0 	bl	80069d0 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015f6:	f000 f915 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20008624 	.word	0x20008624
 8001604:	40004400 	.word	0x40004400

08001608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_DMA_Init+0x48>)
 8001610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <MX_DMA_Init+0x48>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6493      	str	r3, [r2, #72]	; 0x48
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <MX_DMA_Init+0x48>)
 800161c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2105      	movs	r1, #5
 800162a:	2010      	movs	r0, #16
 800162c:	f001 ffd8 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001630:	2010      	movs	r0, #16
 8001632:	f001 fff1 	bl	8003618 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2105      	movs	r1, #5
 800163a:	2011      	movs	r0, #17
 800163c:	f001 ffd0 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001640:	2011      	movs	r0, #17
 8001642:	f001 ffe9 	bl	8003618 <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_GPIO_Init+0x5c>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <MX_GPIO_Init+0x5c>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_GPIO_Init+0x5c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_GPIO_Init+0x5c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <MX_GPIO_Init+0x5c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_GPIO_Init+0x5c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_GPIO_Init+0x5c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <MX_GPIO_Init+0x5c>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_GPIO_Init+0x5c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]

}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b096      	sub	sp, #88	; 0x58
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  char msg[50];
  uint8_t read[2]={0};
 80016bc:	2300      	movs	r3, #0
 80016be:	823b      	strh	r3, [r7, #16]
  uint16_t readtest;
  float readfloat=0.0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t TH = 0x00;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t TV = 0x01;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  uint8_t TC = 0x02;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  uint8_t tempReg[] = {TH,TV,TC};
 80016d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016dc:	733b      	strb	r3, [r7, #12]
 80016de:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80016e2:	737b      	strb	r3, [r7, #13]
 80016e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016e8:	73bb      	strb	r3, [r7, #14]

  uint8_t data[1]={TH};
 80016ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016ee:	723b      	strb	r3, [r7, #8]
  uint8_t MSB = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  uint8_t LSB = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  HAL_StatusTypeDef status;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80016fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001700:	f005 fedc 	bl	80074bc <osDelay>
    //HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

    //C1 read CF
    //C0 write CE

    for(int i=0;i<255;i++){
 8001704:	2300      	movs	r3, #0
 8001706:	657b      	str	r3, [r7, #84]	; 0x54
 8001708:	e021      	b.n	800174e <StartDefaultTask+0x9a>
      if(HAL_I2C_IsDeviceReady(&hi2c1,i,10,200)==HAL_OK){
 800170a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170c:	b299      	uxth	r1, r3
 800170e:	23c8      	movs	r3, #200	; 0xc8
 8001710:	220a      	movs	r2, #10
 8001712:	482e      	ldr	r0, [pc, #184]	; (80017cc <StartDefaultTask+0x118>)
 8001714:	f002 fcda 	bl	80040cc <HAL_I2C_IsDeviceReady>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d114      	bne.n	8001748 <StartDefaultTask+0x94>
    	  sprintf(msg,"id: %d\r\n",i);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001724:	492a      	ldr	r1, [pc, #168]	; (80017d0 <StartDefaultTask+0x11c>)
 8001726:	4618      	mov	r0, r3
 8001728:	f008 fef2 	bl	800a510 <siprintf>
    	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fd4d 	bl	80001d0 <strlen>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	f107 0114 	add.w	r1, r7, #20
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	4824      	ldr	r0, [pc, #144]	; (80017d4 <StartDefaultTask+0x120>)
 8001744:	f005 f992 	bl	8006a6c <HAL_UART_Transmit>
    for(int i=0;i<255;i++){
 8001748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174a:	3301      	adds	r3, #1
 800174c:	657b      	str	r3, [r7, #84]	; 0x54
 800174e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001750:	2bfe      	cmp	r3, #254	; 0xfe
 8001752:	ddda      	ble.n	800170a <StartDefaultTask+0x56>
      }
    }

    uint8_t a = readChannel(&hi2c1,0x61);
 8001754:	2161      	movs	r1, #97	; 0x61
 8001756:	481d      	ldr	r0, [pc, #116]	; (80017cc <StartDefaultTask+0x118>)
 8001758:	f7ff fba2 	bl	8000ea0 <readChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    sprintf(msg, "readChannel = %d\r\n", a);
 8001762:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	491b      	ldr	r1, [pc, #108]	; (80017d8 <StartDefaultTask+0x124>)
 800176c:	4618      	mov	r0, r3
 800176e:	f008 fecf 	bl	800a510 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd2a 	bl	80001d0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f107 0114 	add.w	r1, r7, #20
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	4812      	ldr	r0, [pc, #72]	; (80017d4 <StartDefaultTask+0x120>)
 800178a:	f005 f96f 	bl	8006a6c <HAL_UART_Transmit>


    uint8_t x = getThermocoupleTemp(&hi2c1,0);
 800178e:	2100      	movs	r1, #0
 8001790:	480e      	ldr	r0, [pc, #56]	; (80017cc <StartDefaultTask+0x118>)
 8001792:	f7ff fbbf 	bl	8000f14 <getThermocoupleTemp>
 8001796:	4603      	mov	r3, r0
 8001798:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    sprintf(msg, "TH = %d\r\n", x);
 800179c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	490d      	ldr	r1, [pc, #52]	; (80017dc <StartDefaultTask+0x128>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 feb2 	bl	800a510 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd0d 	bl	80001d0 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f107 0114 	add.w	r1, r7, #20
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <StartDefaultTask+0x120>)
 80017c4:	f005 f952 	bl	8006a6c <HAL_UART_Transmit>
  {
 80017c8:	e798      	b.n	80016fc <StartDefaultTask+0x48>
 80017ca:	bf00      	nop
 80017cc:	2000848c 	.word	0x2000848c
 80017d0:	0800c98c 	.word	0x0800c98c
 80017d4:	20008624 	.word	0x20008624
 80017d8:	0800c998 	.word	0x0800c998
 80017dc:	0800c9ac 	.word	0x0800c9ac

080017e0 <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b090      	sub	sp, #64	; 0x40
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	  char msg[50];

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f005 fe67 	bl	80074bc <osDelay>
 80017ee:	e7fb      	b.n	80017e8 <StartReadTempTask+0x8>

080017f0 <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f005 fe5f 	bl	80074bc <osDelay>
 80017fe:	e7fb      	b.n	80017f8 <StartReadLightTask+0x8>

08001800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001812:	f000 fc25 	bl	8002060 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40001000 	.word	0x40001000

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182c:	e7fe      	b.n	800182c <Error_Handler+0x8>
	...

08001830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_MspInit+0x4c>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_MspInit+0x4c>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6613      	str	r3, [r2, #96]	; 0x60
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_MspInit+0x4c>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_MspInit+0x4c>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_MspInit+0x4c>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	6593      	str	r3, [r2, #88]	; 0x58
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_MspInit+0x4c>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	210f      	movs	r1, #15
 800186a:	f06f 0001 	mvn.w	r0, #1
 800186e:	f001 feb7 	bl	80035e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_ADC_MspInit+0x74>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d124      	bne.n	80018ec <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_ADC_MspInit+0x78>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_ADC_MspInit+0x78>)
 80018a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_ADC_MspInit+0x78>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_ADC_MspInit+0x78>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_ADC_MspInit+0x78>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_ADC_MspInit+0x78>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80018d2:	2372      	movs	r3, #114	; 0x72
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018d6:	230b      	movs	r3, #11
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e8:	f002 f80c 	bl	8003904 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	50040000 	.word	0x50040000
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a20      	ldr	r2, [pc, #128]	; (800199c <HAL_CAN_MspInit+0xa0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d139      	bne.n	8001992 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_CAN_MspInit+0xa4>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_CAN_MspInit+0xa4>)
 8001924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_CAN_MspInit+0xa4>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_CAN_MspInit+0xa4>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_CAN_MspInit+0xa4>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_CAN_MspInit+0xa4>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800194e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001960:	2309      	movs	r3, #9
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f001 ffc9 	bl	8003904 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2105      	movs	r1, #5
 8001976:	2013      	movs	r0, #19
 8001978:	f001 fe32 	bl	80035e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800197c:	2013      	movs	r0, #19
 800197e:	f001 fe4b 	bl	8003618 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2105      	movs	r1, #5
 8001986:	2014      	movs	r0, #20
 8001988:	f001 fe2a 	bl	80035e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800198c:	2014      	movs	r0, #20
 800198e:	f001 fe43 	bl	8003618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	; 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40006400 	.word	0x40006400
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_I2C_MspInit+0x7c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d127      	bne.n	8001a16 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_I2C_MspInit+0x80>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <HAL_I2C_MspInit+0x80>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_I2C_MspInit+0x80>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	2312      	movs	r3, #18
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ee:	2304      	movs	r3, #4
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	480b      	ldr	r0, [pc, #44]	; (8001a28 <HAL_I2C_MspInit+0x84>)
 80019fa:	f001 ff83 	bl	8003904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_I2C_MspInit+0x80>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_I2C_MspInit+0x80>)
 8001a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a08:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_I2C_MspInit+0x80>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40005400 	.word	0x40005400
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000400 	.word	0x48000400

08001a2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <HAL_TIM_PWM_MspInit+0x5c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10c      	bne.n	8001a58 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_TIM_PWM_MspInit+0x60>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <HAL_TIM_PWM_MspInit+0x60>)
 8001a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a48:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_TIM_PWM_MspInit+0x60>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a56:	e010      	b.n	8001a7a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <HAL_TIM_PWM_MspInit+0x64>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10b      	bne.n	8001a7a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_TIM_PWM_MspInit+0x60>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_TIM_PWM_MspInit+0x60>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_TIM_PWM_MspInit+0x60>)
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40012c00 	.word	0x40012c00
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40014000 	.word	0x40014000

08001a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <HAL_TIM_MspPostInit+0xac>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d11e      	bne.n	8001af4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <HAL_TIM_MspPostInit+0xb0>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <HAL_TIM_MspPostInit+0xb0>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_TIM_MspPostInit+0xb0>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ace:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f001 ff09 	bl	8003904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001af2:	e021      	b.n	8001b38 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM15)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <HAL_TIM_MspPostInit+0xb4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d11c      	bne.n	8001b38 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_TIM_MspPostInit+0xb0>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_TIM_MspPostInit+0xb0>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_TIM_MspPostInit+0xb0>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b16:	2308      	movs	r3, #8
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001b26:	230e      	movs	r3, #14
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b34:	f001 fee6 	bl	8003904 <HAL_GPIO_Init>
}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40012c00 	.word	0x40012c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40014000 	.word	0x40014000

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a4a      	ldr	r2, [pc, #296]	; (8001c94 <HAL_UART_MspInit+0x148>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	f040 808d 	bne.w	8001c8a <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b70:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <HAL_UART_MspInit+0x14c>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	4a48      	ldr	r2, [pc, #288]	; (8001c98 <HAL_UART_MspInit+0x14c>)
 8001b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7c:	4b46      	ldr	r3, [pc, #280]	; (8001c98 <HAL_UART_MspInit+0x14c>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <HAL_UART_MspInit+0x14c>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a42      	ldr	r2, [pc, #264]	; (8001c98 <HAL_UART_MspInit+0x14c>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b94:	4b40      	ldr	r3, [pc, #256]	; (8001c98 <HAL_UART_MspInit+0x14c>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbe:	f001 fea1 	bl	8003904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f001 fe8f 	bl	8003904 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001be8:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_UART_MspInit+0x154>)
 8001bea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c1c:	481f      	ldr	r0, [pc, #124]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001c1e:	f001 fd09 	bl	8003634 <HAL_DMA_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8001c28:	f7ff fdfc 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001c30:	671a      	str	r2, [r3, #112]	; 0x70
 8001c32:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_UART_MspInit+0x150>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_UART_MspInit+0x15c>)
 8001c3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c40:	2202      	movs	r2, #2
 8001c42:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c46:	2210      	movs	r2, #16
 8001c48:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c70:	f001 fce0 	bl	8003634 <HAL_DMA_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8001c7a:	f7ff fdd3 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c82:	66da      	str	r2, [r3, #108]	; 0x6c
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_UART_MspInit+0x158>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	; 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40004400 	.word	0x40004400
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	20008444 	.word	0x20008444
 8001ca0:	4002006c 	.word	0x4002006c
 8001ca4:	2000858c 	.word	0x2000858c
 8001ca8:	40020080 	.word	0x40020080

08001cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	2036      	movs	r0, #54	; 0x36
 8001cc2:	f001 fc8d 	bl	80035e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cc6:	2036      	movs	r0, #54	; 0x36
 8001cc8:	f001 fca6 	bl	8003618 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <HAL_InitTick+0xa0>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <HAL_InitTick+0xa0>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_InitTick+0xa0>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ce4:	f107 0210 	add.w	r2, r7, #16
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fba4 	bl	800543c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cf4:	f003 fb76 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d00:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <HAL_InitTick+0xa4>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0c9b      	lsrs	r3, r3, #18
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_InitTick+0xa8>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <HAL_InitTick+0xac>)
 8001d10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_InitTick+0xa8>)
 8001d14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_InitTick+0xa8>)
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_InitTick+0xa8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_InitTick+0xa8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d2c:	4809      	ldr	r0, [pc, #36]	; (8001d54 <HAL_InitTick+0xa8>)
 8001d2e:	f003 ff0d 	bl	8005b4c <HAL_TIM_Base_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d104      	bne.n	8001d42 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d38:	4806      	ldr	r0, [pc, #24]	; (8001d54 <HAL_InitTick+0xa8>)
 8001d3a:	f003 ff69 	bl	8005c10 <HAL_TIM_Base_Start_IT>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3730      	adds	r7, #48	; 0x30
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	431bde83 	.word	0x431bde83
 8001d54:	200086d0 	.word	0x200086d0
 8001d58:	40001000 	.word	0x40001000

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA1_Channel6_IRQHandler+0x10>)
 8001d8e:	f001 fd09 	bl	80037a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20008444 	.word	0x20008444

08001d9c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <DMA1_Channel7_IRQHandler+0x10>)
 8001da2:	f001 fcff 	bl	80037a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000858c 	.word	0x2000858c

08001db0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <CAN1_TX_IRQHandler+0x10>)
 8001db6:	f001 f922 	bl	8002ffe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200086a8 	.word	0x200086a8

08001dc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <CAN1_RX0_IRQHandler+0x10>)
 8001dca:	f001 f918 	bl	8002ffe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200086a8 	.word	0x200086a8

08001dd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <TIM6_DAC_IRQHandler+0x10>)
 8001dde:	f003 ffc2 	bl	8005d66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200086d0 	.word	0x200086d0

08001dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
	return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_kill>:

int _kill(int pid, int sig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e06:	f007 fed9 	bl	8009bbc <__errno>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2216      	movs	r2, #22
 8001e0e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_exit>:

void _exit (int status)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ffe7 	bl	8001dfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e2e:	e7fe      	b.n	8001e2e <_exit+0x12>

08001e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e00a      	b.n	8001e58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e42:	f3af 8000 	nop.w
 8001e46:	4601      	mov	r1, r0
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf0      	blt.n	8001e42 <_read+0x12>
	}

return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e009      	b.n	8001e90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60ba      	str	r2, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf1      	blt.n	8001e7c <_write+0x12>
	}
	return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_close>:

int _close(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eca:	605a      	str	r2, [r3, #4]
	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_isatty>:

int _isatty(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f007 fe3e 	bl	8009bbc <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20010000 	.word	0x20010000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	20000200 	.word	0x20000200
 8001f74:	20008770 	.word	0x20008770

08001f78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <SystemInit+0x5c>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <SystemInit+0x5c>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <SystemInit+0x60>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <SystemInit+0x60>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <SystemInit+0x60>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <SystemInit+0x60>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <SystemInit+0x60>)
 8001fa4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001fa8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001fac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <SystemInit+0x60>)
 8001fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fb4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <SystemInit+0x60>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <SystemInit+0x60>)
 8001fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <SystemInit+0x60>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	40021000 	.word	0x40021000

08001fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fe0:	f7ff ffca 	bl	8001f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fe4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fe6:	e003      	b.n	8001ff0 <LoopCopyDataInit>

08001fe8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fee:	3104      	adds	r1, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ff0:	480a      	ldr	r0, [pc, #40]	; (800201c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ff4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ff6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ff8:	d3f6      	bcc.n	8001fe8 <CopyDataInit>
	ldr	r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ffc:	e002      	b.n	8002004 <LoopFillZerobss>

08001ffe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ffe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002000:	f842 3b04 	str.w	r3, [r2], #4

08002004 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <LoopForever+0x16>)
	cmp	r2, r3
 8002006:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002008:	d3f9      	bcc.n	8001ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800200a:	f007 fddd 	bl	8009bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800200e:	f7fe ffe9 	bl	8000fe4 <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002014:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002018:	0800ce74 	.word	0x0800ce74
	ldr	r0, =_sdata
 800201c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002020:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8002024:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8002028:	20008770 	.word	0x20008770

0800202c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_IRQHandler>

0800202e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002038:	2003      	movs	r0, #3
 800203a:	f001 fac6 	bl	80035ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fe34 	bl	8001cac <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	e001      	b.n	8002054 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002050:	f7ff fbee 	bl	8001830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002054:	79fb      	ldrb	r3, [r7, #7]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000008 	.word	0x20000008
 8002084:	2000871c 	.word	0x2000871c

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	2000871c 	.word	0x2000871c

080020a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	609a      	str	r2, [r3, #8]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	609a      	str	r2, [r3, #8]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3360      	adds	r3, #96	; 0x60
 800211a:	461a      	mov	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <LL_ADC_SetOffset+0x44>)
 800212a:	4013      	ands	r3, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	4313      	orrs	r3, r2
 8002138:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002140:	bf00      	nop
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	03fff000 	.word	0x03fff000

08002150 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3360      	adds	r3, #96	; 0x60
 800215e:	461a      	mov	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3360      	adds	r3, #96	; 0x60
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b087      	sub	sp, #28
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3330      	adds	r3, #48	; 0x30
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	4413      	add	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	211f      	movs	r1, #31
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	401a      	ands	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	f003 011f 	and.w	r1, r3, #31
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	431a      	orrs	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800220a:	b480      	push	{r7}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3314      	adds	r3, #20
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	0e5b      	lsrs	r3, r3, #25
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	4413      	add	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	0d1b      	lsrs	r3, r3, #20
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2107      	movs	r1, #7
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	401a      	ands	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	0d1b      	lsrs	r3, r3, #20
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	431a      	orrs	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002254:	bf00      	nop
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0318 	and.w	r3, r3, #24
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002284:	40d9      	lsrs	r1, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	400b      	ands	r3, r1
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	431a      	orrs	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	0007ffff 	.word	0x0007ffff

080022a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6093      	str	r3, [r2, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002330:	d101      	bne.n	8002336 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <LL_ADC_IsEnabled+0x18>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <LL_ADC_IsEnabled+0x1a>
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d101      	bne.n	8002382 <LL_ADC_REG_IsConversionOngoing+0x18>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d101      	bne.n	80023a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e12c      	b.n	800262c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff fa4d 	bl	8001880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff67 	bl	80022cc <LL_ADC_IsDeepPowerDownEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff4d 	bl	80022a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff82 	bl	800231c <LL_ADC_IsInternalRegulatorEnabled>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff66 	bl	80022f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002428:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_ADC_Init+0x27c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	4a82      	ldr	r2, [pc, #520]	; (8002638 <HAL_ADC_Init+0x280>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800243c:	e002      	b.n	8002444 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	3b01      	subs	r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f9      	bne.n	800243e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff64 	bl	800231c <LL_ADC_IsInternalRegulatorEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	f043 0210 	orr.w	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff75 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 8002480:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 80c5 	bne.w	800261a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 80c1 	bne.w	800261a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024a0:	f043 0202 	orr.w	r2, r3, #2
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff49 	bl	8002344 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024b8:	4860      	ldr	r0, [pc, #384]	; (800263c <HAL_ADC_Init+0x284>)
 80024ba:	f7ff ff43 	bl	8002344 <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4619      	mov	r1, r3
 80024ca:	485d      	ldr	r0, [pc, #372]	; (8002640 <HAL_ADC_Init+0x288>)
 80024cc:	f7ff fde8 	bl	80020a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7e5b      	ldrb	r3, [r3, #25]
 80024d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80024e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d106      	bne.n	800250c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	3b01      	subs	r3, #1
 8002504:	045b      	lsls	r3, r3, #17
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	4b45      	ldr	r3, [pc, #276]	; (8002644 <HAL_ADC_Init+0x28c>)
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	430b      	orrs	r3, r1
 800253a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff12 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 8002546:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff1f 	bl	8002390 <LL_ADC_INJ_IsConversionOngoing>
 8002552:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d13d      	bne.n	80025d6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d13a      	bne.n	80025d6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002564:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257c:	f023 0302 	bic.w	r3, r3, #2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	69b9      	ldr	r1, [r7, #24]
 8002586:	430b      	orrs	r3, r1
 8002588:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002590:	2b01      	cmp	r3, #1
 8002592:	d118      	bne.n	80025c6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800259e:	f023 0304 	bic.w	r3, r3, #4
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025b0:	4311      	orrs	r1, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025b6:	430a      	orrs	r2, r1
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	611a      	str	r2, [r3, #16]
 80025c4:	e007      	b.n	80025d6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d10c      	bne.n	80025f8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f023 010f 	bic.w	r1, r3, #15
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
 80025f6:	e007      	b.n	8002608 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 020f 	bic.w	r2, r2, #15
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	f023 0303 	bic.w	r3, r3, #3
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
 8002618:	e007      	b.n	800262a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800262a:	7ffb      	ldrb	r3, [r7, #31]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000000 	.word	0x20000000
 8002638:	053e2d63 	.word	0x053e2d63
 800263c:	50040000 	.word	0x50040000
 8002640:	50040300 	.word	0x50040300
 8002644:	fff0c007 	.word	0xfff0c007

08002648 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0b6      	sub	sp, #216	; 0xd8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_ADC_ConfigChannel+0x22>
 8002666:	2302      	movs	r3, #2
 8002668:	e3b9      	b.n	8002dde <HAL_ADC_ConfigChannel+0x796>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fe77 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 839e 	bne.w	8002dc0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d824      	bhi.n	80026d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	3b02      	subs	r3, #2
 8002692:	2b03      	cmp	r3, #3
 8002694:	d81b      	bhi.n	80026ce <HAL_ADC_ConfigChannel+0x86>
 8002696:	a201      	add	r2, pc, #4	; (adr r2, 800269c <HAL_ADC_ConfigChannel+0x54>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026b5 	.word	0x080026b5
 80026a4:	080026bd 	.word	0x080026bd
 80026a8:	080026c5 	.word	0x080026c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	220c      	movs	r2, #12
 80026b0:	605a      	str	r2, [r3, #4]
          break;
 80026b2:	e011      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2212      	movs	r2, #18
 80026b8:	605a      	str	r2, [r3, #4]
          break;
 80026ba:	e00d      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2218      	movs	r2, #24
 80026c0:	605a      	str	r2, [r3, #4]
          break;
 80026c2:	e009      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ca:	605a      	str	r2, [r3, #4]
          break;
 80026cc:	e004      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2206      	movs	r2, #6
 80026d2:	605a      	str	r2, [r3, #4]
          break;
 80026d4:	e000      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f7ff fd64 	bl	80021b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fe3b 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 80026f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fe47 	bl	8002390 <LL_ADC_INJ_IsConversionOngoing>
 8002702:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002706:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 81a6 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 81a1 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	461a      	mov	r2, r3
 8002728:	f7ff fd6f 	bl	800220a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	08db      	lsrs	r3, r3, #3
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b04      	cmp	r3, #4
 800274c:	d00a      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6919      	ldr	r1, [r3, #16]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800275e:	f7ff fcd3 	bl	8002108 <LL_ADC_SetOffset>
 8002762:	e17b      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fcf0 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x148>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fce5 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	f003 021f 	and.w	r2, r3, #31
 800278e:	e01e      	b.n	80027ce <HAL_ADC_ConfigChannel+0x186>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fcda 	bl	8002150 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80027be:	2320      	movs	r3, #32
 80027c0:	e004      	b.n	80027cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80027c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x19e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	e018      	b.n	8002818 <HAL_ADC_ConfigChannel+0x1d0>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e004      	b.n	8002818 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800280e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fca9 	bl	800217c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fc8d 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x20e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fc82 	bl	8002150 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	0e9b      	lsrs	r3, r3, #26
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	e01e      	b.n	8002894 <HAL_ADC_ConfigChannel+0x24c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fc77 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800287c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e004      	b.n	8002892 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x264>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	e018      	b.n	80028de <HAL_ADC_ConfigChannel+0x296>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e004      	b.n	80028de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028de:	429a      	cmp	r2, r3
 80028e0:	d106      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2101      	movs	r1, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fc46 	bl	800217c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fc2a 	bl	8002150 <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x2d4>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fc1f 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	f003 021f 	and.w	r2, r3, #31
 800291a:	e01e      	b.n	800295a <HAL_ADC_ConfigChannel+0x312>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2102      	movs	r1, #2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fc14 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800293a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800293e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e004      	b.n	8002958 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800294e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x32a>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	e016      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x358>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800298a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e004      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002996:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2102      	movs	r1, #2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fbe5 	bl	800217c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2103      	movs	r1, #3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fbc9 	bl	8002150 <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_ADC_ConfigChannel+0x396>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2103      	movs	r1, #3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fbbe 	bl	8002150 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	e017      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x3c6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2103      	movs	r1, #3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fbb3 	bl	8002150 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x3de>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	e011      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x402>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e003      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d106      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2103      	movs	r1, #3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fb90 	bl	800217c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fc6f 	bl	8002344 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 813f 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7ff fbf0 	bl	8002260 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a8e      	ldr	r2, [pc, #568]	; (8002cc0 <HAL_ADC_ConfigChannel+0x678>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	f040 8130 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x46c>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	bf94      	ite	ls
 8002aac:	2301      	movls	r3, #1
 8002aae:	2300      	movhi	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e019      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x4a0>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	bf94      	ite	ls
 8002ae2:	2301      	movls	r3, #1
 8002ae4:	2300      	movhi	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d079      	beq.n	8002be0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x4c0>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	3301      	adds	r3, #1
 8002b00:	069b      	lsls	r3, r3, #26
 8002b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b06:	e015      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x4ec>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b18:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e003      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	069b      	lsls	r3, r3, #26
 8002b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x50c>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	3301      	adds	r3, #1
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	e017      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x53c>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	ea42 0103 	orr.w	r1, r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x562>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	051b      	lsls	r3, r3, #20
 8002ba8:	e018      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x594>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	e080      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x5b4>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	069b      	lsls	r3, r3, #26
 8002bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfa:	e015      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x5e0>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e003      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	069b      	lsls	r3, r3, #26
 8002c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x600>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	e017      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x630>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	61fb      	str	r3, [r7, #28]
  return result;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	ea42 0103 	orr.w	r1, r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x65c>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b1e      	subs	r3, #30
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	e01d      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x698>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	613b      	str	r3, [r7, #16]
  return result;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e005      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x684>
 8002cc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b1e      	subs	r3, #30
 8002cda:	051b      	lsls	r3, r3, #20
 8002cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7ff fa8f 	bl	800220a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d06c      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cf8:	483c      	ldr	r0, [pc, #240]	; (8002dec <HAL_ADC_ConfigChannel+0x7a4>)
 8002cfa:	f7ff f9f7 	bl	80020ec <LL_ADC_GetCommonPathInternalCh>
 8002cfe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a3a      	ldr	r2, [pc, #232]	; (8002df0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d127      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d121      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a35      	ldr	r2, [pc, #212]	; (8002df4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d157      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	482f      	ldr	r0, [pc, #188]	; (8002dec <HAL_ADC_ConfigChannel+0x7a4>)
 8002d2e:	f7ff f9ca 	bl	80020c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d32:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	4a30      	ldr	r2, [pc, #192]	; (8002dfc <HAL_ADC_ConfigChannel+0x7b4>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d4c:	e002      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f9      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5a:	e03a      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d113      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x746>
 8002d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d12a      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d84:	4619      	mov	r1, r3
 8002d86:	4819      	ldr	r0, [pc, #100]	; (8002dec <HAL_ADC_ConfigChannel+0x7a4>)
 8002d88:	f7ff f99d 	bl	80020c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d8c:	e021      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d11c      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d116      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d111      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002db6:	4619      	mov	r1, r3
 8002db8:	480c      	ldr	r0, [pc, #48]	; (8002dec <HAL_ADC_ConfigChannel+0x7a4>)
 8002dba:	f7ff f984 	bl	80020c6 <LL_ADC_SetCommonPathInternalCh>
 8002dbe:	e008      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	37d8      	adds	r7, #216	; 0xd8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	80080000 	.word	0x80080000
 8002dec:	50040300 	.word	0x50040300
 8002df0:	c7520000 	.word	0xc7520000
 8002df4:	50040000 	.word	0x50040000
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	053e2d63 	.word	0x053e2d63
 8002e00:	cb840000 	.word	0xcb840000
 8002e04:	80000001 	.word	0x80000001

08002e08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0ed      	b.n	8002ff6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fd68 	bl	80018fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0202 	bic.w	r2, r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e3c:	f7ff f924 	bl	8002088 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e42:	e012      	b.n	8002e6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e44:	f7ff f920 	bl	8002088 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d90b      	bls.n	8002e6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2205      	movs	r2, #5
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0c5      	b.n	8002ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e5      	bne.n	8002e44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e88:	f7ff f8fe 	bl	8002088 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e8e:	e012      	b.n	8002eb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e90:	f7ff f8fa 	bl	8002088 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b0a      	cmp	r3, #10
 8002e9c:	d90b      	bls.n	8002eb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e09f      	b.n	8002ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0e5      	beq.n	8002e90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7e1b      	ldrb	r3, [r3, #24]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d108      	bne.n	8002ede <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e007      	b.n	8002eee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7e5b      	ldrb	r3, [r3, #25]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d108      	bne.n	8002f08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e007      	b.n	8002f18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7e9b      	ldrb	r3, [r3, #26]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0220 	orr.w	r2, r2, #32
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e007      	b.n	8002f42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0220 	bic.w	r2, r2, #32
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7edb      	ldrb	r3, [r3, #27]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d108      	bne.n	8002f5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0210 	bic.w	r2, r2, #16
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e007      	b.n	8002f6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0210 	orr.w	r2, r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7f1b      	ldrb	r3, [r3, #28]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d108      	bne.n	8002f86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0208 	orr.w	r2, r2, #8
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e007      	b.n	8002f96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0208 	bic.w	r2, r2, #8
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7f5b      	ldrb	r3, [r3, #29]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d108      	bne.n	8002fb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0204 	orr.w	r2, r2, #4
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e007      	b.n	8002fc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	ea42 0103 	orr.w	r1, r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b08a      	sub	sp, #40	; 0x28
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d07c      	beq.n	800313e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d023      	beq.n	8003096 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2201      	movs	r2, #1
 8003054:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f983 	bl	800336c <HAL_CAN_TxMailbox0CompleteCallback>
 8003066:	e016      	b.n	8003096 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	e00c      	b.n	8003096 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	e002      	b.n	8003096 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f989 	bl	80033a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d024      	beq.n	80030ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f963 	bl	8003380 <HAL_CAN_TxMailbox1CompleteCallback>
 80030ba:	e016      	b.n	80030ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	e00c      	b.n	80030ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e002      	b.n	80030ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f969 	bl	80033bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d024      	beq.n	800313e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f943 	bl	8003394 <HAL_CAN_TxMailbox2CompleteCallback>
 800310e:	e016      	b.n	800313e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	e00c      	b.n	800313e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e002      	b.n	800313e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f949 	bl	80033d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003158:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2210      	movs	r2, #16
 8003160:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2208      	movs	r2, #8
 800317c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f93a 	bl	80033f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f921 	bl	80033e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00c      	beq.n	80031c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2210      	movs	r2, #16
 80031c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2208      	movs	r2, #8
 80031e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f91c 	bl	8003420 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f903 	bl	800340c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2210      	movs	r2, #16
 8003220:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f906 	bl	8003434 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2208      	movs	r2, #8
 8003242:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8ff 	bl	8003448 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d07b      	beq.n	800334c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d072      	beq.n	8003344 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f043 0302 	orr.w	r3, r3, #2
 8003294:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d043      	beq.n	8003344 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d03e      	beq.n	8003344 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032cc:	2b60      	cmp	r3, #96	; 0x60
 80032ce:	d02b      	beq.n	8003328 <HAL_CAN_IRQHandler+0x32a>
 80032d0:	2b60      	cmp	r3, #96	; 0x60
 80032d2:	d82e      	bhi.n	8003332 <HAL_CAN_IRQHandler+0x334>
 80032d4:	2b50      	cmp	r3, #80	; 0x50
 80032d6:	d022      	beq.n	800331e <HAL_CAN_IRQHandler+0x320>
 80032d8:	2b50      	cmp	r3, #80	; 0x50
 80032da:	d82a      	bhi.n	8003332 <HAL_CAN_IRQHandler+0x334>
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	d019      	beq.n	8003314 <HAL_CAN_IRQHandler+0x316>
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d826      	bhi.n	8003332 <HAL_CAN_IRQHandler+0x334>
 80032e4:	2b30      	cmp	r3, #48	; 0x30
 80032e6:	d010      	beq.n	800330a <HAL_CAN_IRQHandler+0x30c>
 80032e8:	2b30      	cmp	r3, #48	; 0x30
 80032ea:	d822      	bhi.n	8003332 <HAL_CAN_IRQHandler+0x334>
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d002      	beq.n	80032f6 <HAL_CAN_IRQHandler+0x2f8>
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d005      	beq.n	8003300 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032f4:	e01d      	b.n	8003332 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	f043 0308 	orr.w	r3, r3, #8
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032fe:	e019      	b.n	8003334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	f043 0310 	orr.w	r3, r3, #16
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003308:	e014      	b.n	8003334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003312:	e00f      	b.n	8003334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800331c:	e00a      	b.n	8003334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003326:	e005      	b.n	8003334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003330:	e000      	b.n	8003334 <HAL_CAN_IRQHandler+0x336>
            break;
 8003332:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003342:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2204      	movs	r2, #4
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f87c 	bl	800345c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003364:	bf00      	nop
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800349c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a2:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	60d3      	str	r3, [r2, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <__NVIC_GetPriorityGrouping+0x18>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0307 	and.w	r3, r3, #7
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	db0b      	blt.n	80034fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <__NVIC_EnableIRQ+0x38>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2001      	movs	r0, #1
 80034f6:	fa00 f202 	lsl.w	r2, r0, r2
 80034fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000e100 	.word	0xe000e100

08003510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	db0a      	blt.n	800353a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	490c      	ldr	r1, [pc, #48]	; (800355c <__NVIC_SetPriority+0x4c>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	440b      	add	r3, r1
 8003534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003538:	e00a      	b.n	8003550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <__NVIC_SetPriority+0x50>)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3b04      	subs	r3, #4
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	440b      	add	r3, r1
 800354e:	761a      	strb	r2, [r3, #24]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000e100 	.word	0xe000e100
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f1c3 0307 	rsb	r3, r3, #7
 800357e:	2b04      	cmp	r3, #4
 8003580:	bf28      	it	cs
 8003582:	2304      	movcs	r3, #4
 8003584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3304      	adds	r3, #4
 800358a:	2b06      	cmp	r3, #6
 800358c:	d902      	bls.n	8003594 <NVIC_EncodePriority+0x30>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3b03      	subs	r3, #3
 8003592:	e000      	b.n	8003596 <NVIC_EncodePriority+0x32>
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	f04f 32ff 	mov.w	r2, #4294967295
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	401a      	ands	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ac:	f04f 31ff 	mov.w	r1, #4294967295
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43d9      	mvns	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	4313      	orrs	r3, r2
         );
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3724      	adds	r7, #36	; 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff4c 	bl	8003470 <__NVIC_SetPriorityGrouping>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035f2:	f7ff ff61 	bl	80034b8 <__NVIC_GetPriorityGrouping>
 80035f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	6978      	ldr	r0, [r7, #20]
 80035fe:	f7ff ffb1 	bl	8003564 <NVIC_EncodePriority>
 8003602:	4602      	mov	r2, r0
 8003604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ff80 	bl	8003510 <__NVIC_SetPriority>
}
 8003610:	bf00      	nop
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ff54 	bl	80034d4 <__NVIC_EnableIRQ>
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e098      	b.n	8003778 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	4b4d      	ldr	r3, [pc, #308]	; (8003784 <HAL_DMA_Init+0x150>)
 800364e:	429a      	cmp	r2, r3
 8003650:	d80f      	bhi.n	8003672 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_DMA_Init+0x154>)
 800365a:	4413      	add	r3, r2
 800365c:	4a4b      	ldr	r2, [pc, #300]	; (800378c <HAL_DMA_Init+0x158>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	009a      	lsls	r2, r3, #2
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a48      	ldr	r2, [pc, #288]	; (8003790 <HAL_DMA_Init+0x15c>)
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
 8003670:	e00e      	b.n	8003690 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_DMA_Init+0x160>)
 800367a:	4413      	add	r3, r2
 800367c:	4a43      	ldr	r2, [pc, #268]	; (800378c <HAL_DMA_Init+0x158>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	009a      	lsls	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a42      	ldr	r2, [pc, #264]	; (8003798 <HAL_DMA_Init+0x164>)
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ea:	d039      	beq.n	8003760 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	4a27      	ldr	r2, [pc, #156]	; (8003790 <HAL_DMA_Init+0x15c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d11a      	bne.n	800372c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_DMA_Init+0x168>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f003 031c 	and.w	r3, r3, #28
 8003702:	210f      	movs	r1, #15
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	4924      	ldr	r1, [pc, #144]	; (800379c <HAL_DMA_Init+0x168>)
 800370c:	4013      	ands	r3, r2
 800370e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <HAL_DMA_Init+0x168>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	f003 031c 	and.w	r3, r3, #28
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	491d      	ldr	r1, [pc, #116]	; (800379c <HAL_DMA_Init+0x168>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
 800372a:	e019      	b.n	8003760 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800372c:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <HAL_DMA_Init+0x16c>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	f003 031c 	and.w	r3, r3, #28
 8003738:	210f      	movs	r1, #15
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	4917      	ldr	r1, [pc, #92]	; (80037a0 <HAL_DMA_Init+0x16c>)
 8003742:	4013      	ands	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_DMA_Init+0x16c>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f003 031c 	and.w	r3, r3, #28
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	4911      	ldr	r1, [pc, #68]	; (80037a0 <HAL_DMA_Init+0x16c>)
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40020407 	.word	0x40020407
 8003788:	bffdfff8 	.word	0xbffdfff8
 800378c:	cccccccd 	.word	0xcccccccd
 8003790:	40020000 	.word	0x40020000
 8003794:	bffdfbf8 	.word	0xbffdfbf8
 8003798:	40020400 	.word	0x40020400
 800379c:	400200a8 	.word	0x400200a8
 80037a0:	400204a8 	.word	0x400204a8

080037a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	f003 031c 	and.w	r3, r3, #28
 80037c4:	2204      	movs	r2, #4
 80037c6:	409a      	lsls	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d026      	beq.n	800381e <HAL_DMA_IRQHandler+0x7a>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d021      	beq.n	800381e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d107      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0204 	bic.w	r2, r2, #4
 80037f6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	f003 021c 	and.w	r2, r3, #28
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2104      	movs	r1, #4
 8003806:	fa01 f202 	lsl.w	r2, r1, r2
 800380a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	2b00      	cmp	r3, #0
 8003812:	d071      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800381c:	e06c      	b.n	80038f8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f003 031c 	and.w	r3, r3, #28
 8003826:	2202      	movs	r2, #2
 8003828:	409a      	lsls	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d02e      	beq.n	8003890 <HAL_DMA_IRQHandler+0xec>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d029      	beq.n	8003890 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 020a 	bic.w	r2, r2, #10
 8003858:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f003 021c 	and.w	r2, r3, #28
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	2102      	movs	r1, #2
 8003870:	fa01 f202 	lsl.w	r2, r1, r2
 8003874:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d038      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800388e:	e033      	b.n	80038f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	f003 031c 	and.w	r3, r3, #28
 8003898:	2208      	movs	r2, #8
 800389a:	409a      	lsls	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d02a      	beq.n	80038fa <HAL_DMA_IRQHandler+0x156>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d025      	beq.n	80038fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 020e 	bic.w	r2, r2, #14
 80038bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f003 021c 	and.w	r2, r3, #28
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
}
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003912:	e148      	b.n	8003ba6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2101      	movs	r1, #1
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	fa01 f303 	lsl.w	r3, r1, r3
 8003920:	4013      	ands	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 813a 	beq.w	8003ba0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d00b      	beq.n	800394c <HAL_GPIO_Init+0x48>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d007      	beq.n	800394c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003940:	2b11      	cmp	r3, #17
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b12      	cmp	r3, #18
 800394a:	d130      	bne.n	80039ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003982:	2201      	movs	r2, #1
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	f003 0201 	and.w	r2, r3, #1
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0xea>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b12      	cmp	r3, #18
 80039ec:	d123      	bne.n	8003a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	08da      	lsrs	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3208      	adds	r2, #8
 80039f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	220f      	movs	r2, #15
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	08da      	lsrs	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3208      	adds	r2, #8
 8003a30:	6939      	ldr	r1, [r7, #16]
 8003a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	2203      	movs	r2, #3
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0203 	and.w	r2, r3, #3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8094 	beq.w	8003ba0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a78:	4b52      	ldr	r3, [pc, #328]	; (8003bc4 <HAL_GPIO_Init+0x2c0>)
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7c:	4a51      	ldr	r2, [pc, #324]	; (8003bc4 <HAL_GPIO_Init+0x2c0>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6613      	str	r3, [r2, #96]	; 0x60
 8003a84:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_GPIO_Init+0x2c0>)
 8003a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a90:	4a4d      	ldr	r2, [pc, #308]	; (8003bc8 <HAL_GPIO_Init+0x2c4>)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3302      	adds	r3, #2
 8003a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003aba:	d00d      	beq.n	8003ad8 <HAL_GPIO_Init+0x1d4>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a43      	ldr	r2, [pc, #268]	; (8003bcc <HAL_GPIO_Init+0x2c8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <HAL_GPIO_Init+0x1d0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a42      	ldr	r2, [pc, #264]	; (8003bd0 <HAL_GPIO_Init+0x2cc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <HAL_GPIO_Init+0x1cc>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e004      	b.n	8003ada <HAL_GPIO_Init+0x1d6>
 8003ad0:	2307      	movs	r3, #7
 8003ad2:	e002      	b.n	8003ada <HAL_GPIO_Init+0x1d6>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_GPIO_Init+0x1d6>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	f002 0203 	and.w	r2, r2, #3
 8003ae0:	0092      	lsls	r2, r2, #2
 8003ae2:	4093      	lsls	r3, r2
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aea:	4937      	ldr	r1, [pc, #220]	; (8003bc8 <HAL_GPIO_Init+0x2c4>)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	3302      	adds	r3, #2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_GPIO_Init+0x2d0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b1c:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <HAL_GPIO_Init+0x2d0>)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003b22:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <HAL_GPIO_Init+0x2d0>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b46:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <HAL_GPIO_Init+0x2d0>)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b4c:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <HAL_GPIO_Init+0x2d0>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b70:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_GPIO_Init+0x2d0>)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <HAL_GPIO_Init+0x2d0>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b9a:	4a0e      	ldr	r2, [pc, #56]	; (8003bd4 <HAL_GPIO_Init+0x2d0>)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f47f aeaf 	bne.w	8003914 <HAL_GPIO_Init+0x10>
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	48000400 	.word	0x48000400
 8003bd0:	48000800 	.word	0x48000800
 8003bd4:	40010400 	.word	0x40010400

08003bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e081      	b.n	8003cee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fed0 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d107      	bne.n	8003c52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e006      	b.n	8003c60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d104      	bne.n	8003c72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69d9      	ldr	r1, [r3, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1a      	ldr	r2, [r3, #32]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	461a      	mov	r2, r3
 8003d04:	460b      	mov	r3, r1
 8003d06:	817b      	strh	r3, [r7, #10]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	f040 80da 	bne.w	8003ece <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_I2C_Master_Transmit+0x30>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e0d3      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d30:	f7fe f9aa 	bl	8002088 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	2319      	movs	r3, #25
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 faed 	bl	8004322 <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0be      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2221      	movs	r2, #33	; 0x21
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	893a      	ldrh	r2, [r7, #8]
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2bff      	cmp	r3, #255	; 0xff
 8003d82:	d90e      	bls.n	8003da2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	22ff      	movs	r2, #255	; 0xff
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	8979      	ldrh	r1, [r7, #10]
 8003d92:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fc50 	bl	8004640 <I2C_TransferConfig>
 8003da0:	e06c      	b.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	8979      	ldrh	r1, [r7, #10]
 8003db4:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fc3f 	bl	8004640 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003dc2:	e05b      	b.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	6a39      	ldr	r1, [r7, #32]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 faea 	bl	80043a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e07b      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d034      	beq.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d130      	bne.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fa7c 	bl	8004322 <I2C_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e04d      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2bff      	cmp	r3, #255	; 0xff
 8003e3c:	d90e      	bls.n	8003e5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	22ff      	movs	r2, #255	; 0xff
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	8979      	ldrh	r1, [r7, #10]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fbf3 	bl	8004640 <I2C_TransferConfig>
 8003e5a:	e00f      	b.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	8979      	ldrh	r1, [r7, #10]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fbe2 	bl	8004640 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d19e      	bne.n	8003dc4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	6a39      	ldr	r1, [r7, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fac9 	bl	8004422 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e01a      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_I2C_Master_Transmit+0x1e4>)
 8003eae:	400b      	ands	r3, r1
 8003eb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	80002000 	.word	0x80002000
 8003edc:	fe00e800 	.word	0xfe00e800

08003ee0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	461a      	mov	r2, r3
 8003eec:	460b      	mov	r3, r1
 8003eee:	817b      	strh	r3, [r7, #10]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	f040 80db 	bne.w	80040b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2C_Master_Receive+0x30>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e0d4      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f18:	f7fe f8b6 	bl	8002088 <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2319      	movs	r3, #25
 8003f24:	2201      	movs	r2, #1
 8003f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f9f9 	bl	8004322 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0bf      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2222      	movs	r2, #34	; 0x22
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2210      	movs	r2, #16
 8003f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	893a      	ldrh	r2, [r7, #8]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2bff      	cmp	r3, #255	; 0xff
 8003f6a:	d90e      	bls.n	8003f8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	8979      	ldrh	r1, [r7, #10]
 8003f7a:	4b52      	ldr	r3, [pc, #328]	; (80040c4 <HAL_I2C_Master_Receive+0x1e4>)
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fb5c 	bl	8004640 <I2C_TransferConfig>
 8003f88:	e06d      	b.n	8004066 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	8979      	ldrh	r1, [r7, #10]
 8003f9c:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <HAL_I2C_Master_Receive+0x1e4>)
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 fb4b 	bl	8004640 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003faa:	e05c      	b.n	8004066 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	6a39      	ldr	r1, [r7, #32]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fa73 	bl	800449c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e07c      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d034      	beq.n	8004066 <HAL_I2C_Master_Receive+0x186>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d130      	bne.n	8004066 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	2200      	movs	r2, #0
 800400c:	2180      	movs	r1, #128	; 0x80
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f987 	bl	8004322 <I2C_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e04d      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2bff      	cmp	r3, #255	; 0xff
 8004026:	d90e      	bls.n	8004046 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	b2da      	uxtb	r2, r3
 8004034:	8979      	ldrh	r1, [r7, #10]
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fafe 	bl	8004640 <I2C_TransferConfig>
 8004044:	e00f      	b.n	8004066 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004054:	b2da      	uxtb	r2, r3
 8004056:	8979      	ldrh	r1, [r7, #10]
 8004058:	2300      	movs	r3, #0
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 faed 	bl	8004640 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d19d      	bne.n	8003fac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	6a39      	ldr	r1, [r7, #32]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f9d4 	bl	8004422 <I2C_WaitOnSTOPFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e01a      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2220      	movs	r2, #32
 800408a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <HAL_I2C_Master_Receive+0x1e8>)
 8004098:	400b      	ands	r3, r1
 800409a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	80002400 	.word	0x80002400
 80040c8:	fe00e800 	.word	0xfe00e800

080040cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	460b      	mov	r3, r1
 80040da:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	f040 80f1 	bne.w	80042d0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	d101      	bne.n	8004102 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
 8004100:	e0e7      	b.n	80042d2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_I2C_IsDeviceReady+0x44>
 800410c:	2302      	movs	r3, #2
 800410e:	e0e0      	b.n	80042d2 <HAL_I2C_IsDeviceReady+0x206>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <HAL_I2C_IsDeviceReady+0x72>
 800412e:	897b      	ldrh	r3, [r7, #10]
 8004130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004138:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800413c:	e004      	b.n	8004148 <HAL_I2C_IsDeviceReady+0x7c>
 800413e:	897b      	ldrh	r3, [r7, #10]
 8004140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004144:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800414e:	f7fd ff9b 	bl	8002088 <HAL_GetTick>
 8004152:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004180:	e034      	b.n	80041ec <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d01a      	beq.n	80041c0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fd ff7d 	bl	8002088 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <HAL_I2C_IsDeviceReady+0xd4>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10f      	bne.n	80041c0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e088      	b.n	80042d2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80041ec:	7ffb      	ldrb	r3, [r7, #31]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_I2C_IsDeviceReady+0x12c>
 80041f2:	7fbb      	ldrb	r3, [r7, #30]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0c4      	beq.n	8004182 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d01a      	beq.n	800423c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2200      	movs	r2, #0
 800420e:	2120      	movs	r1, #32
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f886 	bl	8004322 <I2C_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e058      	b.n	80042d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2220      	movs	r2, #32
 8004226:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e04a      	b.n	80042d2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	2120      	movs	r1, #32
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f86b 	bl	8004322 <I2C_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e03d      	b.n	80042d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2210      	movs	r2, #16
 800425c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2220      	movs	r2, #32
 8004264:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d118      	bne.n	80042a0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2200      	movs	r2, #0
 8004286:	2120      	movs	r1, #32
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f84a 	bl	8004322 <I2C_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e01c      	b.n	80042d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2220      	movs	r2, #32
 800429e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	3301      	adds	r3, #1
 80042a4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	f63f af3b 	bhi.w	8004126 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d103      	bne.n	80042f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2200      	movs	r2, #0
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d007      	beq.n	8004316 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	619a      	str	r2, [r3, #24]
  }
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004332:	e022      	b.n	800437a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d01e      	beq.n	800437a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433c:	f7fd fea4 	bl	8002088 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d302      	bcc.n	8004352 <I2C_WaitOnFlagUntilTimeout+0x30>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d113      	bne.n	800437a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e00f      	b.n	800439a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	429a      	cmp	r2, r3
 8004396:	d0cd      	beq.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043ae:	e02c      	b.n	800440a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f8dd 	bl	8004574 <I2C_IsAcknowledgeFailed>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e02a      	b.n	800441a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d01e      	beq.n	800440a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043cc:	f7fd fe5c 	bl	8002088 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d113      	bne.n	800440a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d1cb      	bne.n	80043b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800442e:	e028      	b.n	8004482 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f89d 	bl	8004574 <I2C_IsAcknowledgeFailed>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e026      	b.n	8004492 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004444:	f7fd fe20 	bl	8002088 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	d302      	bcc.n	800445a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d113      	bne.n	8004482 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e007      	b.n	8004492 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b20      	cmp	r3, #32
 800448e:	d1cf      	bne.n	8004430 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a8:	e055      	b.n	8004556 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f860 	bl	8004574 <I2C_IsAcknowledgeFailed>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e053      	b.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d129      	bne.n	8004520 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d105      	bne.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e03f      	b.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2220      	movs	r2, #32
 80044ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80044fa:	400b      	ands	r3, r1
 80044fc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e022      	b.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004520:	f7fd fdb2 	bl	8002088 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e007      	b.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b04      	cmp	r3, #4
 8004562:	d1a2      	bne.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	fe00e800 	.word	0xfe00e800

08004574 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d151      	bne.n	8004632 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458e:	e022      	b.n	80045d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d01e      	beq.n	80045d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004598:	f7fd fd76 	bl	8002088 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d302      	bcc.n	80045ae <I2C_IsAcknowledgeFailed+0x3a>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d113      	bne.n	80045d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e02e      	b.n	8004634 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d1d5      	bne.n	8004590 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2210      	movs	r2, #16
 80045ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2220      	movs	r2, #32
 80045f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff fe70 	bl	80042da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6859      	ldr	r1, [r3, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <I2C_IsAcknowledgeFailed+0xc8>)
 8004606:	400b      	ands	r3, r1
 8004608:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f043 0204 	orr.w	r2, r3, #4
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	fe00e800 	.word	0xfe00e800

08004640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	817b      	strh	r3, [r7, #10]
 800464e:	4613      	mov	r3, r2
 8004650:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	0d5b      	lsrs	r3, r3, #21
 800465c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004660:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <I2C_TransferConfig+0x58>)
 8004662:	430b      	orrs	r3, r1
 8004664:	43db      	mvns	r3, r3
 8004666:	ea02 0103 	and.w	r1, r2, r3
 800466a:	897b      	ldrh	r3, [r7, #10]
 800466c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004670:	7a7b      	ldrb	r3, [r7, #9]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	431a      	orrs	r2, r3
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	03ff63ff 	.word	0x03ff63ff

0800469c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d138      	bne.n	8004724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046bc:	2302      	movs	r3, #2
 80046be:	e032      	b.n	8004726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6819      	ldr	r1, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b20      	cmp	r3, #32
 8004746:	d139      	bne.n	80047bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004752:	2302      	movs	r3, #2
 8004754:	e033      	b.n	80047be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2224      	movs	r2, #36	; 0x24
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004784:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e000      	b.n	80047be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047da:	6013      	str	r3, [r2, #0]
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40007000 	.word	0x40007000

080047ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_PWREx_GetVoltageRange+0x18>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40007000 	.word	0x40007000

08004808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004816:	d130      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004818:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004824:	d038      	beq.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004826:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800482e:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004834:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2232      	movs	r2, #50	; 0x32
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	0c9b      	lsrs	r3, r3, #18
 8004848:	3301      	adds	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800484c:	e002      	b.n	8004854 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b01      	subs	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004860:	d102      	bne.n	8004868 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f2      	bne.n	800484e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d110      	bne.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e00f      	b.n	800489a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004886:	d007      	beq.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004890:	4a05      	ldr	r2, [pc, #20]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004896:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40007000 	.word	0x40007000
 80048ac:	20000000 	.word	0x20000000
 80048b0:	431bde83 	.word	0x431bde83

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f000 bc11 	b.w	80050ea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c8:	4ba0      	ldr	r3, [pc, #640]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 030c 	and.w	r3, r3, #12
 80048d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d2:	4b9e      	ldr	r3, [pc, #632]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80e4 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <HAL_RCC_OscConfig+0x4c>
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	f040 808b 	bne.w	8004a0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	f040 8087 	bne.w	8004a0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004900:	4b92      	ldr	r3, [pc, #584]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_OscConfig+0x64>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e3e8      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1a      	ldr	r2, [r3, #32]
 800491c:	4b8b      	ldr	r3, [pc, #556]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_RCC_OscConfig+0x7e>
 8004928:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004930:	e005      	b.n	800493e <HAL_RCC_OscConfig+0x8a>
 8004932:	4b86      	ldr	r3, [pc, #536]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800493e:	4293      	cmp	r3, r2
 8004940:	d223      	bcs.n	800498a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fdaa 	bl	80054a0 <RCC_SetFlashLatencyFromMSIRange>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e3c9      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004956:	4b7d      	ldr	r3, [pc, #500]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a7c      	ldr	r2, [pc, #496]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 800495c:	f043 0308 	orr.w	r3, r3, #8
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	4b7a      	ldr	r3, [pc, #488]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	4977      	ldr	r1, [pc, #476]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004974:	4b75      	ldr	r3, [pc, #468]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	4972      	ldr	r1, [pc, #456]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
 8004988:	e025      	b.n	80049d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800498a:	4b70      	ldr	r3, [pc, #448]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a6f      	ldr	r2, [pc, #444]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004990:	f043 0308 	orr.w	r3, r3, #8
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b6d      	ldr	r3, [pc, #436]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	496a      	ldr	r1, [pc, #424]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049a8:	4b68      	ldr	r3, [pc, #416]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	4965      	ldr	r1, [pc, #404]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fd6a 	bl	80054a0 <RCC_SetFlashLatencyFromMSIRange>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e389      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049d6:	f000 fc6f 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	495a      	ldr	r1, [pc, #360]	; (8004b50 <HAL_RCC_OscConfig+0x29c>)
 80049e8:	5ccb      	ldrb	r3, [r1, r3]
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	fa22 f303 	lsr.w	r3, r2, r3
 80049f2:	4a58      	ldr	r2, [pc, #352]	; (8004b54 <HAL_RCC_OscConfig+0x2a0>)
 80049f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049f6:	4b58      	ldr	r3, [pc, #352]	; (8004b58 <HAL_RCC_OscConfig+0x2a4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd f956 	bl	8001cac <HAL_InitTick>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d052      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	e36d      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d032      	beq.n	8004a7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a16:	4b4d      	ldr	r3, [pc, #308]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a4c      	ldr	r2, [pc, #304]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a22:	f7fd fb31 	bl	8002088 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a2a:	f7fd fb2d 	bl	8002088 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e356      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a3c:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a48:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a3f      	ldr	r2, [pc, #252]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a4e:	f043 0308 	orr.w	r3, r3, #8
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b3d      	ldr	r3, [pc, #244]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	493a      	ldr	r1, [pc, #232]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a66:	4b39      	ldr	r3, [pc, #228]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	4935      	ldr	r1, [pc, #212]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
 8004a7a:	e01a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a32      	ldr	r2, [pc, #200]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a88:	f7fd fafe 	bl	8002088 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a90:	f7fd fafa 	bl	8002088 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e323      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004aa2:	4b2a      	ldr	r3, [pc, #168]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x1dc>
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ab0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d073      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x21c>
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d10b      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d063      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x2f0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d15f      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e300      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d106      	bne.n	8004b00 <HAL_RCC_OscConfig+0x24c>
 8004af2:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e01d      	b.n	8004b3c <HAL_RCC_OscConfig+0x288>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x270>
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a0f      	ldr	r2, [pc, #60]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e00b      	b.n	8004b3c <HAL_RCC_OscConfig+0x288>
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <HAL_RCC_OscConfig+0x298>)
 8004b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd faa0 	bl	8002088 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b4a:	e010      	b.n	8004b6e <HAL_RCC_OscConfig+0x2ba>
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	0800ca3c 	.word	0x0800ca3c
 8004b54:	20000000 	.word	0x20000000
 8004b58:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fd fa94 	bl	8002088 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e2bd      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6e:	4baf      	ldr	r3, [pc, #700]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x2a8>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd fa84 	bl	8002088 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd fa80 	bl	8002088 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e2a9      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b96:	4ba5      	ldr	r3, [pc, #660]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x2d0>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d060      	beq.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x310>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	d119      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d116      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc4:	4b99      	ldr	r3, [pc, #612]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_OscConfig+0x328>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e286      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b93      	ldr	r3, [pc, #588]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	4990      	ldr	r1, [pc, #576]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf0:	e040      	b.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d023      	beq.n	8004c42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bfa:	4b8c      	ldr	r3, [pc, #560]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a8b      	ldr	r2, [pc, #556]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd fa3f 	bl	8002088 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c0e:	f7fd fa3b 	bl	8002088 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e264      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c20:	4b82      	ldr	r3, [pc, #520]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2c:	4b7f      	ldr	r3, [pc, #508]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	061b      	lsls	r3, r3, #24
 8004c3a:	497c      	ldr	r1, [pc, #496]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
 8004c40:	e018      	b.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c42:	4b7a      	ldr	r3, [pc, #488]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a79      	ldr	r2, [pc, #484]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7fd fa1b 	bl	8002088 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c56:	f7fd fa17 	bl	8002088 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e240      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c68:	4b70      	ldr	r3, [pc, #448]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f0      	bne.n	8004c56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d03c      	beq.n	8004cfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01c      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c88:	4b68      	ldr	r3, [pc, #416]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c8e:	4a67      	ldr	r2, [pc, #412]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c98:	f7fd f9f6 	bl	8002088 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca0:	f7fd f9f2 	bl	8002088 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e21b      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cb2:	4b5e      	ldr	r3, [pc, #376]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0ef      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x3ec>
 8004cc0:	e01b      	b.n	8004cfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc2:	4b5a      	ldr	r3, [pc, #360]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc8:	4a58      	ldr	r2, [pc, #352]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd2:	f7fd f9d9 	bl	8002088 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cda:	f7fd f9d5 	bl	8002088 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e1fe      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cec:	4b4f      	ldr	r3, [pc, #316]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ef      	bne.n	8004cda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80a6 	beq.w	8004e54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d0c:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10d      	bne.n	8004d34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d18:	4b44      	ldr	r3, [pc, #272]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	4a43      	ldr	r2, [pc, #268]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6593      	str	r3, [r2, #88]	; 0x58
 8004d24:	4b41      	ldr	r3, [pc, #260]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d30:	2301      	movs	r3, #1
 8004d32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d34:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <HAL_RCC_OscConfig+0x57c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d118      	bne.n	8004d72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d40:	4b3b      	ldr	r3, [pc, #236]	; (8004e30 <HAL_RCC_OscConfig+0x57c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a3a      	ldr	r2, [pc, #232]	; (8004e30 <HAL_RCC_OscConfig+0x57c>)
 8004d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4c:	f7fd f99c 	bl	8002088 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d54:	f7fd f998 	bl	8002088 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1c1      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d66:	4b32      	ldr	r3, [pc, #200]	; (8004e30 <HAL_RCC_OscConfig+0x57c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d108      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4d8>
 8004d7a:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d8a:	e024      	b.n	8004dd6 <HAL_RCC_OscConfig+0x522>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d110      	bne.n	8004db6 <HAL_RCC_OscConfig+0x502>
 8004d94:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004d9c:	f043 0304 	orr.w	r3, r3, #4
 8004da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004da4:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004db4:	e00f      	b.n	8004dd6 <HAL_RCC_OscConfig+0x522>
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	4a1b      	ldr	r2, [pc, #108]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004dbe:	f023 0301 	bic.w	r3, r3, #1
 8004dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dc6:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004dce:	f023 0304 	bic.w	r3, r3, #4
 8004dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dde:	f7fd f953 	bl	8002088 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fd f94f 	bl	8002088 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e176      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_OscConfig+0x578>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0ed      	beq.n	8004de6 <HAL_RCC_OscConfig+0x532>
 8004e0a:	e01a      	b.n	8004e42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fd f93c 	bl	8002088 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e12:	e00f      	b.n	8004e34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e14:	f7fd f938 	bl	8002088 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d906      	bls.n	8004e34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e15f      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e34:	4baa      	ldr	r3, [pc, #680]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e8      	bne.n	8004e14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e42:	7ffb      	ldrb	r3, [r7, #31]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4ba5      	ldr	r3, [pc, #660]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4c:	4aa4      	ldr	r2, [pc, #656]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d03c      	beq.n	8004eda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01c      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e68:	4b9d      	ldr	r3, [pc, #628]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e6e:	4a9c      	ldr	r2, [pc, #624]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fd f906 	bl	8002088 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e80:	f7fd f902 	bl	8002088 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e12b      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e92:	4b93      	ldr	r3, [pc, #588]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ef      	beq.n	8004e80 <HAL_RCC_OscConfig+0x5cc>
 8004ea0:	e01b      	b.n	8004eda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea2:	4b8f      	ldr	r3, [pc, #572]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ea8:	4a8d      	ldr	r2, [pc, #564]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fd f8e9 	bl	8002088 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eba:	f7fd f8e5 	bl	8002088 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e10e      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ecc:	4b84      	ldr	r3, [pc, #528]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1ef      	bne.n	8004eba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8102 	beq.w	80050e8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	f040 80c5 	bne.w	8005078 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004eee:	4b7c      	ldr	r3, [pc, #496]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0203 	and.w	r2, r3, #3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d12c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d123      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d11b      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d113      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	3b01      	subs	r3, #1
 8004f42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d109      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	3b01      	subs	r3, #1
 8004f56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d067      	beq.n	800502c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d062      	beq.n	8005028 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f62:	4b5f      	ldr	r3, [pc, #380]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0bb      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f72:	4b5b      	ldr	r3, [pc, #364]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a5a      	ldr	r2, [pc, #360]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f7e:	f7fd f883 	bl	8002088 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f86:	f7fd f87f 	bl	8002088 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e0a8      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f98:	4b51      	ldr	r3, [pc, #324]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f0      	bne.n	8004f86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa4:	4b4e      	ldr	r3, [pc, #312]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	4b4e      	ldr	r3, [pc, #312]	; (80050e4 <HAL_RCC_OscConfig+0x830>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	0112      	lsls	r2, r2, #4
 8004fb8:	4311      	orrs	r1, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fbe:	0212      	lsls	r2, r2, #8
 8004fc0:	4311      	orrs	r1, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fc6:	0852      	lsrs	r2, r2, #1
 8004fc8:	3a01      	subs	r2, #1
 8004fca:	0552      	lsls	r2, r2, #21
 8004fcc:	4311      	orrs	r1, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fd2:	0852      	lsrs	r2, r2, #1
 8004fd4:	3a01      	subs	r2, #1
 8004fd6:	0652      	lsls	r2, r2, #25
 8004fd8:	4311      	orrs	r1, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fde:	06d2      	lsls	r2, r2, #27
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	493f      	ldr	r1, [pc, #252]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fe8:	4b3d      	ldr	r3, [pc, #244]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a3c      	ldr	r2, [pc, #240]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ff4:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a39      	ldr	r2, [pc, #228]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8004ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ffe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005000:	f7fd f842 	bl	8002088 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005008:	f7fd f83e 	bl	8002088 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e067      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501a:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005026:	e05f      	b.n	80050e8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e05e      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502c:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d157      	bne.n	80050e8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005038:	4b29      	ldr	r3, [pc, #164]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 800503e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005042:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005044:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	4a25      	ldr	r2, [pc, #148]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 800504a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800504e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005050:	f7fd f81a 	bl	8002088 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005058:	f7fd f816 	bl	8002088 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e03f      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506a:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x7a4>
 8005076:	e037      	b.n	80050e8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b0c      	cmp	r3, #12
 800507c:	d02d      	beq.n	80050da <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507e:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8005084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005088:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d105      	bne.n	80050a2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005096:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 800509c:	f023 0303 	bic.w	r3, r3, #3
 80050a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80050a2:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 80050a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80050ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fc ffe9 	bl	8002088 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ba:	f7fc ffe5 	bl	8002088 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e00e      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050cc:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <HAL_RCC_OscConfig+0x82c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <HAL_RCC_OscConfig+0x806>
 80050d8:	e006      	b.n	80050e8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e005      	b.n	80050ea <HAL_RCC_OscConfig+0x836>
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000
 80050e4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop

080050f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0c8      	b.n	800529a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005108:	4b66      	ldr	r3, [pc, #408]	; (80052a4 <HAL_RCC_ClockConfig+0x1b0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d910      	bls.n	8005138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b63      	ldr	r3, [pc, #396]	; (80052a4 <HAL_RCC_ClockConfig+0x1b0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 0207 	bic.w	r2, r3, #7
 800511e:	4961      	ldr	r1, [pc, #388]	; (80052a4 <HAL_RCC_ClockConfig+0x1b0>)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b5f      	ldr	r3, [pc, #380]	; (80052a4 <HAL_RCC_ClockConfig+0x1b0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0b0      	b.n	800529a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d04c      	beq.n	80051de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d107      	bne.n	800515c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514c:	4b56      	ldr	r3, [pc, #344]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d121      	bne.n	800519c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e09e      	b.n	800529a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d107      	bne.n	8005174 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005164:	4b50      	ldr	r3, [pc, #320]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d115      	bne.n	800519c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e092      	b.n	800529a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d107      	bne.n	800518c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800517c:	4b4a      	ldr	r3, [pc, #296]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d109      	bne.n	800519c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e086      	b.n	800529a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800518c:	4b46      	ldr	r3, [pc, #280]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e07e      	b.n	800529a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800519c:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f023 0203 	bic.w	r2, r3, #3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	493f      	ldr	r1, [pc, #252]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ae:	f7fc ff6b 	bl	8002088 <HAL_GetTick>
 80051b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b4:	e00a      	b.n	80051cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b6:	f7fc ff67 	bl	8002088 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e066      	b.n	800529a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051cc:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 020c 	and.w	r2, r3, #12
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	429a      	cmp	r2, r3
 80051dc:	d1eb      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ea:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	492c      	ldr	r1, [pc, #176]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <HAL_RCC_ClockConfig+0x1b0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d210      	bcs.n	800522c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b26      	ldr	r3, [pc, #152]	; (80052a4 <HAL_RCC_ClockConfig+0x1b0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 0207 	bic.w	r2, r3, #7
 8005212:	4924      	ldr	r1, [pc, #144]	; (80052a4 <HAL_RCC_ClockConfig+0x1b0>)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	4313      	orrs	r3, r2
 8005218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800521a:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <HAL_RCC_ClockConfig+0x1b0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e036      	b.n	800529a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005238:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4918      	ldr	r1, [pc, #96]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005256:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4910      	ldr	r1, [pc, #64]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800526a:	f000 f825 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 800526e:	4602      	mov	r2, r0
 8005270:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <HAL_RCC_ClockConfig+0x1b4>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	490c      	ldr	r1, [pc, #48]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	5ccb      	ldrb	r3, [r1, r3]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	fa22 f303 	lsr.w	r3, r2, r3
 8005286:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <HAL_RCC_ClockConfig+0x1c0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f7fc fd0c 	bl	8001cac <HAL_InitTick>
 8005294:	4603      	mov	r3, r0
 8005296:	72fb      	strb	r3, [r7, #11]

  return status;
 8005298:	7afb      	ldrb	r3, [r7, #11]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40022000 	.word	0x40022000
 80052a8:	40021000 	.word	0x40021000
 80052ac:	0800ca3c 	.word	0x0800ca3c
 80052b0:	20000000 	.word	0x20000000
 80052b4:	20000004 	.word	0x20000004

080052b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b089      	sub	sp, #36	; 0x24
 80052bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	2300      	movs	r3, #0
 80052c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052c6:	4b3e      	ldr	r3, [pc, #248]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052d0:	4b3b      	ldr	r3, [pc, #236]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_GetSysClockFreq+0x34>
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d121      	bne.n	800532a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d11e      	bne.n	800532a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052ec:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052f8:	4b31      	ldr	r3, [pc, #196]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	e005      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005308:	4b2d      	ldr	r3, [pc, #180]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005314:	4a2b      	ldr	r2, [pc, #172]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10d      	bne.n	8005340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005328:	e00a      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b04      	cmp	r3, #4
 800532e:	d102      	bne.n	8005336 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005330:	4b25      	ldr	r3, [pc, #148]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	e004      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d101      	bne.n	8005340 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800533c:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800533e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b0c      	cmp	r3, #12
 8005344:	d134      	bne.n	80053b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005346:	4b1e      	ldr	r3, [pc, #120]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d003      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0xa6>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b03      	cmp	r3, #3
 800535a:	d003      	beq.n	8005364 <HAL_RCC_GetSysClockFreq+0xac>
 800535c:	e005      	b.n	800536a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800535e:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005360:	617b      	str	r3, [r7, #20]
      break;
 8005362:	e005      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005364:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005366:	617b      	str	r3, [r7, #20]
      break;
 8005368:	e002      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	617b      	str	r3, [r7, #20]
      break;
 800536e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005370:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	3301      	adds	r3, #1
 800537c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	0a1b      	lsrs	r3, r3, #8
 8005384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	fb02 f203 	mul.w	r2, r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	0e5b      	lsrs	r3, r3, #25
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	3301      	adds	r3, #1
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053b0:	69bb      	ldr	r3, [r7, #24]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3724      	adds	r7, #36	; 0x24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40021000 	.word	0x40021000
 80053c4:	0800ca54 	.word	0x0800ca54
 80053c8:	00f42400 	.word	0x00f42400

080053cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000000 	.word	0x20000000

080053e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053e8:	f7ff fff0 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4904      	ldr	r1, [pc, #16]	; (800540c <HAL_RCC_GetPCLK1Freq+0x28>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000
 800540c:	0800ca4c 	.word	0x0800ca4c

08005410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005414:	f7ff ffda 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 8005418:	4602      	mov	r2, r0
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	0adb      	lsrs	r3, r3, #11
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4904      	ldr	r1, [pc, #16]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005426:	5ccb      	ldrb	r3, [r1, r3]
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40021000 	.word	0x40021000
 8005438:	0800ca4c 	.word	0x0800ca4c

0800543c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	220f      	movs	r2, #15
 800544a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800544c:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_RCC_GetClockConfig+0x5c>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 0203 	and.w	r2, r3, #3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <HAL_RCC_GetClockConfig+0x5c>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <HAL_RCC_GetClockConfig+0x5c>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005470:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCC_GetClockConfig+0x5c>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	08db      	lsrs	r3, r3, #3
 8005476:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800547e:	4b07      	ldr	r3, [pc, #28]	; (800549c <HAL_RCC_GetClockConfig+0x60>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0207 	and.w	r2, r3, #7
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	601a      	str	r2, [r3, #0]
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40021000 	.word	0x40021000
 800549c:	40022000 	.word	0x40022000

080054a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054ac:	4b2a      	ldr	r3, [pc, #168]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054b8:	f7ff f998 	bl	80047ec <HAL_PWREx_GetVoltageRange>
 80054bc:	6178      	str	r0, [r7, #20]
 80054be:	e014      	b.n	80054ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c0:	4b25      	ldr	r3, [pc, #148]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	4a24      	ldr	r2, [pc, #144]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	6593      	str	r3, [r2, #88]	; 0x58
 80054cc:	4b22      	ldr	r3, [pc, #136]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054d8:	f7ff f988 	bl	80047ec <HAL_PWREx_GetVoltageRange>
 80054dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054de:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f0:	d10b      	bne.n	800550a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b80      	cmp	r3, #128	; 0x80
 80054f6:	d919      	bls.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2ba0      	cmp	r3, #160	; 0xa0
 80054fc:	d902      	bls.n	8005504 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054fe:	2302      	movs	r3, #2
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e013      	b.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005504:	2301      	movs	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e010      	b.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b80      	cmp	r3, #128	; 0x80
 800550e:	d902      	bls.n	8005516 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005510:	2303      	movs	r3, #3
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	e00a      	b.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d102      	bne.n	8005522 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800551c:	2302      	movs	r3, #2
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	e004      	b.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b70      	cmp	r3, #112	; 0x70
 8005526:	d101      	bne.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005528:	2301      	movs	r3, #1
 800552a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 0207 	bic.w	r2, r3, #7
 8005534:	4909      	ldr	r1, [pc, #36]	; (800555c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	429a      	cmp	r2, r3
 8005548:	d001      	beq.n	800554e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40021000 	.word	0x40021000
 800555c:	40022000 	.word	0x40022000

08005560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005568:	2300      	movs	r3, #0
 800556a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800556c:	2300      	movs	r3, #0
 800556e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005578:	2b00      	cmp	r3, #0
 800557a:	d031      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005580:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005584:	d01a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005586:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800558a:	d814      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005590:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005594:	d10f      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005596:	4bac      	ldr	r3, [pc, #688]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	4aab      	ldr	r2, [pc, #684]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055a2:	e00c      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3304      	adds	r3, #4
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f9dc 	bl	8005968 <RCCEx_PLLSAI1_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055b4:	e003      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	74fb      	strb	r3, [r7, #19]
      break;
 80055ba:	e000      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80055bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055be:	7cfb      	ldrb	r3, [r7, #19]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055c4:	4ba0      	ldr	r3, [pc, #640]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	499d      	ldr	r1, [pc, #628]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055da:	e001      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055dc:	7cfb      	ldrb	r3, [r7, #19]
 80055de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8099 	beq.w	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ee:	2300      	movs	r3, #0
 80055f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055f2:	4b95      	ldr	r3, [pc, #596]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005602:	2300      	movs	r3, #0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005608:	4b8f      	ldr	r3, [pc, #572]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800560a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560c:	4a8e      	ldr	r2, [pc, #568]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800560e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005612:	6593      	str	r3, [r2, #88]	; 0x58
 8005614:	4b8c      	ldr	r3, [pc, #560]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005620:	2301      	movs	r3, #1
 8005622:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005624:	4b89      	ldr	r3, [pc, #548]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a88      	ldr	r2, [pc, #544]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800562a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005630:	f7fc fd2a 	bl	8002088 <HAL_GetTick>
 8005634:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005636:	e009      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005638:	f7fc fd26 	bl	8002088 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d902      	bls.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	74fb      	strb	r3, [r7, #19]
        break;
 800564a:	e005      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800564c:	4b7f      	ldr	r3, [pc, #508]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ef      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005658:	7cfb      	ldrb	r3, [r7, #19]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d155      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800565e:	4b7a      	ldr	r3, [pc, #488]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005668:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01e      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	429a      	cmp	r2, r3
 8005678:	d019      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800567a:	4b73      	ldr	r3, [pc, #460]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005686:	4b70      	ldr	r3, [pc, #448]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	4a6e      	ldr	r2, [pc, #440]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005696:	4b6c      	ldr	r3, [pc, #432]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	4a6a      	ldr	r2, [pc, #424]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800569e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056a6:	4a68      	ldr	r2, [pc, #416]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d016      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fc fce6 	bl	8002088 <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056be:	e00b      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c0:	f7fc fce2 	bl	8002088 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d902      	bls.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	74fb      	strb	r3, [r7, #19]
            break;
 80056d6:	e006      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d8:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0ec      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80056e6:	7cfb      	ldrb	r3, [r7, #19]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ec:	4b56      	ldr	r3, [pc, #344]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fa:	4953      	ldr	r1, [pc, #332]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005702:	e004      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005704:	7cfb      	ldrb	r3, [r7, #19]
 8005706:	74bb      	strb	r3, [r7, #18]
 8005708:	e001      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	7cfb      	ldrb	r3, [r7, #19]
 800570c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800570e:	7c7b      	ldrb	r3, [r7, #17]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d105      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005714:	4b4c      	ldr	r3, [pc, #304]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	4a4b      	ldr	r2, [pc, #300]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800571a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800571e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800572c:	4b46      	ldr	r3, [pc, #280]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005732:	f023 0203 	bic.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	4943      	ldr	r1, [pc, #268]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800574e:	4b3e      	ldr	r3, [pc, #248]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005754:	f023 020c 	bic.w	r2, r3, #12
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	493a      	ldr	r1, [pc, #232]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005770:	4b35      	ldr	r3, [pc, #212]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	4932      	ldr	r1, [pc, #200]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005792:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a0:	4929      	ldr	r1, [pc, #164]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057b4:	4b24      	ldr	r3, [pc, #144]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	4921      	ldr	r1, [pc, #132]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057d6:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	4918      	ldr	r1, [pc, #96]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	4910      	ldr	r1, [pc, #64]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d02c      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800581a:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	4907      	ldr	r1, [pc, #28]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005838:	d10a      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800583a:	4b03      	ldr	r3, [pc, #12]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4a02      	ldr	r2, [pc, #8]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005844:	60d3      	str	r3, [r2, #12]
 8005846:	e015      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005848:	40021000 	.word	0x40021000
 800584c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005858:	d10c      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3304      	adds	r3, #4
 800585e:	2101      	movs	r1, #1
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f881 	bl	8005968 <RCCEx_PLLSAI1_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800586a:	7cfb      	ldrb	r3, [r7, #19]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d028      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005880:	4b30      	ldr	r3, [pc, #192]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	492d      	ldr	r1, [pc, #180]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589e:	d106      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a0:	4b28      	ldr	r3, [pc, #160]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4a27      	ldr	r2, [pc, #156]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058aa:	60d3      	str	r3, [r2, #12]
 80058ac:	e011      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058b6:	d10c      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	2101      	movs	r1, #1
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f852 	bl	8005968 <RCCEx_PLLSAI1_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80058ce:	7cfb      	ldrb	r3, [r7, #19]
 80058d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01c      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058de:	4b19      	ldr	r3, [pc, #100]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ec:	4915      	ldr	r1, [pc, #84]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058fc:	d10c      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3304      	adds	r3, #4
 8005902:	2102      	movs	r1, #2
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f82f 	bl	8005968 <RCCEx_PLLSAI1_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005914:	7cfb      	ldrb	r3, [r7, #19]
 8005916:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005932:	4904      	ldr	r1, [pc, #16]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800593a:	7cbb      	ldrb	r3, [r7, #18]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40021000 	.word	0x40021000

08005948 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a04      	ldr	r2, [pc, #16]	; (8005964 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005952:	f043 0304 	orr.w	r3, r3, #4
 8005956:	6013      	str	r3, [r2, #0]
}
 8005958:	bf00      	nop
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000

08005968 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005976:	4b74      	ldr	r3, [pc, #464]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d018      	beq.n	80059b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005982:	4b71      	ldr	r3, [pc, #452]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0203 	and.w	r2, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d10d      	bne.n	80059ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
       ||
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800599a:	4b6b      	ldr	r3, [pc, #428]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
       ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d047      	beq.n	8005a3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
 80059b2:	e044      	b.n	8005a3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d018      	beq.n	80059ee <RCCEx_PLLSAI1_Config+0x86>
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d825      	bhi.n	8005a0c <RCCEx_PLLSAI1_Config+0xa4>
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d002      	beq.n	80059ca <RCCEx_PLLSAI1_Config+0x62>
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d009      	beq.n	80059dc <RCCEx_PLLSAI1_Config+0x74>
 80059c8:	e020      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059ca:	4b5f      	ldr	r3, [pc, #380]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d11d      	bne.n	8005a12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059da:	e01a      	b.n	8005a12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059dc:	4b5a      	ldr	r3, [pc, #360]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d116      	bne.n	8005a16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ec:	e013      	b.n	8005a16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059ee:	4b56      	ldr	r3, [pc, #344]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10f      	bne.n	8005a1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059fa:	4b53      	ldr	r3, [pc, #332]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a0a:	e006      	b.n	8005a1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a10:	e004      	b.n	8005a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a12:	bf00      	nop
 8005a14:	e002      	b.n	8005a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a16:	bf00      	nop
 8005a18:	e000      	b.n	8005a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10d      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a22:	4b49      	ldr	r3, [pc, #292]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6819      	ldr	r1, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	430b      	orrs	r3, r1
 8005a38:	4943      	ldr	r1, [pc, #268]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d17c      	bne.n	8005b3e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a44:	4b40      	ldr	r3, [pc, #256]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a3f      	ldr	r2, [pc, #252]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a50:	f7fc fb1a 	bl	8002088 <HAL_GetTick>
 8005a54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a56:	e009      	b.n	8005a6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a58:	f7fc fb16 	bl	8002088 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d902      	bls.n	8005a6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	73fb      	strb	r3, [r7, #15]
        break;
 8005a6a:	e005      	b.n	8005a78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a6c:	4b36      	ldr	r3, [pc, #216]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ef      	bne.n	8005a58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d15f      	bne.n	8005b3e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d110      	bne.n	8005aa6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a84:	4b30      	ldr	r3, [pc, #192]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6892      	ldr	r2, [r2, #8]
 8005a94:	0211      	lsls	r1, r2, #8
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68d2      	ldr	r2, [r2, #12]
 8005a9a:	06d2      	lsls	r2, r2, #27
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	492a      	ldr	r1, [pc, #168]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	610b      	str	r3, [r1, #16]
 8005aa4:	e027      	b.n	8005af6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d112      	bne.n	8005ad2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aac:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ab4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6892      	ldr	r2, [r2, #8]
 8005abc:	0211      	lsls	r1, r2, #8
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6912      	ldr	r2, [r2, #16]
 8005ac2:	0852      	lsrs	r2, r2, #1
 8005ac4:	3a01      	subs	r2, #1
 8005ac6:	0552      	lsls	r2, r2, #21
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	491f      	ldr	r1, [pc, #124]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	610b      	str	r3, [r1, #16]
 8005ad0:	e011      	b.n	8005af6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ad2:	4b1d      	ldr	r3, [pc, #116]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ada:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6892      	ldr	r2, [r2, #8]
 8005ae2:	0211      	lsls	r1, r2, #8
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6952      	ldr	r2, [r2, #20]
 8005ae8:	0852      	lsrs	r2, r2, #1
 8005aea:	3a01      	subs	r2, #1
 8005aec:	0652      	lsls	r2, r2, #25
 8005aee:	430a      	orrs	r2, r1
 8005af0:	4915      	ldr	r1, [pc, #84]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a13      	ldr	r2, [pc, #76]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b02:	f7fc fac1 	bl	8002088 <HAL_GetTick>
 8005b06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b08:	e009      	b.n	8005b1e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b0a:	f7fc fabd 	bl	8002088 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d902      	bls.n	8005b1e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	73fb      	strb	r3, [r7, #15]
          break;
 8005b1c:	e005      	b.n	8005b2a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0ef      	beq.n	8005b0a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	4903      	ldr	r1, [pc, #12]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40021000 	.word	0x40021000

08005b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e049      	b.n	8005bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f841 	bl	8005bfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f000 fb42 	bl	8006214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d001      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e03b      	b.n	8005ca0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a19      	ldr	r2, [pc, #100]	; (8005cac <HAL_TIM_Base_Start_IT+0x9c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_TIM_Base_Start_IT+0x4e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c52:	d004      	beq.n	8005c5e <HAL_TIM_Base_Start_IT+0x4e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d115      	bne.n	8005c8a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b06      	cmp	r3, #6
 8005c6e:	d015      	beq.n	8005c9c <HAL_TIM_Base_Start_IT+0x8c>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c76:	d011      	beq.n	8005c9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c88:	e008      	b.n	8005c9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0201 	orr.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e000      	b.n	8005c9e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	00010007 	.word	0x00010007

08005cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e049      	b.n	8005d5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fb fea4 	bl	8001a2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f000 fa8c 	bl	8006214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d122      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d11b      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f06f 0202 	mvn.w	r2, #2
 8005d92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fa15 	bl	80061d8 <HAL_TIM_IC_CaptureCallback>
 8005dae:	e005      	b.n	8005dbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fa07 	bl	80061c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa18 	bl	80061ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d122      	bne.n	8005e16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d11b      	bne.n	8005e16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f06f 0204 	mvn.w	r2, #4
 8005de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f9eb 	bl	80061d8 <HAL_TIM_IC_CaptureCallback>
 8005e02:	e005      	b.n	8005e10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f9dd 	bl	80061c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f9ee 	bl	80061ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d122      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d11b      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0208 	mvn.w	r2, #8
 8005e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2204      	movs	r2, #4
 8005e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f9c1 	bl	80061d8 <HAL_TIM_IC_CaptureCallback>
 8005e56:	e005      	b.n	8005e64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f9b3 	bl	80061c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f9c4 	bl	80061ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d122      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d11b      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f06f 0210 	mvn.w	r2, #16
 8005e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2208      	movs	r2, #8
 8005e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f997 	bl	80061d8 <HAL_TIM_IC_CaptureCallback>
 8005eaa:	e005      	b.n	8005eb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f989 	bl	80061c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f99a 	bl	80061ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d10e      	bne.n	8005eea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0201 	mvn.w	r2, #1
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fb fc8b 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d10e      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	d107      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fd49 	bl	80069a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f24:	d10e      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f30:	2b80      	cmp	r3, #128	; 0x80
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fd3c 	bl	80069bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f948 	bl	8006200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0220 	mvn.w	r2, #32
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fcfc 	bl	8006994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e0fd      	b.n	80061ba <HAL_TIM_PWM_ConfigChannel+0x216>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b14      	cmp	r3, #20
 8005fca:	f200 80f0 	bhi.w	80061ae <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08006029 	.word	0x08006029
 8005fd8:	080061af 	.word	0x080061af
 8005fdc:	080061af 	.word	0x080061af
 8005fe0:	080061af 	.word	0x080061af
 8005fe4:	08006069 	.word	0x08006069
 8005fe8:	080061af 	.word	0x080061af
 8005fec:	080061af 	.word	0x080061af
 8005ff0:	080061af 	.word	0x080061af
 8005ff4:	080060ab 	.word	0x080060ab
 8005ff8:	080061af 	.word	0x080061af
 8005ffc:	080061af 	.word	0x080061af
 8006000:	080061af 	.word	0x080061af
 8006004:	080060eb 	.word	0x080060eb
 8006008:	080061af 	.word	0x080061af
 800600c:	080061af 	.word	0x080061af
 8006010:	080061af 	.word	0x080061af
 8006014:	0800612d 	.word	0x0800612d
 8006018:	080061af 	.word	0x080061af
 800601c:	080061af 	.word	0x080061af
 8006020:	080061af 	.word	0x080061af
 8006024:	0800616d 	.word	0x0800616d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f954 	bl	80062dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0208 	orr.w	r2, r2, #8
 8006042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0204 	bic.w	r2, r2, #4
 8006052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6999      	ldr	r1, [r3, #24]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	619a      	str	r2, [r3, #24]
      break;
 8006066:	e0a3      	b.n	80061b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	4618      	mov	r0, r3
 8006070:	f000 f9b0 	bl	80063d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6999      	ldr	r1, [r3, #24]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	021a      	lsls	r2, r3, #8
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	619a      	str	r2, [r3, #24]
      break;
 80060a8:	e082      	b.n	80061b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fa09 	bl	80064c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0208 	orr.w	r2, r2, #8
 80060c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0204 	bic.w	r2, r2, #4
 80060d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69d9      	ldr	r1, [r3, #28]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	61da      	str	r2, [r3, #28]
      break;
 80060e8:	e062      	b.n	80061b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fa61 	bl	80065b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69d9      	ldr	r1, [r3, #28]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	021a      	lsls	r2, r3, #8
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	61da      	str	r2, [r3, #28]
      break;
 800612a:	e041      	b.n	80061b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fa9e 	bl	8006674 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0208 	orr.w	r2, r2, #8
 8006146:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0204 	bic.w	r2, r2, #4
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800616a:	e021      	b.n	80061b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fad6 	bl	8006724 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	021a      	lsls	r2, r3, #8
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061ac:	e000      	b.n	80061b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80061ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop

080061c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a2a      	ldr	r2, [pc, #168]	; (80062d0 <TIM_Base_SetConfig+0xbc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_Base_SetConfig+0x20>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006232:	d108      	bne.n	8006246 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a21      	ldr	r2, [pc, #132]	; (80062d0 <TIM_Base_SetConfig+0xbc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00b      	beq.n	8006266 <TIM_Base_SetConfig+0x52>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006254:	d007      	beq.n	8006266 <TIM_Base_SetConfig+0x52>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a1e      	ldr	r2, [pc, #120]	; (80062d4 <TIM_Base_SetConfig+0xc0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d003      	beq.n	8006266 <TIM_Base_SetConfig+0x52>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a1d      	ldr	r2, [pc, #116]	; (80062d8 <TIM_Base_SetConfig+0xc4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d108      	bne.n	8006278 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <TIM_Base_SetConfig+0xbc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_Base_SetConfig+0xa0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a0b      	ldr	r2, [pc, #44]	; (80062d4 <TIM_Base_SetConfig+0xc0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_Base_SetConfig+0xa0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <TIM_Base_SetConfig+0xc4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d103      	bne.n	80062bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	615a      	str	r2, [r3, #20]
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40014400 	.word	0x40014400

080062dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f023 0302 	bic.w	r3, r3, #2
 8006328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a24      	ldr	r2, [pc, #144]	; (80063c8 <TIM_OC1_SetConfig+0xec>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d007      	beq.n	800634c <TIM_OC1_SetConfig+0x70>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a23      	ldr	r2, [pc, #140]	; (80063cc <TIM_OC1_SetConfig+0xf0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_OC1_SetConfig+0x70>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <TIM_OC1_SetConfig+0xf4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d10c      	bne.n	8006366 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0308 	bic.w	r3, r3, #8
 8006352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f023 0304 	bic.w	r3, r3, #4
 8006364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <TIM_OC1_SetConfig+0xec>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d007      	beq.n	800637e <TIM_OC1_SetConfig+0xa2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a16      	ldr	r2, [pc, #88]	; (80063cc <TIM_OC1_SetConfig+0xf0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_OC1_SetConfig+0xa2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a15      	ldr	r2, [pc, #84]	; (80063d0 <TIM_OC1_SetConfig+0xf4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d111      	bne.n	80063a2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	621a      	str	r2, [r3, #32]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40014000 	.word	0x40014000
 80063d0:	40014400 	.word	0x40014400

080063d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f023 0210 	bic.w	r2, r3, #16
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800640e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	021b      	lsls	r3, r3, #8
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 0320 	bic.w	r3, r3, #32
 8006422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a22      	ldr	r2, [pc, #136]	; (80064bc <TIM_OC2_SetConfig+0xe8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d10d      	bne.n	8006454 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800643e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a19      	ldr	r2, [pc, #100]	; (80064bc <TIM_OC2_SetConfig+0xe8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d007      	beq.n	800646c <TIM_OC2_SetConfig+0x98>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <TIM_OC2_SetConfig+0xec>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_OC2_SetConfig+0x98>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a17      	ldr	r2, [pc, #92]	; (80064c4 <TIM_OC2_SetConfig+0xf0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d113      	bne.n	8006494 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800647a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400

080064c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0303 	bic.w	r3, r3, #3
 8006502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a21      	ldr	r2, [pc, #132]	; (80065ac <TIM_OC3_SetConfig+0xe4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d10d      	bne.n	8006546 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a18      	ldr	r2, [pc, #96]	; (80065ac <TIM_OC3_SetConfig+0xe4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_OC3_SetConfig+0x96>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a17      	ldr	r2, [pc, #92]	; (80065b0 <TIM_OC3_SetConfig+0xe8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_OC3_SetConfig+0x96>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <TIM_OC3_SetConfig+0xec>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d113      	bne.n	8006586 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800656c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	621a      	str	r2, [r3, #32]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400

080065b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	031b      	lsls	r3, r3, #12
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a14      	ldr	r2, [pc, #80]	; (8006668 <TIM_OC4_SetConfig+0xb0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_OC4_SetConfig+0x74>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a13      	ldr	r2, [pc, #76]	; (800666c <TIM_OC4_SetConfig+0xb4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC4_SetConfig+0x74>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a12      	ldr	r2, [pc, #72]	; (8006670 <TIM_OC4_SetConfig+0xb8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d109      	bne.n	8006640 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	019b      	lsls	r3, r3, #6
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40014000 	.word	0x40014000
 8006670:	40014400 	.word	0x40014400

08006674 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a13      	ldr	r2, [pc, #76]	; (8006718 <TIM_OC5_SetConfig+0xa4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <TIM_OC5_SetConfig+0x6a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a12      	ldr	r2, [pc, #72]	; (800671c <TIM_OC5_SetConfig+0xa8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d003      	beq.n	80066de <TIM_OC5_SetConfig+0x6a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a11      	ldr	r2, [pc, #68]	; (8006720 <TIM_OC5_SetConfig+0xac>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d109      	bne.n	80066f2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	621a      	str	r2, [r3, #32]
}
 800670c:	bf00      	nop
 800670e:	371c      	adds	r7, #28
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400

08006724 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800676a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	051b      	lsls	r3, r3, #20
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a14      	ldr	r2, [pc, #80]	; (80067cc <TIM_OC6_SetConfig+0xa8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d007      	beq.n	8006790 <TIM_OC6_SetConfig+0x6c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a13      	ldr	r2, [pc, #76]	; (80067d0 <TIM_OC6_SetConfig+0xac>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_OC6_SetConfig+0x6c>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a12      	ldr	r2, [pc, #72]	; (80067d4 <TIM_OC6_SetConfig+0xb0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d109      	bne.n	80067a4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006796:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	621a      	str	r2, [r3, #32]
}
 80067be:	bf00      	nop
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40012c00 	.word	0x40012c00
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400

080067d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e04f      	b.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a21      	ldr	r2, [pc, #132]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d108      	bne.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006820:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a14      	ldr	r2, [pc, #80]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d009      	beq.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006858:	d004      	beq.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d10c      	bne.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800686a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	4313      	orrs	r3, r2
 8006874:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40014000 	.word	0x40014000

080068a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068bc:	2302      	movs	r3, #2
 80068be:	e060      	b.n	8006982 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	041b      	lsls	r3, r3, #16
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a14      	ldr	r2, [pc, #80]	; (8006990 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d115      	bne.n	8006970 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	051b      	lsls	r3, r3, #20
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40012c00 	.word	0x40012c00

08006994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e040      	b.n	8006a64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fb f8aa 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2224      	movs	r2, #36	; 0x24
 80069fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0201 	bic.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f8c0 	bl	8006b94 <UART_SetConfig>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e022      	b.n	8006a64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fac0 	bl	8006fac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0201 	orr.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fb47 	bl	80070f0 <UART_CheckIdleState>
 8006a62:	4603      	mov	r3, r0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08a      	sub	sp, #40	; 0x28
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	f040 8082 	bne.w	8006b8a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <HAL_UART_Transmit+0x26>
 8006a8c:	88fb      	ldrh	r3, [r7, #6]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e07a      	b.n	8006b8c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_UART_Transmit+0x38>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e073      	b.n	8006b8c <HAL_UART_Transmit+0x120>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2221      	movs	r2, #33	; 0x21
 8006ab8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aba:	f7fb fae5 	bl	8002088 <HAL_GetTick>
 8006abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad8:	d108      	bne.n	8006aec <HAL_UART_Transmit+0x80>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	e003      	b.n	8006af4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006afc:	e02d      	b.n	8006b5a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2200      	movs	r2, #0
 8006b06:	2180      	movs	r1, #128	; 0x80
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 fb3a 	bl	8007182 <UART_WaitOnFlagUntilTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e039      	b.n	8006b8c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10b      	bne.n	8006b36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	881a      	ldrh	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b2a:	b292      	uxth	r2, r2
 8006b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	3302      	adds	r3, #2
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	e008      	b.n	8006b48 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	781a      	ldrb	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	b292      	uxth	r2, r2
 8006b40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	3301      	adds	r3, #1
 8006b46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1cb      	bne.n	8006afe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2140      	movs	r1, #64	; 0x40
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fb06 	bl	8007182 <UART_WaitOnFlagUntilTimeout>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e005      	b.n	8006b8c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2220      	movs	r2, #32
 8006b84:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e000      	b.n	8006b8c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006b8a:	2302      	movs	r3, #2
  }
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3720      	adds	r7, #32
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b94:	b5b0      	push	{r4, r5, r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4baf      	ldr	r3, [pc, #700]	; (8006e7c <UART_SetConfig+0x2e8>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	69f9      	ldr	r1, [r7, #28]
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4aa4      	ldr	r2, [pc, #656]	; (8006e80 <UART_SetConfig+0x2ec>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a9b      	ldr	r2, [pc, #620]	; (8006e84 <UART_SetConfig+0x2f0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d121      	bne.n	8006c5e <UART_SetConfig+0xca>
 8006c1a:	4b9b      	ldr	r3, [pc, #620]	; (8006e88 <UART_SetConfig+0x2f4>)
 8006c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d817      	bhi.n	8006c58 <UART_SetConfig+0xc4>
 8006c28:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <UART_SetConfig+0x9c>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c4d 	.word	0x08006c4d
 8006c38:	08006c47 	.word	0x08006c47
 8006c3c:	08006c53 	.word	0x08006c53
 8006c40:	2301      	movs	r3, #1
 8006c42:	76fb      	strb	r3, [r7, #27]
 8006c44:	e070      	b.n	8006d28 <UART_SetConfig+0x194>
 8006c46:	2302      	movs	r3, #2
 8006c48:	76fb      	strb	r3, [r7, #27]
 8006c4a:	e06d      	b.n	8006d28 <UART_SetConfig+0x194>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	76fb      	strb	r3, [r7, #27]
 8006c50:	e06a      	b.n	8006d28 <UART_SetConfig+0x194>
 8006c52:	2308      	movs	r3, #8
 8006c54:	76fb      	strb	r3, [r7, #27]
 8006c56:	e067      	b.n	8006d28 <UART_SetConfig+0x194>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	76fb      	strb	r3, [r7, #27]
 8006c5c:	e064      	b.n	8006d28 <UART_SetConfig+0x194>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a8a      	ldr	r2, [pc, #552]	; (8006e8c <UART_SetConfig+0x2f8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d132      	bne.n	8006cce <UART_SetConfig+0x13a>
 8006c68:	4b87      	ldr	r3, [pc, #540]	; (8006e88 <UART_SetConfig+0x2f4>)
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6e:	f003 030c 	and.w	r3, r3, #12
 8006c72:	2b0c      	cmp	r3, #12
 8006c74:	d828      	bhi.n	8006cc8 <UART_SetConfig+0x134>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <UART_SetConfig+0xe8>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006cc9 	.word	0x08006cc9
 8006c84:	08006cc9 	.word	0x08006cc9
 8006c88:	08006cc9 	.word	0x08006cc9
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006cc9 	.word	0x08006cc9
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006cc9 	.word	0x08006cc9
 8006c9c:	08006cb7 	.word	0x08006cb7
 8006ca0:	08006cc9 	.word	0x08006cc9
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cc9 	.word	0x08006cc9
 8006cac:	08006cc3 	.word	0x08006cc3
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	76fb      	strb	r3, [r7, #27]
 8006cb4:	e038      	b.n	8006d28 <UART_SetConfig+0x194>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	76fb      	strb	r3, [r7, #27]
 8006cba:	e035      	b.n	8006d28 <UART_SetConfig+0x194>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	76fb      	strb	r3, [r7, #27]
 8006cc0:	e032      	b.n	8006d28 <UART_SetConfig+0x194>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	76fb      	strb	r3, [r7, #27]
 8006cc6:	e02f      	b.n	8006d28 <UART_SetConfig+0x194>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	76fb      	strb	r3, [r7, #27]
 8006ccc:	e02c      	b.n	8006d28 <UART_SetConfig+0x194>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a6b      	ldr	r2, [pc, #428]	; (8006e80 <UART_SetConfig+0x2ec>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d125      	bne.n	8006d24 <UART_SetConfig+0x190>
 8006cd8:	4b6b      	ldr	r3, [pc, #428]	; (8006e88 <UART_SetConfig+0x2f4>)
 8006cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ce6:	d017      	beq.n	8006d18 <UART_SetConfig+0x184>
 8006ce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cec:	d817      	bhi.n	8006d1e <UART_SetConfig+0x18a>
 8006cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf2:	d00b      	beq.n	8006d0c <UART_SetConfig+0x178>
 8006cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf8:	d811      	bhi.n	8006d1e <UART_SetConfig+0x18a>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <UART_SetConfig+0x172>
 8006cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d02:	d006      	beq.n	8006d12 <UART_SetConfig+0x17e>
 8006d04:	e00b      	b.n	8006d1e <UART_SetConfig+0x18a>
 8006d06:	2300      	movs	r3, #0
 8006d08:	76fb      	strb	r3, [r7, #27]
 8006d0a:	e00d      	b.n	8006d28 <UART_SetConfig+0x194>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	76fb      	strb	r3, [r7, #27]
 8006d10:	e00a      	b.n	8006d28 <UART_SetConfig+0x194>
 8006d12:	2304      	movs	r3, #4
 8006d14:	76fb      	strb	r3, [r7, #27]
 8006d16:	e007      	b.n	8006d28 <UART_SetConfig+0x194>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	76fb      	strb	r3, [r7, #27]
 8006d1c:	e004      	b.n	8006d28 <UART_SetConfig+0x194>
 8006d1e:	2310      	movs	r3, #16
 8006d20:	76fb      	strb	r3, [r7, #27]
 8006d22:	e001      	b.n	8006d28 <UART_SetConfig+0x194>
 8006d24:	2310      	movs	r3, #16
 8006d26:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a54      	ldr	r2, [pc, #336]	; (8006e80 <UART_SetConfig+0x2ec>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d173      	bne.n	8006e1a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d32:	7efb      	ldrb	r3, [r7, #27]
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d824      	bhi.n	8006d82 <UART_SetConfig+0x1ee>
 8006d38:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <UART_SetConfig+0x1ac>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006d65 	.word	0x08006d65
 8006d44:	08006d83 	.word	0x08006d83
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d83 	.word	0x08006d83
 8006d50:	08006d73 	.word	0x08006d73
 8006d54:	08006d83 	.word	0x08006d83
 8006d58:	08006d83 	.word	0x08006d83
 8006d5c:	08006d83 	.word	0x08006d83
 8006d60:	08006d7b 	.word	0x08006d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d64:	f7fe fb3e 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8006d68:	6178      	str	r0, [r7, #20]
        break;
 8006d6a:	e00f      	b.n	8006d8c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d6c:	4b48      	ldr	r3, [pc, #288]	; (8006e90 <UART_SetConfig+0x2fc>)
 8006d6e:	617b      	str	r3, [r7, #20]
        break;
 8006d70:	e00c      	b.n	8006d8c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d72:	f7fe faa1 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 8006d76:	6178      	str	r0, [r7, #20]
        break;
 8006d78:	e008      	b.n	8006d8c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d7e:	617b      	str	r3, [r7, #20]
        break;
 8006d80:	e004      	b.n	8006d8c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	76bb      	strb	r3, [r7, #26]
        break;
 8006d8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80fe 	beq.w	8006f90 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	4413      	add	r3, r2
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d305      	bcc.n	8006db0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d902      	bls.n	8006db6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	76bb      	strb	r3, [r7, #26]
 8006db4:	e0ec      	b.n	8006f90 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f04f 0100 	mov.w	r1, #0
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	020b      	lsls	r3, r1, #8
 8006dc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dcc:	0202      	lsls	r2, r0, #8
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	6849      	ldr	r1, [r1, #4]
 8006dd2:	0849      	lsrs	r1, r1, #1
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	f04f 0100 	mov.w	r1, #0
 8006dda:	1814      	adds	r4, r2, r0
 8006ddc:	eb43 0501 	adc.w	r5, r3, r1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	461a      	mov	r2, r3
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	4620      	mov	r0, r4
 8006dec:	4629      	mov	r1, r5
 8006dee:	f7f9 fedb 	bl	8000ba8 <__aeabi_uldivmod>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4613      	mov	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e00:	d308      	bcc.n	8006e14 <UART_SetConfig+0x280>
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e08:	d204      	bcs.n	8006e14 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	60da      	str	r2, [r3, #12]
 8006e12:	e0bd      	b.n	8006f90 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	76bb      	strb	r3, [r7, #26]
 8006e18:	e0ba      	b.n	8006f90 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e22:	d168      	bne.n	8006ef6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8006e24:	7efb      	ldrb	r3, [r7, #27]
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d834      	bhi.n	8006e94 <UART_SetConfig+0x300>
 8006e2a:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <UART_SetConfig+0x29c>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e5d 	.word	0x08006e5d
 8006e38:	08006e65 	.word	0x08006e65
 8006e3c:	08006e95 	.word	0x08006e95
 8006e40:	08006e6b 	.word	0x08006e6b
 8006e44:	08006e95 	.word	0x08006e95
 8006e48:	08006e95 	.word	0x08006e95
 8006e4c:	08006e95 	.word	0x08006e95
 8006e50:	08006e73 	.word	0x08006e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e54:	f7fe fac6 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8006e58:	6178      	str	r0, [r7, #20]
        break;
 8006e5a:	e020      	b.n	8006e9e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e5c:	f7fe fad8 	bl	8005410 <HAL_RCC_GetPCLK2Freq>
 8006e60:	6178      	str	r0, [r7, #20]
        break;
 8006e62:	e01c      	b.n	8006e9e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <UART_SetConfig+0x2fc>)
 8006e66:	617b      	str	r3, [r7, #20]
        break;
 8006e68:	e019      	b.n	8006e9e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6a:	f7fe fa25 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 8006e6e:	6178      	str	r0, [r7, #20]
        break;
 8006e70:	e015      	b.n	8006e9e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e76:	617b      	str	r3, [r7, #20]
        break;
 8006e78:	e011      	b.n	8006e9e <UART_SetConfig+0x30a>
 8006e7a:	bf00      	nop
 8006e7c:	efff69f3 	.word	0xefff69f3
 8006e80:	40008000 	.word	0x40008000
 8006e84:	40013800 	.word	0x40013800
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	40004400 	.word	0x40004400
 8006e90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	76bb      	strb	r3, [r7, #26]
        break;
 8006e9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d075      	beq.n	8006f90 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	005a      	lsls	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	441a      	add	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	2b0f      	cmp	r3, #15
 8006ec0:	d916      	bls.n	8006ef0 <UART_SetConfig+0x35c>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec8:	d212      	bcs.n	8006ef0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f023 030f 	bic.w	r3, r3, #15
 8006ed2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	085b      	lsrs	r3, r3, #1
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	89fb      	ldrh	r3, [r7, #14]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	89fa      	ldrh	r2, [r7, #14]
 8006eec:	60da      	str	r2, [r3, #12]
 8006eee:	e04f      	b.n	8006f90 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	76bb      	strb	r3, [r7, #26]
 8006ef4:	e04c      	b.n	8006f90 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ef6:	7efb      	ldrb	r3, [r7, #27]
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d828      	bhi.n	8006f4e <UART_SetConfig+0x3ba>
 8006efc:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <UART_SetConfig+0x370>)
 8006efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f02:	bf00      	nop
 8006f04:	08006f29 	.word	0x08006f29
 8006f08:	08006f31 	.word	0x08006f31
 8006f0c:	08006f39 	.word	0x08006f39
 8006f10:	08006f4f 	.word	0x08006f4f
 8006f14:	08006f3f 	.word	0x08006f3f
 8006f18:	08006f4f 	.word	0x08006f4f
 8006f1c:	08006f4f 	.word	0x08006f4f
 8006f20:	08006f4f 	.word	0x08006f4f
 8006f24:	08006f47 	.word	0x08006f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f28:	f7fe fa5c 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8006f2c:	6178      	str	r0, [r7, #20]
        break;
 8006f2e:	e013      	b.n	8006f58 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f30:	f7fe fa6e 	bl	8005410 <HAL_RCC_GetPCLK2Freq>
 8006f34:	6178      	str	r0, [r7, #20]
        break;
 8006f36:	e00f      	b.n	8006f58 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f38:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <UART_SetConfig+0x414>)
 8006f3a:	617b      	str	r3, [r7, #20]
        break;
 8006f3c:	e00c      	b.n	8006f58 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3e:	f7fe f9bb 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 8006f42:	6178      	str	r0, [r7, #20]
        break;
 8006f44:	e008      	b.n	8006f58 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f4a:	617b      	str	r3, [r7, #20]
        break;
 8006f4c:	e004      	b.n	8006f58 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	76bb      	strb	r3, [r7, #26]
        break;
 8006f56:	bf00      	nop
    }

    if (pclk != 0U)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d018      	beq.n	8006f90 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	085a      	lsrs	r2, r3, #1
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	441a      	add	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b0f      	cmp	r3, #15
 8006f78:	d908      	bls.n	8006f8c <UART_SetConfig+0x3f8>
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d204      	bcs.n	8006f8c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	60da      	str	r2, [r3, #12]
 8006f8a:	e001      	b.n	8006f90 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	00f42400 	.word	0x00f42400

08006fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01a      	beq.n	80070c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070aa:	d10a      	bne.n	80070c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007100:	f7fa ffc2 	bl	8002088 <HAL_GetTick>
 8007104:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0308 	and.w	r3, r3, #8
 8007110:	2b08      	cmp	r3, #8
 8007112:	d10e      	bne.n	8007132 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f82d 	bl	8007182 <UART_WaitOnFlagUntilTimeout>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e023      	b.n	800717a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b04      	cmp	r3, #4
 800713e:	d10e      	bne.n	800715e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f817 	bl	8007182 <UART_WaitOnFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e00d      	b.n	800717a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	603b      	str	r3, [r7, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007192:	e05e      	b.n	8007252 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d05a      	beq.n	8007252 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800719c:	f7fa ff74 	bl	8002088 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d302      	bcc.n	80071b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d11b      	bne.n	80071ea <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071c0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0201 	bic.w	r2, r2, #1
 80071d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e043      	b.n	8007272 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d02c      	beq.n	8007252 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007206:	d124      	bne.n	8007252 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007210:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007220:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0201 	bic.w	r2, r2, #1
 8007230:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2220      	movs	r2, #32
 8007236:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2220      	movs	r2, #32
 800723c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e00f      	b.n	8007272 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4013      	ands	r3, r2
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	429a      	cmp	r2, r3
 8007260:	bf0c      	ite	eq
 8007262:	2301      	moveq	r3, #1
 8007264:	2300      	movne	r3, #0
 8007266:	b2db      	uxtb	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	429a      	cmp	r2, r3
 800726e:	d091      	beq.n	8007194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <__NVIC_SetPriority>:
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728c:	2b00      	cmp	r3, #0
 800728e:	db0a      	blt.n	80072a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	490c      	ldr	r1, [pc, #48]	; (80072c8 <__NVIC_SetPriority+0x4c>)
 8007296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729a:	0112      	lsls	r2, r2, #4
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	440b      	add	r3, r1
 80072a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80072a4:	e00a      	b.n	80072bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	4908      	ldr	r1, [pc, #32]	; (80072cc <__NVIC_SetPriority+0x50>)
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	3b04      	subs	r3, #4
 80072b4:	0112      	lsls	r2, r2, #4
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	440b      	add	r3, r1
 80072ba:	761a      	strb	r2, [r3, #24]
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	e000e100 	.word	0xe000e100
 80072cc:	e000ed00 	.word	0xe000ed00

080072d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <SysTick_Handler+0x1c>)
 80072d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80072d8:	f001 fcfe 	bl	8008cd8 <xTaskGetSchedulerState>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d001      	beq.n	80072e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072e2:	f002 fae9 	bl	80098b8 <xPortSysTickHandler>
  }
}
 80072e6:	bf00      	nop
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	e000e010 	.word	0xe000e010

080072f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072f4:	2100      	movs	r1, #0
 80072f6:	f06f 0004 	mvn.w	r0, #4
 80072fa:	f7ff ffbf 	bl	800727c <__NVIC_SetPriority>
#endif
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800730a:	f3ef 8305 	mrs	r3, IPSR
 800730e:	603b      	str	r3, [r7, #0]
  return(result);
 8007310:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007316:	f06f 0305 	mvn.w	r3, #5
 800731a:	607b      	str	r3, [r7, #4]
 800731c:	e00c      	b.n	8007338 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800731e:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <osKernelInitialize+0x44>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d105      	bne.n	8007332 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <osKernelInitialize+0x44>)
 8007328:	2201      	movs	r2, #1
 800732a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800732c:	2300      	movs	r3, #0
 800732e:	607b      	str	r3, [r7, #4]
 8007330:	e002      	b.n	8007338 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007332:	f04f 33ff 	mov.w	r3, #4294967295
 8007336:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007338:	687b      	ldr	r3, [r7, #4]
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20000204 	.word	0x20000204

0800734c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007352:	f3ef 8305 	mrs	r3, IPSR
 8007356:	603b      	str	r3, [r7, #0]
  return(result);
 8007358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <osKernelStart+0x1a>
    stat = osErrorISR;
 800735e:	f06f 0305 	mvn.w	r3, #5
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	e010      	b.n	8007388 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <osKernelStart+0x48>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d109      	bne.n	8007382 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800736e:	f7ff ffbf 	bl	80072f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007372:	4b08      	ldr	r3, [pc, #32]	; (8007394 <osKernelStart+0x48>)
 8007374:	2202      	movs	r2, #2
 8007376:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007378:	f001 f866 	bl	8008448 <vTaskStartScheduler>
      stat = osOK;
 800737c:	2300      	movs	r3, #0
 800737e:	607b      	str	r3, [r7, #4]
 8007380:	e002      	b.n	8007388 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007382:	f04f 33ff 	mov.w	r3, #4294967295
 8007386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007388:	687b      	ldr	r3, [r7, #4]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20000204 	.word	0x20000204

08007398 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b08e      	sub	sp, #56	; 0x38
 800739c:	af04      	add	r7, sp, #16
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073a8:	f3ef 8305 	mrs	r3, IPSR
 80073ac:	617b      	str	r3, [r7, #20]
  return(result);
 80073ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d17e      	bne.n	80074b2 <osThreadNew+0x11a>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d07b      	beq.n	80074b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073ba:	2380      	movs	r3, #128	; 0x80
 80073bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073be:	2318      	movs	r3, #24
 80073c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d045      	beq.n	800745e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <osThreadNew+0x48>
        name = attr->name;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <osThreadNew+0x6e>
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	2b38      	cmp	r3, #56	; 0x38
 80073f8:	d805      	bhi.n	8007406 <osThreadNew+0x6e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <osThreadNew+0x72>
        return (NULL);
 8007406:	2300      	movs	r3, #0
 8007408:	e054      	b.n	80074b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	089b      	lsrs	r3, r3, #2
 8007418:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00e      	beq.n	8007440 <osThreadNew+0xa8>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	2b5b      	cmp	r3, #91	; 0x5b
 8007428:	d90a      	bls.n	8007440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <osThreadNew+0xa8>
        mem = 1;
 800743a:	2301      	movs	r3, #1
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e010      	b.n	8007462 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10c      	bne.n	8007462 <osThreadNew+0xca>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d108      	bne.n	8007462 <osThreadNew+0xca>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d104      	bne.n	8007462 <osThreadNew+0xca>
          mem = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	61bb      	str	r3, [r7, #24]
 800745c:	e001      	b.n	8007462 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d110      	bne.n	800748a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007470:	9202      	str	r2, [sp, #8]
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6a3a      	ldr	r2, [r7, #32]
 800747c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fe0c 	bl	800809c <xTaskCreateStatic>
 8007484:	4603      	mov	r3, r0
 8007486:	613b      	str	r3, [r7, #16]
 8007488:	e013      	b.n	80074b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d110      	bne.n	80074b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	b29a      	uxth	r2, r3
 8007494:	f107 0310 	add.w	r3, r7, #16
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fe57 	bl	8008156 <xTaskCreate>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d001      	beq.n	80074b2 <osThreadNew+0x11a>
            hTask = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074b2:	693b      	ldr	r3, [r7, #16]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3728      	adds	r7, #40	; 0x28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c4:	f3ef 8305 	mrs	r3, IPSR
 80074c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <osDelay+0x1c>
    stat = osErrorISR;
 80074d0:	f06f 0305 	mvn.w	r3, #5
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e007      	b.n	80074e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 ff7c 	bl	80083e0 <vTaskDelay>
    }
  }

  return (stat);
 80074e8:	68fb      	ldr	r3, [r7, #12]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4a07      	ldr	r2, [pc, #28]	; (8007520 <vApplicationGetIdleTaskMemory+0x2c>)
 8007504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4a06      	ldr	r2, [pc, #24]	; (8007524 <vApplicationGetIdleTaskMemory+0x30>)
 800750a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2280      	movs	r2, #128	; 0x80
 8007510:	601a      	str	r2, [r3, #0]
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20000208 	.word	0x20000208
 8007524:	20000264 	.word	0x20000264

08007528 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4a07      	ldr	r2, [pc, #28]	; (8007554 <vApplicationGetTimerTaskMemory+0x2c>)
 8007538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4a06      	ldr	r2, [pc, #24]	; (8007558 <vApplicationGetTimerTaskMemory+0x30>)
 800753e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007546:	601a      	str	r2, [r3, #0]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	20000464 	.word	0x20000464
 8007558:	200004c0 	.word	0x200004c0

0800755c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f103 0208 	add.w	r2, r3, #8
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f04f 32ff 	mov.w	r2, #4294967295
 8007574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f103 0208 	add.w	r2, r3, #8
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f103 0208 	add.w	r2, r3, #8
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	601a      	str	r2, [r3, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d103      	bne.n	800761e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e00c      	b.n	8007638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3308      	adds	r3, #8
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	e002      	b.n	800762c <vListInsert+0x2e>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	429a      	cmp	r2, r3
 8007636:	d2f6      	bcs.n	8007626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	601a      	str	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6892      	ldr	r2, [r2, #8]
 8007686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6852      	ldr	r2, [r2, #4]
 8007690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d103      	bne.n	80076a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	1e5a      	subs	r2, r3, #1
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80076ee:	f002 f851 	bl	8009794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076fe:	fb01 f303 	mul.w	r3, r1, r3
 8007702:	441a      	add	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	3b01      	subs	r3, #1
 8007720:	68f9      	ldr	r1, [r7, #12]
 8007722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	441a      	add	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	22ff      	movs	r2, #255	; 0xff
 8007732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	22ff      	movs	r2, #255	; 0xff
 800773a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d114      	bne.n	800776e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01a      	beq.n	8007782 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3310      	adds	r3, #16
 8007750:	4618      	mov	r0, r3
 8007752:	f001 f903 	bl	800895c <xTaskRemoveFromEventList>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d012      	beq.n	8007782 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800775c:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <xQueueGenericReset+0xcc>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	e009      	b.n	8007782 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3310      	adds	r3, #16
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff fef2 	bl	800755c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3324      	adds	r3, #36	; 0x24
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff feed 	bl	800755c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007782:	f002 f837 	bl	80097f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007786:	2301      	movs	r3, #1
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	e000ed04 	.word	0xe000ed04

08007794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08e      	sub	sp, #56	; 0x38
 8007798:	af02      	add	r7, sp, #8
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <xQueueGenericCreateStatic+0x52>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <xQueueGenericCreateStatic+0x56>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <xQueueGenericCreateStatic+0x58>
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	623b      	str	r3, [r7, #32]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <xQueueGenericCreateStatic+0x7e>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <xQueueGenericCreateStatic+0x82>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <xQueueGenericCreateStatic+0x84>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	61fb      	str	r3, [r7, #28]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007832:	2350      	movs	r3, #80	; 0x50
 8007834:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b50      	cmp	r3, #80	; 0x50
 800783a:	d00a      	beq.n	8007852 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	61bb      	str	r3, [r7, #24]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007852:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00d      	beq.n	800787a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007866:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	4613      	mov	r3, r2
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 f805 	bl	8007884 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800787c:	4618      	mov	r0, r3
 800787e:	3730      	adds	r7, #48	; 0x30
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d103      	bne.n	80078a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e002      	b.n	80078a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078b2:	2101      	movs	r1, #1
 80078b4:	69b8      	ldr	r0, [r7, #24]
 80078b6:	f7ff ff05 	bl	80076c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08e      	sub	sp, #56	; 0x38
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078da:	2300      	movs	r3, #0
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10a      	bne.n	80078fe <xQueueGenericSend+0x32>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d103      	bne.n	800790c <xQueueGenericSend+0x40>
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <xQueueGenericSend+0x44>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <xQueueGenericSend+0x46>
 8007910:	2300      	movs	r3, #0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10a      	bne.n	800792c <xQueueGenericSend+0x60>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007928:	bf00      	nop
 800792a:	e7fe      	b.n	800792a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d103      	bne.n	800793a <xQueueGenericSend+0x6e>
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <xQueueGenericSend+0x72>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <xQueueGenericSend+0x74>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xQueueGenericSend+0x8e>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	623b      	str	r3, [r7, #32]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800795a:	f001 f9bd 	bl	8008cd8 <xTaskGetSchedulerState>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d102      	bne.n	800796a <xQueueGenericSend+0x9e>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <xQueueGenericSend+0xa2>
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <xQueueGenericSend+0xa4>
 800796e:	2300      	movs	r3, #0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xQueueGenericSend+0xbe>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	61fb      	str	r3, [r7, #28]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800798a:	f001 ff03 	bl	8009794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007996:	429a      	cmp	r2, r3
 8007998:	d302      	bcc.n	80079a0 <xQueueGenericSend+0xd4>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b02      	cmp	r3, #2
 800799e:	d129      	bne.n	80079f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	68b9      	ldr	r1, [r7, #8]
 80079a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079a6:	f000 fa0b 	bl	8007dc0 <prvCopyDataToQueue>
 80079aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d010      	beq.n	80079d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	3324      	adds	r3, #36	; 0x24
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 ffcf 	bl	800895c <xTaskRemoveFromEventList>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d013      	beq.n	80079ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079c4:	4b3f      	ldr	r3, [pc, #252]	; (8007ac4 <xQueueGenericSend+0x1f8>)
 80079c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	e00a      	b.n	80079ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079dc:	4b39      	ldr	r3, [pc, #228]	; (8007ac4 <xQueueGenericSend+0x1f8>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80079ec:	f001 ff02 	bl	80097f4 <vPortExitCritical>
				return pdPASS;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e063      	b.n	8007abc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d103      	bne.n	8007a02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079fa:	f001 fefb 	bl	80097f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e05c      	b.n	8007abc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d106      	bne.n	8007a16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a08:	f107 0314 	add.w	r3, r7, #20
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 f809 	bl	8008a24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a12:	2301      	movs	r3, #1
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a16:	f001 feed 	bl	80097f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a1a:	f000 fd7b 	bl	8008514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a1e:	f001 feb9 	bl	8009794 <vPortEnterCritical>
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a28:	b25b      	sxtb	r3, r3
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d103      	bne.n	8007a38 <xQueueGenericSend+0x16c>
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a3e:	b25b      	sxtb	r3, r3
 8007a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a44:	d103      	bne.n	8007a4e <xQueueGenericSend+0x182>
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a4e:	f001 fed1 	bl	80097f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a52:	1d3a      	adds	r2, r7, #4
 8007a54:	f107 0314 	add.w	r3, r7, #20
 8007a58:	4611      	mov	r1, r2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fff8 	bl	8008a50 <xTaskCheckForTimeOut>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d124      	bne.n	8007ab0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a68:	f000 faa2 	bl	8007fb0 <prvIsQueueFull>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d018      	beq.n	8007aa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	3310      	adds	r3, #16
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 ff1e 	bl	80088bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a82:	f000 fa2d 	bl	8007ee0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a86:	f000 fd53 	bl	8008530 <xTaskResumeAll>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f47f af7c 	bne.w	800798a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007a92:	4b0c      	ldr	r3, [pc, #48]	; (8007ac4 <xQueueGenericSend+0x1f8>)
 8007a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	e772      	b.n	800798a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aa6:	f000 fa1b 	bl	8007ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aaa:	f000 fd41 	bl	8008530 <xTaskResumeAll>
 8007aae:	e76c      	b.n	800798a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ab2:	f000 fa15 	bl	8007ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ab6:	f000 fd3b 	bl	8008530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007aba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3738      	adds	r7, #56	; 0x38
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	e000ed04 	.word	0xe000ed04

08007ac8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b090      	sub	sp, #64	; 0x40
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10a      	bne.n	8007af6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d103      	bne.n	8007b04 <xQueueGenericSendFromISR+0x3c>
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <xQueueGenericSendFromISR+0x40>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <xQueueGenericSendFromISR+0x42>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d103      	bne.n	8007b32 <xQueueGenericSendFromISR+0x6a>
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <xQueueGenericSendFromISR+0x6e>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e000      	b.n	8007b38 <xQueueGenericSendFromISR+0x70>
 8007b36:	2300      	movs	r3, #0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	623b      	str	r3, [r7, #32]
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b52:	f001 ff01 	bl	8009958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b56:	f3ef 8211 	mrs	r2, BASEPRI
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	61fa      	str	r2, [r7, #28]
 8007b6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d302      	bcc.n	8007b84 <xQueueGenericSendFromISR+0xbc>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d12f      	bne.n	8007be4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	68b9      	ldr	r1, [r7, #8]
 8007b98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b9a:	f000 f911 	bl	8007dc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba6:	d112      	bne.n	8007bce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d016      	beq.n	8007bde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	3324      	adds	r3, #36	; 0x24
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fed1 	bl	800895c <xTaskRemoveFromEventList>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00e      	beq.n	8007bde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	e007      	b.n	8007bde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	b25a      	sxtb	r2, r3
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bde:	2301      	movs	r3, #1
 8007be0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007be2:	e001      	b.n	8007be8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007bf2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3740      	adds	r7, #64	; 0x40
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08c      	sub	sp, #48	; 0x30
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <xQueueReceive+0x30>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	623b      	str	r3, [r7, #32]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d103      	bne.n	8007c3e <xQueueReceive+0x3e>
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <xQueueReceive+0x42>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <xQueueReceive+0x44>
 8007c42:	2300      	movs	r3, #0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <xQueueReceive+0x5e>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	61fb      	str	r3, [r7, #28]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c5e:	f001 f83b 	bl	8008cd8 <xTaskGetSchedulerState>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d102      	bne.n	8007c6e <xQueueReceive+0x6e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <xQueueReceive+0x72>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <xQueueReceive+0x74>
 8007c72:	2300      	movs	r3, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <xQueueReceive+0x8e>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	61bb      	str	r3, [r7, #24]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c8e:	f001 fd81 	bl	8009794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d01f      	beq.n	8007cde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca2:	f000 f8f7 	bl	8007e94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	1e5a      	subs	r2, r3, #1
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00f      	beq.n	8007cd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	3310      	adds	r3, #16
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fe4e 	bl	800895c <xTaskRemoveFromEventList>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cc6:	4b3d      	ldr	r3, [pc, #244]	; (8007dbc <xQueueReceive+0x1bc>)
 8007cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cd6:	f001 fd8d 	bl	80097f4 <vPortExitCritical>
				return pdPASS;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e069      	b.n	8007db2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d103      	bne.n	8007cec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ce4:	f001 fd86 	bl	80097f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	e062      	b.n	8007db2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d106      	bne.n	8007d00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cf2:	f107 0310 	add.w	r3, r7, #16
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fe94 	bl	8008a24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d00:	f001 fd78 	bl	80097f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d04:	f000 fc06 	bl	8008514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d08:	f001 fd44 	bl	8009794 <vPortEnterCritical>
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d12:	b25b      	sxtb	r3, r3
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d103      	bne.n	8007d22 <xQueueReceive+0x122>
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d28:	b25b      	sxtb	r3, r3
 8007d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2e:	d103      	bne.n	8007d38 <xQueueReceive+0x138>
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d38:	f001 fd5c 	bl	80097f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d3c:	1d3a      	adds	r2, r7, #4
 8007d3e:	f107 0310 	add.w	r3, r7, #16
 8007d42:	4611      	mov	r1, r2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 fe83 	bl	8008a50 <xTaskCheckForTimeOut>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d123      	bne.n	8007d98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d52:	f000 f917 	bl	8007f84 <prvIsQueueEmpty>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d017      	beq.n	8007d8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	3324      	adds	r3, #36	; 0x24
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fda9 	bl	80088bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d6c:	f000 f8b8 	bl	8007ee0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d70:	f000 fbde 	bl	8008530 <xTaskResumeAll>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d189      	bne.n	8007c8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d7a:	4b10      	ldr	r3, [pc, #64]	; (8007dbc <xQueueReceive+0x1bc>)
 8007d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	e780      	b.n	8007c8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d8e:	f000 f8a7 	bl	8007ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d92:	f000 fbcd 	bl	8008530 <xTaskResumeAll>
 8007d96:	e77a      	b.n	8007c8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d9a:	f000 f8a1 	bl	8007ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d9e:	f000 fbc7 	bl	8008530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da4:	f000 f8ee 	bl	8007f84 <prvIsQueueEmpty>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f43f af6f 	beq.w	8007c8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007db0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3730      	adds	r7, #48	; 0x30
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	e000ed04 	.word	0xe000ed04

08007dc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10d      	bne.n	8007dfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d14d      	bne.n	8007e82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 ff92 	bl	8008d14 <xTaskPriorityDisinherit>
 8007df0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	609a      	str	r2, [r3, #8]
 8007df8:	e043      	b.n	8007e82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d119      	bne.n	8007e34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6858      	ldr	r0, [r3, #4]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	461a      	mov	r2, r3
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	f001 ff00 	bl	8009c10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	441a      	add	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d32b      	bcc.n	8007e82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	605a      	str	r2, [r3, #4]
 8007e32:	e026      	b.n	8007e82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	68d8      	ldr	r0, [r3, #12]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	f001 fee6 	bl	8009c10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	425b      	negs	r3, r3
 8007e4e:	441a      	add	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d207      	bcs.n	8007e70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	425b      	negs	r3, r3
 8007e6a:	441a      	add	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d105      	bne.n	8007e82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e8a:	697b      	ldr	r3, [r7, #20]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d018      	beq.n	8007ed8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	441a      	add	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d303      	bcc.n	8007ec8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68d9      	ldr	r1, [r3, #12]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6838      	ldr	r0, [r7, #0]
 8007ed4:	f001 fe9c 	bl	8009c10 <memcpy>
	}
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ee8:	f001 fc54 	bl	8009794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ef2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ef4:	e011      	b.n	8007f1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d012      	beq.n	8007f24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3324      	adds	r3, #36	; 0x24
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fd2a 	bl	800895c <xTaskRemoveFromEventList>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f0e:	f000 fe01 	bl	8008b14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dce9      	bgt.n	8007ef6 <prvUnlockQueue+0x16>
 8007f22:	e000      	b.n	8007f26 <prvUnlockQueue+0x46>
					break;
 8007f24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	22ff      	movs	r2, #255	; 0xff
 8007f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f2e:	f001 fc61 	bl	80097f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f32:	f001 fc2f 	bl	8009794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f3e:	e011      	b.n	8007f64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d012      	beq.n	8007f6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3310      	adds	r3, #16
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 fd05 	bl	800895c <xTaskRemoveFromEventList>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f58:	f000 fddc 	bl	8008b14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	dce9      	bgt.n	8007f40 <prvUnlockQueue+0x60>
 8007f6c:	e000      	b.n	8007f70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	22ff      	movs	r2, #255	; 0xff
 8007f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f78:	f001 fc3c 	bl	80097f4 <vPortExitCritical>
}
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f8c:	f001 fc02 	bl	8009794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d102      	bne.n	8007f9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e001      	b.n	8007fa2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fa2:	f001 fc27 	bl	80097f4 <vPortExitCritical>

	return xReturn;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fb8:	f001 fbec 	bl	8009794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d102      	bne.n	8007fce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	e001      	b.n	8007fd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fd2:	f001 fc0f 	bl	80097f4 <vPortExitCritical>

	return xReturn;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e014      	b.n	800801a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ff0:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <vQueueAddToRegistry+0x50>)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ffc:	490c      	ldr	r1, [pc, #48]	; (8008030 <vQueueAddToRegistry+0x50>)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008006:	4a0a      	ldr	r2, [pc, #40]	; (8008030 <vQueueAddToRegistry+0x50>)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	4413      	add	r3, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008012:	e006      	b.n	8008022 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	3301      	adds	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b07      	cmp	r3, #7
 800801e:	d9e7      	bls.n	8007ff0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20008720 	.word	0x20008720

08008034 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008044:	f001 fba6 	bl	8009794 <vPortEnterCritical>
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800804e:	b25b      	sxtb	r3, r3
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d103      	bne.n	800805e <vQueueWaitForMessageRestricted+0x2a>
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008064:	b25b      	sxtb	r3, r3
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806a:	d103      	bne.n	8008074 <vQueueWaitForMessageRestricted+0x40>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008074:	f001 fbbe 	bl	80097f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	2b00      	cmp	r3, #0
 800807e:	d106      	bne.n	800808e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	3324      	adds	r3, #36	; 0x24
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fc3b 	bl	8008904 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800808e:	6978      	ldr	r0, [r7, #20]
 8008090:	f7ff ff26 	bl	8007ee0 <prvUnlockQueue>
	}
 8008094:	bf00      	nop
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08e      	sub	sp, #56	; 0x38
 80080a0:	af04      	add	r7, sp, #16
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	623b      	str	r3, [r7, #32]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	61fb      	str	r3, [r7, #28]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080e2:	235c      	movs	r3, #92	; 0x5c
 80080e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b5c      	cmp	r3, #92	; 0x5c
 80080ea:	d00a      	beq.n	8008102 <xTaskCreateStatic+0x66>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	61bb      	str	r3, [r7, #24]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008102:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	2b00      	cmp	r3, #0
 8008108:	d01e      	beq.n	8008148 <xTaskCreateStatic+0xac>
 800810a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01b      	beq.n	8008148 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008118:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	2202      	movs	r2, #2
 800811e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008122:	2300      	movs	r3, #0
 8008124:	9303      	str	r3, [sp, #12]
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	9302      	str	r3, [sp, #8]
 800812a:	f107 0314 	add.w	r3, r7, #20
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f850 	bl	80081e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008142:	f000 f8dd 	bl	8008300 <prvAddNewTaskToReadyList>
 8008146:	e001      	b.n	800814c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800814c:	697b      	ldr	r3, [r7, #20]
	}
 800814e:	4618      	mov	r0, r3
 8008150:	3728      	adds	r7, #40	; 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008156:	b580      	push	{r7, lr}
 8008158:	b08c      	sub	sp, #48	; 0x30
 800815a:	af04      	add	r7, sp, #16
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	603b      	str	r3, [r7, #0]
 8008162:	4613      	mov	r3, r2
 8008164:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4618      	mov	r0, r3
 800816c:	f001 fc34 	bl	80099d8 <pvPortMalloc>
 8008170:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00e      	beq.n	8008196 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008178:	205c      	movs	r0, #92	; 0x5c
 800817a:	f001 fc2d 	bl	80099d8 <pvPortMalloc>
 800817e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
 800818c:	e005      	b.n	800819a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800818e:	6978      	ldr	r0, [r7, #20]
 8008190:	f001 fcb0 	bl	8009af4 <vPortFree>
 8008194:	e001      	b.n	800819a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d017      	beq.n	80081d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081a8:	88fa      	ldrh	r2, [r7, #6]
 80081aa:	2300      	movs	r3, #0
 80081ac:	9303      	str	r3, [sp, #12]
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	9302      	str	r3, [sp, #8]
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f80e 	bl	80081e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081c4:	69f8      	ldr	r0, [r7, #28]
 80081c6:	f000 f89b 	bl	8008300 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081ca:	2301      	movs	r3, #1
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	e002      	b.n	80081d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081d0:	f04f 33ff 	mov.w	r3, #4294967295
 80081d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081d6:	69bb      	ldr	r3, [r7, #24]
	}
 80081d8:	4618      	mov	r0, r3
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	461a      	mov	r2, r3
 80081f8:	21a5      	movs	r1, #165	; 0xa5
 80081fa:	f001 fd17 	bl	8009c2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008208:	3b01      	subs	r3, #1
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	f023 0307 	bic.w	r3, r3, #7
 8008216:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	f003 0307 	and.w	r3, r3, #7
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	617b      	str	r3, [r7, #20]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01f      	beq.n	800827e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800823e:	2300      	movs	r3, #0
 8008240:	61fb      	str	r3, [r7, #28]
 8008242:	e012      	b.n	800826a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	4413      	add	r3, r2
 800824a:	7819      	ldrb	r1, [r3, #0]
 800824c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	4413      	add	r3, r2
 8008252:	3334      	adds	r3, #52	; 0x34
 8008254:	460a      	mov	r2, r1
 8008256:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d006      	beq.n	8008272 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	3301      	adds	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	2b0f      	cmp	r3, #15
 800826e:	d9e9      	bls.n	8008244 <prvInitialiseNewTask+0x64>
 8008270:	e000      	b.n	8008274 <prvInitialiseNewTask+0x94>
			{
				break;
 8008272:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800827c:	e003      	b.n	8008286 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	2b37      	cmp	r3, #55	; 0x37
 800828a:	d901      	bls.n	8008290 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800828c:	2337      	movs	r3, #55	; 0x37
 800828e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008294:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800829a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	2200      	movs	r2, #0
 80082a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	3304      	adds	r3, #4
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff f978 	bl	800759c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	3318      	adds	r3, #24
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff f973 	bl	800759c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	2200      	movs	r2, #0
 80082d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	68f9      	ldr	r1, [r7, #12]
 80082de:	69b8      	ldr	r0, [r7, #24]
 80082e0:	f001 f928 	bl	8009534 <pxPortInitialiseStack>
 80082e4:	4602      	mov	r2, r0
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082f6:	bf00      	nop
 80082f8:	3720      	adds	r7, #32
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008308:	f001 fa44 	bl	8009794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800830c:	4b2d      	ldr	r3, [pc, #180]	; (80083c4 <prvAddNewTaskToReadyList+0xc4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	4a2c      	ldr	r2, [pc, #176]	; (80083c4 <prvAddNewTaskToReadyList+0xc4>)
 8008314:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008316:	4b2c      	ldr	r3, [pc, #176]	; (80083c8 <prvAddNewTaskToReadyList+0xc8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800831e:	4a2a      	ldr	r2, [pc, #168]	; (80083c8 <prvAddNewTaskToReadyList+0xc8>)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008324:	4b27      	ldr	r3, [pc, #156]	; (80083c4 <prvAddNewTaskToReadyList+0xc4>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d110      	bne.n	800834e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800832c:	f000 fc16 	bl	8008b5c <prvInitialiseTaskLists>
 8008330:	e00d      	b.n	800834e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008332:	4b26      	ldr	r3, [pc, #152]	; (80083cc <prvAddNewTaskToReadyList+0xcc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800833a:	4b23      	ldr	r3, [pc, #140]	; (80083c8 <prvAddNewTaskToReadyList+0xc8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	429a      	cmp	r2, r3
 8008346:	d802      	bhi.n	800834e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008348:	4a1f      	ldr	r2, [pc, #124]	; (80083c8 <prvAddNewTaskToReadyList+0xc8>)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800834e:	4b20      	ldr	r3, [pc, #128]	; (80083d0 <prvAddNewTaskToReadyList+0xd0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3301      	adds	r3, #1
 8008354:	4a1e      	ldr	r2, [pc, #120]	; (80083d0 <prvAddNewTaskToReadyList+0xd0>)
 8008356:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008358:	4b1d      	ldr	r3, [pc, #116]	; (80083d0 <prvAddNewTaskToReadyList+0xd0>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008364:	4b1b      	ldr	r3, [pc, #108]	; (80083d4 <prvAddNewTaskToReadyList+0xd4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	d903      	bls.n	8008374 <prvAddNewTaskToReadyList+0x74>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	4a18      	ldr	r2, [pc, #96]	; (80083d4 <prvAddNewTaskToReadyList+0xd4>)
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4a15      	ldr	r2, [pc, #84]	; (80083d8 <prvAddNewTaskToReadyList+0xd8>)
 8008382:	441a      	add	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3304      	adds	r3, #4
 8008388:	4619      	mov	r1, r3
 800838a:	4610      	mov	r0, r2
 800838c:	f7ff f913 	bl	80075b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008390:	f001 fa30 	bl	80097f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008394:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <prvAddNewTaskToReadyList+0xcc>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00e      	beq.n	80083ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800839c:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <prvAddNewTaskToReadyList+0xc8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d207      	bcs.n	80083ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083aa:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <prvAddNewTaskToReadyList+0xdc>)
 80083ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000d94 	.word	0x20000d94
 80083c8:	200008c0 	.word	0x200008c0
 80083cc:	20000da0 	.word	0x20000da0
 80083d0:	20000db0 	.word	0x20000db0
 80083d4:	20000d9c 	.word	0x20000d9c
 80083d8:	200008c4 	.word	0x200008c4
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d017      	beq.n	8008422 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083f2:	4b13      	ldr	r3, [pc, #76]	; (8008440 <vTaskDelay+0x60>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <vTaskDelay+0x30>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	60bb      	str	r3, [r7, #8]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008410:	f000 f880 	bl	8008514 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008414:	2100      	movs	r1, #0
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fcea 	bl	8008df0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800841c:	f000 f888 	bl	8008530 <xTaskResumeAll>
 8008420:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d107      	bne.n	8008438 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008428:	4b06      	ldr	r3, [pc, #24]	; (8008444 <vTaskDelay+0x64>)
 800842a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20000dbc 	.word	0x20000dbc
 8008444:	e000ed04 	.word	0xe000ed04

08008448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	; 0x28
 800844c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008456:	463a      	mov	r2, r7
 8008458:	1d39      	adds	r1, r7, #4
 800845a:	f107 0308 	add.w	r3, r7, #8
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff f848 	bl	80074f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	9202      	str	r2, [sp, #8]
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	2300      	movs	r3, #0
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	460a      	mov	r2, r1
 8008476:	4921      	ldr	r1, [pc, #132]	; (80084fc <vTaskStartScheduler+0xb4>)
 8008478:	4821      	ldr	r0, [pc, #132]	; (8008500 <vTaskStartScheduler+0xb8>)
 800847a:	f7ff fe0f 	bl	800809c <xTaskCreateStatic>
 800847e:	4603      	mov	r3, r0
 8008480:	4a20      	ldr	r2, [pc, #128]	; (8008504 <vTaskStartScheduler+0xbc>)
 8008482:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008484:	4b1f      	ldr	r3, [pc, #124]	; (8008504 <vTaskStartScheduler+0xbc>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800848c:	2301      	movs	r3, #1
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	e001      	b.n	8008496 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d102      	bne.n	80084a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800849c:	f000 fcfc 	bl	8008e98 <xTimerCreateTimerTask>
 80084a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d116      	bne.n	80084d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	613b      	str	r3, [r7, #16]
}
 80084ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084bc:	4b12      	ldr	r3, [pc, #72]	; (8008508 <vTaskStartScheduler+0xc0>)
 80084be:	f04f 32ff 	mov.w	r2, #4294967295
 80084c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084c4:	4b11      	ldr	r3, [pc, #68]	; (800850c <vTaskStartScheduler+0xc4>)
 80084c6:	2201      	movs	r2, #1
 80084c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084ca:	4b11      	ldr	r3, [pc, #68]	; (8008510 <vTaskStartScheduler+0xc8>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084d0:	f001 f8be 	bl	8009650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084d4:	e00e      	b.n	80084f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d10a      	bne.n	80084f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60fb      	str	r3, [r7, #12]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <vTaskStartScheduler+0xaa>
}
 80084f4:	bf00      	nop
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	0800c9b8 	.word	0x0800c9b8
 8008500:	08008b2d 	.word	0x08008b2d
 8008504:	20000db8 	.word	0x20000db8
 8008508:	20000db4 	.word	0x20000db4
 800850c:	20000da0 	.word	0x20000da0
 8008510:	20000d98 	.word	0x20000d98

08008514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008518:	4b04      	ldr	r3, [pc, #16]	; (800852c <vTaskSuspendAll+0x18>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3301      	adds	r3, #1
 800851e:	4a03      	ldr	r2, [pc, #12]	; (800852c <vTaskSuspendAll+0x18>)
 8008520:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008522:	bf00      	nop
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	20000dbc 	.word	0x20000dbc

08008530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800853e:	4b42      	ldr	r3, [pc, #264]	; (8008648 <xTaskResumeAll+0x118>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10a      	bne.n	800855c <xTaskResumeAll+0x2c>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	603b      	str	r3, [r7, #0]
}
 8008558:	bf00      	nop
 800855a:	e7fe      	b.n	800855a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800855c:	f001 f91a 	bl	8009794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008560:	4b39      	ldr	r3, [pc, #228]	; (8008648 <xTaskResumeAll+0x118>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3b01      	subs	r3, #1
 8008566:	4a38      	ldr	r2, [pc, #224]	; (8008648 <xTaskResumeAll+0x118>)
 8008568:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800856a:	4b37      	ldr	r3, [pc, #220]	; (8008648 <xTaskResumeAll+0x118>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d162      	bne.n	8008638 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008572:	4b36      	ldr	r3, [pc, #216]	; (800864c <xTaskResumeAll+0x11c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d05e      	beq.n	8008638 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800857a:	e02f      	b.n	80085dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800857c:	4b34      	ldr	r3, [pc, #208]	; (8008650 <xTaskResumeAll+0x120>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3318      	adds	r3, #24
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff f871 	bl	8007670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3304      	adds	r3, #4
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff f86c 	bl	8007670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859c:	4b2d      	ldr	r3, [pc, #180]	; (8008654 <xTaskResumeAll+0x124>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d903      	bls.n	80085ac <xTaskResumeAll+0x7c>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	4a2a      	ldr	r2, [pc, #168]	; (8008654 <xTaskResumeAll+0x124>)
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4a27      	ldr	r2, [pc, #156]	; (8008658 <xTaskResumeAll+0x128>)
 80085ba:	441a      	add	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3304      	adds	r3, #4
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	f7fe fff7 	bl	80075b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085cc:	4b23      	ldr	r3, [pc, #140]	; (800865c <xTaskResumeAll+0x12c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d302      	bcc.n	80085dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80085d6:	4b22      	ldr	r3, [pc, #136]	; (8008660 <xTaskResumeAll+0x130>)
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085dc:	4b1c      	ldr	r3, [pc, #112]	; (8008650 <xTaskResumeAll+0x120>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1cb      	bne.n	800857c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085ea:	f000 fb55 	bl	8008c98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085ee:	4b1d      	ldr	r3, [pc, #116]	; (8008664 <xTaskResumeAll+0x134>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d010      	beq.n	800861c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085fa:	f000 f847 	bl	800868c <xTaskIncrementTick>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008604:	4b16      	ldr	r3, [pc, #88]	; (8008660 <xTaskResumeAll+0x130>)
 8008606:	2201      	movs	r2, #1
 8008608:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3b01      	subs	r3, #1
 800860e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f1      	bne.n	80085fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <xTaskResumeAll+0x134>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800861c:	4b10      	ldr	r3, [pc, #64]	; (8008660 <xTaskResumeAll+0x130>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d009      	beq.n	8008638 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008624:	2301      	movs	r3, #1
 8008626:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008628:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <xTaskResumeAll+0x138>)
 800862a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008638:	f001 f8dc 	bl	80097f4 <vPortExitCritical>

	return xAlreadyYielded;
 800863c:	68bb      	ldr	r3, [r7, #8]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20000dbc 	.word	0x20000dbc
 800864c:	20000d94 	.word	0x20000d94
 8008650:	20000d54 	.word	0x20000d54
 8008654:	20000d9c 	.word	0x20000d9c
 8008658:	200008c4 	.word	0x200008c4
 800865c:	200008c0 	.word	0x200008c0
 8008660:	20000da8 	.word	0x20000da8
 8008664:	20000da4 	.word	0x20000da4
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008672:	4b05      	ldr	r3, [pc, #20]	; (8008688 <xTaskGetTickCount+0x1c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008678:	687b      	ldr	r3, [r7, #4]
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20000d98 	.word	0x20000d98

0800868c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008696:	4b4f      	ldr	r3, [pc, #316]	; (80087d4 <xTaskIncrementTick+0x148>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 808f 	bne.w	80087be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086a0:	4b4d      	ldr	r3, [pc, #308]	; (80087d8 <xTaskIncrementTick+0x14c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3301      	adds	r3, #1
 80086a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086a8:	4a4b      	ldr	r2, [pc, #300]	; (80087d8 <xTaskIncrementTick+0x14c>)
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d120      	bne.n	80086f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80086b4:	4b49      	ldr	r3, [pc, #292]	; (80087dc <xTaskIncrementTick+0x150>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	603b      	str	r3, [r7, #0]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <xTaskIncrementTick+0x46>
 80086d4:	4b41      	ldr	r3, [pc, #260]	; (80087dc <xTaskIncrementTick+0x150>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	4b41      	ldr	r3, [pc, #260]	; (80087e0 <xTaskIncrementTick+0x154>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a3f      	ldr	r2, [pc, #252]	; (80087dc <xTaskIncrementTick+0x150>)
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	4a3f      	ldr	r2, [pc, #252]	; (80087e0 <xTaskIncrementTick+0x154>)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	4b3e      	ldr	r3, [pc, #248]	; (80087e4 <xTaskIncrementTick+0x158>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3301      	adds	r3, #1
 80086ee:	4a3d      	ldr	r2, [pc, #244]	; (80087e4 <xTaskIncrementTick+0x158>)
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	f000 fad1 	bl	8008c98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086f6:	4b3c      	ldr	r3, [pc, #240]	; (80087e8 <xTaskIncrementTick+0x15c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d349      	bcc.n	8008794 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008700:	4b36      	ldr	r3, [pc, #216]	; (80087dc <xTaskIncrementTick+0x150>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d104      	bne.n	8008714 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800870a:	4b37      	ldr	r3, [pc, #220]	; (80087e8 <xTaskIncrementTick+0x15c>)
 800870c:	f04f 32ff 	mov.w	r2, #4294967295
 8008710:	601a      	str	r2, [r3, #0]
					break;
 8008712:	e03f      	b.n	8008794 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008714:	4b31      	ldr	r3, [pc, #196]	; (80087dc <xTaskIncrementTick+0x150>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	d203      	bcs.n	8008734 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800872c:	4a2e      	ldr	r2, [pc, #184]	; (80087e8 <xTaskIncrementTick+0x15c>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008732:	e02f      	b.n	8008794 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	3304      	adds	r3, #4
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe ff99 	bl	8007670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008742:	2b00      	cmp	r3, #0
 8008744:	d004      	beq.n	8008750 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	3318      	adds	r3, #24
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe ff90 	bl	8007670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008754:	4b25      	ldr	r3, [pc, #148]	; (80087ec <xTaskIncrementTick+0x160>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d903      	bls.n	8008764 <xTaskIncrementTick+0xd8>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	4a22      	ldr	r2, [pc, #136]	; (80087ec <xTaskIncrementTick+0x160>)
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <xTaskIncrementTick+0x164>)
 8008772:	441a      	add	r2, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe ff1b 	bl	80075b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	4b1b      	ldr	r3, [pc, #108]	; (80087f4 <xTaskIncrementTick+0x168>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878a:	429a      	cmp	r2, r3
 800878c:	d3b8      	bcc.n	8008700 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800878e:	2301      	movs	r3, #1
 8008790:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008792:	e7b5      	b.n	8008700 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008794:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <xTaskIncrementTick+0x168>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879a:	4915      	ldr	r1, [pc, #84]	; (80087f0 <xTaskIncrementTick+0x164>)
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d901      	bls.n	80087b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087b0:	4b11      	ldr	r3, [pc, #68]	; (80087f8 <xTaskIncrementTick+0x16c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80087b8:	2301      	movs	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]
 80087bc:	e004      	b.n	80087c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087be:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <xTaskIncrementTick+0x170>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a0d      	ldr	r2, [pc, #52]	; (80087fc <xTaskIncrementTick+0x170>)
 80087c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087c8:	697b      	ldr	r3, [r7, #20]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000dbc 	.word	0x20000dbc
 80087d8:	20000d98 	.word	0x20000d98
 80087dc:	20000d4c 	.word	0x20000d4c
 80087e0:	20000d50 	.word	0x20000d50
 80087e4:	20000dac 	.word	0x20000dac
 80087e8:	20000db4 	.word	0x20000db4
 80087ec:	20000d9c 	.word	0x20000d9c
 80087f0:	200008c4 	.word	0x200008c4
 80087f4:	200008c0 	.word	0x200008c0
 80087f8:	20000da8 	.word	0x20000da8
 80087fc:	20000da4 	.word	0x20000da4

08008800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008806:	4b28      	ldr	r3, [pc, #160]	; (80088a8 <vTaskSwitchContext+0xa8>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800880e:	4b27      	ldr	r3, [pc, #156]	; (80088ac <vTaskSwitchContext+0xac>)
 8008810:	2201      	movs	r2, #1
 8008812:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008814:	e041      	b.n	800889a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008816:	4b25      	ldr	r3, [pc, #148]	; (80088ac <vTaskSwitchContext+0xac>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800881c:	4b24      	ldr	r3, [pc, #144]	; (80088b0 <vTaskSwitchContext+0xb0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	e010      	b.n	8008846 <vTaskSwitchContext+0x46>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <vTaskSwitchContext+0x40>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	607b      	str	r3, [r7, #4]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <vTaskSwitchContext+0x3e>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3b01      	subs	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	491b      	ldr	r1, [pc, #108]	; (80088b4 <vTaskSwitchContext+0xb4>)
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0e4      	beq.n	8008824 <vTaskSwitchContext+0x24>
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <vTaskSwitchContext+0xb4>)
 8008866:	4413      	add	r3, r2
 8008868:	60bb      	str	r3, [r7, #8]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	605a      	str	r2, [r3, #4]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	3308      	adds	r3, #8
 800887c:	429a      	cmp	r2, r3
 800887e:	d104      	bne.n	800888a <vTaskSwitchContext+0x8a>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	605a      	str	r2, [r3, #4]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	4a09      	ldr	r2, [pc, #36]	; (80088b8 <vTaskSwitchContext+0xb8>)
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	4a06      	ldr	r2, [pc, #24]	; (80088b0 <vTaskSwitchContext+0xb0>)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6013      	str	r3, [r2, #0]
}
 800889a:	bf00      	nop
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	20000dbc 	.word	0x20000dbc
 80088ac:	20000da8 	.word	0x20000da8
 80088b0:	20000d9c 	.word	0x20000d9c
 80088b4:	200008c4 	.word	0x200008c4
 80088b8:	200008c0 	.word	0x200008c0

080088bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	60fb      	str	r3, [r7, #12]
}
 80088de:	bf00      	nop
 80088e0:	e7fe      	b.n	80088e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088e2:	4b07      	ldr	r3, [pc, #28]	; (8008900 <vTaskPlaceOnEventList+0x44>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3318      	adds	r3, #24
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fe fe87 	bl	80075fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088f0:	2101      	movs	r1, #1
 80088f2:	6838      	ldr	r0, [r7, #0]
 80088f4:	f000 fa7c 	bl	8008df0 <prvAddCurrentTaskToDelayedList>
}
 80088f8:	bf00      	nop
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	200008c0 	.word	0x200008c0

08008904 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10a      	bne.n	800892c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	617b      	str	r3, [r7, #20]
}
 8008928:	bf00      	nop
 800892a:	e7fe      	b.n	800892a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800892c:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <vTaskPlaceOnEventListRestricted+0x54>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3318      	adds	r3, #24
 8008932:	4619      	mov	r1, r3
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7fe fe3e 	bl	80075b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008940:	f04f 33ff 	mov.w	r3, #4294967295
 8008944:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	68b8      	ldr	r0, [r7, #8]
 800894a:	f000 fa51 	bl	8008df0 <prvAddCurrentTaskToDelayedList>
	}
 800894e:	bf00      	nop
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	200008c0 	.word	0x200008c0

0800895c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	60fb      	str	r3, [r7, #12]
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	3318      	adds	r3, #24
 800898c:	4618      	mov	r0, r3
 800898e:	f7fe fe6f 	bl	8007670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008992:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <xTaskRemoveFromEventList+0xb0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d11d      	bne.n	80089d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	3304      	adds	r3, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fe66 	bl	8007670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a8:	4b19      	ldr	r3, [pc, #100]	; (8008a10 <xTaskRemoveFromEventList+0xb4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d903      	bls.n	80089b8 <xTaskRemoveFromEventList+0x5c>
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4a16      	ldr	r2, [pc, #88]	; (8008a10 <xTaskRemoveFromEventList+0xb4>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089bc:	4613      	mov	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4a13      	ldr	r2, [pc, #76]	; (8008a14 <xTaskRemoveFromEventList+0xb8>)
 80089c6:	441a      	add	r2, r3
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7fe fdf1 	bl	80075b6 <vListInsertEnd>
 80089d4:	e005      	b.n	80089e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	3318      	adds	r3, #24
 80089da:	4619      	mov	r1, r3
 80089dc:	480e      	ldr	r0, [pc, #56]	; (8008a18 <xTaskRemoveFromEventList+0xbc>)
 80089de:	f7fe fdea 	bl	80075b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e6:	4b0d      	ldr	r3, [pc, #52]	; (8008a1c <xTaskRemoveFromEventList+0xc0>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d905      	bls.n	80089fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80089f0:	2301      	movs	r3, #1
 80089f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089f4:	4b0a      	ldr	r3, [pc, #40]	; (8008a20 <xTaskRemoveFromEventList+0xc4>)
 80089f6:	2201      	movs	r2, #1
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	e001      	b.n	8008a00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a00:	697b      	ldr	r3, [r7, #20]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000dbc 	.word	0x20000dbc
 8008a10:	20000d9c 	.word	0x20000d9c
 8008a14:	200008c4 	.word	0x200008c4
 8008a18:	20000d54 	.word	0x20000d54
 8008a1c:	200008c0 	.word	0x200008c0
 8008a20:	20000da8 	.word	0x20000da8

08008a24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a2c:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <vTaskInternalSetTimeOutState+0x24>)
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a34:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <vTaskInternalSetTimeOutState+0x28>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	605a      	str	r2, [r3, #4]
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	20000dac 	.word	0x20000dac
 8008a4c:	20000d98 	.word	0x20000d98

08008a50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	60fb      	str	r3, [r7, #12]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a92:	f000 fe7f 	bl	8009794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a96:	4b1d      	ldr	r3, [pc, #116]	; (8008b0c <xTaskCheckForTimeOut+0xbc>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aae:	d102      	bne.n	8008ab6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61fb      	str	r3, [r7, #28]
 8008ab4:	e023      	b.n	8008afe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <xTaskCheckForTimeOut+0xc0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d007      	beq.n	8008ad2 <xTaskCheckForTimeOut+0x82>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d302      	bcc.n	8008ad2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008acc:	2301      	movs	r3, #1
 8008ace:	61fb      	str	r3, [r7, #28]
 8008ad0:	e015      	b.n	8008afe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d20b      	bcs.n	8008af4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff ff9b 	bl	8008a24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	61fb      	str	r3, [r7, #28]
 8008af2:	e004      	b.n	8008afe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008afa:	2301      	movs	r3, #1
 8008afc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008afe:	f000 fe79 	bl	80097f4 <vPortExitCritical>

	return xReturn;
 8008b02:	69fb      	ldr	r3, [r7, #28]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000d98 	.word	0x20000d98
 8008b10:	20000dac 	.word	0x20000dac

08008b14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b18:	4b03      	ldr	r3, [pc, #12]	; (8008b28 <vTaskMissedYield+0x14>)
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]
}
 8008b1e:	bf00      	nop
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	20000da8 	.word	0x20000da8

08008b2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b34:	f000 f852 	bl	8008bdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b38:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <prvIdleTask+0x28>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d9f9      	bls.n	8008b34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b40:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <prvIdleTask+0x2c>)
 8008b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b50:	e7f0      	b.n	8008b34 <prvIdleTask+0x8>
 8008b52:	bf00      	nop
 8008b54:	200008c4 	.word	0x200008c4
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b62:	2300      	movs	r3, #0
 8008b64:	607b      	str	r3, [r7, #4]
 8008b66:	e00c      	b.n	8008b82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4a12      	ldr	r2, [pc, #72]	; (8008bbc <prvInitialiseTaskLists+0x60>)
 8008b74:	4413      	add	r3, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fcf0 	bl	800755c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	607b      	str	r3, [r7, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b37      	cmp	r3, #55	; 0x37
 8008b86:	d9ef      	bls.n	8008b68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b88:	480d      	ldr	r0, [pc, #52]	; (8008bc0 <prvInitialiseTaskLists+0x64>)
 8008b8a:	f7fe fce7 	bl	800755c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b8e:	480d      	ldr	r0, [pc, #52]	; (8008bc4 <prvInitialiseTaskLists+0x68>)
 8008b90:	f7fe fce4 	bl	800755c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b94:	480c      	ldr	r0, [pc, #48]	; (8008bc8 <prvInitialiseTaskLists+0x6c>)
 8008b96:	f7fe fce1 	bl	800755c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b9a:	480c      	ldr	r0, [pc, #48]	; (8008bcc <prvInitialiseTaskLists+0x70>)
 8008b9c:	f7fe fcde 	bl	800755c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ba0:	480b      	ldr	r0, [pc, #44]	; (8008bd0 <prvInitialiseTaskLists+0x74>)
 8008ba2:	f7fe fcdb 	bl	800755c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <prvInitialiseTaskLists+0x78>)
 8008ba8:	4a05      	ldr	r2, [pc, #20]	; (8008bc0 <prvInitialiseTaskLists+0x64>)
 8008baa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <prvInitialiseTaskLists+0x7c>)
 8008bae:	4a05      	ldr	r2, [pc, #20]	; (8008bc4 <prvInitialiseTaskLists+0x68>)
 8008bb0:	601a      	str	r2, [r3, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	200008c4 	.word	0x200008c4
 8008bc0:	20000d24 	.word	0x20000d24
 8008bc4:	20000d38 	.word	0x20000d38
 8008bc8:	20000d54 	.word	0x20000d54
 8008bcc:	20000d68 	.word	0x20000d68
 8008bd0:	20000d80 	.word	0x20000d80
 8008bd4:	20000d4c 	.word	0x20000d4c
 8008bd8:	20000d50 	.word	0x20000d50

08008bdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008be2:	e019      	b.n	8008c18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008be4:	f000 fdd6 	bl	8009794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be8:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <prvCheckTasksWaitingTermination+0x50>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fe fd3b 	bl	8007670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bfa:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <prvCheckTasksWaitingTermination+0x54>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	4a0b      	ldr	r2, [pc, #44]	; (8008c30 <prvCheckTasksWaitingTermination+0x54>)
 8008c02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c04:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <prvCheckTasksWaitingTermination+0x58>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	4a0a      	ldr	r2, [pc, #40]	; (8008c34 <prvCheckTasksWaitingTermination+0x58>)
 8008c0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c0e:	f000 fdf1 	bl	80097f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f810 	bl	8008c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c18:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <prvCheckTasksWaitingTermination+0x58>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e1      	bne.n	8008be4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000d68 	.word	0x20000d68
 8008c30:	20000d94 	.word	0x20000d94
 8008c34:	20000d7c 	.word	0x20000d7c

08008c38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d108      	bne.n	8008c5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 ff50 	bl	8009af4 <vPortFree>
				vPortFree( pxTCB );
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 ff4d 	bl	8009af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c5a:	e018      	b.n	8008c8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d103      	bne.n	8008c6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 ff44 	bl	8009af4 <vPortFree>
	}
 8008c6c:	e00f      	b.n	8008c8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d00a      	beq.n	8008c8e <prvDeleteTCB+0x56>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	60fb      	str	r3, [r7, #12]
}
 8008c8a:	bf00      	nop
 8008c8c:	e7fe      	b.n	8008c8c <prvDeleteTCB+0x54>
	}
 8008c8e:	bf00      	nop
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c9e:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <prvResetNextTaskUnblockTime+0x38>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d104      	bne.n	8008cb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ca8:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008caa:	f04f 32ff 	mov.w	r2, #4294967295
 8008cae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cb0:	e008      	b.n	8008cc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <prvResetNextTaskUnblockTime+0x38>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	4a04      	ldr	r2, [pc, #16]	; (8008cd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008cc2:	6013      	str	r3, [r2, #0]
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	20000d4c 	.word	0x20000d4c
 8008cd4:	20000db4 	.word	0x20000db4

08008cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cde:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <xTaskGetSchedulerState+0x34>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d102      	bne.n	8008cec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	607b      	str	r3, [r7, #4]
 8008cea:	e008      	b.n	8008cfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cec:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <xTaskGetSchedulerState+0x38>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	607b      	str	r3, [r7, #4]
 8008cf8:	e001      	b.n	8008cfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cfe:	687b      	ldr	r3, [r7, #4]
	}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20000da0 	.word	0x20000da0
 8008d10:	20000dbc 	.word	0x20000dbc

08008d14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d056      	beq.n	8008dd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d2a:	4b2e      	ldr	r3, [pc, #184]	; (8008de4 <xTaskPriorityDisinherit+0xd0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d00a      	beq.n	8008d4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	60fb      	str	r3, [r7, #12]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	60bb      	str	r3, [r7, #8]
}
 8008d64:	bf00      	nop
 8008d66:	e7fe      	b.n	8008d66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6c:	1e5a      	subs	r2, r3, #1
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d02c      	beq.n	8008dd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d128      	bne.n	8008dd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fc70 	bl	8007670 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <xTaskPriorityDisinherit+0xd4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d903      	bls.n	8008db8 <xTaskPriorityDisinherit+0xa4>
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	4a0c      	ldr	r2, [pc, #48]	; (8008de8 <xTaskPriorityDisinherit+0xd4>)
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4a09      	ldr	r2, [pc, #36]	; (8008dec <xTaskPriorityDisinherit+0xd8>)
 8008dc6:	441a      	add	r2, r3
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f7fe fbf1 	bl	80075b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008dd8:	697b      	ldr	r3, [r7, #20]
	}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	200008c0 	.word	0x200008c0
 8008de8:	20000d9c 	.word	0x20000d9c
 8008dec:	200008c4 	.word	0x200008c4

08008df0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dfa:	4b21      	ldr	r3, [pc, #132]	; (8008e80 <prvAddCurrentTaskToDelayedList+0x90>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e00:	4b20      	ldr	r3, [pc, #128]	; (8008e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fc32 	bl	8007670 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e12:	d10a      	bne.n	8008e2a <prvAddCurrentTaskToDelayedList+0x3a>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e1a:	4b1a      	ldr	r3, [pc, #104]	; (8008e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	4619      	mov	r1, r3
 8008e22:	4819      	ldr	r0, [pc, #100]	; (8008e88 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e24:	f7fe fbc7 	bl	80075b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e28:	e026      	b.n	8008e78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4413      	add	r3, r2
 8008e30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e32:	4b14      	ldr	r3, [pc, #80]	; (8008e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d209      	bcs.n	8008e56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e42:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	f7fe fbd5 	bl	80075fe <vListInsert>
}
 8008e54:	e010      	b.n	8008e78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e56:	4b0e      	ldr	r3, [pc, #56]	; (8008e90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3304      	adds	r3, #4
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f7fe fbcb 	bl	80075fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d202      	bcs.n	8008e78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e72:	4a08      	ldr	r2, [pc, #32]	; (8008e94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	6013      	str	r3, [r2, #0]
}
 8008e78:	bf00      	nop
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20000d98 	.word	0x20000d98
 8008e84:	200008c0 	.word	0x200008c0
 8008e88:	20000d80 	.word	0x20000d80
 8008e8c:	20000d50 	.word	0x20000d50
 8008e90:	20000d4c 	.word	0x20000d4c
 8008e94:	20000db4 	.word	0x20000db4

08008e98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08a      	sub	sp, #40	; 0x28
 8008e9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ea2:	f000 fb07 	bl	80094b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ea6:	4b1c      	ldr	r3, [pc, #112]	; (8008f18 <xTimerCreateTimerTask+0x80>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d021      	beq.n	8008ef2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008eb6:	1d3a      	adds	r2, r7, #4
 8008eb8:	f107 0108 	add.w	r1, r7, #8
 8008ebc:	f107 030c 	add.w	r3, r7, #12
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe fb31 	bl	8007528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	9202      	str	r2, [sp, #8]
 8008ece:	9301      	str	r3, [sp, #4]
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	460a      	mov	r2, r1
 8008ed8:	4910      	ldr	r1, [pc, #64]	; (8008f1c <xTimerCreateTimerTask+0x84>)
 8008eda:	4811      	ldr	r0, [pc, #68]	; (8008f20 <xTimerCreateTimerTask+0x88>)
 8008edc:	f7ff f8de 	bl	800809c <xTaskCreateStatic>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	4a10      	ldr	r2, [pc, #64]	; (8008f24 <xTimerCreateTimerTask+0x8c>)
 8008ee4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ee6:	4b0f      	ldr	r3, [pc, #60]	; (8008f24 <xTimerCreateTimerTask+0x8c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10a      	bne.n	8008f0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	613b      	str	r3, [r7, #16]
}
 8008f0a:	bf00      	nop
 8008f0c:	e7fe      	b.n	8008f0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f0e:	697b      	ldr	r3, [r7, #20]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20000df0 	.word	0x20000df0
 8008f1c:	0800c9c0 	.word	0x0800c9c0
 8008f20:	0800905d 	.word	0x0800905d
 8008f24:	20000df4 	.word	0x20000df4

08008f28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08a      	sub	sp, #40	; 0x28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10a      	bne.n	8008f56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	623b      	str	r3, [r7, #32]
}
 8008f52:	bf00      	nop
 8008f54:	e7fe      	b.n	8008f54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f56:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <xTimerGenericCommand+0x98>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d02a      	beq.n	8008fb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b05      	cmp	r3, #5
 8008f6e:	dc18      	bgt.n	8008fa2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f70:	f7ff feb2 	bl	8008cd8 <xTaskGetSchedulerState>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d109      	bne.n	8008f8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f7a:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <xTimerGenericCommand+0x98>)
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f107 0110 	add.w	r1, r7, #16
 8008f82:	2300      	movs	r3, #0
 8008f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f86:	f7fe fca1 	bl	80078cc <xQueueGenericSend>
 8008f8a:	6278      	str	r0, [r7, #36]	; 0x24
 8008f8c:	e012      	b.n	8008fb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <xTimerGenericCommand+0x98>)
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	f107 0110 	add.w	r1, r7, #16
 8008f96:	2300      	movs	r3, #0
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7fe fc97 	bl	80078cc <xQueueGenericSend>
 8008f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8008fa0:	e008      	b.n	8008fb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <xTimerGenericCommand+0x98>)
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	f107 0110 	add.w	r1, r7, #16
 8008faa:	2300      	movs	r3, #0
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	f7fe fd8b 	bl	8007ac8 <xQueueGenericSendFromISR>
 8008fb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3728      	adds	r7, #40	; 0x28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000df0 	.word	0x20000df0

08008fc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af02      	add	r7, sp, #8
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fce:	4b22      	ldr	r3, [pc, #136]	; (8009058 <prvProcessExpiredTimer+0x94>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fb47 	bl	8007670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d022      	beq.n	8009036 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	18d1      	adds	r1, r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	6978      	ldr	r0, [r7, #20]
 8008ffe:	f000 f8d1 	bl	80091a4 <prvInsertTimerInActiveList>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01f      	beq.n	8009048 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009008:	2300      	movs	r3, #0
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	2300      	movs	r3, #0
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	2100      	movs	r1, #0
 8009012:	6978      	ldr	r0, [r7, #20]
 8009014:	f7ff ff88 	bl	8008f28 <xTimerGenericCommand>
 8009018:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d113      	bne.n	8009048 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60fb      	str	r3, [r7, #12]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800903c:	f023 0301 	bic.w	r3, r3, #1
 8009040:	b2da      	uxtb	r2, r3
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	6978      	ldr	r0, [r7, #20]
 800904e:	4798      	blx	r3
}
 8009050:	bf00      	nop
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20000de8 	.word	0x20000de8

0800905c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009064:	f107 0308 	add.w	r3, r7, #8
 8009068:	4618      	mov	r0, r3
 800906a:	f000 f857 	bl	800911c <prvGetNextExpireTime>
 800906e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	4619      	mov	r1, r3
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 f803 	bl	8009080 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800907a:	f000 f8d5 	bl	8009228 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800907e:	e7f1      	b.n	8009064 <prvTimerTask+0x8>

08009080 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800908a:	f7ff fa43 	bl	8008514 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800908e:	f107 0308 	add.w	r3, r7, #8
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f866 	bl	8009164 <prvSampleTimeNow>
 8009098:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d130      	bne.n	8009102 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <prvProcessTimerOrBlockTask+0x3c>
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d806      	bhi.n	80090bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090ae:	f7ff fa3f 	bl	8008530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff ff85 	bl	8008fc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090ba:	e024      	b.n	8009106 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090c2:	4b13      	ldr	r3, [pc, #76]	; (8009110 <prvProcessTimerOrBlockTask+0x90>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <prvProcessTimerOrBlockTask+0x50>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <prvProcessTimerOrBlockTask+0x52>
 80090d0:	2300      	movs	r3, #0
 80090d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090d4:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <prvProcessTimerOrBlockTask+0x94>)
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	f7fe ffa7 	bl	8008034 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090e6:	f7ff fa23 	bl	8008530 <xTaskResumeAll>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090f0:	4b09      	ldr	r3, [pc, #36]	; (8009118 <prvProcessTimerOrBlockTask+0x98>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
}
 8009100:	e001      	b.n	8009106 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009102:	f7ff fa15 	bl	8008530 <xTaskResumeAll>
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000dec 	.word	0x20000dec
 8009114:	20000df0 	.word	0x20000df0
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <prvGetNextExpireTime+0x44>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <prvGetNextExpireTime+0x16>
 800912e:	2201      	movs	r2, #1
 8009130:	e000      	b.n	8009134 <prvGetNextExpireTime+0x18>
 8009132:	2200      	movs	r2, #0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d105      	bne.n	800914c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <prvGetNextExpireTime+0x44>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	e001      	b.n	8009150 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009150:	68fb      	ldr	r3, [r7, #12]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	20000de8 	.word	0x20000de8

08009164 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800916c:	f7ff fa7e 	bl	800866c <xTaskGetTickCount>
 8009170:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <prvSampleTimeNow+0x3c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	429a      	cmp	r2, r3
 800917a:	d205      	bcs.n	8009188 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800917c:	f000 f936 	bl	80093ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	e002      	b.n	800918e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800918e:	4a04      	ldr	r2, [pc, #16]	; (80091a0 <prvSampleTimeNow+0x3c>)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009194:	68fb      	ldr	r3, [r7, #12]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	20000df8 	.word	0x20000df8

080091a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d812      	bhi.n	80091f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d302      	bcc.n	80091de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091d8:	2301      	movs	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	e01b      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091de:	4b10      	ldr	r3, [pc, #64]	; (8009220 <prvInsertTimerInActiveList+0x7c>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fe fa08 	bl	80075fe <vListInsert>
 80091ee:	e012      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d206      	bcs.n	8009206 <prvInsertTimerInActiveList+0x62>
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d302      	bcc.n	8009206 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	e007      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009206:	4b07      	ldr	r3, [pc, #28]	; (8009224 <prvInsertTimerInActiveList+0x80>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3304      	adds	r3, #4
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f7fe f9f4 	bl	80075fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009216:	697b      	ldr	r3, [r7, #20]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20000dec 	.word	0x20000dec
 8009224:	20000de8 	.word	0x20000de8

08009228 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08e      	sub	sp, #56	; 0x38
 800922c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800922e:	e0ca      	b.n	80093c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	da18      	bge.n	8009268 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009236:	1d3b      	adds	r3, r7, #4
 8009238:	3304      	adds	r3, #4
 800923a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	61fb      	str	r3, [r7, #28]
}
 8009254:	bf00      	nop
 8009256:	e7fe      	b.n	8009256 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800925e:	6850      	ldr	r0, [r2, #4]
 8009260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009262:	6892      	ldr	r2, [r2, #8]
 8009264:	4611      	mov	r1, r2
 8009266:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f2c0 80aa 	blt.w	80093c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d004      	beq.n	8009286 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927e:	3304      	adds	r3, #4
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe f9f5 	bl	8007670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009286:	463b      	mov	r3, r7
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff ff6b 	bl	8009164 <prvSampleTimeNow>
 800928e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b09      	cmp	r3, #9
 8009294:	f200 8097 	bhi.w	80093c6 <prvProcessReceivedCommands+0x19e>
 8009298:	a201      	add	r2, pc, #4	; (adr r2, 80092a0 <prvProcessReceivedCommands+0x78>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	080092c9 	.word	0x080092c9
 80092a4:	080092c9 	.word	0x080092c9
 80092a8:	080092c9 	.word	0x080092c9
 80092ac:	0800933d 	.word	0x0800933d
 80092b0:	08009351 	.word	0x08009351
 80092b4:	0800939b 	.word	0x0800939b
 80092b8:	080092c9 	.word	0x080092c9
 80092bc:	080092c9 	.word	0x080092c9
 80092c0:	0800933d 	.word	0x0800933d
 80092c4:	08009351 	.word	0x08009351
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	18d1      	adds	r1, r2, r3
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e8:	f7ff ff5c 	bl	80091a4 <prvInsertTimerInActiveList>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d069      	beq.n	80093c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d05e      	beq.n	80093c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	441a      	add	r2, r3
 8009310:	2300      	movs	r3, #0
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	2300      	movs	r3, #0
 8009316:	2100      	movs	r1, #0
 8009318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800931a:	f7ff fe05 	bl	8008f28 <xTimerGenericCommand>
 800931e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d14f      	bne.n	80093c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	61bb      	str	r3, [r7, #24]
}
 8009338:	bf00      	nop
 800933a:	e7fe      	b.n	800933a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009342:	f023 0301 	bic.w	r3, r3, #1
 8009346:	b2da      	uxtb	r2, r3
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800934e:	e03a      	b.n	80093c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009356:	f043 0301 	orr.w	r3, r3, #1
 800935a:	b2da      	uxtb	r2, r3
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	617b      	str	r3, [r7, #20]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	18d1      	adds	r1, r2, r3
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009394:	f7ff ff06 	bl	80091a4 <prvInsertTimerInActiveList>
					break;
 8009398:	e015      	b.n	80093c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80093a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093aa:	f000 fba3 	bl	8009af4 <vPortFree>
 80093ae:	e00a      	b.n	80093c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093b6:	f023 0301 	bic.w	r3, r3, #1
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093c2:	e000      	b.n	80093c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80093c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093c6:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <prvProcessReceivedCommands+0x1c0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	1d39      	adds	r1, r7, #4
 80093cc:	2200      	movs	r2, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fc16 	bl	8007c00 <xQueueReceive>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f47f af2a 	bne.w	8009230 <prvProcessReceivedCommands+0x8>
	}
}
 80093dc:	bf00      	nop
 80093de:	bf00      	nop
 80093e0:	3730      	adds	r7, #48	; 0x30
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000df0 	.word	0x20000df0

080093ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093f2:	e048      	b.n	8009486 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093f4:	4b2d      	ldr	r3, [pc, #180]	; (80094ac <prvSwitchTimerLists+0xc0>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093fe:	4b2b      	ldr	r3, [pc, #172]	; (80094ac <prvSwitchTimerLists+0xc0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3304      	adds	r3, #4
 800940c:	4618      	mov	r0, r3
 800940e:	f7fe f92f 	bl	8007670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d02e      	beq.n	8009486 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	4413      	add	r3, r2
 8009430:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	429a      	cmp	r2, r3
 8009438:	d90e      	bls.n	8009458 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009446:	4b19      	ldr	r3, [pc, #100]	; (80094ac <prvSwitchTimerLists+0xc0>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3304      	adds	r3, #4
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f7fe f8d4 	bl	80075fe <vListInsert>
 8009456:	e016      	b.n	8009486 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009458:	2300      	movs	r3, #0
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	2300      	movs	r3, #0
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	2100      	movs	r1, #0
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f7ff fd60 	bl	8008f28 <xTimerGenericCommand>
 8009468:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	603b      	str	r3, [r7, #0]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009486:	4b09      	ldr	r3, [pc, #36]	; (80094ac <prvSwitchTimerLists+0xc0>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1b1      	bne.n	80093f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009490:	4b06      	ldr	r3, [pc, #24]	; (80094ac <prvSwitchTimerLists+0xc0>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009496:	4b06      	ldr	r3, [pc, #24]	; (80094b0 <prvSwitchTimerLists+0xc4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a04      	ldr	r2, [pc, #16]	; (80094ac <prvSwitchTimerLists+0xc0>)
 800949c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800949e:	4a04      	ldr	r2, [pc, #16]	; (80094b0 <prvSwitchTimerLists+0xc4>)
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	6013      	str	r3, [r2, #0]
}
 80094a4:	bf00      	nop
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20000de8 	.word	0x20000de8
 80094b0:	20000dec 	.word	0x20000dec

080094b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094ba:	f000 f96b 	bl	8009794 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094be:	4b15      	ldr	r3, [pc, #84]	; (8009514 <prvCheckForValidListAndQueue+0x60>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d120      	bne.n	8009508 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80094c6:	4814      	ldr	r0, [pc, #80]	; (8009518 <prvCheckForValidListAndQueue+0x64>)
 80094c8:	f7fe f848 	bl	800755c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094cc:	4813      	ldr	r0, [pc, #76]	; (800951c <prvCheckForValidListAndQueue+0x68>)
 80094ce:	f7fe f845 	bl	800755c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094d2:	4b13      	ldr	r3, [pc, #76]	; (8009520 <prvCheckForValidListAndQueue+0x6c>)
 80094d4:	4a10      	ldr	r2, [pc, #64]	; (8009518 <prvCheckForValidListAndQueue+0x64>)
 80094d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094d8:	4b12      	ldr	r3, [pc, #72]	; (8009524 <prvCheckForValidListAndQueue+0x70>)
 80094da:	4a10      	ldr	r2, [pc, #64]	; (800951c <prvCheckForValidListAndQueue+0x68>)
 80094dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094de:	2300      	movs	r3, #0
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	4b11      	ldr	r3, [pc, #68]	; (8009528 <prvCheckForValidListAndQueue+0x74>)
 80094e4:	4a11      	ldr	r2, [pc, #68]	; (800952c <prvCheckForValidListAndQueue+0x78>)
 80094e6:	2110      	movs	r1, #16
 80094e8:	200a      	movs	r0, #10
 80094ea:	f7fe f953 	bl	8007794 <xQueueGenericCreateStatic>
 80094ee:	4603      	mov	r3, r0
 80094f0:	4a08      	ldr	r2, [pc, #32]	; (8009514 <prvCheckForValidListAndQueue+0x60>)
 80094f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094f4:	4b07      	ldr	r3, [pc, #28]	; (8009514 <prvCheckForValidListAndQueue+0x60>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094fc:	4b05      	ldr	r3, [pc, #20]	; (8009514 <prvCheckForValidListAndQueue+0x60>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	490b      	ldr	r1, [pc, #44]	; (8009530 <prvCheckForValidListAndQueue+0x7c>)
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fd6c 	bl	8007fe0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009508:	f000 f974 	bl	80097f4 <vPortExitCritical>
}
 800950c:	bf00      	nop
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	20000df0 	.word	0x20000df0
 8009518:	20000dc0 	.word	0x20000dc0
 800951c:	20000dd4 	.word	0x20000dd4
 8009520:	20000de8 	.word	0x20000de8
 8009524:	20000dec 	.word	0x20000dec
 8009528:	20000e9c 	.word	0x20000e9c
 800952c:	20000dfc 	.word	0x20000dfc
 8009530:	0800c9c8 	.word	0x0800c9c8

08009534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3b04      	subs	r3, #4
 8009544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800954c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3b04      	subs	r3, #4
 8009552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f023 0201 	bic.w	r2, r3, #1
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3b04      	subs	r3, #4
 8009562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009564:	4a0c      	ldr	r2, [pc, #48]	; (8009598 <pxPortInitialiseStack+0x64>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3b14      	subs	r3, #20
 800956e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3b04      	subs	r3, #4
 800957a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f06f 0202 	mvn.w	r2, #2
 8009582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3b20      	subs	r3, #32
 8009588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800958a:	68fb      	ldr	r3, [r7, #12]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	0800959d 	.word	0x0800959d

0800959c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095a6:	4b12      	ldr	r3, [pc, #72]	; (80095f0 <prvTaskExitError+0x54>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ae:	d00a      	beq.n	80095c6 <prvTaskExitError+0x2a>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	60fb      	str	r3, [r7, #12]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <prvTaskExitError+0x28>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	60bb      	str	r3, [r7, #8]
}
 80095d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095da:	bf00      	nop
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0fc      	beq.n	80095dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	2000000c 	.word	0x2000000c
	...

08009600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <pxCurrentTCBConst2>)
 8009602:	6819      	ldr	r1, [r3, #0]
 8009604:	6808      	ldr	r0, [r1, #0]
 8009606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960a:	f380 8809 	msr	PSP, r0
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f04f 0000 	mov.w	r0, #0
 8009616:	f380 8811 	msr	BASEPRI, r0
 800961a:	4770      	bx	lr
 800961c:	f3af 8000 	nop.w

08009620 <pxCurrentTCBConst2>:
 8009620:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop

08009628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009628:	4808      	ldr	r0, [pc, #32]	; (800964c <prvPortStartFirstTask+0x24>)
 800962a:	6800      	ldr	r0, [r0, #0]
 800962c:	6800      	ldr	r0, [r0, #0]
 800962e:	f380 8808 	msr	MSP, r0
 8009632:	f04f 0000 	mov.w	r0, #0
 8009636:	f380 8814 	msr	CONTROL, r0
 800963a:	b662      	cpsie	i
 800963c:	b661      	cpsie	f
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	df00      	svc	0
 8009648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800964a:	bf00      	nop
 800964c:	e000ed08 	.word	0xe000ed08

08009650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009656:	4b46      	ldr	r3, [pc, #280]	; (8009770 <xPortStartScheduler+0x120>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a46      	ldr	r2, [pc, #280]	; (8009774 <xPortStartScheduler+0x124>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d10a      	bne.n	8009676 <xPortStartScheduler+0x26>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	613b      	str	r3, [r7, #16]
}
 8009672:	bf00      	nop
 8009674:	e7fe      	b.n	8009674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009676:	4b3e      	ldr	r3, [pc, #248]	; (8009770 <xPortStartScheduler+0x120>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a3f      	ldr	r2, [pc, #252]	; (8009778 <xPortStartScheduler+0x128>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d10a      	bne.n	8009696 <xPortStartScheduler+0x46>
	__asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	60fb      	str	r3, [r7, #12]
}
 8009692:	bf00      	nop
 8009694:	e7fe      	b.n	8009694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009696:	4b39      	ldr	r3, [pc, #228]	; (800977c <xPortStartScheduler+0x12c>)
 8009698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	22ff      	movs	r2, #255	; 0xff
 80096a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	4b31      	ldr	r3, [pc, #196]	; (8009780 <xPortStartScheduler+0x130>)
 80096bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096be:	4b31      	ldr	r3, [pc, #196]	; (8009784 <xPortStartScheduler+0x134>)
 80096c0:	2207      	movs	r2, #7
 80096c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096c4:	e009      	b.n	80096da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80096c6:	4b2f      	ldr	r3, [pc, #188]	; (8009784 <xPortStartScheduler+0x134>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	4a2d      	ldr	r2, [pc, #180]	; (8009784 <xPortStartScheduler+0x134>)
 80096ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80096d0:	78fb      	ldrb	r3, [r7, #3]
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e2:	2b80      	cmp	r3, #128	; 0x80
 80096e4:	d0ef      	beq.n	80096c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096e6:	4b27      	ldr	r3, [pc, #156]	; (8009784 <xPortStartScheduler+0x134>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f1c3 0307 	rsb	r3, r3, #7
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	d00a      	beq.n	8009708 <xPortStartScheduler+0xb8>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	60bb      	str	r3, [r7, #8]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009708:	4b1e      	ldr	r3, [pc, #120]	; (8009784 <xPortStartScheduler+0x134>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	021b      	lsls	r3, r3, #8
 800970e:	4a1d      	ldr	r2, [pc, #116]	; (8009784 <xPortStartScheduler+0x134>)
 8009710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009712:	4b1c      	ldr	r3, [pc, #112]	; (8009784 <xPortStartScheduler+0x134>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800971a:	4a1a      	ldr	r2, [pc, #104]	; (8009784 <xPortStartScheduler+0x134>)
 800971c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	b2da      	uxtb	r2, r3
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009726:	4b18      	ldr	r3, [pc, #96]	; (8009788 <xPortStartScheduler+0x138>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a17      	ldr	r2, [pc, #92]	; (8009788 <xPortStartScheduler+0x138>)
 800972c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009732:	4b15      	ldr	r3, [pc, #84]	; (8009788 <xPortStartScheduler+0x138>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a14      	ldr	r2, [pc, #80]	; (8009788 <xPortStartScheduler+0x138>)
 8009738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800973c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800973e:	f000 f8dd 	bl	80098fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009742:	4b12      	ldr	r3, [pc, #72]	; (800978c <xPortStartScheduler+0x13c>)
 8009744:	2200      	movs	r2, #0
 8009746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009748:	f000 f8fc 	bl	8009944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800974c:	4b10      	ldr	r3, [pc, #64]	; (8009790 <xPortStartScheduler+0x140>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a0f      	ldr	r2, [pc, #60]	; (8009790 <xPortStartScheduler+0x140>)
 8009752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009758:	f7ff ff66 	bl	8009628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800975c:	f7ff f850 	bl	8008800 <vTaskSwitchContext>
	prvTaskExitError();
 8009760:	f7ff ff1c 	bl	800959c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	e000ed00 	.word	0xe000ed00
 8009774:	410fc271 	.word	0x410fc271
 8009778:	410fc270 	.word	0x410fc270
 800977c:	e000e400 	.word	0xe000e400
 8009780:	20000eec 	.word	0x20000eec
 8009784:	20000ef0 	.word	0x20000ef0
 8009788:	e000ed20 	.word	0xe000ed20
 800978c:	2000000c 	.word	0x2000000c
 8009790:	e000ef34 	.word	0xe000ef34

08009794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	607b      	str	r3, [r7, #4]
}
 80097ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097ae:	4b0f      	ldr	r3, [pc, #60]	; (80097ec <vPortEnterCritical+0x58>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3301      	adds	r3, #1
 80097b4:	4a0d      	ldr	r2, [pc, #52]	; (80097ec <vPortEnterCritical+0x58>)
 80097b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097b8:	4b0c      	ldr	r3, [pc, #48]	; (80097ec <vPortEnterCritical+0x58>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d10f      	bne.n	80097e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097c0:	4b0b      	ldr	r3, [pc, #44]	; (80097f0 <vPortEnterCritical+0x5c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	603b      	str	r3, [r7, #0]
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <vPortEnterCritical+0x4a>
	}
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	2000000c 	.word	0x2000000c
 80097f0:	e000ed04 	.word	0xe000ed04

080097f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097fa:	4b12      	ldr	r3, [pc, #72]	; (8009844 <vPortExitCritical+0x50>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <vPortExitCritical+0x24>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	607b      	str	r3, [r7, #4]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009818:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <vPortExitCritical+0x50>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3b01      	subs	r3, #1
 800981e:	4a09      	ldr	r2, [pc, #36]	; (8009844 <vPortExitCritical+0x50>)
 8009820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009822:	4b08      	ldr	r3, [pc, #32]	; (8009844 <vPortExitCritical+0x50>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d105      	bne.n	8009836 <vPortExitCritical+0x42>
 800982a:	2300      	movs	r3, #0
 800982c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	f383 8811 	msr	BASEPRI, r3
}
 8009834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009836:	bf00      	nop
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	2000000c 	.word	0x2000000c
	...

08009850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009850:	f3ef 8009 	mrs	r0, PSP
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	4b15      	ldr	r3, [pc, #84]	; (80098b0 <pxCurrentTCBConst>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	f01e 0f10 	tst.w	lr, #16
 8009860:	bf08      	it	eq
 8009862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986a:	6010      	str	r0, [r2, #0]
 800986c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009874:	f380 8811 	msr	BASEPRI, r0
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f7fe ffbe 	bl	8008800 <vTaskSwitchContext>
 8009884:	f04f 0000 	mov.w	r0, #0
 8009888:	f380 8811 	msr	BASEPRI, r0
 800988c:	bc09      	pop	{r0, r3}
 800988e:	6819      	ldr	r1, [r3, #0]
 8009890:	6808      	ldr	r0, [r1, #0]
 8009892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009896:	f01e 0f10 	tst.w	lr, #16
 800989a:	bf08      	it	eq
 800989c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098a0:	f380 8809 	msr	PSP, r0
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	f3af 8000 	nop.w

080098b0 <pxCurrentTCBConst>:
 80098b0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop

080098b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	607b      	str	r3, [r7, #4]
}
 80098d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098d2:	f7fe fedb 	bl	800868c <xTaskIncrementTick>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098dc:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <xPortSysTickHandler+0x40>)
 80098de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	2300      	movs	r3, #0
 80098e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	f383 8811 	msr	BASEPRI, r3
}
 80098ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	e000ed04 	.word	0xe000ed04

080098fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009900:	4b0b      	ldr	r3, [pc, #44]	; (8009930 <vPortSetupTimerInterrupt+0x34>)
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009906:	4b0b      	ldr	r3, [pc, #44]	; (8009934 <vPortSetupTimerInterrupt+0x38>)
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800990c:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <vPortSetupTimerInterrupt+0x3c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a0a      	ldr	r2, [pc, #40]	; (800993c <vPortSetupTimerInterrupt+0x40>)
 8009912:	fba2 2303 	umull	r2, r3, r2, r3
 8009916:	099b      	lsrs	r3, r3, #6
 8009918:	4a09      	ldr	r2, [pc, #36]	; (8009940 <vPortSetupTimerInterrupt+0x44>)
 800991a:	3b01      	subs	r3, #1
 800991c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800991e:	4b04      	ldr	r3, [pc, #16]	; (8009930 <vPortSetupTimerInterrupt+0x34>)
 8009920:	2207      	movs	r2, #7
 8009922:	601a      	str	r2, [r3, #0]
}
 8009924:	bf00      	nop
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	e000e010 	.word	0xe000e010
 8009934:	e000e018 	.word	0xe000e018
 8009938:	20000000 	.word	0x20000000
 800993c:	10624dd3 	.word	0x10624dd3
 8009940:	e000e014 	.word	0xe000e014

08009944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009954 <vPortEnableVFP+0x10>
 8009948:	6801      	ldr	r1, [r0, #0]
 800994a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800994e:	6001      	str	r1, [r0, #0]
 8009950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009952:	bf00      	nop
 8009954:	e000ed88 	.word	0xe000ed88

08009958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800995e:	f3ef 8305 	mrs	r3, IPSR
 8009962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b0f      	cmp	r3, #15
 8009968:	d914      	bls.n	8009994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800996a:	4a17      	ldr	r2, [pc, #92]	; (80099c8 <vPortValidateInterruptPriority+0x70>)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009974:	4b15      	ldr	r3, [pc, #84]	; (80099cc <vPortValidateInterruptPriority+0x74>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	7afa      	ldrb	r2, [r7, #11]
 800997a:	429a      	cmp	r2, r3
 800997c:	d20a      	bcs.n	8009994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	607b      	str	r3, [r7, #4]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009994:	4b0e      	ldr	r3, [pc, #56]	; (80099d0 <vPortValidateInterruptPriority+0x78>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800999c:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <vPortValidateInterruptPriority+0x7c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d90a      	bls.n	80099ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	603b      	str	r3, [r7, #0]
}
 80099b6:	bf00      	nop
 80099b8:	e7fe      	b.n	80099b8 <vPortValidateInterruptPriority+0x60>
	}
 80099ba:	bf00      	nop
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	e000e3f0 	.word	0xe000e3f0
 80099cc:	20000eec 	.word	0x20000eec
 80099d0:	e000ed0c 	.word	0xe000ed0c
 80099d4:	20000ef0 	.word	0x20000ef0

080099d8 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80099e0:	2300      	movs	r3, #0
 80099e2:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 80099e4:	f7fe fd96 	bl	8008514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80099e8:	4b3e      	ldr	r3, [pc, #248]	; (8009ae4 <pvPortMalloc+0x10c>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d104      	bne.n	80099fa <pvPortMalloc+0x22>
		{
			prvHeapInit();
 80099f0:	f000 f8ba 	bl	8009b68 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 80099f4:	4b3b      	ldr	r3, [pc, #236]	; (8009ae4 <pvPortMalloc+0x10c>)
 80099f6:	2201      	movs	r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00e      	beq.n	8009a1e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8009a00:	2308      	movs	r3, #8
 8009a02:	461a      	mov	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4413      	add	r3, r2
 8009a08:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f003 0307 	and.w	r3, r3, #7
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d004      	beq.n	8009a1e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f023 0307 	bic.w	r3, r3, #7
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d057      	beq.n	8009ad4 <pvPortMalloc+0xfc>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f247 5227 	movw	r2, #29991	; 0x7527
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d852      	bhi.n	8009ad4 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8009a2e:	4b2e      	ldr	r3, [pc, #184]	; (8009ae8 <pvPortMalloc+0x110>)
 8009a30:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8009a32:	4b2d      	ldr	r3, [pc, #180]	; (8009ae8 <pvPortMalloc+0x110>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a38:	e004      	b.n	8009a44 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d903      	bls.n	8009a56 <pvPortMalloc+0x7e>
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f1      	bne.n	8009a3a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	4a24      	ldr	r2, [pc, #144]	; (8009aec <pvPortMalloc+0x114>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d03a      	beq.n	8009ad4 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2208      	movs	r2, #8
 8009a64:	4413      	add	r3, r2
 8009a66:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2208      	movs	r2, #8
 8009a7a:	0052      	lsls	r2, r2, #1
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d922      	bls.n	8009ac6 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a80:	69fa      	ldr	r2, [r7, #28]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	60bb      	str	r3, [r7, #8]
 8009aa0:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <pvPortMalloc+0x110>)
 8009aa2:	613b      	str	r3, [r7, #16]
 8009aa4:	e002      	b.n	8009aac <pvPortMalloc+0xd4>
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	613b      	str	r3, [r7, #16]
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d8f6      	bhi.n	8009aa6 <pvPortMalloc+0xce>
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ac6:	4b0a      	ldr	r3, [pc, #40]	; (8009af0 <pvPortMalloc+0x118>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	4a07      	ldr	r2, [pc, #28]	; (8009af0 <pvPortMalloc+0x118>)
 8009ad2:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ad4:	f7fe fd2c 	bl	8008530 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8009ad8:	697b      	ldr	r3, [r7, #20]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3720      	adds	r7, #32
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20008434 	.word	0x20008434
 8009ae8:	20008424 	.word	0x20008424
 8009aec:	2000842c 	.word	0x2000842c
 8009af0:	20000010 	.word	0x20000010

08009af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d027      	beq.n	8009b56 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8009b06:	2308      	movs	r3, #8
 8009b08:	425b      	negs	r3, r3
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8009b14:	f7fe fcfe 	bl	8008514 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	60bb      	str	r3, [r7, #8]
 8009b1e:	4b10      	ldr	r3, [pc, #64]	; (8009b60 <vPortFree+0x6c>)
 8009b20:	617b      	str	r3, [r7, #20]
 8009b22:	e002      	b.n	8009b2a <vPortFree+0x36>
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	617b      	str	r3, [r7, #20]
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d8f6      	bhi.n	8009b24 <vPortFree+0x30>
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <vPortFree+0x70>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	4a05      	ldr	r2, [pc, #20]	; (8009b64 <vPortFree+0x70>)
 8009b50:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8009b52:	f7fe fced 	bl	8008530 <xTaskResumeAll>
	}
}
 8009b56:	bf00      	nop
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20008424 	.word	0x20008424
 8009b64:	20000010 	.word	0x20000010

08009b68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009b6e:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <prvHeapInit+0x48>)
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b76:	4a0f      	ldr	r2, [pc, #60]	; (8009bb4 <prvHeapInit+0x4c>)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b7c:	4b0d      	ldr	r3, [pc, #52]	; (8009bb4 <prvHeapInit+0x4c>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8009b82:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <prvHeapInit+0x50>)
 8009b84:	f247 5228 	movw	r2, #29992	; 0x7528
 8009b88:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8009b8a:	4b0b      	ldr	r3, [pc, #44]	; (8009bb8 <prvHeapInit+0x50>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	f247 5228 	movw	r2, #29992	; 0x7528
 8009b9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	4a06      	ldr	r2, [pc, #24]	; (8009bb8 <prvHeapInit+0x50>)
 8009ba0:	601a      	str	r2, [r3, #0]
}
 8009ba2:	bf00      	nop
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	20000efc 	.word	0x20000efc
 8009bb4:	20008424 	.word	0x20008424
 8009bb8:	2000842c 	.word	0x2000842c

08009bbc <__errno>:
 8009bbc:	4b01      	ldr	r3, [pc, #4]	; (8009bc4 <__errno+0x8>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20000014 	.word	0x20000014

08009bc8 <__libc_init_array>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	4d0d      	ldr	r5, [pc, #52]	; (8009c00 <__libc_init_array+0x38>)
 8009bcc:	4c0d      	ldr	r4, [pc, #52]	; (8009c04 <__libc_init_array+0x3c>)
 8009bce:	1b64      	subs	r4, r4, r5
 8009bd0:	10a4      	asrs	r4, r4, #2
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	42a6      	cmp	r6, r4
 8009bd6:	d109      	bne.n	8009bec <__libc_init_array+0x24>
 8009bd8:	4d0b      	ldr	r5, [pc, #44]	; (8009c08 <__libc_init_array+0x40>)
 8009bda:	4c0c      	ldr	r4, [pc, #48]	; (8009c0c <__libc_init_array+0x44>)
 8009bdc:	f002 feb4 	bl	800c948 <_init>
 8009be0:	1b64      	subs	r4, r4, r5
 8009be2:	10a4      	asrs	r4, r4, #2
 8009be4:	2600      	movs	r6, #0
 8009be6:	42a6      	cmp	r6, r4
 8009be8:	d105      	bne.n	8009bf6 <__libc_init_array+0x2e>
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf0:	4798      	blx	r3
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7ee      	b.n	8009bd4 <__libc_init_array+0xc>
 8009bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfa:	4798      	blx	r3
 8009bfc:	3601      	adds	r6, #1
 8009bfe:	e7f2      	b.n	8009be6 <__libc_init_array+0x1e>
 8009c00:	0800ce6c 	.word	0x0800ce6c
 8009c04:	0800ce6c 	.word	0x0800ce6c
 8009c08:	0800ce6c 	.word	0x0800ce6c
 8009c0c:	0800ce70 	.word	0x0800ce70

08009c10 <memcpy>:
 8009c10:	440a      	add	r2, r1
 8009c12:	4291      	cmp	r1, r2
 8009c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c18:	d100      	bne.n	8009c1c <memcpy+0xc>
 8009c1a:	4770      	bx	lr
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c26:	4291      	cmp	r1, r2
 8009c28:	d1f9      	bne.n	8009c1e <memcpy+0xe>
 8009c2a:	bd10      	pop	{r4, pc}

08009c2c <memset>:
 8009c2c:	4402      	add	r2, r0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d100      	bne.n	8009c36 <memset+0xa>
 8009c34:	4770      	bx	lr
 8009c36:	f803 1b01 	strb.w	r1, [r3], #1
 8009c3a:	e7f9      	b.n	8009c30 <memset+0x4>

08009c3c <__cvt>:
 8009c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	ec55 4b10 	vmov	r4, r5, d0
 8009c44:	2d00      	cmp	r5, #0
 8009c46:	460e      	mov	r6, r1
 8009c48:	4619      	mov	r1, r3
 8009c4a:	462b      	mov	r3, r5
 8009c4c:	bfbb      	ittet	lt
 8009c4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c52:	461d      	movlt	r5, r3
 8009c54:	2300      	movge	r3, #0
 8009c56:	232d      	movlt	r3, #45	; 0x2d
 8009c58:	700b      	strb	r3, [r1, #0]
 8009c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009c60:	4691      	mov	r9, r2
 8009c62:	f023 0820 	bic.w	r8, r3, #32
 8009c66:	bfbc      	itt	lt
 8009c68:	4622      	movlt	r2, r4
 8009c6a:	4614      	movlt	r4, r2
 8009c6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c70:	d005      	beq.n	8009c7e <__cvt+0x42>
 8009c72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c76:	d100      	bne.n	8009c7a <__cvt+0x3e>
 8009c78:	3601      	adds	r6, #1
 8009c7a:	2102      	movs	r1, #2
 8009c7c:	e000      	b.n	8009c80 <__cvt+0x44>
 8009c7e:	2103      	movs	r1, #3
 8009c80:	ab03      	add	r3, sp, #12
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	ab02      	add	r3, sp, #8
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	ec45 4b10 	vmov	d0, r4, r5
 8009c8c:	4653      	mov	r3, sl
 8009c8e:	4632      	mov	r2, r6
 8009c90:	f000 fcea 	bl	800a668 <_dtoa_r>
 8009c94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c98:	4607      	mov	r7, r0
 8009c9a:	d102      	bne.n	8009ca2 <__cvt+0x66>
 8009c9c:	f019 0f01 	tst.w	r9, #1
 8009ca0:	d022      	beq.n	8009ce8 <__cvt+0xac>
 8009ca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ca6:	eb07 0906 	add.w	r9, r7, r6
 8009caa:	d110      	bne.n	8009cce <__cvt+0x92>
 8009cac:	783b      	ldrb	r3, [r7, #0]
 8009cae:	2b30      	cmp	r3, #48	; 0x30
 8009cb0:	d10a      	bne.n	8009cc8 <__cvt+0x8c>
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	4629      	mov	r1, r5
 8009cba:	f7f6 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cbe:	b918      	cbnz	r0, 8009cc8 <__cvt+0x8c>
 8009cc0:	f1c6 0601 	rsb	r6, r6, #1
 8009cc4:	f8ca 6000 	str.w	r6, [sl]
 8009cc8:	f8da 3000 	ldr.w	r3, [sl]
 8009ccc:	4499      	add	r9, r3
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	f7f6 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cda:	b108      	cbz	r0, 8009ce0 <__cvt+0xa4>
 8009cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ce0:	2230      	movs	r2, #48	; 0x30
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	454b      	cmp	r3, r9
 8009ce6:	d307      	bcc.n	8009cf8 <__cvt+0xbc>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cec:	1bdb      	subs	r3, r3, r7
 8009cee:	4638      	mov	r0, r7
 8009cf0:	6013      	str	r3, [r2, #0]
 8009cf2:	b004      	add	sp, #16
 8009cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf8:	1c59      	adds	r1, r3, #1
 8009cfa:	9103      	str	r1, [sp, #12]
 8009cfc:	701a      	strb	r2, [r3, #0]
 8009cfe:	e7f0      	b.n	8009ce2 <__cvt+0xa6>

08009d00 <__exponent>:
 8009d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d02:	4603      	mov	r3, r0
 8009d04:	2900      	cmp	r1, #0
 8009d06:	bfb8      	it	lt
 8009d08:	4249      	neglt	r1, r1
 8009d0a:	f803 2b02 	strb.w	r2, [r3], #2
 8009d0e:	bfb4      	ite	lt
 8009d10:	222d      	movlt	r2, #45	; 0x2d
 8009d12:	222b      	movge	r2, #43	; 0x2b
 8009d14:	2909      	cmp	r1, #9
 8009d16:	7042      	strb	r2, [r0, #1]
 8009d18:	dd2a      	ble.n	8009d70 <__exponent+0x70>
 8009d1a:	f10d 0407 	add.w	r4, sp, #7
 8009d1e:	46a4      	mov	ip, r4
 8009d20:	270a      	movs	r7, #10
 8009d22:	46a6      	mov	lr, r4
 8009d24:	460a      	mov	r2, r1
 8009d26:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d2a:	fb07 1516 	mls	r5, r7, r6, r1
 8009d2e:	3530      	adds	r5, #48	; 0x30
 8009d30:	2a63      	cmp	r2, #99	; 0x63
 8009d32:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	dcf1      	bgt.n	8009d22 <__exponent+0x22>
 8009d3e:	3130      	adds	r1, #48	; 0x30
 8009d40:	f1ae 0502 	sub.w	r5, lr, #2
 8009d44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d48:	1c44      	adds	r4, r0, #1
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	4561      	cmp	r1, ip
 8009d4e:	d30a      	bcc.n	8009d66 <__exponent+0x66>
 8009d50:	f10d 0209 	add.w	r2, sp, #9
 8009d54:	eba2 020e 	sub.w	r2, r2, lr
 8009d58:	4565      	cmp	r5, ip
 8009d5a:	bf88      	it	hi
 8009d5c:	2200      	movhi	r2, #0
 8009d5e:	4413      	add	r3, r2
 8009d60:	1a18      	subs	r0, r3, r0
 8009d62:	b003      	add	sp, #12
 8009d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d6e:	e7ed      	b.n	8009d4c <__exponent+0x4c>
 8009d70:	2330      	movs	r3, #48	; 0x30
 8009d72:	3130      	adds	r1, #48	; 0x30
 8009d74:	7083      	strb	r3, [r0, #2]
 8009d76:	70c1      	strb	r1, [r0, #3]
 8009d78:	1d03      	adds	r3, r0, #4
 8009d7a:	e7f1      	b.n	8009d60 <__exponent+0x60>

08009d7c <_printf_float>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	ed2d 8b02 	vpush	{d8}
 8009d84:	b08d      	sub	sp, #52	; 0x34
 8009d86:	460c      	mov	r4, r1
 8009d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d8c:	4616      	mov	r6, r2
 8009d8e:	461f      	mov	r7, r3
 8009d90:	4605      	mov	r5, r0
 8009d92:	f001 fa55 	bl	800b240 <_localeconv_r>
 8009d96:	f8d0 a000 	ldr.w	sl, [r0]
 8009d9a:	4650      	mov	r0, sl
 8009d9c:	f7f6 fa18 	bl	80001d0 <strlen>
 8009da0:	2300      	movs	r3, #0
 8009da2:	930a      	str	r3, [sp, #40]	; 0x28
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	9305      	str	r3, [sp, #20]
 8009da8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009db0:	3307      	adds	r3, #7
 8009db2:	f023 0307 	bic.w	r3, r3, #7
 8009db6:	f103 0208 	add.w	r2, r3, #8
 8009dba:	f8c8 2000 	str.w	r2, [r8]
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009dc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dce:	9307      	str	r3, [sp, #28]
 8009dd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009dd4:	ee08 0a10 	vmov	s16, r0
 8009dd8:	4b9f      	ldr	r3, [pc, #636]	; (800a058 <_printf_float+0x2dc>)
 8009dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	f7f6 fea3 	bl	8000b2c <__aeabi_dcmpun>
 8009de6:	bb88      	cbnz	r0, 8009e4c <_printf_float+0xd0>
 8009de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dec:	4b9a      	ldr	r3, [pc, #616]	; (800a058 <_printf_float+0x2dc>)
 8009dee:	f04f 32ff 	mov.w	r2, #4294967295
 8009df2:	f7f6 fe7d 	bl	8000af0 <__aeabi_dcmple>
 8009df6:	bb48      	cbnz	r0, 8009e4c <_printf_float+0xd0>
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	4649      	mov	r1, r9
 8009e00:	f7f6 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8009e04:	b110      	cbz	r0, 8009e0c <_printf_float+0x90>
 8009e06:	232d      	movs	r3, #45	; 0x2d
 8009e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e0c:	4b93      	ldr	r3, [pc, #588]	; (800a05c <_printf_float+0x2e0>)
 8009e0e:	4894      	ldr	r0, [pc, #592]	; (800a060 <_printf_float+0x2e4>)
 8009e10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009e14:	bf94      	ite	ls
 8009e16:	4698      	movls	r8, r3
 8009e18:	4680      	movhi	r8, r0
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	6123      	str	r3, [r4, #16]
 8009e1e:	9b05      	ldr	r3, [sp, #20]
 8009e20:	f023 0204 	bic.w	r2, r3, #4
 8009e24:	6022      	str	r2, [r4, #0]
 8009e26:	f04f 0900 	mov.w	r9, #0
 8009e2a:	9700      	str	r7, [sp, #0]
 8009e2c:	4633      	mov	r3, r6
 8009e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e30:	4621      	mov	r1, r4
 8009e32:	4628      	mov	r0, r5
 8009e34:	f000 f9d8 	bl	800a1e8 <_printf_common>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	f040 8090 	bne.w	8009f5e <_printf_float+0x1e2>
 8009e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e42:	b00d      	add	sp, #52	; 0x34
 8009e44:	ecbd 8b02 	vpop	{d8}
 8009e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4c:	4642      	mov	r2, r8
 8009e4e:	464b      	mov	r3, r9
 8009e50:	4640      	mov	r0, r8
 8009e52:	4649      	mov	r1, r9
 8009e54:	f7f6 fe6a 	bl	8000b2c <__aeabi_dcmpun>
 8009e58:	b140      	cbz	r0, 8009e6c <_printf_float+0xf0>
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	bfbc      	itt	lt
 8009e60:	232d      	movlt	r3, #45	; 0x2d
 8009e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e66:	487f      	ldr	r0, [pc, #508]	; (800a064 <_printf_float+0x2e8>)
 8009e68:	4b7f      	ldr	r3, [pc, #508]	; (800a068 <_printf_float+0x2ec>)
 8009e6a:	e7d1      	b.n	8009e10 <_printf_float+0x94>
 8009e6c:	6863      	ldr	r3, [r4, #4]
 8009e6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009e72:	9206      	str	r2, [sp, #24]
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	d13f      	bne.n	8009ef8 <_printf_float+0x17c>
 8009e78:	2306      	movs	r3, #6
 8009e7a:	6063      	str	r3, [r4, #4]
 8009e7c:	9b05      	ldr	r3, [sp, #20]
 8009e7e:	6861      	ldr	r1, [r4, #4]
 8009e80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e84:	2300      	movs	r3, #0
 8009e86:	9303      	str	r3, [sp, #12]
 8009e88:	ab0a      	add	r3, sp, #40	; 0x28
 8009e8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e8e:	ab09      	add	r3, sp, #36	; 0x24
 8009e90:	ec49 8b10 	vmov	d0, r8, r9
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	6022      	str	r2, [r4, #0]
 8009e98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f7ff fecd 	bl	8009c3c <__cvt>
 8009ea2:	9b06      	ldr	r3, [sp, #24]
 8009ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ea6:	2b47      	cmp	r3, #71	; 0x47
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	d108      	bne.n	8009ebe <_printf_float+0x142>
 8009eac:	1cc8      	adds	r0, r1, #3
 8009eae:	db02      	blt.n	8009eb6 <_printf_float+0x13a>
 8009eb0:	6863      	ldr	r3, [r4, #4]
 8009eb2:	4299      	cmp	r1, r3
 8009eb4:	dd41      	ble.n	8009f3a <_printf_float+0x1be>
 8009eb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009eba:	fa5f fb8b 	uxtb.w	fp, fp
 8009ebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ec2:	d820      	bhi.n	8009f06 <_printf_float+0x18a>
 8009ec4:	3901      	subs	r1, #1
 8009ec6:	465a      	mov	r2, fp
 8009ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8009ece:	f7ff ff17 	bl	8009d00 <__exponent>
 8009ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ed4:	1813      	adds	r3, r2, r0
 8009ed6:	2a01      	cmp	r2, #1
 8009ed8:	4681      	mov	r9, r0
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	dc02      	bgt.n	8009ee4 <_printf_float+0x168>
 8009ede:	6822      	ldr	r2, [r4, #0]
 8009ee0:	07d2      	lsls	r2, r2, #31
 8009ee2:	d501      	bpl.n	8009ee8 <_printf_float+0x16c>
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	6123      	str	r3, [r4, #16]
 8009ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d09c      	beq.n	8009e2a <_printf_float+0xae>
 8009ef0:	232d      	movs	r3, #45	; 0x2d
 8009ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ef6:	e798      	b.n	8009e2a <_printf_float+0xae>
 8009ef8:	9a06      	ldr	r2, [sp, #24]
 8009efa:	2a47      	cmp	r2, #71	; 0x47
 8009efc:	d1be      	bne.n	8009e7c <_printf_float+0x100>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1bc      	bne.n	8009e7c <_printf_float+0x100>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e7b9      	b.n	8009e7a <_printf_float+0xfe>
 8009f06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009f0a:	d118      	bne.n	8009f3e <_printf_float+0x1c2>
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	6863      	ldr	r3, [r4, #4]
 8009f10:	dd0b      	ble.n	8009f2a <_printf_float+0x1ae>
 8009f12:	6121      	str	r1, [r4, #16]
 8009f14:	b913      	cbnz	r3, 8009f1c <_printf_float+0x1a0>
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	07d0      	lsls	r0, r2, #31
 8009f1a:	d502      	bpl.n	8009f22 <_printf_float+0x1a6>
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	440b      	add	r3, r1
 8009f20:	6123      	str	r3, [r4, #16]
 8009f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f24:	f04f 0900 	mov.w	r9, #0
 8009f28:	e7de      	b.n	8009ee8 <_printf_float+0x16c>
 8009f2a:	b913      	cbnz	r3, 8009f32 <_printf_float+0x1b6>
 8009f2c:	6822      	ldr	r2, [r4, #0]
 8009f2e:	07d2      	lsls	r2, r2, #31
 8009f30:	d501      	bpl.n	8009f36 <_printf_float+0x1ba>
 8009f32:	3302      	adds	r3, #2
 8009f34:	e7f4      	b.n	8009f20 <_printf_float+0x1a4>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e7f2      	b.n	8009f20 <_printf_float+0x1a4>
 8009f3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f40:	4299      	cmp	r1, r3
 8009f42:	db05      	blt.n	8009f50 <_printf_float+0x1d4>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	6121      	str	r1, [r4, #16]
 8009f48:	07d8      	lsls	r0, r3, #31
 8009f4a:	d5ea      	bpl.n	8009f22 <_printf_float+0x1a6>
 8009f4c:	1c4b      	adds	r3, r1, #1
 8009f4e:	e7e7      	b.n	8009f20 <_printf_float+0x1a4>
 8009f50:	2900      	cmp	r1, #0
 8009f52:	bfd4      	ite	le
 8009f54:	f1c1 0202 	rsble	r2, r1, #2
 8009f58:	2201      	movgt	r2, #1
 8009f5a:	4413      	add	r3, r2
 8009f5c:	e7e0      	b.n	8009f20 <_printf_float+0x1a4>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	055a      	lsls	r2, r3, #21
 8009f62:	d407      	bmi.n	8009f74 <_printf_float+0x1f8>
 8009f64:	6923      	ldr	r3, [r4, #16]
 8009f66:	4642      	mov	r2, r8
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	47b8      	blx	r7
 8009f6e:	3001      	adds	r0, #1
 8009f70:	d12c      	bne.n	8009fcc <_printf_float+0x250>
 8009f72:	e764      	b.n	8009e3e <_printf_float+0xc2>
 8009f74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f78:	f240 80e0 	bls.w	800a13c <_printf_float+0x3c0>
 8009f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f80:	2200      	movs	r2, #0
 8009f82:	2300      	movs	r3, #0
 8009f84:	f7f6 fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d034      	beq.n	8009ff6 <_printf_float+0x27a>
 8009f8c:	4a37      	ldr	r2, [pc, #220]	; (800a06c <_printf_float+0x2f0>)
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4631      	mov	r1, r6
 8009f92:	4628      	mov	r0, r5
 8009f94:	47b8      	blx	r7
 8009f96:	3001      	adds	r0, #1
 8009f98:	f43f af51 	beq.w	8009e3e <_printf_float+0xc2>
 8009f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	db02      	blt.n	8009faa <_printf_float+0x22e>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	07d8      	lsls	r0, r3, #31
 8009fa8:	d510      	bpl.n	8009fcc <_printf_float+0x250>
 8009faa:	ee18 3a10 	vmov	r3, s16
 8009fae:	4652      	mov	r2, sl
 8009fb0:	4631      	mov	r1, r6
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	47b8      	blx	r7
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	f43f af41 	beq.w	8009e3e <_printf_float+0xc2>
 8009fbc:	f04f 0800 	mov.w	r8, #0
 8009fc0:	f104 091a 	add.w	r9, r4, #26
 8009fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	4543      	cmp	r3, r8
 8009fca:	dc09      	bgt.n	8009fe0 <_printf_float+0x264>
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	079b      	lsls	r3, r3, #30
 8009fd0:	f100 8105 	bmi.w	800a1de <_printf_float+0x462>
 8009fd4:	68e0      	ldr	r0, [r4, #12]
 8009fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd8:	4298      	cmp	r0, r3
 8009fda:	bfb8      	it	lt
 8009fdc:	4618      	movlt	r0, r3
 8009fde:	e730      	b.n	8009e42 <_printf_float+0xc6>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	464a      	mov	r2, r9
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	47b8      	blx	r7
 8009fea:	3001      	adds	r0, #1
 8009fec:	f43f af27 	beq.w	8009e3e <_printf_float+0xc2>
 8009ff0:	f108 0801 	add.w	r8, r8, #1
 8009ff4:	e7e6      	b.n	8009fc4 <_printf_float+0x248>
 8009ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dc39      	bgt.n	800a070 <_printf_float+0x2f4>
 8009ffc:	4a1b      	ldr	r2, [pc, #108]	; (800a06c <_printf_float+0x2f0>)
 8009ffe:	2301      	movs	r3, #1
 800a000:	4631      	mov	r1, r6
 800a002:	4628      	mov	r0, r5
 800a004:	47b8      	blx	r7
 800a006:	3001      	adds	r0, #1
 800a008:	f43f af19 	beq.w	8009e3e <_printf_float+0xc2>
 800a00c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a010:	4313      	orrs	r3, r2
 800a012:	d102      	bne.n	800a01a <_printf_float+0x29e>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	07d9      	lsls	r1, r3, #31
 800a018:	d5d8      	bpl.n	8009fcc <_printf_float+0x250>
 800a01a:	ee18 3a10 	vmov	r3, s16
 800a01e:	4652      	mov	r2, sl
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	f43f af09 	beq.w	8009e3e <_printf_float+0xc2>
 800a02c:	f04f 0900 	mov.w	r9, #0
 800a030:	f104 0a1a 	add.w	sl, r4, #26
 800a034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a036:	425b      	negs	r3, r3
 800a038:	454b      	cmp	r3, r9
 800a03a:	dc01      	bgt.n	800a040 <_printf_float+0x2c4>
 800a03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a03e:	e792      	b.n	8009f66 <_printf_float+0x1ea>
 800a040:	2301      	movs	r3, #1
 800a042:	4652      	mov	r2, sl
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	f43f aef7 	beq.w	8009e3e <_printf_float+0xc2>
 800a050:	f109 0901 	add.w	r9, r9, #1
 800a054:	e7ee      	b.n	800a034 <_printf_float+0x2b8>
 800a056:	bf00      	nop
 800a058:	7fefffff 	.word	0x7fefffff
 800a05c:	0800ca88 	.word	0x0800ca88
 800a060:	0800ca8c 	.word	0x0800ca8c
 800a064:	0800ca94 	.word	0x0800ca94
 800a068:	0800ca90 	.word	0x0800ca90
 800a06c:	0800ca98 	.word	0x0800ca98
 800a070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a074:	429a      	cmp	r2, r3
 800a076:	bfa8      	it	ge
 800a078:	461a      	movge	r2, r3
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	4691      	mov	r9, r2
 800a07e:	dc37      	bgt.n	800a0f0 <_printf_float+0x374>
 800a080:	f04f 0b00 	mov.w	fp, #0
 800a084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a088:	f104 021a 	add.w	r2, r4, #26
 800a08c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a08e:	9305      	str	r3, [sp, #20]
 800a090:	eba3 0309 	sub.w	r3, r3, r9
 800a094:	455b      	cmp	r3, fp
 800a096:	dc33      	bgt.n	800a100 <_printf_float+0x384>
 800a098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a09c:	429a      	cmp	r2, r3
 800a09e:	db3b      	blt.n	800a118 <_printf_float+0x39c>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	07da      	lsls	r2, r3, #31
 800a0a4:	d438      	bmi.n	800a118 <_printf_float+0x39c>
 800a0a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0a8:	9b05      	ldr	r3, [sp, #20]
 800a0aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	eba2 0901 	sub.w	r9, r2, r1
 800a0b2:	4599      	cmp	r9, r3
 800a0b4:	bfa8      	it	ge
 800a0b6:	4699      	movge	r9, r3
 800a0b8:	f1b9 0f00 	cmp.w	r9, #0
 800a0bc:	dc35      	bgt.n	800a12a <_printf_float+0x3ae>
 800a0be:	f04f 0800 	mov.w	r8, #0
 800a0c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0c6:	f104 0a1a 	add.w	sl, r4, #26
 800a0ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0ce:	1a9b      	subs	r3, r3, r2
 800a0d0:	eba3 0309 	sub.w	r3, r3, r9
 800a0d4:	4543      	cmp	r3, r8
 800a0d6:	f77f af79 	ble.w	8009fcc <_printf_float+0x250>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4652      	mov	r2, sl
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b8      	blx	r7
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	f43f aeaa 	beq.w	8009e3e <_printf_float+0xc2>
 800a0ea:	f108 0801 	add.w	r8, r8, #1
 800a0ee:	e7ec      	b.n	800a0ca <_printf_float+0x34e>
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4642      	mov	r2, r8
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	47b8      	blx	r7
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	d1c0      	bne.n	800a080 <_printf_float+0x304>
 800a0fe:	e69e      	b.n	8009e3e <_printf_float+0xc2>
 800a100:	2301      	movs	r3, #1
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	9205      	str	r2, [sp, #20]
 800a108:	47b8      	blx	r7
 800a10a:	3001      	adds	r0, #1
 800a10c:	f43f ae97 	beq.w	8009e3e <_printf_float+0xc2>
 800a110:	9a05      	ldr	r2, [sp, #20]
 800a112:	f10b 0b01 	add.w	fp, fp, #1
 800a116:	e7b9      	b.n	800a08c <_printf_float+0x310>
 800a118:	ee18 3a10 	vmov	r3, s16
 800a11c:	4652      	mov	r2, sl
 800a11e:	4631      	mov	r1, r6
 800a120:	4628      	mov	r0, r5
 800a122:	47b8      	blx	r7
 800a124:	3001      	adds	r0, #1
 800a126:	d1be      	bne.n	800a0a6 <_printf_float+0x32a>
 800a128:	e689      	b.n	8009e3e <_printf_float+0xc2>
 800a12a:	9a05      	ldr	r2, [sp, #20]
 800a12c:	464b      	mov	r3, r9
 800a12e:	4442      	add	r2, r8
 800a130:	4631      	mov	r1, r6
 800a132:	4628      	mov	r0, r5
 800a134:	47b8      	blx	r7
 800a136:	3001      	adds	r0, #1
 800a138:	d1c1      	bne.n	800a0be <_printf_float+0x342>
 800a13a:	e680      	b.n	8009e3e <_printf_float+0xc2>
 800a13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a13e:	2a01      	cmp	r2, #1
 800a140:	dc01      	bgt.n	800a146 <_printf_float+0x3ca>
 800a142:	07db      	lsls	r3, r3, #31
 800a144:	d538      	bpl.n	800a1b8 <_printf_float+0x43c>
 800a146:	2301      	movs	r3, #1
 800a148:	4642      	mov	r2, r8
 800a14a:	4631      	mov	r1, r6
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b8      	blx	r7
 800a150:	3001      	adds	r0, #1
 800a152:	f43f ae74 	beq.w	8009e3e <_printf_float+0xc2>
 800a156:	ee18 3a10 	vmov	r3, s16
 800a15a:	4652      	mov	r2, sl
 800a15c:	4631      	mov	r1, r6
 800a15e:	4628      	mov	r0, r5
 800a160:	47b8      	blx	r7
 800a162:	3001      	adds	r0, #1
 800a164:	f43f ae6b 	beq.w	8009e3e <_printf_float+0xc2>
 800a168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a16c:	2200      	movs	r2, #0
 800a16e:	2300      	movs	r3, #0
 800a170:	f7f6 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a174:	b9d8      	cbnz	r0, 800a1ae <_printf_float+0x432>
 800a176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a178:	f108 0201 	add.w	r2, r8, #1
 800a17c:	3b01      	subs	r3, #1
 800a17e:	4631      	mov	r1, r6
 800a180:	4628      	mov	r0, r5
 800a182:	47b8      	blx	r7
 800a184:	3001      	adds	r0, #1
 800a186:	d10e      	bne.n	800a1a6 <_printf_float+0x42a>
 800a188:	e659      	b.n	8009e3e <_printf_float+0xc2>
 800a18a:	2301      	movs	r3, #1
 800a18c:	4652      	mov	r2, sl
 800a18e:	4631      	mov	r1, r6
 800a190:	4628      	mov	r0, r5
 800a192:	47b8      	blx	r7
 800a194:	3001      	adds	r0, #1
 800a196:	f43f ae52 	beq.w	8009e3e <_printf_float+0xc2>
 800a19a:	f108 0801 	add.w	r8, r8, #1
 800a19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	4543      	cmp	r3, r8
 800a1a4:	dcf1      	bgt.n	800a18a <_printf_float+0x40e>
 800a1a6:	464b      	mov	r3, r9
 800a1a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a1ac:	e6dc      	b.n	8009f68 <_printf_float+0x1ec>
 800a1ae:	f04f 0800 	mov.w	r8, #0
 800a1b2:	f104 0a1a 	add.w	sl, r4, #26
 800a1b6:	e7f2      	b.n	800a19e <_printf_float+0x422>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	4642      	mov	r2, r8
 800a1bc:	e7df      	b.n	800a17e <_printf_float+0x402>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	464a      	mov	r2, r9
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	f43f ae38 	beq.w	8009e3e <_printf_float+0xc2>
 800a1ce:	f108 0801 	add.w	r8, r8, #1
 800a1d2:	68e3      	ldr	r3, [r4, #12]
 800a1d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1d6:	1a5b      	subs	r3, r3, r1
 800a1d8:	4543      	cmp	r3, r8
 800a1da:	dcf0      	bgt.n	800a1be <_printf_float+0x442>
 800a1dc:	e6fa      	b.n	8009fd4 <_printf_float+0x258>
 800a1de:	f04f 0800 	mov.w	r8, #0
 800a1e2:	f104 0919 	add.w	r9, r4, #25
 800a1e6:	e7f4      	b.n	800a1d2 <_printf_float+0x456>

0800a1e8 <_printf_common>:
 800a1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ec:	4616      	mov	r6, r2
 800a1ee:	4699      	mov	r9, r3
 800a1f0:	688a      	ldr	r2, [r1, #8]
 800a1f2:	690b      	ldr	r3, [r1, #16]
 800a1f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	bfb8      	it	lt
 800a1fc:	4613      	movlt	r3, r2
 800a1fe:	6033      	str	r3, [r6, #0]
 800a200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a204:	4607      	mov	r7, r0
 800a206:	460c      	mov	r4, r1
 800a208:	b10a      	cbz	r2, 800a20e <_printf_common+0x26>
 800a20a:	3301      	adds	r3, #1
 800a20c:	6033      	str	r3, [r6, #0]
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	0699      	lsls	r1, r3, #26
 800a212:	bf42      	ittt	mi
 800a214:	6833      	ldrmi	r3, [r6, #0]
 800a216:	3302      	addmi	r3, #2
 800a218:	6033      	strmi	r3, [r6, #0]
 800a21a:	6825      	ldr	r5, [r4, #0]
 800a21c:	f015 0506 	ands.w	r5, r5, #6
 800a220:	d106      	bne.n	800a230 <_printf_common+0x48>
 800a222:	f104 0a19 	add.w	sl, r4, #25
 800a226:	68e3      	ldr	r3, [r4, #12]
 800a228:	6832      	ldr	r2, [r6, #0]
 800a22a:	1a9b      	subs	r3, r3, r2
 800a22c:	42ab      	cmp	r3, r5
 800a22e:	dc26      	bgt.n	800a27e <_printf_common+0x96>
 800a230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a234:	1e13      	subs	r3, r2, #0
 800a236:	6822      	ldr	r2, [r4, #0]
 800a238:	bf18      	it	ne
 800a23a:	2301      	movne	r3, #1
 800a23c:	0692      	lsls	r2, r2, #26
 800a23e:	d42b      	bmi.n	800a298 <_printf_common+0xb0>
 800a240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a244:	4649      	mov	r1, r9
 800a246:	4638      	mov	r0, r7
 800a248:	47c0      	blx	r8
 800a24a:	3001      	adds	r0, #1
 800a24c:	d01e      	beq.n	800a28c <_printf_common+0xa4>
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	68e5      	ldr	r5, [r4, #12]
 800a252:	6832      	ldr	r2, [r6, #0]
 800a254:	f003 0306 	and.w	r3, r3, #6
 800a258:	2b04      	cmp	r3, #4
 800a25a:	bf08      	it	eq
 800a25c:	1aad      	subeq	r5, r5, r2
 800a25e:	68a3      	ldr	r3, [r4, #8]
 800a260:	6922      	ldr	r2, [r4, #16]
 800a262:	bf0c      	ite	eq
 800a264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a268:	2500      	movne	r5, #0
 800a26a:	4293      	cmp	r3, r2
 800a26c:	bfc4      	itt	gt
 800a26e:	1a9b      	subgt	r3, r3, r2
 800a270:	18ed      	addgt	r5, r5, r3
 800a272:	2600      	movs	r6, #0
 800a274:	341a      	adds	r4, #26
 800a276:	42b5      	cmp	r5, r6
 800a278:	d11a      	bne.n	800a2b0 <_printf_common+0xc8>
 800a27a:	2000      	movs	r0, #0
 800a27c:	e008      	b.n	800a290 <_printf_common+0xa8>
 800a27e:	2301      	movs	r3, #1
 800a280:	4652      	mov	r2, sl
 800a282:	4649      	mov	r1, r9
 800a284:	4638      	mov	r0, r7
 800a286:	47c0      	blx	r8
 800a288:	3001      	adds	r0, #1
 800a28a:	d103      	bne.n	800a294 <_printf_common+0xac>
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a294:	3501      	adds	r5, #1
 800a296:	e7c6      	b.n	800a226 <_printf_common+0x3e>
 800a298:	18e1      	adds	r1, r4, r3
 800a29a:	1c5a      	adds	r2, r3, #1
 800a29c:	2030      	movs	r0, #48	; 0x30
 800a29e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2a2:	4422      	add	r2, r4
 800a2a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	e7c7      	b.n	800a240 <_printf_common+0x58>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	47c0      	blx	r8
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	d0e6      	beq.n	800a28c <_printf_common+0xa4>
 800a2be:	3601      	adds	r6, #1
 800a2c0:	e7d9      	b.n	800a276 <_printf_common+0x8e>
	...

0800a2c4 <_printf_i>:
 800a2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	4691      	mov	r9, r2
 800a2cc:	7e27      	ldrb	r7, [r4, #24]
 800a2ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2d0:	2f78      	cmp	r7, #120	; 0x78
 800a2d2:	4680      	mov	r8, r0
 800a2d4:	469a      	mov	sl, r3
 800a2d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2da:	d807      	bhi.n	800a2ec <_printf_i+0x28>
 800a2dc:	2f62      	cmp	r7, #98	; 0x62
 800a2de:	d80a      	bhi.n	800a2f6 <_printf_i+0x32>
 800a2e0:	2f00      	cmp	r7, #0
 800a2e2:	f000 80d8 	beq.w	800a496 <_printf_i+0x1d2>
 800a2e6:	2f58      	cmp	r7, #88	; 0x58
 800a2e8:	f000 80a3 	beq.w	800a432 <_printf_i+0x16e>
 800a2ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a2f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2f4:	e03a      	b.n	800a36c <_printf_i+0xa8>
 800a2f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2fa:	2b15      	cmp	r3, #21
 800a2fc:	d8f6      	bhi.n	800a2ec <_printf_i+0x28>
 800a2fe:	a001      	add	r0, pc, #4	; (adr r0, 800a304 <_printf_i+0x40>)
 800a300:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a304:	0800a35d 	.word	0x0800a35d
 800a308:	0800a371 	.word	0x0800a371
 800a30c:	0800a2ed 	.word	0x0800a2ed
 800a310:	0800a2ed 	.word	0x0800a2ed
 800a314:	0800a2ed 	.word	0x0800a2ed
 800a318:	0800a2ed 	.word	0x0800a2ed
 800a31c:	0800a371 	.word	0x0800a371
 800a320:	0800a2ed 	.word	0x0800a2ed
 800a324:	0800a2ed 	.word	0x0800a2ed
 800a328:	0800a2ed 	.word	0x0800a2ed
 800a32c:	0800a2ed 	.word	0x0800a2ed
 800a330:	0800a47d 	.word	0x0800a47d
 800a334:	0800a3a1 	.word	0x0800a3a1
 800a338:	0800a45f 	.word	0x0800a45f
 800a33c:	0800a2ed 	.word	0x0800a2ed
 800a340:	0800a2ed 	.word	0x0800a2ed
 800a344:	0800a49f 	.word	0x0800a49f
 800a348:	0800a2ed 	.word	0x0800a2ed
 800a34c:	0800a3a1 	.word	0x0800a3a1
 800a350:	0800a2ed 	.word	0x0800a2ed
 800a354:	0800a2ed 	.word	0x0800a2ed
 800a358:	0800a467 	.word	0x0800a467
 800a35c:	680b      	ldr	r3, [r1, #0]
 800a35e:	1d1a      	adds	r2, r3, #4
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	600a      	str	r2, [r1, #0]
 800a364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a36c:	2301      	movs	r3, #1
 800a36e:	e0a3      	b.n	800a4b8 <_printf_i+0x1f4>
 800a370:	6825      	ldr	r5, [r4, #0]
 800a372:	6808      	ldr	r0, [r1, #0]
 800a374:	062e      	lsls	r6, r5, #24
 800a376:	f100 0304 	add.w	r3, r0, #4
 800a37a:	d50a      	bpl.n	800a392 <_printf_i+0xce>
 800a37c:	6805      	ldr	r5, [r0, #0]
 800a37e:	600b      	str	r3, [r1, #0]
 800a380:	2d00      	cmp	r5, #0
 800a382:	da03      	bge.n	800a38c <_printf_i+0xc8>
 800a384:	232d      	movs	r3, #45	; 0x2d
 800a386:	426d      	negs	r5, r5
 800a388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a38c:	485e      	ldr	r0, [pc, #376]	; (800a508 <_printf_i+0x244>)
 800a38e:	230a      	movs	r3, #10
 800a390:	e019      	b.n	800a3c6 <_printf_i+0x102>
 800a392:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a396:	6805      	ldr	r5, [r0, #0]
 800a398:	600b      	str	r3, [r1, #0]
 800a39a:	bf18      	it	ne
 800a39c:	b22d      	sxthne	r5, r5
 800a39e:	e7ef      	b.n	800a380 <_printf_i+0xbc>
 800a3a0:	680b      	ldr	r3, [r1, #0]
 800a3a2:	6825      	ldr	r5, [r4, #0]
 800a3a4:	1d18      	adds	r0, r3, #4
 800a3a6:	6008      	str	r0, [r1, #0]
 800a3a8:	0628      	lsls	r0, r5, #24
 800a3aa:	d501      	bpl.n	800a3b0 <_printf_i+0xec>
 800a3ac:	681d      	ldr	r5, [r3, #0]
 800a3ae:	e002      	b.n	800a3b6 <_printf_i+0xf2>
 800a3b0:	0669      	lsls	r1, r5, #25
 800a3b2:	d5fb      	bpl.n	800a3ac <_printf_i+0xe8>
 800a3b4:	881d      	ldrh	r5, [r3, #0]
 800a3b6:	4854      	ldr	r0, [pc, #336]	; (800a508 <_printf_i+0x244>)
 800a3b8:	2f6f      	cmp	r7, #111	; 0x6f
 800a3ba:	bf0c      	ite	eq
 800a3bc:	2308      	moveq	r3, #8
 800a3be:	230a      	movne	r3, #10
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3c6:	6866      	ldr	r6, [r4, #4]
 800a3c8:	60a6      	str	r6, [r4, #8]
 800a3ca:	2e00      	cmp	r6, #0
 800a3cc:	bfa2      	ittt	ge
 800a3ce:	6821      	ldrge	r1, [r4, #0]
 800a3d0:	f021 0104 	bicge.w	r1, r1, #4
 800a3d4:	6021      	strge	r1, [r4, #0]
 800a3d6:	b90d      	cbnz	r5, 800a3dc <_printf_i+0x118>
 800a3d8:	2e00      	cmp	r6, #0
 800a3da:	d04d      	beq.n	800a478 <_printf_i+0x1b4>
 800a3dc:	4616      	mov	r6, r2
 800a3de:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3e2:	fb03 5711 	mls	r7, r3, r1, r5
 800a3e6:	5dc7      	ldrb	r7, [r0, r7]
 800a3e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3ec:	462f      	mov	r7, r5
 800a3ee:	42bb      	cmp	r3, r7
 800a3f0:	460d      	mov	r5, r1
 800a3f2:	d9f4      	bls.n	800a3de <_printf_i+0x11a>
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	d10b      	bne.n	800a410 <_printf_i+0x14c>
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	07df      	lsls	r7, r3, #31
 800a3fc:	d508      	bpl.n	800a410 <_printf_i+0x14c>
 800a3fe:	6923      	ldr	r3, [r4, #16]
 800a400:	6861      	ldr	r1, [r4, #4]
 800a402:	4299      	cmp	r1, r3
 800a404:	bfde      	ittt	le
 800a406:	2330      	movle	r3, #48	; 0x30
 800a408:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a40c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a410:	1b92      	subs	r2, r2, r6
 800a412:	6122      	str	r2, [r4, #16]
 800a414:	f8cd a000 	str.w	sl, [sp]
 800a418:	464b      	mov	r3, r9
 800a41a:	aa03      	add	r2, sp, #12
 800a41c:	4621      	mov	r1, r4
 800a41e:	4640      	mov	r0, r8
 800a420:	f7ff fee2 	bl	800a1e8 <_printf_common>
 800a424:	3001      	adds	r0, #1
 800a426:	d14c      	bne.n	800a4c2 <_printf_i+0x1fe>
 800a428:	f04f 30ff 	mov.w	r0, #4294967295
 800a42c:	b004      	add	sp, #16
 800a42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a432:	4835      	ldr	r0, [pc, #212]	; (800a508 <_printf_i+0x244>)
 800a434:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	680e      	ldr	r6, [r1, #0]
 800a43c:	061f      	lsls	r7, r3, #24
 800a43e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a442:	600e      	str	r6, [r1, #0]
 800a444:	d514      	bpl.n	800a470 <_printf_i+0x1ac>
 800a446:	07d9      	lsls	r1, r3, #31
 800a448:	bf44      	itt	mi
 800a44a:	f043 0320 	orrmi.w	r3, r3, #32
 800a44e:	6023      	strmi	r3, [r4, #0]
 800a450:	b91d      	cbnz	r5, 800a45a <_printf_i+0x196>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	f023 0320 	bic.w	r3, r3, #32
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	2310      	movs	r3, #16
 800a45c:	e7b0      	b.n	800a3c0 <_printf_i+0xfc>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	f043 0320 	orr.w	r3, r3, #32
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	2378      	movs	r3, #120	; 0x78
 800a468:	4828      	ldr	r0, [pc, #160]	; (800a50c <_printf_i+0x248>)
 800a46a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a46e:	e7e3      	b.n	800a438 <_printf_i+0x174>
 800a470:	065e      	lsls	r6, r3, #25
 800a472:	bf48      	it	mi
 800a474:	b2ad      	uxthmi	r5, r5
 800a476:	e7e6      	b.n	800a446 <_printf_i+0x182>
 800a478:	4616      	mov	r6, r2
 800a47a:	e7bb      	b.n	800a3f4 <_printf_i+0x130>
 800a47c:	680b      	ldr	r3, [r1, #0]
 800a47e:	6826      	ldr	r6, [r4, #0]
 800a480:	6960      	ldr	r0, [r4, #20]
 800a482:	1d1d      	adds	r5, r3, #4
 800a484:	600d      	str	r5, [r1, #0]
 800a486:	0635      	lsls	r5, r6, #24
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	d501      	bpl.n	800a490 <_printf_i+0x1cc>
 800a48c:	6018      	str	r0, [r3, #0]
 800a48e:	e002      	b.n	800a496 <_printf_i+0x1d2>
 800a490:	0671      	lsls	r1, r6, #25
 800a492:	d5fb      	bpl.n	800a48c <_printf_i+0x1c8>
 800a494:	8018      	strh	r0, [r3, #0]
 800a496:	2300      	movs	r3, #0
 800a498:	6123      	str	r3, [r4, #16]
 800a49a:	4616      	mov	r6, r2
 800a49c:	e7ba      	b.n	800a414 <_printf_i+0x150>
 800a49e:	680b      	ldr	r3, [r1, #0]
 800a4a0:	1d1a      	adds	r2, r3, #4
 800a4a2:	600a      	str	r2, [r1, #0]
 800a4a4:	681e      	ldr	r6, [r3, #0]
 800a4a6:	6862      	ldr	r2, [r4, #4]
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7f5 fe98 	bl	80001e0 <memchr>
 800a4b0:	b108      	cbz	r0, 800a4b6 <_printf_i+0x1f2>
 800a4b2:	1b80      	subs	r0, r0, r6
 800a4b4:	6060      	str	r0, [r4, #4]
 800a4b6:	6863      	ldr	r3, [r4, #4]
 800a4b8:	6123      	str	r3, [r4, #16]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c0:	e7a8      	b.n	800a414 <_printf_i+0x150>
 800a4c2:	6923      	ldr	r3, [r4, #16]
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	47d0      	blx	sl
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	d0ab      	beq.n	800a428 <_printf_i+0x164>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	079b      	lsls	r3, r3, #30
 800a4d4:	d413      	bmi.n	800a4fe <_printf_i+0x23a>
 800a4d6:	68e0      	ldr	r0, [r4, #12]
 800a4d8:	9b03      	ldr	r3, [sp, #12]
 800a4da:	4298      	cmp	r0, r3
 800a4dc:	bfb8      	it	lt
 800a4de:	4618      	movlt	r0, r3
 800a4e0:	e7a4      	b.n	800a42c <_printf_i+0x168>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	4640      	mov	r0, r8
 800a4ea:	47d0      	blx	sl
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d09b      	beq.n	800a428 <_printf_i+0x164>
 800a4f0:	3501      	adds	r5, #1
 800a4f2:	68e3      	ldr	r3, [r4, #12]
 800a4f4:	9903      	ldr	r1, [sp, #12]
 800a4f6:	1a5b      	subs	r3, r3, r1
 800a4f8:	42ab      	cmp	r3, r5
 800a4fa:	dcf2      	bgt.n	800a4e2 <_printf_i+0x21e>
 800a4fc:	e7eb      	b.n	800a4d6 <_printf_i+0x212>
 800a4fe:	2500      	movs	r5, #0
 800a500:	f104 0619 	add.w	r6, r4, #25
 800a504:	e7f5      	b.n	800a4f2 <_printf_i+0x22e>
 800a506:	bf00      	nop
 800a508:	0800ca9a 	.word	0x0800ca9a
 800a50c:	0800caab 	.word	0x0800caab

0800a510 <siprintf>:
 800a510:	b40e      	push	{r1, r2, r3}
 800a512:	b500      	push	{lr}
 800a514:	b09c      	sub	sp, #112	; 0x70
 800a516:	ab1d      	add	r3, sp, #116	; 0x74
 800a518:	9002      	str	r0, [sp, #8]
 800a51a:	9006      	str	r0, [sp, #24]
 800a51c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a520:	4809      	ldr	r0, [pc, #36]	; (800a548 <siprintf+0x38>)
 800a522:	9107      	str	r1, [sp, #28]
 800a524:	9104      	str	r1, [sp, #16]
 800a526:	4909      	ldr	r1, [pc, #36]	; (800a54c <siprintf+0x3c>)
 800a528:	f853 2b04 	ldr.w	r2, [r3], #4
 800a52c:	9105      	str	r1, [sp, #20]
 800a52e:	6800      	ldr	r0, [r0, #0]
 800a530:	9301      	str	r3, [sp, #4]
 800a532:	a902      	add	r1, sp, #8
 800a534:	f001 fb24 	bl	800bb80 <_svfiprintf_r>
 800a538:	9b02      	ldr	r3, [sp, #8]
 800a53a:	2200      	movs	r2, #0
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	b01c      	add	sp, #112	; 0x70
 800a540:	f85d eb04 	ldr.w	lr, [sp], #4
 800a544:	b003      	add	sp, #12
 800a546:	4770      	bx	lr
 800a548:	20000014 	.word	0x20000014
 800a54c:	ffff0208 	.word	0xffff0208

0800a550 <quorem>:
 800a550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	6903      	ldr	r3, [r0, #16]
 800a556:	690c      	ldr	r4, [r1, #16]
 800a558:	42a3      	cmp	r3, r4
 800a55a:	4607      	mov	r7, r0
 800a55c:	f2c0 8081 	blt.w	800a662 <quorem+0x112>
 800a560:	3c01      	subs	r4, #1
 800a562:	f101 0814 	add.w	r8, r1, #20
 800a566:	f100 0514 	add.w	r5, r0, #20
 800a56a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a578:	3301      	adds	r3, #1
 800a57a:	429a      	cmp	r2, r3
 800a57c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a580:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a584:	fbb2 f6f3 	udiv	r6, r2, r3
 800a588:	d331      	bcc.n	800a5ee <quorem+0x9e>
 800a58a:	f04f 0e00 	mov.w	lr, #0
 800a58e:	4640      	mov	r0, r8
 800a590:	46ac      	mov	ip, r5
 800a592:	46f2      	mov	sl, lr
 800a594:	f850 2b04 	ldr.w	r2, [r0], #4
 800a598:	b293      	uxth	r3, r2
 800a59a:	fb06 e303 	mla	r3, r6, r3, lr
 800a59e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	ebaa 0303 	sub.w	r3, sl, r3
 800a5a8:	0c12      	lsrs	r2, r2, #16
 800a5aa:	f8dc a000 	ldr.w	sl, [ip]
 800a5ae:	fb06 e202 	mla	r2, r6, r2, lr
 800a5b2:	fa13 f38a 	uxtah	r3, r3, sl
 800a5b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5ba:	fa1f fa82 	uxth.w	sl, r2
 800a5be:	f8dc 2000 	ldr.w	r2, [ip]
 800a5c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a5c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5d0:	4581      	cmp	r9, r0
 800a5d2:	f84c 3b04 	str.w	r3, [ip], #4
 800a5d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5da:	d2db      	bcs.n	800a594 <quorem+0x44>
 800a5dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5e0:	b92b      	cbnz	r3, 800a5ee <quorem+0x9e>
 800a5e2:	9b01      	ldr	r3, [sp, #4]
 800a5e4:	3b04      	subs	r3, #4
 800a5e6:	429d      	cmp	r5, r3
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	d32e      	bcc.n	800a64a <quorem+0xfa>
 800a5ec:	613c      	str	r4, [r7, #16]
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f001 f8b0 	bl	800b754 <__mcmp>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	db24      	blt.n	800a642 <quorem+0xf2>
 800a5f8:	3601      	adds	r6, #1
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f04f 0c00 	mov.w	ip, #0
 800a600:	f858 2b04 	ldr.w	r2, [r8], #4
 800a604:	f8d0 e000 	ldr.w	lr, [r0]
 800a608:	b293      	uxth	r3, r2
 800a60a:	ebac 0303 	sub.w	r3, ip, r3
 800a60e:	0c12      	lsrs	r2, r2, #16
 800a610:	fa13 f38e 	uxtah	r3, r3, lr
 800a614:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a618:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a622:	45c1      	cmp	r9, r8
 800a624:	f840 3b04 	str.w	r3, [r0], #4
 800a628:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a62c:	d2e8      	bcs.n	800a600 <quorem+0xb0>
 800a62e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a636:	b922      	cbnz	r2, 800a642 <quorem+0xf2>
 800a638:	3b04      	subs	r3, #4
 800a63a:	429d      	cmp	r5, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	d30a      	bcc.n	800a656 <quorem+0x106>
 800a640:	613c      	str	r4, [r7, #16]
 800a642:	4630      	mov	r0, r6
 800a644:	b003      	add	sp, #12
 800a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64a:	6812      	ldr	r2, [r2, #0]
 800a64c:	3b04      	subs	r3, #4
 800a64e:	2a00      	cmp	r2, #0
 800a650:	d1cc      	bne.n	800a5ec <quorem+0x9c>
 800a652:	3c01      	subs	r4, #1
 800a654:	e7c7      	b.n	800a5e6 <quorem+0x96>
 800a656:	6812      	ldr	r2, [r2, #0]
 800a658:	3b04      	subs	r3, #4
 800a65a:	2a00      	cmp	r2, #0
 800a65c:	d1f0      	bne.n	800a640 <quorem+0xf0>
 800a65e:	3c01      	subs	r4, #1
 800a660:	e7eb      	b.n	800a63a <quorem+0xea>
 800a662:	2000      	movs	r0, #0
 800a664:	e7ee      	b.n	800a644 <quorem+0xf4>
	...

0800a668 <_dtoa_r>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	ed2d 8b02 	vpush	{d8}
 800a670:	ec57 6b10 	vmov	r6, r7, d0
 800a674:	b095      	sub	sp, #84	; 0x54
 800a676:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a678:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a67c:	9105      	str	r1, [sp, #20]
 800a67e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a682:	4604      	mov	r4, r0
 800a684:	9209      	str	r2, [sp, #36]	; 0x24
 800a686:	930f      	str	r3, [sp, #60]	; 0x3c
 800a688:	b975      	cbnz	r5, 800a6a8 <_dtoa_r+0x40>
 800a68a:	2010      	movs	r0, #16
 800a68c:	f000 fddc 	bl	800b248 <malloc>
 800a690:	4602      	mov	r2, r0
 800a692:	6260      	str	r0, [r4, #36]	; 0x24
 800a694:	b920      	cbnz	r0, 800a6a0 <_dtoa_r+0x38>
 800a696:	4bb2      	ldr	r3, [pc, #712]	; (800a960 <_dtoa_r+0x2f8>)
 800a698:	21ea      	movs	r1, #234	; 0xea
 800a69a:	48b2      	ldr	r0, [pc, #712]	; (800a964 <_dtoa_r+0x2fc>)
 800a69c:	f001 fb80 	bl	800bda0 <__assert_func>
 800a6a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6a4:	6005      	str	r5, [r0, #0]
 800a6a6:	60c5      	str	r5, [r0, #12]
 800a6a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6aa:	6819      	ldr	r1, [r3, #0]
 800a6ac:	b151      	cbz	r1, 800a6c4 <_dtoa_r+0x5c>
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	604a      	str	r2, [r1, #4]
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	4093      	lsls	r3, r2
 800a6b6:	608b      	str	r3, [r1, #8]
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f000 fe0d 	bl	800b2d8 <_Bfree>
 800a6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	1e3b      	subs	r3, r7, #0
 800a6c6:	bfb9      	ittee	lt
 800a6c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a6cc:	9303      	strlt	r3, [sp, #12]
 800a6ce:	2300      	movge	r3, #0
 800a6d0:	f8c8 3000 	strge.w	r3, [r8]
 800a6d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a6d8:	4ba3      	ldr	r3, [pc, #652]	; (800a968 <_dtoa_r+0x300>)
 800a6da:	bfbc      	itt	lt
 800a6dc:	2201      	movlt	r2, #1
 800a6de:	f8c8 2000 	strlt.w	r2, [r8]
 800a6e2:	ea33 0309 	bics.w	r3, r3, r9
 800a6e6:	d11b      	bne.n	800a720 <_dtoa_r+0xb8>
 800a6e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6f4:	4333      	orrs	r3, r6
 800a6f6:	f000 857a 	beq.w	800b1ee <_dtoa_r+0xb86>
 800a6fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6fc:	b963      	cbnz	r3, 800a718 <_dtoa_r+0xb0>
 800a6fe:	4b9b      	ldr	r3, [pc, #620]	; (800a96c <_dtoa_r+0x304>)
 800a700:	e024      	b.n	800a74c <_dtoa_r+0xe4>
 800a702:	4b9b      	ldr	r3, [pc, #620]	; (800a970 <_dtoa_r+0x308>)
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	3308      	adds	r3, #8
 800a708:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	9800      	ldr	r0, [sp, #0]
 800a70e:	b015      	add	sp, #84	; 0x54
 800a710:	ecbd 8b02 	vpop	{d8}
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	4b94      	ldr	r3, [pc, #592]	; (800a96c <_dtoa_r+0x304>)
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	3303      	adds	r3, #3
 800a71e:	e7f3      	b.n	800a708 <_dtoa_r+0xa0>
 800a720:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a724:	2200      	movs	r2, #0
 800a726:	ec51 0b17 	vmov	r0, r1, d7
 800a72a:	2300      	movs	r3, #0
 800a72c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a730:	f7f6 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 800a734:	4680      	mov	r8, r0
 800a736:	b158      	cbz	r0, 800a750 <_dtoa_r+0xe8>
 800a738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a73a:	2301      	movs	r3, #1
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 8551 	beq.w	800b1e8 <_dtoa_r+0xb80>
 800a746:	488b      	ldr	r0, [pc, #556]	; (800a974 <_dtoa_r+0x30c>)
 800a748:	6018      	str	r0, [r3, #0]
 800a74a:	1e43      	subs	r3, r0, #1
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	e7dd      	b.n	800a70c <_dtoa_r+0xa4>
 800a750:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a754:	aa12      	add	r2, sp, #72	; 0x48
 800a756:	a913      	add	r1, sp, #76	; 0x4c
 800a758:	4620      	mov	r0, r4
 800a75a:	f001 f89f 	bl	800b89c <__d2b>
 800a75e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a762:	4683      	mov	fp, r0
 800a764:	2d00      	cmp	r5, #0
 800a766:	d07c      	beq.n	800a862 <_dtoa_r+0x1fa>
 800a768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a76a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a76e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a772:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a776:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a77a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a77e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a782:	4b7d      	ldr	r3, [pc, #500]	; (800a978 <_dtoa_r+0x310>)
 800a784:	2200      	movs	r2, #0
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f5 fd7d 	bl	8000288 <__aeabi_dsub>
 800a78e:	a36e      	add	r3, pc, #440	; (adr r3, 800a948 <_dtoa_r+0x2e0>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	f7f5 ff30 	bl	80005f8 <__aeabi_dmul>
 800a798:	a36d      	add	r3, pc, #436	; (adr r3, 800a950 <_dtoa_r+0x2e8>)
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	f7f5 fd75 	bl	800028c <__adddf3>
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	460f      	mov	r7, r1
 800a7a8:	f7f5 febc 	bl	8000524 <__aeabi_i2d>
 800a7ac:	a36a      	add	r3, pc, #424	; (adr r3, 800a958 <_dtoa_r+0x2f0>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	f7f5 ff21 	bl	80005f8 <__aeabi_dmul>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f5 fd65 	bl	800028c <__adddf3>
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	f7f6 f9c7 	bl	8000b58 <__aeabi_d2iz>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4682      	mov	sl, r0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	f7f6 f982 	bl	8000adc <__aeabi_dcmplt>
 800a7d8:	b148      	cbz	r0, 800a7ee <_dtoa_r+0x186>
 800a7da:	4650      	mov	r0, sl
 800a7dc:	f7f5 fea2 	bl	8000524 <__aeabi_i2d>
 800a7e0:	4632      	mov	r2, r6
 800a7e2:	463b      	mov	r3, r7
 800a7e4:	f7f6 f970 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7e8:	b908      	cbnz	r0, 800a7ee <_dtoa_r+0x186>
 800a7ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7ee:	f1ba 0f16 	cmp.w	sl, #22
 800a7f2:	d854      	bhi.n	800a89e <_dtoa_r+0x236>
 800a7f4:	4b61      	ldr	r3, [pc, #388]	; (800a97c <_dtoa_r+0x314>)
 800a7f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a802:	f7f6 f96b 	bl	8000adc <__aeabi_dcmplt>
 800a806:	2800      	cmp	r0, #0
 800a808:	d04b      	beq.n	800a8a2 <_dtoa_r+0x23a>
 800a80a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a80e:	2300      	movs	r3, #0
 800a810:	930e      	str	r3, [sp, #56]	; 0x38
 800a812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a814:	1b5d      	subs	r5, r3, r5
 800a816:	1e6b      	subs	r3, r5, #1
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	bf43      	ittte	mi
 800a81c:	2300      	movmi	r3, #0
 800a81e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a822:	9304      	strmi	r3, [sp, #16]
 800a824:	f04f 0800 	movpl.w	r8, #0
 800a828:	f1ba 0f00 	cmp.w	sl, #0
 800a82c:	db3b      	blt.n	800a8a6 <_dtoa_r+0x23e>
 800a82e:	9b04      	ldr	r3, [sp, #16]
 800a830:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a834:	4453      	add	r3, sl
 800a836:	9304      	str	r3, [sp, #16]
 800a838:	2300      	movs	r3, #0
 800a83a:	9306      	str	r3, [sp, #24]
 800a83c:	9b05      	ldr	r3, [sp, #20]
 800a83e:	2b09      	cmp	r3, #9
 800a840:	d869      	bhi.n	800a916 <_dtoa_r+0x2ae>
 800a842:	2b05      	cmp	r3, #5
 800a844:	bfc4      	itt	gt
 800a846:	3b04      	subgt	r3, #4
 800a848:	9305      	strgt	r3, [sp, #20]
 800a84a:	9b05      	ldr	r3, [sp, #20]
 800a84c:	f1a3 0302 	sub.w	r3, r3, #2
 800a850:	bfcc      	ite	gt
 800a852:	2500      	movgt	r5, #0
 800a854:	2501      	movle	r5, #1
 800a856:	2b03      	cmp	r3, #3
 800a858:	d869      	bhi.n	800a92e <_dtoa_r+0x2c6>
 800a85a:	e8df f003 	tbb	[pc, r3]
 800a85e:	4e2c      	.short	0x4e2c
 800a860:	5a4c      	.short	0x5a4c
 800a862:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a866:	441d      	add	r5, r3
 800a868:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a86c:	2b20      	cmp	r3, #32
 800a86e:	bfc1      	itttt	gt
 800a870:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a874:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a878:	fa09 f303 	lslgt.w	r3, r9, r3
 800a87c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a880:	bfda      	itte	le
 800a882:	f1c3 0320 	rsble	r3, r3, #32
 800a886:	fa06 f003 	lslle.w	r0, r6, r3
 800a88a:	4318      	orrgt	r0, r3
 800a88c:	f7f5 fe3a 	bl	8000504 <__aeabi_ui2d>
 800a890:	2301      	movs	r3, #1
 800a892:	4606      	mov	r6, r0
 800a894:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a898:	3d01      	subs	r5, #1
 800a89a:	9310      	str	r3, [sp, #64]	; 0x40
 800a89c:	e771      	b.n	800a782 <_dtoa_r+0x11a>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e7b6      	b.n	800a810 <_dtoa_r+0x1a8>
 800a8a2:	900e      	str	r0, [sp, #56]	; 0x38
 800a8a4:	e7b5      	b.n	800a812 <_dtoa_r+0x1aa>
 800a8a6:	f1ca 0300 	rsb	r3, sl, #0
 800a8aa:	9306      	str	r3, [sp, #24]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	eba8 080a 	sub.w	r8, r8, sl
 800a8b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a8b4:	e7c2      	b.n	800a83c <_dtoa_r+0x1d4>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	9308      	str	r3, [sp, #32]
 800a8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	dc39      	bgt.n	800a934 <_dtoa_r+0x2cc>
 800a8c0:	f04f 0901 	mov.w	r9, #1
 800a8c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8c8:	464b      	mov	r3, r9
 800a8ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a8ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	6042      	str	r2, [r0, #4]
 800a8d4:	2204      	movs	r2, #4
 800a8d6:	f102 0614 	add.w	r6, r2, #20
 800a8da:	429e      	cmp	r6, r3
 800a8dc:	6841      	ldr	r1, [r0, #4]
 800a8de:	d92f      	bls.n	800a940 <_dtoa_r+0x2d8>
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 fcb9 	bl	800b258 <_Balloc>
 800a8e6:	9000      	str	r0, [sp, #0]
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d14b      	bne.n	800a984 <_dtoa_r+0x31c>
 800a8ec:	4b24      	ldr	r3, [pc, #144]	; (800a980 <_dtoa_r+0x318>)
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8f4:	e6d1      	b.n	800a69a <_dtoa_r+0x32>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e7de      	b.n	800a8b8 <_dtoa_r+0x250>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	9308      	str	r3, [sp, #32]
 800a8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a900:	eb0a 0903 	add.w	r9, sl, r3
 800a904:	f109 0301 	add.w	r3, r9, #1
 800a908:	2b01      	cmp	r3, #1
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	bfb8      	it	lt
 800a90e:	2301      	movlt	r3, #1
 800a910:	e7dd      	b.n	800a8ce <_dtoa_r+0x266>
 800a912:	2301      	movs	r3, #1
 800a914:	e7f2      	b.n	800a8fc <_dtoa_r+0x294>
 800a916:	2501      	movs	r5, #1
 800a918:	2300      	movs	r3, #0
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	9508      	str	r5, [sp, #32]
 800a91e:	f04f 39ff 	mov.w	r9, #4294967295
 800a922:	2200      	movs	r2, #0
 800a924:	f8cd 9004 	str.w	r9, [sp, #4]
 800a928:	2312      	movs	r3, #18
 800a92a:	9209      	str	r2, [sp, #36]	; 0x24
 800a92c:	e7cf      	b.n	800a8ce <_dtoa_r+0x266>
 800a92e:	2301      	movs	r3, #1
 800a930:	9308      	str	r3, [sp, #32]
 800a932:	e7f4      	b.n	800a91e <_dtoa_r+0x2b6>
 800a934:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a938:	f8cd 9004 	str.w	r9, [sp, #4]
 800a93c:	464b      	mov	r3, r9
 800a93e:	e7c6      	b.n	800a8ce <_dtoa_r+0x266>
 800a940:	3101      	adds	r1, #1
 800a942:	6041      	str	r1, [r0, #4]
 800a944:	0052      	lsls	r2, r2, #1
 800a946:	e7c6      	b.n	800a8d6 <_dtoa_r+0x26e>
 800a948:	636f4361 	.word	0x636f4361
 800a94c:	3fd287a7 	.word	0x3fd287a7
 800a950:	8b60c8b3 	.word	0x8b60c8b3
 800a954:	3fc68a28 	.word	0x3fc68a28
 800a958:	509f79fb 	.word	0x509f79fb
 800a95c:	3fd34413 	.word	0x3fd34413
 800a960:	0800cac9 	.word	0x0800cac9
 800a964:	0800cae0 	.word	0x0800cae0
 800a968:	7ff00000 	.word	0x7ff00000
 800a96c:	0800cac5 	.word	0x0800cac5
 800a970:	0800cabc 	.word	0x0800cabc
 800a974:	0800ca99 	.word	0x0800ca99
 800a978:	3ff80000 	.word	0x3ff80000
 800a97c:	0800cbd8 	.word	0x0800cbd8
 800a980:	0800cb3f 	.word	0x0800cb3f
 800a984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a986:	9a00      	ldr	r2, [sp, #0]
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	9b01      	ldr	r3, [sp, #4]
 800a98c:	2b0e      	cmp	r3, #14
 800a98e:	f200 80ad 	bhi.w	800aaec <_dtoa_r+0x484>
 800a992:	2d00      	cmp	r5, #0
 800a994:	f000 80aa 	beq.w	800aaec <_dtoa_r+0x484>
 800a998:	f1ba 0f00 	cmp.w	sl, #0
 800a99c:	dd36      	ble.n	800aa0c <_dtoa_r+0x3a4>
 800a99e:	4ac3      	ldr	r2, [pc, #780]	; (800acac <_dtoa_r+0x644>)
 800a9a0:	f00a 030f 	and.w	r3, sl, #15
 800a9a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9a8:	ed93 7b00 	vldr	d7, [r3]
 800a9ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a9b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a9b4:	eeb0 8a47 	vmov.f32	s16, s14
 800a9b8:	eef0 8a67 	vmov.f32	s17, s15
 800a9bc:	d016      	beq.n	800a9ec <_dtoa_r+0x384>
 800a9be:	4bbc      	ldr	r3, [pc, #752]	; (800acb0 <_dtoa_r+0x648>)
 800a9c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a9c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9c8:	f7f5 ff40 	bl	800084c <__aeabi_ddiv>
 800a9cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9d0:	f007 070f 	and.w	r7, r7, #15
 800a9d4:	2503      	movs	r5, #3
 800a9d6:	4eb6      	ldr	r6, [pc, #728]	; (800acb0 <_dtoa_r+0x648>)
 800a9d8:	b957      	cbnz	r7, 800a9f0 <_dtoa_r+0x388>
 800a9da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9de:	ec53 2b18 	vmov	r2, r3, d8
 800a9e2:	f7f5 ff33 	bl	800084c <__aeabi_ddiv>
 800a9e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ea:	e029      	b.n	800aa40 <_dtoa_r+0x3d8>
 800a9ec:	2502      	movs	r5, #2
 800a9ee:	e7f2      	b.n	800a9d6 <_dtoa_r+0x36e>
 800a9f0:	07f9      	lsls	r1, r7, #31
 800a9f2:	d508      	bpl.n	800aa06 <_dtoa_r+0x39e>
 800a9f4:	ec51 0b18 	vmov	r0, r1, d8
 800a9f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9fc:	f7f5 fdfc 	bl	80005f8 <__aeabi_dmul>
 800aa00:	ec41 0b18 	vmov	d8, r0, r1
 800aa04:	3501      	adds	r5, #1
 800aa06:	107f      	asrs	r7, r7, #1
 800aa08:	3608      	adds	r6, #8
 800aa0a:	e7e5      	b.n	800a9d8 <_dtoa_r+0x370>
 800aa0c:	f000 80a6 	beq.w	800ab5c <_dtoa_r+0x4f4>
 800aa10:	f1ca 0600 	rsb	r6, sl, #0
 800aa14:	4ba5      	ldr	r3, [pc, #660]	; (800acac <_dtoa_r+0x644>)
 800aa16:	4fa6      	ldr	r7, [pc, #664]	; (800acb0 <_dtoa_r+0x648>)
 800aa18:	f006 020f 	and.w	r2, r6, #15
 800aa1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa28:	f7f5 fde6 	bl	80005f8 <__aeabi_dmul>
 800aa2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa30:	1136      	asrs	r6, r6, #4
 800aa32:	2300      	movs	r3, #0
 800aa34:	2502      	movs	r5, #2
 800aa36:	2e00      	cmp	r6, #0
 800aa38:	f040 8085 	bne.w	800ab46 <_dtoa_r+0x4de>
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1d2      	bne.n	800a9e6 <_dtoa_r+0x37e>
 800aa40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 808c 	beq.w	800ab60 <_dtoa_r+0x4f8>
 800aa48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa4c:	4b99      	ldr	r3, [pc, #612]	; (800acb4 <_dtoa_r+0x64c>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	4630      	mov	r0, r6
 800aa52:	4639      	mov	r1, r7
 800aa54:	f7f6 f842 	bl	8000adc <__aeabi_dcmplt>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	f000 8081 	beq.w	800ab60 <_dtoa_r+0x4f8>
 800aa5e:	9b01      	ldr	r3, [sp, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d07d      	beq.n	800ab60 <_dtoa_r+0x4f8>
 800aa64:	f1b9 0f00 	cmp.w	r9, #0
 800aa68:	dd3c      	ble.n	800aae4 <_dtoa_r+0x47c>
 800aa6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aa6e:	9307      	str	r3, [sp, #28]
 800aa70:	2200      	movs	r2, #0
 800aa72:	4b91      	ldr	r3, [pc, #580]	; (800acb8 <_dtoa_r+0x650>)
 800aa74:	4630      	mov	r0, r6
 800aa76:	4639      	mov	r1, r7
 800aa78:	f7f5 fdbe 	bl	80005f8 <__aeabi_dmul>
 800aa7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa80:	3501      	adds	r5, #1
 800aa82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800aa86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f7f5 fd4a 	bl	8000524 <__aeabi_i2d>
 800aa90:	4632      	mov	r2, r6
 800aa92:	463b      	mov	r3, r7
 800aa94:	f7f5 fdb0 	bl	80005f8 <__aeabi_dmul>
 800aa98:	4b88      	ldr	r3, [pc, #544]	; (800acbc <_dtoa_r+0x654>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f7f5 fbf6 	bl	800028c <__adddf3>
 800aaa0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aaa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa8:	9303      	str	r3, [sp, #12]
 800aaaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d15c      	bne.n	800ab6a <_dtoa_r+0x502>
 800aab0:	4b83      	ldr	r3, [pc, #524]	; (800acc0 <_dtoa_r+0x658>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	4630      	mov	r0, r6
 800aab6:	4639      	mov	r1, r7
 800aab8:	f7f5 fbe6 	bl	8000288 <__aeabi_dsub>
 800aabc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aac0:	4606      	mov	r6, r0
 800aac2:	460f      	mov	r7, r1
 800aac4:	f7f6 f828 	bl	8000b18 <__aeabi_dcmpgt>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	f040 8296 	bne.w	800affa <_dtoa_r+0x992>
 800aace:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aad2:	4630      	mov	r0, r6
 800aad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aad8:	4639      	mov	r1, r7
 800aada:	f7f5 ffff 	bl	8000adc <__aeabi_dcmplt>
 800aade:	2800      	cmp	r0, #0
 800aae0:	f040 8288 	bne.w	800aff4 <_dtoa_r+0x98c>
 800aae4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aaec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f2c0 8158 	blt.w	800ada4 <_dtoa_r+0x73c>
 800aaf4:	f1ba 0f0e 	cmp.w	sl, #14
 800aaf8:	f300 8154 	bgt.w	800ada4 <_dtoa_r+0x73c>
 800aafc:	4b6b      	ldr	r3, [pc, #428]	; (800acac <_dtoa_r+0x644>)
 800aafe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f280 80e3 	bge.w	800acd4 <_dtoa_r+0x66c>
 800ab0e:	9b01      	ldr	r3, [sp, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f300 80df 	bgt.w	800acd4 <_dtoa_r+0x66c>
 800ab16:	f040 826d 	bne.w	800aff4 <_dtoa_r+0x98c>
 800ab1a:	4b69      	ldr	r3, [pc, #420]	; (800acc0 <_dtoa_r+0x658>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4640      	mov	r0, r8
 800ab20:	4649      	mov	r1, r9
 800ab22:	f7f5 fd69 	bl	80005f8 <__aeabi_dmul>
 800ab26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab2a:	f7f5 ffeb 	bl	8000b04 <__aeabi_dcmpge>
 800ab2e:	9e01      	ldr	r6, [sp, #4]
 800ab30:	4637      	mov	r7, r6
 800ab32:	2800      	cmp	r0, #0
 800ab34:	f040 8243 	bne.w	800afbe <_dtoa_r+0x956>
 800ab38:	9d00      	ldr	r5, [sp, #0]
 800ab3a:	2331      	movs	r3, #49	; 0x31
 800ab3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ab40:	f10a 0a01 	add.w	sl, sl, #1
 800ab44:	e23f      	b.n	800afc6 <_dtoa_r+0x95e>
 800ab46:	07f2      	lsls	r2, r6, #31
 800ab48:	d505      	bpl.n	800ab56 <_dtoa_r+0x4ee>
 800ab4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab4e:	f7f5 fd53 	bl	80005f8 <__aeabi_dmul>
 800ab52:	3501      	adds	r5, #1
 800ab54:	2301      	movs	r3, #1
 800ab56:	1076      	asrs	r6, r6, #1
 800ab58:	3708      	adds	r7, #8
 800ab5a:	e76c      	b.n	800aa36 <_dtoa_r+0x3ce>
 800ab5c:	2502      	movs	r5, #2
 800ab5e:	e76f      	b.n	800aa40 <_dtoa_r+0x3d8>
 800ab60:	9b01      	ldr	r3, [sp, #4]
 800ab62:	f8cd a01c 	str.w	sl, [sp, #28]
 800ab66:	930c      	str	r3, [sp, #48]	; 0x30
 800ab68:	e78d      	b.n	800aa86 <_dtoa_r+0x41e>
 800ab6a:	9900      	ldr	r1, [sp, #0]
 800ab6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab70:	4b4e      	ldr	r3, [pc, #312]	; (800acac <_dtoa_r+0x644>)
 800ab72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab76:	4401      	add	r1, r0
 800ab78:	9102      	str	r1, [sp, #8]
 800ab7a:	9908      	ldr	r1, [sp, #32]
 800ab7c:	eeb0 8a47 	vmov.f32	s16, s14
 800ab80:	eef0 8a67 	vmov.f32	s17, s15
 800ab84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab8c:	2900      	cmp	r1, #0
 800ab8e:	d045      	beq.n	800ac1c <_dtoa_r+0x5b4>
 800ab90:	494c      	ldr	r1, [pc, #304]	; (800acc4 <_dtoa_r+0x65c>)
 800ab92:	2000      	movs	r0, #0
 800ab94:	f7f5 fe5a 	bl	800084c <__aeabi_ddiv>
 800ab98:	ec53 2b18 	vmov	r2, r3, d8
 800ab9c:	f7f5 fb74 	bl	8000288 <__aeabi_dsub>
 800aba0:	9d00      	ldr	r5, [sp, #0]
 800aba2:	ec41 0b18 	vmov	d8, r0, r1
 800aba6:	4639      	mov	r1, r7
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7f5 ffd5 	bl	8000b58 <__aeabi_d2iz>
 800abae:	900c      	str	r0, [sp, #48]	; 0x30
 800abb0:	f7f5 fcb8 	bl	8000524 <__aeabi_i2d>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4630      	mov	r0, r6
 800abba:	4639      	mov	r1, r7
 800abbc:	f7f5 fb64 	bl	8000288 <__aeabi_dsub>
 800abc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abc2:	3330      	adds	r3, #48	; 0x30
 800abc4:	f805 3b01 	strb.w	r3, [r5], #1
 800abc8:	ec53 2b18 	vmov	r2, r3, d8
 800abcc:	4606      	mov	r6, r0
 800abce:	460f      	mov	r7, r1
 800abd0:	f7f5 ff84 	bl	8000adc <__aeabi_dcmplt>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d165      	bne.n	800aca4 <_dtoa_r+0x63c>
 800abd8:	4632      	mov	r2, r6
 800abda:	463b      	mov	r3, r7
 800abdc:	4935      	ldr	r1, [pc, #212]	; (800acb4 <_dtoa_r+0x64c>)
 800abde:	2000      	movs	r0, #0
 800abe0:	f7f5 fb52 	bl	8000288 <__aeabi_dsub>
 800abe4:	ec53 2b18 	vmov	r2, r3, d8
 800abe8:	f7f5 ff78 	bl	8000adc <__aeabi_dcmplt>
 800abec:	2800      	cmp	r0, #0
 800abee:	f040 80b9 	bne.w	800ad64 <_dtoa_r+0x6fc>
 800abf2:	9b02      	ldr	r3, [sp, #8]
 800abf4:	429d      	cmp	r5, r3
 800abf6:	f43f af75 	beq.w	800aae4 <_dtoa_r+0x47c>
 800abfa:	4b2f      	ldr	r3, [pc, #188]	; (800acb8 <_dtoa_r+0x650>)
 800abfc:	ec51 0b18 	vmov	r0, r1, d8
 800ac00:	2200      	movs	r2, #0
 800ac02:	f7f5 fcf9 	bl	80005f8 <__aeabi_dmul>
 800ac06:	4b2c      	ldr	r3, [pc, #176]	; (800acb8 <_dtoa_r+0x650>)
 800ac08:	ec41 0b18 	vmov	d8, r0, r1
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	4630      	mov	r0, r6
 800ac10:	4639      	mov	r1, r7
 800ac12:	f7f5 fcf1 	bl	80005f8 <__aeabi_dmul>
 800ac16:	4606      	mov	r6, r0
 800ac18:	460f      	mov	r7, r1
 800ac1a:	e7c4      	b.n	800aba6 <_dtoa_r+0x53e>
 800ac1c:	ec51 0b17 	vmov	r0, r1, d7
 800ac20:	f7f5 fcea 	bl	80005f8 <__aeabi_dmul>
 800ac24:	9b02      	ldr	r3, [sp, #8]
 800ac26:	9d00      	ldr	r5, [sp, #0]
 800ac28:	930c      	str	r3, [sp, #48]	; 0x30
 800ac2a:	ec41 0b18 	vmov	d8, r0, r1
 800ac2e:	4639      	mov	r1, r7
 800ac30:	4630      	mov	r0, r6
 800ac32:	f7f5 ff91 	bl	8000b58 <__aeabi_d2iz>
 800ac36:	9011      	str	r0, [sp, #68]	; 0x44
 800ac38:	f7f5 fc74 	bl	8000524 <__aeabi_i2d>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 fb20 	bl	8000288 <__aeabi_dsub>
 800ac48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac4a:	3330      	adds	r3, #48	; 0x30
 800ac4c:	f805 3b01 	strb.w	r3, [r5], #1
 800ac50:	9b02      	ldr	r3, [sp, #8]
 800ac52:	429d      	cmp	r5, r3
 800ac54:	4606      	mov	r6, r0
 800ac56:	460f      	mov	r7, r1
 800ac58:	f04f 0200 	mov.w	r2, #0
 800ac5c:	d134      	bne.n	800acc8 <_dtoa_r+0x660>
 800ac5e:	4b19      	ldr	r3, [pc, #100]	; (800acc4 <_dtoa_r+0x65c>)
 800ac60:	ec51 0b18 	vmov	r0, r1, d8
 800ac64:	f7f5 fb12 	bl	800028c <__adddf3>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f7f5 ff52 	bl	8000b18 <__aeabi_dcmpgt>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	d175      	bne.n	800ad64 <_dtoa_r+0x6fc>
 800ac78:	ec53 2b18 	vmov	r2, r3, d8
 800ac7c:	4911      	ldr	r1, [pc, #68]	; (800acc4 <_dtoa_r+0x65c>)
 800ac7e:	2000      	movs	r0, #0
 800ac80:	f7f5 fb02 	bl	8000288 <__aeabi_dsub>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f5 ff26 	bl	8000adc <__aeabi_dcmplt>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	f43f af27 	beq.w	800aae4 <_dtoa_r+0x47c>
 800ac96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac98:	1e6b      	subs	r3, r5, #1
 800ac9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ac9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aca0:	2b30      	cmp	r3, #48	; 0x30
 800aca2:	d0f8      	beq.n	800ac96 <_dtoa_r+0x62e>
 800aca4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aca8:	e04a      	b.n	800ad40 <_dtoa_r+0x6d8>
 800acaa:	bf00      	nop
 800acac:	0800cbd8 	.word	0x0800cbd8
 800acb0:	0800cbb0 	.word	0x0800cbb0
 800acb4:	3ff00000 	.word	0x3ff00000
 800acb8:	40240000 	.word	0x40240000
 800acbc:	401c0000 	.word	0x401c0000
 800acc0:	40140000 	.word	0x40140000
 800acc4:	3fe00000 	.word	0x3fe00000
 800acc8:	4baf      	ldr	r3, [pc, #700]	; (800af88 <_dtoa_r+0x920>)
 800acca:	f7f5 fc95 	bl	80005f8 <__aeabi_dmul>
 800acce:	4606      	mov	r6, r0
 800acd0:	460f      	mov	r7, r1
 800acd2:	e7ac      	b.n	800ac2e <_dtoa_r+0x5c6>
 800acd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800acd8:	9d00      	ldr	r5, [sp, #0]
 800acda:	4642      	mov	r2, r8
 800acdc:	464b      	mov	r3, r9
 800acde:	4630      	mov	r0, r6
 800ace0:	4639      	mov	r1, r7
 800ace2:	f7f5 fdb3 	bl	800084c <__aeabi_ddiv>
 800ace6:	f7f5 ff37 	bl	8000b58 <__aeabi_d2iz>
 800acea:	9002      	str	r0, [sp, #8]
 800acec:	f7f5 fc1a 	bl	8000524 <__aeabi_i2d>
 800acf0:	4642      	mov	r2, r8
 800acf2:	464b      	mov	r3, r9
 800acf4:	f7f5 fc80 	bl	80005f8 <__aeabi_dmul>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4630      	mov	r0, r6
 800acfe:	4639      	mov	r1, r7
 800ad00:	f7f5 fac2 	bl	8000288 <__aeabi_dsub>
 800ad04:	9e02      	ldr	r6, [sp, #8]
 800ad06:	9f01      	ldr	r7, [sp, #4]
 800ad08:	3630      	adds	r6, #48	; 0x30
 800ad0a:	f805 6b01 	strb.w	r6, [r5], #1
 800ad0e:	9e00      	ldr	r6, [sp, #0]
 800ad10:	1bae      	subs	r6, r5, r6
 800ad12:	42b7      	cmp	r7, r6
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	d137      	bne.n	800ad8a <_dtoa_r+0x722>
 800ad1a:	f7f5 fab7 	bl	800028c <__adddf3>
 800ad1e:	4642      	mov	r2, r8
 800ad20:	464b      	mov	r3, r9
 800ad22:	4606      	mov	r6, r0
 800ad24:	460f      	mov	r7, r1
 800ad26:	f7f5 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 800ad2a:	b9c8      	cbnz	r0, 800ad60 <_dtoa_r+0x6f8>
 800ad2c:	4642      	mov	r2, r8
 800ad2e:	464b      	mov	r3, r9
 800ad30:	4630      	mov	r0, r6
 800ad32:	4639      	mov	r1, r7
 800ad34:	f7f5 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad38:	b110      	cbz	r0, 800ad40 <_dtoa_r+0x6d8>
 800ad3a:	9b02      	ldr	r3, [sp, #8]
 800ad3c:	07d9      	lsls	r1, r3, #31
 800ad3e:	d40f      	bmi.n	800ad60 <_dtoa_r+0x6f8>
 800ad40:	4620      	mov	r0, r4
 800ad42:	4659      	mov	r1, fp
 800ad44:	f000 fac8 	bl	800b2d8 <_Bfree>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	702b      	strb	r3, [r5, #0]
 800ad4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad4e:	f10a 0001 	add.w	r0, sl, #1
 800ad52:	6018      	str	r0, [r3, #0]
 800ad54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f43f acd8 	beq.w	800a70c <_dtoa_r+0xa4>
 800ad5c:	601d      	str	r5, [r3, #0]
 800ad5e:	e4d5      	b.n	800a70c <_dtoa_r+0xa4>
 800ad60:	f8cd a01c 	str.w	sl, [sp, #28]
 800ad64:	462b      	mov	r3, r5
 800ad66:	461d      	mov	r5, r3
 800ad68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad6c:	2a39      	cmp	r2, #57	; 0x39
 800ad6e:	d108      	bne.n	800ad82 <_dtoa_r+0x71a>
 800ad70:	9a00      	ldr	r2, [sp, #0]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d1f7      	bne.n	800ad66 <_dtoa_r+0x6fe>
 800ad76:	9a07      	ldr	r2, [sp, #28]
 800ad78:	9900      	ldr	r1, [sp, #0]
 800ad7a:	3201      	adds	r2, #1
 800ad7c:	9207      	str	r2, [sp, #28]
 800ad7e:	2230      	movs	r2, #48	; 0x30
 800ad80:	700a      	strb	r2, [r1, #0]
 800ad82:	781a      	ldrb	r2, [r3, #0]
 800ad84:	3201      	adds	r2, #1
 800ad86:	701a      	strb	r2, [r3, #0]
 800ad88:	e78c      	b.n	800aca4 <_dtoa_r+0x63c>
 800ad8a:	4b7f      	ldr	r3, [pc, #508]	; (800af88 <_dtoa_r+0x920>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f7f5 fc33 	bl	80005f8 <__aeabi_dmul>
 800ad92:	2200      	movs	r2, #0
 800ad94:	2300      	movs	r3, #0
 800ad96:	4606      	mov	r6, r0
 800ad98:	460f      	mov	r7, r1
 800ad9a:	f7f5 fe95 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d09b      	beq.n	800acda <_dtoa_r+0x672>
 800ada2:	e7cd      	b.n	800ad40 <_dtoa_r+0x6d8>
 800ada4:	9a08      	ldr	r2, [sp, #32]
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	f000 80c4 	beq.w	800af34 <_dtoa_r+0x8cc>
 800adac:	9a05      	ldr	r2, [sp, #20]
 800adae:	2a01      	cmp	r2, #1
 800adb0:	f300 80a8 	bgt.w	800af04 <_dtoa_r+0x89c>
 800adb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800adb6:	2a00      	cmp	r2, #0
 800adb8:	f000 80a0 	beq.w	800aefc <_dtoa_r+0x894>
 800adbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adc0:	9e06      	ldr	r6, [sp, #24]
 800adc2:	4645      	mov	r5, r8
 800adc4:	9a04      	ldr	r2, [sp, #16]
 800adc6:	2101      	movs	r1, #1
 800adc8:	441a      	add	r2, r3
 800adca:	4620      	mov	r0, r4
 800adcc:	4498      	add	r8, r3
 800adce:	9204      	str	r2, [sp, #16]
 800add0:	f000 fb3e 	bl	800b450 <__i2b>
 800add4:	4607      	mov	r7, r0
 800add6:	2d00      	cmp	r5, #0
 800add8:	dd0b      	ble.n	800adf2 <_dtoa_r+0x78a>
 800adda:	9b04      	ldr	r3, [sp, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	dd08      	ble.n	800adf2 <_dtoa_r+0x78a>
 800ade0:	42ab      	cmp	r3, r5
 800ade2:	9a04      	ldr	r2, [sp, #16]
 800ade4:	bfa8      	it	ge
 800ade6:	462b      	movge	r3, r5
 800ade8:	eba8 0803 	sub.w	r8, r8, r3
 800adec:	1aed      	subs	r5, r5, r3
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	9304      	str	r3, [sp, #16]
 800adf2:	9b06      	ldr	r3, [sp, #24]
 800adf4:	b1fb      	cbz	r3, 800ae36 <_dtoa_r+0x7ce>
 800adf6:	9b08      	ldr	r3, [sp, #32]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 809f 	beq.w	800af3c <_dtoa_r+0x8d4>
 800adfe:	2e00      	cmp	r6, #0
 800ae00:	dd11      	ble.n	800ae26 <_dtoa_r+0x7be>
 800ae02:	4639      	mov	r1, r7
 800ae04:	4632      	mov	r2, r6
 800ae06:	4620      	mov	r0, r4
 800ae08:	f000 fbde 	bl	800b5c8 <__pow5mult>
 800ae0c:	465a      	mov	r2, fp
 800ae0e:	4601      	mov	r1, r0
 800ae10:	4607      	mov	r7, r0
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 fb32 	bl	800b47c <__multiply>
 800ae18:	4659      	mov	r1, fp
 800ae1a:	9007      	str	r0, [sp, #28]
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 fa5b 	bl	800b2d8 <_Bfree>
 800ae22:	9b07      	ldr	r3, [sp, #28]
 800ae24:	469b      	mov	fp, r3
 800ae26:	9b06      	ldr	r3, [sp, #24]
 800ae28:	1b9a      	subs	r2, r3, r6
 800ae2a:	d004      	beq.n	800ae36 <_dtoa_r+0x7ce>
 800ae2c:	4659      	mov	r1, fp
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 fbca 	bl	800b5c8 <__pow5mult>
 800ae34:	4683      	mov	fp, r0
 800ae36:	2101      	movs	r1, #1
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f000 fb09 	bl	800b450 <__i2b>
 800ae3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	4606      	mov	r6, r0
 800ae44:	dd7c      	ble.n	800af40 <_dtoa_r+0x8d8>
 800ae46:	461a      	mov	r2, r3
 800ae48:	4601      	mov	r1, r0
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 fbbc 	bl	800b5c8 <__pow5mult>
 800ae50:	9b05      	ldr	r3, [sp, #20]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	4606      	mov	r6, r0
 800ae56:	dd76      	ble.n	800af46 <_dtoa_r+0x8de>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	9306      	str	r3, [sp, #24]
 800ae5c:	6933      	ldr	r3, [r6, #16]
 800ae5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae62:	6918      	ldr	r0, [r3, #16]
 800ae64:	f000 faa4 	bl	800b3b0 <__hi0bits>
 800ae68:	f1c0 0020 	rsb	r0, r0, #32
 800ae6c:	9b04      	ldr	r3, [sp, #16]
 800ae6e:	4418      	add	r0, r3
 800ae70:	f010 001f 	ands.w	r0, r0, #31
 800ae74:	f000 8086 	beq.w	800af84 <_dtoa_r+0x91c>
 800ae78:	f1c0 0320 	rsb	r3, r0, #32
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	dd7f      	ble.n	800af80 <_dtoa_r+0x918>
 800ae80:	f1c0 001c 	rsb	r0, r0, #28
 800ae84:	9b04      	ldr	r3, [sp, #16]
 800ae86:	4403      	add	r3, r0
 800ae88:	4480      	add	r8, r0
 800ae8a:	4405      	add	r5, r0
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	f1b8 0f00 	cmp.w	r8, #0
 800ae92:	dd05      	ble.n	800aea0 <_dtoa_r+0x838>
 800ae94:	4659      	mov	r1, fp
 800ae96:	4642      	mov	r2, r8
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 fbef 	bl	800b67c <__lshift>
 800ae9e:	4683      	mov	fp, r0
 800aea0:	9b04      	ldr	r3, [sp, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	dd05      	ble.n	800aeb2 <_dtoa_r+0x84a>
 800aea6:	4631      	mov	r1, r6
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 fbe6 	bl	800b67c <__lshift>
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d069      	beq.n	800af8c <_dtoa_r+0x924>
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4658      	mov	r0, fp
 800aebc:	f000 fc4a 	bl	800b754 <__mcmp>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	da63      	bge.n	800af8c <_dtoa_r+0x924>
 800aec4:	2300      	movs	r3, #0
 800aec6:	4659      	mov	r1, fp
 800aec8:	220a      	movs	r2, #10
 800aeca:	4620      	mov	r0, r4
 800aecc:	f000 fa26 	bl	800b31c <__multadd>
 800aed0:	9b08      	ldr	r3, [sp, #32]
 800aed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aed6:	4683      	mov	fp, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 818f 	beq.w	800b1fc <_dtoa_r+0xb94>
 800aede:	4639      	mov	r1, r7
 800aee0:	2300      	movs	r3, #0
 800aee2:	220a      	movs	r2, #10
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 fa19 	bl	800b31c <__multadd>
 800aeea:	f1b9 0f00 	cmp.w	r9, #0
 800aeee:	4607      	mov	r7, r0
 800aef0:	f300 808e 	bgt.w	800b010 <_dtoa_r+0x9a8>
 800aef4:	9b05      	ldr	r3, [sp, #20]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	dc50      	bgt.n	800af9c <_dtoa_r+0x934>
 800aefa:	e089      	b.n	800b010 <_dtoa_r+0x9a8>
 800aefc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aefe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af02:	e75d      	b.n	800adc0 <_dtoa_r+0x758>
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	1e5e      	subs	r6, r3, #1
 800af08:	9b06      	ldr	r3, [sp, #24]
 800af0a:	42b3      	cmp	r3, r6
 800af0c:	bfbf      	itttt	lt
 800af0e:	9b06      	ldrlt	r3, [sp, #24]
 800af10:	9606      	strlt	r6, [sp, #24]
 800af12:	1af2      	sublt	r2, r6, r3
 800af14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800af16:	bfb6      	itet	lt
 800af18:	189b      	addlt	r3, r3, r2
 800af1a:	1b9e      	subge	r6, r3, r6
 800af1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800af1e:	9b01      	ldr	r3, [sp, #4]
 800af20:	bfb8      	it	lt
 800af22:	2600      	movlt	r6, #0
 800af24:	2b00      	cmp	r3, #0
 800af26:	bfb5      	itete	lt
 800af28:	eba8 0503 	sublt.w	r5, r8, r3
 800af2c:	9b01      	ldrge	r3, [sp, #4]
 800af2e:	2300      	movlt	r3, #0
 800af30:	4645      	movge	r5, r8
 800af32:	e747      	b.n	800adc4 <_dtoa_r+0x75c>
 800af34:	9e06      	ldr	r6, [sp, #24]
 800af36:	9f08      	ldr	r7, [sp, #32]
 800af38:	4645      	mov	r5, r8
 800af3a:	e74c      	b.n	800add6 <_dtoa_r+0x76e>
 800af3c:	9a06      	ldr	r2, [sp, #24]
 800af3e:	e775      	b.n	800ae2c <_dtoa_r+0x7c4>
 800af40:	9b05      	ldr	r3, [sp, #20]
 800af42:	2b01      	cmp	r3, #1
 800af44:	dc18      	bgt.n	800af78 <_dtoa_r+0x910>
 800af46:	9b02      	ldr	r3, [sp, #8]
 800af48:	b9b3      	cbnz	r3, 800af78 <_dtoa_r+0x910>
 800af4a:	9b03      	ldr	r3, [sp, #12]
 800af4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af50:	b9a3      	cbnz	r3, 800af7c <_dtoa_r+0x914>
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af58:	0d1b      	lsrs	r3, r3, #20
 800af5a:	051b      	lsls	r3, r3, #20
 800af5c:	b12b      	cbz	r3, 800af6a <_dtoa_r+0x902>
 800af5e:	9b04      	ldr	r3, [sp, #16]
 800af60:	3301      	adds	r3, #1
 800af62:	9304      	str	r3, [sp, #16]
 800af64:	f108 0801 	add.w	r8, r8, #1
 800af68:	2301      	movs	r3, #1
 800af6a:	9306      	str	r3, [sp, #24]
 800af6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f47f af74 	bne.w	800ae5c <_dtoa_r+0x7f4>
 800af74:	2001      	movs	r0, #1
 800af76:	e779      	b.n	800ae6c <_dtoa_r+0x804>
 800af78:	2300      	movs	r3, #0
 800af7a:	e7f6      	b.n	800af6a <_dtoa_r+0x902>
 800af7c:	9b02      	ldr	r3, [sp, #8]
 800af7e:	e7f4      	b.n	800af6a <_dtoa_r+0x902>
 800af80:	d085      	beq.n	800ae8e <_dtoa_r+0x826>
 800af82:	4618      	mov	r0, r3
 800af84:	301c      	adds	r0, #28
 800af86:	e77d      	b.n	800ae84 <_dtoa_r+0x81c>
 800af88:	40240000 	.word	0x40240000
 800af8c:	9b01      	ldr	r3, [sp, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	dc38      	bgt.n	800b004 <_dtoa_r+0x99c>
 800af92:	9b05      	ldr	r3, [sp, #20]
 800af94:	2b02      	cmp	r3, #2
 800af96:	dd35      	ble.n	800b004 <_dtoa_r+0x99c>
 800af98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800af9c:	f1b9 0f00 	cmp.w	r9, #0
 800afa0:	d10d      	bne.n	800afbe <_dtoa_r+0x956>
 800afa2:	4631      	mov	r1, r6
 800afa4:	464b      	mov	r3, r9
 800afa6:	2205      	movs	r2, #5
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 f9b7 	bl	800b31c <__multadd>
 800afae:	4601      	mov	r1, r0
 800afb0:	4606      	mov	r6, r0
 800afb2:	4658      	mov	r0, fp
 800afb4:	f000 fbce 	bl	800b754 <__mcmp>
 800afb8:	2800      	cmp	r0, #0
 800afba:	f73f adbd 	bgt.w	800ab38 <_dtoa_r+0x4d0>
 800afbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc0:	9d00      	ldr	r5, [sp, #0]
 800afc2:	ea6f 0a03 	mvn.w	sl, r3
 800afc6:	f04f 0800 	mov.w	r8, #0
 800afca:	4631      	mov	r1, r6
 800afcc:	4620      	mov	r0, r4
 800afce:	f000 f983 	bl	800b2d8 <_Bfree>
 800afd2:	2f00      	cmp	r7, #0
 800afd4:	f43f aeb4 	beq.w	800ad40 <_dtoa_r+0x6d8>
 800afd8:	f1b8 0f00 	cmp.w	r8, #0
 800afdc:	d005      	beq.n	800afea <_dtoa_r+0x982>
 800afde:	45b8      	cmp	r8, r7
 800afe0:	d003      	beq.n	800afea <_dtoa_r+0x982>
 800afe2:	4641      	mov	r1, r8
 800afe4:	4620      	mov	r0, r4
 800afe6:	f000 f977 	bl	800b2d8 <_Bfree>
 800afea:	4639      	mov	r1, r7
 800afec:	4620      	mov	r0, r4
 800afee:	f000 f973 	bl	800b2d8 <_Bfree>
 800aff2:	e6a5      	b.n	800ad40 <_dtoa_r+0x6d8>
 800aff4:	2600      	movs	r6, #0
 800aff6:	4637      	mov	r7, r6
 800aff8:	e7e1      	b.n	800afbe <_dtoa_r+0x956>
 800affa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800affc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b000:	4637      	mov	r7, r6
 800b002:	e599      	b.n	800ab38 <_dtoa_r+0x4d0>
 800b004:	9b08      	ldr	r3, [sp, #32]
 800b006:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f000 80fd 	beq.w	800b20a <_dtoa_r+0xba2>
 800b010:	2d00      	cmp	r5, #0
 800b012:	dd05      	ble.n	800b020 <_dtoa_r+0x9b8>
 800b014:	4639      	mov	r1, r7
 800b016:	462a      	mov	r2, r5
 800b018:	4620      	mov	r0, r4
 800b01a:	f000 fb2f 	bl	800b67c <__lshift>
 800b01e:	4607      	mov	r7, r0
 800b020:	9b06      	ldr	r3, [sp, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d05c      	beq.n	800b0e0 <_dtoa_r+0xa78>
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 f915 	bl	800b258 <_Balloc>
 800b02e:	4605      	mov	r5, r0
 800b030:	b928      	cbnz	r0, 800b03e <_dtoa_r+0x9d6>
 800b032:	4b80      	ldr	r3, [pc, #512]	; (800b234 <_dtoa_r+0xbcc>)
 800b034:	4602      	mov	r2, r0
 800b036:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b03a:	f7ff bb2e 	b.w	800a69a <_dtoa_r+0x32>
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	3202      	adds	r2, #2
 800b042:	0092      	lsls	r2, r2, #2
 800b044:	f107 010c 	add.w	r1, r7, #12
 800b048:	300c      	adds	r0, #12
 800b04a:	f7fe fde1 	bl	8009c10 <memcpy>
 800b04e:	2201      	movs	r2, #1
 800b050:	4629      	mov	r1, r5
 800b052:	4620      	mov	r0, r4
 800b054:	f000 fb12 	bl	800b67c <__lshift>
 800b058:	9b00      	ldr	r3, [sp, #0]
 800b05a:	3301      	adds	r3, #1
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	9b00      	ldr	r3, [sp, #0]
 800b060:	444b      	add	r3, r9
 800b062:	9307      	str	r3, [sp, #28]
 800b064:	9b02      	ldr	r3, [sp, #8]
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	46b8      	mov	r8, r7
 800b06c:	9306      	str	r3, [sp, #24]
 800b06e:	4607      	mov	r7, r0
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	4631      	mov	r1, r6
 800b074:	3b01      	subs	r3, #1
 800b076:	4658      	mov	r0, fp
 800b078:	9302      	str	r3, [sp, #8]
 800b07a:	f7ff fa69 	bl	800a550 <quorem>
 800b07e:	4603      	mov	r3, r0
 800b080:	3330      	adds	r3, #48	; 0x30
 800b082:	9004      	str	r0, [sp, #16]
 800b084:	4641      	mov	r1, r8
 800b086:	4658      	mov	r0, fp
 800b088:	9308      	str	r3, [sp, #32]
 800b08a:	f000 fb63 	bl	800b754 <__mcmp>
 800b08e:	463a      	mov	r2, r7
 800b090:	4681      	mov	r9, r0
 800b092:	4631      	mov	r1, r6
 800b094:	4620      	mov	r0, r4
 800b096:	f000 fb79 	bl	800b78c <__mdiff>
 800b09a:	68c2      	ldr	r2, [r0, #12]
 800b09c:	9b08      	ldr	r3, [sp, #32]
 800b09e:	4605      	mov	r5, r0
 800b0a0:	bb02      	cbnz	r2, 800b0e4 <_dtoa_r+0xa7c>
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	4658      	mov	r0, fp
 800b0a6:	f000 fb55 	bl	800b754 <__mcmp>
 800b0aa:	9b08      	ldr	r3, [sp, #32]
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b0b6:	f000 f90f 	bl	800b2d8 <_Bfree>
 800b0ba:	9b05      	ldr	r3, [sp, #20]
 800b0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0be:	9d01      	ldr	r5, [sp, #4]
 800b0c0:	ea43 0102 	orr.w	r1, r3, r2
 800b0c4:	9b06      	ldr	r3, [sp, #24]
 800b0c6:	430b      	orrs	r3, r1
 800b0c8:	9b08      	ldr	r3, [sp, #32]
 800b0ca:	d10d      	bne.n	800b0e8 <_dtoa_r+0xa80>
 800b0cc:	2b39      	cmp	r3, #57	; 0x39
 800b0ce:	d029      	beq.n	800b124 <_dtoa_r+0xabc>
 800b0d0:	f1b9 0f00 	cmp.w	r9, #0
 800b0d4:	dd01      	ble.n	800b0da <_dtoa_r+0xa72>
 800b0d6:	9b04      	ldr	r3, [sp, #16]
 800b0d8:	3331      	adds	r3, #49	; 0x31
 800b0da:	9a02      	ldr	r2, [sp, #8]
 800b0dc:	7013      	strb	r3, [r2, #0]
 800b0de:	e774      	b.n	800afca <_dtoa_r+0x962>
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	e7b9      	b.n	800b058 <_dtoa_r+0x9f0>
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	e7e2      	b.n	800b0ae <_dtoa_r+0xa46>
 800b0e8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ec:	db06      	blt.n	800b0fc <_dtoa_r+0xa94>
 800b0ee:	9905      	ldr	r1, [sp, #20]
 800b0f0:	ea41 0909 	orr.w	r9, r1, r9
 800b0f4:	9906      	ldr	r1, [sp, #24]
 800b0f6:	ea59 0101 	orrs.w	r1, r9, r1
 800b0fa:	d120      	bne.n	800b13e <_dtoa_r+0xad6>
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	ddec      	ble.n	800b0da <_dtoa_r+0xa72>
 800b100:	4659      	mov	r1, fp
 800b102:	2201      	movs	r2, #1
 800b104:	4620      	mov	r0, r4
 800b106:	9301      	str	r3, [sp, #4]
 800b108:	f000 fab8 	bl	800b67c <__lshift>
 800b10c:	4631      	mov	r1, r6
 800b10e:	4683      	mov	fp, r0
 800b110:	f000 fb20 	bl	800b754 <__mcmp>
 800b114:	2800      	cmp	r0, #0
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	dc02      	bgt.n	800b120 <_dtoa_r+0xab8>
 800b11a:	d1de      	bne.n	800b0da <_dtoa_r+0xa72>
 800b11c:	07da      	lsls	r2, r3, #31
 800b11e:	d5dc      	bpl.n	800b0da <_dtoa_r+0xa72>
 800b120:	2b39      	cmp	r3, #57	; 0x39
 800b122:	d1d8      	bne.n	800b0d6 <_dtoa_r+0xa6e>
 800b124:	9a02      	ldr	r2, [sp, #8]
 800b126:	2339      	movs	r3, #57	; 0x39
 800b128:	7013      	strb	r3, [r2, #0]
 800b12a:	462b      	mov	r3, r5
 800b12c:	461d      	mov	r5, r3
 800b12e:	3b01      	subs	r3, #1
 800b130:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b134:	2a39      	cmp	r2, #57	; 0x39
 800b136:	d050      	beq.n	800b1da <_dtoa_r+0xb72>
 800b138:	3201      	adds	r2, #1
 800b13a:	701a      	strb	r2, [r3, #0]
 800b13c:	e745      	b.n	800afca <_dtoa_r+0x962>
 800b13e:	2a00      	cmp	r2, #0
 800b140:	dd03      	ble.n	800b14a <_dtoa_r+0xae2>
 800b142:	2b39      	cmp	r3, #57	; 0x39
 800b144:	d0ee      	beq.n	800b124 <_dtoa_r+0xabc>
 800b146:	3301      	adds	r3, #1
 800b148:	e7c7      	b.n	800b0da <_dtoa_r+0xa72>
 800b14a:	9a01      	ldr	r2, [sp, #4]
 800b14c:	9907      	ldr	r1, [sp, #28]
 800b14e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b152:	428a      	cmp	r2, r1
 800b154:	d02a      	beq.n	800b1ac <_dtoa_r+0xb44>
 800b156:	4659      	mov	r1, fp
 800b158:	2300      	movs	r3, #0
 800b15a:	220a      	movs	r2, #10
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 f8dd 	bl	800b31c <__multadd>
 800b162:	45b8      	cmp	r8, r7
 800b164:	4683      	mov	fp, r0
 800b166:	f04f 0300 	mov.w	r3, #0
 800b16a:	f04f 020a 	mov.w	r2, #10
 800b16e:	4641      	mov	r1, r8
 800b170:	4620      	mov	r0, r4
 800b172:	d107      	bne.n	800b184 <_dtoa_r+0xb1c>
 800b174:	f000 f8d2 	bl	800b31c <__multadd>
 800b178:	4680      	mov	r8, r0
 800b17a:	4607      	mov	r7, r0
 800b17c:	9b01      	ldr	r3, [sp, #4]
 800b17e:	3301      	adds	r3, #1
 800b180:	9301      	str	r3, [sp, #4]
 800b182:	e775      	b.n	800b070 <_dtoa_r+0xa08>
 800b184:	f000 f8ca 	bl	800b31c <__multadd>
 800b188:	4639      	mov	r1, r7
 800b18a:	4680      	mov	r8, r0
 800b18c:	2300      	movs	r3, #0
 800b18e:	220a      	movs	r2, #10
 800b190:	4620      	mov	r0, r4
 800b192:	f000 f8c3 	bl	800b31c <__multadd>
 800b196:	4607      	mov	r7, r0
 800b198:	e7f0      	b.n	800b17c <_dtoa_r+0xb14>
 800b19a:	f1b9 0f00 	cmp.w	r9, #0
 800b19e:	9a00      	ldr	r2, [sp, #0]
 800b1a0:	bfcc      	ite	gt
 800b1a2:	464d      	movgt	r5, r9
 800b1a4:	2501      	movle	r5, #1
 800b1a6:	4415      	add	r5, r2
 800b1a8:	f04f 0800 	mov.w	r8, #0
 800b1ac:	4659      	mov	r1, fp
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	f000 fa62 	bl	800b67c <__lshift>
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4683      	mov	fp, r0
 800b1bc:	f000 faca 	bl	800b754 <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	dcb2      	bgt.n	800b12a <_dtoa_r+0xac2>
 800b1c4:	d102      	bne.n	800b1cc <_dtoa_r+0xb64>
 800b1c6:	9b01      	ldr	r3, [sp, #4]
 800b1c8:	07db      	lsls	r3, r3, #31
 800b1ca:	d4ae      	bmi.n	800b12a <_dtoa_r+0xac2>
 800b1cc:	462b      	mov	r3, r5
 800b1ce:	461d      	mov	r5, r3
 800b1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1d4:	2a30      	cmp	r2, #48	; 0x30
 800b1d6:	d0fa      	beq.n	800b1ce <_dtoa_r+0xb66>
 800b1d8:	e6f7      	b.n	800afca <_dtoa_r+0x962>
 800b1da:	9a00      	ldr	r2, [sp, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d1a5      	bne.n	800b12c <_dtoa_r+0xac4>
 800b1e0:	f10a 0a01 	add.w	sl, sl, #1
 800b1e4:	2331      	movs	r3, #49	; 0x31
 800b1e6:	e779      	b.n	800b0dc <_dtoa_r+0xa74>
 800b1e8:	4b13      	ldr	r3, [pc, #76]	; (800b238 <_dtoa_r+0xbd0>)
 800b1ea:	f7ff baaf 	b.w	800a74c <_dtoa_r+0xe4>
 800b1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f47f aa86 	bne.w	800a702 <_dtoa_r+0x9a>
 800b1f6:	4b11      	ldr	r3, [pc, #68]	; (800b23c <_dtoa_r+0xbd4>)
 800b1f8:	f7ff baa8 	b.w	800a74c <_dtoa_r+0xe4>
 800b1fc:	f1b9 0f00 	cmp.w	r9, #0
 800b200:	dc03      	bgt.n	800b20a <_dtoa_r+0xba2>
 800b202:	9b05      	ldr	r3, [sp, #20]
 800b204:	2b02      	cmp	r3, #2
 800b206:	f73f aec9 	bgt.w	800af9c <_dtoa_r+0x934>
 800b20a:	9d00      	ldr	r5, [sp, #0]
 800b20c:	4631      	mov	r1, r6
 800b20e:	4658      	mov	r0, fp
 800b210:	f7ff f99e 	bl	800a550 <quorem>
 800b214:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b218:	f805 3b01 	strb.w	r3, [r5], #1
 800b21c:	9a00      	ldr	r2, [sp, #0]
 800b21e:	1aaa      	subs	r2, r5, r2
 800b220:	4591      	cmp	r9, r2
 800b222:	ddba      	ble.n	800b19a <_dtoa_r+0xb32>
 800b224:	4659      	mov	r1, fp
 800b226:	2300      	movs	r3, #0
 800b228:	220a      	movs	r2, #10
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 f876 	bl	800b31c <__multadd>
 800b230:	4683      	mov	fp, r0
 800b232:	e7eb      	b.n	800b20c <_dtoa_r+0xba4>
 800b234:	0800cb3f 	.word	0x0800cb3f
 800b238:	0800ca98 	.word	0x0800ca98
 800b23c:	0800cabc 	.word	0x0800cabc

0800b240 <_localeconv_r>:
 800b240:	4800      	ldr	r0, [pc, #0]	; (800b244 <_localeconv_r+0x4>)
 800b242:	4770      	bx	lr
 800b244:	20000168 	.word	0x20000168

0800b248 <malloc>:
 800b248:	4b02      	ldr	r3, [pc, #8]	; (800b254 <malloc+0xc>)
 800b24a:	4601      	mov	r1, r0
 800b24c:	6818      	ldr	r0, [r3, #0]
 800b24e:	f000 bbe1 	b.w	800ba14 <_malloc_r>
 800b252:	bf00      	nop
 800b254:	20000014 	.word	0x20000014

0800b258 <_Balloc>:
 800b258:	b570      	push	{r4, r5, r6, lr}
 800b25a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b25c:	4604      	mov	r4, r0
 800b25e:	460d      	mov	r5, r1
 800b260:	b976      	cbnz	r6, 800b280 <_Balloc+0x28>
 800b262:	2010      	movs	r0, #16
 800b264:	f7ff fff0 	bl	800b248 <malloc>
 800b268:	4602      	mov	r2, r0
 800b26a:	6260      	str	r0, [r4, #36]	; 0x24
 800b26c:	b920      	cbnz	r0, 800b278 <_Balloc+0x20>
 800b26e:	4b18      	ldr	r3, [pc, #96]	; (800b2d0 <_Balloc+0x78>)
 800b270:	4818      	ldr	r0, [pc, #96]	; (800b2d4 <_Balloc+0x7c>)
 800b272:	2166      	movs	r1, #102	; 0x66
 800b274:	f000 fd94 	bl	800bda0 <__assert_func>
 800b278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b27c:	6006      	str	r6, [r0, #0]
 800b27e:	60c6      	str	r6, [r0, #12]
 800b280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b282:	68f3      	ldr	r3, [r6, #12]
 800b284:	b183      	cbz	r3, 800b2a8 <_Balloc+0x50>
 800b286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b28e:	b9b8      	cbnz	r0, 800b2c0 <_Balloc+0x68>
 800b290:	2101      	movs	r1, #1
 800b292:	fa01 f605 	lsl.w	r6, r1, r5
 800b296:	1d72      	adds	r2, r6, #5
 800b298:	0092      	lsls	r2, r2, #2
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 fb5a 	bl	800b954 <_calloc_r>
 800b2a0:	b160      	cbz	r0, 800b2bc <_Balloc+0x64>
 800b2a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2a6:	e00e      	b.n	800b2c6 <_Balloc+0x6e>
 800b2a8:	2221      	movs	r2, #33	; 0x21
 800b2aa:	2104      	movs	r1, #4
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f000 fb51 	bl	800b954 <_calloc_r>
 800b2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2b4:	60f0      	str	r0, [r6, #12]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1e4      	bne.n	800b286 <_Balloc+0x2e>
 800b2bc:	2000      	movs	r0, #0
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	6802      	ldr	r2, [r0, #0]
 800b2c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2cc:	e7f7      	b.n	800b2be <_Balloc+0x66>
 800b2ce:	bf00      	nop
 800b2d0:	0800cac9 	.word	0x0800cac9
 800b2d4:	0800cb50 	.word	0x0800cb50

0800b2d8 <_Bfree>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2dc:	4605      	mov	r5, r0
 800b2de:	460c      	mov	r4, r1
 800b2e0:	b976      	cbnz	r6, 800b300 <_Bfree+0x28>
 800b2e2:	2010      	movs	r0, #16
 800b2e4:	f7ff ffb0 	bl	800b248 <malloc>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	6268      	str	r0, [r5, #36]	; 0x24
 800b2ec:	b920      	cbnz	r0, 800b2f8 <_Bfree+0x20>
 800b2ee:	4b09      	ldr	r3, [pc, #36]	; (800b314 <_Bfree+0x3c>)
 800b2f0:	4809      	ldr	r0, [pc, #36]	; (800b318 <_Bfree+0x40>)
 800b2f2:	218a      	movs	r1, #138	; 0x8a
 800b2f4:	f000 fd54 	bl	800bda0 <__assert_func>
 800b2f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2fc:	6006      	str	r6, [r0, #0]
 800b2fe:	60c6      	str	r6, [r0, #12]
 800b300:	b13c      	cbz	r4, 800b312 <_Bfree+0x3a>
 800b302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b304:	6862      	ldr	r2, [r4, #4]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b30c:	6021      	str	r1, [r4, #0]
 800b30e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b312:	bd70      	pop	{r4, r5, r6, pc}
 800b314:	0800cac9 	.word	0x0800cac9
 800b318:	0800cb50 	.word	0x0800cb50

0800b31c <__multadd>:
 800b31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b320:	690e      	ldr	r6, [r1, #16]
 800b322:	4607      	mov	r7, r0
 800b324:	4698      	mov	r8, r3
 800b326:	460c      	mov	r4, r1
 800b328:	f101 0014 	add.w	r0, r1, #20
 800b32c:	2300      	movs	r3, #0
 800b32e:	6805      	ldr	r5, [r0, #0]
 800b330:	b2a9      	uxth	r1, r5
 800b332:	fb02 8101 	mla	r1, r2, r1, r8
 800b336:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b33a:	0c2d      	lsrs	r5, r5, #16
 800b33c:	fb02 c505 	mla	r5, r2, r5, ip
 800b340:	b289      	uxth	r1, r1
 800b342:	3301      	adds	r3, #1
 800b344:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b348:	429e      	cmp	r6, r3
 800b34a:	f840 1b04 	str.w	r1, [r0], #4
 800b34e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b352:	dcec      	bgt.n	800b32e <__multadd+0x12>
 800b354:	f1b8 0f00 	cmp.w	r8, #0
 800b358:	d022      	beq.n	800b3a0 <__multadd+0x84>
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	42b3      	cmp	r3, r6
 800b35e:	dc19      	bgt.n	800b394 <__multadd+0x78>
 800b360:	6861      	ldr	r1, [r4, #4]
 800b362:	4638      	mov	r0, r7
 800b364:	3101      	adds	r1, #1
 800b366:	f7ff ff77 	bl	800b258 <_Balloc>
 800b36a:	4605      	mov	r5, r0
 800b36c:	b928      	cbnz	r0, 800b37a <__multadd+0x5e>
 800b36e:	4602      	mov	r2, r0
 800b370:	4b0d      	ldr	r3, [pc, #52]	; (800b3a8 <__multadd+0x8c>)
 800b372:	480e      	ldr	r0, [pc, #56]	; (800b3ac <__multadd+0x90>)
 800b374:	21b5      	movs	r1, #181	; 0xb5
 800b376:	f000 fd13 	bl	800bda0 <__assert_func>
 800b37a:	6922      	ldr	r2, [r4, #16]
 800b37c:	3202      	adds	r2, #2
 800b37e:	f104 010c 	add.w	r1, r4, #12
 800b382:	0092      	lsls	r2, r2, #2
 800b384:	300c      	adds	r0, #12
 800b386:	f7fe fc43 	bl	8009c10 <memcpy>
 800b38a:	4621      	mov	r1, r4
 800b38c:	4638      	mov	r0, r7
 800b38e:	f7ff ffa3 	bl	800b2d8 <_Bfree>
 800b392:	462c      	mov	r4, r5
 800b394:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b398:	3601      	adds	r6, #1
 800b39a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b39e:	6126      	str	r6, [r4, #16]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a6:	bf00      	nop
 800b3a8:	0800cb3f 	.word	0x0800cb3f
 800b3ac:	0800cb50 	.word	0x0800cb50

0800b3b0 <__hi0bits>:
 800b3b0:	0c03      	lsrs	r3, r0, #16
 800b3b2:	041b      	lsls	r3, r3, #16
 800b3b4:	b9d3      	cbnz	r3, 800b3ec <__hi0bits+0x3c>
 800b3b6:	0400      	lsls	r0, r0, #16
 800b3b8:	2310      	movs	r3, #16
 800b3ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3be:	bf04      	itt	eq
 800b3c0:	0200      	lsleq	r0, r0, #8
 800b3c2:	3308      	addeq	r3, #8
 800b3c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3c8:	bf04      	itt	eq
 800b3ca:	0100      	lsleq	r0, r0, #4
 800b3cc:	3304      	addeq	r3, #4
 800b3ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3d2:	bf04      	itt	eq
 800b3d4:	0080      	lsleq	r0, r0, #2
 800b3d6:	3302      	addeq	r3, #2
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	db05      	blt.n	800b3e8 <__hi0bits+0x38>
 800b3dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3e0:	f103 0301 	add.w	r3, r3, #1
 800b3e4:	bf08      	it	eq
 800b3e6:	2320      	moveq	r3, #32
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	4770      	bx	lr
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	e7e4      	b.n	800b3ba <__hi0bits+0xa>

0800b3f0 <__lo0bits>:
 800b3f0:	6803      	ldr	r3, [r0, #0]
 800b3f2:	f013 0207 	ands.w	r2, r3, #7
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	d00b      	beq.n	800b412 <__lo0bits+0x22>
 800b3fa:	07da      	lsls	r2, r3, #31
 800b3fc:	d424      	bmi.n	800b448 <__lo0bits+0x58>
 800b3fe:	0798      	lsls	r0, r3, #30
 800b400:	bf49      	itett	mi
 800b402:	085b      	lsrmi	r3, r3, #1
 800b404:	089b      	lsrpl	r3, r3, #2
 800b406:	2001      	movmi	r0, #1
 800b408:	600b      	strmi	r3, [r1, #0]
 800b40a:	bf5c      	itt	pl
 800b40c:	600b      	strpl	r3, [r1, #0]
 800b40e:	2002      	movpl	r0, #2
 800b410:	4770      	bx	lr
 800b412:	b298      	uxth	r0, r3
 800b414:	b9b0      	cbnz	r0, 800b444 <__lo0bits+0x54>
 800b416:	0c1b      	lsrs	r3, r3, #16
 800b418:	2010      	movs	r0, #16
 800b41a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b41e:	bf04      	itt	eq
 800b420:	0a1b      	lsreq	r3, r3, #8
 800b422:	3008      	addeq	r0, #8
 800b424:	071a      	lsls	r2, r3, #28
 800b426:	bf04      	itt	eq
 800b428:	091b      	lsreq	r3, r3, #4
 800b42a:	3004      	addeq	r0, #4
 800b42c:	079a      	lsls	r2, r3, #30
 800b42e:	bf04      	itt	eq
 800b430:	089b      	lsreq	r3, r3, #2
 800b432:	3002      	addeq	r0, #2
 800b434:	07da      	lsls	r2, r3, #31
 800b436:	d403      	bmi.n	800b440 <__lo0bits+0x50>
 800b438:	085b      	lsrs	r3, r3, #1
 800b43a:	f100 0001 	add.w	r0, r0, #1
 800b43e:	d005      	beq.n	800b44c <__lo0bits+0x5c>
 800b440:	600b      	str	r3, [r1, #0]
 800b442:	4770      	bx	lr
 800b444:	4610      	mov	r0, r2
 800b446:	e7e8      	b.n	800b41a <__lo0bits+0x2a>
 800b448:	2000      	movs	r0, #0
 800b44a:	4770      	bx	lr
 800b44c:	2020      	movs	r0, #32
 800b44e:	4770      	bx	lr

0800b450 <__i2b>:
 800b450:	b510      	push	{r4, lr}
 800b452:	460c      	mov	r4, r1
 800b454:	2101      	movs	r1, #1
 800b456:	f7ff feff 	bl	800b258 <_Balloc>
 800b45a:	4602      	mov	r2, r0
 800b45c:	b928      	cbnz	r0, 800b46a <__i2b+0x1a>
 800b45e:	4b05      	ldr	r3, [pc, #20]	; (800b474 <__i2b+0x24>)
 800b460:	4805      	ldr	r0, [pc, #20]	; (800b478 <__i2b+0x28>)
 800b462:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b466:	f000 fc9b 	bl	800bda0 <__assert_func>
 800b46a:	2301      	movs	r3, #1
 800b46c:	6144      	str	r4, [r0, #20]
 800b46e:	6103      	str	r3, [r0, #16]
 800b470:	bd10      	pop	{r4, pc}
 800b472:	bf00      	nop
 800b474:	0800cb3f 	.word	0x0800cb3f
 800b478:	0800cb50 	.word	0x0800cb50

0800b47c <__multiply>:
 800b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	4614      	mov	r4, r2
 800b482:	690a      	ldr	r2, [r1, #16]
 800b484:	6923      	ldr	r3, [r4, #16]
 800b486:	429a      	cmp	r2, r3
 800b488:	bfb8      	it	lt
 800b48a:	460b      	movlt	r3, r1
 800b48c:	460d      	mov	r5, r1
 800b48e:	bfbc      	itt	lt
 800b490:	4625      	movlt	r5, r4
 800b492:	461c      	movlt	r4, r3
 800b494:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b498:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b49c:	68ab      	ldr	r3, [r5, #8]
 800b49e:	6869      	ldr	r1, [r5, #4]
 800b4a0:	eb0a 0709 	add.w	r7, sl, r9
 800b4a4:	42bb      	cmp	r3, r7
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	bfb8      	it	lt
 800b4aa:	3101      	addlt	r1, #1
 800b4ac:	f7ff fed4 	bl	800b258 <_Balloc>
 800b4b0:	b930      	cbnz	r0, 800b4c0 <__multiply+0x44>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	4b42      	ldr	r3, [pc, #264]	; (800b5c0 <__multiply+0x144>)
 800b4b6:	4843      	ldr	r0, [pc, #268]	; (800b5c4 <__multiply+0x148>)
 800b4b8:	f240 115d 	movw	r1, #349	; 0x15d
 800b4bc:	f000 fc70 	bl	800bda0 <__assert_func>
 800b4c0:	f100 0614 	add.w	r6, r0, #20
 800b4c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b4c8:	4633      	mov	r3, r6
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	4543      	cmp	r3, r8
 800b4ce:	d31e      	bcc.n	800b50e <__multiply+0x92>
 800b4d0:	f105 0c14 	add.w	ip, r5, #20
 800b4d4:	f104 0314 	add.w	r3, r4, #20
 800b4d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b4dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b4e0:	9202      	str	r2, [sp, #8]
 800b4e2:	ebac 0205 	sub.w	r2, ip, r5
 800b4e6:	3a15      	subs	r2, #21
 800b4e8:	f022 0203 	bic.w	r2, r2, #3
 800b4ec:	3204      	adds	r2, #4
 800b4ee:	f105 0115 	add.w	r1, r5, #21
 800b4f2:	458c      	cmp	ip, r1
 800b4f4:	bf38      	it	cc
 800b4f6:	2204      	movcc	r2, #4
 800b4f8:	9201      	str	r2, [sp, #4]
 800b4fa:	9a02      	ldr	r2, [sp, #8]
 800b4fc:	9303      	str	r3, [sp, #12]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d808      	bhi.n	800b514 <__multiply+0x98>
 800b502:	2f00      	cmp	r7, #0
 800b504:	dc55      	bgt.n	800b5b2 <__multiply+0x136>
 800b506:	6107      	str	r7, [r0, #16]
 800b508:	b005      	add	sp, #20
 800b50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b50e:	f843 2b04 	str.w	r2, [r3], #4
 800b512:	e7db      	b.n	800b4cc <__multiply+0x50>
 800b514:	f8b3 a000 	ldrh.w	sl, [r3]
 800b518:	f1ba 0f00 	cmp.w	sl, #0
 800b51c:	d020      	beq.n	800b560 <__multiply+0xe4>
 800b51e:	f105 0e14 	add.w	lr, r5, #20
 800b522:	46b1      	mov	r9, r6
 800b524:	2200      	movs	r2, #0
 800b526:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b52a:	f8d9 b000 	ldr.w	fp, [r9]
 800b52e:	b2a1      	uxth	r1, r4
 800b530:	fa1f fb8b 	uxth.w	fp, fp
 800b534:	fb0a b101 	mla	r1, sl, r1, fp
 800b538:	4411      	add	r1, r2
 800b53a:	f8d9 2000 	ldr.w	r2, [r9]
 800b53e:	0c24      	lsrs	r4, r4, #16
 800b540:	0c12      	lsrs	r2, r2, #16
 800b542:	fb0a 2404 	mla	r4, sl, r4, r2
 800b546:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b54a:	b289      	uxth	r1, r1
 800b54c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b550:	45f4      	cmp	ip, lr
 800b552:	f849 1b04 	str.w	r1, [r9], #4
 800b556:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b55a:	d8e4      	bhi.n	800b526 <__multiply+0xaa>
 800b55c:	9901      	ldr	r1, [sp, #4]
 800b55e:	5072      	str	r2, [r6, r1]
 800b560:	9a03      	ldr	r2, [sp, #12]
 800b562:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b566:	3304      	adds	r3, #4
 800b568:	f1b9 0f00 	cmp.w	r9, #0
 800b56c:	d01f      	beq.n	800b5ae <__multiply+0x132>
 800b56e:	6834      	ldr	r4, [r6, #0]
 800b570:	f105 0114 	add.w	r1, r5, #20
 800b574:	46b6      	mov	lr, r6
 800b576:	f04f 0a00 	mov.w	sl, #0
 800b57a:	880a      	ldrh	r2, [r1, #0]
 800b57c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b580:	fb09 b202 	mla	r2, r9, r2, fp
 800b584:	4492      	add	sl, r2
 800b586:	b2a4      	uxth	r4, r4
 800b588:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b58c:	f84e 4b04 	str.w	r4, [lr], #4
 800b590:	f851 4b04 	ldr.w	r4, [r1], #4
 800b594:	f8be 2000 	ldrh.w	r2, [lr]
 800b598:	0c24      	lsrs	r4, r4, #16
 800b59a:	fb09 2404 	mla	r4, r9, r4, r2
 800b59e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b5a2:	458c      	cmp	ip, r1
 800b5a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b5a8:	d8e7      	bhi.n	800b57a <__multiply+0xfe>
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	50b4      	str	r4, [r6, r2]
 800b5ae:	3604      	adds	r6, #4
 800b5b0:	e7a3      	b.n	800b4fa <__multiply+0x7e>
 800b5b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1a5      	bne.n	800b506 <__multiply+0x8a>
 800b5ba:	3f01      	subs	r7, #1
 800b5bc:	e7a1      	b.n	800b502 <__multiply+0x86>
 800b5be:	bf00      	nop
 800b5c0:	0800cb3f 	.word	0x0800cb3f
 800b5c4:	0800cb50 	.word	0x0800cb50

0800b5c8 <__pow5mult>:
 800b5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5cc:	4615      	mov	r5, r2
 800b5ce:	f012 0203 	ands.w	r2, r2, #3
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	460f      	mov	r7, r1
 800b5d6:	d007      	beq.n	800b5e8 <__pow5mult+0x20>
 800b5d8:	4c25      	ldr	r4, [pc, #148]	; (800b670 <__pow5mult+0xa8>)
 800b5da:	3a01      	subs	r2, #1
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5e2:	f7ff fe9b 	bl	800b31c <__multadd>
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	10ad      	asrs	r5, r5, #2
 800b5ea:	d03d      	beq.n	800b668 <__pow5mult+0xa0>
 800b5ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5ee:	b97c      	cbnz	r4, 800b610 <__pow5mult+0x48>
 800b5f0:	2010      	movs	r0, #16
 800b5f2:	f7ff fe29 	bl	800b248 <malloc>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	6270      	str	r0, [r6, #36]	; 0x24
 800b5fa:	b928      	cbnz	r0, 800b608 <__pow5mult+0x40>
 800b5fc:	4b1d      	ldr	r3, [pc, #116]	; (800b674 <__pow5mult+0xac>)
 800b5fe:	481e      	ldr	r0, [pc, #120]	; (800b678 <__pow5mult+0xb0>)
 800b600:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b604:	f000 fbcc 	bl	800bda0 <__assert_func>
 800b608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b60c:	6004      	str	r4, [r0, #0]
 800b60e:	60c4      	str	r4, [r0, #12]
 800b610:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b618:	b94c      	cbnz	r4, 800b62e <__pow5mult+0x66>
 800b61a:	f240 2171 	movw	r1, #625	; 0x271
 800b61e:	4630      	mov	r0, r6
 800b620:	f7ff ff16 	bl	800b450 <__i2b>
 800b624:	2300      	movs	r3, #0
 800b626:	f8c8 0008 	str.w	r0, [r8, #8]
 800b62a:	4604      	mov	r4, r0
 800b62c:	6003      	str	r3, [r0, #0]
 800b62e:	f04f 0900 	mov.w	r9, #0
 800b632:	07eb      	lsls	r3, r5, #31
 800b634:	d50a      	bpl.n	800b64c <__pow5mult+0x84>
 800b636:	4639      	mov	r1, r7
 800b638:	4622      	mov	r2, r4
 800b63a:	4630      	mov	r0, r6
 800b63c:	f7ff ff1e 	bl	800b47c <__multiply>
 800b640:	4639      	mov	r1, r7
 800b642:	4680      	mov	r8, r0
 800b644:	4630      	mov	r0, r6
 800b646:	f7ff fe47 	bl	800b2d8 <_Bfree>
 800b64a:	4647      	mov	r7, r8
 800b64c:	106d      	asrs	r5, r5, #1
 800b64e:	d00b      	beq.n	800b668 <__pow5mult+0xa0>
 800b650:	6820      	ldr	r0, [r4, #0]
 800b652:	b938      	cbnz	r0, 800b664 <__pow5mult+0x9c>
 800b654:	4622      	mov	r2, r4
 800b656:	4621      	mov	r1, r4
 800b658:	4630      	mov	r0, r6
 800b65a:	f7ff ff0f 	bl	800b47c <__multiply>
 800b65e:	6020      	str	r0, [r4, #0]
 800b660:	f8c0 9000 	str.w	r9, [r0]
 800b664:	4604      	mov	r4, r0
 800b666:	e7e4      	b.n	800b632 <__pow5mult+0x6a>
 800b668:	4638      	mov	r0, r7
 800b66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b66e:	bf00      	nop
 800b670:	0800cca0 	.word	0x0800cca0
 800b674:	0800cac9 	.word	0x0800cac9
 800b678:	0800cb50 	.word	0x0800cb50

0800b67c <__lshift>:
 800b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	460c      	mov	r4, r1
 800b682:	6849      	ldr	r1, [r1, #4]
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b68a:	68a3      	ldr	r3, [r4, #8]
 800b68c:	4607      	mov	r7, r0
 800b68e:	4691      	mov	r9, r2
 800b690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b694:	f108 0601 	add.w	r6, r8, #1
 800b698:	42b3      	cmp	r3, r6
 800b69a:	db0b      	blt.n	800b6b4 <__lshift+0x38>
 800b69c:	4638      	mov	r0, r7
 800b69e:	f7ff fddb 	bl	800b258 <_Balloc>
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	b948      	cbnz	r0, 800b6ba <__lshift+0x3e>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	4b28      	ldr	r3, [pc, #160]	; (800b74c <__lshift+0xd0>)
 800b6aa:	4829      	ldr	r0, [pc, #164]	; (800b750 <__lshift+0xd4>)
 800b6ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6b0:	f000 fb76 	bl	800bda0 <__assert_func>
 800b6b4:	3101      	adds	r1, #1
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	e7ee      	b.n	800b698 <__lshift+0x1c>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f100 0114 	add.w	r1, r0, #20
 800b6c0:	f100 0210 	add.w	r2, r0, #16
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	4553      	cmp	r3, sl
 800b6c8:	db33      	blt.n	800b732 <__lshift+0xb6>
 800b6ca:	6920      	ldr	r0, [r4, #16]
 800b6cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6d0:	f104 0314 	add.w	r3, r4, #20
 800b6d4:	f019 091f 	ands.w	r9, r9, #31
 800b6d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6e0:	d02b      	beq.n	800b73a <__lshift+0xbe>
 800b6e2:	f1c9 0e20 	rsb	lr, r9, #32
 800b6e6:	468a      	mov	sl, r1
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	6818      	ldr	r0, [r3, #0]
 800b6ec:	fa00 f009 	lsl.w	r0, r0, r9
 800b6f0:	4302      	orrs	r2, r0
 800b6f2:	f84a 2b04 	str.w	r2, [sl], #4
 800b6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6fa:	459c      	cmp	ip, r3
 800b6fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b700:	d8f3      	bhi.n	800b6ea <__lshift+0x6e>
 800b702:	ebac 0304 	sub.w	r3, ip, r4
 800b706:	3b15      	subs	r3, #21
 800b708:	f023 0303 	bic.w	r3, r3, #3
 800b70c:	3304      	adds	r3, #4
 800b70e:	f104 0015 	add.w	r0, r4, #21
 800b712:	4584      	cmp	ip, r0
 800b714:	bf38      	it	cc
 800b716:	2304      	movcc	r3, #4
 800b718:	50ca      	str	r2, [r1, r3]
 800b71a:	b10a      	cbz	r2, 800b720 <__lshift+0xa4>
 800b71c:	f108 0602 	add.w	r6, r8, #2
 800b720:	3e01      	subs	r6, #1
 800b722:	4638      	mov	r0, r7
 800b724:	612e      	str	r6, [r5, #16]
 800b726:	4621      	mov	r1, r4
 800b728:	f7ff fdd6 	bl	800b2d8 <_Bfree>
 800b72c:	4628      	mov	r0, r5
 800b72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b732:	f842 0f04 	str.w	r0, [r2, #4]!
 800b736:	3301      	adds	r3, #1
 800b738:	e7c5      	b.n	800b6c6 <__lshift+0x4a>
 800b73a:	3904      	subs	r1, #4
 800b73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b740:	f841 2f04 	str.w	r2, [r1, #4]!
 800b744:	459c      	cmp	ip, r3
 800b746:	d8f9      	bhi.n	800b73c <__lshift+0xc0>
 800b748:	e7ea      	b.n	800b720 <__lshift+0xa4>
 800b74a:	bf00      	nop
 800b74c:	0800cb3f 	.word	0x0800cb3f
 800b750:	0800cb50 	.word	0x0800cb50

0800b754 <__mcmp>:
 800b754:	b530      	push	{r4, r5, lr}
 800b756:	6902      	ldr	r2, [r0, #16]
 800b758:	690c      	ldr	r4, [r1, #16]
 800b75a:	1b12      	subs	r2, r2, r4
 800b75c:	d10e      	bne.n	800b77c <__mcmp+0x28>
 800b75e:	f100 0314 	add.w	r3, r0, #20
 800b762:	3114      	adds	r1, #20
 800b764:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b768:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b76c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b770:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b774:	42a5      	cmp	r5, r4
 800b776:	d003      	beq.n	800b780 <__mcmp+0x2c>
 800b778:	d305      	bcc.n	800b786 <__mcmp+0x32>
 800b77a:	2201      	movs	r2, #1
 800b77c:	4610      	mov	r0, r2
 800b77e:	bd30      	pop	{r4, r5, pc}
 800b780:	4283      	cmp	r3, r0
 800b782:	d3f3      	bcc.n	800b76c <__mcmp+0x18>
 800b784:	e7fa      	b.n	800b77c <__mcmp+0x28>
 800b786:	f04f 32ff 	mov.w	r2, #4294967295
 800b78a:	e7f7      	b.n	800b77c <__mcmp+0x28>

0800b78c <__mdiff>:
 800b78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b790:	460c      	mov	r4, r1
 800b792:	4606      	mov	r6, r0
 800b794:	4611      	mov	r1, r2
 800b796:	4620      	mov	r0, r4
 800b798:	4617      	mov	r7, r2
 800b79a:	f7ff ffdb 	bl	800b754 <__mcmp>
 800b79e:	1e05      	subs	r5, r0, #0
 800b7a0:	d110      	bne.n	800b7c4 <__mdiff+0x38>
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f7ff fd57 	bl	800b258 <_Balloc>
 800b7aa:	b930      	cbnz	r0, 800b7ba <__mdiff+0x2e>
 800b7ac:	4b39      	ldr	r3, [pc, #228]	; (800b894 <__mdiff+0x108>)
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	f240 2132 	movw	r1, #562	; 0x232
 800b7b4:	4838      	ldr	r0, [pc, #224]	; (800b898 <__mdiff+0x10c>)
 800b7b6:	f000 faf3 	bl	800bda0 <__assert_func>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c4:	bfa4      	itt	ge
 800b7c6:	463b      	movge	r3, r7
 800b7c8:	4627      	movge	r7, r4
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	bfa6      	itte	ge
 800b7d0:	461c      	movge	r4, r3
 800b7d2:	2500      	movge	r5, #0
 800b7d4:	2501      	movlt	r5, #1
 800b7d6:	f7ff fd3f 	bl	800b258 <_Balloc>
 800b7da:	b920      	cbnz	r0, 800b7e6 <__mdiff+0x5a>
 800b7dc:	4b2d      	ldr	r3, [pc, #180]	; (800b894 <__mdiff+0x108>)
 800b7de:	4602      	mov	r2, r0
 800b7e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7e4:	e7e6      	b.n	800b7b4 <__mdiff+0x28>
 800b7e6:	693e      	ldr	r6, [r7, #16]
 800b7e8:	60c5      	str	r5, [r0, #12]
 800b7ea:	6925      	ldr	r5, [r4, #16]
 800b7ec:	f107 0114 	add.w	r1, r7, #20
 800b7f0:	f104 0914 	add.w	r9, r4, #20
 800b7f4:	f100 0e14 	add.w	lr, r0, #20
 800b7f8:	f107 0210 	add.w	r2, r7, #16
 800b7fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b800:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b804:	46f2      	mov	sl, lr
 800b806:	2700      	movs	r7, #0
 800b808:	f859 3b04 	ldr.w	r3, [r9], #4
 800b80c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b810:	fa1f f883 	uxth.w	r8, r3
 800b814:	fa17 f78b 	uxtah	r7, r7, fp
 800b818:	0c1b      	lsrs	r3, r3, #16
 800b81a:	eba7 0808 	sub.w	r8, r7, r8
 800b81e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b822:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b826:	fa1f f888 	uxth.w	r8, r8
 800b82a:	141f      	asrs	r7, r3, #16
 800b82c:	454d      	cmp	r5, r9
 800b82e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b832:	f84a 3b04 	str.w	r3, [sl], #4
 800b836:	d8e7      	bhi.n	800b808 <__mdiff+0x7c>
 800b838:	1b2b      	subs	r3, r5, r4
 800b83a:	3b15      	subs	r3, #21
 800b83c:	f023 0303 	bic.w	r3, r3, #3
 800b840:	3304      	adds	r3, #4
 800b842:	3415      	adds	r4, #21
 800b844:	42a5      	cmp	r5, r4
 800b846:	bf38      	it	cc
 800b848:	2304      	movcc	r3, #4
 800b84a:	4419      	add	r1, r3
 800b84c:	4473      	add	r3, lr
 800b84e:	469e      	mov	lr, r3
 800b850:	460d      	mov	r5, r1
 800b852:	4565      	cmp	r5, ip
 800b854:	d30e      	bcc.n	800b874 <__mdiff+0xe8>
 800b856:	f10c 0203 	add.w	r2, ip, #3
 800b85a:	1a52      	subs	r2, r2, r1
 800b85c:	f022 0203 	bic.w	r2, r2, #3
 800b860:	3903      	subs	r1, #3
 800b862:	458c      	cmp	ip, r1
 800b864:	bf38      	it	cc
 800b866:	2200      	movcc	r2, #0
 800b868:	441a      	add	r2, r3
 800b86a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b86e:	b17b      	cbz	r3, 800b890 <__mdiff+0x104>
 800b870:	6106      	str	r6, [r0, #16]
 800b872:	e7a5      	b.n	800b7c0 <__mdiff+0x34>
 800b874:	f855 8b04 	ldr.w	r8, [r5], #4
 800b878:	fa17 f488 	uxtah	r4, r7, r8
 800b87c:	1422      	asrs	r2, r4, #16
 800b87e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b882:	b2a4      	uxth	r4, r4
 800b884:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b888:	f84e 4b04 	str.w	r4, [lr], #4
 800b88c:	1417      	asrs	r7, r2, #16
 800b88e:	e7e0      	b.n	800b852 <__mdiff+0xc6>
 800b890:	3e01      	subs	r6, #1
 800b892:	e7ea      	b.n	800b86a <__mdiff+0xde>
 800b894:	0800cb3f 	.word	0x0800cb3f
 800b898:	0800cb50 	.word	0x0800cb50

0800b89c <__d2b>:
 800b89c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8a0:	4689      	mov	r9, r1
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	ec57 6b10 	vmov	r6, r7, d0
 800b8a8:	4690      	mov	r8, r2
 800b8aa:	f7ff fcd5 	bl	800b258 <_Balloc>
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	b930      	cbnz	r0, 800b8c0 <__d2b+0x24>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	4b25      	ldr	r3, [pc, #148]	; (800b94c <__d2b+0xb0>)
 800b8b6:	4826      	ldr	r0, [pc, #152]	; (800b950 <__d2b+0xb4>)
 800b8b8:	f240 310a 	movw	r1, #778	; 0x30a
 800b8bc:	f000 fa70 	bl	800bda0 <__assert_func>
 800b8c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b8c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8c8:	bb35      	cbnz	r5, 800b918 <__d2b+0x7c>
 800b8ca:	2e00      	cmp	r6, #0
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	d028      	beq.n	800b922 <__d2b+0x86>
 800b8d0:	4668      	mov	r0, sp
 800b8d2:	9600      	str	r6, [sp, #0]
 800b8d4:	f7ff fd8c 	bl	800b3f0 <__lo0bits>
 800b8d8:	9900      	ldr	r1, [sp, #0]
 800b8da:	b300      	cbz	r0, 800b91e <__d2b+0x82>
 800b8dc:	9a01      	ldr	r2, [sp, #4]
 800b8de:	f1c0 0320 	rsb	r3, r0, #32
 800b8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e6:	430b      	orrs	r3, r1
 800b8e8:	40c2      	lsrs	r2, r0
 800b8ea:	6163      	str	r3, [r4, #20]
 800b8ec:	9201      	str	r2, [sp, #4]
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	61a3      	str	r3, [r4, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bf14      	ite	ne
 800b8f6:	2202      	movne	r2, #2
 800b8f8:	2201      	moveq	r2, #1
 800b8fa:	6122      	str	r2, [r4, #16]
 800b8fc:	b1d5      	cbz	r5, 800b934 <__d2b+0x98>
 800b8fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b902:	4405      	add	r5, r0
 800b904:	f8c9 5000 	str.w	r5, [r9]
 800b908:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b90c:	f8c8 0000 	str.w	r0, [r8]
 800b910:	4620      	mov	r0, r4
 800b912:	b003      	add	sp, #12
 800b914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b91c:	e7d5      	b.n	800b8ca <__d2b+0x2e>
 800b91e:	6161      	str	r1, [r4, #20]
 800b920:	e7e5      	b.n	800b8ee <__d2b+0x52>
 800b922:	a801      	add	r0, sp, #4
 800b924:	f7ff fd64 	bl	800b3f0 <__lo0bits>
 800b928:	9b01      	ldr	r3, [sp, #4]
 800b92a:	6163      	str	r3, [r4, #20]
 800b92c:	2201      	movs	r2, #1
 800b92e:	6122      	str	r2, [r4, #16]
 800b930:	3020      	adds	r0, #32
 800b932:	e7e3      	b.n	800b8fc <__d2b+0x60>
 800b934:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b938:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b93c:	f8c9 0000 	str.w	r0, [r9]
 800b940:	6918      	ldr	r0, [r3, #16]
 800b942:	f7ff fd35 	bl	800b3b0 <__hi0bits>
 800b946:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b94a:	e7df      	b.n	800b90c <__d2b+0x70>
 800b94c:	0800cb3f 	.word	0x0800cb3f
 800b950:	0800cb50 	.word	0x0800cb50

0800b954 <_calloc_r>:
 800b954:	b513      	push	{r0, r1, r4, lr}
 800b956:	434a      	muls	r2, r1
 800b958:	4611      	mov	r1, r2
 800b95a:	9201      	str	r2, [sp, #4]
 800b95c:	f000 f85a 	bl	800ba14 <_malloc_r>
 800b960:	4604      	mov	r4, r0
 800b962:	b118      	cbz	r0, 800b96c <_calloc_r+0x18>
 800b964:	9a01      	ldr	r2, [sp, #4]
 800b966:	2100      	movs	r1, #0
 800b968:	f7fe f960 	bl	8009c2c <memset>
 800b96c:	4620      	mov	r0, r4
 800b96e:	b002      	add	sp, #8
 800b970:	bd10      	pop	{r4, pc}
	...

0800b974 <_free_r>:
 800b974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b976:	2900      	cmp	r1, #0
 800b978:	d048      	beq.n	800ba0c <_free_r+0x98>
 800b97a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b97e:	9001      	str	r0, [sp, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f1a1 0404 	sub.w	r4, r1, #4
 800b986:	bfb8      	it	lt
 800b988:	18e4      	addlt	r4, r4, r3
 800b98a:	f000 fa65 	bl	800be58 <__malloc_lock>
 800b98e:	4a20      	ldr	r2, [pc, #128]	; (800ba10 <_free_r+0x9c>)
 800b990:	9801      	ldr	r0, [sp, #4]
 800b992:	6813      	ldr	r3, [r2, #0]
 800b994:	4615      	mov	r5, r2
 800b996:	b933      	cbnz	r3, 800b9a6 <_free_r+0x32>
 800b998:	6063      	str	r3, [r4, #4]
 800b99a:	6014      	str	r4, [r2, #0]
 800b99c:	b003      	add	sp, #12
 800b99e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9a2:	f000 ba5f 	b.w	800be64 <__malloc_unlock>
 800b9a6:	42a3      	cmp	r3, r4
 800b9a8:	d90b      	bls.n	800b9c2 <_free_r+0x4e>
 800b9aa:	6821      	ldr	r1, [r4, #0]
 800b9ac:	1862      	adds	r2, r4, r1
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	bf04      	itt	eq
 800b9b2:	681a      	ldreq	r2, [r3, #0]
 800b9b4:	685b      	ldreq	r3, [r3, #4]
 800b9b6:	6063      	str	r3, [r4, #4]
 800b9b8:	bf04      	itt	eq
 800b9ba:	1852      	addeq	r2, r2, r1
 800b9bc:	6022      	streq	r2, [r4, #0]
 800b9be:	602c      	str	r4, [r5, #0]
 800b9c0:	e7ec      	b.n	800b99c <_free_r+0x28>
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	b10b      	cbz	r3, 800b9cc <_free_r+0x58>
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	d9fa      	bls.n	800b9c2 <_free_r+0x4e>
 800b9cc:	6811      	ldr	r1, [r2, #0]
 800b9ce:	1855      	adds	r5, r2, r1
 800b9d0:	42a5      	cmp	r5, r4
 800b9d2:	d10b      	bne.n	800b9ec <_free_r+0x78>
 800b9d4:	6824      	ldr	r4, [r4, #0]
 800b9d6:	4421      	add	r1, r4
 800b9d8:	1854      	adds	r4, r2, r1
 800b9da:	42a3      	cmp	r3, r4
 800b9dc:	6011      	str	r1, [r2, #0]
 800b9de:	d1dd      	bne.n	800b99c <_free_r+0x28>
 800b9e0:	681c      	ldr	r4, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	6053      	str	r3, [r2, #4]
 800b9e6:	4421      	add	r1, r4
 800b9e8:	6011      	str	r1, [r2, #0]
 800b9ea:	e7d7      	b.n	800b99c <_free_r+0x28>
 800b9ec:	d902      	bls.n	800b9f4 <_free_r+0x80>
 800b9ee:	230c      	movs	r3, #12
 800b9f0:	6003      	str	r3, [r0, #0]
 800b9f2:	e7d3      	b.n	800b99c <_free_r+0x28>
 800b9f4:	6825      	ldr	r5, [r4, #0]
 800b9f6:	1961      	adds	r1, r4, r5
 800b9f8:	428b      	cmp	r3, r1
 800b9fa:	bf04      	itt	eq
 800b9fc:	6819      	ldreq	r1, [r3, #0]
 800b9fe:	685b      	ldreq	r3, [r3, #4]
 800ba00:	6063      	str	r3, [r4, #4]
 800ba02:	bf04      	itt	eq
 800ba04:	1949      	addeq	r1, r1, r5
 800ba06:	6021      	streq	r1, [r4, #0]
 800ba08:	6054      	str	r4, [r2, #4]
 800ba0a:	e7c7      	b.n	800b99c <_free_r+0x28>
 800ba0c:	b003      	add	sp, #12
 800ba0e:	bd30      	pop	{r4, r5, pc}
 800ba10:	20008438 	.word	0x20008438

0800ba14 <_malloc_r>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	1ccd      	adds	r5, r1, #3
 800ba18:	f025 0503 	bic.w	r5, r5, #3
 800ba1c:	3508      	adds	r5, #8
 800ba1e:	2d0c      	cmp	r5, #12
 800ba20:	bf38      	it	cc
 800ba22:	250c      	movcc	r5, #12
 800ba24:	2d00      	cmp	r5, #0
 800ba26:	4606      	mov	r6, r0
 800ba28:	db01      	blt.n	800ba2e <_malloc_r+0x1a>
 800ba2a:	42a9      	cmp	r1, r5
 800ba2c:	d903      	bls.n	800ba36 <_malloc_r+0x22>
 800ba2e:	230c      	movs	r3, #12
 800ba30:	6033      	str	r3, [r6, #0]
 800ba32:	2000      	movs	r0, #0
 800ba34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba36:	f000 fa0f 	bl	800be58 <__malloc_lock>
 800ba3a:	4921      	ldr	r1, [pc, #132]	; (800bac0 <_malloc_r+0xac>)
 800ba3c:	680a      	ldr	r2, [r1, #0]
 800ba3e:	4614      	mov	r4, r2
 800ba40:	b99c      	cbnz	r4, 800ba6a <_malloc_r+0x56>
 800ba42:	4f20      	ldr	r7, [pc, #128]	; (800bac4 <_malloc_r+0xb0>)
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	b923      	cbnz	r3, 800ba52 <_malloc_r+0x3e>
 800ba48:	4621      	mov	r1, r4
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f000 f998 	bl	800bd80 <_sbrk_r>
 800ba50:	6038      	str	r0, [r7, #0]
 800ba52:	4629      	mov	r1, r5
 800ba54:	4630      	mov	r0, r6
 800ba56:	f000 f993 	bl	800bd80 <_sbrk_r>
 800ba5a:	1c43      	adds	r3, r0, #1
 800ba5c:	d123      	bne.n	800baa6 <_malloc_r+0x92>
 800ba5e:	230c      	movs	r3, #12
 800ba60:	6033      	str	r3, [r6, #0]
 800ba62:	4630      	mov	r0, r6
 800ba64:	f000 f9fe 	bl	800be64 <__malloc_unlock>
 800ba68:	e7e3      	b.n	800ba32 <_malloc_r+0x1e>
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	1b5b      	subs	r3, r3, r5
 800ba6e:	d417      	bmi.n	800baa0 <_malloc_r+0x8c>
 800ba70:	2b0b      	cmp	r3, #11
 800ba72:	d903      	bls.n	800ba7c <_malloc_r+0x68>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	441c      	add	r4, r3
 800ba78:	6025      	str	r5, [r4, #0]
 800ba7a:	e004      	b.n	800ba86 <_malloc_r+0x72>
 800ba7c:	6863      	ldr	r3, [r4, #4]
 800ba7e:	42a2      	cmp	r2, r4
 800ba80:	bf0c      	ite	eq
 800ba82:	600b      	streq	r3, [r1, #0]
 800ba84:	6053      	strne	r3, [r2, #4]
 800ba86:	4630      	mov	r0, r6
 800ba88:	f000 f9ec 	bl	800be64 <__malloc_unlock>
 800ba8c:	f104 000b 	add.w	r0, r4, #11
 800ba90:	1d23      	adds	r3, r4, #4
 800ba92:	f020 0007 	bic.w	r0, r0, #7
 800ba96:	1ac2      	subs	r2, r0, r3
 800ba98:	d0cc      	beq.n	800ba34 <_malloc_r+0x20>
 800ba9a:	1a1b      	subs	r3, r3, r0
 800ba9c:	50a3      	str	r3, [r4, r2]
 800ba9e:	e7c9      	b.n	800ba34 <_malloc_r+0x20>
 800baa0:	4622      	mov	r2, r4
 800baa2:	6864      	ldr	r4, [r4, #4]
 800baa4:	e7cc      	b.n	800ba40 <_malloc_r+0x2c>
 800baa6:	1cc4      	adds	r4, r0, #3
 800baa8:	f024 0403 	bic.w	r4, r4, #3
 800baac:	42a0      	cmp	r0, r4
 800baae:	d0e3      	beq.n	800ba78 <_malloc_r+0x64>
 800bab0:	1a21      	subs	r1, r4, r0
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 f964 	bl	800bd80 <_sbrk_r>
 800bab8:	3001      	adds	r0, #1
 800baba:	d1dd      	bne.n	800ba78 <_malloc_r+0x64>
 800babc:	e7cf      	b.n	800ba5e <_malloc_r+0x4a>
 800babe:	bf00      	nop
 800bac0:	20008438 	.word	0x20008438
 800bac4:	2000843c 	.word	0x2000843c

0800bac8 <__ssputs_r>:
 800bac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bacc:	688e      	ldr	r6, [r1, #8]
 800bace:	429e      	cmp	r6, r3
 800bad0:	4682      	mov	sl, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	4690      	mov	r8, r2
 800bad6:	461f      	mov	r7, r3
 800bad8:	d838      	bhi.n	800bb4c <__ssputs_r+0x84>
 800bada:	898a      	ldrh	r2, [r1, #12]
 800badc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bae0:	d032      	beq.n	800bb48 <__ssputs_r+0x80>
 800bae2:	6825      	ldr	r5, [r4, #0]
 800bae4:	6909      	ldr	r1, [r1, #16]
 800bae6:	eba5 0901 	sub.w	r9, r5, r1
 800baea:	6965      	ldr	r5, [r4, #20]
 800baec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800baf4:	3301      	adds	r3, #1
 800baf6:	444b      	add	r3, r9
 800baf8:	106d      	asrs	r5, r5, #1
 800bafa:	429d      	cmp	r5, r3
 800bafc:	bf38      	it	cc
 800bafe:	461d      	movcc	r5, r3
 800bb00:	0553      	lsls	r3, r2, #21
 800bb02:	d531      	bpl.n	800bb68 <__ssputs_r+0xa0>
 800bb04:	4629      	mov	r1, r5
 800bb06:	f7ff ff85 	bl	800ba14 <_malloc_r>
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	b950      	cbnz	r0, 800bb24 <__ssputs_r+0x5c>
 800bb0e:	230c      	movs	r3, #12
 800bb10:	f8ca 3000 	str.w	r3, [sl]
 800bb14:	89a3      	ldrh	r3, [r4, #12]
 800bb16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb1a:	81a3      	strh	r3, [r4, #12]
 800bb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb24:	6921      	ldr	r1, [r4, #16]
 800bb26:	464a      	mov	r2, r9
 800bb28:	f7fe f872 	bl	8009c10 <memcpy>
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb36:	81a3      	strh	r3, [r4, #12]
 800bb38:	6126      	str	r6, [r4, #16]
 800bb3a:	6165      	str	r5, [r4, #20]
 800bb3c:	444e      	add	r6, r9
 800bb3e:	eba5 0509 	sub.w	r5, r5, r9
 800bb42:	6026      	str	r6, [r4, #0]
 800bb44:	60a5      	str	r5, [r4, #8]
 800bb46:	463e      	mov	r6, r7
 800bb48:	42be      	cmp	r6, r7
 800bb4a:	d900      	bls.n	800bb4e <__ssputs_r+0x86>
 800bb4c:	463e      	mov	r6, r7
 800bb4e:	4632      	mov	r2, r6
 800bb50:	6820      	ldr	r0, [r4, #0]
 800bb52:	4641      	mov	r1, r8
 800bb54:	f000 f966 	bl	800be24 <memmove>
 800bb58:	68a3      	ldr	r3, [r4, #8]
 800bb5a:	6822      	ldr	r2, [r4, #0]
 800bb5c:	1b9b      	subs	r3, r3, r6
 800bb5e:	4432      	add	r2, r6
 800bb60:	60a3      	str	r3, [r4, #8]
 800bb62:	6022      	str	r2, [r4, #0]
 800bb64:	2000      	movs	r0, #0
 800bb66:	e7db      	b.n	800bb20 <__ssputs_r+0x58>
 800bb68:	462a      	mov	r2, r5
 800bb6a:	f000 f981 	bl	800be70 <_realloc_r>
 800bb6e:	4606      	mov	r6, r0
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d1e1      	bne.n	800bb38 <__ssputs_r+0x70>
 800bb74:	6921      	ldr	r1, [r4, #16]
 800bb76:	4650      	mov	r0, sl
 800bb78:	f7ff fefc 	bl	800b974 <_free_r>
 800bb7c:	e7c7      	b.n	800bb0e <__ssputs_r+0x46>
	...

0800bb80 <_svfiprintf_r>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	4698      	mov	r8, r3
 800bb86:	898b      	ldrh	r3, [r1, #12]
 800bb88:	061b      	lsls	r3, r3, #24
 800bb8a:	b09d      	sub	sp, #116	; 0x74
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	460d      	mov	r5, r1
 800bb90:	4614      	mov	r4, r2
 800bb92:	d50e      	bpl.n	800bbb2 <_svfiprintf_r+0x32>
 800bb94:	690b      	ldr	r3, [r1, #16]
 800bb96:	b963      	cbnz	r3, 800bbb2 <_svfiprintf_r+0x32>
 800bb98:	2140      	movs	r1, #64	; 0x40
 800bb9a:	f7ff ff3b 	bl	800ba14 <_malloc_r>
 800bb9e:	6028      	str	r0, [r5, #0]
 800bba0:	6128      	str	r0, [r5, #16]
 800bba2:	b920      	cbnz	r0, 800bbae <_svfiprintf_r+0x2e>
 800bba4:	230c      	movs	r3, #12
 800bba6:	603b      	str	r3, [r7, #0]
 800bba8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbac:	e0d1      	b.n	800bd52 <_svfiprintf_r+0x1d2>
 800bbae:	2340      	movs	r3, #64	; 0x40
 800bbb0:	616b      	str	r3, [r5, #20]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb6:	2320      	movs	r3, #32
 800bbb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbc0:	2330      	movs	r3, #48	; 0x30
 800bbc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd6c <_svfiprintf_r+0x1ec>
 800bbc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbca:	f04f 0901 	mov.w	r9, #1
 800bbce:	4623      	mov	r3, r4
 800bbd0:	469a      	mov	sl, r3
 800bbd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbd6:	b10a      	cbz	r2, 800bbdc <_svfiprintf_r+0x5c>
 800bbd8:	2a25      	cmp	r2, #37	; 0x25
 800bbda:	d1f9      	bne.n	800bbd0 <_svfiprintf_r+0x50>
 800bbdc:	ebba 0b04 	subs.w	fp, sl, r4
 800bbe0:	d00b      	beq.n	800bbfa <_svfiprintf_r+0x7a>
 800bbe2:	465b      	mov	r3, fp
 800bbe4:	4622      	mov	r2, r4
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	4638      	mov	r0, r7
 800bbea:	f7ff ff6d 	bl	800bac8 <__ssputs_r>
 800bbee:	3001      	adds	r0, #1
 800bbf0:	f000 80aa 	beq.w	800bd48 <_svfiprintf_r+0x1c8>
 800bbf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbf6:	445a      	add	r2, fp
 800bbf8:	9209      	str	r2, [sp, #36]	; 0x24
 800bbfa:	f89a 3000 	ldrb.w	r3, [sl]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f000 80a2 	beq.w	800bd48 <_svfiprintf_r+0x1c8>
 800bc04:	2300      	movs	r3, #0
 800bc06:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc0e:	f10a 0a01 	add.w	sl, sl, #1
 800bc12:	9304      	str	r3, [sp, #16]
 800bc14:	9307      	str	r3, [sp, #28]
 800bc16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc1a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc1c:	4654      	mov	r4, sl
 800bc1e:	2205      	movs	r2, #5
 800bc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc24:	4851      	ldr	r0, [pc, #324]	; (800bd6c <_svfiprintf_r+0x1ec>)
 800bc26:	f7f4 fadb 	bl	80001e0 <memchr>
 800bc2a:	9a04      	ldr	r2, [sp, #16]
 800bc2c:	b9d8      	cbnz	r0, 800bc66 <_svfiprintf_r+0xe6>
 800bc2e:	06d0      	lsls	r0, r2, #27
 800bc30:	bf44      	itt	mi
 800bc32:	2320      	movmi	r3, #32
 800bc34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc38:	0711      	lsls	r1, r2, #28
 800bc3a:	bf44      	itt	mi
 800bc3c:	232b      	movmi	r3, #43	; 0x2b
 800bc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc42:	f89a 3000 	ldrb.w	r3, [sl]
 800bc46:	2b2a      	cmp	r3, #42	; 0x2a
 800bc48:	d015      	beq.n	800bc76 <_svfiprintf_r+0xf6>
 800bc4a:	9a07      	ldr	r2, [sp, #28]
 800bc4c:	4654      	mov	r4, sl
 800bc4e:	2000      	movs	r0, #0
 800bc50:	f04f 0c0a 	mov.w	ip, #10
 800bc54:	4621      	mov	r1, r4
 800bc56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc5a:	3b30      	subs	r3, #48	; 0x30
 800bc5c:	2b09      	cmp	r3, #9
 800bc5e:	d94e      	bls.n	800bcfe <_svfiprintf_r+0x17e>
 800bc60:	b1b0      	cbz	r0, 800bc90 <_svfiprintf_r+0x110>
 800bc62:	9207      	str	r2, [sp, #28]
 800bc64:	e014      	b.n	800bc90 <_svfiprintf_r+0x110>
 800bc66:	eba0 0308 	sub.w	r3, r0, r8
 800bc6a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	9304      	str	r3, [sp, #16]
 800bc72:	46a2      	mov	sl, r4
 800bc74:	e7d2      	b.n	800bc1c <_svfiprintf_r+0x9c>
 800bc76:	9b03      	ldr	r3, [sp, #12]
 800bc78:	1d19      	adds	r1, r3, #4
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	9103      	str	r1, [sp, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	bfbb      	ittet	lt
 800bc82:	425b      	neglt	r3, r3
 800bc84:	f042 0202 	orrlt.w	r2, r2, #2
 800bc88:	9307      	strge	r3, [sp, #28]
 800bc8a:	9307      	strlt	r3, [sp, #28]
 800bc8c:	bfb8      	it	lt
 800bc8e:	9204      	strlt	r2, [sp, #16]
 800bc90:	7823      	ldrb	r3, [r4, #0]
 800bc92:	2b2e      	cmp	r3, #46	; 0x2e
 800bc94:	d10c      	bne.n	800bcb0 <_svfiprintf_r+0x130>
 800bc96:	7863      	ldrb	r3, [r4, #1]
 800bc98:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9a:	d135      	bne.n	800bd08 <_svfiprintf_r+0x188>
 800bc9c:	9b03      	ldr	r3, [sp, #12]
 800bc9e:	1d1a      	adds	r2, r3, #4
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	9203      	str	r2, [sp, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	bfb8      	it	lt
 800bca8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcac:	3402      	adds	r4, #2
 800bcae:	9305      	str	r3, [sp, #20]
 800bcb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd7c <_svfiprintf_r+0x1fc>
 800bcb4:	7821      	ldrb	r1, [r4, #0]
 800bcb6:	2203      	movs	r2, #3
 800bcb8:	4650      	mov	r0, sl
 800bcba:	f7f4 fa91 	bl	80001e0 <memchr>
 800bcbe:	b140      	cbz	r0, 800bcd2 <_svfiprintf_r+0x152>
 800bcc0:	2340      	movs	r3, #64	; 0x40
 800bcc2:	eba0 000a 	sub.w	r0, r0, sl
 800bcc6:	fa03 f000 	lsl.w	r0, r3, r0
 800bcca:	9b04      	ldr	r3, [sp, #16]
 800bccc:	4303      	orrs	r3, r0
 800bcce:	3401      	adds	r4, #1
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd6:	4826      	ldr	r0, [pc, #152]	; (800bd70 <_svfiprintf_r+0x1f0>)
 800bcd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcdc:	2206      	movs	r2, #6
 800bcde:	f7f4 fa7f 	bl	80001e0 <memchr>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d038      	beq.n	800bd58 <_svfiprintf_r+0x1d8>
 800bce6:	4b23      	ldr	r3, [pc, #140]	; (800bd74 <_svfiprintf_r+0x1f4>)
 800bce8:	bb1b      	cbnz	r3, 800bd32 <_svfiprintf_r+0x1b2>
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	3307      	adds	r3, #7
 800bcee:	f023 0307 	bic.w	r3, r3, #7
 800bcf2:	3308      	adds	r3, #8
 800bcf4:	9303      	str	r3, [sp, #12]
 800bcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf8:	4433      	add	r3, r6
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	e767      	b.n	800bbce <_svfiprintf_r+0x4e>
 800bcfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd02:	460c      	mov	r4, r1
 800bd04:	2001      	movs	r0, #1
 800bd06:	e7a5      	b.n	800bc54 <_svfiprintf_r+0xd4>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	3401      	adds	r4, #1
 800bd0c:	9305      	str	r3, [sp, #20]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	f04f 0c0a 	mov.w	ip, #10
 800bd14:	4620      	mov	r0, r4
 800bd16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd1a:	3a30      	subs	r2, #48	; 0x30
 800bd1c:	2a09      	cmp	r2, #9
 800bd1e:	d903      	bls.n	800bd28 <_svfiprintf_r+0x1a8>
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0c5      	beq.n	800bcb0 <_svfiprintf_r+0x130>
 800bd24:	9105      	str	r1, [sp, #20]
 800bd26:	e7c3      	b.n	800bcb0 <_svfiprintf_r+0x130>
 800bd28:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e7f0      	b.n	800bd14 <_svfiprintf_r+0x194>
 800bd32:	ab03      	add	r3, sp, #12
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	462a      	mov	r2, r5
 800bd38:	4b0f      	ldr	r3, [pc, #60]	; (800bd78 <_svfiprintf_r+0x1f8>)
 800bd3a:	a904      	add	r1, sp, #16
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	f7fe f81d 	bl	8009d7c <_printf_float>
 800bd42:	1c42      	adds	r2, r0, #1
 800bd44:	4606      	mov	r6, r0
 800bd46:	d1d6      	bne.n	800bcf6 <_svfiprintf_r+0x176>
 800bd48:	89ab      	ldrh	r3, [r5, #12]
 800bd4a:	065b      	lsls	r3, r3, #25
 800bd4c:	f53f af2c 	bmi.w	800bba8 <_svfiprintf_r+0x28>
 800bd50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd52:	b01d      	add	sp, #116	; 0x74
 800bd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd58:	ab03      	add	r3, sp, #12
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	462a      	mov	r2, r5
 800bd5e:	4b06      	ldr	r3, [pc, #24]	; (800bd78 <_svfiprintf_r+0x1f8>)
 800bd60:	a904      	add	r1, sp, #16
 800bd62:	4638      	mov	r0, r7
 800bd64:	f7fe faae 	bl	800a2c4 <_printf_i>
 800bd68:	e7eb      	b.n	800bd42 <_svfiprintf_r+0x1c2>
 800bd6a:	bf00      	nop
 800bd6c:	0800ccac 	.word	0x0800ccac
 800bd70:	0800ccb6 	.word	0x0800ccb6
 800bd74:	08009d7d 	.word	0x08009d7d
 800bd78:	0800bac9 	.word	0x0800bac9
 800bd7c:	0800ccb2 	.word	0x0800ccb2

0800bd80 <_sbrk_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d06      	ldr	r5, [pc, #24]	; (800bd9c <_sbrk_r+0x1c>)
 800bd84:	2300      	movs	r3, #0
 800bd86:	4604      	mov	r4, r0
 800bd88:	4608      	mov	r0, r1
 800bd8a:	602b      	str	r3, [r5, #0]
 800bd8c:	f7f6 f8be 	bl	8001f0c <_sbrk>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d102      	bne.n	800bd9a <_sbrk_r+0x1a>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	b103      	cbz	r3, 800bd9a <_sbrk_r+0x1a>
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	bd38      	pop	{r3, r4, r5, pc}
 800bd9c:	20008760 	.word	0x20008760

0800bda0 <__assert_func>:
 800bda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bda2:	4614      	mov	r4, r2
 800bda4:	461a      	mov	r2, r3
 800bda6:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <__assert_func+0x2c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4605      	mov	r5, r0
 800bdac:	68d8      	ldr	r0, [r3, #12]
 800bdae:	b14c      	cbz	r4, 800bdc4 <__assert_func+0x24>
 800bdb0:	4b07      	ldr	r3, [pc, #28]	; (800bdd0 <__assert_func+0x30>)
 800bdb2:	9100      	str	r1, [sp, #0]
 800bdb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bdb8:	4906      	ldr	r1, [pc, #24]	; (800bdd4 <__assert_func+0x34>)
 800bdba:	462b      	mov	r3, r5
 800bdbc:	f000 f80e 	bl	800bddc <fiprintf>
 800bdc0:	f000 faa4 	bl	800c30c <abort>
 800bdc4:	4b04      	ldr	r3, [pc, #16]	; (800bdd8 <__assert_func+0x38>)
 800bdc6:	461c      	mov	r4, r3
 800bdc8:	e7f3      	b.n	800bdb2 <__assert_func+0x12>
 800bdca:	bf00      	nop
 800bdcc:	20000014 	.word	0x20000014
 800bdd0:	0800ccbd 	.word	0x0800ccbd
 800bdd4:	0800ccca 	.word	0x0800ccca
 800bdd8:	0800ccf8 	.word	0x0800ccf8

0800bddc <fiprintf>:
 800bddc:	b40e      	push	{r1, r2, r3}
 800bdde:	b503      	push	{r0, r1, lr}
 800bde0:	4601      	mov	r1, r0
 800bde2:	ab03      	add	r3, sp, #12
 800bde4:	4805      	ldr	r0, [pc, #20]	; (800bdfc <fiprintf+0x20>)
 800bde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdea:	6800      	ldr	r0, [r0, #0]
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	f000 f88f 	bl	800bf10 <_vfiprintf_r>
 800bdf2:	b002      	add	sp, #8
 800bdf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdf8:	b003      	add	sp, #12
 800bdfa:	4770      	bx	lr
 800bdfc:	20000014 	.word	0x20000014

0800be00 <__ascii_mbtowc>:
 800be00:	b082      	sub	sp, #8
 800be02:	b901      	cbnz	r1, 800be06 <__ascii_mbtowc+0x6>
 800be04:	a901      	add	r1, sp, #4
 800be06:	b142      	cbz	r2, 800be1a <__ascii_mbtowc+0x1a>
 800be08:	b14b      	cbz	r3, 800be1e <__ascii_mbtowc+0x1e>
 800be0a:	7813      	ldrb	r3, [r2, #0]
 800be0c:	600b      	str	r3, [r1, #0]
 800be0e:	7812      	ldrb	r2, [r2, #0]
 800be10:	1e10      	subs	r0, r2, #0
 800be12:	bf18      	it	ne
 800be14:	2001      	movne	r0, #1
 800be16:	b002      	add	sp, #8
 800be18:	4770      	bx	lr
 800be1a:	4610      	mov	r0, r2
 800be1c:	e7fb      	b.n	800be16 <__ascii_mbtowc+0x16>
 800be1e:	f06f 0001 	mvn.w	r0, #1
 800be22:	e7f8      	b.n	800be16 <__ascii_mbtowc+0x16>

0800be24 <memmove>:
 800be24:	4288      	cmp	r0, r1
 800be26:	b510      	push	{r4, lr}
 800be28:	eb01 0402 	add.w	r4, r1, r2
 800be2c:	d902      	bls.n	800be34 <memmove+0x10>
 800be2e:	4284      	cmp	r4, r0
 800be30:	4623      	mov	r3, r4
 800be32:	d807      	bhi.n	800be44 <memmove+0x20>
 800be34:	1e43      	subs	r3, r0, #1
 800be36:	42a1      	cmp	r1, r4
 800be38:	d008      	beq.n	800be4c <memmove+0x28>
 800be3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be42:	e7f8      	b.n	800be36 <memmove+0x12>
 800be44:	4402      	add	r2, r0
 800be46:	4601      	mov	r1, r0
 800be48:	428a      	cmp	r2, r1
 800be4a:	d100      	bne.n	800be4e <memmove+0x2a>
 800be4c:	bd10      	pop	{r4, pc}
 800be4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be56:	e7f7      	b.n	800be48 <memmove+0x24>

0800be58 <__malloc_lock>:
 800be58:	4801      	ldr	r0, [pc, #4]	; (800be60 <__malloc_lock+0x8>)
 800be5a:	f000 bc17 	b.w	800c68c <__retarget_lock_acquire_recursive>
 800be5e:	bf00      	nop
 800be60:	20008768 	.word	0x20008768

0800be64 <__malloc_unlock>:
 800be64:	4801      	ldr	r0, [pc, #4]	; (800be6c <__malloc_unlock+0x8>)
 800be66:	f000 bc12 	b.w	800c68e <__retarget_lock_release_recursive>
 800be6a:	bf00      	nop
 800be6c:	20008768 	.word	0x20008768

0800be70 <_realloc_r>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	4607      	mov	r7, r0
 800be74:	4614      	mov	r4, r2
 800be76:	460e      	mov	r6, r1
 800be78:	b921      	cbnz	r1, 800be84 <_realloc_r+0x14>
 800be7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be7e:	4611      	mov	r1, r2
 800be80:	f7ff bdc8 	b.w	800ba14 <_malloc_r>
 800be84:	b922      	cbnz	r2, 800be90 <_realloc_r+0x20>
 800be86:	f7ff fd75 	bl	800b974 <_free_r>
 800be8a:	4625      	mov	r5, r4
 800be8c:	4628      	mov	r0, r5
 800be8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be90:	f000 fc62 	bl	800c758 <_malloc_usable_size_r>
 800be94:	42a0      	cmp	r0, r4
 800be96:	d20f      	bcs.n	800beb8 <_realloc_r+0x48>
 800be98:	4621      	mov	r1, r4
 800be9a:	4638      	mov	r0, r7
 800be9c:	f7ff fdba 	bl	800ba14 <_malloc_r>
 800bea0:	4605      	mov	r5, r0
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d0f2      	beq.n	800be8c <_realloc_r+0x1c>
 800bea6:	4631      	mov	r1, r6
 800bea8:	4622      	mov	r2, r4
 800beaa:	f7fd feb1 	bl	8009c10 <memcpy>
 800beae:	4631      	mov	r1, r6
 800beb0:	4638      	mov	r0, r7
 800beb2:	f7ff fd5f 	bl	800b974 <_free_r>
 800beb6:	e7e9      	b.n	800be8c <_realloc_r+0x1c>
 800beb8:	4635      	mov	r5, r6
 800beba:	e7e7      	b.n	800be8c <_realloc_r+0x1c>

0800bebc <__sfputc_r>:
 800bebc:	6893      	ldr	r3, [r2, #8]
 800bebe:	3b01      	subs	r3, #1
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	b410      	push	{r4}
 800bec4:	6093      	str	r3, [r2, #8]
 800bec6:	da08      	bge.n	800beda <__sfputc_r+0x1e>
 800bec8:	6994      	ldr	r4, [r2, #24]
 800beca:	42a3      	cmp	r3, r4
 800becc:	db01      	blt.n	800bed2 <__sfputc_r+0x16>
 800bece:	290a      	cmp	r1, #10
 800bed0:	d103      	bne.n	800beda <__sfputc_r+0x1e>
 800bed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bed6:	f000 b94b 	b.w	800c170 <__swbuf_r>
 800beda:	6813      	ldr	r3, [r2, #0]
 800bedc:	1c58      	adds	r0, r3, #1
 800bede:	6010      	str	r0, [r2, #0]
 800bee0:	7019      	strb	r1, [r3, #0]
 800bee2:	4608      	mov	r0, r1
 800bee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <__sfputs_r>:
 800beea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beec:	4606      	mov	r6, r0
 800beee:	460f      	mov	r7, r1
 800bef0:	4614      	mov	r4, r2
 800bef2:	18d5      	adds	r5, r2, r3
 800bef4:	42ac      	cmp	r4, r5
 800bef6:	d101      	bne.n	800befc <__sfputs_r+0x12>
 800bef8:	2000      	movs	r0, #0
 800befa:	e007      	b.n	800bf0c <__sfputs_r+0x22>
 800befc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf00:	463a      	mov	r2, r7
 800bf02:	4630      	mov	r0, r6
 800bf04:	f7ff ffda 	bl	800bebc <__sfputc_r>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d1f3      	bne.n	800bef4 <__sfputs_r+0xa>
 800bf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf10 <_vfiprintf_r>:
 800bf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf14:	460d      	mov	r5, r1
 800bf16:	b09d      	sub	sp, #116	; 0x74
 800bf18:	4614      	mov	r4, r2
 800bf1a:	4698      	mov	r8, r3
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	b118      	cbz	r0, 800bf28 <_vfiprintf_r+0x18>
 800bf20:	6983      	ldr	r3, [r0, #24]
 800bf22:	b90b      	cbnz	r3, 800bf28 <_vfiprintf_r+0x18>
 800bf24:	f000 fb14 	bl	800c550 <__sinit>
 800bf28:	4b89      	ldr	r3, [pc, #548]	; (800c150 <_vfiprintf_r+0x240>)
 800bf2a:	429d      	cmp	r5, r3
 800bf2c:	d11b      	bne.n	800bf66 <_vfiprintf_r+0x56>
 800bf2e:	6875      	ldr	r5, [r6, #4]
 800bf30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf32:	07d9      	lsls	r1, r3, #31
 800bf34:	d405      	bmi.n	800bf42 <_vfiprintf_r+0x32>
 800bf36:	89ab      	ldrh	r3, [r5, #12]
 800bf38:	059a      	lsls	r2, r3, #22
 800bf3a:	d402      	bmi.n	800bf42 <_vfiprintf_r+0x32>
 800bf3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf3e:	f000 fba5 	bl	800c68c <__retarget_lock_acquire_recursive>
 800bf42:	89ab      	ldrh	r3, [r5, #12]
 800bf44:	071b      	lsls	r3, r3, #28
 800bf46:	d501      	bpl.n	800bf4c <_vfiprintf_r+0x3c>
 800bf48:	692b      	ldr	r3, [r5, #16]
 800bf4a:	b9eb      	cbnz	r3, 800bf88 <_vfiprintf_r+0x78>
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	4630      	mov	r0, r6
 800bf50:	f000 f96e 	bl	800c230 <__swsetup_r>
 800bf54:	b1c0      	cbz	r0, 800bf88 <_vfiprintf_r+0x78>
 800bf56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf58:	07dc      	lsls	r4, r3, #31
 800bf5a:	d50e      	bpl.n	800bf7a <_vfiprintf_r+0x6a>
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	b01d      	add	sp, #116	; 0x74
 800bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf66:	4b7b      	ldr	r3, [pc, #492]	; (800c154 <_vfiprintf_r+0x244>)
 800bf68:	429d      	cmp	r5, r3
 800bf6a:	d101      	bne.n	800bf70 <_vfiprintf_r+0x60>
 800bf6c:	68b5      	ldr	r5, [r6, #8]
 800bf6e:	e7df      	b.n	800bf30 <_vfiprintf_r+0x20>
 800bf70:	4b79      	ldr	r3, [pc, #484]	; (800c158 <_vfiprintf_r+0x248>)
 800bf72:	429d      	cmp	r5, r3
 800bf74:	bf08      	it	eq
 800bf76:	68f5      	ldreq	r5, [r6, #12]
 800bf78:	e7da      	b.n	800bf30 <_vfiprintf_r+0x20>
 800bf7a:	89ab      	ldrh	r3, [r5, #12]
 800bf7c:	0598      	lsls	r0, r3, #22
 800bf7e:	d4ed      	bmi.n	800bf5c <_vfiprintf_r+0x4c>
 800bf80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf82:	f000 fb84 	bl	800c68e <__retarget_lock_release_recursive>
 800bf86:	e7e9      	b.n	800bf5c <_vfiprintf_r+0x4c>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8c:	2320      	movs	r3, #32
 800bf8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf92:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf96:	2330      	movs	r3, #48	; 0x30
 800bf98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c15c <_vfiprintf_r+0x24c>
 800bf9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfa0:	f04f 0901 	mov.w	r9, #1
 800bfa4:	4623      	mov	r3, r4
 800bfa6:	469a      	mov	sl, r3
 800bfa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfac:	b10a      	cbz	r2, 800bfb2 <_vfiprintf_r+0xa2>
 800bfae:	2a25      	cmp	r2, #37	; 0x25
 800bfb0:	d1f9      	bne.n	800bfa6 <_vfiprintf_r+0x96>
 800bfb2:	ebba 0b04 	subs.w	fp, sl, r4
 800bfb6:	d00b      	beq.n	800bfd0 <_vfiprintf_r+0xc0>
 800bfb8:	465b      	mov	r3, fp
 800bfba:	4622      	mov	r2, r4
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f7ff ff93 	bl	800beea <__sfputs_r>
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	f000 80aa 	beq.w	800c11e <_vfiprintf_r+0x20e>
 800bfca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfcc:	445a      	add	r2, fp
 800bfce:	9209      	str	r2, [sp, #36]	; 0x24
 800bfd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 80a2 	beq.w	800c11e <_vfiprintf_r+0x20e>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfe4:	f10a 0a01 	add.w	sl, sl, #1
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	9307      	str	r3, [sp, #28]
 800bfec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bff0:	931a      	str	r3, [sp, #104]	; 0x68
 800bff2:	4654      	mov	r4, sl
 800bff4:	2205      	movs	r2, #5
 800bff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffa:	4858      	ldr	r0, [pc, #352]	; (800c15c <_vfiprintf_r+0x24c>)
 800bffc:	f7f4 f8f0 	bl	80001e0 <memchr>
 800c000:	9a04      	ldr	r2, [sp, #16]
 800c002:	b9d8      	cbnz	r0, 800c03c <_vfiprintf_r+0x12c>
 800c004:	06d1      	lsls	r1, r2, #27
 800c006:	bf44      	itt	mi
 800c008:	2320      	movmi	r3, #32
 800c00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c00e:	0713      	lsls	r3, r2, #28
 800c010:	bf44      	itt	mi
 800c012:	232b      	movmi	r3, #43	; 0x2b
 800c014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c018:	f89a 3000 	ldrb.w	r3, [sl]
 800c01c:	2b2a      	cmp	r3, #42	; 0x2a
 800c01e:	d015      	beq.n	800c04c <_vfiprintf_r+0x13c>
 800c020:	9a07      	ldr	r2, [sp, #28]
 800c022:	4654      	mov	r4, sl
 800c024:	2000      	movs	r0, #0
 800c026:	f04f 0c0a 	mov.w	ip, #10
 800c02a:	4621      	mov	r1, r4
 800c02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c030:	3b30      	subs	r3, #48	; 0x30
 800c032:	2b09      	cmp	r3, #9
 800c034:	d94e      	bls.n	800c0d4 <_vfiprintf_r+0x1c4>
 800c036:	b1b0      	cbz	r0, 800c066 <_vfiprintf_r+0x156>
 800c038:	9207      	str	r2, [sp, #28]
 800c03a:	e014      	b.n	800c066 <_vfiprintf_r+0x156>
 800c03c:	eba0 0308 	sub.w	r3, r0, r8
 800c040:	fa09 f303 	lsl.w	r3, r9, r3
 800c044:	4313      	orrs	r3, r2
 800c046:	9304      	str	r3, [sp, #16]
 800c048:	46a2      	mov	sl, r4
 800c04a:	e7d2      	b.n	800bff2 <_vfiprintf_r+0xe2>
 800c04c:	9b03      	ldr	r3, [sp, #12]
 800c04e:	1d19      	adds	r1, r3, #4
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	9103      	str	r1, [sp, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	bfbb      	ittet	lt
 800c058:	425b      	neglt	r3, r3
 800c05a:	f042 0202 	orrlt.w	r2, r2, #2
 800c05e:	9307      	strge	r3, [sp, #28]
 800c060:	9307      	strlt	r3, [sp, #28]
 800c062:	bfb8      	it	lt
 800c064:	9204      	strlt	r2, [sp, #16]
 800c066:	7823      	ldrb	r3, [r4, #0]
 800c068:	2b2e      	cmp	r3, #46	; 0x2e
 800c06a:	d10c      	bne.n	800c086 <_vfiprintf_r+0x176>
 800c06c:	7863      	ldrb	r3, [r4, #1]
 800c06e:	2b2a      	cmp	r3, #42	; 0x2a
 800c070:	d135      	bne.n	800c0de <_vfiprintf_r+0x1ce>
 800c072:	9b03      	ldr	r3, [sp, #12]
 800c074:	1d1a      	adds	r2, r3, #4
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	9203      	str	r2, [sp, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	bfb8      	it	lt
 800c07e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c082:	3402      	adds	r4, #2
 800c084:	9305      	str	r3, [sp, #20]
 800c086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c16c <_vfiprintf_r+0x25c>
 800c08a:	7821      	ldrb	r1, [r4, #0]
 800c08c:	2203      	movs	r2, #3
 800c08e:	4650      	mov	r0, sl
 800c090:	f7f4 f8a6 	bl	80001e0 <memchr>
 800c094:	b140      	cbz	r0, 800c0a8 <_vfiprintf_r+0x198>
 800c096:	2340      	movs	r3, #64	; 0x40
 800c098:	eba0 000a 	sub.w	r0, r0, sl
 800c09c:	fa03 f000 	lsl.w	r0, r3, r0
 800c0a0:	9b04      	ldr	r3, [sp, #16]
 800c0a2:	4303      	orrs	r3, r0
 800c0a4:	3401      	adds	r4, #1
 800c0a6:	9304      	str	r3, [sp, #16]
 800c0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ac:	482c      	ldr	r0, [pc, #176]	; (800c160 <_vfiprintf_r+0x250>)
 800c0ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0b2:	2206      	movs	r2, #6
 800c0b4:	f7f4 f894 	bl	80001e0 <memchr>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d03f      	beq.n	800c13c <_vfiprintf_r+0x22c>
 800c0bc:	4b29      	ldr	r3, [pc, #164]	; (800c164 <_vfiprintf_r+0x254>)
 800c0be:	bb1b      	cbnz	r3, 800c108 <_vfiprintf_r+0x1f8>
 800c0c0:	9b03      	ldr	r3, [sp, #12]
 800c0c2:	3307      	adds	r3, #7
 800c0c4:	f023 0307 	bic.w	r3, r3, #7
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	9303      	str	r3, [sp, #12]
 800c0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ce:	443b      	add	r3, r7
 800c0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c0d2:	e767      	b.n	800bfa4 <_vfiprintf_r+0x94>
 800c0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0d8:	460c      	mov	r4, r1
 800c0da:	2001      	movs	r0, #1
 800c0dc:	e7a5      	b.n	800c02a <_vfiprintf_r+0x11a>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	3401      	adds	r4, #1
 800c0e2:	9305      	str	r3, [sp, #20]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	f04f 0c0a 	mov.w	ip, #10
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0f0:	3a30      	subs	r2, #48	; 0x30
 800c0f2:	2a09      	cmp	r2, #9
 800c0f4:	d903      	bls.n	800c0fe <_vfiprintf_r+0x1ee>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d0c5      	beq.n	800c086 <_vfiprintf_r+0x176>
 800c0fa:	9105      	str	r1, [sp, #20]
 800c0fc:	e7c3      	b.n	800c086 <_vfiprintf_r+0x176>
 800c0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c102:	4604      	mov	r4, r0
 800c104:	2301      	movs	r3, #1
 800c106:	e7f0      	b.n	800c0ea <_vfiprintf_r+0x1da>
 800c108:	ab03      	add	r3, sp, #12
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	462a      	mov	r2, r5
 800c10e:	4b16      	ldr	r3, [pc, #88]	; (800c168 <_vfiprintf_r+0x258>)
 800c110:	a904      	add	r1, sp, #16
 800c112:	4630      	mov	r0, r6
 800c114:	f7fd fe32 	bl	8009d7c <_printf_float>
 800c118:	4607      	mov	r7, r0
 800c11a:	1c78      	adds	r0, r7, #1
 800c11c:	d1d6      	bne.n	800c0cc <_vfiprintf_r+0x1bc>
 800c11e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c120:	07d9      	lsls	r1, r3, #31
 800c122:	d405      	bmi.n	800c130 <_vfiprintf_r+0x220>
 800c124:	89ab      	ldrh	r3, [r5, #12]
 800c126:	059a      	lsls	r2, r3, #22
 800c128:	d402      	bmi.n	800c130 <_vfiprintf_r+0x220>
 800c12a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c12c:	f000 faaf 	bl	800c68e <__retarget_lock_release_recursive>
 800c130:	89ab      	ldrh	r3, [r5, #12]
 800c132:	065b      	lsls	r3, r3, #25
 800c134:	f53f af12 	bmi.w	800bf5c <_vfiprintf_r+0x4c>
 800c138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c13a:	e711      	b.n	800bf60 <_vfiprintf_r+0x50>
 800c13c:	ab03      	add	r3, sp, #12
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	462a      	mov	r2, r5
 800c142:	4b09      	ldr	r3, [pc, #36]	; (800c168 <_vfiprintf_r+0x258>)
 800c144:	a904      	add	r1, sp, #16
 800c146:	4630      	mov	r0, r6
 800c148:	f7fe f8bc 	bl	800a2c4 <_printf_i>
 800c14c:	e7e4      	b.n	800c118 <_vfiprintf_r+0x208>
 800c14e:	bf00      	nop
 800c150:	0800ce24 	.word	0x0800ce24
 800c154:	0800ce44 	.word	0x0800ce44
 800c158:	0800ce04 	.word	0x0800ce04
 800c15c:	0800ccac 	.word	0x0800ccac
 800c160:	0800ccb6 	.word	0x0800ccb6
 800c164:	08009d7d 	.word	0x08009d7d
 800c168:	0800beeb 	.word	0x0800beeb
 800c16c:	0800ccb2 	.word	0x0800ccb2

0800c170 <__swbuf_r>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	460e      	mov	r6, r1
 800c174:	4614      	mov	r4, r2
 800c176:	4605      	mov	r5, r0
 800c178:	b118      	cbz	r0, 800c182 <__swbuf_r+0x12>
 800c17a:	6983      	ldr	r3, [r0, #24]
 800c17c:	b90b      	cbnz	r3, 800c182 <__swbuf_r+0x12>
 800c17e:	f000 f9e7 	bl	800c550 <__sinit>
 800c182:	4b21      	ldr	r3, [pc, #132]	; (800c208 <__swbuf_r+0x98>)
 800c184:	429c      	cmp	r4, r3
 800c186:	d12b      	bne.n	800c1e0 <__swbuf_r+0x70>
 800c188:	686c      	ldr	r4, [r5, #4]
 800c18a:	69a3      	ldr	r3, [r4, #24]
 800c18c:	60a3      	str	r3, [r4, #8]
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	071a      	lsls	r2, r3, #28
 800c192:	d52f      	bpl.n	800c1f4 <__swbuf_r+0x84>
 800c194:	6923      	ldr	r3, [r4, #16]
 800c196:	b36b      	cbz	r3, 800c1f4 <__swbuf_r+0x84>
 800c198:	6923      	ldr	r3, [r4, #16]
 800c19a:	6820      	ldr	r0, [r4, #0]
 800c19c:	1ac0      	subs	r0, r0, r3
 800c19e:	6963      	ldr	r3, [r4, #20]
 800c1a0:	b2f6      	uxtb	r6, r6
 800c1a2:	4283      	cmp	r3, r0
 800c1a4:	4637      	mov	r7, r6
 800c1a6:	dc04      	bgt.n	800c1b2 <__swbuf_r+0x42>
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f000 f93c 	bl	800c428 <_fflush_r>
 800c1b0:	bb30      	cbnz	r0, 800c200 <__swbuf_r+0x90>
 800c1b2:	68a3      	ldr	r3, [r4, #8]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	60a3      	str	r3, [r4, #8]
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	1c5a      	adds	r2, r3, #1
 800c1bc:	6022      	str	r2, [r4, #0]
 800c1be:	701e      	strb	r6, [r3, #0]
 800c1c0:	6963      	ldr	r3, [r4, #20]
 800c1c2:	3001      	adds	r0, #1
 800c1c4:	4283      	cmp	r3, r0
 800c1c6:	d004      	beq.n	800c1d2 <__swbuf_r+0x62>
 800c1c8:	89a3      	ldrh	r3, [r4, #12]
 800c1ca:	07db      	lsls	r3, r3, #31
 800c1cc:	d506      	bpl.n	800c1dc <__swbuf_r+0x6c>
 800c1ce:	2e0a      	cmp	r6, #10
 800c1d0:	d104      	bne.n	800c1dc <__swbuf_r+0x6c>
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	f000 f927 	bl	800c428 <_fflush_r>
 800c1da:	b988      	cbnz	r0, 800c200 <__swbuf_r+0x90>
 800c1dc:	4638      	mov	r0, r7
 800c1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <__swbuf_r+0x9c>)
 800c1e2:	429c      	cmp	r4, r3
 800c1e4:	d101      	bne.n	800c1ea <__swbuf_r+0x7a>
 800c1e6:	68ac      	ldr	r4, [r5, #8]
 800c1e8:	e7cf      	b.n	800c18a <__swbuf_r+0x1a>
 800c1ea:	4b09      	ldr	r3, [pc, #36]	; (800c210 <__swbuf_r+0xa0>)
 800c1ec:	429c      	cmp	r4, r3
 800c1ee:	bf08      	it	eq
 800c1f0:	68ec      	ldreq	r4, [r5, #12]
 800c1f2:	e7ca      	b.n	800c18a <__swbuf_r+0x1a>
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	f000 f81a 	bl	800c230 <__swsetup_r>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d0cb      	beq.n	800c198 <__swbuf_r+0x28>
 800c200:	f04f 37ff 	mov.w	r7, #4294967295
 800c204:	e7ea      	b.n	800c1dc <__swbuf_r+0x6c>
 800c206:	bf00      	nop
 800c208:	0800ce24 	.word	0x0800ce24
 800c20c:	0800ce44 	.word	0x0800ce44
 800c210:	0800ce04 	.word	0x0800ce04

0800c214 <__ascii_wctomb>:
 800c214:	b149      	cbz	r1, 800c22a <__ascii_wctomb+0x16>
 800c216:	2aff      	cmp	r2, #255	; 0xff
 800c218:	bf85      	ittet	hi
 800c21a:	238a      	movhi	r3, #138	; 0x8a
 800c21c:	6003      	strhi	r3, [r0, #0]
 800c21e:	700a      	strbls	r2, [r1, #0]
 800c220:	f04f 30ff 	movhi.w	r0, #4294967295
 800c224:	bf98      	it	ls
 800c226:	2001      	movls	r0, #1
 800c228:	4770      	bx	lr
 800c22a:	4608      	mov	r0, r1
 800c22c:	4770      	bx	lr
	...

0800c230 <__swsetup_r>:
 800c230:	4b32      	ldr	r3, [pc, #200]	; (800c2fc <__swsetup_r+0xcc>)
 800c232:	b570      	push	{r4, r5, r6, lr}
 800c234:	681d      	ldr	r5, [r3, #0]
 800c236:	4606      	mov	r6, r0
 800c238:	460c      	mov	r4, r1
 800c23a:	b125      	cbz	r5, 800c246 <__swsetup_r+0x16>
 800c23c:	69ab      	ldr	r3, [r5, #24]
 800c23e:	b913      	cbnz	r3, 800c246 <__swsetup_r+0x16>
 800c240:	4628      	mov	r0, r5
 800c242:	f000 f985 	bl	800c550 <__sinit>
 800c246:	4b2e      	ldr	r3, [pc, #184]	; (800c300 <__swsetup_r+0xd0>)
 800c248:	429c      	cmp	r4, r3
 800c24a:	d10f      	bne.n	800c26c <__swsetup_r+0x3c>
 800c24c:	686c      	ldr	r4, [r5, #4]
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c254:	0719      	lsls	r1, r3, #28
 800c256:	d42c      	bmi.n	800c2b2 <__swsetup_r+0x82>
 800c258:	06dd      	lsls	r5, r3, #27
 800c25a:	d411      	bmi.n	800c280 <__swsetup_r+0x50>
 800c25c:	2309      	movs	r3, #9
 800c25e:	6033      	str	r3, [r6, #0]
 800c260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c264:	81a3      	strh	r3, [r4, #12]
 800c266:	f04f 30ff 	mov.w	r0, #4294967295
 800c26a:	e03e      	b.n	800c2ea <__swsetup_r+0xba>
 800c26c:	4b25      	ldr	r3, [pc, #148]	; (800c304 <__swsetup_r+0xd4>)
 800c26e:	429c      	cmp	r4, r3
 800c270:	d101      	bne.n	800c276 <__swsetup_r+0x46>
 800c272:	68ac      	ldr	r4, [r5, #8]
 800c274:	e7eb      	b.n	800c24e <__swsetup_r+0x1e>
 800c276:	4b24      	ldr	r3, [pc, #144]	; (800c308 <__swsetup_r+0xd8>)
 800c278:	429c      	cmp	r4, r3
 800c27a:	bf08      	it	eq
 800c27c:	68ec      	ldreq	r4, [r5, #12]
 800c27e:	e7e6      	b.n	800c24e <__swsetup_r+0x1e>
 800c280:	0758      	lsls	r0, r3, #29
 800c282:	d512      	bpl.n	800c2aa <__swsetup_r+0x7a>
 800c284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c286:	b141      	cbz	r1, 800c29a <__swsetup_r+0x6a>
 800c288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c28c:	4299      	cmp	r1, r3
 800c28e:	d002      	beq.n	800c296 <__swsetup_r+0x66>
 800c290:	4630      	mov	r0, r6
 800c292:	f7ff fb6f 	bl	800b974 <_free_r>
 800c296:	2300      	movs	r3, #0
 800c298:	6363      	str	r3, [r4, #52]	; 0x34
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2a0:	81a3      	strh	r3, [r4, #12]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	6063      	str	r3, [r4, #4]
 800c2a6:	6923      	ldr	r3, [r4, #16]
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f043 0308 	orr.w	r3, r3, #8
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	6923      	ldr	r3, [r4, #16]
 800c2b4:	b94b      	cbnz	r3, 800c2ca <__swsetup_r+0x9a>
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2c0:	d003      	beq.n	800c2ca <__swsetup_r+0x9a>
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f000 fa07 	bl	800c6d8 <__smakebuf_r>
 800c2ca:	89a0      	ldrh	r0, [r4, #12]
 800c2cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2d0:	f010 0301 	ands.w	r3, r0, #1
 800c2d4:	d00a      	beq.n	800c2ec <__swsetup_r+0xbc>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60a3      	str	r3, [r4, #8]
 800c2da:	6963      	ldr	r3, [r4, #20]
 800c2dc:	425b      	negs	r3, r3
 800c2de:	61a3      	str	r3, [r4, #24]
 800c2e0:	6923      	ldr	r3, [r4, #16]
 800c2e2:	b943      	cbnz	r3, 800c2f6 <__swsetup_r+0xc6>
 800c2e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2e8:	d1ba      	bne.n	800c260 <__swsetup_r+0x30>
 800c2ea:	bd70      	pop	{r4, r5, r6, pc}
 800c2ec:	0781      	lsls	r1, r0, #30
 800c2ee:	bf58      	it	pl
 800c2f0:	6963      	ldrpl	r3, [r4, #20]
 800c2f2:	60a3      	str	r3, [r4, #8]
 800c2f4:	e7f4      	b.n	800c2e0 <__swsetup_r+0xb0>
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	e7f7      	b.n	800c2ea <__swsetup_r+0xba>
 800c2fa:	bf00      	nop
 800c2fc:	20000014 	.word	0x20000014
 800c300:	0800ce24 	.word	0x0800ce24
 800c304:	0800ce44 	.word	0x0800ce44
 800c308:	0800ce04 	.word	0x0800ce04

0800c30c <abort>:
 800c30c:	b508      	push	{r3, lr}
 800c30e:	2006      	movs	r0, #6
 800c310:	f000 fa52 	bl	800c7b8 <raise>
 800c314:	2001      	movs	r0, #1
 800c316:	f7f5 fd81 	bl	8001e1c <_exit>
	...

0800c31c <__sflush_r>:
 800c31c:	898a      	ldrh	r2, [r1, #12]
 800c31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c322:	4605      	mov	r5, r0
 800c324:	0710      	lsls	r0, r2, #28
 800c326:	460c      	mov	r4, r1
 800c328:	d458      	bmi.n	800c3dc <__sflush_r+0xc0>
 800c32a:	684b      	ldr	r3, [r1, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dc05      	bgt.n	800c33c <__sflush_r+0x20>
 800c330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c332:	2b00      	cmp	r3, #0
 800c334:	dc02      	bgt.n	800c33c <__sflush_r+0x20>
 800c336:	2000      	movs	r0, #0
 800c338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c33e:	2e00      	cmp	r6, #0
 800c340:	d0f9      	beq.n	800c336 <__sflush_r+0x1a>
 800c342:	2300      	movs	r3, #0
 800c344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c348:	682f      	ldr	r7, [r5, #0]
 800c34a:	602b      	str	r3, [r5, #0]
 800c34c:	d032      	beq.n	800c3b4 <__sflush_r+0x98>
 800c34e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c350:	89a3      	ldrh	r3, [r4, #12]
 800c352:	075a      	lsls	r2, r3, #29
 800c354:	d505      	bpl.n	800c362 <__sflush_r+0x46>
 800c356:	6863      	ldr	r3, [r4, #4]
 800c358:	1ac0      	subs	r0, r0, r3
 800c35a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c35c:	b10b      	cbz	r3, 800c362 <__sflush_r+0x46>
 800c35e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c360:	1ac0      	subs	r0, r0, r3
 800c362:	2300      	movs	r3, #0
 800c364:	4602      	mov	r2, r0
 800c366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c368:	6a21      	ldr	r1, [r4, #32]
 800c36a:	4628      	mov	r0, r5
 800c36c:	47b0      	blx	r6
 800c36e:	1c43      	adds	r3, r0, #1
 800c370:	89a3      	ldrh	r3, [r4, #12]
 800c372:	d106      	bne.n	800c382 <__sflush_r+0x66>
 800c374:	6829      	ldr	r1, [r5, #0]
 800c376:	291d      	cmp	r1, #29
 800c378:	d82c      	bhi.n	800c3d4 <__sflush_r+0xb8>
 800c37a:	4a2a      	ldr	r2, [pc, #168]	; (800c424 <__sflush_r+0x108>)
 800c37c:	40ca      	lsrs	r2, r1
 800c37e:	07d6      	lsls	r6, r2, #31
 800c380:	d528      	bpl.n	800c3d4 <__sflush_r+0xb8>
 800c382:	2200      	movs	r2, #0
 800c384:	6062      	str	r2, [r4, #4]
 800c386:	04d9      	lsls	r1, r3, #19
 800c388:	6922      	ldr	r2, [r4, #16]
 800c38a:	6022      	str	r2, [r4, #0]
 800c38c:	d504      	bpl.n	800c398 <__sflush_r+0x7c>
 800c38e:	1c42      	adds	r2, r0, #1
 800c390:	d101      	bne.n	800c396 <__sflush_r+0x7a>
 800c392:	682b      	ldr	r3, [r5, #0]
 800c394:	b903      	cbnz	r3, 800c398 <__sflush_r+0x7c>
 800c396:	6560      	str	r0, [r4, #84]	; 0x54
 800c398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c39a:	602f      	str	r7, [r5, #0]
 800c39c:	2900      	cmp	r1, #0
 800c39e:	d0ca      	beq.n	800c336 <__sflush_r+0x1a>
 800c3a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3a4:	4299      	cmp	r1, r3
 800c3a6:	d002      	beq.n	800c3ae <__sflush_r+0x92>
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f7ff fae3 	bl	800b974 <_free_r>
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c3b2:	e7c1      	b.n	800c338 <__sflush_r+0x1c>
 800c3b4:	6a21      	ldr	r1, [r4, #32]
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	47b0      	blx	r6
 800c3bc:	1c41      	adds	r1, r0, #1
 800c3be:	d1c7      	bne.n	800c350 <__sflush_r+0x34>
 800c3c0:	682b      	ldr	r3, [r5, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d0c4      	beq.n	800c350 <__sflush_r+0x34>
 800c3c6:	2b1d      	cmp	r3, #29
 800c3c8:	d001      	beq.n	800c3ce <__sflush_r+0xb2>
 800c3ca:	2b16      	cmp	r3, #22
 800c3cc:	d101      	bne.n	800c3d2 <__sflush_r+0xb6>
 800c3ce:	602f      	str	r7, [r5, #0]
 800c3d0:	e7b1      	b.n	800c336 <__sflush_r+0x1a>
 800c3d2:	89a3      	ldrh	r3, [r4, #12]
 800c3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d8:	81a3      	strh	r3, [r4, #12]
 800c3da:	e7ad      	b.n	800c338 <__sflush_r+0x1c>
 800c3dc:	690f      	ldr	r7, [r1, #16]
 800c3de:	2f00      	cmp	r7, #0
 800c3e0:	d0a9      	beq.n	800c336 <__sflush_r+0x1a>
 800c3e2:	0793      	lsls	r3, r2, #30
 800c3e4:	680e      	ldr	r6, [r1, #0]
 800c3e6:	bf08      	it	eq
 800c3e8:	694b      	ldreq	r3, [r1, #20]
 800c3ea:	600f      	str	r7, [r1, #0]
 800c3ec:	bf18      	it	ne
 800c3ee:	2300      	movne	r3, #0
 800c3f0:	eba6 0807 	sub.w	r8, r6, r7
 800c3f4:	608b      	str	r3, [r1, #8]
 800c3f6:	f1b8 0f00 	cmp.w	r8, #0
 800c3fa:	dd9c      	ble.n	800c336 <__sflush_r+0x1a>
 800c3fc:	6a21      	ldr	r1, [r4, #32]
 800c3fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c400:	4643      	mov	r3, r8
 800c402:	463a      	mov	r2, r7
 800c404:	4628      	mov	r0, r5
 800c406:	47b0      	blx	r6
 800c408:	2800      	cmp	r0, #0
 800c40a:	dc06      	bgt.n	800c41a <__sflush_r+0xfe>
 800c40c:	89a3      	ldrh	r3, [r4, #12]
 800c40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c412:	81a3      	strh	r3, [r4, #12]
 800c414:	f04f 30ff 	mov.w	r0, #4294967295
 800c418:	e78e      	b.n	800c338 <__sflush_r+0x1c>
 800c41a:	4407      	add	r7, r0
 800c41c:	eba8 0800 	sub.w	r8, r8, r0
 800c420:	e7e9      	b.n	800c3f6 <__sflush_r+0xda>
 800c422:	bf00      	nop
 800c424:	20400001 	.word	0x20400001

0800c428 <_fflush_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	690b      	ldr	r3, [r1, #16]
 800c42c:	4605      	mov	r5, r0
 800c42e:	460c      	mov	r4, r1
 800c430:	b913      	cbnz	r3, 800c438 <_fflush_r+0x10>
 800c432:	2500      	movs	r5, #0
 800c434:	4628      	mov	r0, r5
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	b118      	cbz	r0, 800c442 <_fflush_r+0x1a>
 800c43a:	6983      	ldr	r3, [r0, #24]
 800c43c:	b90b      	cbnz	r3, 800c442 <_fflush_r+0x1a>
 800c43e:	f000 f887 	bl	800c550 <__sinit>
 800c442:	4b14      	ldr	r3, [pc, #80]	; (800c494 <_fflush_r+0x6c>)
 800c444:	429c      	cmp	r4, r3
 800c446:	d11b      	bne.n	800c480 <_fflush_r+0x58>
 800c448:	686c      	ldr	r4, [r5, #4]
 800c44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0ef      	beq.n	800c432 <_fflush_r+0xa>
 800c452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c454:	07d0      	lsls	r0, r2, #31
 800c456:	d404      	bmi.n	800c462 <_fflush_r+0x3a>
 800c458:	0599      	lsls	r1, r3, #22
 800c45a:	d402      	bmi.n	800c462 <_fflush_r+0x3a>
 800c45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c45e:	f000 f915 	bl	800c68c <__retarget_lock_acquire_recursive>
 800c462:	4628      	mov	r0, r5
 800c464:	4621      	mov	r1, r4
 800c466:	f7ff ff59 	bl	800c31c <__sflush_r>
 800c46a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c46c:	07da      	lsls	r2, r3, #31
 800c46e:	4605      	mov	r5, r0
 800c470:	d4e0      	bmi.n	800c434 <_fflush_r+0xc>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	059b      	lsls	r3, r3, #22
 800c476:	d4dd      	bmi.n	800c434 <_fflush_r+0xc>
 800c478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c47a:	f000 f908 	bl	800c68e <__retarget_lock_release_recursive>
 800c47e:	e7d9      	b.n	800c434 <_fflush_r+0xc>
 800c480:	4b05      	ldr	r3, [pc, #20]	; (800c498 <_fflush_r+0x70>)
 800c482:	429c      	cmp	r4, r3
 800c484:	d101      	bne.n	800c48a <_fflush_r+0x62>
 800c486:	68ac      	ldr	r4, [r5, #8]
 800c488:	e7df      	b.n	800c44a <_fflush_r+0x22>
 800c48a:	4b04      	ldr	r3, [pc, #16]	; (800c49c <_fflush_r+0x74>)
 800c48c:	429c      	cmp	r4, r3
 800c48e:	bf08      	it	eq
 800c490:	68ec      	ldreq	r4, [r5, #12]
 800c492:	e7da      	b.n	800c44a <_fflush_r+0x22>
 800c494:	0800ce24 	.word	0x0800ce24
 800c498:	0800ce44 	.word	0x0800ce44
 800c49c:	0800ce04 	.word	0x0800ce04

0800c4a0 <std>:
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	b510      	push	{r4, lr}
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4ae:	6083      	str	r3, [r0, #8]
 800c4b0:	8181      	strh	r1, [r0, #12]
 800c4b2:	6643      	str	r3, [r0, #100]	; 0x64
 800c4b4:	81c2      	strh	r2, [r0, #14]
 800c4b6:	6183      	str	r3, [r0, #24]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	2208      	movs	r2, #8
 800c4bc:	305c      	adds	r0, #92	; 0x5c
 800c4be:	f7fd fbb5 	bl	8009c2c <memset>
 800c4c2:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <std+0x38>)
 800c4c4:	6263      	str	r3, [r4, #36]	; 0x24
 800c4c6:	4b05      	ldr	r3, [pc, #20]	; (800c4dc <std+0x3c>)
 800c4c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4ca:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <std+0x40>)
 800c4cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4ce:	4b05      	ldr	r3, [pc, #20]	; (800c4e4 <std+0x44>)
 800c4d0:	6224      	str	r4, [r4, #32]
 800c4d2:	6323      	str	r3, [r4, #48]	; 0x30
 800c4d4:	bd10      	pop	{r4, pc}
 800c4d6:	bf00      	nop
 800c4d8:	0800c7f1 	.word	0x0800c7f1
 800c4dc:	0800c813 	.word	0x0800c813
 800c4e0:	0800c84b 	.word	0x0800c84b
 800c4e4:	0800c86f 	.word	0x0800c86f

0800c4e8 <_cleanup_r>:
 800c4e8:	4901      	ldr	r1, [pc, #4]	; (800c4f0 <_cleanup_r+0x8>)
 800c4ea:	f000 b8af 	b.w	800c64c <_fwalk_reent>
 800c4ee:	bf00      	nop
 800c4f0:	0800c429 	.word	0x0800c429

0800c4f4 <__sfmoreglue>:
 800c4f4:	b570      	push	{r4, r5, r6, lr}
 800c4f6:	1e4a      	subs	r2, r1, #1
 800c4f8:	2568      	movs	r5, #104	; 0x68
 800c4fa:	4355      	muls	r5, r2
 800c4fc:	460e      	mov	r6, r1
 800c4fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c502:	f7ff fa87 	bl	800ba14 <_malloc_r>
 800c506:	4604      	mov	r4, r0
 800c508:	b140      	cbz	r0, 800c51c <__sfmoreglue+0x28>
 800c50a:	2100      	movs	r1, #0
 800c50c:	e9c0 1600 	strd	r1, r6, [r0]
 800c510:	300c      	adds	r0, #12
 800c512:	60a0      	str	r0, [r4, #8]
 800c514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c518:	f7fd fb88 	bl	8009c2c <memset>
 800c51c:	4620      	mov	r0, r4
 800c51e:	bd70      	pop	{r4, r5, r6, pc}

0800c520 <__sfp_lock_acquire>:
 800c520:	4801      	ldr	r0, [pc, #4]	; (800c528 <__sfp_lock_acquire+0x8>)
 800c522:	f000 b8b3 	b.w	800c68c <__retarget_lock_acquire_recursive>
 800c526:	bf00      	nop
 800c528:	2000876c 	.word	0x2000876c

0800c52c <__sfp_lock_release>:
 800c52c:	4801      	ldr	r0, [pc, #4]	; (800c534 <__sfp_lock_release+0x8>)
 800c52e:	f000 b8ae 	b.w	800c68e <__retarget_lock_release_recursive>
 800c532:	bf00      	nop
 800c534:	2000876c 	.word	0x2000876c

0800c538 <__sinit_lock_acquire>:
 800c538:	4801      	ldr	r0, [pc, #4]	; (800c540 <__sinit_lock_acquire+0x8>)
 800c53a:	f000 b8a7 	b.w	800c68c <__retarget_lock_acquire_recursive>
 800c53e:	bf00      	nop
 800c540:	20008767 	.word	0x20008767

0800c544 <__sinit_lock_release>:
 800c544:	4801      	ldr	r0, [pc, #4]	; (800c54c <__sinit_lock_release+0x8>)
 800c546:	f000 b8a2 	b.w	800c68e <__retarget_lock_release_recursive>
 800c54a:	bf00      	nop
 800c54c:	20008767 	.word	0x20008767

0800c550 <__sinit>:
 800c550:	b510      	push	{r4, lr}
 800c552:	4604      	mov	r4, r0
 800c554:	f7ff fff0 	bl	800c538 <__sinit_lock_acquire>
 800c558:	69a3      	ldr	r3, [r4, #24]
 800c55a:	b11b      	cbz	r3, 800c564 <__sinit+0x14>
 800c55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c560:	f7ff bff0 	b.w	800c544 <__sinit_lock_release>
 800c564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c568:	6523      	str	r3, [r4, #80]	; 0x50
 800c56a:	4b13      	ldr	r3, [pc, #76]	; (800c5b8 <__sinit+0x68>)
 800c56c:	4a13      	ldr	r2, [pc, #76]	; (800c5bc <__sinit+0x6c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	62a2      	str	r2, [r4, #40]	; 0x28
 800c572:	42a3      	cmp	r3, r4
 800c574:	bf04      	itt	eq
 800c576:	2301      	moveq	r3, #1
 800c578:	61a3      	streq	r3, [r4, #24]
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 f820 	bl	800c5c0 <__sfp>
 800c580:	6060      	str	r0, [r4, #4]
 800c582:	4620      	mov	r0, r4
 800c584:	f000 f81c 	bl	800c5c0 <__sfp>
 800c588:	60a0      	str	r0, [r4, #8]
 800c58a:	4620      	mov	r0, r4
 800c58c:	f000 f818 	bl	800c5c0 <__sfp>
 800c590:	2200      	movs	r2, #0
 800c592:	60e0      	str	r0, [r4, #12]
 800c594:	2104      	movs	r1, #4
 800c596:	6860      	ldr	r0, [r4, #4]
 800c598:	f7ff ff82 	bl	800c4a0 <std>
 800c59c:	68a0      	ldr	r0, [r4, #8]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	2109      	movs	r1, #9
 800c5a2:	f7ff ff7d 	bl	800c4a0 <std>
 800c5a6:	68e0      	ldr	r0, [r4, #12]
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	2112      	movs	r1, #18
 800c5ac:	f7ff ff78 	bl	800c4a0 <std>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	61a3      	str	r3, [r4, #24]
 800c5b4:	e7d2      	b.n	800c55c <__sinit+0xc>
 800c5b6:	bf00      	nop
 800c5b8:	0800ca84 	.word	0x0800ca84
 800c5bc:	0800c4e9 	.word	0x0800c4e9

0800c5c0 <__sfp>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	4607      	mov	r7, r0
 800c5c4:	f7ff ffac 	bl	800c520 <__sfp_lock_acquire>
 800c5c8:	4b1e      	ldr	r3, [pc, #120]	; (800c644 <__sfp+0x84>)
 800c5ca:	681e      	ldr	r6, [r3, #0]
 800c5cc:	69b3      	ldr	r3, [r6, #24]
 800c5ce:	b913      	cbnz	r3, 800c5d6 <__sfp+0x16>
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7ff ffbd 	bl	800c550 <__sinit>
 800c5d6:	3648      	adds	r6, #72	; 0x48
 800c5d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	d503      	bpl.n	800c5e8 <__sfp+0x28>
 800c5e0:	6833      	ldr	r3, [r6, #0]
 800c5e2:	b30b      	cbz	r3, 800c628 <__sfp+0x68>
 800c5e4:	6836      	ldr	r6, [r6, #0]
 800c5e6:	e7f7      	b.n	800c5d8 <__sfp+0x18>
 800c5e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5ec:	b9d5      	cbnz	r5, 800c624 <__sfp+0x64>
 800c5ee:	4b16      	ldr	r3, [pc, #88]	; (800c648 <__sfp+0x88>)
 800c5f0:	60e3      	str	r3, [r4, #12]
 800c5f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5f6:	6665      	str	r5, [r4, #100]	; 0x64
 800c5f8:	f000 f847 	bl	800c68a <__retarget_lock_init_recursive>
 800c5fc:	f7ff ff96 	bl	800c52c <__sfp_lock_release>
 800c600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c608:	6025      	str	r5, [r4, #0]
 800c60a:	61a5      	str	r5, [r4, #24]
 800c60c:	2208      	movs	r2, #8
 800c60e:	4629      	mov	r1, r5
 800c610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c614:	f7fd fb0a 	bl	8009c2c <memset>
 800c618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c61c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c620:	4620      	mov	r0, r4
 800c622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c624:	3468      	adds	r4, #104	; 0x68
 800c626:	e7d9      	b.n	800c5dc <__sfp+0x1c>
 800c628:	2104      	movs	r1, #4
 800c62a:	4638      	mov	r0, r7
 800c62c:	f7ff ff62 	bl	800c4f4 <__sfmoreglue>
 800c630:	4604      	mov	r4, r0
 800c632:	6030      	str	r0, [r6, #0]
 800c634:	2800      	cmp	r0, #0
 800c636:	d1d5      	bne.n	800c5e4 <__sfp+0x24>
 800c638:	f7ff ff78 	bl	800c52c <__sfp_lock_release>
 800c63c:	230c      	movs	r3, #12
 800c63e:	603b      	str	r3, [r7, #0]
 800c640:	e7ee      	b.n	800c620 <__sfp+0x60>
 800c642:	bf00      	nop
 800c644:	0800ca84 	.word	0x0800ca84
 800c648:	ffff0001 	.word	0xffff0001

0800c64c <_fwalk_reent>:
 800c64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c650:	4606      	mov	r6, r0
 800c652:	4688      	mov	r8, r1
 800c654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c658:	2700      	movs	r7, #0
 800c65a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c65e:	f1b9 0901 	subs.w	r9, r9, #1
 800c662:	d505      	bpl.n	800c670 <_fwalk_reent+0x24>
 800c664:	6824      	ldr	r4, [r4, #0]
 800c666:	2c00      	cmp	r4, #0
 800c668:	d1f7      	bne.n	800c65a <_fwalk_reent+0xe>
 800c66a:	4638      	mov	r0, r7
 800c66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c670:	89ab      	ldrh	r3, [r5, #12]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d907      	bls.n	800c686 <_fwalk_reent+0x3a>
 800c676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c67a:	3301      	adds	r3, #1
 800c67c:	d003      	beq.n	800c686 <_fwalk_reent+0x3a>
 800c67e:	4629      	mov	r1, r5
 800c680:	4630      	mov	r0, r6
 800c682:	47c0      	blx	r8
 800c684:	4307      	orrs	r7, r0
 800c686:	3568      	adds	r5, #104	; 0x68
 800c688:	e7e9      	b.n	800c65e <_fwalk_reent+0x12>

0800c68a <__retarget_lock_init_recursive>:
 800c68a:	4770      	bx	lr

0800c68c <__retarget_lock_acquire_recursive>:
 800c68c:	4770      	bx	lr

0800c68e <__retarget_lock_release_recursive>:
 800c68e:	4770      	bx	lr

0800c690 <__swhatbuf_r>:
 800c690:	b570      	push	{r4, r5, r6, lr}
 800c692:	460e      	mov	r6, r1
 800c694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c698:	2900      	cmp	r1, #0
 800c69a:	b096      	sub	sp, #88	; 0x58
 800c69c:	4614      	mov	r4, r2
 800c69e:	461d      	mov	r5, r3
 800c6a0:	da07      	bge.n	800c6b2 <__swhatbuf_r+0x22>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	602b      	str	r3, [r5, #0]
 800c6a6:	89b3      	ldrh	r3, [r6, #12]
 800c6a8:	061a      	lsls	r2, r3, #24
 800c6aa:	d410      	bmi.n	800c6ce <__swhatbuf_r+0x3e>
 800c6ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6b0:	e00e      	b.n	800c6d0 <__swhatbuf_r+0x40>
 800c6b2:	466a      	mov	r2, sp
 800c6b4:	f000 f902 	bl	800c8bc <_fstat_r>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	dbf2      	blt.n	800c6a2 <__swhatbuf_r+0x12>
 800c6bc:	9a01      	ldr	r2, [sp, #4]
 800c6be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6c6:	425a      	negs	r2, r3
 800c6c8:	415a      	adcs	r2, r3
 800c6ca:	602a      	str	r2, [r5, #0]
 800c6cc:	e7ee      	b.n	800c6ac <__swhatbuf_r+0x1c>
 800c6ce:	2340      	movs	r3, #64	; 0x40
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	6023      	str	r3, [r4, #0]
 800c6d4:	b016      	add	sp, #88	; 0x58
 800c6d6:	bd70      	pop	{r4, r5, r6, pc}

0800c6d8 <__smakebuf_r>:
 800c6d8:	898b      	ldrh	r3, [r1, #12]
 800c6da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6dc:	079d      	lsls	r5, r3, #30
 800c6de:	4606      	mov	r6, r0
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	d507      	bpl.n	800c6f4 <__smakebuf_r+0x1c>
 800c6e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	6123      	str	r3, [r4, #16]
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	6163      	str	r3, [r4, #20]
 800c6f0:	b002      	add	sp, #8
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}
 800c6f4:	ab01      	add	r3, sp, #4
 800c6f6:	466a      	mov	r2, sp
 800c6f8:	f7ff ffca 	bl	800c690 <__swhatbuf_r>
 800c6fc:	9900      	ldr	r1, [sp, #0]
 800c6fe:	4605      	mov	r5, r0
 800c700:	4630      	mov	r0, r6
 800c702:	f7ff f987 	bl	800ba14 <_malloc_r>
 800c706:	b948      	cbnz	r0, 800c71c <__smakebuf_r+0x44>
 800c708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70c:	059a      	lsls	r2, r3, #22
 800c70e:	d4ef      	bmi.n	800c6f0 <__smakebuf_r+0x18>
 800c710:	f023 0303 	bic.w	r3, r3, #3
 800c714:	f043 0302 	orr.w	r3, r3, #2
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	e7e3      	b.n	800c6e4 <__smakebuf_r+0xc>
 800c71c:	4b0d      	ldr	r3, [pc, #52]	; (800c754 <__smakebuf_r+0x7c>)
 800c71e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	6020      	str	r0, [r4, #0]
 800c724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c728:	81a3      	strh	r3, [r4, #12]
 800c72a:	9b00      	ldr	r3, [sp, #0]
 800c72c:	6163      	str	r3, [r4, #20]
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	6120      	str	r0, [r4, #16]
 800c732:	b15b      	cbz	r3, 800c74c <__smakebuf_r+0x74>
 800c734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c738:	4630      	mov	r0, r6
 800c73a:	f000 f8d1 	bl	800c8e0 <_isatty_r>
 800c73e:	b128      	cbz	r0, 800c74c <__smakebuf_r+0x74>
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	f023 0303 	bic.w	r3, r3, #3
 800c746:	f043 0301 	orr.w	r3, r3, #1
 800c74a:	81a3      	strh	r3, [r4, #12]
 800c74c:	89a0      	ldrh	r0, [r4, #12]
 800c74e:	4305      	orrs	r5, r0
 800c750:	81a5      	strh	r5, [r4, #12]
 800c752:	e7cd      	b.n	800c6f0 <__smakebuf_r+0x18>
 800c754:	0800c4e9 	.word	0x0800c4e9

0800c758 <_malloc_usable_size_r>:
 800c758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c75c:	1f18      	subs	r0, r3, #4
 800c75e:	2b00      	cmp	r3, #0
 800c760:	bfbc      	itt	lt
 800c762:	580b      	ldrlt	r3, [r1, r0]
 800c764:	18c0      	addlt	r0, r0, r3
 800c766:	4770      	bx	lr

0800c768 <_raise_r>:
 800c768:	291f      	cmp	r1, #31
 800c76a:	b538      	push	{r3, r4, r5, lr}
 800c76c:	4604      	mov	r4, r0
 800c76e:	460d      	mov	r5, r1
 800c770:	d904      	bls.n	800c77c <_raise_r+0x14>
 800c772:	2316      	movs	r3, #22
 800c774:	6003      	str	r3, [r0, #0]
 800c776:	f04f 30ff 	mov.w	r0, #4294967295
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c77e:	b112      	cbz	r2, 800c786 <_raise_r+0x1e>
 800c780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c784:	b94b      	cbnz	r3, 800c79a <_raise_r+0x32>
 800c786:	4620      	mov	r0, r4
 800c788:	f000 f830 	bl	800c7ec <_getpid_r>
 800c78c:	462a      	mov	r2, r5
 800c78e:	4601      	mov	r1, r0
 800c790:	4620      	mov	r0, r4
 800c792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c796:	f000 b817 	b.w	800c7c8 <_kill_r>
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d00a      	beq.n	800c7b4 <_raise_r+0x4c>
 800c79e:	1c59      	adds	r1, r3, #1
 800c7a0:	d103      	bne.n	800c7aa <_raise_r+0x42>
 800c7a2:	2316      	movs	r3, #22
 800c7a4:	6003      	str	r3, [r0, #0]
 800c7a6:	2001      	movs	r0, #1
 800c7a8:	e7e7      	b.n	800c77a <_raise_r+0x12>
 800c7aa:	2400      	movs	r4, #0
 800c7ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	4798      	blx	r3
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	e7e0      	b.n	800c77a <_raise_r+0x12>

0800c7b8 <raise>:
 800c7b8:	4b02      	ldr	r3, [pc, #8]	; (800c7c4 <raise+0xc>)
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	6818      	ldr	r0, [r3, #0]
 800c7be:	f7ff bfd3 	b.w	800c768 <_raise_r>
 800c7c2:	bf00      	nop
 800c7c4:	20000014 	.word	0x20000014

0800c7c8 <_kill_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4d07      	ldr	r5, [pc, #28]	; (800c7e8 <_kill_r+0x20>)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	4608      	mov	r0, r1
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	602b      	str	r3, [r5, #0]
 800c7d6:	f7f5 fb11 	bl	8001dfc <_kill>
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	d102      	bne.n	800c7e4 <_kill_r+0x1c>
 800c7de:	682b      	ldr	r3, [r5, #0]
 800c7e0:	b103      	cbz	r3, 800c7e4 <_kill_r+0x1c>
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	bd38      	pop	{r3, r4, r5, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20008760 	.word	0x20008760

0800c7ec <_getpid_r>:
 800c7ec:	f7f5 bafe 	b.w	8001dec <_getpid>

0800c7f0 <__sread>:
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f8:	f000 f894 	bl	800c924 <_read_r>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	bfab      	itete	ge
 800c800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c802:	89a3      	ldrhlt	r3, [r4, #12]
 800c804:	181b      	addge	r3, r3, r0
 800c806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c80a:	bfac      	ite	ge
 800c80c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c80e:	81a3      	strhlt	r3, [r4, #12]
 800c810:	bd10      	pop	{r4, pc}

0800c812 <__swrite>:
 800c812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c816:	461f      	mov	r7, r3
 800c818:	898b      	ldrh	r3, [r1, #12]
 800c81a:	05db      	lsls	r3, r3, #23
 800c81c:	4605      	mov	r5, r0
 800c81e:	460c      	mov	r4, r1
 800c820:	4616      	mov	r6, r2
 800c822:	d505      	bpl.n	800c830 <__swrite+0x1e>
 800c824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c828:	2302      	movs	r3, #2
 800c82a:	2200      	movs	r2, #0
 800c82c:	f000 f868 	bl	800c900 <_lseek_r>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c83a:	81a3      	strh	r3, [r4, #12]
 800c83c:	4632      	mov	r2, r6
 800c83e:	463b      	mov	r3, r7
 800c840:	4628      	mov	r0, r5
 800c842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c846:	f000 b817 	b.w	800c878 <_write_r>

0800c84a <__sseek>:
 800c84a:	b510      	push	{r4, lr}
 800c84c:	460c      	mov	r4, r1
 800c84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c852:	f000 f855 	bl	800c900 <_lseek_r>
 800c856:	1c43      	adds	r3, r0, #1
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	bf15      	itete	ne
 800c85c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c85e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c866:	81a3      	strheq	r3, [r4, #12]
 800c868:	bf18      	it	ne
 800c86a:	81a3      	strhne	r3, [r4, #12]
 800c86c:	bd10      	pop	{r4, pc}

0800c86e <__sclose>:
 800c86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c872:	f000 b813 	b.w	800c89c <_close_r>
	...

0800c878 <_write_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d07      	ldr	r5, [pc, #28]	; (800c898 <_write_r+0x20>)
 800c87c:	4604      	mov	r4, r0
 800c87e:	4608      	mov	r0, r1
 800c880:	4611      	mov	r1, r2
 800c882:	2200      	movs	r2, #0
 800c884:	602a      	str	r2, [r5, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	f7f5 faef 	bl	8001e6a <_write>
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	d102      	bne.n	800c896 <_write_r+0x1e>
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	b103      	cbz	r3, 800c896 <_write_r+0x1e>
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	bd38      	pop	{r3, r4, r5, pc}
 800c898:	20008760 	.word	0x20008760

0800c89c <_close_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4d06      	ldr	r5, [pc, #24]	; (800c8b8 <_close_r+0x1c>)
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	4608      	mov	r0, r1
 800c8a6:	602b      	str	r3, [r5, #0]
 800c8a8:	f7f5 fafb 	bl	8001ea2 <_close>
 800c8ac:	1c43      	adds	r3, r0, #1
 800c8ae:	d102      	bne.n	800c8b6 <_close_r+0x1a>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	b103      	cbz	r3, 800c8b6 <_close_r+0x1a>
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	bd38      	pop	{r3, r4, r5, pc}
 800c8b8:	20008760 	.word	0x20008760

0800c8bc <_fstat_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4d07      	ldr	r5, [pc, #28]	; (800c8dc <_fstat_r+0x20>)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	602b      	str	r3, [r5, #0]
 800c8ca:	f7f5 faf6 	bl	8001eba <_fstat>
 800c8ce:	1c43      	adds	r3, r0, #1
 800c8d0:	d102      	bne.n	800c8d8 <_fstat_r+0x1c>
 800c8d2:	682b      	ldr	r3, [r5, #0]
 800c8d4:	b103      	cbz	r3, 800c8d8 <_fstat_r+0x1c>
 800c8d6:	6023      	str	r3, [r4, #0]
 800c8d8:	bd38      	pop	{r3, r4, r5, pc}
 800c8da:	bf00      	nop
 800c8dc:	20008760 	.word	0x20008760

0800c8e0 <_isatty_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4d06      	ldr	r5, [pc, #24]	; (800c8fc <_isatty_r+0x1c>)
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	602b      	str	r3, [r5, #0]
 800c8ec:	f7f5 faf5 	bl	8001eda <_isatty>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_isatty_r+0x1a>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_isatty_r+0x1a>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	20008760 	.word	0x20008760

0800c900 <_lseek_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d07      	ldr	r5, [pc, #28]	; (800c920 <_lseek_r+0x20>)
 800c904:	4604      	mov	r4, r0
 800c906:	4608      	mov	r0, r1
 800c908:	4611      	mov	r1, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	602a      	str	r2, [r5, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f5 faee 	bl	8001ef0 <_lseek>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_lseek_r+0x1e>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_lseek_r+0x1e>
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	20008760 	.word	0x20008760

0800c924 <_read_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4d07      	ldr	r5, [pc, #28]	; (800c944 <_read_r+0x20>)
 800c928:	4604      	mov	r4, r0
 800c92a:	4608      	mov	r0, r1
 800c92c:	4611      	mov	r1, r2
 800c92e:	2200      	movs	r2, #0
 800c930:	602a      	str	r2, [r5, #0]
 800c932:	461a      	mov	r2, r3
 800c934:	f7f5 fa7c 	bl	8001e30 <_read>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d102      	bne.n	800c942 <_read_r+0x1e>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	b103      	cbz	r3, 800c942 <_read_r+0x1e>
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	20008760 	.word	0x20008760

0800c948 <_init>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	bf00      	nop
 800c94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94e:	bc08      	pop	{r3}
 800c950:	469e      	mov	lr, r3
 800c952:	4770      	bx	lr

0800c954 <_fini>:
 800c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c956:	bf00      	nop
 800c958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95a:	bc08      	pop	{r3}
 800c95c:	469e      	mov	lr, r3
 800c95e:	4770      	bx	lr
